{"ast":null,"code":"///////////////////////////////////////////////////////////////////////////////\n// Copyright (C) 2002-2021, Open Design Alliance (the \"Alliance\").\n// All rights reserved.\n//\n// This software and its documentation and related materials are owned by\n// the Alliance. The software may only be incorporated into application\n// programs owned by members of the Alliance, subject to a signed\n// Membership Agreement and Supplemental Software License Agreement with the\n// Alliance. The structure and organization of this software are the valuable\n// trade secrets of the Alliance and its suppliers. The software is also\n// protected by copyright law and international treaty provisions. Application\n// programs incorporating this software must include the following statement\n// with their copyright notices:\n//\n//   This application incorporates Open Design Alliance software pursuant to a\n//   license agreement with Open Design Alliance.\n//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.\n//   All rights reserved.\n//\n// By use of this software, its documentation or related materials, you\n// acknowledge and accept the above terms.\n///////////////////////////////////////////////////////////////////////////////\nexport const TYPES = {\n  ADD_NOTIFICATION: \"ADD_NOTIFICATION\",\n  REMOVE_NOTIFICATION: \"REMOVE_NOTIFICATION\"\n};\nexport const actions = {\n  addNotification: (type, text) => dispatch => {\n    dispatch({\n      type: TYPES.ADD_NOTIFICATION,\n      payload: {\n        type,\n        text\n      }\n    });\n  },\n  removeNotification: id => dispatch => {\n    dispatch({\n      type: TYPES.REMOVE_NOTIFICATION,\n      payload: id\n    });\n  }\n};\nexport const reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    list: [],\n    nextId: 0\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case TYPES.ADD_NOTIFICATION:\n      return { ...state,\n        list: state.list.concat({ ...action.payload,\n          id: state.nextId\n        }),\n        nextId: ++state.nextId\n      };\n\n    case TYPES.REMOVE_NOTIFICATION:\n      return { ...state,\n        list: state.list.filter(item => item.id !== action.payload)\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/yutianjian/test/oda/src/redux/notification.js"],"names":["TYPES","ADD_NOTIFICATION","REMOVE_NOTIFICATION","actions","addNotification","type","text","dispatch","payload","removeNotification","id","reducer","state","list","nextId","action","concat","filter","item"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,KAAK,GAAG;AACnBC,EAAAA,gBAAgB,EAAE,kBADC;AAEnBC,EAAAA,mBAAmB,EAAE;AAFF,CAAd;AAKP,OAAO,MAAMC,OAAO,GAAG;AACrBC,EAAAA,eAAe,EAAE,CAACC,IAAD,EAAOC,IAAP,KAAiBC,QAAD,IAAc;AAC7CA,IAAAA,QAAQ,CAAC;AAAEF,MAAAA,IAAI,EAAEL,KAAK,CAACC,gBAAd;AAAgCO,MAAAA,OAAO,EAAE;AAAEH,QAAAA,IAAF;AAAQC,QAAAA;AAAR;AAAzC,KAAD,CAAR;AACD,GAHoB;AAIrBG,EAAAA,kBAAkB,EAAGC,EAAD,IAASH,QAAD,IAAc;AACxCA,IAAAA,QAAQ,CAAC;AAAEF,MAAAA,IAAI,EAAEL,KAAK,CAACE,mBAAd;AAAmCM,MAAAA,OAAO,EAAEE;AAA5C,KAAD,CAAR;AACD;AANoB,CAAhB;AASP,OAAO,MAAMC,OAAO,GAAG,YAMlB;AAAA,MALHC,KAKG,uEALK;AACNC,IAAAA,IAAI,EAAE,EADA;AAENC,IAAAA,MAAM,EAAE;AAFF,GAKL;AAAA,MADHC,MACG;;AACH,UAAQA,MAAM,CAACV,IAAf;AACE,SAAKL,KAAK,CAACC,gBAAX;AACE,aAAO,EACL,GAAGW,KADE;AAELC,QAAAA,IAAI,EAAED,KAAK,CAACC,IAAN,CAAWG,MAAX,CAAkB,EAAE,GAAGD,MAAM,CAACP,OAAZ;AAAqBE,UAAAA,EAAE,EAAEE,KAAK,CAACE;AAA/B,SAAlB,CAFD;AAGLA,QAAAA,MAAM,EAAE,EAAEF,KAAK,CAACE;AAHX,OAAP;;AAKF,SAAKd,KAAK,CAACE,mBAAX;AACE,aAAO,EACL,GAAGU,KADE;AAELC,QAAAA,IAAI,EAAED,KAAK,CAACC,IAAN,CAAWI,MAAX,CAAmBC,IAAD,IAAUA,IAAI,CAACR,EAAL,KAAYK,MAAM,CAACP,OAA/C;AAFD,OAAP;;AAIF;AACE,aAAOI,KAAP;AAbJ;AAeD,CAtBM","sourcesContent":["///////////////////////////////////////////////////////////////////////////////\n// Copyright (C) 2002-2021, Open Design Alliance (the \"Alliance\").\n// All rights reserved.\n//\n// This software and its documentation and related materials are owned by\n// the Alliance. The software may only be incorporated into application\n// programs owned by members of the Alliance, subject to a signed\n// Membership Agreement and Supplemental Software License Agreement with the\n// Alliance. The structure and organization of this software are the valuable\n// trade secrets of the Alliance and its suppliers. The software is also\n// protected by copyright law and international treaty provisions. Application\n// programs incorporating this software must include the following statement\n// with their copyright notices:\n//\n//   This application incorporates Open Design Alliance software pursuant to a\n//   license agreement with Open Design Alliance.\n//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.\n//   All rights reserved.\n//\n// By use of this software, its documentation or related materials, you\n// acknowledge and accept the above terms.\n///////////////////////////////////////////////////////////////////////////////\nexport const TYPES = {\n  ADD_NOTIFICATION: \"ADD_NOTIFICATION\",\n  REMOVE_NOTIFICATION: \"REMOVE_NOTIFICATION\",\n};\n\nexport const actions = {\n  addNotification: (type, text) => (dispatch) => {\n    dispatch({ type: TYPES.ADD_NOTIFICATION, payload: { type, text } });\n  },\n  removeNotification: (id) => (dispatch) => {\n    dispatch({ type: TYPES.REMOVE_NOTIFICATION, payload: id });\n  },\n};\n\nexport const reducer = (\n  state = {\n    list: [],\n    nextId: 0,\n  },\n  action\n) => {\n  switch (action.type) {\n    case TYPES.ADD_NOTIFICATION:\n      return {\n        ...state,\n        list: state.list.concat({ ...action.payload, id: state.nextId }),\n        nextId: ++state.nextId,\n      };\n    case TYPES.REMOVE_NOTIFICATION:\n      return {\n        ...state,\n        list: state.list.filter((item) => item.id !== action.payload),\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}