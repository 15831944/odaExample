{"ast":null,"code":"///////////////////////////////////////////////////////////////////////////////\n// Copyright (C) 2002-2021, Open Design Alliance (the \"Alliance\").\n// All rights reserved.\n//\n// This software and its documentation and related materials are owned by\n// the Alliance. The software may only be incorporated into application\n// programs owned by members of the Alliance, subject to a signed\n// Membership Agreement and Supplemental Software License Agreement with the\n// Alliance. The structure and organization of this software are the valuable\n// trade secrets of the Alliance and its suppliers. The software is also\n// protected by copyright law and international treaty provisions. Application\n// programs incorporating this software must include the following statement\n// with their copyright notices:\n//\n//   This application incorporates Open Design Alliance software pursuant to a\n//   license agreement with Open Design Alliance.\n//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.\n//   All rights reserved.\n//\n// By use of this software, its documentation or related materials, you\n// acknowledge and accept the above terms.\n///////////////////////////////////////////////////////////////////////////////\nexport const TYPES = {\n  REGISTER_REQUEST: \"REGISTER_REQUEST\",\n  REGISTER_RESPONSE: \"REGISTER_RESPONSE\",\n  REGISTER_ERROR: \"REGISTER_ERROR\",\n  ADD_NOTIFICATION: \"ADD_NOTIFICATION\"\n};\nexport const actions = {\n  register: _ref => {\n    let {\n      email,\n      username,\n      password\n    } = _ref;\n    return async (dispatch, getState) => {\n      const state = getState();\n      const config = state.config;\n      dispatch({\n        type: TYPES.REGISTER_REQUEST\n      });\n      const json = JSON.stringify({\n        username,\n        email,\n        password\n      });\n      return fetch(`${config.data.registration_host}/register`, {\n        method: \"POST\",\n        body: json,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(responce => responce.json()).then(responce => {\n        if (responce.isOk === false && responce.description) {\n          dispatch({\n            type: TYPES.REGISTER_ERROR,\n            payload: responce.description\n          });\n          dispatch({\n            type: TYPES.ADD_NOTIFICATION,\n            payload: {\n              type: \"error\",\n              text: responce.description\n            }\n          });\n        } else {\n          dispatch({\n            type: TYPES.REGISTER_RESPONSE,\n            payload: responce\n          });\n          dispatch({\n            type: TYPES.ADD_NOTIFICATION,\n            payload: {\n              type: \"success\",\n              text: \"User has been registered\"\n            }\n          });\n        }\n      }).catch(err => {\n        dispatch({\n          type: TYPES.REGISTER_ERROR,\n          payload: err.message\n        });\n        dispatch({\n          type: TYPES.ADD_NOTIFICATION,\n          payload: {\n            type: \"error\",\n            text: err.message\n          }\n        });\n      });\n    };\n  },\n  clearError: () => dispatch => {\n    dispatch({\n      type: TYPES.REGISTER_ERROR,\n      payload: null\n    });\n  }\n};\nexport const reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    loading: false,\n    error: null,\n    data: null,\n    emailVerify: false\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case TYPES.REGISTER_REQUEST:\n      return { ...state,\n        loading: true,\n        error: null,\n        data: null,\n        emailVerify: false\n      };\n\n    case TYPES.REGISTER_RESPONSE:\n      return { ...state,\n        loading: false,\n        error: null,\n        data: action.payload,\n        emailVerify: action.payload.emailVerify\n      };\n\n    case TYPES.REGISTER_ERROR:\n      return { ...state,\n        loading: false,\n        error: action.payload,\n        data: null,\n        emailVerify: false\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/yutianjian/test/oda/src/redux/registration.js"],"names":["TYPES","REGISTER_REQUEST","REGISTER_RESPONSE","REGISTER_ERROR","ADD_NOTIFICATION","actions","register","email","username","password","dispatch","getState","state","config","type","json","JSON","stringify","fetch","data","registration_host","method","body","headers","then","responce","isOk","description","payload","text","catch","err","message","clearError","reducer","loading","error","emailVerify","action"],"mappings":"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","sourcesContent":["///////////////////////////////////////////////////////////////////////////////\n// Copyright (C) 2002-2021, Open Design Alliance (the \"Alliance\").\n// All rights reserved.\n//\n// This software and its documentation and related materials are owned by\n// the Alliance. The software may only be incorporated into application\n// programs owned by members of the Alliance, subject to a signed\n// Membership Agreement and Supplemental Software License Agreement with the\n// Alliance. The structure and organization of this software are the valuable\n// trade secrets of the Alliance and its suppliers. The software is also\n// protected by copyright law and international treaty provisions. Application\n// programs incorporating this software must include the following statement\n// with their copyright notices:\n//\n//   This application incorporates Open Design Alliance software pursuant to a\n//   license agreement with Open Design Alliance.\n//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.\n//   All rights reserved.\n//\n// By use of this software, its documentation or related materials, you\n// acknowledge and accept the above terms.\n///////////////////////////////////////////////////////////////////////////////\n\nexport const TYPES = {\n  REGISTER_REQUEST: \"REGISTER_REQUEST\",\n  REGISTER_RESPONSE: \"REGISTER_RESPONSE\",\n  REGISTER_ERROR: \"REGISTER_ERROR\",\n  ADD_NOTIFICATION: \"ADD_NOTIFICATION\",\n};\n\nexport const actions = {\n  register:\n    ({ email, username, password }) =>\n    async (dispatch, getState) => {\n      const state = getState();\n      const config = state.config;\n\n      dispatch({ type: TYPES.REGISTER_REQUEST });\n\n      const json = JSON.stringify({ username, email, password });\n\n      return fetch(`${config.data.registration_host}/register`, {\n        method: \"POST\",\n        body: json,\n        headers: { \"Content-Type\": \"application/json\" },\n      })\n        .then((responce) => responce.json())\n        .then((responce) => {\n          if (responce.isOk === false && responce.description) {\n            dispatch({\n              type: TYPES.REGISTER_ERROR,\n              payload: responce.description,\n            });\n            dispatch({\n              type: TYPES.ADD_NOTIFICATION,\n              payload: { type: \"error\", text: responce.description },\n            });\n          } else {\n            dispatch({ type: TYPES.REGISTER_RESPONSE, payload: responce });\n            dispatch({\n              type: TYPES.ADD_NOTIFICATION,\n              payload: { type: \"success\", text: \"User has been registered\" },\n            });\n          }\n        })\n        .catch((err) => {\n          dispatch({ type: TYPES.REGISTER_ERROR, payload: err.message });\n          dispatch({\n            type: TYPES.ADD_NOTIFICATION,\n            payload: { type: \"error\", text: err.message },\n          });\n        });\n    },\n\n  clearError: () => (dispatch) => {\n    dispatch({ type: TYPES.REGISTER_ERROR, payload: null });\n  },\n};\n\nexport const reducer = (\n  state = {\n    loading: false,\n    error: null,\n    data: null,\n    emailVerify: false,\n  },\n  action\n) => {\n  switch (action.type) {\n    case TYPES.REGISTER_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n        data: null,\n        emailVerify: false,\n      };\n    case TYPES.REGISTER_RESPONSE:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        data: action.payload,\n        emailVerify: action.payload.emailVerify,\n      };\n    case TYPES.REGISTER_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n        data: null,\n        emailVerify: false,\n      };\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}