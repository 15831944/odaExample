{"ast":null,"code":"var _jsxFileName = \"/Users/yutianjian/test/oda/src/viewer/ObjectExplorer.js\";\n///////////////////////////////////////////////////////////////////////////////\n// Copyright (C) 2002-2021, Open Design Alliance (the \"Alliance\").\n// All rights reserved.\n//\n// This software and its documentation and related materials are owned by\n// the Alliance. The software may only be incorporated into application\n// programs owned by members of the Alliance, subject to a signed\n// Membership Agreement and Supplemental Software License Agreement with the\n// Alliance. The structure and organization of this software are the valuable\n// trade secrets of the Alliance and its suppliers. The software is also\n// protected by copyright law and international treaty provisions. Application\n// programs incorporating this software must include the following statement\n// with their copyright notices:\n//\n//   This application incorporates Open Design Alliance software pursuant to a\n//   license agreement with Open Design Alliance.\n//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.\n//   All rights reserved.\n//\n// By use of this software, its documentation or related materials, you\n// acknowledge and accept the above terms.\n///////////////////////////////////////////////////////////////////////////////\nimport React, { Component } from \"react\";\nimport Window from \"./../components/Window\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EntityTypes = {\n  kUndefined: 0,\n  // An undefined type\n  kEntity: 1,\n  // An entity type.\n  kInsert: 2,\n  // An insert object.\n  kLight: 3 // A light object.\n\n};\nconst OdTvGeometryDataType = {\n  kUndefinied: 0,\n  // Undefined geometry.\n  kPolyline: 1,\n  // A polyline.\n  kCircle: 2,\n  // A circle.\n  kCircleWedge: 3,\n  // A circle wedge.\n  kCircularArc: 4,\n  // A circular arc.\n  kEllipse: 5,\n  // An ellipse.\n  kEllipticArc: 6,\n  // An elliptical arc.\n  kPolygon: 7,\n  // A polygon.\n  kText: 8,\n  // Text.\n  kShell: 9,\n  // A shell.\n  kSphere: 10,\n  // A sphere.\n  kCylinder: 11,\n  // A cylinder.\n  kSubInsert: 12,\n  // An insert sub-entity.\n  kSubEntity: 13,\n  // A sub-entity.\n  kNurbs: 14,\n  // A NURBS curve.\n  kRasterImage: 15,\n  // A raster image.\n  kInfiniteLine: 16,\n  // An infinite line.\n  kMesh: 17,\n  // A mesh.\n  kPointCloud: 18,\n  // A point cloud.\n  kGrid: 19,\n  // A grid.\n  kColoredShape: 20,\n  // A colored shape.\n  kBox: 21,\n  // A box.\n  kBrep: 22 // A boundary representation object.\n\n};\nconst TypeNameBinding = {\n  0: \"Undefined\",\n  // Undefined geometry.\n  1: \"Polyline\",\n  // A polyline.\n  2: \"Circle\",\n  // A circle.\n  3: \"CircleWedge\",\n  // A circle wedge.\n  4: \"CircularArc\",\n  // A circular arc.\n  5: \"Ellipse\",\n  // An ellipse.\n  6: \"EllipticArc\",\n  // An elliptical arc.\n  7: \"Polygon\",\n  // A polygon.\n  8: \"Text\",\n  // Text.\n  9: \"Shell\",\n  // A shell.\n  10: \"Sphere\",\n  // A sphere.\n  11: \"Cylinder\",\n  // A cylinder.\n  12: \"SubInsert\",\n  // An insert sub-entity.\n  13: \"kSubEntity\",\n  // A sub-entity.\n  14: \"Nurbs\",\n  // A NURBS curve.\n  15: \"RasterImage\",\n  // A raster image.\n  16: \"InfiniteLine\",\n  // An infinite line.\n  17: \"Mesh\",\n  // A mesh.\n  18: \"PointCloud\",\n  // A point cloud.\n  19: \"Grid\",\n  // A grid.\n  20: \"ColoredShape\",\n  // A colored shape.\n  21: \"Box\",\n  // A box.\n  22: \"Brep\" // A boundary representation object.\n\n};\nconst iterators = {\n  Model: {\n    pointer: it => it.getModel()\n  },\n  Block: {\n    pointer: it => it.getBlock().openObject()\n  },\n  Layers: {\n    pointer: it => it.getLayer().openObject()\n  },\n  Materials: {\n    pointer: it => it.getMaterial().openObject()\n  },\n  VisualStyles: {\n    pointer: it => it.getVisualStyle().openObject()\n  },\n  TextStyles: {\n    pointer: it => it.getTextStyle().openObject()\n  },\n  Devices: {\n    pointer: it => it.getDevice()\n  },\n  RasterImages: {\n    pointer: it => it.getRasterImage().openObject()\n  },\n  Linetype: {\n    pointer: it => it.getLinetype().openObject()\n  },\n  GeometryData: {\n    pointer: it => {\n      const geomId = it.getGeometryData();\n      const type = geomId.getType();\n\n      if (type === OdTvGeometryDataType.kSubEntity) {\n        return geomId.openAsSubEntity();\n      } else {\n        return geomId;\n      }\n    },\n    getName: pointer => {\n      if (pointer[\"getType\"]) {\n        return TypeNameBinding[pointer.getType()];\n      } else if (pointer[\"getName\"]) {\n        return `SubEntity ${pointer.getName()}`;\n      }\n\n      return pointer.$$.ptrType.registeredClass.name;\n    }\n  },\n  Entities: {\n    pointer: it => {\n      const entityId = it.getEntity();\n\n      if (entityId.getType() === EntityTypes.kEntity) {\n        return entityId.openObject();\n      } else if (entityId.getType() === EntityTypes.kInsert) {\n        return entityId.openObjectAsInsert();\n      } else {\n        return entityId.openObjectAsLight();\n      }\n    },\n    id: it => it.getEntity()\n  },\n  CDATree: {\n    pointer: it => {\n      return it.getCDATreeStorage().getTree().getDatabaseNode();\n    },\n    getName: pointer => pointer.getNodeName(),\n    id: it => {\n      return null;\n    }\n  },\n  children: {\n    pointer: it => {\n      return it.current();\n    },\n    getName: pointer => pointer.getNodeName(),\n    id: it => it.current().getTvEntityId()\n  }\n};\nconst ObjectExplorerContext = /*#__PURE__*/React.createContext(\"objectExplorer\");\n\nclass ObjectExplorer extends Component {\n  constructor() {\n    super(...arguments);\n    this.selected = null;\n\n    this.selectEntity = id => {\n      this.props.getProperties(id);\n    };\n  }\n\n  render() {\n    const {\n      viewer,\n      cda,\n      lib\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Window, {\n      className: \"object-explorer\",\n      title: \"Object Explorer\",\n      onClose: this.props.onClose,\n      children: /*#__PURE__*/_jsxDEV(ObjectExplorerContext.Provider, {\n        value: this,\n        children: cda ? /*#__PURE__*/_jsxDEV(CDATreeViewer, {\n          lib: lib,\n          viewer: viewer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 18\n        }, this) : /*#__PURE__*/_jsxDEV(OdNode, {\n          pointer: viewer,\n          viewer: viewer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 64\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nObjectExplorer.propTypes = {\n  onClose: PropTypes.func\n};\n\nfunction CDATreeViewer(props) {\n  const {\n    viewer,\n    lib\n  } = props;\n  const itr = viewer.getCDATreeIterator();\n  return /*#__PURE__*/_jsxDEV(CDAStorage, {\n    storage: itr.getCDATreeStorage(),\n    lib: lib,\n    viewer: viewer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 10\n  }, this);\n}\n\n_c = CDATreeViewer;\n\nfunction CDAStorage(props) {\n  const {\n    storage,\n    viewer,\n    lib\n  } = props;\n  const tree = storage.getTree();\n  const node = tree.getDatabaseNode();\n  return /*#__PURE__*/_jsxDEV(CDANode, {\n    node: node,\n    viewer: viewer,\n    lib: lib,\n    name: \"CDA\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 10\n  }, this);\n}\n\n_c2 = CDAStorage;\n\nclass CDANode extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      show: false,\n      hilight: false\n    };\n\n    this.toggle = () => this.setState({\n      show: !this.state.show\n    });\n\n    this.toggleHilight = active => this.setState({\n      hilight: active\n    });\n\n    this.select = node => {\n      if (this.context && node) {\n        this.context.selected && this.context.selected.toggleHilight(false);\n        this.context.selected = this;\n        this.toggleHilight(true);\n        node.getUniqueSourceID && this.context.selectEntity(node.getUniqueSourceID());\n      }\n\n      if (!this.props.viewer) return;\n      const entityId = node.getTvEntityId(this.props.viewer.activeView);\n\n      if (node.getChildren().length() === 0) {\n        this.props.viewer.setSelectedEntity(entityId);\n      } else {\n        const set = new this.props.lib.OdTvSelectionSet();\n        const childrens = node.getChildren();\n\n        for (let i = 0; i < childrens.length(); i++) {\n          const subNode = childrens.get(i);\n          const subEntityId = subNode.getTvEntityId(this.props.viewer.activeView);\n\n          if (!subEntityId.isNull()) {\n            set.appendEntity(subEntityId);\n          }\n        }\n\n        this.props.viewer.setSelected(set);\n      }\n    };\n\n    this.zoomIn = node => {\n      if (!this.props.viewer) return;\n      const entityId = node.getTvEntityId(this.props.viewer.activeView);\n\n      if (!entityId.isNull()) {\n        this.props.viewer.zoomToEntity(entityId);\n      }\n    };\n\n    this.generateChildrens = childrens => {\n      const list = [];\n      const length = childrens.length();\n\n      for (let i = 0; i < length; i++) {\n        list.push( /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(CDANode, {\n            node: childrens.get(i),\n            lib: this.props.lib,\n            viewer: this.props.viewer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 11\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 9\n        }, this));\n      }\n\n      return list;\n    };\n  }\n\n  render() {\n    const node = this.props.node;\n    const childrens = node.getChildren();\n    const childrensLen = childrens.length();\n    const name = this.props.name || node.getNodeName();\n    const show = this.state.show;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        cursor: \"pointer\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `d-flex ${this.state.hilight ? \"active\" : \"\"}`,\n        children: [childrensLen > 0 ? /*#__PURE__*/_jsxDEV(\"i\", {\n          onClick: this.toggle,\n          className: \"material-icons\",\n          children: show ? \"keyboard_arrow_down\" : \"keyboard_arrow_right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => this.select(node),\n          onDoubleClick: () => this.zoomIn(node),\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), show ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.generateChildrens(childrens)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nCDANode.contextType = ObjectExplorerContext;\n\nclass Iterator extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      count: 10,\n      show: false\n    };\n\n    this.toggle = () => this.setState({\n      show: !this.state.show\n    });\n\n    this.select = (id, pointer) => {\n      if (id && this.props.viewer) {\n        this.props.viewer.setSelectedEntity(id);\n\n        if (this.context && pointer) {\n          pointer.getNativeDatabaseHandle && this.context.selectEntity(pointer.getNativeDatabaseHandle());\n          pointer.getUniqueSourceID && this.context.selectEntity(pointer.getUniqueSourceID());\n        }\n      }\n    };\n\n    this.result = [];\n  }\n\n  render() {\n    const type = this.props.type;\n    const itr = this.props.itr;\n    const show = this.state.show;\n\n    if (show) {\n      for (let i = 0; !itr.done() && i < 100; itr.step(), i++) {\n        const handler = iterators[type];\n        const pointer = handler ? handler.pointer(itr) : null;\n        let name = pointer && pointer.getName ? pointer.getName() : null;\n\n        if (!name && handler.getName) {\n          name = handler.getName(pointer);\n        }\n\n        if (!name) {\n          name = pointer.$$.ptrType.registeredClass.name;\n        } // eslint-disable-next-line\n\n\n        const id = handler.id && handler.id(itr) || null;\n\n        if (name !== \"$M_View_0_WCS_MODEL\" && name !== \"$FOR_EFFECT\") {\n          this.result.push( /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(OdNode, {\n              pointer: pointer,\n              viewer: this.props.viewer,\n              onClick: () => this.select(id, pointer),\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 15\n            }, this)\n          }, pointer.$$.ptr, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }, this));\n        }\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          cursor: \"pointer\",\n          verticalAlign: \"middle\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          onClick: this.toggle,\n          className: \"material-icons\",\n          children: show ? \"keyboard_arrow_down\" : \"keyboard_arrow_right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this), type]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this), show ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 17\n      }, this) : null]\n    }, void 0, true);\n  }\n\n}\n\nIterator.contextType = ObjectExplorerContext;\n\nclass CDAChildrenIterator {\n  constructor(pointer) {\n    this.pointer = pointer;\n    this.index = 0;\n  }\n\n  done() {\n    return !(this.index < this.pointer.length());\n  }\n\n  step() {\n    this.index++;\n  }\n\n  current() {\n    return this.done() ? null : this.pointer.get(this.index);\n  }\n\n}\n\nclass OdNode extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      show: false\n    };\n\n    this.toggle = () => {\n      this.setState({\n        show: !this.state.show\n      });\n    };\n  }\n\n  render() {\n    const pointer = this.props.pointer || null;\n    const showCDA = this.props.showCDA || false;\n    let name = this.props.children || null;\n\n    if (!this.list) {\n      if (pointer) {\n        if (pointer.getChildren) {\n          console.log(\"pointer.getChildren\", pointer.getChildren);\n          const children = pointer.getChildren();\n          this.list = [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Iterator, {\n              itr: new CDAChildrenIterator(children),\n              type: \"children\",\n              viewer: this.props.viewer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 15\n            }, this)\n          }, 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 13\n          }, this)];\n        } else {\n          this.list = Object.keys(pointer.__proto__);\n\n          if (!showCDA) {\n            this.list = this.list.filter(key => key !== \"getCDATreeIterator\");\n          }\n\n          this.list = this.list.filter(key => /get\\w+Iterator/gi.test(key));\n          this.list = this.list.map((funcName, index) => {\n            const regex = /get(\\w+)Iterator/gi;\n            const match = regex.exec(funcName);\n            const name = match ? match[1] : null;\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(Iterator, {\n                itr: pointer[funcName](),\n                type: name,\n                viewer: this.props.viewer\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 17\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 15\n            }, this);\n          });\n        }\n      }\n    }\n\n    const show = this.state.show;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        cursor: \"pointer\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex\",\n        children: [this.list && this.list.length && name && name.length !== 0 ? /*#__PURE__*/_jsxDEV(\"i\", {\n          onClick: this.toggle,\n          className: \"material-icons\",\n          children: show ? \"keyboard_arrow_down\" : \"keyboard_arrow_right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 13\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: this.props.onClick,\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this), show || !name ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.list\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 26\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ObjectExplorer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CDATreeViewer\");\n$RefreshReg$(_c2, \"CDAStorage\");","map":{"version":3,"sources":["/Users/yutianjian/test/oda/src/viewer/ObjectExplorer.js"],"names":["React","Component","Window","PropTypes","EntityTypes","kUndefined","kEntity","kInsert","kLight","OdTvGeometryDataType","kUndefinied","kPolyline","kCircle","kCircleWedge","kCircularArc","kEllipse","kEllipticArc","kPolygon","kText","kShell","kSphere","kCylinder","kSubInsert","kSubEntity","kNurbs","kRasterImage","kInfiniteLine","kMesh","kPointCloud","kGrid","kColoredShape","kBox","kBrep","TypeNameBinding","iterators","Model","pointer","it","getModel","Block","getBlock","openObject","Layers","getLayer","Materials","getMaterial","VisualStyles","getVisualStyle","TextStyles","getTextStyle","Devices","getDevice","RasterImages","getRasterImage","Linetype","getLinetype","GeometryData","geomId","getGeometryData","type","getType","openAsSubEntity","getName","$$","ptrType","registeredClass","name","Entities","entityId","getEntity","openObjectAsInsert","openObjectAsLight","id","CDATree","getCDATreeStorage","getTree","getDatabaseNode","getNodeName","children","current","getTvEntityId","ObjectExplorerContext","createContext","ObjectExplorer","selected","selectEntity","props","getProperties","render","viewer","cda","lib","onClose","propTypes","func","CDATreeViewer","itr","getCDATreeIterator","CDAStorage","storage","tree","node","CDANode","state","show","hilight","toggle","setState","toggleHilight","active","select","context","getUniqueSourceID","activeView","getChildren","length","setSelectedEntity","set","OdTvSelectionSet","childrens","i","subNode","get","subEntityId","isNull","appendEntity","setSelected","zoomIn","zoomToEntity","generateChildrens","list","push","childrensLen","cursor","contextType","Iterator","count","getNativeDatabaseHandle","result","done","step","handler","ptr","verticalAlign","CDAChildrenIterator","constructor","index","OdNode","showCDA","console","log","Object","keys","__proto__","filter","key","test","map","funcName","regex","match","exec","onClick"],"mappings":"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","sourcesContent":["///////////////////////////////////////////////////////////////////////////////\n// Copyright (C) 2002-2021, Open Design Alliance (the \"Alliance\").\n// All rights reserved.\n//\n// This software and its documentation and related materials are owned by\n// the Alliance. The software may only be incorporated into application\n// programs owned by members of the Alliance, subject to a signed\n// Membership Agreement and Supplemental Software License Agreement with the\n// Alliance. The structure and organization of this software are the valuable\n// trade secrets of the Alliance and its suppliers. The software is also\n// protected by copyright law and international treaty provisions. Application\n// programs incorporating this software must include the following statement\n// with their copyright notices:\n//\n//   This application incorporates Open Design Alliance software pursuant to a\n//   license agreement with Open Design Alliance.\n//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.\n//   All rights reserved.\n//\n// By use of this software, its documentation or related materials, you\n// acknowledge and accept the above terms.\n///////////////////////////////////////////////////////////////////////////////\nimport React, { Component } from \"react\";\nimport Window from \"./../components/Window\";\nimport PropTypes from \"prop-types\";\n\nconst EntityTypes = {\n  kUndefined: 0, // An undefined type\n  kEntity: 1, // An entity type.\n  kInsert: 2, // An insert object.\n  kLight: 3, // A light object.\n};\n\nconst OdTvGeometryDataType = {\n  kUndefinied: 0, // Undefined geometry.\n  kPolyline: 1, // A polyline.\n  kCircle: 2, // A circle.\n  kCircleWedge: 3, // A circle wedge.\n  kCircularArc: 4, // A circular arc.\n  kEllipse: 5, // An ellipse.\n  kEllipticArc: 6, // An elliptical arc.\n  kPolygon: 7, // A polygon.\n  kText: 8, // Text.\n  kShell: 9, // A shell.\n  kSphere: 10, // A sphere.\n  kCylinder: 11, // A cylinder.\n  kSubInsert: 12, // An insert sub-entity.\n  kSubEntity: 13, // A sub-entity.\n  kNurbs: 14, // A NURBS curve.\n  kRasterImage: 15, // A raster image.\n  kInfiniteLine: 16, // An infinite line.\n  kMesh: 17, // A mesh.\n  kPointCloud: 18, // A point cloud.\n  kGrid: 19, // A grid.\n  kColoredShape: 20, // A colored shape.\n  kBox: 21, // A box.\n  kBrep: 22, // A boundary representation object.\n};\n\nconst TypeNameBinding = {\n  0: \"Undefined\", // Undefined geometry.\n  1: \"Polyline\", // A polyline.\n  2: \"Circle\", // A circle.\n  3: \"CircleWedge\", // A circle wedge.\n  4: \"CircularArc\", // A circular arc.\n  5: \"Ellipse\", // An ellipse.\n  6: \"EllipticArc\", // An elliptical arc.\n  7: \"Polygon\", // A polygon.\n  8: \"Text\", // Text.\n  9: \"Shell\", // A shell.\n  10: \"Sphere\", // A sphere.\n  11: \"Cylinder\", // A cylinder.\n  12: \"SubInsert\", // An insert sub-entity.\n  13: \"kSubEntity\", // A sub-entity.\n  14: \"Nurbs\", // A NURBS curve.\n  15: \"RasterImage\", // A raster image.\n  16: \"InfiniteLine\", // An infinite line.\n  17: \"Mesh\", // A mesh.\n  18: \"PointCloud\", // A point cloud.\n  19: \"Grid\", // A grid.\n  20: \"ColoredShape\", // A colored shape.\n  21: \"Box\", // A box.\n  22: \"Brep\", // A boundary representation object.\n};\n\nconst iterators = {\n  Model: { pointer: (it) => it.getModel() },\n  Block: { pointer: (it) => it.getBlock().openObject() },\n  Layers: { pointer: (it) => it.getLayer().openObject() },\n  Materials: { pointer: (it) => it.getMaterial().openObject() },\n  VisualStyles: { pointer: (it) => it.getVisualStyle().openObject() },\n  TextStyles: { pointer: (it) => it.getTextStyle().openObject() },\n  Devices: { pointer: (it) => it.getDevice() },\n  RasterImages: { pointer: (it) => it.getRasterImage().openObject() },\n  Linetype: { pointer: (it) => it.getLinetype().openObject() },\n  GeometryData: {\n    pointer: (it) => {\n      const geomId = it.getGeometryData();\n      const type = geomId.getType();\n      if (type === OdTvGeometryDataType.kSubEntity) {\n        return geomId.openAsSubEntity();\n      } else {\n        return geomId;\n      }\n    },\n    getName: (pointer) => {\n      if (pointer[\"getType\"]) {\n        return TypeNameBinding[pointer.getType()];\n      } else if (pointer[\"getName\"]) {\n        return `SubEntity ${pointer.getName()}`;\n      }\n      return pointer.$$.ptrType.registeredClass.name;\n    },\n  },\n  Entities: {\n    pointer: (it) => {\n      const entityId = it.getEntity();\n      if (entityId.getType() === EntityTypes.kEntity) {\n        return entityId.openObject();\n      } else if (entityId.getType() === EntityTypes.kInsert) {\n        return entityId.openObjectAsInsert();\n      } else {\n        return entityId.openObjectAsLight();\n      }\n    },\n    id: (it) => it.getEntity(),\n  },\n  CDATree: {\n    pointer: (it) => {\n      return it.getCDATreeStorage().getTree().getDatabaseNode();\n    },\n    getName: (pointer) => pointer.getNodeName(),\n    id: (it) => {\n      return null;\n    },\n  },\n  children: {\n    pointer: (it) => {\n      return it.current();\n    },\n    getName: (pointer) => pointer.getNodeName(),\n    id: (it) => it.current().getTvEntityId(),\n  },\n};\n\nconst ObjectExplorerContext = React.createContext(\"objectExplorer\");\n\nclass ObjectExplorer extends Component {\n  selected = null;\n\n  selectEntity = (id) => {\n    this.props.getProperties(id);\n  };\n\n  render() {\n    const { viewer, cda, lib } = this.props;\n    return (\n      <Window className=\"object-explorer\" title=\"Object Explorer\" onClose={this.props.onClose}>\n        <ObjectExplorerContext.Provider value={this}>\n          {cda ? <CDATreeViewer lib={lib} viewer={viewer} /> : <OdNode pointer={viewer} viewer={viewer} />}\n        </ObjectExplorerContext.Provider>\n      </Window>\n    );\n  }\n}\nObjectExplorer.propTypes = {\n  onClose: PropTypes.func,\n};\n\nfunction CDATreeViewer(props) {\n  const { viewer, lib } = props;\n  const itr = viewer.getCDATreeIterator();\n  return <CDAStorage storage={itr.getCDATreeStorage()} lib={lib} viewer={viewer} />;\n}\n\nfunction CDAStorage(props) {\n  const { storage, viewer, lib } = props;\n  const tree = storage.getTree();\n  const node = tree.getDatabaseNode();\n  return <CDANode node={node} viewer={viewer} lib={lib} name={\"CDA\"} />;\n}\n\nclass CDANode extends Component {\n  static contextType = ObjectExplorerContext;\n\n  state = { show: false, hilight: false };\n  toggle = () => this.setState({ show: !this.state.show });\n  toggleHilight = (active) => this.setState({ hilight: active });\n  select = (node) => {\n    if (this.context && node) {\n      this.context.selected && this.context.selected.toggleHilight(false);\n      this.context.selected = this;\n      this.toggleHilight(true);\n      node.getUniqueSourceID && this.context.selectEntity(node.getUniqueSourceID());\n    }\n\n    if (!this.props.viewer) return;\n\n    const entityId = node.getTvEntityId(this.props.viewer.activeView);\n\n    if (node.getChildren().length() === 0) {\n      this.props.viewer.setSelectedEntity(entityId);\n    } else {\n      const set = new this.props.lib.OdTvSelectionSet();\n\n      const childrens = node.getChildren();\n      for (let i = 0; i < childrens.length(); i++) {\n        const subNode = childrens.get(i);\n        const subEntityId = subNode.getTvEntityId(this.props.viewer.activeView);\n\n        if (!subEntityId.isNull()) {\n          set.appendEntity(subEntityId);\n        }\n      }\n      this.props.viewer.setSelected(set);\n    }\n  };\n  zoomIn = (node) => {\n    if (!this.props.viewer) return;\n    const entityId = node.getTvEntityId(this.props.viewer.activeView);\n    if (!entityId.isNull()) {\n      this.props.viewer.zoomToEntity(entityId);\n    }\n  };\n\n  generateChildrens = (childrens) => {\n    const list = [];\n    const length = childrens.length();\n    for (let i = 0; i < length; i++) {\n      list.push(\n        <li key={i}>\n          <CDANode node={childrens.get(i)} lib={this.props.lib} viewer={this.props.viewer} />\n        </li>\n      );\n    }\n    return list;\n  };\n\n  render() {\n    const node = this.props.node;\n    const childrens = node.getChildren();\n    const childrensLen = childrens.length();\n    const name = this.props.name || node.getNodeName();\n    const show = this.state.show;\n\n    return (\n      <div style={{ cursor: \"pointer\" }}>\n        <div className={`d-flex ${this.state.hilight ? \"active\" : \"\"}`}>\n          {childrensLen > 0 ? (\n            <i onClick={this.toggle} className=\"material-icons\">\n              {show ? \"keyboard_arrow_down\" : \"keyboard_arrow_right\"}\n            </i>\n          ) : null}\n          <span onClick={() => this.select(node)} onDoubleClick={() => this.zoomIn(node)}>\n            {name}\n          </span>\n        </div>\n        {show ? <ul>{this.generateChildrens(childrens)}</ul> : null}\n      </div>\n    );\n  }\n}\n\nclass Iterator extends Component {\n  state = { count: 10, show: false };\n\n  static contextType = ObjectExplorerContext;\n\n  toggle = () => this.setState({ show: !this.state.show });\n  select = (id, pointer) => {\n    if (id && this.props.viewer) {\n      this.props.viewer.setSelectedEntity(id);\n\n      if (this.context && pointer) {\n        pointer.getNativeDatabaseHandle && this.context.selectEntity(pointer.getNativeDatabaseHandle());\n        pointer.getUniqueSourceID && this.context.selectEntity(pointer.getUniqueSourceID());\n      }\n    }\n  };\n  result = [];\n\n  render() {\n    const type = this.props.type;\n    const itr = this.props.itr;\n\n    const show = this.state.show;\n    if (show) {\n      for (let i = 0; !itr.done() && i < 100; itr.step(), i++) {\n        const handler = iterators[type];\n        const pointer = handler ? handler.pointer(itr) : null;\n        let name = pointer && pointer.getName ? pointer.getName() : null;\n        if (!name && handler.getName) {\n          name = handler.getName(pointer);\n        }\n        if (!name) {\n          name = pointer.$$.ptrType.registeredClass.name;\n        }\n        // eslint-disable-next-line\n        const id = (handler.id && handler.id(itr)) || null;\n\n        if (name !== \"$M_View_0_WCS_MODEL\" && name !== \"$FOR_EFFECT\") {\n          this.result.push(\n            <li key={pointer.$$.ptr}>\n              <OdNode pointer={pointer} viewer={this.props.viewer} onClick={() => this.select(id, pointer)}>\n                {name}\n              </OdNode>\n            </li>\n          );\n        }\n      }\n    }\n\n    return (\n      <>\n        <div style={{ cursor: \"pointer\", verticalAlign: \"middle\" }}>\n          <i onClick={this.toggle} className=\"material-icons\">\n            {show ? \"keyboard_arrow_down\" : \"keyboard_arrow_right\"}\n          </i>\n          {type}\n        </div>\n        {show ? <ul>{this.result}</ul> : null}\n      </>\n    );\n  }\n}\n\nclass CDAChildrenIterator {\n  constructor(pointer) {\n    this.pointer = pointer;\n    this.index = 0;\n  }\n  done() {\n    return !(this.index < this.pointer.length());\n  }\n  step() {\n    this.index++;\n  }\n  current() {\n    return this.done() ? null : this.pointer.get(this.index);\n  }\n}\n\nclass OdNode extends Component {\n  state = { show: false };\n\n  toggle = () => {\n    this.setState({ show: !this.state.show });\n  };\n\n  render() {\n    const pointer = this.props.pointer || null;\n    const showCDA = this.props.showCDA || false;\n    let name = this.props.children || null;\n\n    if (!this.list) {\n      if (pointer) {\n        if (pointer.getChildren) {\n          console.log(\"pointer.getChildren\", pointer.getChildren);\n          const children = pointer.getChildren();\n          this.list = [\n            <li key={0}>\n              <Iterator itr={new CDAChildrenIterator(children)} type={\"children\"} viewer={this.props.viewer} />\n            </li>,\n          ];\n        } else {\n          this.list = Object.keys(pointer.__proto__);\n          if (!showCDA) {\n            this.list = this.list.filter((key) => key !== \"getCDATreeIterator\");\n          }\n          this.list = this.list.filter((key) => /get\\w+Iterator/gi.test(key));\n\n          this.list = this.list.map((funcName, index) => {\n            const regex = /get(\\w+)Iterator/gi;\n            const match = regex.exec(funcName);\n            const name = match ? match[1] : null;\n            return (\n              <li key={index}>\n                <Iterator itr={pointer[funcName]()} type={name} viewer={this.props.viewer} />\n              </li>\n            );\n          });\n        }\n      }\n    }\n\n    const show = this.state.show;\n    return (\n      <div style={{ cursor: \"pointer\" }}>\n        <div className=\"d-flex\">\n          {this.list && this.list.length && name && name.length !== 0 ? (\n            <i onClick={this.toggle} className=\"material-icons\">\n              {show ? \"keyboard_arrow_down\" : \"keyboard_arrow_right\"}\n            </i>\n          ) : null}\n          <span onClick={this.props.onClick}>{name}</span>\n        </div>\n        {show || !name ? <ul>{this.list}</ul> : null}\n      </div>\n    );\n  }\n}\n\nexport default ObjectExplorer;\n"]},"metadata":{},"sourceType":"module"}