{"ast":null,"code":"///////////////////////////////////////////////////////////////////////////////\n// Copyright (C) 2002-2021, Open Design Alliance (the \"Alliance\").\n// All rights reserved.\n//\n// This software and its documentation and related materials are owned by\n// the Alliance. The software may only be incorporated into application\n// programs owned by members of the Alliance, subject to a signed\n// Membership Agreement and Supplemental Software License Agreement with the\n// Alliance. The structure and organization of this software are the valuable\n// trade secrets of the Alliance and its suppliers. The software is also\n// protected by copyright law and international treaty provisions. Application\n// programs incorporating this software must include the following statement\n// with their copyright notices:\n//\n//   This application incorporates Open Design Alliance software pursuant to a\n//   license agreement with Open Design Alliance.\n//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.\n//   All rights reserved.\n//\n// By use of this software, its documentation or related materials, you\n// acknowledge and accept the above terms.\n///////////////////////////////////////////////////////////////////////////////\nimport ClientFactory from \"../ClientFactory\";\nexport const TYPES = {\n  CONFIG_REQUEST: \"CONFIG_REQUEST\",\n  CONFIG_RESPONSE: \"CONFIG_RESPONSE\",\n  CONFIG_ERROR: \"CONFIG_ERROR\"\n};\nexport const reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    loading: false,\n    error: null,\n    data: null\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case TYPES.CONFIG_REQUEST:\n      return {\n        loading: true,\n        error: null,\n        data: null\n      };\n\n    case TYPES.CONFIG_RESPONSE:\n      return {\n        loading: false,\n        error: null,\n        data: action.payload\n      };\n\n    case TYPES.CONFIG_ERROR:\n      return {\n        loading: false,\n        error: action.payload,\n        data: null\n      };\n\n    default:\n      return state;\n  }\n};\nexport const actions = {\n  loadConfig: () => async dispatch => {\n    try {\n      dispatch({\n        type: TYPES.CONFIG_REQUEST\n      });\n      const response = await fetch(\"./config.json\");\n\n      if (response.status !== 200) {\n        throw new Error(response.statusText);\n      }\n\n      const config = await response.json();\n      await ClientFactory.initialize(config.api_host);\n      ClientFactory.setConfig(config);\n      dispatch({\n        type: TYPES.CONFIG_RESPONSE,\n        payload: config\n      });\n    } catch (err) {\n      dispatch({\n        type: TYPES.CONFIG_ERROR,\n        payload: err\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/Users/yutianjian/test/oda/src/redux/config.js"],"names":["ClientFactory","TYPES","CONFIG_REQUEST","CONFIG_RESPONSE","CONFIG_ERROR","reducer","state","loading","error","data","action","type","payload","actions","loadConfig","dispatch","response","fetch","status","Error","statusText","config","json","initialize","api_host","setConfig","err"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,aAAP,MAA0B,kBAA1B;AAEA,OAAO,MAAMC,KAAK,GAAG;AACnBC,EAAAA,cAAc,EAAE,gBADG;AAEnBC,EAAAA,eAAe,EAAE,iBAFE;AAGnBC,EAAAA,YAAY,EAAE;AAHK,CAAd;AAMP,OAAO,MAAMC,OAAO,GAAG,YAOlB;AAAA,MANHC,KAMG,uEANK;AACNC,IAAAA,OAAO,EAAE,KADH;AAENC,IAAAA,KAAK,EAAE,IAFD;AAGNC,IAAAA,IAAI,EAAE;AAHA,GAML;AAAA,MADHC,MACG;;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,KAAK,CAACC,cAAX;AACE,aAAO;AAAEK,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,KAAK,EAAE,IAAxB;AAA8BC,QAAAA,IAAI,EAAE;AAApC,OAAP;;AACF,SAAKR,KAAK,CAACE,eAAX;AACE,aAAO;AAAEI,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAE,IAAzB;AAA+BC,QAAAA,IAAI,EAAEC,MAAM,CAACE;AAA5C,OAAP;;AACF,SAAKX,KAAK,CAACG,YAAX;AACE,aAAO;AAAEG,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAEE,MAAM,CAACE,OAAhC;AAAyCH,QAAAA,IAAI,EAAE;AAA/C,OAAP;;AACF;AACE,aAAOH,KAAP;AARJ;AAUD,CAlBM;AAoBP,OAAO,MAAMO,OAAO,GAAG;AACrBC,EAAAA,UAAU,EAAE,MAAM,MAAOC,QAAP,IAAoB;AACpC,QAAI;AACFA,MAAAA,QAAQ,CAAC;AAAEJ,QAAAA,IAAI,EAAEV,KAAK,CAACC;AAAd,OAAD,CAAR;AACA,YAAMc,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAD,CAA5B;;AACA,UAAID,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,cAAM,IAAIC,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAAN;AACD;;AACD,YAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAT,EAArB;AACA,YAAMtB,aAAa,CAACuB,UAAd,CAAyBF,MAAM,CAACG,QAAhC,CAAN;AACAxB,MAAAA,aAAa,CAACyB,SAAd,CAAwBJ,MAAxB;AACAN,MAAAA,QAAQ,CAAC;AAAEJ,QAAAA,IAAI,EAAEV,KAAK,CAACE,eAAd;AAA+BS,QAAAA,OAAO,EAAES;AAAxC,OAAD,CAAR;AACD,KAVD,CAUE,OAAOK,GAAP,EAAY;AACZX,MAAAA,QAAQ,CAAC;AAAEJ,QAAAA,IAAI,EAAEV,KAAK,CAACG,YAAd;AAA4BQ,QAAAA,OAAO,EAAEc;AAArC,OAAD,CAAR;AACD;AACF;AAfoB,CAAhB","sourcesContent":["///////////////////////////////////////////////////////////////////////////////\n// Copyright (C) 2002-2021, Open Design Alliance (the \"Alliance\").\n// All rights reserved.\n//\n// This software and its documentation and related materials are owned by\n// the Alliance. The software may only be incorporated into application\n// programs owned by members of the Alliance, subject to a signed\n// Membership Agreement and Supplemental Software License Agreement with the\n// Alliance. The structure and organization of this software are the valuable\n// trade secrets of the Alliance and its suppliers. The software is also\n// protected by copyright law and international treaty provisions. Application\n// programs incorporating this software must include the following statement\n// with their copyright notices:\n//\n//   This application incorporates Open Design Alliance software pursuant to a\n//   license agreement with Open Design Alliance.\n//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.\n//   All rights reserved.\n//\n// By use of this software, its documentation or related materials, you\n// acknowledge and accept the above terms.\n///////////////////////////////////////////////////////////////////////////////\nimport ClientFactory from \"../ClientFactory\";\n\nexport const TYPES = {\n  CONFIG_REQUEST: \"CONFIG_REQUEST\",\n  CONFIG_RESPONSE: \"CONFIG_RESPONSE\",\n  CONFIG_ERROR: \"CONFIG_ERROR\",\n};\n\nexport const reducer = (\n  state = {\n    loading: false,\n    error: null,\n    data: null,\n  },\n  action\n) => {\n  switch (action.type) {\n    case TYPES.CONFIG_REQUEST:\n      return { loading: true, error: null, data: null };\n    case TYPES.CONFIG_RESPONSE:\n      return { loading: false, error: null, data: action.payload };\n    case TYPES.CONFIG_ERROR:\n      return { loading: false, error: action.payload, data: null };\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  loadConfig: () => async (dispatch) => {\n    try {\n      dispatch({ type: TYPES.CONFIG_REQUEST });\n      const response = await fetch(\"./config.json\");\n      if (response.status !== 200) {\n        throw new Error(response.statusText);\n      }\n      const config = await response.json();\n      await ClientFactory.initialize(config.api_host);\n      ClientFactory.setConfig(config);\n      dispatch({ type: TYPES.CONFIG_RESPONSE, payload: config });\n    } catch (err) {\n      dispatch({ type: TYPES.CONFIG_ERROR, payload: err });\n    }\n  },\n};\n"]},"metadata":{},"sourceType":"module"}