{"ast":null,"code":"import ClientFactory from \"./../../ClientFactory\";\nexport class FileListService {\n  getPage(page, pageSize, name, ext) {\n    return ClientFactory.get().getFileList((page - 1) * pageSize, pageSize, name, ext, null, true);\n  }\n\n  removeById(id) {\n    return ClientFactory.get().deleteFile(id);\n  }\n\n  async uploadFiles(drawingFile, references) {\n    const file = drawingFile;\n    const supportFormats = ClientFactory.getConfig().supportFormats;\n    const extRegex = /^.*\\.([\\w\\d]+)$/;\n    const match = extRegex.exec(file.name);\n    const postJob = match && match[1] && supportFormats.find(format => format.toLowerCase() === match[1].toLowerCase());\n    const refFileInfoList = [];\n\n    for (let refFileData of references) {\n      const response = await ClientFactory.get().uploadFile(refFileData, {\n        geometry: false,\n        properties: false\n      });\n      refFileInfoList.push(response);\n    }\n\n    const result = await ClientFactory.get().uploadFile(file, {\n      geometry: false,\n      properties: false\n    });\n    const refInfo = {\n      references: []\n    };\n\n    for (let refFile of refFileInfoList) {\n      refInfo.references.push({\n        name: refFile.name,\n        id: refFile.id\n      });\n    }\n\n    await result.createReferences(refInfo);\n\n    if (postJob) {\n      await result.extractGeometry();\n      await result.extractProperties();\n    }\n\n    return result;\n  }\n\n  downloadOriginalFile(file) {\n    return file.downloadResource(`${file.id}${file.type}`).then(arrayBuffer => new Blob([arrayBuffer])).then(blob => window[\"download\"](blob, file.name)).catch(err => console.log(err));\n  }\n\n  downloadFile(file, fileName) {\n    return file.downloadResource(`${fileName}`).then(arrayBuffer => new Blob([arrayBuffer])).then(blob => window[\"download\"](blob, fileName)).catch(err => console.log(err));\n  }\n\n}","map":{"version":3,"sources":["/Users/yutianjian/test/oda/src/containers/FilesListComponent/FileListService.js"],"names":["ClientFactory","FileListService","getPage","page","pageSize","name","ext","get","getFileList","removeById","id","deleteFile","uploadFiles","drawingFile","references","file","supportFormats","getConfig","extRegex","match","exec","postJob","find","format","toLowerCase","refFileInfoList","refFileData","response","uploadFile","geometry","properties","push","result","refInfo","refFile","createReferences","extractGeometry","extractProperties","downloadOriginalFile","downloadResource","type","then","arrayBuffer","Blob","blob","window","catch","err","console","log","downloadFile","fileName"],"mappings":"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","sourcesContent":["import ClientFactory from \"./../../ClientFactory\";\n\nexport class FileListService {\n  getPage(page, pageSize, name, ext) {\n    return ClientFactory.get().getFileList((page - 1) * pageSize, pageSize, name, ext, null, true);\n  }\n\n  removeById(id) {\n    return ClientFactory.get().deleteFile(id);\n  }\n\n  async uploadFiles(drawingFile, references) {\n    const file = drawingFile;\n    const supportFormats = ClientFactory.getConfig().supportFormats;\n\n    const extRegex = /^.*\\.([\\w\\d]+)$/;\n    const match = extRegex.exec(file.name);\n    const postJob =\n      match && match[1] && supportFormats.find((format) => format.toLowerCase() === match[1].toLowerCase());\n\n    const refFileInfoList = [];\n\n    for (let refFileData of references) {\n      const response = await ClientFactory.get().uploadFile(refFileData, {\n        geometry: false,\n        properties: false,\n      });\n      refFileInfoList.push(response);\n    }\n\n    const result = await ClientFactory.get().uploadFile(file, {\n      geometry: false,\n      properties: false,\n    });\n\n    const refInfo = {\n      references: [],\n    };\n\n    for (let refFile of refFileInfoList) {\n      refInfo.references.push({ name: refFile.name, id: refFile.id });\n    }\n\n    await result.createReferences(refInfo);\n\n    if (postJob) {\n      await result.extractGeometry();\n      await result.extractProperties();\n    }\n\n    return result;\n  }\n\n  downloadOriginalFile(file) {\n    return file\n      .downloadResource(`${file.id}${file.type}`)\n      .then((arrayBuffer) => new Blob([arrayBuffer]))\n      .then((blob) => window[\"download\"](blob, file.name))\n      .catch((err) => console.log(err));\n  }\n\n  downloadFile(file, fileName) {\n    return file\n      .downloadResource(`${fileName}`)\n      .then((arrayBuffer) => new Blob([arrayBuffer]))\n      .then((blob) => window[\"download\"](blob, fileName))\n      .catch((err) => console.log(err));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}