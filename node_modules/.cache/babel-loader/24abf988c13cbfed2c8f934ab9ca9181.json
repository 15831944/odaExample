{"ast":null,"code":"import ClientFactory from \"./../../ClientFactory\";\nexport class JobsService {\n  async getPage(page, pageSize, filters) {\n    const {\n      allSize,\n      result\n    } = await ClientFactory.get().getJobs((filters || []).join(\"|\"), pageSize, (page - 1) * pageSize, true);\n    const fileIds = [];\n    const assemblyIds = [];\n    const resNameIdMap = new Map();\n\n    for (let job of result) {\n      job.fileId ? fileIds.push(job.fileId) : assemblyIds.push(job.assemblyId);\n    }\n\n    const files = await ClientFactory.get().getFileList(0, allSize, null, null, fileIds);\n    const assemblies = await ClientFactory.get().getAssemblies(0, allSize, null, assemblyIds);\n\n    for (let file of files.list) {\n      resNameIdMap.set(file.id, file.name);\n    }\n\n    for (let assembly of assemblies.list) {\n      resNameIdMap.set(assembly.id, assembly.name);\n    }\n\n    for (let job of result) {\n      job.fileId ? job.fileName = resNameIdMap.get(job.fileId) : job.assemblyName = resNameIdMap.get(job.assemblyId);\n    }\n\n    return {\n      allSize,\n      result\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/yutianjian/test/oda/src/containers/JobsComponent/JobsService.js"],"names":["ClientFactory","JobsService","getPage","page","pageSize","filters","allSize","result","get","getJobs","join","fileIds","assemblyIds","resNameIdMap","Map","job","fileId","push","assemblyId","files","getFileList","assemblies","getAssemblies","file","list","set","id","name","assembly","fileName","assemblyName"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,uBAA1B;AAEA,OAAO,MAAMC,WAAN,CAAkB;AACV,QAAPC,OAAO,CAACC,IAAD,EAAOC,QAAP,EAAiBC,OAAjB,EAA0B;AACrC,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAsB,MAAMP,aAAa,CAACQ,GAAd,GAAoBC,OAApB,CAChC,CAACJ,OAAO,IAAI,EAAZ,EAAgBK,IAAhB,CAAqB,GAArB,CADgC,EAEhCN,QAFgC,EAGhC,CAACD,IAAI,GAAG,CAAR,IAAaC,QAHmB,EAIhC,IAJgC,CAAlC;AAOA,UAAMO,OAAO,GAAG,EAAhB;AACA,UAAMC,WAAW,GAAG,EAApB;AAEA,UAAMC,YAAY,GAAG,IAAIC,GAAJ,EAArB;;AAEA,SAAK,IAAIC,GAAT,IAAgBR,MAAhB,EAAwB;AACtBQ,MAAAA,GAAG,CAACC,MAAJ,GAAaL,OAAO,CAACM,IAAR,CAAaF,GAAG,CAACC,MAAjB,CAAb,GAAwCJ,WAAW,CAACK,IAAZ,CAAiBF,GAAG,CAACG,UAArB,CAAxC;AACD;;AAED,UAAMC,KAAK,GAAG,MAAMnB,aAAa,CAACQ,GAAd,GAAoBY,WAApB,CAAgC,CAAhC,EAAmCd,OAAnC,EAA4C,IAA5C,EAAkD,IAAlD,EAAwDK,OAAxD,CAApB;AACA,UAAMU,UAAU,GAAG,MAAMrB,aAAa,CAACQ,GAAd,GAAoBc,aAApB,CAAkC,CAAlC,EAAqChB,OAArC,EAA8C,IAA9C,EAAoDM,WAApD,CAAzB;;AAEA,SAAK,IAAIW,IAAT,IAAiBJ,KAAK,CAACK,IAAvB,EAA6B;AAC3BX,MAAAA,YAAY,CAACY,GAAb,CAAiBF,IAAI,CAACG,EAAtB,EAA0BH,IAAI,CAACI,IAA/B;AACD;;AAED,SAAK,IAAIC,QAAT,IAAqBP,UAAU,CAACG,IAAhC,EAAsC;AACpCX,MAAAA,YAAY,CAACY,GAAb,CAAiBG,QAAQ,CAACF,EAA1B,EAA8BE,QAAQ,CAACD,IAAvC;AACD;;AAED,SAAK,IAAIZ,GAAT,IAAgBR,MAAhB,EAAwB;AACtBQ,MAAAA,GAAG,CAACC,MAAJ,GACKD,GAAG,CAACc,QAAJ,GAAehB,YAAY,CAACL,GAAb,CAAiBO,GAAG,CAACC,MAArB,CADpB,GAEKD,GAAG,CAACe,YAAJ,GAAmBjB,YAAY,CAACL,GAAb,CAAiBO,GAAG,CAACG,UAArB,CAFxB;AAGD;;AAED,WAAO;AAAEZ,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAP;AACD;;AApCsB","sourcesContent":["import ClientFactory from \"./../../ClientFactory\";\n\nexport class JobsService {\n  async getPage(page, pageSize, filters) {\n    const { allSize, result } = await ClientFactory.get().getJobs(\n      (filters || []).join(\"|\"),\n      pageSize,\n      (page - 1) * pageSize,\n      true\n    );\n\n    const fileIds = [];\n    const assemblyIds = [];\n\n    const resNameIdMap = new Map();\n\n    for (let job of result) {\n      job.fileId ? fileIds.push(job.fileId) : assemblyIds.push(job.assemblyId);\n    }\n\n    const files = await ClientFactory.get().getFileList(0, allSize, null, null, fileIds);\n    const assemblies = await ClientFactory.get().getAssemblies(0, allSize, null, assemblyIds);\n\n    for (let file of files.list) {\n      resNameIdMap.set(file.id, file.name);\n    }\n\n    for (let assembly of assemblies.list) {\n      resNameIdMap.set(assembly.id, assembly.name);\n    }\n\n    for (let job of result) {\n      job.fileId\n        ? (job.fileName = resNameIdMap.get(job.fileId))\n        : (job.assemblyName = resNameIdMap.get(job.assemblyId));\n    }\n\n    return { allSize, result };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}