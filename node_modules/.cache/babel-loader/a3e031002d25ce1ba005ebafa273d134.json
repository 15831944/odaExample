{"ast":null,"code":"///////////////////////////////////////////////////////////////////////////////\n// Copyright (C) 2002-2021, Open Design Alliance (the \"Alliance\").\n// All rights reserved.\n//\n// This software and its documentation and related materials are owned by\n// the Alliance. The software may only be incorporated into application\n// programs owned by members of the Alliance, subject to a signed\n// Membership Agreement and Supplemental Software License Agreement with the\n// Alliance. The structure and organization of this software are the valuable\n// trade secrets of the Alliance and its suppliers. The software is also\n// protected by copyright law and international treaty provisions. Application\n// programs incorporating this software must include the following statement\n// with their copyright notices:\n//\n//   This application incorporates Open Design Alliance software pursuant to a\n//   license agreement with Open Design Alliance.\n//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.\n//   All rights reserved.\n//\n// By use of this software, its documentation or related materials, you\n// acknowledge and accept the above terms.\n///////////////////////////////////////////////////////////////////////////////\nimport ClientFactory from \"../ClientFactory\";\nexport const TYPES = {\n  ADD_FILE: \"ADD_FILE\",\n  REMOVE_FILE: \"REMOVE_FILE\",\n  FILES_REQUEST: \"FILES_REQUEST\",\n  FILES_RESPONSE: \"FILES_RESPONCE\",\n  FILES_ERROR: \"FILES_ERROR\",\n  SET_TOKEN: \"SET_TOKEN\",\n  SET_PAGE: \"SET_PAGE\",\n  SET_SUPPORT_FORMATS: \"SET_SUPPORT_FORMATS\",\n  CONFIG_RESPONSE: \"CONFIG_RESPONSE\",\n  ADD_NOTIFICATION: \"ADD_NOTIFICATION\"\n};\n\nfunction calcMaxPage(allSize, limit) {\n  return Math.ceil(allSize / limit);\n}\n\nexport const reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    page: 0,\n    maxPage: 0,\n    pageSize: 16,\n    totalFiles: 0,\n    list: [],\n    filterType: \"\",\n    filterWord: \"\",\n    supportFormats: [\"DWG\", \"DGN\", \"DWF\", \"DXF\", \"OBJ\", \"PDF\", \"RCS\", \"RFA\", \"RVT\", \"STL\", \"VSF\"],\n    error: null,\n    refreshFilesTimeout: 5000\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case TYPES.FILES_REQUEST:\n      return { ...state,\n        error: null\n      };\n\n    case TYPES.FILES_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    case TYPES.FILES_RESPONSE:\n      const {\n        allSize,\n        limit,\n        list,\n        filterWord,\n        filterType\n      } = action.payload;\n      return { ...state,\n        totalFiles: allSize,\n        pageSize: limit,\n        list: list,\n        maxPage: calcMaxPage(allSize, limit),\n        error: null,\n        filterWord: filterWord,\n        filterType: filterType\n      };\n\n    case TYPES.ADD_FILE:\n      if (state.totalFiles === 0 || state.page === calcMaxPage(state.totalFiles + 1, state.pageSize) - 1) {\n        return { ...state,\n          list: [].concat(action.payload, state.list),\n          maxPage: calcMaxPage(state.totalFiles + 1, state.pageSize),\n          totalFiles: state.totalFiles + 1\n        };\n      } else {\n        return { ...state,\n          maxPage: calcMaxPage(state.totalFiles + 1, state.pageSize),\n          totalFiles: state.totalFiles + 1\n        };\n      }\n\n    case TYPES.REMOVE_FILE:\n      return { ...state,\n        list: state.list.filter(file => file.id !== action.payload),\n        maxPage: calcMaxPage(state.totalFiles - 1, state.pageSize),\n        totalFiles: state.totalFiles - 1\n      };\n\n    case TYPES.SET_SUPPORT_FORMATS:\n      return { ...state,\n        supportFormats: action.payload\n      };\n\n    case TYPES.SET_PAGE:\n      return { ...state,\n        page: action.payload\n      };\n\n    case TYPES.CONFIG_RESPONSE:\n      return { ...state,\n        pageSize: action.payload.pageSize || state.pageSize,\n        refreshFilesTimeout: action.payload.refreshFilesTimeout || state.refreshFilesTimeout,\n        supportFormats: action.payload.supportFormats || state.supportFormats\n      };\n\n    default:\n      return state;\n  }\n};\nexport const actions = {\n  getFiles: (name, ext) => (dispatch, getState) => {\n    dispatch({\n      type: TYPES.FILES_REQUEST\n    });\n    const state = getState();\n    return ClientFactory.get().getFileList(state.files.page * state.files.pageSize, state.files.pageSize, name, ext, null, true).then(result => {\n      dispatch({\n        type: TYPES.FILES_RESPONSE,\n        payload: { ...result,\n          filterWord: name,\n          filterType: ext\n        }\n      });\n    }).catch(err => {\n      dispatch({\n        type: TYPES.FILES_ERROR,\n        payload: err\n      });\n    });\n  },\n  setPage: page => (dispatch, getState) => {\n    const state = getState();\n    dispatch({\n      type: TYPES.SET_PAGE,\n      payload: page\n    });\n    dispatch(actions.getFiles(state.files.filterWord, state.files.filterType));\n  },\n  setFileInfo: info => {\n    return {\n      type: TYPES.SET_FILE_INFO,\n      payload: info\n    };\n  },\n  removeFile: file => dispatch => {\n    return file.delete().then(_ => {\n      dispatch({\n        type: \"REMOVE_FILE\",\n        payload: file.id\n      });\n    }).catch(err => dispatch({\n      type: TYPES.ADD_NOTIFICATION,\n      payload: {\n        type: \"error\",\n        text: err.message\n      }\n    }));\n  },\n  downloadOriginalFile: file => (dispatch, getState) => {\n    return file.downloadResource(`${file.id}${file.type}`).then(arrayBuffer => new Blob([arrayBuffer])).then(blob => window[\"download\"](blob, file.name)).catch(err => console.log(err));\n  },\n  downloadFile: (file, fileName) => dispatch => {\n    return file.downloadResource(`${fileName}`).then(arrayBuffer => new Blob([arrayBuffer])).then(blob => window[\"download\"](blob, fileName)).catch(err => console.log(err));\n  },\n  uploadFiles: (drawingFile, references) => (dispatch, getState) => {\n    const file = drawingFile;\n    return Promise.resolve().then(() => {\n      const state = getState();\n      const extRegex = /^.*\\.([\\w\\d]+)$/;\n      const match = extRegex.exec(file.name);\n      const postJob = match && match[1] && state.files.supportFormats.find(format => format.toLowerCase() === match[1].toLowerCase());\n      return {\n        file,\n        postJob,\n        references\n      };\n    }).then(async _ref => {\n      let {\n        file,\n        postJob,\n        references\n      } = _ref;\n      const refFileInfoList = [];\n\n      for (let refFileData of references) {\n        const response = await ClientFactory.get().uploadFile(refFileData, {\n          geometry: false,\n          properties: false\n        });\n        refFileInfoList.push(response);\n      }\n\n      const result = await ClientFactory.get().uploadFile(file, {\n        geometry: false,\n        properties: false\n      });\n      const refInfo = {\n        references: []\n      };\n\n      for (let refFile of refFileInfoList) {\n        refInfo.references.push({\n          name: refFile.name,\n          id: refFile.id\n        });\n      }\n\n      await result.createReferences(refInfo);\n\n      if (postJob) {\n        await result.extractGeometry();\n        await result.extractProperties();\n      }\n\n      dispatch({\n        type: TYPES.ADD_FILE,\n        payload: result\n      });\n    }).catch(err => {\n      console.log(err);\n      return dispatch({\n        type: TYPES.ADD_NOTIFICATION,\n        payload: {\n          type: \"error\",\n          text: err.message || \"Failed to load file\"\n        }\n      });\n    });\n  },\n  requestSupportFormats: () => dispatch => {\n    //todo add fetch formats from server\n    dispatch({\n      type: TYPES.SET_SUPPORT_FORMATS,\n      payload: [\"DWG\", \"DGN\", \"DWF\", \"DXF\", \"OBJ\", \"PDF\", \"RCS\", \"RFA\", \"RVT\"]\n    });\n  }\n};","map":{"version":3,"sources":["/Users/yutianjian/test/oda/src/redux/files.js"],"names":["ClientFactory","TYPES","ADD_FILE","REMOVE_FILE","FILES_REQUEST","FILES_RESPONSE","FILES_ERROR","SET_TOKEN","SET_PAGE","SET_SUPPORT_FORMATS","CONFIG_RESPONSE","ADD_NOTIFICATION","calcMaxPage","allSize","limit","Math","ceil","reducer","state","page","maxPage","pageSize","totalFiles","list","filterType","filterWord","supportFormats","error","refreshFilesTimeout","action","type","payload","concat","filter","file","id","actions","getFiles","name","ext","dispatch","getState","get","getFileList","files","then","result","catch","err","setPage","setFileInfo","info","SET_FILE_INFO","removeFile","delete","_","text","message","downloadOriginalFile","downloadResource","arrayBuffer","Blob","blob","window","console","log","downloadFile","fileName","uploadFiles","drawingFile","references","Promise","resolve","extRegex","match","exec","postJob","find","format","toLowerCase","refFileInfoList","refFileData","response","uploadFile","geometry","properties","push","refInfo","refFile","createReferences","extractGeometry","extractProperties","requestSupportFormats"],"mappings":"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","sourcesContent":["///////////////////////////////////////////////////////////////////////////////\n// Copyright (C) 2002-2021, Open Design Alliance (the \"Alliance\").\n// All rights reserved.\n//\n// This software and its documentation and related materials are owned by\n// the Alliance. The software may only be incorporated into application\n// programs owned by members of the Alliance, subject to a signed\n// Membership Agreement and Supplemental Software License Agreement with the\n// Alliance. The structure and organization of this software are the valuable\n// trade secrets of the Alliance and its suppliers. The software is also\n// protected by copyright law and international treaty provisions. Application\n// programs incorporating this software must include the following statement\n// with their copyright notices:\n//\n//   This application incorporates Open Design Alliance software pursuant to a\n//   license agreement with Open Design Alliance.\n//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.\n//   All rights reserved.\n//\n// By use of this software, its documentation or related materials, you\n// acknowledge and accept the above terms.\n///////////////////////////////////////////////////////////////////////////////\nimport ClientFactory from \"../ClientFactory\";\n\nexport const TYPES = {\n  ADD_FILE: \"ADD_FILE\",\n  REMOVE_FILE: \"REMOVE_FILE\",\n  FILES_REQUEST: \"FILES_REQUEST\",\n  FILES_RESPONSE: \"FILES_RESPONCE\",\n  FILES_ERROR: \"FILES_ERROR\",\n\n  SET_TOKEN: \"SET_TOKEN\",\n  SET_PAGE: \"SET_PAGE\",\n  SET_SUPPORT_FORMATS: \"SET_SUPPORT_FORMATS\",\n\n  CONFIG_RESPONSE: \"CONFIG_RESPONSE\",\n  ADD_NOTIFICATION: \"ADD_NOTIFICATION\",\n};\n\nfunction calcMaxPage(allSize, limit) {\n  return Math.ceil(allSize / limit);\n}\n\nexport const reducer = (\n  state = {\n    page: 0,\n    maxPage: 0,\n    pageSize: 16,\n    totalFiles: 0,\n    list: [],\n    filterType: \"\",\n    filterWord: \"\",\n    supportFormats: [\"DWG\", \"DGN\", \"DWF\", \"DXF\", \"OBJ\", \"PDF\", \"RCS\", \"RFA\", \"RVT\", \"STL\", \"VSF\"],\n    error: null,\n    refreshFilesTimeout: 5000,\n  },\n  action\n) => {\n  switch (action.type) {\n    case TYPES.FILES_REQUEST:\n      return { ...state, error: null };\n    case TYPES.FILES_ERROR:\n      return { ...state, error: action.payload };\n    case TYPES.FILES_RESPONSE:\n      const { allSize, limit, list, filterWord, filterType } = action.payload;\n      return {\n        ...state,\n        totalFiles: allSize,\n        pageSize: limit,\n        list: list,\n        maxPage: calcMaxPage(allSize, limit),\n        error: null,\n        filterWord: filterWord,\n        filterType: filterType,\n      };\n    case TYPES.ADD_FILE:\n      if (state.totalFiles === 0 || state.page === calcMaxPage(state.totalFiles + 1, state.pageSize) - 1) {\n        return {\n          ...state,\n          list: [].concat(action.payload, state.list),\n          maxPage: calcMaxPage(state.totalFiles + 1, state.pageSize),\n          totalFiles: state.totalFiles + 1,\n        };\n      } else {\n        return {\n          ...state,\n          maxPage: calcMaxPage(state.totalFiles + 1, state.pageSize),\n          totalFiles: state.totalFiles + 1,\n        };\n      }\n    case TYPES.REMOVE_FILE:\n      return {\n        ...state,\n        list: state.list.filter((file) => file.id !== action.payload),\n        maxPage: calcMaxPage(state.totalFiles - 1, state.pageSize),\n        totalFiles: state.totalFiles - 1,\n      };\n    case TYPES.SET_SUPPORT_FORMATS:\n      return { ...state, supportFormats: action.payload };\n\n    case TYPES.SET_PAGE:\n      return { ...state, page: action.payload };\n    case TYPES.CONFIG_RESPONSE:\n      return {\n        ...state,\n        pageSize: action.payload.pageSize || state.pageSize,\n        refreshFilesTimeout: action.payload.refreshFilesTimeout || state.refreshFilesTimeout,\n        supportFormats: action.payload.supportFormats || state.supportFormats,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  getFiles: (name, ext) => (dispatch, getState) => {\n    dispatch({ type: TYPES.FILES_REQUEST });\n    const state = getState();\n\n    return ClientFactory.get()\n      .getFileList(state.files.page * state.files.pageSize, state.files.pageSize, name, ext, null, true)\n      .then((result) => {\n        dispatch({\n          type: TYPES.FILES_RESPONSE,\n          payload: { ...result, filterWord: name, filterType: ext },\n        });\n      })\n      .catch((err) => {\n        dispatch({ type: TYPES.FILES_ERROR, payload: err });\n      });\n  },\n\n  setPage: (page) => (dispatch, getState) => {\n    const state = getState();\n    dispatch({ type: TYPES.SET_PAGE, payload: page });\n    dispatch(actions.getFiles(state.files.filterWord, state.files.filterType));\n  },\n\n  setFileInfo: (info) => {\n    return { type: TYPES.SET_FILE_INFO, payload: info };\n  },\n\n  removeFile: (file) => (dispatch) => {\n    return file\n      .delete()\n      .then((_) => {\n        dispatch({ type: \"REMOVE_FILE\", payload: file.id });\n      })\n      .catch((err) =>\n        dispatch({\n          type: TYPES.ADD_NOTIFICATION,\n          payload: { type: \"error\", text: err.message },\n        })\n      );\n  },\n  downloadOriginalFile: (file) => (dispatch, getState) => {\n    return file\n      .downloadResource(`${file.id}${file.type}`)\n      .then((arrayBuffer) => new Blob([arrayBuffer]))\n      .then((blob) => window[\"download\"](blob, file.name))\n      .catch((err) => console.log(err));\n  },\n  downloadFile: (file, fileName) => (dispatch) => {\n    return file\n      .downloadResource(`${fileName}`)\n      .then((arrayBuffer) => new Blob([arrayBuffer]))\n      .then((blob) => window[\"download\"](blob, fileName))\n      .catch((err) => console.log(err));\n  },\n\n  uploadFiles: (drawingFile, references) => (dispatch, getState) => {\n    const file = drawingFile;\n\n    return Promise.resolve()\n      .then(() => {\n        const state = getState();\n        const extRegex = /^.*\\.([\\w\\d]+)$/;\n        const match = extRegex.exec(file.name);\n        const postJob =\n          match &&\n          match[1] &&\n          state.files.supportFormats.find((format) => format.toLowerCase() === match[1].toLowerCase());\n        return { file, postJob, references };\n      })\n      .then(async ({ file, postJob, references }) => {\n        const refFileInfoList = [];\n\n        for (let refFileData of references) {\n          const response = await ClientFactory.get().uploadFile(refFileData, {\n            geometry: false,\n            properties: false,\n          });\n          refFileInfoList.push(response);\n        }\n\n        const result = await ClientFactory.get().uploadFile(file, {\n          geometry: false,\n          properties: false,\n        });\n\n        const refInfo = {\n          references: [],\n        };\n\n        for (let refFile of refFileInfoList) {\n          refInfo.references.push({ name: refFile.name, id: refFile.id });\n        }\n\n        await result.createReferences(refInfo);\n\n        if (postJob) {\n          await result.extractGeometry();\n          await result.extractProperties();\n        }\n        dispatch({ type: TYPES.ADD_FILE, payload: result });\n      })\n      .catch((err) => {\n        console.log(err);\n        return dispatch({\n          type: TYPES.ADD_NOTIFICATION,\n          payload: {\n            type: \"error\",\n            text: err.message || \"Failed to load file\",\n          },\n        });\n      });\n  },\n\n  requestSupportFormats: () => (dispatch) => {\n    //todo add fetch formats from server\n    dispatch({\n      type: TYPES.SET_SUPPORT_FORMATS,\n      payload: [\"DWG\", \"DGN\", \"DWF\", \"DXF\", \"OBJ\", \"PDF\", \"RCS\", \"RFA\", \"RVT\"],\n    });\n  },\n};\n"]},"metadata":{},"sourceType":"module"}