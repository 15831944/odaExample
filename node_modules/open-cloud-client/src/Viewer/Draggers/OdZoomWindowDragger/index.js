///////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2002-2021, Open Design Alliance (the "Alliance").
// All rights reserved.
//
// This software and its documentation and related materials are owned by
// the Alliance. The software may only be incorporated into application
// programs owned by members of the Alliance, subject to a signed
// Membership Agreement and Supplemental Software License Agreement with the
// Alliance. The structure and organization of this software are the valuable
// trade secrets of the Alliance and its suppliers. The software is also
// protected by copyright law and international treaty provisions. Application
// programs incorporating this software must include the following statement
// with their copyright notices:
//
//   This application incorporates Open Design Alliance software pursuant to a
//   license agreement with Open Design Alliance.
//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.
//   All rights reserved.
//
// By use of this software, its documentation or related materials, you
// acknowledge and accept the above terms.
///////////////////////////////////////////////////////////////////////////////
/* eslint-disable no-unused-vars */

import { OdBaseDragger } from '../Common/OdBaseDragger';
import { OdSelectionFrame } from './OdSelectionFrame'

export class OdZoomWindowDragger extends OdBaseDragger {
  constructor(...args) {
    super(...args);
    this.press = false;
    this.needInputText = false;
    
    this.m_frame = new OdSelectionFrame();
    this.getViewer().setEnableAutoSelect(true);
    this.m_frame.init(this.m_module, this.getModel());
  }

  start(x, y) {
    this.press = true;
    this.m_minX = x;
    this.m_minY = y;

    const startPoint = this.screenToWorld(x, y)
    this.m_frame.setStartPoint(startPoint);
  }

  drag(x, y, dltX, dltY) {
    if (this.press) {
      this.m_maxX = x;
      this.m_maxY = y;

      const point = this.screenToWorld(x, y)
      this.m_frame.setValue(point);
    }
  }

  end(x, y) {
    this.press = false;
    this.m_maxX = x;
    this.m_maxY = y;

    if (this.m_minX !== this.m_maxX && this.m_minY !== this.m_maxY) {
      this.m_frame.clear();
      this.getViewer().zoomWindow(this.m_minX, this.m_minY, this.m_maxX, this.m_maxY);
    }
  }

}