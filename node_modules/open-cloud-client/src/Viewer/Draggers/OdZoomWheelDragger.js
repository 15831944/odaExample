///////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2002-2021, Open Design Alliance (the "Alliance").
// All rights reserved.
//
// This software and its documentation and related materials are owned by
// the Alliance. The software may only be incorporated into application
// programs owned by members of the Alliance, subject to a signed
// Membership Agreement and Supplemental Software License Agreement with the
// Alliance. The structure and organization of this software are the valuable
// trade secrets of the Alliance and its suppliers. The software is also
// protected by copyright law and international treaty provisions. Application
// programs incorporating this software must include the following statement
// with their copyright notices:
//
//   This application incorporates Open Design Alliance software pursuant to a
//   license agreement with Open Design Alliance.
//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.
//   All rights reserved.
//
// By use of this software, its documentation or related materials, you
// acknowledge and accept the above terms.
///////////////////////////////////////////////////////////////////////////////

import { OdBaseDragger } from './Common/OdBaseDragger.js';

export class OdZoomWheelDragger extends OdBaseDragger {
  constructor(...args) {
    super(...args);
    this.subject.eventEmitter.removeDragger(this)
    this.subject.eventEmitter.addDragger(this, ["wheel"])
  }


  wheel(event) {
    event = event || window.event;

    const ZOOM_SPEED = 0.075

    const sign = Math.sign(event.deltaY)

    const viewer = this.m_module.getViewer()
    if (viewer) {
      const k = ZOOM_SPEED * sign
      const { Vector3d } = this.m_module
      const params = this.getViewParams();

      const center = Vector3d.createFromArray([
        this.m_module.canvas.clientWidth * 0.5,
        this.m_module.canvas.clientHeight * 0.5,
        0
      ])

      const mousePos = Vector3d.createFromArray([
        event.offsetX,
        event.offsetY,
        0
      ])
      const mouseDelta = mousePos.sub(center)

      params.viewFieldWidth = params.viewFieldWidth * (1 + k)
      params.viewFieldHeight = params.viewFieldHeight * (1 + k)

      this.setViewParams(params);
      k < 0 && viewer.pan(mouseDelta.x * k, mouseDelta.y * k)

      if (this.subject.activeDragger() && this.subject.activeDragger().updatePreview)
      {
        this.subject.activeDragger().updatePreview()
      }

      center.delete()
      mousePos.delete()
      mouseDelta.delete()
    }
  }

}