///////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2002-2021, Open Design Alliance (the "Alliance").
// All rights reserved.
//
// This software and its documentation and related materials are owned by
// the Alliance. The software may only be incorporated into application
// programs owned by members of the Alliance, subject to a signed
// Membership Agreement and Supplemental Software License Agreement with the
// Alliance. The structure and organization of this software are the valuable
// trade secrets of the Alliance and its suppliers. The software is also
// protected by copyright law and international treaty provisions. Application
// programs incorporating this software must include the following statement
// with their copyright notices:
//
//   This application incorporates Open Design Alliance software pursuant to a
//   license agreement with Open Design Alliance.
//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.
//   All rights reserved.
//
// By use of this software, its documentation or related materials, you
// acknowledge and accept the above terms.
///////////////////////////////////////////////////////////////////////////////
/* eslint-disable no-unused-vars */
import { OdBaseDragger } from './Common/OdBaseDragger.js';

export class OdPanDragger extends OdBaseDragger {
  constructor(...args) {
    super(...args)
    this.press = false;

    this.m_module.getViewer().setEnableAutoSelect(true);
  }

  start(x, y) {
    this.press = true;
    this.m_start = this.screenToWorld(x, y);
    this.beginInteractivity();
  }

  drag(x, y, dltX, dltY) {
    if (this.press) {
      const { Vector3d } = this.m_module
      const params = this.getViewParams();
      const pt = this.screenToWorld(x, y);

      const ptSub = this.m_start.sub(pt)
      const delta = ptSub.asVector();

      const target = Vector3d.createFromArray(params.target);
      const targetWithDelta = target.add(delta);
      params.target = targetWithDelta.toArray();

      const position = Vector3d.createFromArray(params.position);
      const positionWithDelta  = position.add(delta);
      params.position = positionWithDelta.toArray();
      
      this.setViewParams(params);

      pt.delete();
      ptSub.delete();
      delta.delete();
      target.delete();

      targetWithDelta.delete();
      position.delete();
      positionWithDelta.delete();
    }
  }

  end(x, y) {
    this.press = false;
    this.endInteractivity();
    this.m_start && this.m_start.delete()
    this.m_start = null;
  }

}