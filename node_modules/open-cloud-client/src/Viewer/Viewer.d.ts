import { Client } from '../Api/Api';
import { File } from '../Api/File';
import { Model } from '../Api/Model';
import { OdBaseDragger } from './Draggers/Common/OdBaseDragger';
import { EventEmitter } from './utils';


export class Viewer {

  constructor(api:Client);

  opt: {
    visualizeJsUrl: String,
  }

  visualizeJs: any
  eventEmitter: EventEmitter
  draggerFactory: Map<String, OdBaseDragger>
  render: Function

  configure(opt: {
    visualizeJsUrl: String,
  }): Viewer;


  initializeAsync(canvas: HTMLCanvasElement, cb?: (viewer?: Viewer) => void): Promise<Viewer>

  get draggers(): Array<String>

  activeDragger(): OdBaseDragger

  setActiveDragger(name: String): void

  visLib(): any

  visViewer(): any

  clearSlices(): void

  clearOverlay(): void

  is3D(): Boolean

  dispose(): void

  addEventListener(name: String, cb: (event?: { type: String, target?: any, data?: any }) => void): void

  removeEventListener(name: String, cb: (event?: { type: String, target?: any, data?: any }) => void): void

  emitEvent(event: { type: String, target?: any, data?: any }): void

  getSelected(): Array<String>

  loadReferences(model: Model): Promise<void>

  open(object: Model | File): Promise<Viewer>

  openVsfFile(binary: Uint8Array): Viewer

  cancel(): Viewer
}