import { Model } from './Model'

export class Assembly {
  
  constructor(impl) {
    this._impl = impl
  }
  /**
   * Assembly id
   * @type {string}
   */
  get id() { return this._impl._data.id }
  /**
   * Assembly name
   * @type {string}
   */
  get name() { return this._impl._data.name }
  set name(value) { this._impl._data.name = value }
  /**
   * Ids files
   * @type {Array<string>}
   */
  get files() { return this._impl._data.files }
  /**
   * owner - short description
   * @type {Object}
   */
  get owner() { return this._impl._data.owner }
  /**
   * File id
   * @type {string}
   */
  get created() { return this._impl._data.created }
  /**
   * File id
   * @type {string}
   */
  get status() { return this._impl._data.status }
  /**
   * Ids related jobs
   * @type {Array<string>}
   */
  get relatedJobs() { return this._impl._data.relatedJobs }

  /**
   * Return transform matrix by handle
   * @type {Transform}
   */
  getModelTransformMatrix(handle)
  {
    return this._impl._data.transform[handle];
  }

  /**
   * Set transform matrix by handle
   * @param {string} handle - model handle
   * @param {Transform} transform - transform matrix
   */
  setModelTransformMatrix(handle, transform)
  {
    this._impl._data.transform[handle] = transform;
    return this._impl._put('', { transform: this._impl._data.transform });
  }

  /**
 * Get file models
 * @function
 * @async
 * @returns {Model[]}
 */
  getModels() {
    return this._impl.getModels().then(models => models.map(modelImpl => new Model(modelImpl, null, this)))
  }

  /**
   * Get property by id
   * @param {string} id 
   * @async 
   * @returns {Object} - property object
   */
  getProperty(id) {
    return this._impl.getProperty(id)
  }

  /**
   * Get all properties
   * @async 
   * @returns {Property[]} - properties array
   */
  getProperties() {
    return this._impl.getProperties()
  }

  /**
  * Delete file
  * @async 
  * @returns {Object} - 
  */
  delete() {
    return this._impl.delete()
  }

  /**
   * Download resource by id
   * @async
   * @param {string} dataId - dataId
   * @param {string} onProgress - onprogress callback
   * @param {AbortSignal} signal - signal for cancellation
   * @returns {ArrayBuffer} - binary data
   */ 
  downloadResource(dataId, onProgress, signal) {
    return this._impl.downloadResource(dataId, onProgress, signal)
  }

  /**
   * Save file changes
   * @async 
   * @returns {Object}  
   */
  save() {
    return this._impl.save()
  }

  /**
   * Get file references
   * @async 
   * @returns {References}
   */
  getReferences() {
    return {fileId: '', references: [] }
  }
}