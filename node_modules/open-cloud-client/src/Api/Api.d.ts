import { Viewer } from '../Viewer/Viewer'
import { Assembly } from './Assembly'
import { File } from './File'
import { Job } from './Job'
import { Options } from './Options'
import { Project } from './Project'
import { User } from './User'
/**
 * Common api
 */
export class Client {
  constructor(options: { serverUrl: string });

  get url(): string;

  get options() : Options

  createViewer(options: {
    target: HTMLCanvasElement,
    visualizeJsUrl?: String,
    onprogress?: (ev: {
      type:String,
      loaded: Number, 
      timeStamp: Date, 
      total: Number, 
      lengthComputable: Boolean}) => void
  }): Promise<Viewer>


  configure(options: { url: string }): Client;

  on(name: string, callback: Function): void;

  removeEventListener(name: string, callback: Function): void;

  removeAllListeners(): void;

  emit(event: { type: string, data: Object }): void;

  getFileList(start?: Number, count?: Number, name?: string, ext?: string, sortByDesc?: boolean): Promise<{ allSize: Number, limit: Number, list: Array<File>, size: Number, start: Number }>

  getFile(fileId): Promise<File>

  version(): Promise<Object>

  signInWithEmail(email: string, password: string): Promise<User>

  setActiveJobUpdater(enabled: Boolean): void

  getCurrentUser(): User

  loginFromUserData(userData: Object): Promise<User>

  uploadFile(file: any, options: { geometry: boolean, properties: boolean, waitForDone: boolean }): Promise<File>

  deleteFile(fileId): Promise<Object>
  
  downloadReferenceFile(fileId: string, onProgress?: (event: ProgressEvent) => void, signal?: AbortSignal): Promise<ArrayBuffer>

  getJobs(state?: string, limit?: number, start?: number, sortByDesc?: boolean): Promise<Array<Job>>

  getJob(jobId: string): Promise<Job>

  createJob(fileId: string, outputFormat: string): Promise<Job>

  deleteJob(jobId: string): Object

  getProjects(): Promise<Array<Project>>

  createProject(name: string, description: string, startDate: Date, endDate: Date, avatarUrl: string): Promise<Project>

  getProjectById(id): Promise<Project>

  getAssemblies(start?: number, count?: number, name?: string, ids?: Array<string>, sortByDesc?: boolean): Promise<Array<Assembly>>

  createAssembly(files: [string], name: string): Promise<Assembly>

  getAssemblyById(id: string): Promise<Assembly>
}