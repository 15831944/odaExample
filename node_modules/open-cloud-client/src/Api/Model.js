///////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2002-2021, Open Design Alliance (the "Alliance").
// All rights reserved.
//
// This software and its documentation and related materials are owned by
// the Alliance. The software may only be incorporated into application
// programs owned by members of the Alliance, subject to a signed
// Membership Agreement and Supplemental Software License Agreement with the
// Alliance. The structure and organization of this software are the valuable
// trade secrets of the Alliance and its suppliers. The software is also
// protected by copyright law and international treaty provisions. Application
// programs incorporating this software must include the following statement
// with their copyright notices:
//
//   This application incorporates Open Design Alliance software pursuant to a
//   license agreement with Open Design Alliance.
//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.
//   All rights reserved.
//
// By use of this software, its documentation or related materials, you
// acknowledge and accept the above terms.


///////////////////////////////////////////////////////////////////////////////

/**
 * @class
 */
export class Model {
  constructor(impl, file, assembly) {
    this._impl = impl
    this._file = file
    this._assembly = assembly
  }

  /**
   * @type {File}
   */
  get file() {
    return this._file
  }

  /**
   * @type {Assembly}
   */
  get assembly() {
    return this._assembly
  }

  /**
   * @type {boolean}
   */
  get default() { return this._impl.data.default }

  /**
   * @type {string}
   */
  get database() { return this._impl.data.database }

  /**
   * @type {string}
   */
  get fileId() { return this._impl.data.fileId }

  /**
   * @type {string[]}
   */
  get geometry() { return this._impl.data.geometry }

  /**
   * @type {string}
   */
  get id() { return this._impl.data.id }

  /**
   * @type {string}
   */
  get name() { return this._impl.data.name }

  /**
   * @type {string}
   */
  get version() { return this._impl.data.version }


  /**
   * Get file model viewpoints
   * @function
   * @async
   * @returns {Viewpoint[]}
   */
  getViewpoints() {
    return this._impl.getViewPoints()
  }

  /**
   * Save viewpoint
   * @param {*} viewpointData 
   * @async
   * @returns {Viewpoint}
   */
  saveViewpoint(viewpointData) {
    return this._impl.postViewpoint(viewpointData)
  }

  /**
   * Delete viewpoint by id
   * @function
   * @param {string} viewpointId 
   * @async
   * @returns {Object}
   */
  deleteViewpoint(viewpointId) {
    return this._impl.deleteViewpoint(viewpointId)
  }

  /**
   * Get snapshot by id
   * @param {string} guid 
   * @async
   * @returns {Object}
   */
  getSnapshot(guid) {
    return this._impl.getSnapshot(guid)
  }

  /**
   * Get snapshot data by guid and bitmapGuid
   * @function
   * @async
   * @param {string} guid 
   * @param {string} bitmapGuid
   * @returns {ArrayBuffer}
   */
  getSnapshotData(guid, bitmapGuid) {
    return this._impl.getSnapshotData(guid, bitmapGuid)
  }

  /**
   * Download resource by id
   * @async
   * @param {string} dataId - dataId
   * @param {function} onProgress - onprogress callback
   * @param {AbortSignal} signal - signal for cancellation
   * @returns {ArrayBuffer} - binary data
   */ 
  downloadResource(dataId, onProgress, signal) {
    return this._impl.downloadResource(dataId, onProgress, signal)
  }

  /**
   * Download resource by id use fetch
   * @async
   * @param {string} dataId - dataId
   * @param {function} onProgress - onprogress callback
   * @param {AbortSignal} signal - signal for cancellation
   * @returns {void}
  */ 
   partialDownloadResource(dataId, signal, onProgress)
   {
    return this._impl.partialDownloadResource(dataId, signal, onProgress)
   }


  /**
  * File Reference
  * @typedef {Object} Reference
  * @property {string} id - id of file reference
  * @property {string} name - name of file reference, ex "font1.ttf"
  */


  /**
  * File references
  * @typedef {Object} References
  * @property {string} fileId - url to visualizeJS
  * @property {Reference[]} references - array of references for fileId
  * }
  */


  /**
   * Get snapshot data by guid and bitmapGuid
   * @function
   * @async
   * @returns {References}
   */
  getReferences() {
    return this._impl.getReferences()
  }
}