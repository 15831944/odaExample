///////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2002-2021, Open Design Alliance (the "Alliance").
// All rights reserved.
//
// This software and its documentation and related materials are owned by
// the Alliance. The software may only be incorporated into application
// programs owned by members of the Alliance, subject to a signed
// Membership Agreement and Supplemental Software License Agreement with the
// Alliance. The structure and organization of this software are the valuable
// trade secrets of the Alliance and its suppliers. The software is also
// protected by copyright law and international treaty provisions. Application
// programs incorporating this software must include the following statement
// with their copyright notices:
//
//   This application incorporates Open Design Alliance software pursuant to a
//   license agreement with Open Design Alliance.
//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.
//   All rights reserved.
//
// By use of this software, its documentation or related materials, you
// acknowledge and accept the above terms.
///////////////////////////////////////////////////////////////////////////////
import { File } from './File'
/* eslint no-unused-vars: off */

/**
 * @class
 */
export class JobUpdater {
  constructor(userImpl, plugin) {
    this._userImpl = userImpl
    this._plugin = plugin
    this._intervalId = 0;

    /**
     * Interval for update jobs
     * @type {Number}
     */
    this.interval = 5000;

    /**
     * Array of jobs
     * @type {Job[]}
     */
    this.jobs = []
  }

  /**
   * Start to update jobs periodicals
   * @function
   */
  start() {
    this._intervalId = setInterval(() => {
      this.update()
    }, this.interval)
  }

  /**
   * Update job function, it invokes automatic when run "Start"
   * @function
   * @async
   */
  async update() {

    function completed(one, two) {
      return one.filter(job1 => !two.find(job2 => job1.id === job2.id))
    }

    const jobs = [...(await this._userImpl.getJobs("running")).result, ...(await this._userImpl.getJobs("waiting")).result]
    const completedJobs = completed(this.jobs, jobs)
    this.jobs = jobs;

    const completedFiles = await completedJobs.reduce((acc, job) => {
      return acc.then(arr => {
        return this._userImpl.getFile(job.fileId).then(file => arr.push(file) && arr)
      })
    }, Promise.resolve([]))

    completedFiles.length && this._plugin.emit({ type: "jobs-complete", data: completedFiles.map(fileImpl => new File(fileImpl, this._plugin)) })
  }

 /**
   * Start to update jobs periodicals
   * @function
   */
  stop() {
    clearInterval(this._intervalId)
    this._intervalId = 0;
  }
}

