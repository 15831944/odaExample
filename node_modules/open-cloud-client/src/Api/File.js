///////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2002-2021, Open Design Alliance (the "Alliance").
// All rights reserved.
//
// This software and its documentation and related materials are owned by
// the Alliance. The software may only be incorporated into application
// programs owned by members of the Alliance, subject to a signed
// Membership Agreement and Supplemental Software License Agreement with the
// Alliance. The structure and organization of this software are the valuable
// trade secrets of the Alliance and its suppliers. The software is also
// protected by copyright law and international treaty provisions. Application
// programs incorporating this software must include the following statement
// with their copyright notices:
//
//   This application incorporates Open Design Alliance software pursuant to a
//   license agreement with Open Design Alliance.
//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.
//   All rights reserved.
//
// By use of this software, its documentation or related materials, you
// acknowledge and accept the above terms.
///////////////////////////////////////////////////////////////////////////////
import { Model } from './Model'
import { Job } from './Job'
import { User } from './User';

/**
 * @class
 */
export class File {
  constructor(impl, app) {
    this._impl = impl;
    this.app = app;
  }

  /**
   * File owner - user
   * @type {User}
   */
  get user() { return new User(this._impl.user, this.app) }

  /**
   *  Created time
   * @type {(number|string)}
   */
  get created() { return this._impl.fileInfo.created }

  /**
   * Exports array
   * @type {Object[]} 
   */
  get exports() { return this._impl.fileInfo.exports }

  /**
   * File id
   * @type {string}
   */
  get id() { return this._impl.fileInfo.id }

  /**
   * Metadata
   * @type {boolean}
   */
  get metadata() { return this._impl.fileInfo.metadata }


  /**
   * User id
   * @type {string}
   */
  get owner() { return this._impl.fileInfo.owner }

  /**
   * Base64 image preview, get/set
   * @type {string}
   */
  get preview() { return this._impl.fileInfo.preview }
  set preview(base64) { this._impl.fileInfo.preview = base64 }

  /**
   * Have generated properties
   * @type {boolean}
   */
  get properties() { return this._impl.fileInfo.properties }

  /**
   * File size
   * @type {number}
   */
  get size() { return this._impl.fileInfo.size }

  /**
   * File type
   * @type {string}
   */
  get type() { return this._impl.fileInfo.type }

  /**
   * Server version
   * @type {string}
   */
  get version() { return this._impl.fileInfo.version }

  /**
   * Get and set file name
   * @type {string}
   */
  get name() { return this._impl.fileInfo.name }
  set name(newName) { this._impl.fileInfo.name = newName }

  /**
   * Get geometry status (waiting inprogress done failed)
   * @type {string}
   */
  get geometryStatus() { return this._impl.fileInfo.geometryStatus }

  /**
   * Get properties status (waiting inprogress done failed)
   * @type {string}
   */
  get propertiesStatus() { return this._impl.fileInfo.propertiesStatus }

  /**
   * Get file models
   * @function
   * @async
   * @returns {Model[]}
   */
  getModels() {
    return this._impl.getModels().then(models => models.map(modelImpl => new Model(modelImpl, this)))
  }

  /**
   * Get property by id
   * @param {string} id 
   * @async 
   * @returns {Object} - property object
   */
  getProperty(id) {
    return this._impl.getProperty(id)
  }

  /**
   * Get all properties
   * @async 
   * @returns {Property[]} - properties array
   */
  getProperties() {
    return this._impl.getProperties()
  }

  /**
  * GetViewpoints
  * @async 
  * @returns {Viewpoint[]} - viewpoints array
  */
  getViewPoints() {
    return this._impl.getViewPoints()
  }

  /**
  * Delete file
  * @async 
  * @returns {Object} - 
  */
  delete() {
    return this._impl.deleteFile()
  }

  /**
   * Download resource by id
   * @async
   * @param {string} dataId - dataId
   * @param {string} onProgress - onprogress callback
   * @param {AbortSignal} signal - signal for cancellation
   * @returns {ArrayBuffer} - binary data
   */ 
  downloadResource(dataId, onProgress, signal) {
    return this._impl.downloadResource(dataId, onProgress, signal)
  }

  /**
   * Save file changes
   * @async 
   * @returns {Object}  
   */
  save() {
    return this._impl.putFile(this._impl.fileInfo)
  }


  /**
   * Update file data
   * @async 
   * @returns {File}  
   */
  checkout() {
    return this._impl.getFileInfo()
      .then(info => this._impl.fileInfo = info)
      .then(() => this)
  }

  /**
   * Update file data
   * @async 
   * @param {References}  
   * @returns {References}
   */
  createReferences(object) {
    return this.putReferences(object)
  }


  /**
   * Get file references
   * @async 
   * @returns {References}
   */
  getReferences() {
    return this._impl.getReferences()
  }

  /**
   * Change file references
   * @async 
   * @returns {References}
   */
  putReferences(object) {
    return this._impl.putReferences(object)
  }

  /**
   * Create job for extract geometry
   * @async 
   * @returns {Job}
   */
  extractGeometry() {
    return this._impl.createJob("geometry").then(jobImpl => new Job(jobImpl, this.app))
  }

  /**
   * Create job for extract properties
   * @async 
   * @returns {Job}
   */
  extractProperties() {
    return this._impl.createJob("properties").then(jobImpl => new Job(jobImpl, this.app))
  }

}