///////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2002-2021, Open Design Alliance (the "Alliance").
// All rights reserved.
//
// This software and its documentation and related materials are owned by
// the Alliance. The software may only be incorporated into application
// programs owned by members of the Alliance, subject to a signed
// Membership Agreement and Supplemental Software License Agreement with the
// Alliance. The structure and organization of this software are the valuable
// trade secrets of the Alliance and its suppliers. The software is also
// protected by copyright law and international treaty provisions. Application
// programs incorporating this software must include the following statement
// with their copyright notices:
//
//   This application incorporates Open Design Alliance software pursuant to a
//   license agreement with Open Design Alliance.
//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.
//   All rights reserved.
//
// By use of this software, its documentation or related materials, you
// acknowledge and accept the above terms.
///////////////////////////////////////////////////////////////////////////////

import { json, normalizePath, downloadProgress } from './Utils'
import { ModelImpl } from './ModelImpl'

export class AssemblyImpl {
  constructor(assemblyData, user) {
    this._data = assemblyData
    this._user = user
  }

  _get(relativePath, signal) {
    const path = normalizePath(relativePath || '')
    return this._user.get(`/assemblies/${this._data.id}${path}`, signal)
  }

  _post(relativePath, body) {
    const path = normalizePath(relativePath || '')
    return this._user.post(`/assemblies/${this._data.id}${path}`, body)
  }

  _put(relativePath, body) {
    const path = normalizePath(relativePath || '')
    return this._user.put(`/assemblies/${this._data.id}${path}`, body)
  }

  _delete(relativePath, body) {
    const path = normalizePath(relativePath || '')
    return this._user.delete(`/assemblies/${this._data.id}${path}`, body)
  }

  getProperties() {
    return json(this._get(`/properties`))
  }

  getProperty(id) {
    return json(this._get(`/properties?handle=${id}`))
  }

  getModels() {
    return json(this._get(`/geometry`))
      .then(models => models.map(data => new ModelImpl(data, this)))
  }

  downloadResource(dataId, onProgress, signal) {
    return this._get(`/downloads/${dataId}`, signal)
      .then(response => downloadProgress(response, onProgress))
      .then(response => response.arrayBuffer())
  }

  async partialDownloadResource(dataId, signal, onProgress)
  {
    const path = normalizePath(`/assemblies/${this._data.id}/downloads/${dataId}`)
    
    const response = await fetch(`${this._user.url}${path}`, {
      headers: this._user.headers, signal: signal
    })
    const contentLength = response.headers.get('content-length')
    const total = parseInt(contentLength, 10)

    let loaded = 0;

    const reader = response.body.getReader()
    let condition = true
    while (condition) 
    {
      const {done, value} = await reader.read()
      
      if (done) {
        break
      }

      loaded += value.byteLength

      onProgress(loaded/total, value)
    }
  }

  delete() {
    return this._delete()
  }

  save() {
    return this._put('', this._data)
  }
}