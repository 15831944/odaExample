///////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2002-2021, Open Design Alliance (the "Alliance").
// All rights reserved.
//
// This software and its documentation and related materials are owned by
// the Alliance. The software may only be incorporated into application
// programs owned by members of the Alliance, subject to a signed
// Membership Agreement and Supplemental Software License Agreement with the
// Alliance. The structure and organization of this software are the valuable
// trade secrets of the Alliance and its suppliers. The software is also
// protected by copyright law and international treaty provisions. Application
// programs incorporating this software must include the following statement
// with their copyright notices:
//
//   This application incorporates Open Design Alliance software pursuant to a
//   license agreement with Open Design Alliance.
//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.
//   All rights reserved.
//
// By use of this software, its documentation or related materials, you
// acknowledge and accept the above terms.
///////////////////////////////////////////////////////////////////////////////
import { json, $get, $XMLHttp, $delete, $post, normalizePath, $put, downloadProgress } from './Utils'
import { FileImpl } from './FileImpl'
import { JobImpl } from './JobImpl';
import { ProjectImpl } from './ProjectImpl';
import { AssemblyImpl } from './AssemblyImpl';

export class UserImpl {

  constructor(data, url, opt) {
    this.data = data
    this.url = url;
    this.headers = {
      'Authorization': data.tokenInfo.token,
    };
    this.opt = opt
    if (! this.opt)
    {
      throw new Error('opt can not be undefined')
    }
  }

  get(relativePath, signal) {
    const path = normalizePath(relativePath)
    return $get(`${this.url}${path}`, this.headers, signal)
  }

  post(relativePath, body) {
    const path = normalizePath(relativePath)
    return $post(`${this.url}${path}`, this.headers, body)
  }

  put(relativePath, body) {
    const path = normalizePath(relativePath)
    return $put(`${this.url}${path}`, this.headers, body)
  }

  delete(relativePath, body) {
    const path = normalizePath(relativePath)
    return $delete(`${this.url}${path}`, this.headers, body)
  }

  // ----------- Users ---------------

  //get all users
  getUsers() {
    return json(this.get(`/users`))
  }

  // My account information
  getUserInfo() {
    return json(this.get(`/user`))
  }

  // Update information in my account
  putUserInfo(userInfo) {
    return json(this.put(`/user`, userInfo))
  }

  save() {
    return this.putUserInfo(this.data)
  }

  // ----------- Files ---------------

  //Show file info
  getFile(fileId) {
    return json(this.get(`/files/${fileId}`)).then(data => new FileImpl(data, this))
  }
  // Get all user files
  getFiles(start, limit, name, ext, ids, sortByDesc) {
    const query = [];
    if (start !== undefined)
    {
      query.push('start=' + start);
    }

    if (limit !== undefined)
    {
      query.push('limit=' + limit);
    }

    if (name)
    {
      query.push('name=' + name);
    }
    
    if (ext)
    {
      query.push('ext=' + ext.toLowerCase());
    }

    if (ids)
    {
      query.push('id=' + ids.join('|'));
    }

    if (sortByDesc)
    {
      query.push('sortBy=desc');
    }

    const queryStr = query.length !== 0 ? ('?' + query.join('&')) : '';
    return json(this.get(`/files${queryStr}`))
      .then(list => {
        return { ...list, result: list.result.map(fileInfo => new FileImpl(fileInfo, this)) }
      })
  }

  // Upload new file
  postFile(file, onProgress) {
    const data = new FormData();
    data.append('file', file);

    return $XMLHttp(`${this.url}/files/`, {
      method: "POST",
      headers: this.headers,
      body: data,
      uploadProgress: onProgress
    })
      .then(request => JSON.parse(request.responseText))
      .then(data => new FileImpl(data, this))
  }

  deleteFile(fileId, body) {
    return json(this.delete(`/files/${fileId}`, body))
  }
  // ----------- Jobs ---------------

  // Show all jobs
  getJobs(state = null, limit = null, start = null, sortByDesc = null) {

    const params = [
      state ? `${"state"}=${state}` : '',
      limit ? `${"limit"}=${limit}` : '',
      start ? `${"start"}=${start}` : '',
      sortByDesc ? `${"sortBy"}=desc` : '',
    ].filter(p => p)

    const query = params.length?`?${params.join("&")}`:"" 

    return json(this.get(`/jobs${query}`))
      .then(list => {
        return { ...list, result: list.result.map(data => new JobImpl(data, this)) }
      })
  }

  // Create new Job
  postJob(fileId, outputFormat) {
    const parameters = this.opt.useVSFX ? {"useVSFX": ""} : {}
    return json(this.post(`/jobs`, { "fileId": fileId, "outputFormat": outputFormat, "parameters": parameters }))
      .then(data => new JobImpl(data, this))
  }

  // Status for specified job
  getJob(jobId) {
    return json(this.get(`/jobs/${jobId}`))
      .then(data => new JobImpl(data, this))
  }

  // Delete job by Id
  deleteJob(jobId) {
    return json(this.delete(`/jobs/${jobId}`))
  }

  // Edit jobs, available only for admins
  editJob(data) {
    return json(this.put(`/jobs/${this.id}`, data))
      .then(data => new JobImpl(data, this))
  }

  downloadReferenceFile(fileId, onProgress, signal) {
    return this.get(`/files/${fileId}/downloads`, signal)
      .then(response => downloadProgress(response, onProgress))
      .then(response => response.arrayBuffer())
  }

  getProjects() {
    return json(this.get(`/projects`))
      .then(projectsData => {
        return projectsData.map(data => new ProjectImpl(data, this))
      })
  }

  createProject(name, description, startDate, endDate, avatarUrl) {
    return json(this.post(`/projects`, { 
      "name" : name,
      "description": description,
      "startDate": startDate.toISOString(),
      "endDate": endDate.toISOString(),
      "avatarUrl" : avatarUrl
    }))
    .then(data => new ProjectImpl(data, this))
  }
  
  getProjectById(id) {
    return json(this.get(`/projects/${id}`)).then(data => new ProjectImpl(data, this))
  }

  createAssembly(files, name)
  {
    return json(this.post(`/assemblies`, { 
      "name" : name,
      "files": files
    }))
    .then(data => new AssemblyImpl(data, this))
  }

  getAssemblyById(id) {
    return json(this.get(`/assemblies/${id}`)).then(data => new AssemblyImpl(data, this))
  }

  getAssemblies(start, limit, name, ids, sortByDesc) {
    const query = [];
    if (start !== undefined)
    {
      query.push('start=' + start);
    }

    if (limit !== undefined)
    {
      query.push('limit=' + limit);
    }

    if (name)
    {
      query.push('name=' + name);
    }

    if (ids)
    {
      query.push('id=' + ids.join('|'));
    }

    if (sortByDesc)
    {
      query.push('sortBy=desc');
    }

    const queryStr = query.length !== 0 ? ('?' + query.join('&')) : '';
    return json(this.get(`/assemblies${queryStr}`))
    .then(assemblies => {
      return {
        ...assemblies,
        result: assemblies.result.map(data => new AssemblyImpl(data, this))
      } 
    })
  }

  deleteAssembly(id) {
    return json(this.delete(`/assemblies/${id}`))
  }
}