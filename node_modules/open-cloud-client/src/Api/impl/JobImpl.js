///////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2002-2021, Open Design Alliance (the "Alliance").
// All rights reserved.
//
// This software and its documentation and related materials are owned by
// the Alliance. The software may only be incorporated into application
// programs owned by members of the Alliance, subject to a signed
// Membership Agreement and Supplemental Software License Agreement with the
// Alliance. The structure and organization of this software are the valuable
// trade secrets of the Alliance and its suppliers. The software is also
// protected by copyright law and international treaty provisions. Application
// programs incorporating this software must include the following statement
// with their copyright notices:
//
//   This application incorporates Open Design Alliance software pursuant to a
//   license agreement with Open Design Alliance.
//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.
//   All rights reserved.
//
// By use of this software, its documentation or related materials, you
// acknowledge and accept the above terms.
///////////////////////////////////////////////////////////////////////////////
import { waitFor } from './Utils'

export class JobImpl {
  
  constructor(data, user) {
    this.data = data
    this.user = user
  }

  get id() { return this.data.id }

  get done() { return this.data.state === "done" }

  get state() { return this.data.state }

  get fileId() { return this.data.fileId }

  get assemblyId() { return this.data.assemblyId }

  get createdAt() { return this.data.createdAt }

  get startedAt() { return this.data.startedAt }

  get lastUpdate() { return this.data.lastUpdate }

  get outputFormat() { return this.data.outputFormat }

  // Status for specified job
  refresh() {
    return this.user.getJob(this.id)
      .then(data => this.data = data)
      .then(() => this)
  }

  // Update some parameters for specific job (available only for admins)
  editJob(data) {
    return this.user.editJob(this.id, data)
      .then(data => this.data = data)
      .then(() => this)
  }

  delete() {
    return this.user.deleteJob(this.id)
  }

  waitForDone() {
    return waitFor(() => this.refresh() && this.done)
  }

}
