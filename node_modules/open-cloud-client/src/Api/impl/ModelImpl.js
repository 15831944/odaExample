///////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2002-2021, Open Design Alliance (the "Alliance").
// All rights reserved.
//
// This software and its documentation and related materials are owned by
// the Alliance. The software may only be incorporated into application
// programs owned by members of the Alliance, subject to a signed
// Membership Agreement and Supplemental Software License Agreement with the
// Alliance. The structure and organization of this software are the valuable
// trade secrets of the Alliance and its suppliers. The software is also
// protected by copyright law and international treaty provisions. Application
// programs incorporating this software must include the following statement
// with their copyright notices:
//
//   This application incorporates Open Design Alliance software pursuant to a
//   license agreement with Open Design Alliance.
//   Open Design Alliance Copyright (C) 2002-2021 by Open Design Alliance.
//   All rights reserved.
//
// By use of this software, its documentation or related materials, you
// acknowledge and accept the above terms.
///////////////////////////////////////////////////////////////////////////////
import { normalizePath } from './Utils'

export class ModelImpl {
  constructor(data, file) {
    this.data = data
    this.file = file
  }

  get id() { return this.data.id }

  get(relativePath, signal) {
    const path = normalizePath(relativePath)
    return this.file.get(`/${path}`, signal)
  }

  post(relativePath, body) {
    const path = normalizePath(relativePath)
    return this.file.post(`/${path}`, body)
  }

  put(relativePath, body) {
    const path = normalizePath(relativePath)
    return this.file.put(`/${path}`, body)
  }

  delete(relativePath, body) {
    const path = normalizePath(relativePath)
    return this.user.delete(`/${path}`, body)
  }

  //Download file resource
  downloadResource(dataId, onProgress, signal) {
    return this.file.downloadResource(dataId, onProgress, signal)
  }

  partialDownloadResource(dataId, signal, onProgress) {
    return this.file.partialDownloadResource(dataId, signal, onProgress)
  }

  getReferences() {
    return this.file.getReferences()
  }

  // Get all viewpoint for file
  getViewPoints() {
    if (! this.file.getViewPoints) {
      throw new Error('Assembly not support viewpoint')
    }
    return this.file.getViewPoints()
      .then(data => data.filter(viewpoint => viewpoint.custom_fields.modelId === this.id))
  }

  // Add viewpoint for file
  postViewpoint(data) {
    if (! this.file.postViewpoint) {
      throw new Error('Assembly not support viewpoint')
    }
    return this.file.postViewpoint({ ...data, custom_fields: { modelId: this.id } })
  }

  // Get viewpoint by guid
  getViewpoint(guid) {
    if (! this.file.getViewpoint) {
      throw new Error('Assembly not support viewpoint')
    }
    return this.file.getViewpoint(guid)
  }

  // Delete viewpoint by guid
  deleteViewpoint(guid) {
    if (! this.file.deleteViewpoint) {
      throw new Error('Assembly not support viewpoint')
    }
    return this.file.deleteViewpoint(guid)
  }

  // Get snapshot data for view point by guid
  getSnapshot(guid) {
    if (! this.file.getSnapshot) {
      throw new Error('Assembly not support viewpoint')
    }
    return this.file.getSnapshot(guid)
  }

  // Get snapshot data for view point by guid
  getSnapshotData(guid, bitmapGuid) {
    if (! this.file.getSnapshotData) {
      throw new Error('Assembly not support viewpoint')
    }
    return this.file.getSnapshot(guid, bitmapGuid)
  }
}