import { Client } from './Api';
import { FileImpl } from './impl/FileImpl'
import { Job } from './Job'
import { Model } from './Model'
import { User } from './User';

/* eslint no-unused-vars: off */
export class File {
  constructor(impl: FileImpl, plugin: Client)


  get user() : User

  get created(): String
  get exports(): Array<String>
  get id(): String
  get metadata(): Object
  get name(): String
  get owner(): String
  get preview(): String
  get properties(): Object
  get size(): Number
  get type(): String
  get version(): Object | String
  get geometryStatus(): String
  get propertiesStatus(): String

  set preview(base64: String)
  set name(name: String)



  getModels(): Promise<Array<Model>>

  getProperty(id: String): Promise<Object>

  getProperties(): Promise<Object>

  getViewPoints(): Promise<Array<Object>>

  delete(): Promise<Object>

  downloadResource(dataId: String, onProgress: (ev:ProgressEvent) => void, signal: AbortSignal): Promise<ArrayBuffer>

  save(): Promise<Object>

  checkout(): Promise<File>

  createReferences(object: {
    fileId: String,
    references: [{ id: String, name: String }]
  })

  getReferences(): Promise<{
    fileId: String,
    references: [{ id: String, name: String }]
  }>

  putReferences(object: {
    fileId: String,
    references: [{ id: String, name: String }]
  }): Promise<Object>

  extractGeometry(): Promise<Job>

  extractProperties(): Promise<Job>
}