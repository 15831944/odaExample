import { Assembly } from './Assembly'
import { File } from './File'
import { ModelImpl } from './impl/ModelImpl'

export class Model {
  constructor(impl: ModelImpl, file: File, assembly: Assembly);

  get file(): File
  get assembly(): Assembly

  get default(): boolean
  get database(): String
  get fileId(): String
  get geometry(): [String]
  get id(): String
  get name(): String
  get version(): String

  getViewpoints(): Promise<Array<Viewpoint>>

  getViewpoint(guid: String): Promise<Viewpoint>

  saveViewpoint(viewpointData: Object) : Promise<Viewpoint>

  deleteViewpoint(viewpointId: String) : Promise<Object>

  getSnapshot(guid: String): Promise<String>

  getSnapshotData(guid: String): Promise<String>

  downloadResource(dataId: String, onProgress: (ev: ProgressEvent) => void, signal: AbortSignal): Promise<ArrayBuffer>

  getReferences(): Promise<{
    fileId: String,
    references: [{ id: String, name: String }]
  }>
}


export class Viewpoint {
  public bitmaps: Array<Object>
  public clipping_planes: Array<Object>
  public coloring: Array<Object>
  public description: String
  public file_id: String
  public guid: String
  public index: Number
  public lines: Array<Object>
  public orthogonal_camera: {
    direction: { x: Number, y: Number, z: Number },
    field_height: Number,
    field_width: Number,
    up_vector: { x: Number, y: Number, z: Number },
    view_point: { x: Number, y: Number, z: Number }
  }
  public perspective_camera: {
    direction: { x: Number, y: Number, z: Number },
    field_of_view: Number,
    up_vector: { x: Number, y: Number, z: Number },
    view_point: { x: Number, y: Number, z: Number }
  }
  public selection: Array<Object>
  public texts: Array<Object>
  public visibility: Array<Object>
}
