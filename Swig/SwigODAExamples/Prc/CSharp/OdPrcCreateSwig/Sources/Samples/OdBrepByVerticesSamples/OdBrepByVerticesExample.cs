/////////////////////////////////////////////////////////////////////////////// 
// Copyright (C) 2002-2022, Open Design Alliance (the "Alliance"). 
// All rights reserved. 
// 
// This software and its documentation and related materials are owned by 
// the Alliance. The software may only be incorporated into application 
// programs owned by members of the Alliance, subject to a signed 
// Membership Agreement and Supplemental Software License Agreement with the
// Alliance. The structure and organization of this software are the valuable  
// trade secrets of the Alliance and its suppliers. The software is also 
// protected by copyright law and international treaty provisions. Application  
// programs incorporating this software must include the following statement 
// with their copyright notices:
//   
//   This application incorporates Open Design Alliance software pursuant to a license 
//   agreement with Open Design Alliance.
//   Open Design Alliance Copyright (C) 2002-2022 by Open Design Alliance. 
//   All rights reserved.
//
// By use of this software, its documentation or related materials, you 
// acknowledge and accept the above terms.
///////////////////////////////////////////////////////////////////////////////
using OdPrcCreateSwigMgd.Samples.OdBrepModelSamples;
using OdPrcCreateSwigMgd.Samples.OdComplexSamples;
using Teigha.Core;
using Teigha.PRC;
using Teigha.TD;

namespace OdPrcCreateSwigMgd.Samples.OdBrepByVerticesSamples
{

  public class OdBrepByVerticesExample_BoxByVerticesExample : OdBrepByVerticesExample
  {
    public override string Description
    {
      get
      {
        return "Brep box example generated by list of vertices";
      }
    }
  }

  public class OdBrepByVerticesExample_PyramidByVerticesExample : OdBrepByVerticesExample
  {
    public override string Description
    {
      get
      {
        return "Brep pyramid example generated by list of vertices";
      }
    }
  }

  public class OdBrepByVerticesExample_TqsSolidByVerticesExample : OdBrepByVerticesExample
  {
    public override string Description
    {
      get
      {
        return "Some brep solid example generated by list of vertices";
      }
    }
  }

  public class OdBrepByVerticesExample_ManyTqsSolidByVerticesExample : OdPrcCreateExample
  {
    public override string Description
    {
      get
      {
        return "many brep solids example generated by list of vertices";
      }
    }

    protected override void Execute(OdStreamBuf pPrcStream, OdPrcCreateSwigMgd_ExampleModes mode, OdDbHostAppServices pH, OdPrcHostAppServices pPrcHost)
    {
      if (mode != OdPrcCreateSwigMgd_ExampleModes.ManyTqsSolidByVerticesExample)
      {
        //"Wrong Mode!!!"
        OdCreationNetSwigExampleLib.Helpers.ODA_VERIFY(false);
        return;
      }

      // common
      OdGeExtents3d extents = new OdGeExtents3d();
      extents.addPoint(new OdGePoint3d(0, 0, 0));
      extents.addPoint(new OdGePoint3d(1, 1, 1));
      OdPrcFile pFile = OdComplexExample_CreateComplexExample.CreatePRCCommonForBrepComplex();

      // Is taken into account the order of addition FS
      OdPrcFileStructure tqsStructure = OdPrcCreateTopologyHelper.addNewFileStructure(pFile);
      OdPrcFileStructure rootStructure = OdPrcCreateTopologyHelper.addNewFileStructure(pFile);

      tqsStructure.setfileStructureId(new OdPrcUniqueId(1, 2, 3, 4));
      rootStructure.setfileStructureId(new OdPrcUniqueId(5, 6, 7, 8));

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // create root Tqs product occurrence
      OdPrcProductOccurrence rootOccurrenceTqs = OdPrcProductOccurrence.createObject();
      tqsStructure.addObject(rootOccurrenceTqs);
      tqsStructure.fileStructureTree().internalData().setRootProductOccurrence(rootOccurrenceTqs.objectId());
      rootOccurrenceTqs.name().setName("Tqs");
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // create root product occurrence
      OdPrcProductOccurrence rootOccurrence = OdPrcProductOccurrence.createObject();
      rootStructure.addObject(rootOccurrence);
      OdPrcObjectIdArray son_occurrences = rootOccurrence.referencesOfProductOccurrence().getSonProductOccurrences();
      pFile.modelFileData().addStartRootOccurrence(rootOccurrence);
      rootStructure.fileStructureTree().internalData().setRootProductOccurrence(rootOccurrence.objectId());
      rootOccurrence.name().setName("ROOT");
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      // fill BrepData
      {
        OdComplexExample_CreateComplexExample.CreateTopologyCommonForComplex(tqsStructure, rootOccurrenceTqs, extents, "TqsSolid");

        // fill it with Brep Data

        OdPrcTopoContextPtrArray topologicalContext = tqsStructure.fileStructureGeometry().fileStructureExactGeometry().topologicalContext();
        OdPrcTopoContext newTopoContext = topologicalContext[topologicalContext.Count - 1];
        OdPrcObjectIdArray bodies = newTopoContext.bodies();
        OdPrcBrepData brepData = bodies[bodies.Count - 1].safeOpenObjectOdRx(Teigha.PRC.OpenMode.kForWrite,false) as OdPrcBrepData;

        OdGePoint3dArray vertexList = new OdGePoint3dArray();
        OdUInt32Array2d vertexOrder = new OdUInt32Array2d();

        // generate list of vertices
        // extruded solid
        vertexList.Add(new OdGePoint3d(90, 175, 300));  //1
        vertexList.Add(new OdGePoint3d(110, 175, 300)); //2
        vertexList.Add(new OdGePoint3d(110, 225, 300)); //3
        vertexList.Add(new OdGePoint3d(90, 225, 300));  //4
        vertexList.Add(new OdGePoint3d(90, 225, 0));    //5
        vertexList.Add(new OdGePoint3d(110, 225, 0));   //6
        vertexList.Add(new OdGePoint3d(110, 175, 0));   //7
        vertexList.Add(new OdGePoint3d(90, 175, 0));    //8

        // foot foundation
        vertexList.Add(new OdGePoint3d(25, 125, -40));  //9
        vertexList.Add(new OdGePoint3d(175, 125, -40)); //10
        vertexList.Add(new OdGePoint3d(115, 170, 0));   //11
        vertexList.Add(new OdGePoint3d(85, 170, 0));    //12
        vertexList.Add(new OdGePoint3d(175, 275, -40)); //13
        vertexList.Add(new OdGePoint3d(115, 230, 0));   //14
        vertexList.Add(new OdGePoint3d(25, 275, -40));  //15
        vertexList.Add(new OdGePoint3d(85, 230, 0));    //16

        // bottom box
        vertexList.Add(new OdGePoint3d(25, 125, -50));  //17
        vertexList.Add(new OdGePoint3d(25, 275, -50));  //18
        vertexList.Add(new OdGePoint3d(175, 275, -50)); //19
        vertexList.Add(new OdGePoint3d(175, 125, -50)); //20

        // generate faces
        // extruded solid
        OdUInt32Array
            face1 = new OdUInt32Array(),
            face2 = new OdUInt32Array(),
            face3 = new OdUInt32Array(),
            face4 = new OdUInt32Array(),
            face5 = new OdUInt32Array(),
            face6 = new OdUInt32Array();

        face1.Add(1); face1.Add(2); face1.Add(3); face1.Add(4);
        face2.Add(2); face2.Add(1); face2.Add(8); face2.Add(7);
        face3.Add(3); face3.Add(2); face3.Add(7); face3.Add(6);
        face4.Add(4); face4.Add(3); face4.Add(6); face4.Add(5);
        face5.Add(1); face5.Add(4); face5.Add(5); face5.Add(8);
        face6.Add(5); face6.Add(6); face6.Add(7); face6.Add(8);

        vertexOrder.Add(face1); vertexOrder.Add(face2); vertexOrder.Add(face3);
        vertexOrder.Add(face4); vertexOrder.Add(face5); vertexOrder.Add(face6);

        // foot foundation
        face1.Clear(); face2.Clear(); face3.Clear(); face4.Clear(); face5.Clear(); face6.Clear();

        face1.Add(9); face1.Add(10); face1.Add(11); face1.Add(12);
        face2.Add(10); face2.Add(13); face2.Add(14); face2.Add(11);
        face3.Add(13); face3.Add(15); face3.Add(16); face3.Add(14);
        face4.Add(15); face4.Add(9); face4.Add(12); face4.Add(16);
        face5.Add(12); face5.Add(11); face5.Add(14); face5.Add(16);
        face6.Add(9); face6.Add(15); face6.Add(13); face6.Add(10);

        vertexOrder.Add(face1); vertexOrder.Add(face2); vertexOrder.Add(face3);
        vertexOrder.Add(face4); vertexOrder.Add(face5); vertexOrder.Add(face6);

        // bottom box
        face1.Clear(); face2.Clear(); face3.Clear(); face4.Clear(); face5.Clear(); face6.Clear();

        face1.Add(9); face1.Add(10); face1.Add(13); face1.Add(15);
        face2.Add(17); face2.Add(20); face2.Add(10); face2.Add(9);
        face3.Add(20); face3.Add(19); face3.Add(13); face3.Add(10);
        face4.Add(19); face4.Add(18); face4.Add(15); face4.Add(13);
        face5.Add(18); face5.Add(17); face5.Add(9); face5.Add(15);
        face6.Add(17); face6.Add(18); face6.Add(19); face6.Add(20);

        vertexOrder.Add(face1); vertexOrder.Add(face2); vertexOrder.Add(face3);
        vertexOrder.Add(face4); vertexOrder.Add(face5); vertexOrder.Add(face6);

        OdCreationNetSwigExampleLib.Helpers.ODA_VERIFY(OdPrcCreateTopologyHelper.fillBrepDataByVertex(brepData, vertexList, vertexOrder) == OdResult.eOk);

        OdPrcObjectIdArray partDefinition = tqsStructure.fileStructureTree().partDefinition();
        OdPrcPartDefinition newDefinitionTqs = partDefinition[partDefinition.Count - 1].safeOpenObject(Teigha.PRC.OpenMode.kForWrite) as OdPrcPartDefinition;
        OdPrcObjectIdArray representationItem = newDefinitionTqs.representationItem();
        OdPrcBrepModel pBrepModelTqs = representationItem[representationItem.Count - 1].openObject(Teigha.PRC.OpenMode.kForWrite) as OdPrcBrepModel;
        tqsStructure.fileStructureGeometry().fileStructureExactGeometry().updateCoedgeNeighbours();
        OdCreationNetSwigExampleLib.Helpers.ODA_VERIFY(pBrepModelTqs.updateIsClosedFlag() == OdResult.eOk);
      }

      OdPrcTransformation3d shift = new OdPrcTransformation3d();
      double r = 0, g = 0, b = 0;
      for (int idx = 0; idx < 40000; idx++)
      {
        OdPrcProductOccurrence newProductOccurrenceForTqs = OdPrcProductOccurrence.createObject();

        // set color
        if (idx % 3 == 0)
        {
          r = 1; g = 0; b = 0;
        }
        else if (idx % 2 == 0)
        {
          r = 0; g = 1; b = 0;
        }
        else
        {
          r = 0; g = 0; b = 1;
        }
        OdPrcCreateTopologyHelper.addColorToBaseWithGraphics(rootStructure, newProductOccurrenceForTqs, r, g, b);

        string name = "child " + idx;
        newProductOccurrenceForTqs.name().setName(name);
        rootStructure.addObject(newProductOccurrenceForTqs);

        // add transformation
        OdGeVector3d translateVect = new OdGeVector3d(idx % 400 * 160, idx / 400 * 160, 0);
        OdGeMatrix3d geMatrix = new OdGeMatrix3d();
        geMatrix.setTranslation(translateVect);
        shift.set(geMatrix);
        newProductOccurrenceForTqs.setLocation(shift);

        newProductOccurrenceForTqs.referencesOfProductOccurrence().setPrototype(rootOccurrenceTqs.objectId());

        son_occurrences.Add(newProductOccurrenceForTqs.objectId());
      }

      // export prc
      {
        pFile.writeFile(pPrcStream);
      }
    }
  }


  public abstract class OdBrepByVerticesExample : OdPrcCreateExample
  {
    protected override void Execute(OdStreamBuf pPrcStream, OdPrcCreateSwigMgd_ExampleModes mode, OdDbHostAppServices pH, OdPrcHostAppServices pPrcHost)
    {
      // create prc BrepData Model
      OdPrcFile pFile = OdPrcCreateTopologyHelper.createTopologyCommon();
      OdPrcFileStructurePtrArray fileStructures = pFile.fileStructures();
      OdPrcFileStructure newStructure = fileStructures[fileStructures.Count - 1];
      OdPrcProductOccurrence pRootPO = newStructure.fileStructureTree().internalData().getRootProductOccurrenceID().openObject(Teigha.PRC.OpenMode.kForWrite) as OdPrcProductOccurrence;
      OdPrcPartDefinition newDefinition = OdPrcCreateTopologyHelper.createPartDefinition(newStructure, pRootPO);
      OdPrcTopoContext newTopoContext = OdPrcCreateTopologyHelper.createTopoContext(newStructure);

      OdGeExtents3d extents = new OdGeExtents3d(new OdGePoint3d(0, 0, 0), new OdGePoint3d(1, 1, 1));
      OdPrcRepresentationItem newRepItem = OdPrcCreateTopologyHelper.createRI<OdPrcBrepModel>(newStructure, newDefinition);
      newDefinition.boundingBox().setbox(extents);
      OdPrcBrepData brepData = OdPrcCreateTopologyHelper.createBody<OdPrcBrepData>(newStructure, newTopoContext, newRepItem);
      brepData.boundingBox().setbox(extents);
      brepData.contentBody().setBoundingBoxBehaviour(2);

      // Add line style to globals
      OdBrepModelExample.addLineStyleForBrep(newStructure, 1.0f, 0.0f, 0.0f);

      // Add graphic
      OdBrepModelExample.addGraphicDataToBrep(newStructure);
      pRootPO.name().setName("BrepByVertices");


      OdGePoint3dArray vertexList = new OdGePoint3dArray();
      OdUInt32Array2d vertexOrder = new OdUInt32Array2d();
      if (mode == OdPrcCreateSwigMgd_ExampleModes.BoxByVerticesExample)
      {
        newRepItem.name().setName("BoxByVertices");

        // generate list of vertices
        vertexList.Add(new OdGePoint3d(0, 0, 20));
        vertexList.Add(new OdGePoint3d(20, 0, 20));
        vertexList.Add(new OdGePoint3d(20, 20, 20));
        vertexList.Add(new OdGePoint3d(0, 20, 20));
        vertexList.Add(new OdGePoint3d(0, 20, 0));
        vertexList.Add(new OdGePoint3d(20, 20, 0));
        vertexList.Add(new OdGePoint3d(20, 0, 0));
        vertexList.Add(new OdGePoint3d(0, 0, 0));

        // generate faces
        OdUInt32Array
          face1 = new OdUInt32Array(),
          face2 = new OdUInt32Array(),
          face3 = new OdUInt32Array(),
          face4 = new OdUInt32Array(),
          face5 = new OdUInt32Array(),
          face6 = new OdUInt32Array();

        face1.Add(1); face1.Add(2); face1.Add(3); face1.Add(4);
        face2.Add(3); face2.Add(2); face2.Add(7); face2.Add(6);
        face3.Add(5); face3.Add(6); face3.Add(7); face3.Add(8);
        face4.Add(1); face4.Add(4); face4.Add(5); face4.Add(8);
        face5.Add(2); face5.Add(1); face5.Add(8); face5.Add(7);
        face6.Add(4); face6.Add(3); face6.Add(6); face6.Add(5);

        vertexOrder.Add(face1); vertexOrder.Add(face2); vertexOrder.Add(face3);
        vertexOrder.Add(face4); vertexOrder.Add(face5); vertexOrder.Add(face6);
      }
      else if (mode == OdPrcCreateSwigMgd_ExampleModes.PyramidByVerticesExample)
      {
        newRepItem.name().setName("PyramidByVertices");

        // generate list of vertices
        vertexList.Add(new OdGePoint3d(0, 0, 0));
        vertexList.Add(new OdGePoint3d(20, 0, 0));
        vertexList.Add(new OdGePoint3d(20, 20, 0));
        vertexList.Add(new OdGePoint3d(0, 20, 0));
        vertexList.Add(new OdGePoint3d(10, 10, 25));

        // generate faces
        OdUInt32Array
          face1 = new OdUInt32Array(),
          face2 = new OdUInt32Array(),
          face3 = new OdUInt32Array(),
          face4 = new OdUInt32Array(),
          face5 = new OdUInt32Array();

        face1.Add(1); face1.Add(2); face1.Add(3); face1.Add(4);
        face2.Add(5); face2.Add(3); face2.Add(2);
        face3.Add(5); face3.Add(2); face3.Add(1);
        face4.Add(5); face4.Add(1); face4.Add(4);
        face5.Add(5); face5.Add(4); face5.Add(3);

        vertexOrder.Add(face1); vertexOrder.Add(face2); vertexOrder.Add(face3);
        vertexOrder.Add(face4); vertexOrder.Add(face5);
      }
      else if (mode == OdPrcCreateSwigMgd_ExampleModes.TqsSolidByVerticesExample)
      {
        newRepItem.name().setName("TqsSolidByVertices");

        // generate list of vertices
        // extruded solid
        vertexList.Add(new OdGePoint3d(90, 175, 300));  //1
        vertexList.Add(new OdGePoint3d(110, 175, 300)); //2
        vertexList.Add(new OdGePoint3d(110, 225, 300)); //3
        vertexList.Add(new OdGePoint3d(90, 225, 300));  //4
        vertexList.Add(new OdGePoint3d(90, 225, 0));    //5
        vertexList.Add(new OdGePoint3d(110, 225, 0));   //6
        vertexList.Add(new OdGePoint3d(110, 175, 0));   //7
        vertexList.Add(new OdGePoint3d(90, 175, 0));    //8

        // foot foundation
        vertexList.Add(new OdGePoint3d(25, 125, -40));  //9
        vertexList.Add(new OdGePoint3d(175, 125, -40)); //10
        vertexList.Add(new OdGePoint3d(115, 170, 0));   //11
        vertexList.Add(new OdGePoint3d(85, 170, 0));    //12
        vertexList.Add(new OdGePoint3d(175, 275, -40)); //13
        vertexList.Add(new OdGePoint3d(115, 230, 0));   //14
        vertexList.Add(new OdGePoint3d(25, 275, -40));  //15
        vertexList.Add(new OdGePoint3d(85, 230, 0));    //16

        // bottom box
        vertexList.Add(new OdGePoint3d(25, 125, -50));  //17
        vertexList.Add(new OdGePoint3d(25, 275, -50));  //18
        vertexList.Add(new OdGePoint3d(175, 275, -50)); //19
        vertexList.Add(new OdGePoint3d(175, 125, -50)); //20

        // generate faces
        // extruded solid
        OdUInt32Array
            face1 = new OdUInt32Array(),
            face2 = new OdUInt32Array(),
            face3 = new OdUInt32Array(),
            face4 = new OdUInt32Array(),
            face5 = new OdUInt32Array(),
            face6 = new OdUInt32Array();

        face1.Add(1); face1.Add(2); face1.Add(3); face1.Add(4);
        face2.Add(2); face2.Add(1); face2.Add(8); face2.Add(7);
        face3.Add(3); face3.Add(2); face3.Add(7); face3.Add(6);
        face4.Add(4); face4.Add(3); face4.Add(6); face4.Add(5);
        face5.Add(1); face5.Add(4); face5.Add(5); face5.Add(8);
        face6.Add(5); face6.Add(6); face6.Add(7); face6.Add(8);

        vertexOrder.Add(face1); vertexOrder.Add(face2); vertexOrder.Add(face3);
        vertexOrder.Add(face4); vertexOrder.Add(face5); vertexOrder.Add(face6);

        // foot foundation
        face1.Clear(); face2.Clear(); face3.Clear(); face4.Clear(); face5.Clear(); face6.Clear();

        face1.Add(9); face1.Add(10); face1.Add(11); face1.Add(12);
        face2.Add(10); face2.Add(13); face2.Add(14); face2.Add(11);
        face3.Add(13); face3.Add(15); face3.Add(16); face3.Add(14);
        face4.Add(15); face4.Add(9); face4.Add(12); face4.Add(16);
        face5.Add(12); face5.Add(11); face5.Add(14); face5.Add(16);
        face6.Add(9); face6.Add(15); face6.Add(13); face6.Add(10);

        vertexOrder.Add(face1); vertexOrder.Add(face2); vertexOrder.Add(face3);
        vertexOrder.Add(face4); vertexOrder.Add(face5); vertexOrder.Add(face6);

        // bottom box
        face1.Clear(); face2.Clear(); face3.Clear(); face4.Clear(); face5.Clear(); face6.Clear();

        face1.Add(9); face1.Add(10); face1.Add(13); face1.Add(15);
        face2.Add(17); face2.Add(20); face2.Add(10); face2.Add(9);
        face3.Add(20); face3.Add(19); face3.Add(13); face3.Add(10);
        face4.Add(19); face4.Add(18); face4.Add(15); face4.Add(13);
        face5.Add(18); face5.Add(17); face5.Add(9); face5.Add(15);
        face6.Add(17); face6.Add(18); face6.Add(19); face6.Add(20);

        vertexOrder.Add(face1); vertexOrder.Add(face2); vertexOrder.Add(face3);
        vertexOrder.Add(face4); vertexOrder.Add(face5); vertexOrder.Add(face6);
      }
      else
      {
        //"Wrong Mode!!!
        OdCreationNetSwigExampleLib.Helpers.ODA_VERIFY(false);
        return;
      }

      OdCreationNetSwigExampleLib.Helpers.ODA_VERIFY(OdPrcCreateTopologyHelper.fillBrepDataByVertex(brepData, vertexList, vertexOrder) == OdResult.eOk);

      OdPrcObjectIdArray representationItem = newDefinition.representationItem();
      OdPrcBrepModel pBrepModel = representationItem[representationItem.Count - 1].openObject(Teigha.PRC.OpenMode.kForWrite) as OdPrcBrepModel;
      newStructure.fileStructureGeometry().fileStructureExactGeometry().updateCoedgeNeighbours();
      OdCreationNetSwigExampleLib.Helpers.ODA_VERIFY(pBrepModel.updateIsClosedFlag() == OdResult.eOk);

      // export prc
      pFile.writeFile(pPrcStream);
    }
  }
}
