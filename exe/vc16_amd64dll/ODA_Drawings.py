# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ODA_Drawings
else:
    import _ODA_Drawings

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import ODA_Kernel
class OdRxObjectImpl_OdDbGeomRef(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdRxObjectImpl_OdDbGeomRef_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdRxObjectImpl_OdDbGeomRef

# Register OdRxObjectImpl_OdDbGeomRef in _ODA_Drawings:
_ODA_Drawings.OdRxObjectImpl_OdDbGeomRef_swigregister(OdRxObjectImpl_OdDbGeomRef)

def OdRxObjectImpl_OdDbGeomRef_createObject(*args):
    return _ODA_Drawings.OdRxObjectImpl_OdDbGeomRef_createObject(*args)

class OdRxObjectImpl_OdDbSubentRef(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdRxObjectImpl_OdDbSubentRef_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdRxObjectImpl_OdDbSubentRef

# Register OdRxObjectImpl_OdDbSubentRef in _ODA_Drawings:
_ODA_Drawings.OdRxObjectImpl_OdDbSubentRef_swigregister(OdRxObjectImpl_OdDbSubentRef)

def OdRxObjectImpl_OdDbSubentRef_createObject(*args):
    return _ODA_Drawings.OdRxObjectImpl_OdDbSubentRef_createObject(*args)

class OdDbObjectIdArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_begin(self, *args)

    def end(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_end(self, *args)

    def rbegin(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_rbegin(self, *args)

    def rend(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_rend(self, *args)

    def resize(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_resize(self, *args)

    def size(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_size(self, *args)

    def empty(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_empty(self, *args)

    def capacity(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_capacity(self, *args)

    def reserve(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_reserve(self, *args)

    def assign(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_assign(self, *args)

    def erase(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_erase(self, *args)

    def clear(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_clear(self, *args)

    def push_back(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_push_back(self, *args)

    def contains(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_contains(self, *args)

    def length(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_length(self, *args)

    def isEmpty(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_isEmpty(self, *args)

    def logicalLength(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_logicalLength(self, *args)

    def physicalLength(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_physicalLength(self, *args)

    def growLength(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_growLength(self, *args)

    def getPtr(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_getPtr(self, *args)

    def asArrayPtr(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_asArrayPtr(self, *args)

    def setAt(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_setAt(self, *args)

    def getAt(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_getAt(self, *args)

    def first(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_first(self, *args)

    def last(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_last(self, *args)

    def removeFirst(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_removeFirst(self, *args)

    def removeLast(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_removeLast(self, *args)

    def setGrowLength(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_setGrowLength(self, *args)

    def __init__(self, *args):
        _ODA_Drawings.OdDbObjectIdArray_swiginit(self, _ODA_Drawings.new_OdDbObjectIdArray(*args))

    @staticmethod
    def create(*args):
        return _ODA_Drawings.OdDbObjectIdArray_create(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectIdArray

    def __eq__(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray___eq__(self, *args)

    def __ne__(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray___ne__(self, *args)

    def setAll(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_setAll(self, *args)

    def append(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_append(self, *args)

    def insertAt(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_insertAt(self, *args)

    def removeAt(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_removeAt(self, *args)

    def removeSubArray(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_removeSubArray(self, *args)

    def find(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_find(self, *args)

    def setLogicalLength(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_setLogicalLength(self, *args)

    def setPhysicalLength(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_setPhysicalLength(self, *args)

    def reverse(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_reverse(self, *args)

    def swap(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_swap(self, *args)

    def remove(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_remove(self, *args)

    def Insert(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_Insert(self, *args)

    def At(self, *args):
        return _ODA_Drawings.OdDbObjectIdArray_At(self, *args)

# Register OdDbObjectIdArray in _ODA_Drawings:
_ODA_Drawings.OdDbObjectIdArray_swigregister(OdDbObjectIdArray)

def OdDbObjectIdArray_create(*args):
    return _ODA_Drawings.OdDbObjectIdArray_create(*args)

class EdgeArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self, *args):
        return _ODA_Drawings.EdgeArray_begin(self, *args)

    def end(self, *args):
        return _ODA_Drawings.EdgeArray_end(self, *args)

    def rbegin(self, *args):
        return _ODA_Drawings.EdgeArray_rbegin(self, *args)

    def rend(self, *args):
        return _ODA_Drawings.EdgeArray_rend(self, *args)

    def resize(self, *args):
        return _ODA_Drawings.EdgeArray_resize(self, *args)

    def size(self, *args):
        return _ODA_Drawings.EdgeArray_size(self, *args)

    def empty(self, *args):
        return _ODA_Drawings.EdgeArray_empty(self, *args)

    def capacity(self, *args):
        return _ODA_Drawings.EdgeArray_capacity(self, *args)

    def reserve(self, *args):
        return _ODA_Drawings.EdgeArray_reserve(self, *args)

    def assign(self, *args):
        return _ODA_Drawings.EdgeArray_assign(self, *args)

    def erase(self, *args):
        return _ODA_Drawings.EdgeArray_erase(self, *args)

    def clear(self, *args):
        return _ODA_Drawings.EdgeArray_clear(self, *args)

    def push_back(self, *args):
        return _ODA_Drawings.EdgeArray_push_back(self, *args)

    def contains(self, *args):
        return _ODA_Drawings.EdgeArray_contains(self, *args)

    def length(self, *args):
        return _ODA_Drawings.EdgeArray_length(self, *args)

    def isEmpty(self, *args):
        return _ODA_Drawings.EdgeArray_isEmpty(self, *args)

    def logicalLength(self, *args):
        return _ODA_Drawings.EdgeArray_logicalLength(self, *args)

    def physicalLength(self, *args):
        return _ODA_Drawings.EdgeArray_physicalLength(self, *args)

    def growLength(self, *args):
        return _ODA_Drawings.EdgeArray_growLength(self, *args)

    def getPtr(self, *args):
        return _ODA_Drawings.EdgeArray_getPtr(self, *args)

    def asArrayPtr(self, *args):
        return _ODA_Drawings.EdgeArray_asArrayPtr(self, *args)

    def setAt(self, *args):
        return _ODA_Drawings.EdgeArray_setAt(self, *args)

    def getAt(self, *args):
        return _ODA_Drawings.EdgeArray_getAt(self, *args)

    def first(self, *args):
        return _ODA_Drawings.EdgeArray_first(self, *args)

    def last(self, *args):
        return _ODA_Drawings.EdgeArray_last(self, *args)

    def removeFirst(self, *args):
        return _ODA_Drawings.EdgeArray_removeFirst(self, *args)

    def removeLast(self, *args):
        return _ODA_Drawings.EdgeArray_removeLast(self, *args)

    def setGrowLength(self, *args):
        return _ODA_Drawings.EdgeArray_setGrowLength(self, *args)

    def __init__(self, *args):
        _ODA_Drawings.EdgeArray_swiginit(self, _ODA_Drawings.new_EdgeArray(*args))

    @staticmethod
    def create(*args):
        return _ODA_Drawings.EdgeArray_create(*args)
    __swig_destroy__ = _ODA_Drawings.delete_EdgeArray

    def __eq__(self, *args):
        return _ODA_Drawings.EdgeArray___eq__(self, *args)

    def __ne__(self, *args):
        return _ODA_Drawings.EdgeArray___ne__(self, *args)

    def setAll(self, *args):
        return _ODA_Drawings.EdgeArray_setAll(self, *args)

    def append(self, *args):
        return _ODA_Drawings.EdgeArray_append(self, *args)

    def insertAt(self, *args):
        return _ODA_Drawings.EdgeArray_insertAt(self, *args)

    def removeAt(self, *args):
        return _ODA_Drawings.EdgeArray_removeAt(self, *args)

    def removeSubArray(self, *args):
        return _ODA_Drawings.EdgeArray_removeSubArray(self, *args)

    def find(self, *args):
        return _ODA_Drawings.EdgeArray_find(self, *args)

    def setLogicalLength(self, *args):
        return _ODA_Drawings.EdgeArray_setLogicalLength(self, *args)

    def setPhysicalLength(self, *args):
        return _ODA_Drawings.EdgeArray_setPhysicalLength(self, *args)

    def reverse(self, *args):
        return _ODA_Drawings.EdgeArray_reverse(self, *args)

    def swap(self, *args):
        return _ODA_Drawings.EdgeArray_swap(self, *args)

    def remove(self, *args):
        return _ODA_Drawings.EdgeArray_remove(self, *args)

    def Insert(self, *args):
        return _ODA_Drawings.EdgeArray_Insert(self, *args)

    def At(self, *args):
        return _ODA_Drawings.EdgeArray_At(self, *args)

# Register EdgeArray in _ODA_Drawings:
_ODA_Drawings.EdgeArray_swigregister(EdgeArray)

def EdgeArray_create(*args):
    return _ODA_Drawings.EdgeArray_create(*args)

class OdDbEntityPtrArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_begin(self, *args)

    def end(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_end(self, *args)

    def rbegin(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_rbegin(self, *args)

    def rend(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_rend(self, *args)

    def resize(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_resize(self, *args)

    def size(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_size(self, *args)

    def empty(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_empty(self, *args)

    def capacity(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_capacity(self, *args)

    def reserve(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_reserve(self, *args)

    def assign(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_assign(self, *args)

    def erase(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_erase(self, *args)

    def clear(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_clear(self, *args)

    def push_back(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_push_back(self, *args)

    def contains(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_contains(self, *args)

    def length(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_length(self, *args)

    def isEmpty(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_isEmpty(self, *args)

    def logicalLength(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_logicalLength(self, *args)

    def physicalLength(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_physicalLength(self, *args)

    def growLength(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_growLength(self, *args)

    def getPtr(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_getPtr(self, *args)

    def asArrayPtr(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_asArrayPtr(self, *args)

    def setAt(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_setAt(self, *args)

    def getAt(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_getAt(self, *args)

    def first(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_first(self, *args)

    def last(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_last(self, *args)

    def removeFirst(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_removeFirst(self, *args)

    def removeLast(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_removeLast(self, *args)

    def setGrowLength(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_setGrowLength(self, *args)

    def __init__(self, *args):
        _ODA_Drawings.OdDbEntityPtrArray_swiginit(self, _ODA_Drawings.new_OdDbEntityPtrArray(*args))

    @staticmethod
    def create(*args):
        return _ODA_Drawings.OdDbEntityPtrArray_create(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbEntityPtrArray

    def __eq__(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray___eq__(self, *args)

    def __ne__(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray___ne__(self, *args)

    def setAll(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_setAll(self, *args)

    def append(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_append(self, *args)

    def insertAt(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_insertAt(self, *args)

    def removeAt(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_removeAt(self, *args)

    def removeSubArray(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_removeSubArray(self, *args)

    def find(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_find(self, *args)

    def setLogicalLength(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_setLogicalLength(self, *args)

    def setPhysicalLength(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_setPhysicalLength(self, *args)

    def reverse(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_reverse(self, *args)

    def swap(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_swap(self, *args)

    def remove(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_remove(self, *args)

    def Insert(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_Insert(self, *args)

    def At(self, *args):
        return _ODA_Drawings.OdDbEntityPtrArray_At(self, *args)

# Register OdDbEntityPtrArray in _ODA_Drawings:
_ODA_Drawings.OdDbEntityPtrArray_swigregister(OdDbEntityPtrArray)

def OdDbEntityPtrArray_create(*args):
    return _ODA_Drawings.OdDbEntityPtrArray_create(*args)

class OdDbFieldArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self, *args):
        return _ODA_Drawings.OdDbFieldArray_begin(self, *args)

    def end(self, *args):
        return _ODA_Drawings.OdDbFieldArray_end(self, *args)

    def rbegin(self, *args):
        return _ODA_Drawings.OdDbFieldArray_rbegin(self, *args)

    def rend(self, *args):
        return _ODA_Drawings.OdDbFieldArray_rend(self, *args)

    def resize(self, *args):
        return _ODA_Drawings.OdDbFieldArray_resize(self, *args)

    def size(self, *args):
        return _ODA_Drawings.OdDbFieldArray_size(self, *args)

    def empty(self, *args):
        return _ODA_Drawings.OdDbFieldArray_empty(self, *args)

    def capacity(self, *args):
        return _ODA_Drawings.OdDbFieldArray_capacity(self, *args)

    def reserve(self, *args):
        return _ODA_Drawings.OdDbFieldArray_reserve(self, *args)

    def assign(self, *args):
        return _ODA_Drawings.OdDbFieldArray_assign(self, *args)

    def erase(self, *args):
        return _ODA_Drawings.OdDbFieldArray_erase(self, *args)

    def clear(self, *args):
        return _ODA_Drawings.OdDbFieldArray_clear(self, *args)

    def push_back(self, *args):
        return _ODA_Drawings.OdDbFieldArray_push_back(self, *args)

    def contains(self, *args):
        return _ODA_Drawings.OdDbFieldArray_contains(self, *args)

    def length(self, *args):
        return _ODA_Drawings.OdDbFieldArray_length(self, *args)

    def isEmpty(self, *args):
        return _ODA_Drawings.OdDbFieldArray_isEmpty(self, *args)

    def logicalLength(self, *args):
        return _ODA_Drawings.OdDbFieldArray_logicalLength(self, *args)

    def physicalLength(self, *args):
        return _ODA_Drawings.OdDbFieldArray_physicalLength(self, *args)

    def growLength(self, *args):
        return _ODA_Drawings.OdDbFieldArray_growLength(self, *args)

    def getPtr(self, *args):
        return _ODA_Drawings.OdDbFieldArray_getPtr(self, *args)

    def asArrayPtr(self, *args):
        return _ODA_Drawings.OdDbFieldArray_asArrayPtr(self, *args)

    def setAt(self, *args):
        return _ODA_Drawings.OdDbFieldArray_setAt(self, *args)

    def getAt(self, *args):
        return _ODA_Drawings.OdDbFieldArray_getAt(self, *args)

    def first(self, *args):
        return _ODA_Drawings.OdDbFieldArray_first(self, *args)

    def last(self, *args):
        return _ODA_Drawings.OdDbFieldArray_last(self, *args)

    def removeFirst(self, *args):
        return _ODA_Drawings.OdDbFieldArray_removeFirst(self, *args)

    def removeLast(self, *args):
        return _ODA_Drawings.OdDbFieldArray_removeLast(self, *args)

    def setGrowLength(self, *args):
        return _ODA_Drawings.OdDbFieldArray_setGrowLength(self, *args)

    def __init__(self, *args):
        _ODA_Drawings.OdDbFieldArray_swiginit(self, _ODA_Drawings.new_OdDbFieldArray(*args))

    @staticmethod
    def create(*args):
        return _ODA_Drawings.OdDbFieldArray_create(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbFieldArray

    def __eq__(self, *args):
        return _ODA_Drawings.OdDbFieldArray___eq__(self, *args)

    def __ne__(self, *args):
        return _ODA_Drawings.OdDbFieldArray___ne__(self, *args)

    def setAll(self, *args):
        return _ODA_Drawings.OdDbFieldArray_setAll(self, *args)

    def append(self, *args):
        return _ODA_Drawings.OdDbFieldArray_append(self, *args)

    def insertAt(self, *args):
        return _ODA_Drawings.OdDbFieldArray_insertAt(self, *args)

    def removeAt(self, *args):
        return _ODA_Drawings.OdDbFieldArray_removeAt(self, *args)

    def removeSubArray(self, *args):
        return _ODA_Drawings.OdDbFieldArray_removeSubArray(self, *args)

    def find(self, *args):
        return _ODA_Drawings.OdDbFieldArray_find(self, *args)

    def setLogicalLength(self, *args):
        return _ODA_Drawings.OdDbFieldArray_setLogicalLength(self, *args)

    def setPhysicalLength(self, *args):
        return _ODA_Drawings.OdDbFieldArray_setPhysicalLength(self, *args)

    def reverse(self, *args):
        return _ODA_Drawings.OdDbFieldArray_reverse(self, *args)

    def swap(self, *args):
        return _ODA_Drawings.OdDbFieldArray_swap(self, *args)

    def remove(self, *args):
        return _ODA_Drawings.OdDbFieldArray_remove(self, *args)

    def Insert(self, *args):
        return _ODA_Drawings.OdDbFieldArray_Insert(self, *args)

    def At(self, *args):
        return _ODA_Drawings.OdDbFieldArray_At(self, *args)

# Register OdDbFieldArray in _ODA_Drawings:
_ODA_Drawings.OdDbFieldArray_swigregister(OdDbFieldArray)

def OdDbFieldArray_create(*args):
    return _ODA_Drawings.OdDbFieldArray_create(*args)

class OdHatchPattern(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self, *args):
        return _ODA_Drawings.OdHatchPattern_begin(self, *args)

    def end(self, *args):
        return _ODA_Drawings.OdHatchPattern_end(self, *args)

    def rbegin(self, *args):
        return _ODA_Drawings.OdHatchPattern_rbegin(self, *args)

    def rend(self, *args):
        return _ODA_Drawings.OdHatchPattern_rend(self, *args)

    def resize(self, *args):
        return _ODA_Drawings.OdHatchPattern_resize(self, *args)

    def size(self, *args):
        return _ODA_Drawings.OdHatchPattern_size(self, *args)

    def empty(self, *args):
        return _ODA_Drawings.OdHatchPattern_empty(self, *args)

    def capacity(self, *args):
        return _ODA_Drawings.OdHatchPattern_capacity(self, *args)

    def reserve(self, *args):
        return _ODA_Drawings.OdHatchPattern_reserve(self, *args)

    def assign(self, *args):
        return _ODA_Drawings.OdHatchPattern_assign(self, *args)

    def erase(self, *args):
        return _ODA_Drawings.OdHatchPattern_erase(self, *args)

    def clear(self, *args):
        return _ODA_Drawings.OdHatchPattern_clear(self, *args)

    def push_back(self, *args):
        return _ODA_Drawings.OdHatchPattern_push_back(self, *args)

    def contains(self, *args):
        return _ODA_Drawings.OdHatchPattern_contains(self, *args)

    def length(self, *args):
        return _ODA_Drawings.OdHatchPattern_length(self, *args)

    def isEmpty(self, *args):
        return _ODA_Drawings.OdHatchPattern_isEmpty(self, *args)

    def logicalLength(self, *args):
        return _ODA_Drawings.OdHatchPattern_logicalLength(self, *args)

    def physicalLength(self, *args):
        return _ODA_Drawings.OdHatchPattern_physicalLength(self, *args)

    def growLength(self, *args):
        return _ODA_Drawings.OdHatchPattern_growLength(self, *args)

    def getPtr(self, *args):
        return _ODA_Drawings.OdHatchPattern_getPtr(self, *args)

    def asArrayPtr(self, *args):
        return _ODA_Drawings.OdHatchPattern_asArrayPtr(self, *args)

    def setAt(self, *args):
        return _ODA_Drawings.OdHatchPattern_setAt(self, *args)

    def getAt(self, *args):
        return _ODA_Drawings.OdHatchPattern_getAt(self, *args)

    def first(self, *args):
        return _ODA_Drawings.OdHatchPattern_first(self, *args)

    def last(self, *args):
        return _ODA_Drawings.OdHatchPattern_last(self, *args)

    def removeFirst(self, *args):
        return _ODA_Drawings.OdHatchPattern_removeFirst(self, *args)

    def removeLast(self, *args):
        return _ODA_Drawings.OdHatchPattern_removeLast(self, *args)

    def setGrowLength(self, *args):
        return _ODA_Drawings.OdHatchPattern_setGrowLength(self, *args)

    def __init__(self, *args):
        _ODA_Drawings.OdHatchPattern_swiginit(self, _ODA_Drawings.new_OdHatchPattern(*args))

    @staticmethod
    def create(*args):
        return _ODA_Drawings.OdHatchPattern_create(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdHatchPattern

    def __eq__(self, *args):
        return _ODA_Drawings.OdHatchPattern___eq__(self, *args)

    def __ne__(self, *args):
        return _ODA_Drawings.OdHatchPattern___ne__(self, *args)

    def setAll(self, *args):
        return _ODA_Drawings.OdHatchPattern_setAll(self, *args)

    def append(self, *args):
        return _ODA_Drawings.OdHatchPattern_append(self, *args)

    def insertAt(self, *args):
        return _ODA_Drawings.OdHatchPattern_insertAt(self, *args)

    def removeAt(self, *args):
        return _ODA_Drawings.OdHatchPattern_removeAt(self, *args)

    def removeSubArray(self, *args):
        return _ODA_Drawings.OdHatchPattern_removeSubArray(self, *args)

    def find(self, *args):
        return _ODA_Drawings.OdHatchPattern_find(self, *args)

    def setLogicalLength(self, *args):
        return _ODA_Drawings.OdHatchPattern_setLogicalLength(self, *args)

    def setPhysicalLength(self, *args):
        return _ODA_Drawings.OdHatchPattern_setPhysicalLength(self, *args)

    def reverse(self, *args):
        return _ODA_Drawings.OdHatchPattern_reverse(self, *args)

    def swap(self, *args):
        return _ODA_Drawings.OdHatchPattern_swap(self, *args)

    def remove(self, *args):
        return _ODA_Drawings.OdHatchPattern_remove(self, *args)

    def Insert(self, *args):
        return _ODA_Drawings.OdHatchPattern_Insert(self, *args)

    def At(self, *args):
        return _ODA_Drawings.OdHatchPattern_At(self, *args)

# Register OdHatchPattern in _ODA_Drawings:
_ODA_Drawings.OdHatchPattern_swigregister(OdHatchPattern)

def OdHatchPattern_create(*args):
    return _ODA_Drawings.OdHatchPattern_create(*args)

kNotOpen = _ODA_Drawings.kNotOpen
kForRead = _ODA_Drawings.kForRead
kForWrite = _ODA_Drawings.kForWrite
kForNotify = _ODA_Drawings.kForNotify
class OdDbObjectId(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbObjectId_swiginit(self, _ODA_Drawings.new_OdDbObjectId(*args))

    def isNull(self, *args):
        return _ODA_Drawings.OdDbObjectId_isNull(self, *args)

    def setNull(self, *args):
        return _ODA_Drawings.OdDbObjectId_setNull(self, *args)

    def isValid(self, *args):
        return _ODA_Drawings.OdDbObjectId_isValid(self, *args)

    def __lt__(self, *args):
        return _ODA_Drawings.OdDbObjectId___lt__(self, *args)

    def __gt__(self, *args):
        return _ODA_Drawings.OdDbObjectId___gt__(self, *args)

    def __ge__(self, *args):
        return _ODA_Drawings.OdDbObjectId___ge__(self, *args)

    def __le__(self, *args):
        return _ODA_Drawings.OdDbObjectId___le__(self, *args)

    def __eq__(self, *args):
        return _ODA_Drawings.OdDbObjectId___eq__(self, *args)

    def __ne__(self, *args):
        return _ODA_Drawings.OdDbObjectId___ne__(self, *args)

    def AsOdDbStubPointer(self, *args):
        return _ODA_Drawings.OdDbObjectId_AsOdDbStubPointer(self, *args)

    def __deref__(self, *args):
        return _ODA_Drawings.OdDbObjectId___deref__(self, *args)

    def database(self, *args):
        return _ODA_Drawings.OdDbObjectId_database(self, *args)

    def originalDatabase(self, *args):
        return _ODA_Drawings.OdDbObjectId_originalDatabase(self, *args)

    def convertToRedirectedId(self, *args):
        return _ODA_Drawings.OdDbObjectId_convertToRedirectedId(self, *args)

    def isErased(self, *args):
        return _ODA_Drawings.OdDbObjectId_isErased(self, *args)

    def isEffectivelyErased(self, *args):
        return _ODA_Drawings.OdDbObjectId_isEffectivelyErased(self, *args)

    def objectLeftOnDisk(self, *args):
        return _ODA_Drawings.OdDbObjectId_objectLeftOnDisk(self, *args)

    def getHandle(self, *args):
        return _ODA_Drawings.OdDbObjectId_getHandle(self, *args)

    def getNonForwardedHandle(self, *args):
        return _ODA_Drawings.OdDbObjectId_getNonForwardedHandle(self, *args)

    def openObject(self, *args):
        return _ODA_Drawings.OdDbObjectId_openObject(self, *args)

    def safeOpenObject(self, *args):
        return _ODA_Drawings.OdDbObjectId_safeOpenObject(self, *args)

    def bindObject(self, *args):
        return _ODA_Drawings.OdDbObjectId_bindObject(self, *args)

    def objectClass(self, *args):
        return _ODA_Drawings.OdDbObjectId_objectClass(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectId

# Register OdDbObjectId in _ODA_Drawings:
_ODA_Drawings.OdDbObjectId_swigregister(OdDbObjectId)
cvar = _ODA_Drawings.cvar
OdDbObjectId.kNull = _ODA_Drawings.cvar.OdDbObjectId_kNull

class OdDbHardOwnershipId(OdDbObjectId):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbHardOwnershipId_swiginit(self, _ODA_Drawings.new_OdDbHardOwnershipId(*args))

    def __ne__(self, *args):
        return _ODA_Drawings.OdDbHardOwnershipId___ne__(self, *args)

    def __eq__(self, *args):
        return _ODA_Drawings.OdDbHardOwnershipId___eq__(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbHardOwnershipId

# Register OdDbHardOwnershipId in _ODA_Drawings:
_ODA_Drawings.OdDbHardOwnershipId_swigregister(OdDbHardOwnershipId)

class OdDbSoftOwnershipId(OdDbObjectId):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbSoftOwnershipId_swiginit(self, _ODA_Drawings.new_OdDbSoftOwnershipId(*args))

    def __ne__(self, *args):
        return _ODA_Drawings.OdDbSoftOwnershipId___ne__(self, *args)

    def __eq__(self, *args):
        return _ODA_Drawings.OdDbSoftOwnershipId___eq__(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSoftOwnershipId

# Register OdDbSoftOwnershipId in _ODA_Drawings:
_ODA_Drawings.OdDbSoftOwnershipId_swigregister(OdDbSoftOwnershipId)

class OdDbHardPointerId(OdDbObjectId):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbHardPointerId_swiginit(self, _ODA_Drawings.new_OdDbHardPointerId(*args))

    def __ne__(self, *args):
        return _ODA_Drawings.OdDbHardPointerId___ne__(self, *args)

    def __eq__(self, *args):
        return _ODA_Drawings.OdDbHardPointerId___eq__(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbHardPointerId

# Register OdDbHardPointerId in _ODA_Drawings:
_ODA_Drawings.OdDbHardPointerId_swigregister(OdDbHardPointerId)

class OdDbSoftPointerId(OdDbObjectId):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbSoftPointerId_swiginit(self, _ODA_Drawings.new_OdDbSoftPointerId(*args))

    def __ne__(self, *args):
        return _ODA_Drawings.OdDbSoftPointerId___ne__(self, *args)

    def __eq__(self, *args):
        return _ODA_Drawings.OdDbSoftPointerId___eq__(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSoftPointerId

# Register OdDbSoftPointerId in _ODA_Drawings:
_ODA_Drawings.OdDbSoftPointerId_swigregister(OdDbSoftPointerId)

class OdDbTypedId(OdDbObjectId):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbTypedId_swiginit(self, _ODA_Drawings.new_OdDbTypedId(*args))

    def getRefType(self, *args):
        return _ODA_Drawings.OdDbTypedId_getRefType(self, *args)

    def setRefType(self, *args):
        return _ODA_Drawings.OdDbTypedId_setRefType(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbTypedId

# Register OdDbTypedId in _ODA_Drawings:
_ODA_Drawings.OdDbTypedId_swigregister(OdDbTypedId)

class OdError_InvalidResBuf(ODA_Kernel.OdError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdError_InvalidResBuf_swiginit(self, _ODA_Drawings.new_OdError_InvalidResBuf(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdError_InvalidResBuf

# Register OdError_InvalidResBuf in _ODA_Drawings:
_ODA_Drawings.OdError_InvalidResBuf_swigregister(OdError_InvalidResBuf)

class OdResBuf(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdResBuf_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdResBuf_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdResBuf_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdResBuf_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdResBuf_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdResBuf

    def copyFrom(self, *args):
        return _ODA_Drawings.OdResBuf_copyFrom(self, *args)

    def __eq__(self, *args):
        return _ODA_Drawings.OdResBuf___eq__(self, *args)

    def __ne__(self, *args):
        return _ODA_Drawings.OdResBuf___ne__(self, *args)
    kRtNone = _ODA_Drawings.OdResBuf_kRtNone
    kRtDouble = _ODA_Drawings.OdResBuf_kRtDouble
    kRtPoint2d = _ODA_Drawings.OdResBuf_kRtPoint2d
    kRtInt16 = _ODA_Drawings.OdResBuf_kRtInt16
    kRtAngle = _ODA_Drawings.OdResBuf_kRtAngle
    kRtString = _ODA_Drawings.OdResBuf_kRtString
    kRtEntName = _ODA_Drawings.OdResBuf_kRtEntName
    kRtPickSet = _ODA_Drawings.OdResBuf_kRtPickSet
    kRtOrient = _ODA_Drawings.OdResBuf_kRtOrient
    kRtPoint3d = _ODA_Drawings.OdResBuf_kRtPoint3d
    kRtInt32 = _ODA_Drawings.OdResBuf_kRtInt32
    kRtColor = _ODA_Drawings.OdResBuf_kRtColor
    kRtVoid = _ODA_Drawings.OdResBuf_kRtVoid
    kRtListBeg = _ODA_Drawings.OdResBuf_kRtListBeg
    kRtListEnd = _ODA_Drawings.OdResBuf_kRtListEnd
    kRtDote = _ODA_Drawings.OdResBuf_kRtDote
    kRtNil = _ODA_Drawings.OdResBuf_kRtNil
    kRtDXF0 = _ODA_Drawings.OdResBuf_kRtDXF0
    kRtT = _ODA_Drawings.OdResBuf_kRtT
    kRtResBuf = _ODA_Drawings.OdResBuf_kRtResBuf
    kRtBool = _ODA_Drawings.OdResBuf_kRtBool
    kRtInt8 = _ODA_Drawings.OdResBuf_kRtInt8
    kRtVector2d = _ODA_Drawings.OdResBuf_kRtVector2d
    kRtVector3d = _ODA_Drawings.OdResBuf_kRtVector3d
    kRtBinaryChunk = _ODA_Drawings.OdResBuf_kRtBinaryChunk
    kRtHandle = _ODA_Drawings.OdResBuf_kRtHandle
    kRtObjectId = _ODA_Drawings.OdResBuf_kRtObjectId
    kRtSoftPointerId = _ODA_Drawings.OdResBuf_kRtSoftPointerId
    kRtHardPointerId = _ODA_Drawings.OdResBuf_kRtHardPointerId
    kRtSoftOwnershipId = _ODA_Drawings.OdResBuf_kRtSoftOwnershipId
    kRtHardOwnershipId = _ODA_Drawings.OdResBuf_kRtHardOwnershipId
    kDxfInvalid = _ODA_Drawings.OdResBuf_kDxfInvalid
    kDxfXDictionary = _ODA_Drawings.OdResBuf_kDxfXDictionary
    kDxfPReactors = _ODA_Drawings.OdResBuf_kDxfPReactors
    kDxfOperator = _ODA_Drawings.OdResBuf_kDxfOperator
    kDxfXDataStart = _ODA_Drawings.OdResBuf_kDxfXDataStart
    kDxfHeaderId = _ODA_Drawings.OdResBuf_kDxfHeaderId
    kDxfFirstEntId = _ODA_Drawings.OdResBuf_kDxfFirstEntId
    kDxfEnd = _ODA_Drawings.OdResBuf_kDxfEnd
    kDxfStart = _ODA_Drawings.OdResBuf_kDxfStart
    kDxfText = _ODA_Drawings.OdResBuf_kDxfText
    kDxfXRefPath = _ODA_Drawings.OdResBuf_kDxfXRefPath
    kDxfShapeName = _ODA_Drawings.OdResBuf_kDxfShapeName
    kDxfBlockName = _ODA_Drawings.OdResBuf_kDxfBlockName
    kDxfAttributeTag = _ODA_Drawings.OdResBuf_kDxfAttributeTag
    kDxfSymbolTableName = _ODA_Drawings.OdResBuf_kDxfSymbolTableName
    kDxfMstyleName = _ODA_Drawings.OdResBuf_kDxfMstyleName
    kDxfSymTableRecName = _ODA_Drawings.OdResBuf_kDxfSymTableRecName
    kDxfAttributePrompt = _ODA_Drawings.OdResBuf_kDxfAttributePrompt
    kDxfDimStyleName = _ODA_Drawings.OdResBuf_kDxfDimStyleName
    kDxfLinetypeProse = _ODA_Drawings.OdResBuf_kDxfLinetypeProse
    kDxfTextFontFile = _ODA_Drawings.OdResBuf_kDxfTextFontFile
    kDxfDescription = _ODA_Drawings.OdResBuf_kDxfDescription
    kDxfDimPostStr = _ODA_Drawings.OdResBuf_kDxfDimPostStr
    kDxfTextBigFontFile = _ODA_Drawings.OdResBuf_kDxfTextBigFontFile
    kDxfDimAPostStr = _ODA_Drawings.OdResBuf_kDxfDimAPostStr
    kDxfCLShapeName = _ODA_Drawings.OdResBuf_kDxfCLShapeName
    kDxfSymTableRecComments = _ODA_Drawings.OdResBuf_kDxfSymTableRecComments
    kDxfHandle = _ODA_Drawings.OdResBuf_kDxfHandle
    kDxfDimBlk = _ODA_Drawings.OdResBuf_kDxfDimBlk
    kDxfDimBlk1 = _ODA_Drawings.OdResBuf_kDxfDimBlk1
    kDxfLinetypeName = _ODA_Drawings.OdResBuf_kDxfLinetypeName
    kDxfDimBlk2 = _ODA_Drawings.OdResBuf_kDxfDimBlk2
    kDxfTextStyleName = _ODA_Drawings.OdResBuf_kDxfTextStyleName
    kDxfLayerName = _ODA_Drawings.OdResBuf_kDxfLayerName
    kDxfCLShapeText = _ODA_Drawings.OdResBuf_kDxfCLShapeText
    kDxfXCoord = _ODA_Drawings.OdResBuf_kDxfXCoord
    kDxfYCoord = _ODA_Drawings.OdResBuf_kDxfYCoord
    kDxfZCoord = _ODA_Drawings.OdResBuf_kDxfZCoord
    kDxfElevation = _ODA_Drawings.OdResBuf_kDxfElevation
    kDxfThickness = _ODA_Drawings.OdResBuf_kDxfThickness
    kDxfReal = _ODA_Drawings.OdResBuf_kDxfReal
    kDxfViewportHeight = _ODA_Drawings.OdResBuf_kDxfViewportHeight
    kDxfTxtSize = _ODA_Drawings.OdResBuf_kDxfTxtSize
    kDxfTxtStyleXScale = _ODA_Drawings.OdResBuf_kDxfTxtStyleXScale
    kDxfViewWidth = _ODA_Drawings.OdResBuf_kDxfViewWidth
    kDxfViewportAspect = _ODA_Drawings.OdResBuf_kDxfViewportAspect
    kDxfTxtStylePSize = _ODA_Drawings.OdResBuf_kDxfTxtStylePSize
    kDxfViewLensLength = _ODA_Drawings.OdResBuf_kDxfViewLensLength
    kDxfViewFrontClip = _ODA_Drawings.OdResBuf_kDxfViewFrontClip
    kDxfViewBackClip = _ODA_Drawings.OdResBuf_kDxfViewBackClip
    kDxfShapeXOffset = _ODA_Drawings.OdResBuf_kDxfShapeXOffset
    kDxfShapeYOffset = _ODA_Drawings.OdResBuf_kDxfShapeYOffset
    kDxfViewHeight = _ODA_Drawings.OdResBuf_kDxfViewHeight
    kDxfShapeScale = _ODA_Drawings.OdResBuf_kDxfShapeScale
    kDxfPixelScale = _ODA_Drawings.OdResBuf_kDxfPixelScale
    kDxfLinetypeScale = _ODA_Drawings.OdResBuf_kDxfLinetypeScale
    kDxfDashLength = _ODA_Drawings.OdResBuf_kDxfDashLength
    kDxfMlineOffset = _ODA_Drawings.OdResBuf_kDxfMlineOffset
    kDxfLinetypeElement = _ODA_Drawings.OdResBuf_kDxfLinetypeElement
    kDxfAngle = _ODA_Drawings.OdResBuf_kDxfAngle
    kDxfViewportSnapAngle = _ODA_Drawings.OdResBuf_kDxfViewportSnapAngle
    kDxfViewportTwist = _ODA_Drawings.OdResBuf_kDxfViewportTwist
    kDxfVisibility = _ODA_Drawings.OdResBuf_kDxfVisibility
    kDxfLayerLinetype = _ODA_Drawings.OdResBuf_kDxfLayerLinetype
    kDxfColor = _ODA_Drawings.OdResBuf_kDxfColor
    kDxfHasSubentities = _ODA_Drawings.OdResBuf_kDxfHasSubentities
    kDxfViewportVisibility = _ODA_Drawings.OdResBuf_kDxfViewportVisibility
    kDxfViewportActive = _ODA_Drawings.OdResBuf_kDxfViewportActive
    kDxfViewportNumber = _ODA_Drawings.OdResBuf_kDxfViewportNumber
    kDxfInt16 = _ODA_Drawings.OdResBuf_kDxfInt16
    kDxfViewMode = _ODA_Drawings.OdResBuf_kDxfViewMode
    kDxfCircleSides = _ODA_Drawings.OdResBuf_kDxfCircleSides
    kDxfViewportZoom = _ODA_Drawings.OdResBuf_kDxfViewportZoom
    kDxfViewportIcon = _ODA_Drawings.OdResBuf_kDxfViewportIcon
    kDxfViewportSnap = _ODA_Drawings.OdResBuf_kDxfViewportSnap
    kDxfViewportGrid = _ODA_Drawings.OdResBuf_kDxfViewportGrid
    kDxfViewportSnapStyle = _ODA_Drawings.OdResBuf_kDxfViewportSnapStyle
    kDxfViewportSnapPair = _ODA_Drawings.OdResBuf_kDxfViewportSnapPair
    kDxfRegAppFlags = _ODA_Drawings.OdResBuf_kDxfRegAppFlags
    kDxfTxtStyleFlags = _ODA_Drawings.OdResBuf_kDxfTxtStyleFlags
    kDxfLinetypeAlign = _ODA_Drawings.OdResBuf_kDxfLinetypeAlign
    kDxfLinetypePDC = _ODA_Drawings.OdResBuf_kDxfLinetypePDC
    kDxfInt32 = _ODA_Drawings.OdResBuf_kDxfInt32
    kDxfSubclass = _ODA_Drawings.OdResBuf_kDxfSubclass
    kDxfEmbeddedObjectStart = _ODA_Drawings.OdResBuf_kDxfEmbeddedObjectStart
    kDxfControlString = _ODA_Drawings.OdResBuf_kDxfControlString
    kDxfDimVarHandle = _ODA_Drawings.OdResBuf_kDxfDimVarHandle
    kDxfUCSOrg = _ODA_Drawings.OdResBuf_kDxfUCSOrg
    kDxfUCSOriX = _ODA_Drawings.OdResBuf_kDxfUCSOriX
    kDxfUCSOriY = _ODA_Drawings.OdResBuf_kDxfUCSOriY
    kDxfXReal = _ODA_Drawings.OdResBuf_kDxfXReal
    kDxfInt64 = _ODA_Drawings.OdResBuf_kDxfInt64
    kDxfXInt16 = _ODA_Drawings.OdResBuf_kDxfXInt16
    kDxfNormalX = _ODA_Drawings.OdResBuf_kDxfNormalX
    kDxfNormalY = _ODA_Drawings.OdResBuf_kDxfNormalY
    kDxfNormalZ = _ODA_Drawings.OdResBuf_kDxfNormalZ
    kDxfXXInt16 = _ODA_Drawings.OdResBuf_kDxfXXInt16
    kDxfInt8 = _ODA_Drawings.OdResBuf_kDxfInt8
    kDxfRenderMode = _ODA_Drawings.OdResBuf_kDxfRenderMode
    kDxfBool = _ODA_Drawings.OdResBuf_kDxfBool
    kDxfXTextString = _ODA_Drawings.OdResBuf_kDxfXTextString
    kDxfBinaryChunk = _ODA_Drawings.OdResBuf_kDxfBinaryChunk
    kDxfArbHandle = _ODA_Drawings.OdResBuf_kDxfArbHandle
    kDxfSoftPointerId = _ODA_Drawings.OdResBuf_kDxfSoftPointerId
    kDxfHardPointerId = _ODA_Drawings.OdResBuf_kDxfHardPointerId
    kDxfSoftOwnershipId = _ODA_Drawings.OdResBuf_kDxfSoftOwnershipId
    kDxfHardOwnershipId = _ODA_Drawings.OdResBuf_kDxfHardOwnershipId
    kDxfLineWeight = _ODA_Drawings.OdResBuf_kDxfLineWeight
    kDxfPlotStyleNameType = _ODA_Drawings.OdResBuf_kDxfPlotStyleNameType
    kDxfPlotStyleNameId = _ODA_Drawings.OdResBuf_kDxfPlotStyleNameId
    kDxfXXXInt16 = _ODA_Drawings.OdResBuf_kDxfXXXInt16
    kDxfLayoutName = _ODA_Drawings.OdResBuf_kDxfLayoutName
    kDxfComment = _ODA_Drawings.OdResBuf_kDxfComment
    kDxfXdAsciiString = _ODA_Drawings.OdResBuf_kDxfXdAsciiString
    kDxfRegAppName = _ODA_Drawings.OdResBuf_kDxfRegAppName
    kDxfXdControlString = _ODA_Drawings.OdResBuf_kDxfXdControlString
    kDxfXdLayerName = _ODA_Drawings.OdResBuf_kDxfXdLayerName
    kDxfXdBinaryChunk = _ODA_Drawings.OdResBuf_kDxfXdBinaryChunk
    kDxfXdHandle = _ODA_Drawings.OdResBuf_kDxfXdHandle
    kDxfXdXCoord = _ODA_Drawings.OdResBuf_kDxfXdXCoord
    kDxfXdYCoord = _ODA_Drawings.OdResBuf_kDxfXdYCoord
    kDxfXdZCoord = _ODA_Drawings.OdResBuf_kDxfXdZCoord
    kDxfXdWorldXCoord = _ODA_Drawings.OdResBuf_kDxfXdWorldXCoord
    kDxfXdWorldYCoord = _ODA_Drawings.OdResBuf_kDxfXdWorldYCoord
    kDxfXdWorldZCoord = _ODA_Drawings.OdResBuf_kDxfXdWorldZCoord
    kDxfXdWorldXDisp = _ODA_Drawings.OdResBuf_kDxfXdWorldXDisp
    kDxfXdWorldYDisp = _ODA_Drawings.OdResBuf_kDxfXdWorldYDisp
    kDxfXdWorldZDisp = _ODA_Drawings.OdResBuf_kDxfXdWorldZDisp
    kDxfXdWorldXDir = _ODA_Drawings.OdResBuf_kDxfXdWorldXDir
    kDxfXdWorldYDir = _ODA_Drawings.OdResBuf_kDxfXdWorldYDir
    kDxfXdWorldZDir = _ODA_Drawings.OdResBuf_kDxfXdWorldZDir
    kDxfXdReal = _ODA_Drawings.OdResBuf_kDxfXdReal
    kDxfXdDist = _ODA_Drawings.OdResBuf_kDxfXdDist
    kDxfXdScale = _ODA_Drawings.OdResBuf_kDxfXdScale
    kDxfXdInteger16 = _ODA_Drawings.OdResBuf_kDxfXdInteger16
    kDxfXdInteger32 = _ODA_Drawings.OdResBuf_kDxfXdInteger32

    def restype(self, *args):
        return _ODA_Drawings.OdResBuf_restype(self, *args)

    def setRestype(self, *args):
        return _ODA_Drawings.OdResBuf_setRestype(self, *args)

    def next(self, *args):
        return _ODA_Drawings.OdResBuf_next(self, *args)

    def last(self, *args):
        return _ODA_Drawings.OdResBuf_last(self, *args)

    def insert(self, *args):
        return _ODA_Drawings.OdResBuf_insert(self, *args)

    def setNext(self, *args):
        return _ODA_Drawings.OdResBuf_setNext(self, *args)

    def getString(self, *args):
        return _ODA_Drawings.OdResBuf_getString(self, *args)

    def setString(self, *args):
        return _ODA_Drawings.OdResBuf_setString(self, *args)

    def getBool(self, *args):
        return _ODA_Drawings.OdResBuf_getBool(self, *args)

    def setBool(self, *args):
        return _ODA_Drawings.OdResBuf_setBool(self, *args)

    def getInt8(self, *args):
        return _ODA_Drawings.OdResBuf_getInt8(self, *args)

    def setInt8(self, *args):
        return _ODA_Drawings.OdResBuf_setInt8(self, *args)

    def getInt16(self, *args):
        return _ODA_Drawings.OdResBuf_getInt16(self, *args)

    def setInt16(self, *args):
        return _ODA_Drawings.OdResBuf_setInt16(self, *args)

    def getInt32(self, *args):
        return _ODA_Drawings.OdResBuf_getInt32(self, *args)

    def setInt32(self, *args):
        return _ODA_Drawings.OdResBuf_setInt32(self, *args)

    def getInt64(self, *args):
        return _ODA_Drawings.OdResBuf_getInt64(self, *args)

    def setInt64(self, *args):
        return _ODA_Drawings.OdResBuf_setInt64(self, *args)

    def getDouble(self, *args):
        return _ODA_Drawings.OdResBuf_getDouble(self, *args)

    def setDouble(self, *args):
        return _ODA_Drawings.OdResBuf_setDouble(self, *args)

    def getPoint2d(self, *args):
        return _ODA_Drawings.OdResBuf_getPoint2d(self, *args)

    def setPoint2d(self, *args):
        return _ODA_Drawings.OdResBuf_setPoint2d(self, *args)

    def getPoint3d(self, *args):
        return _ODA_Drawings.OdResBuf_getPoint3d(self, *args)

    def setPoint3d(self, *args):
        return _ODA_Drawings.OdResBuf_setPoint3d(self, *args)

    def getVector2d(self, *args):
        return _ODA_Drawings.OdResBuf_getVector2d(self, *args)

    def setVector2d(self, *args):
        return _ODA_Drawings.OdResBuf_setVector2d(self, *args)

    def getVector3d(self, *args):
        return _ODA_Drawings.OdResBuf_getVector3d(self, *args)

    def setVector3d(self, *args):
        return _ODA_Drawings.OdResBuf_setVector3d(self, *args)

    def getBinaryChunk(self, *args):
        return _ODA_Drawings.OdResBuf_getBinaryChunk(self, *args)

    def setBinaryChunk(self, *args):
        return _ODA_Drawings.OdResBuf_setBinaryChunk(self, *args)

    def getColor(self, *args):
        return _ODA_Drawings.OdResBuf_getColor(self, *args)

    def setColor(self, *args):
        return _ODA_Drawings.OdResBuf_setColor(self, *args)

    def getResBuf(self, *args):
        return _ODA_Drawings.OdResBuf_getResBuf(self, *args)

    def setResBuf(self, *args):
        return _ODA_Drawings.OdResBuf_setResBuf(self, *args)

    def getHandle(self, *args):
        return _ODA_Drawings.OdResBuf_getHandle(self, *args)

    def setHandle(self, *args):
        return _ODA_Drawings.OdResBuf_setHandle(self, *args)

    def getEntName(self, *args):
        return _ODA_Drawings.OdResBuf_getEntName(self, *args)

    def setObjectId(self, *args):
        return _ODA_Drawings.OdResBuf_setObjectId(self, *args)

    def getObjectId(self, *args):
        return _ODA_Drawings.OdResBuf_getObjectId(self, *args)

    def getPickSet(self, *args):
        return _ODA_Drawings.OdResBuf_getPickSet(self, *args)

    def setPickSet(self, *args):
        return _ODA_Drawings.OdResBuf_setPickSet(self, *args)

    @staticmethod
    def newRb(*args):
        return _ODA_Drawings.OdResBuf_newRb(*args)

    @staticmethod
    def setAssertIndexByNewRb(*args):
        return _ODA_Drawings.OdResBuf_setAssertIndexByNewRb(*args)

# Register OdResBuf in _ODA_Drawings:
_ODA_Drawings.OdResBuf_swigregister(OdResBuf)

def OdResBuf_cast(*args):
    return _ODA_Drawings.OdResBuf_cast(*args)

def OdResBuf_desc(*args):
    return _ODA_Drawings.OdResBuf_desc(*args)

def OdResBuf_createObject(*args):
    return _ODA_Drawings.OdResBuf_createObject(*args)

def OdResBuf_newRb(*args):
    return _ODA_Drawings.OdResBuf_newRb(*args)

def OdResBuf_setAssertIndexByNewRb(*args):
    return _ODA_Drawings.OdResBuf_setAssertIndexByNewRb(*args)

class Data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Bool = property(_ODA_Drawings.Data_Bool_get, _ODA_Drawings.Data_Bool_set)
    Int16 = property(_ODA_Drawings.Data_Int16_get, _ODA_Drawings.Data_Int16_set)
    Int32 = property(_ODA_Drawings.Data_Int32_get, _ODA_Drawings.Data_Int32_set)
    Int64 = property(_ODA_Drawings.Data_Int64_get, _ODA_Drawings.Data_Int64_set)
    Double = property(_ODA_Drawings.Data_Double_get, _ODA_Drawings.Data_Double_set)
    Pointer = property(_ODA_Drawings.Data_Pointer_get, _ODA_Drawings.Data_Pointer_set)
    Bytes = property(_ODA_Drawings.Data_Bytes_get, _ODA_Drawings.Data_Bytes_set)

    def __init__(self, *args):
        _ODA_Drawings.Data_swiginit(self, _ODA_Drawings.new_Data(*args))
    __swig_destroy__ = _ODA_Drawings.delete_Data

# Register Data in _ODA_Drawings:
_ODA_Drawings.Data_swigregister(Data)


def oddbCompareRbChains(*args):
    return _ODA_Drawings.oddbCompareRbChains(*args)
class OdDbObjectReactor(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectReactor_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectReactor_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectReactor_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectReactor_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectReactor_createObject(*args)

    def cancelled(self, *args):
        return _ODA_Drawings.OdDbObjectReactor_cancelled(self, *args)

    def copied(self, *args):
        return _ODA_Drawings.OdDbObjectReactor_copied(self, *args)

    def erased(self, *args):
        return _ODA_Drawings.OdDbObjectReactor_erased(self, *args)

    def goodbye(self, *args):
        return _ODA_Drawings.OdDbObjectReactor_goodbye(self, *args)

    def openedForModify(self, *args):
        return _ODA_Drawings.OdDbObjectReactor_openedForModify(self, *args)

    def modified(self, *args):
        return _ODA_Drawings.OdDbObjectReactor_modified(self, *args)

    def modifiedGraphics(self, *args):
        return _ODA_Drawings.OdDbObjectReactor_modifiedGraphics(self, *args)

    def subObjModified(self, *args):
        return _ODA_Drawings.OdDbObjectReactor_subObjModified(self, *args)

    def modifyUndone(self, *args):
        return _ODA_Drawings.OdDbObjectReactor_modifyUndone(self, *args)

    def modifiedXData(self, *args):
        return _ODA_Drawings.OdDbObjectReactor_modifiedXData(self, *args)

    def unappended(self, *args):
        return _ODA_Drawings.OdDbObjectReactor_unappended(self, *args)

    def reappended(self, *args):
        return _ODA_Drawings.OdDbObjectReactor_reappended(self, *args)

    def objectClosed(self, *args):
        return _ODA_Drawings.OdDbObjectReactor_objectClosed(self, *args)

    @staticmethod
    def findReactor(*args):
        return _ODA_Drawings.OdDbObjectReactor_findReactor(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectReactor

# Register OdDbObjectReactor in _ODA_Drawings:
_ODA_Drawings.OdDbObjectReactor_swigregister(OdDbObjectReactor)

def OdDbObjectReactor_cast(*args):
    return _ODA_Drawings.OdDbObjectReactor_cast(*args)

def OdDbObjectReactor_desc(*args):
    return _ODA_Drawings.OdDbObjectReactor_desc(*args)

def OdDbObjectReactor_createObject(*args):
    return _ODA_Drawings.OdDbObjectReactor_createObject(*args)

def OdDbObjectReactor_findReactor(*args):
    return _ODA_Drawings.OdDbObjectReactor_findReactor(*args)

class OdValue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kUnknown = _ODA_Drawings.OdValue_kUnknown
    kLong = _ODA_Drawings.OdValue_kLong
    kDouble = _ODA_Drawings.OdValue_kDouble
    kString = _ODA_Drawings.OdValue_kString
    kDate = _ODA_Drawings.OdValue_kDate
    kPoint = _ODA_Drawings.OdValue_kPoint
    k3dPoint = _ODA_Drawings.OdValue_k3dPoint
    kObjectId = _ODA_Drawings.OdValue_kObjectId
    kBuffer = _ODA_Drawings.OdValue_kBuffer
    kResbuf = _ODA_Drawings.OdValue_kResbuf
    kGeneral = _ODA_Drawings.OdValue_kGeneral
    kColor = _ODA_Drawings.OdValue_kColor
    kUnitless = _ODA_Drawings.OdValue_kUnitless
    kDistance = _ODA_Drawings.OdValue_kDistance
    kAngle = _ODA_Drawings.OdValue_kAngle
    kArea = _ODA_Drawings.OdValue_kArea
    kVolume = _ODA_Drawings.OdValue_kVolume
    kCurrency = _ODA_Drawings.OdValue_kCurrency
    kPercentage = _ODA_Drawings.OdValue_kPercentage
    kParseOptionNone = _ODA_Drawings.OdValue_kParseOptionNone
    kSetDefaultFormat = _ODA_Drawings.OdValue_kSetDefaultFormat
    kPreserveMtextFormat = _ODA_Drawings.OdValue_kPreserveMtextFormat
    kConvertTextToValue = _ODA_Drawings.OdValue_kConvertTextToValue
    kChangeDataType = _ODA_Drawings.OdValue_kChangeDataType
    kParseTextForFieldCode = _ODA_Drawings.OdValue_kParseTextForFieldCode
    kFormatOptionNone = _ODA_Drawings.OdValue_kFormatOptionNone
    kForEditing = _ODA_Drawings.OdValue_kForEditing
    kForExpression = _ODA_Drawings.OdValue_kForExpression
    kUseMaximumPrecision = _ODA_Drawings.OdValue_kUseMaximumPrecision
    kIgnoreMtextFormat = _ODA_Drawings.OdValue_kIgnoreMtextFormat

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdValue_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdValue_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdValue_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdValue_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdValue_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdValue

    def __init__(self, *args):
        _ODA_Drawings.OdValue_swiginit(self, _ODA_Drawings.new_OdValue(*args))

    def dataType(self, *args):
        return _ODA_Drawings.OdValue_dataType(self, *args)

    def isValid(self, *args):
        return _ODA_Drawings.OdValue_isValid(self, *args)

    def get(self, *args):
        return _ODA_Drawings.OdValue_get(self, *args)

    def set(self, *args):
        return _ODA_Drawings.OdValue_set(self, *args)

    def reset(self, *args):
        return _ODA_Drawings.OdValue_reset(self, *args)

    def unitType(self, *args):
        return _ODA_Drawings.OdValue_unitType(self, *args)

    def setUnitType(self, *args):
        return _ODA_Drawings.OdValue_setUnitType(self, *args)

    def getFormat(self, *args):
        return _ODA_Drawings.OdValue_getFormat(self, *args)

    def setFormat(self, *args):
        return _ODA_Drawings.OdValue_setFormat(self, *args)

    def format(self, *args):
        return _ODA_Drawings.OdValue_format(self, *args)

    def convertTo(self, *args):
        return _ODA_Drawings.OdValue_convertTo(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdValue_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdValue_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdValue_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdValue_dxfOutFields(self, *args)

# Register OdValue in _ODA_Drawings:
_ODA_Drawings.OdValue_swigregister(OdValue)

def OdValue_cast(*args):
    return _ODA_Drawings.OdValue_cast(*args)

def OdValue_desc(*args):
    return _ODA_Drawings.OdValue_desc(*args)

def OdValue_createObject(*args):
    return _ODA_Drawings.OdValue_createObject(*args)

class OdError_XdataSizeExceeded(ODA_Kernel.OdError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdError_XdataSizeExceeded_swiginit(self, _ODA_Drawings.new_OdError_XdataSizeExceeded(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdError_XdataSizeExceeded

# Register OdError_XdataSizeExceeded in _ODA_Drawings:
_ODA_Drawings.OdError_XdataSizeExceeded_swigregister(OdError_XdataSizeExceeded)

kDrcNotApplicable = _ODA_Drawings.kDrcNotApplicable
kDrcIgnore = _ODA_Drawings.kDrcIgnore
kDrcReplace = _ODA_Drawings.kDrcReplace
kDrcXrefMangleName = _ODA_Drawings.kDrcXrefMangleName
kDrcMangleName = _ODA_Drawings.kDrcMangleName
kDrcUnmangleName = _ODA_Drawings.kDrcUnmangleName
kDrcMax = _ODA_Drawings.kDrcMax
kInvisible = _ODA_Drawings.kInvisible
kVisible = _ODA_Drawings.kVisible
OdDb_SaveType_kDwg = _ODA_Drawings.OdDb_SaveType_kDwg
OdDb_SaveType_kDxf = _ODA_Drawings.OdDb_SaveType_kDxf
OdDb_SaveType_kDxb = _ODA_Drawings.OdDb_SaveType_kDxb
OdDb_SaveType_kUnknown = _ODA_Drawings.OdDb_SaveType_kUnknown
class OdDbObject(ODA_Kernel.OdGiDrawable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObject_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObject_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObject_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObject_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObject_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObject

    def objectId(self, *args):
        return _ODA_Drawings.OdDbObject_objectId(self, *args)

    def getDbHandle(self, *args):
        return _ODA_Drawings.OdDbObject_getDbHandle(self, *args)

    def handle(self, *args):
        return _ODA_Drawings.OdDbObject_handle(self, *args)

    def ownerId(self, *args):
        return _ODA_Drawings.OdDbObject_ownerId(self, *args)

    def setOwnerId(self, *args):
        return _ODA_Drawings.OdDbObject_setOwnerId(self, *args)

    def database(self, *args):
        return _ODA_Drawings.OdDbObject_database(self, *args)

    def createExtensionDictionary(self, *args):
        return _ODA_Drawings.OdDbObject_createExtensionDictionary(self, *args)

    def extensionDictionary(self, *args):
        return _ODA_Drawings.OdDbObject_extensionDictionary(self, *args)

    def releaseExtensionDictionary(self, *args):
        return _ODA_Drawings.OdDbObject_releaseExtensionDictionary(self, *args)

    def createXrecord(self, *args):
        return _ODA_Drawings.OdDbObject_createXrecord(self, *args)

    def upgradeOpen(self, *args):
        return _ODA_Drawings.OdDbObject_upgradeOpen(self, *args)

    def downgradeOpen(self, *args):
        return _ODA_Drawings.OdDbObject_downgradeOpen(self, *args)

    def subOpen(self, *args):
        return _ODA_Drawings.OdDbObject_subOpen(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbObject_subClose(self, *args)

    def erase(self, *args):
        return _ODA_Drawings.OdDbObject_erase(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbObject_subErase(self, *args)

    def handOverTo(self, *args):
        return _ODA_Drawings.OdDbObject_handOverTo(self, *args)

    def subHandOverTo(self, *args):
        return _ODA_Drawings.OdDbObject_subHandOverTo(self, *args)

    def swapIdWith(self, *args):
        return _ODA_Drawings.OdDbObject_swapIdWith(self, *args)

    def subSwapIdWith(self, *args):
        return _ODA_Drawings.OdDbObject_subSwapIdWith(self, *args)

    def audit(self, *args):
        return _ODA_Drawings.OdDbObject_audit(self, *args)

    def dwgIn(self, *args):
        return _ODA_Drawings.OdDbObject_dwgIn(self, *args)

    def dwgOut(self, *args):
        return _ODA_Drawings.OdDbObject_dwgOut(self, *args)

    def dxfIn(self, *args):
        return _ODA_Drawings.OdDbObject_dxfIn(self, *args)

    def dxfOut(self, *args):
        return _ODA_Drawings.OdDbObject_dxfOut(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbObject_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbObject_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbObject_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbObject_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbObject_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbObject_dxfOutFields_R12(self, *args)

    def mergeStyle(self, *args):
        return _ODA_Drawings.OdDbObject_mergeStyle(self, *args)

    def xData(self, *args):
        return _ODA_Drawings.OdDbObject_xData(self, *args)

    def setXData(self, *args):
        return _ODA_Drawings.OdDbObject_setXData(self, *args)

    def isEraseStatusToggled(self, *args):
        return _ODA_Drawings.OdDbObject_isEraseStatusToggled(self, *args)

    def isErased(self, *args):
        return _ODA_Drawings.OdDbObject_isErased(self, *args)

    def isReadEnabled(self, *args):
        return _ODA_Drawings.OdDbObject_isReadEnabled(self, *args)

    def isWriteEnabled(self, *args):
        return _ODA_Drawings.OdDbObject_isWriteEnabled(self, *args)

    def isNotifyEnabled(self, *args):
        return _ODA_Drawings.OdDbObject_isNotifyEnabled(self, *args)

    def isModified(self, *args):
        return _ODA_Drawings.OdDbObject_isModified(self, *args)

    def isModifiedXData(self, *args):
        return _ODA_Drawings.OdDbObject_isModifiedXData(self, *args)

    def isModifiedGraphics(self, *args):
        return _ODA_Drawings.OdDbObject_isModifiedGraphics(self, *args)

    def isNewObject(self, *args):
        return _ODA_Drawings.OdDbObject_isNewObject(self, *args)

    def isNotifying(self, *args):
        return _ODA_Drawings.OdDbObject_isNotifying(self, *args)

    def isUndoing(self, *args):
        return _ODA_Drawings.OdDbObject_isUndoing(self, *args)

    def isReallyClosing(self, *args):
        return _ODA_Drawings.OdDbObject_isReallyClosing(self, *args)

    def isDBRO(self, *args):
        return _ODA_Drawings.OdDbObject_isDBRO(self, *args)

    def assertReadEnabled(self, *args):
        return _ODA_Drawings.OdDbObject_assertReadEnabled(self, *args)

    def assertWriteEnabled(self, *args):
        return _ODA_Drawings.OdDbObject_assertWriteEnabled(self, *args)

    def assertNotifyEnabled(self, *args):
        return _ODA_Drawings.OdDbObject_assertNotifyEnabled(self, *args)

    def disableUndoRecording(self, *args):
        return _ODA_Drawings.OdDbObject_disableUndoRecording(self, *args)

    def undoFiler(self, *args):
        return _ODA_Drawings.OdDbObject_undoFiler(self, *args)

    def applyPartialUndo(self, *args):
        return _ODA_Drawings.OdDbObject_applyPartialUndo(self, *args)

    def addReactor(self, *args):
        return _ODA_Drawings.OdDbObject_addReactor(self, *args)

    def removeReactor(self, *args):
        return _ODA_Drawings.OdDbObject_removeReactor(self, *args)

    def addPersistentReactor(self, *args):
        return _ODA_Drawings.OdDbObject_addPersistentReactor(self, *args)

    def removePersistentReactor(self, *args):
        return _ODA_Drawings.OdDbObject_removePersistentReactor(self, *args)

    def hasPersistentReactor(self, *args):
        return _ODA_Drawings.OdDbObject_hasPersistentReactor(self, *args)

    def getPersistentReactors(self, *args):
        return _ODA_Drawings.OdDbObject_getPersistentReactors(self, *args)

    def getTransientReactors(self, *args):
        return _ODA_Drawings.OdDbObject_getTransientReactors(self, *args)

    def recvPropagateModify(self, *args):
        return _ODA_Drawings.OdDbObject_recvPropagateModify(self, *args)

    def xmitPropagateModify(self, *args):
        return _ODA_Drawings.OdDbObject_xmitPropagateModify(self, *args)

    def deepClone(self, *args):
        return _ODA_Drawings.OdDbObject_deepClone(self, *args)

    def wblockClone(self, *args):
        return _ODA_Drawings.OdDbObject_wblockClone(self, *args)

    def appendToOwner(self, *args):
        return _ODA_Drawings.OdDbObject_appendToOwner(self, *args)

    def setOdDbObjectIdsInFlux(self, *args):
        return _ODA_Drawings.OdDbObject_setOdDbObjectIdsInFlux(self, *args)

    def isOdDbObjectIdsInFlux(self, *args):
        return _ODA_Drawings.OdDbObject_isOdDbObjectIdsInFlux(self, *args)

    def copied(self, *args):
        return _ODA_Drawings.OdDbObject_copied(self, *args)

    def erased(self, *args):
        return _ODA_Drawings.OdDbObject_erased(self, *args)

    def goodbye(self, *args):
        return _ODA_Drawings.OdDbObject_goodbye(self, *args)

    def openedForModify(self, *args):
        return _ODA_Drawings.OdDbObject_openedForModify(self, *args)

    def modified(self, *args):
        return _ODA_Drawings.OdDbObject_modified(self, *args)

    def subObjModified(self, *args):
        return _ODA_Drawings.OdDbObject_subObjModified(self, *args)

    def modifyUndone(self, *args):
        return _ODA_Drawings.OdDbObject_modifyUndone(self, *args)

    def modifiedXData(self, *args):
        return _ODA_Drawings.OdDbObject_modifiedXData(self, *args)

    def unappended(self, *args):
        return _ODA_Drawings.OdDbObject_unappended(self, *args)

    def reappended(self, *args):
        return _ODA_Drawings.OdDbObject_reappended(self, *args)

    def isAProxy(self, *args):
        return _ODA_Drawings.OdDbObject_isAProxy(self, *args)

    def objectClosed(self, *args):
        return _ODA_Drawings.OdDbObject_objectClosed(self, *args)

    def modifiedGraphics(self, *args):
        return _ODA_Drawings.OdDbObject_modifiedGraphics(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbObject_copyFrom(self, *args)

    def hasSaveVersionOverride(self, *args):
        return _ODA_Drawings.OdDbObject_hasSaveVersionOverride(self, *args)

    def setHasSaveVersionOverride(self, *args):
        return _ODA_Drawings.OdDbObject_setHasSaveVersionOverride(self, *args)

    def getObjectSaveVersion(self, *args):
        return _ODA_Drawings.OdDbObject_getObjectSaveVersion(self, *args)

    def decomposeForSave(self, *args):
        return _ODA_Drawings.OdDbObject_decomposeForSave(self, *args)

    def convertForSave(self, *args):
        return _ODA_Drawings.OdDbObject_convertForSave(self, *args)

    def composeForLoad(self, *args):
        return _ODA_Drawings.OdDbObject_composeForLoad(self, *args)

    def drawable(self, *args):
        return _ODA_Drawings.OdDbObject_drawable(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbObject_subSetAttributes(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbObject_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbObject_subViewportDraw(self, *args)

    def isPersistent(self, *args):
        return _ODA_Drawings.OdDbObject_isPersistent(self, *args)

    def id(self, *args):
        return _ODA_Drawings.OdDbObject_id(self, *args)

    def getClassID(self, *args):
        return _ODA_Drawings.OdDbObject_getClassID(self, *args)

    def setGsNode(self, *args):
        return _ODA_Drawings.OdDbObject_setGsNode(self, *args)

    def gsNode(self, *args):
        return _ODA_Drawings.OdDbObject_gsNode(self, *args)

    def xDataTransformBy(self, *args):
        return _ODA_Drawings.OdDbObject_xDataTransformBy(self, *args)

    def hasFields(self, *args):
        return _ODA_Drawings.OdDbObject_hasFields(self, *args)

    def getField(self, *args):
        return _ODA_Drawings.OdDbObject_getField(self, *args)

    def setField(self, *args):
        return _ODA_Drawings.OdDbObject_setField(self, *args)

    def removeField(self, *args):
        return _ODA_Drawings.OdDbObject_removeField(self, *args)

    def getFieldDictionary(self, *args):
        return _ODA_Drawings.OdDbObject_getFieldDictionary(self, *args)

    def saveAsClass(self, *args):
        return _ODA_Drawings.OdDbObject_saveAsClass(self, *args)

# Register OdDbObject in _ODA_Drawings:
_ODA_Drawings.OdDbObject_swigregister(OdDbObject)

def OdDbObject_cast(*args):
    return _ODA_Drawings.OdDbObject_cast(*args)

def OdDbObject_desc(*args):
    return _ODA_Drawings.OdDbObject_desc(*args)

def OdDbObject_createObject(*args):
    return _ODA_Drawings.OdDbObject_createObject(*args)


def oddbEntGet(*args):
    return _ODA_Drawings.oddbEntGet(*args)

def oddbEntMod(*args):
    return _ODA_Drawings.oddbEntMod(*args)

def oddbEntNext(*args):
    return _ODA_Drawings.oddbEntNext(*args)

def oddbEntLast(*args):
    return _ODA_Drawings.oddbEntLast(*args)

def oddbEntMake(*args):
    return _ODA_Drawings.oddbEntMake(*args)

def oddbEntMakeX(*args):
    return _ODA_Drawings.oddbEntMakeX(*args)
class OdDbObjectContext(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContext_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContext_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContext_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContext_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContext_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContext

    def getName(self, *args):
        return _ODA_Drawings.OdDbObjectContext_getName(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbObjectContext_setName(self, *args)

    def uniqueIdentifier(self, *args):
        return _ODA_Drawings.OdDbObjectContext_uniqueIdentifier(self, *args)

    def collectionName(self, *args):
        return _ODA_Drawings.OdDbObjectContext_collectionName(self, *args)

# Register OdDbObjectContext in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContext_swigregister(OdDbObjectContext)

def OdDbObjectContext_cast(*args):
    return _ODA_Drawings.OdDbObjectContext_cast(*args)

def OdDbObjectContext_desc(*args):
    return _ODA_Drawings.OdDbObjectContext_desc(*args)

def OdDbObjectContext_createObject(*args):
    return _ODA_Drawings.OdDbObjectContext_createObject(*args)

kDataLinkOptionNone = _ODA_Drawings.kDataLinkOptionNone
kDataLinkOptionAnonymous = _ODA_Drawings.kDataLinkOptionAnonymous
kDataLinkOptionPersistCache = _ODA_Drawings.kDataLinkOptionPersistCache
kDataLinkOptionDisableInLongTransaction = _ODA_Drawings.kDataLinkOptionDisableInLongTransaction
kDataLinkHasCustomData = _ODA_Drawings.kDataLinkHasCustomData
kPathOptionNone = _ODA_Drawings.kPathOptionNone
kPathOptionRelative = _ODA_Drawings.kPathOptionRelative
kPathOptionAbsolute = _ODA_Drawings.kPathOptionAbsolute
kPathOptionPathAndFile = _ODA_Drawings.kPathOptionPathAndFile
kUpdateDirectionSourceToData = _ODA_Drawings.kUpdateDirectionSourceToData
kUpdateDirectionDataToSource = _ODA_Drawings.kUpdateDirectionDataToSource
kUpdateOptionNone = _ODA_Drawings.kUpdateOptionNone
kUpdateOptionSkipFormat = _ODA_Drawings.kUpdateOptionSkipFormat
kUpdateOptionUpdateRowHeight = _ODA_Drawings.kUpdateOptionUpdateRowHeight
kUpdateOptionUpdateColumnWidth = _ODA_Drawings.kUpdateOptionUpdateColumnWidth
kUpdateOptionAllowSourceUpdate = _ODA_Drawings.kUpdateOptionAllowSourceUpdate
kUpdateOptionForceFullSourceUpdate = _ODA_Drawings.kUpdateOptionForceFullSourceUpdate
kUpdateOptionOverwriteContentModifiedAfterUpdate = _ODA_Drawings.kUpdateOptionOverwriteContentModifiedAfterUpdate
kUpdateOptionOverwriteFormatModifiedAfterUpdate = _ODA_Drawings.kUpdateOptionOverwriteFormatModifiedAfterUpdate
kUpdateOptionForPreview = _ODA_Drawings.kUpdateOptionForPreview
kUpdateOptionIncludeXrefs = _ODA_Drawings.kUpdateOptionIncludeXrefs
kUpdateOptionSkipFormatAfterFirstUpdate = _ODA_Drawings.kUpdateOptionSkipFormatAfterFirstUpdate
kDataLinkGetSourceContextUnknown = _ODA_Drawings.kDataLinkGetSourceContextUnknown
kDataLinkGetSourceContextEtransmit = _ODA_Drawings.kDataLinkGetSourceContextEtransmit
kDataLinkGetSourceContextXrefManager = _ODA_Drawings.kDataLinkGetSourceContextXrefManager
kDataLinkGetSourceContextFileWatcher = _ODA_Drawings.kDataLinkGetSourceContextFileWatcher
kDataLinkGetSourceContextOther = _ODA_Drawings.kDataLinkGetSourceContextOther
class OdDbDataLink(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDataLink_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDataLink_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDataLink_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDataLink_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDataLink_createObject(*args)

    def name(self, *args):
        return _ODA_Drawings.OdDbDataLink_name(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbDataLink_setName(self, *args)

    def description(self, *args):
        return _ODA_Drawings.OdDbDataLink_description(self, *args)

    def setDescription(self, *args):
        return _ODA_Drawings.OdDbDataLink_setDescription(self, *args)

    def getToolTip(self, *args):
        return _ODA_Drawings.OdDbDataLink_getToolTip(self, *args)

    def setToolTip(self, *args):
        return _ODA_Drawings.OdDbDataLink_setToolTip(self, *args)

    def dataAdapterId(self, *args):
        return _ODA_Drawings.OdDbDataLink_dataAdapterId(self, *args)

    def setDataAdapterId(self, *args):
        return _ODA_Drawings.OdDbDataLink_setDataAdapterId(self, *args)

    def connectionString(self, *args):
        return _ODA_Drawings.OdDbDataLink_connectionString(self, *args)

    def setConnectionString(self, *args):
        return _ODA_Drawings.OdDbDataLink_setConnectionString(self, *args)

    def option(self, *args):
        return _ODA_Drawings.OdDbDataLink_option(self, *args)

    def setOption(self, *args):
        return _ODA_Drawings.OdDbDataLink_setOption(self, *args)

    def updateOption(self, *args):
        return _ODA_Drawings.OdDbDataLink_updateOption(self, *args)

    def setUpdateOption(self, *args):
        return _ODA_Drawings.OdDbDataLink_setUpdateOption(self, *args)

    def update(self, *args):
        return _ODA_Drawings.OdDbDataLink_update(self, *args)

    def getUpdateStatus(self, *args):
        return _ODA_Drawings.OdDbDataLink_getUpdateStatus(self, *args)

    def setUpdateStatus(self, *args):
        return _ODA_Drawings.OdDbDataLink_setUpdateStatus(self, *args)

    def isValid(self, *args):
        return _ODA_Drawings.OdDbDataLink_isValid(self, *args)

    def getTargets(self, *args):
        return _ODA_Drawings.OdDbDataLink_getTargets(self, *args)

    def getSourceFiles(self, *args):
        return _ODA_Drawings.OdDbDataLink_getSourceFiles(self, *args)

    def repathSourceFiles(self, *args):
        return _ODA_Drawings.OdDbDataLink_repathSourceFiles(self, *args)

    def contentId(self, *args):
        return _ODA_Drawings.OdDbDataLink_contentId(self, *args)

    def getCustomData(self, *args):
        return _ODA_Drawings.OdDbDataLink_getCustomData(self, *args)

    def setCustomData(self, *args):
        return _ODA_Drawings.OdDbDataLink_setCustomData(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbDataLink_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbDataLink_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbDataLink_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbDataLink_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDataLink

# Register OdDbDataLink in _ODA_Drawings:
_ODA_Drawings.OdDbDataLink_swigregister(OdDbDataLink)

def OdDbDataLink_cast(*args):
    return _ODA_Drawings.OdDbDataLink_cast(*args)

def OdDbDataLink_desc(*args):
    return _ODA_Drawings.OdDbDataLink_desc(*args)

def OdDbDataLink_createObject(*args):
    return _ODA_Drawings.OdDbDataLink_createObject(*args)

class OdDbDataLinkManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDataLinkManager_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDataLinkManager_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDataLinkManager_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDataLinkManager_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDataLinkManager_createObject(*args)

    def __init__(self, *args):
        _ODA_Drawings.OdDbDataLinkManager_swiginit(self, _ODA_Drawings.new_OdDbDataLinkManager(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDataLinkManager

    def createDataLink(self, *args):
        return _ODA_Drawings.OdDbDataLinkManager_createDataLink(self, *args)

    def dataLinkCount(self, *args):
        return _ODA_Drawings.OdDbDataLinkManager_dataLinkCount(self, *args)

    def getDataLink(self, *args):
        return _ODA_Drawings.OdDbDataLinkManager_getDataLink(self, *args)

    def addDataLink(self, *args):
        return _ODA_Drawings.OdDbDataLinkManager_addDataLink(self, *args)

    def removeDataLink(self, *args):
        return _ODA_Drawings.OdDbDataLinkManager_removeDataLink(self, *args)

    def update(self, *args):
        return _ODA_Drawings.OdDbDataLinkManager_update(self, *args)

    def setDatabase(self, *args):
        return _ODA_Drawings.OdDbDataLinkManager_setDatabase(self, *args)

# Register OdDbDataLinkManager in _ODA_Drawings:
_ODA_Drawings.OdDbDataLinkManager_swigregister(OdDbDataLinkManager)

def OdDbDataLinkManager_cast(*args):
    return _ODA_Drawings.OdDbDataLinkManager_cast(*args)

def OdDbDataLinkManager_desc(*args):
    return _ODA_Drawings.OdDbDataLinkManager_desc(*args)

def OdDbDataLinkManager_createObject(*args):
    return _ODA_Drawings.OdDbDataLinkManager_createObject(*args)

class OdDbDataLinkUpdatePE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def dataLinkUpdate(self, *args):
        return _ODA_Drawings.OdDbDataLinkUpdatePE_dataLinkUpdate(self, *args)

    def repathSourceFiles(self, *args):
        return _ODA_Drawings.OdDbDataLinkUpdatePE_repathSourceFiles(self, *args)

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDataLinkUpdatePE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDataLinkUpdatePE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDataLinkUpdatePE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDataLinkUpdatePE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDataLinkUpdatePE_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDataLinkUpdatePE

# Register OdDbDataLinkUpdatePE in _ODA_Drawings:
_ODA_Drawings.OdDbDataLinkUpdatePE_swigregister(OdDbDataLinkUpdatePE)

def OdDbDataLinkUpdatePE_cast(*args):
    return _ODA_Drawings.OdDbDataLinkUpdatePE_cast(*args)

def OdDbDataLinkUpdatePE_desc(*args):
    return _ODA_Drawings.OdDbDataLinkUpdatePE_desc(*args)

def OdDbDataLinkUpdatePE_createObject(*args):
    return _ODA_Drawings.OdDbDataLinkUpdatePE_createObject(*args)

class OdDbAnnotationScale(OdDbObjectContext):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAnnotationScale_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAnnotationScale_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAnnotationScale_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAnnotationScale_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAnnotationScale_createObject(*args)

    def getName(self, *args):
        return _ODA_Drawings.OdDbAnnotationScale_getName(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbAnnotationScale_setName(self, *args)

    def uniqueIdentifier(self, *args):
        return _ODA_Drawings.OdDbAnnotationScale_uniqueIdentifier(self, *args)

    def collectionName(self, *args):
        return _ODA_Drawings.OdDbAnnotationScale_collectionName(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbAnnotationScale_copyFrom(self, *args)

    def getPaperUnits(self, *args):
        return _ODA_Drawings.OdDbAnnotationScale_getPaperUnits(self, *args)

    def setPaperUnits(self, *args):
        return _ODA_Drawings.OdDbAnnotationScale_setPaperUnits(self, *args)

    def getDrawingUnits(self, *args):
        return _ODA_Drawings.OdDbAnnotationScale_getDrawingUnits(self, *args)

    def setDrawingUnits(self, *args):
        return _ODA_Drawings.OdDbAnnotationScale_setDrawingUnits(self, *args)

    def getScale(self, *args):
        return _ODA_Drawings.OdDbAnnotationScale_getScale(self, *args)

    def getIsTemporaryScale(self, *args):
        return _ODA_Drawings.OdDbAnnotationScale_getIsTemporaryScale(self, *args)

    def matchScaleId(self, *args):
        return _ODA_Drawings.OdDbAnnotationScale_matchScaleId(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAnnotationScale

# Register OdDbAnnotationScale in _ODA_Drawings:
_ODA_Drawings.OdDbAnnotationScale_swigregister(OdDbAnnotationScale)

def OdDbAnnotationScale_cast(*args):
    return _ODA_Drawings.OdDbAnnotationScale_cast(*args)

def OdDbAnnotationScale_desc(*args):
    return _ODA_Drawings.OdDbAnnotationScale_desc(*args)

def OdDbAnnotationScale_createObject(*args):
    return _ODA_Drawings.OdDbAnnotationScale_createObject(*args)

class OdDbAnnotationScaleView(OdDbAnnotationScale):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAnnotationScaleView_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAnnotationScaleView_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAnnotationScaleView_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAnnotationScaleView_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAnnotationScaleView_createObject(*args)

    def collectionName(self, *args):
        return _ODA_Drawings.OdDbAnnotationScaleView_collectionName(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAnnotationScaleView

# Register OdDbAnnotationScaleView in _ODA_Drawings:
_ODA_Drawings.OdDbAnnotationScaleView_swigregister(OdDbAnnotationScaleView)

def OdDbAnnotationScaleView_cast(*args):
    return _ODA_Drawings.OdDbAnnotationScaleView_cast(*args)

def OdDbAnnotationScaleView_desc(*args):
    return _ODA_Drawings.OdDbAnnotationScaleView_desc(*args)

def OdDbAnnotationScaleView_createObject(*args):
    return _ODA_Drawings.OdDbAnnotationScaleView_createObject(*args)

class OdDbAnnotationScaleReactor(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAnnotationScaleReactor_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAnnotationScaleReactor_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAnnotationScaleReactor_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAnnotationScaleReactor_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAnnotationScaleReactor_createObject(*args)

    def annotationScaleChanged(self, *args):
        return _ODA_Drawings.OdDbAnnotationScaleReactor_annotationScaleChanged(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAnnotationScaleReactor

# Register OdDbAnnotationScaleReactor in _ODA_Drawings:
_ODA_Drawings.OdDbAnnotationScaleReactor_swigregister(OdDbAnnotationScaleReactor)

def OdDbAnnotationScaleReactor_cast(*args):
    return _ODA_Drawings.OdDbAnnotationScaleReactor_cast(*args)

def OdDbAnnotationScaleReactor_desc(*args):
    return _ODA_Drawings.OdDbAnnotationScaleReactor_desc(*args)

def OdDbAnnotationScaleReactor_createObject(*args):
    return _ODA_Drawings.OdDbAnnotationScaleReactor_createObject(*args)


def oddbAddAnnotationScaleReactor(*args):
    return _ODA_Drawings.oddbAddAnnotationScaleReactor(*args)

def oddbRemoveAnnotationScaleReactor(*args):
    return _ODA_Drawings.oddbRemoveAnnotationScaleReactor(*args)

def odSystemServices(*args):
    return _ODA_Drawings.odSystemServices(*args)

def odInitializeDbCore(*args):
    return _ODA_Drawings.odInitializeDbCore(*args)

def odInitialize(*args):
    return _ODA_Drawings.odInitialize(*args)

def odUninitialize(*args):
    return _ODA_Drawings.odUninitialize(*args)

def odUninitializeDbCore(*args):
    return _ODA_Drawings.odUninitializeDbCore(*args)
SECURITYPARAMS_ENCRYPT_DATA = _ODA_Drawings.SECURITYPARAMS_ENCRYPT_DATA
SECURITYPARAMS_ENCRYPT_PROPS = _ODA_Drawings.SECURITYPARAMS_ENCRYPT_PROPS
SECURITYPARAMS_SIGN_DATA = _ODA_Drawings.SECURITYPARAMS_SIGN_DATA
SECURITYPARAMS_ADD_TIMESTAMP = _ODA_Drawings.SECURITYPARAMS_ADD_TIMESTAMP
SECURITYPARAMS_ALGID_RC4 = _ODA_Drawings.SECURITYPARAMS_ALGID_RC4
class OdSecurityParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdSecurityParams_swiginit(self, _ODA_Drawings.new_OdSecurityParams(*args))
    nFlags = property(_ODA_Drawings.OdSecurityParams_nFlags_get, _ODA_Drawings.OdSecurityParams_nFlags_set)
    password = property(_ODA_Drawings.OdSecurityParams_password_get, _ODA_Drawings.OdSecurityParams_password_set)
    nProvType = property(_ODA_Drawings.OdSecurityParams_nProvType_get, _ODA_Drawings.OdSecurityParams_nProvType_set)
    provName = property(_ODA_Drawings.OdSecurityParams_provName_get, _ODA_Drawings.OdSecurityParams_provName_set)
    nAlgId = property(_ODA_Drawings.OdSecurityParams_nAlgId_get, _ODA_Drawings.OdSecurityParams_nAlgId_set)
    nKeyLength = property(_ODA_Drawings.OdSecurityParams_nKeyLength_get, _ODA_Drawings.OdSecurityParams_nKeyLength_set)
    sCertSubject = property(_ODA_Drawings.OdSecurityParams_sCertSubject_get, _ODA_Drawings.OdSecurityParams_sCertSubject_set)
    sCertIssuer = property(_ODA_Drawings.OdSecurityParams_sCertIssuer_get, _ODA_Drawings.OdSecurityParams_sCertIssuer_set)
    sCertSerialNum = property(_ODA_Drawings.OdSecurityParams_sCertSerialNum_get, _ODA_Drawings.OdSecurityParams_sCertSerialNum_set)
    sComment = property(_ODA_Drawings.OdSecurityParams_sComment_get, _ODA_Drawings.OdSecurityParams_sComment_set)
    sTimeServer = property(_ODA_Drawings.OdSecurityParams_sTimeServer_get, _ODA_Drawings.OdSecurityParams_sTimeServer_set)
    __swig_destroy__ = _ODA_Drawings.delete_OdSecurityParams

# Register OdSecurityParams in _ODA_Drawings:
_ODA_Drawings.OdSecurityParams_swigregister(OdSecurityParams)

class OdSignatureDescription(ODA_Kernel.OdSignatureBaseDescription):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_signatureDateAndTime = property(_ODA_Drawings.OdSignatureDescription_m_signatureDateAndTime_get, _ODA_Drawings.OdSignatureDescription_m_signatureDateAndTime_set)
    m_timeServiceUsed = property(_ODA_Drawings.OdSignatureDescription_m_timeServiceUsed_get, _ODA_Drawings.OdSignatureDescription_m_timeServiceUsed_set)
    m_comment = property(_ODA_Drawings.OdSignatureDescription_m_comment_get, _ODA_Drawings.OdSignatureDescription_m_comment_set)

    def __init__(self, *args):
        _ODA_Drawings.OdSignatureDescription_swiginit(self, _ODA_Drawings.new_OdSignatureDescription(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdSignatureDescription

# Register OdSignatureDescription in _ODA_Drawings:
_ODA_Drawings.OdSignatureDescription_swigregister(OdSignatureDescription)

class OdDbCrypt(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbCrypt_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbCrypt_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbCrypt_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbCrypt_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbCrypt_createObject(*args)

    def initialize(self, *args):
        return _ODA_Drawings.OdDbCrypt_initialize(self, *args)

    def encryptData(self, *args):
        return _ODA_Drawings.OdDbCrypt_encryptData(self, *args)

    def decryptData(self, *args):
        return _ODA_Drawings.OdDbCrypt_decryptData(self, *args)

    def digitalSignatureModeLaunched(self, *args):
        return _ODA_Drawings.OdDbCrypt_digitalSignatureModeLaunched(self, *args)

    def appendDataToProcessSignature(self, *args):
        return _ODA_Drawings.OdDbCrypt_appendDataToProcessSignature(self, *args)

    def signData(self, *args):
        return _ODA_Drawings.OdDbCrypt_signData(self, *args)

    def verifyDataSignature(self, *args):
        return _ODA_Drawings.OdDbCrypt_verifyDataSignature(self, *args)

    @staticmethod
    def __new(*args):
        return _ODA_Drawings.OdDbCrypt___new(*args)

    def __init__(self):
        this = _ODA_Drawings.OdDbCrypt___new(self)
        try:
          self.this.append(this)
        except:
          self.this = this

    __swig_destroy__ = _ODA_Drawings.delete_OdDbCrypt
    def __disown__(self):
        self.this.disown()
        _ODA_Drawings.disown_OdDbCrypt(self)
        return weakref.proxy(self)

# Register OdDbCrypt in _ODA_Drawings:
_ODA_Drawings.OdDbCrypt_swigregister(OdDbCrypt)

def OdDbCrypt_cast(*args):
    return _ODA_Drawings.OdDbCrypt_cast(*args)

def OdDbCrypt_desc(*args):
    return _ODA_Drawings.OdDbCrypt_desc(*args)

def OdDbCrypt_createObject(*args):
    return _ODA_Drawings.OdDbCrypt_createObject(*args)

def OdDbCrypt___new(*args):
    return _ODA_Drawings.OdDbCrypt___new(*args)

class OdPwdIterator(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def done(self, *args):
        return _ODA_Drawings.OdPwdIterator_done(self, *args)

    def next(self, *args):
        return _ODA_Drawings.OdPwdIterator_next(self, *args)

    def get(self, *args):
        return _ODA_Drawings.OdPwdIterator_get(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdPwdIterator

# Register OdPwdIterator in _ODA_Drawings:
_ODA_Drawings.OdPwdIterator_swigregister(OdPwdIterator)

class OdPwdCache(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def add(self, *args):
        return _ODA_Drawings.OdPwdCache_add(self, *args)

    def newIterator(self, *args):
        return _ODA_Drawings.OdPwdCache_newIterator(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdPwdCache

# Register OdPwdCache in _ODA_Drawings:
_ODA_Drawings.OdPwdCache_swigregister(OdPwdCache)

class OdCmColor(ODA_Kernel.OdCmColorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdCmColor_swiginit(self, _ODA_Drawings.new_OdCmColor(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdCmColor

    def __eq__(self, *args):
        return _ODA_Drawings.OdCmColor___eq__(self, *args)

    def __ne__(self, *args):
        return _ODA_Drawings.OdCmColor___ne__(self, *args)

    def getDescription(self, *args):
        return _ODA_Drawings.OdCmColor_getDescription(self, *args)

    def getExplanation(self, *args):
        return _ODA_Drawings.OdCmColor_getExplanation(self, *args)

    def colorMethod(self, *args):
        return _ODA_Drawings.OdCmColor_colorMethod(self, *args)

    def setColorMethod(self, *args):
        return _ODA_Drawings.OdCmColor_setColorMethod(self, *args)

    def isByColor(self, *args):
        return _ODA_Drawings.OdCmColor_isByColor(self, *args)

    def isByLayer(self, *args):
        return _ODA_Drawings.OdCmColor_isByLayer(self, *args)

    def isByBlock(self, *args):
        return _ODA_Drawings.OdCmColor_isByBlock(self, *args)

    def isByACI(self, *args):
        return _ODA_Drawings.OdCmColor_isByACI(self, *args)

    def isForeground(self, *args):
        return _ODA_Drawings.OdCmColor_isForeground(self, *args)

    def isByDgnIndex(self, *args):
        return _ODA_Drawings.OdCmColor_isByDgnIndex(self, *args)

    def isNone(self, *args):
        return _ODA_Drawings.OdCmColor_isNone(self, *args)

    def color(self, *args):
        return _ODA_Drawings.OdCmColor_color(self, *args)

    def setColor(self, *args):
        return _ODA_Drawings.OdCmColor_setColor(self, *args)

    def setRGB(self, *args):
        return _ODA_Drawings.OdCmColor_setRGB(self, *args)

    def setRed(self, *args):
        return _ODA_Drawings.OdCmColor_setRed(self, *args)

    def setGreen(self, *args):
        return _ODA_Drawings.OdCmColor_setGreen(self, *args)

    def setBlue(self, *args):
        return _ODA_Drawings.OdCmColor_setBlue(self, *args)

    def red(self, *args):
        return _ODA_Drawings.OdCmColor_red(self, *args)

    def green(self, *args):
        return _ODA_Drawings.OdCmColor_green(self, *args)

    def blue(self, *args):
        return _ODA_Drawings.OdCmColor_blue(self, *args)

    def colorIndex(self, *args):
        return _ODA_Drawings.OdCmColor_colorIndex(self, *args)

    def setColorIndex(self, *args):
        return _ODA_Drawings.OdCmColor_setColorIndex(self, *args)

    def setNames(self, *args):
        return _ODA_Drawings.OdCmColor_setNames(self, *args)

    def colorName(self, *args):
        return _ODA_Drawings.OdCmColor_colorName(self, *args)

    def bookName(self, *args):
        return _ODA_Drawings.OdCmColor_bookName(self, *args)

    def colorNameForDisplay(self, *args):
        return _ODA_Drawings.OdCmColor_colorNameForDisplay(self, *args)

    def entityColor(self, *args):
        return _ODA_Drawings.OdCmColor_entityColor(self, *args)

    def getDictionaryKey(self, *args):
        return _ODA_Drawings.OdCmColor_getDictionaryKey(self, *args)

    def setNamesFromDictionaryKey(self, *args):
        return _ODA_Drawings.OdCmColor_setNamesFromDictionaryKey(self, *args)

    def dwgIn(self, *args):
        return _ODA_Drawings.OdCmColor_dwgIn(self, *args)

    def dwgOut(self, *args):
        return _ODA_Drawings.OdCmColor_dwgOut(self, *args)

    def dxfIn(self, *args):
        return _ODA_Drawings.OdCmColor_dxfIn(self, *args)

    def dxfOut(self, *args):
        return _ODA_Drawings.OdCmColor_dxfOut(self, *args)

    def audit(self, *args):
        return _ODA_Drawings.OdCmColor_audit(self, *args)

    def dwgInAsTrueColor(self, *args):
        return _ODA_Drawings.OdCmColor_dwgInAsTrueColor(self, *args)

    def dwgOutAsTrueColor(self, *args):
        return _ODA_Drawings.OdCmColor_dwgOutAsTrueColor(self, *args)

# Register OdCmColor in _ODA_Drawings:
_ODA_Drawings.OdCmColor_swigregister(OdCmColor)
OdCmColor.MaxColorIndex = _ODA_Drawings.cvar.OdCmColor_MaxColorIndex

class OdDbDate(ODA_Kernel.OdTimeStamp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbDate_swiginit(self, _ODA_Drawings.new_OdDbDate(*args))

    def dwgIn(self, *args):
        return _ODA_Drawings.OdDbDate_dwgIn(self, *args)

    def dwgOut(self, *args):
        return _ODA_Drawings.OdDbDate_dwgOut(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDate

# Register OdDbDate in _ODA_Drawings:
_ODA_Drawings.OdDbDate_swigregister(OdDbDate)

class OdDbFullSubentPath(ODA_Kernel.OdDbBaseFullSubentPath):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbFullSubentPath_swiginit(self, _ODA_Drawings.new_OdDbFullSubentPath(*args))

    def __eq__(self, *args):
        return _ODA_Drawings.OdDbFullSubentPath___eq__(self, *args)

    def objectIds(self, *args):
        return _ODA_Drawings.OdDbFullSubentPath_objectIds(self, *args)

    def subentId(self, *args):
        return _ODA_Drawings.OdDbFullSubentPath_subentId(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbFullSubentPath

# Register OdDbFullSubentPath in _ODA_Drawings:
_ODA_Drawings.OdDbFullSubentPath_swigregister(OdDbFullSubentPath)

kEndCapNone = _ODA_Drawings.kEndCapNone
kEndCapRound = _ODA_Drawings.kEndCapRound
kEndCapAngle = _ODA_Drawings.kEndCapAngle
kEndCapSquare = _ODA_Drawings.kEndCapSquare
kJnStylNone = _ODA_Drawings.kJnStylNone
kJnStylRound = _ODA_Drawings.kJnStylRound
kJnStylAngle = _ODA_Drawings.kJnStylAngle
kJnStylFlat = _ODA_Drawings.kJnStylFlat
kDltNotApplicable = _ODA_Drawings.kDltNotApplicable
kDltIgnore = _ODA_Drawings.kDltIgnore
kDltReplace = _ODA_Drawings.kDltReplace
kInternationalDateLine = _ODA_Drawings.kInternationalDateLine
kMidwayIsland = _ODA_Drawings.kMidwayIsland
kHawaii = _ODA_Drawings.kHawaii
kAlaska = _ODA_Drawings.kAlaska
kPacific = _ODA_Drawings.kPacific
kMountain = _ODA_Drawings.kMountain
kArizona = _ODA_Drawings.kArizona
kMazatlan = _ODA_Drawings.kMazatlan
kCentral = _ODA_Drawings.kCentral
kCentralAmerica = _ODA_Drawings.kCentralAmerica
kMexicoCity = _ODA_Drawings.kMexicoCity
kSaskatchewan = _ODA_Drawings.kSaskatchewan
kEastern = _ODA_Drawings.kEastern
kIndiana = _ODA_Drawings.kIndiana
kBogota = _ODA_Drawings.kBogota
kAtlanticCanada = _ODA_Drawings.kAtlanticCanada
kCaracas = _ODA_Drawings.kCaracas
kSantiago = _ODA_Drawings.kSantiago
kNewfoundland = _ODA_Drawings.kNewfoundland
kBrasilia = _ODA_Drawings.kBrasilia
kBuenosAires = _ODA_Drawings.kBuenosAires
kGreenland = _ODA_Drawings.kGreenland
kMidAtlantic = _ODA_Drawings.kMidAtlantic
kAzores = _ODA_Drawings.kAzores
kCapeVerde = _ODA_Drawings.kCapeVerde
kUTC = _ODA_Drawings.kUTC
kGMT = _ODA_Drawings.kGMT
kMonrovia = _ODA_Drawings.kMonrovia
kBerlin = _ODA_Drawings.kBerlin
kParis = _ODA_Drawings.kParis
kPrague = _ODA_Drawings.kPrague
kSarajevo = _ODA_Drawings.kSarajevo
kWestCentralAfrica = _ODA_Drawings.kWestCentralAfrica
kAthens = _ODA_Drawings.kAthens
kEasternEurope = _ODA_Drawings.kEasternEurope
kCairo = _ODA_Drawings.kCairo
kHarare = _ODA_Drawings.kHarare
kHelsinki = _ODA_Drawings.kHelsinki
kJerusalem = _ODA_Drawings.kJerusalem
kMoscow = _ODA_Drawings.kMoscow
kRiyadh = _ODA_Drawings.kRiyadh
kBaghdad = _ODA_Drawings.kBaghdad
kEastAfrica = _ODA_Drawings.kEastAfrica
kTehran = _ODA_Drawings.kTehran
kAbuDhabi = _ODA_Drawings.kAbuDhabi
kCaucasus = _ODA_Drawings.kCaucasus
kKabul = _ODA_Drawings.kKabul
kEkaterinburg = _ODA_Drawings.kEkaterinburg
kIslamabad = _ODA_Drawings.kIslamabad
kKolkata = _ODA_Drawings.kKolkata
kKathmandu = _ODA_Drawings.kKathmandu
kAlmaty = _ODA_Drawings.kAlmaty
kDhaka = _ODA_Drawings.kDhaka
kSriLanka = _ODA_Drawings.kSriLanka
kRangoon = _ODA_Drawings.kRangoon
kBangkok = _ODA_Drawings.kBangkok
kKrasnoyarsk = _ODA_Drawings.kKrasnoyarsk
kBeijing = _ODA_Drawings.kBeijing
kSingapore = _ODA_Drawings.kSingapore
kTaipei = _ODA_Drawings.kTaipei
kIrkutsk = _ODA_Drawings.kIrkutsk
kPerth = _ODA_Drawings.kPerth
kTokyo = _ODA_Drawings.kTokyo
kSeoul = _ODA_Drawings.kSeoul
kYakutsk = _ODA_Drawings.kYakutsk
kAdelaide = _ODA_Drawings.kAdelaide
kDarwin = _ODA_Drawings.kDarwin
kSydney = _ODA_Drawings.kSydney
kGuam = _ODA_Drawings.kGuam
kBrisbane = _ODA_Drawings.kBrisbane
kHobart = _ODA_Drawings.kHobart
kVladivostock = _ODA_Drawings.kVladivostock
kMagadan = _ODA_Drawings.kMagadan
kWellington = _ODA_Drawings.kWellington
kFiji = _ODA_Drawings.kFiji
kTonga = _ODA_Drawings.kTonga
kLoftNoParam = _ODA_Drawings.kLoftNoParam
kLoftNoTwist = _ODA_Drawings.kLoftNoTwist
kLoftAlignDirection = _ODA_Drawings.kLoftAlignDirection
kLoftSimplify = _ODA_Drawings.kLoftSimplify
kLoftClose = _ODA_Drawings.kLoftClose
kLoftPeriodic = _ODA_Drawings.kLoftPeriodic
kLoftDefault = _ODA_Drawings.kLoftDefault
kLoftRuled = _ODA_Drawings.kLoftRuled
kLoftSmooth = _ODA_Drawings.kLoftSmooth
kLoftFirstNormal = _ODA_Drawings.kLoftFirstNormal
kLoftLastNormal = _ODA_Drawings.kLoftLastNormal
kLoftEndsNormal = _ODA_Drawings.kLoftEndsNormal
kLoftAllNormal = _ODA_Drawings.kLoftAllNormal
kLoftUseDraftAngles = _ODA_Drawings.kLoftUseDraftAngles
kCollisionTypeNone = _ODA_Drawings.kCollisionTypeNone
kCollisionTypeSolid = _ODA_Drawings.kCollisionTypeSolid
kProxyNotShow = _ODA_Drawings.kProxyNotShow
kProxyShow = _ODA_Drawings.kProxyShow
kProxyBoundingBox = _ODA_Drawings.kProxyBoundingBox
kTrimNone = _ODA_Drawings.kTrimNone
kTrimFirst = _ODA_Drawings.kTrimFirst
kTrimSecond = _ODA_Drawings.kTrimSecond
kTrimBoth = _ODA_Drawings.kTrimBoth
kTextFileEncodingDefault = _ODA_Drawings.kTextFileEncodingDefault
kTextFileEncodingANSI = _ODA_Drawings.kTextFileEncodingANSI
kTextFileEncodingUTF8 = _ODA_Drawings.kTextFileEncodingUTF8
kTextFileEncodingUTF16 = _ODA_Drawings.kTextFileEncodingUTF16
kTextFileEncodingUTF16LE = _ODA_Drawings.kTextFileEncodingUTF16LE
kTextFileEncodingUTF16BE = _ODA_Drawings.kTextFileEncodingUTF16BE
kTextFileEncodingUTF32 = _ODA_Drawings.kTextFileEncodingUTF32
kTextFileEncodingUTF32LE = _ODA_Drawings.kTextFileEncodingUTF32LE
kTextFileEncodingUTF32BE = _ODA_Drawings.kTextFileEncodingUTF32BE
kLayerSystemLights = _ODA_Drawings.kLayerSystemLights
kLayerConstraints = _ODA_Drawings.kLayerConstraints
kNoIndexing = _ODA_Drawings.kNoIndexing
kUpdateBlockIndexOnSave = _ODA_Drawings.kUpdateBlockIndexOnSave
kUseBlockChangeIterator = _ODA_Drawings.kUseBlockChangeIterator
kUseAll = _ODA_Drawings.kUseAll
kEnabler = _ODA_Drawings.kEnabler
kEditor = _ODA_Drawings.kEditor
kArchitecture = _ODA_Drawings.kArchitecture
kCivil = _ODA_Drawings.kCivil
kMechanical = _ODA_Drawings.kMechanical
class OdDbDatabase(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbDatabase_subGetClassID(self, *args)

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDatabase_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDatabase_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDatabase_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDatabase_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDatabase_createObject(*args)

    def appServices(self, *args):
        return _ODA_Drawings.OdDbDatabase_appServices(self, *args)

    def initialize(self, *args):
        return _ODA_Drawings.OdDbDatabase_initialize(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDatabase

    def addOdDbObject(self, *args):
        return _ODA_Drawings.OdDbDatabase_addOdDbObject(self, *args)

    def newRegApp(self, *args):
        return _ODA_Drawings.OdDbDatabase_newRegApp(self, *args)

    def getBlockTableId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getBlockTableId(self, *args)

    def getLayerTableId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLayerTableId(self, *args)

    def getTextStyleTableId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTextStyleTableId(self, *args)

    def getLinetypeTableId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLinetypeTableId(self, *args)

    def getViewTableId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getViewTableId(self, *args)

    def getUCSTableId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUCSTableId(self, *args)

    def getViewportTableId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getViewportTableId(self, *args)

    def getRegAppTableId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getRegAppTableId(self, *args)

    def getDimStyleTableId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDimStyleTableId(self, *args)

    def getMLStyleDictionaryId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getMLStyleDictionaryId(self, *args)

    def getGroupDictionaryId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getGroupDictionaryId(self, *args)

    def getLayoutDictionaryId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLayoutDictionaryId(self, *args)

    def getPlotStyleNameDictionaryId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPlotStyleNameDictionaryId(self, *args)

    def getNamedObjectsDictionaryId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getNamedObjectsDictionaryId(self, *args)

    def getPlotSettingsDictionaryId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPlotSettingsDictionaryId(self, *args)

    def getColorDictionaryId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getColorDictionaryId(self, *args)

    def getMaterialDictionaryId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getMaterialDictionaryId(self, *args)

    def getVisualStyleDictionaryId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getVisualStyleDictionaryId(self, *args)

    def getTableStyleDictionaryId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTableStyleDictionaryId(self, *args)

    def getScaleListDictionaryId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getScaleListDictionaryId(self, *args)

    def tablestyle(self, *args):
        return _ODA_Drawings.OdDbDatabase_tablestyle(self, *args)

    def setTablestyle(self, *args):
        return _ODA_Drawings.OdDbDatabase_setTablestyle(self, *args)

    def getMLeaderStyleDictionaryId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getMLeaderStyleDictionaryId(self, *args)

    def mleaderstyle(self, *args):
        return _ODA_Drawings.OdDbDatabase_mleaderstyle(self, *args)

    def setMLeaderstyle(self, *args):
        return _ODA_Drawings.OdDbDatabase_setMLeaderstyle(self, *args)

    def getDetailViewStyleDictionaryId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDetailViewStyleDictionaryId(self, *args)

    def detailViewStyle(self, *args):
        return _ODA_Drawings.OdDbDatabase_detailViewStyle(self, *args)

    def setDetailViewStyle(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDetailViewStyle(self, *args)

    def getSectionViewStyleDictionaryId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSectionViewStyleDictionaryId(self, *args)

    def sectionViewStyle(self, *args):
        return _ODA_Drawings.OdDbDatabase_sectionViewStyle(self, *args)

    def setSectionViewStyle(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSectionViewStyle(self, *args)

    def getRegAppAcadId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getRegAppAcadId(self, *args)

    def getLinetypeContinuousId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLinetypeContinuousId(self, *args)

    def getLinetypeByLayerId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLinetypeByLayerId(self, *args)

    def getLinetypeByBlockId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLinetypeByBlockId(self, *args)

    def getModelSpaceId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getModelSpaceId(self, *args)

    def getPaperSpaceId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPaperSpaceId(self, *args)

    def getTextStyleStandardId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTextStyleStandardId(self, *args)

    def getDimStyleStandardId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDimStyleStandardId(self, *args)

    def getLayerZeroId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLayerZeroId(self, *args)

    def getLayerDefpointsId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLayerDefpointsId(self, *args)

    def getLayerAdskId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLayerAdskId(self, *args)

    def getSectionManager(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSectionManager(self, *args)

    def getPointCloudDictionaryId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPointCloudDictionaryId(self, *args)

    def classDxfName(self, *args):
        return _ODA_Drawings.OdDbDatabase_classDxfName(self, *args)

    def getOdDbObjectId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getOdDbObjectId(self, *args)

    def writeFile(self, *args):
        return _ODA_Drawings.OdDbDatabase_writeFile(self, *args)

    def save(self, *args):
        return _ODA_Drawings.OdDbDatabase_save(self, *args)

    def readFile(self, *args):
        return _ODA_Drawings.OdDbDatabase_readFile(self, *args)

    def closeInput(self, *args):
        return _ODA_Drawings.OdDbDatabase_closeInput(self, *args)

    def approxNumObjects(self, *args):
        return _ODA_Drawings.OdDbDatabase_approxNumObjects(self, *args)

    def version(self, *args):
        return _ODA_Drawings.OdDbDatabase_version(self, *args)

    def numberOfSaves(self, *args):
        return _ODA_Drawings.OdDbDatabase_numberOfSaves(self, *args)

    def lastSavedAsVersion(self, *args):
        return _ODA_Drawings.OdDbDatabase_lastSavedAsVersion(self, *args)

    def originalFileType(self, *args):
        return _ODA_Drawings.OdDbDatabase_originalFileType(self, *args)

    def originalFileVersion(self, *args):
        return _ODA_Drawings.OdDbDatabase_originalFileVersion(self, *args)

    def originalFileSavedByVersion(self, *args):
        return _ODA_Drawings.OdDbDatabase_originalFileSavedByVersion(self, *args)

    def addReactor(self, *args):
        return _ODA_Drawings.OdDbDatabase_addReactor(self, *args)

    def removeReactor(self, *args):
        return _ODA_Drawings.OdDbDatabase_removeReactor(self, *args)

    def dimfit(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimfit(self, *args)

    def dimunit(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimunit(self, *args)

    def setDimfit(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimfit(self, *args)

    def setDimunit(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimunit(self, *args)

    def deepCloneObjects(self, *args):
        return _ODA_Drawings.OdDbDatabase_deepCloneObjects(self, *args)

    def wblockCloneObjects(self, *args):
        return _ODA_Drawings.OdDbDatabase_wblockCloneObjects(self, *args)

    def abortDeepClone(self, *args):
        return _ODA_Drawings.OdDbDatabase_abortDeepClone(self, *args)

    def audit(self, *args):
        return _ODA_Drawings.OdDbDatabase_audit(self, *args)

    def startTransaction(self, *args):
        return _ODA_Drawings.OdDbDatabase_startTransaction(self, *args)

    def flushAllTransactedChanges(self, *args):
        return _ODA_Drawings.OdDbDatabase_flushAllTransactedChanges(self, *args)

    def endTransaction(self, *args):
        return _ODA_Drawings.OdDbDatabase_endTransaction(self, *args)

    def abortTransaction(self, *args):
        return _ODA_Drawings.OdDbDatabase_abortTransaction(self, *args)

    def numActiveTransactions(self, *args):
        return _ODA_Drawings.OdDbDatabase_numActiveTransactions(self, *args)

    def addTransactionReactor(self, *args):
        return _ODA_Drawings.OdDbDatabase_addTransactionReactor(self, *args)

    def removeTransactionReactor(self, *args):
        return _ODA_Drawings.OdDbDatabase_removeTransactionReactor(self, *args)

    def thumbnailBitmap(self, *args):
        return _ODA_Drawings.OdDbDatabase_thumbnailBitmap(self, *args)

    def setThumbnailBitmap(self, *args):
        return _ODA_Drawings.OdDbDatabase_setThumbnailBitmap(self, *args)

    def retainOriginalThumbnailBitmap(self, *args):
        return _ODA_Drawings.OdDbDatabase_retainOriginalThumbnailBitmap(self, *args)

    def setRetainOriginalThumbnailBitmap(self, *args):
        return _ODA_Drawings.OdDbDatabase_setRetainOriginalThumbnailBitmap(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbDatabase_dwgOutFields(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbDatabase_dwgInFields(self, *args)

    def getDIMANNO(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDIMANNO(self, *args)

    def getTDCREATE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTDCREATE(self, *args)

    def getTDUPDATE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTDUPDATE(self, *args)

    def getCGEOCS(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCGEOCS(self, *args)

    def resetTimes(self, *args):
        return _ODA_Drawings.OdDbDatabase_resetTimes(self, *args)

    def getSysVar(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSysVar(self, *args)

    def setSysVar(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSysVar(self, *args)

    def handseed(self, *args):
        return _ODA_Drawings.OdDbDatabase_handseed(self, *args)

    def getDimstyleData(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDimstyleData(self, *args)

    def getDimstyleChildData(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDimstyleChildData(self, *args)

    def getDimstyleChildId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDimstyleChildId(self, *args)

    def getDimstyleParentId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDimstyleParentId(self, *args)

    def setDimstyleData(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimstyleData(self, *args)

    def loadLineTypeFile(self, *args):
        return _ODA_Drawings.OdDbDatabase_loadLineTypeFile(self, *args)

    def originalFilename(self, *args):
        return _ODA_Drawings.OdDbDatabase_originalFilename(self, *args)

    def getFilename(self, *args):
        return _ODA_Drawings.OdDbDatabase_getFilename(self, *args)

    def setFilename(self, *args):
        return _ODA_Drawings.OdDbDatabase_setFilename(self, *args)

    def purge(self, *args):
        return _ODA_Drawings.OdDbDatabase_purge(self, *args)

    def countHardReferences(self, *args):
        return _ODA_Drawings.OdDbDatabase_countHardReferences(self, *args)

    def currentLayoutId(self, *args):
        return _ODA_Drawings.OdDbDatabase_currentLayoutId(self, *args)

    def setCurrentLayout(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCurrentLayout(self, *args)

    def findActiveLayout(self, *args):
        return _ODA_Drawings.OdDbDatabase_findActiveLayout(self, *args)

    def getActiveLayoutBTRId(self, *args):
        return _ODA_Drawings.OdDbDatabase_getActiveLayoutBTRId(self, *args)

    def findLayoutNamed(self, *args):
        return _ODA_Drawings.OdDbDatabase_findLayoutNamed(self, *args)

    def deleteLayout(self, *args):
        return _ODA_Drawings.OdDbDatabase_deleteLayout(self, *args)

    def createLayout(self, *args):
        return _ODA_Drawings.OdDbDatabase_createLayout(self, *args)

    def countLayouts(self, *args):
        return _ODA_Drawings.OdDbDatabase_countLayouts(self, *args)

    def renameLayout(self, *args):
        return _ODA_Drawings.OdDbDatabase_renameLayout(self, *args)

    def startUndoRecord(self, *args):
        return _ODA_Drawings.OdDbDatabase_startUndoRecord(self, *args)

    def hasUndo(self, *args):
        return _ODA_Drawings.OdDbDatabase_hasUndo(self, *args)

    def undo(self, *args):
        return _ODA_Drawings.OdDbDatabase_undo(self, *args)

    def blockUndoRecording(self, *args):
        return _ODA_Drawings.OdDbDatabase_blockUndoRecording(self, *args)

    def isUndoBlockStarted(self, *args):
        return _ODA_Drawings.OdDbDatabase_isUndoBlockStarted(self, *args)

    def setUndoMark(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUndoMark(self, *args)

    def hasUndoMark(self, *args):
        return _ODA_Drawings.OdDbDatabase_hasUndoMark(self, *args)

    def undoBack(self, *args):
        return _ODA_Drawings.OdDbDatabase_undoBack(self, *args)

    def getUNDOMARKS(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUNDOMARKS(self, *args)

    def clearUndo(self, *args):
        return _ODA_Drawings.OdDbDatabase_clearUndo(self, *args)

    def hasRedo(self, *args):
        return _ODA_Drawings.OdDbDatabase_hasRedo(self, *args)

    def redo(self, *args):
        return _ODA_Drawings.OdDbDatabase_redo(self, *args)

    def auditDatabase(self, *args):
        return _ODA_Drawings.OdDbDatabase_auditDatabase(self, *args)

    def applyPartialUndo(self, *args):
        return _ODA_Drawings.OdDbDatabase_applyPartialUndo(self, *args)

    def undoFiler(self, *args):
        return _ODA_Drawings.OdDbDatabase_undoFiler(self, *args)

    def insert(self, *args):
        return _ODA_Drawings.OdDbDatabase_insert(self, *args)

    def wblock(self, *args):
        return _ODA_Drawings.OdDbDatabase_wblock(self, *args)

    def subWblockClone(self, *args):
        return _ODA_Drawings.OdDbDatabase_subWblockClone(self, *args)

    def setSecurityParams(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSecurityParams(self, *args)

    def securityParams(self, *args):
        return _ODA_Drawings.OdDbDatabase_securityParams(self, *args)

    def fileDependencyManager(self, *args):
        return _ODA_Drawings.OdDbDatabase_fileDependencyManager(self, *args)

    def objectContextManager(self, *args):
        return _ODA_Drawings.OdDbDatabase_objectContextManager(self, *args)

    def getLayerStateManager(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLayerStateManager(self, *args)

    def updateExt(self, *args):
        return _ODA_Drawings.OdDbDatabase_updateExt(self, *args)

    def isEMR(self, *args):
        return _ODA_Drawings.OdDbDatabase_isEMR(self, *args)

    def xrefBlockId(self, *args):
        return _ODA_Drawings.OdDbDatabase_xrefBlockId(self, *args)

    def isPartiallyOpened(self, *args):
        return _ODA_Drawings.OdDbDatabase_isPartiallyOpened(self, *args)

    def isDatabaseLoading(self, *args):
        return _ODA_Drawings.OdDbDatabase_isDatabaseLoading(self, *args)

    def isDatabaseConverting(self, *args):
        return _ODA_Drawings.OdDbDatabase_isDatabaseConverting(self, *args)

    def auditInfo(self, *args):
        return _ODA_Drawings.OdDbDatabase_auditInfo(self, *args)

    def setCurrentUCS(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCurrentUCS(self, *args)

    def getUCSBASEORG(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUCSBASEORG(self, *args)

    def setUCSBASEORG(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUCSBASEORG(self, *args)

    def getPUCSBASEORG(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPUCSBASEORG(self, *args)

    def setPUCSBASEORG(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPUCSBASEORG(self, *args)

    def restoreOriginalXrefSymbols(self, *args):
        return _ODA_Drawings.OdDbDatabase_restoreOriginalXrefSymbols(self, *args)

    def restoreForwardingXrefSymbols(self, *args):
        return _ODA_Drawings.OdDbDatabase_restoreForwardingXrefSymbols(self, *args)

    @staticmethod
    def isValidLineWeight(*args):
        return _ODA_Drawings.OdDbDatabase_isValidLineWeight(*args)

    @staticmethod
    def getNearestLineWeight(*args):
        return _ODA_Drawings.OdDbDatabase_getNearestLineWeight(*args)

    def byLayerMaterialId(self, *args):
        return _ODA_Drawings.OdDbDatabase_byLayerMaterialId(self, *args)

    def byBlockMaterialId(self, *args):
        return _ODA_Drawings.OdDbDatabase_byBlockMaterialId(self, *args)

    def globalMaterialId(self, *args):
        return _ODA_Drawings.OdDbDatabase_globalMaterialId(self, *args)

    def activeViewportId(self, *args):
        return _ODA_Drawings.OdDbDatabase_activeViewportId(self, *args)

    def formatter(self, *args):
        return _ODA_Drawings.OdDbDatabase_formatter(self, *args)

    def enableGraphicsFlush(self, *args):
        return _ODA_Drawings.OdDbDatabase_enableGraphicsFlush(self, *args)

    def flushGraphics(self, *args):
        return _ODA_Drawings.OdDbDatabase_flushGraphics(self, *args)

    def isMultiThreadedMode(self, *args):
        return _ODA_Drawings.OdDbDatabase_isMultiThreadedMode(self, *args)

    def multiThreadedMode(self, *args):
        return _ODA_Drawings.OdDbDatabase_multiThreadedMode(self, *args)

    def setMultiThreadedMode(self, *args):
        return _ODA_Drawings.OdDbDatabase_setMultiThreadedMode(self, *args)

    def setCannoscale(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCannoscale(self, *args)

    def cannoscale(self, *args):
        return _ODA_Drawings.OdDbDatabase_cannoscale(self, *args)

    def dataLinkDictionaryId(self, *args):
        return _ODA_Drawings.OdDbDatabase_dataLinkDictionaryId(self, *args)

    def dataLinkDictionary(self, *args):
        return _ODA_Drawings.OdDbDatabase_dataLinkDictionary(self, *args)

    def usingCoreOnly(self, *args):
        return _ODA_Drawings.OdDbDatabase_usingCoreOnly(self, *args)

    def enqueuePaging(self, *args):
        return _ODA_Drawings.OdDbDatabase_enqueuePaging(self, *args)

    def pageObjects(self, *args):
        return _ODA_Drawings.OdDbDatabase_pageObjects(self, *args)

    def indexingMode(self, *args):
        return _ODA_Drawings.OdDbDatabase_indexingMode(self, *args)

    def setIndexingMode(self, *args):
        return _ODA_Drawings.OdDbDatabase_setIndexingMode(self, *args)

    def isPerObjectConverting(self, *args):
        return _ODA_Drawings.OdDbDatabase_isPerObjectConverting(self, *args)

    def getANGBASE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getANGBASE(self, *args)

    def getANGDIR(self, *args):
        return _ODA_Drawings.OdDbDatabase_getANGDIR(self, *args)

    def getORTHOMODE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getORTHOMODE(self, *args)

    def getREGENMODE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getREGENMODE(self, *args)

    def getFILLMODE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getFILLMODE(self, *args)

    def getQTEXTMODE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getQTEXTMODE(self, *args)

    def getMIRRTEXT(self, *args):
        return _ODA_Drawings.OdDbDatabase_getMIRRTEXT(self, *args)

    def getLTSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLTSCALE(self, *args)

    def getATTMODE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getATTMODE(self, *args)

    def getTRACEWID(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTRACEWID(self, *args)

    def getCLAYER(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCLAYER(self, *args)

    def getCELTYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCELTYPE(self, *args)

    def getCECOLOR(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCECOLOR(self, *args)

    def getCELTSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCELTSCALE(self, *args)

    def getCHAMFERA(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCHAMFERA(self, *args)

    def getCHAMFERB(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCHAMFERB(self, *args)

    def getCHAMFERC(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCHAMFERC(self, *args)

    def getCHAMFERD(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCHAMFERD(self, *args)

    def getDISPSILH(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDISPSILH(self, *args)

    def getDIMSTYLE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDIMSTYLE(self, *args)

    def getDIMASO(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDIMASO(self, *args)

    def getDIMSHO(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDIMSHO(self, *args)

    def getLUNITS(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLUNITS(self, *args)

    def getLUPREC(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLUPREC(self, *args)

    def getSKETCHINC(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSKETCHINC(self, *args)

    def getFILLETRAD(self, *args):
        return _ODA_Drawings.OdDbDatabase_getFILLETRAD(self, *args)

    def getAUNITS(self, *args):
        return _ODA_Drawings.OdDbDatabase_getAUNITS(self, *args)

    def getAUPREC(self, *args):
        return _ODA_Drawings.OdDbDatabase_getAUPREC(self, *args)

    def getTHICKNESS(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTHICKNESS(self, *args)

    def getSKPOLY(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSKPOLY(self, *args)

    def getPDMODE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPDMODE(self, *args)

    def getPDSIZE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPDSIZE(self, *args)

    def getPLINEWID(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPLINEWID(self, *args)

    def getSPLFRAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSPLFRAME(self, *args)

    def getSPLINETYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSPLINETYPE(self, *args)

    def getSPLINESEGS(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSPLINESEGS(self, *args)

    def getSURFTAB1(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSURFTAB1(self, *args)

    def getSURFTAB2(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSURFTAB2(self, *args)

    def getSURFTYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSURFTYPE(self, *args)

    def getSURFU(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSURFU(self, *args)

    def getSURFV(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSURFV(self, *args)

    def getUSERI1(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUSERI1(self, *args)

    def getUSERI2(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUSERI2(self, *args)

    def getUSERI3(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUSERI3(self, *args)

    def getUSERI4(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUSERI4(self, *args)

    def getUSERI5(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUSERI5(self, *args)

    def getUSERR1(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUSERR1(self, *args)

    def getUSERR2(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUSERR2(self, *args)

    def getUSERR3(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUSERR3(self, *args)

    def getUSERR4(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUSERR4(self, *args)

    def getPDFUNDERLAYSHADEDMODE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPDFUNDERLAYSHADEDMODE(self, *args)

    def getUSERR5(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUSERR5(self, *args)

    def getWORLDVIEW(self, *args):
        return _ODA_Drawings.OdDbDatabase_getWORLDVIEW(self, *args)

    def getSHADEDGE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSHADEDGE(self, *args)

    def getSHADEDIF(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSHADEDIF(self, *args)

    def getMAXACTVP(self, *args):
        return _ODA_Drawings.OdDbDatabase_getMAXACTVP(self, *args)

    def getUNITMODE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUNITMODE(self, *args)

    def getVISRETAIN(self, *args):
        return _ODA_Drawings.OdDbDatabase_getVISRETAIN(self, *args)

    def getPLINEGEN(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPLINEGEN(self, *args)

    def getPSLTSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPSLTSCALE(self, *args)

    def getTREEDEPTH(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTREEDEPTH(self, *args)

    def getCMLSTYLE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCMLSTYLE(self, *args)

    def getCMLJUST(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCMLJUST(self, *args)

    def getCMLSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCMLSCALE(self, *args)

    def getPROXYGRAPHICS(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPROXYGRAPHICS(self, *args)

    def getMEASUREMENT(self, *args):
        return _ODA_Drawings.OdDbDatabase_getMEASUREMENT(self, *args)

    def getCELWEIGHT(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCELWEIGHT(self, *args)

    def getLWDISPLAY(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLWDISPLAY(self, *args)

    def getINSUNITS(self, *args):
        return _ODA_Drawings.OdDbDatabase_getINSUNITS(self, *args)

    def getTSTACKALIGN(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTSTACKALIGN(self, *args)

    def getTSTACKSIZE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTSTACKSIZE(self, *args)

    def getHYPERLINKBASE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getHYPERLINKBASE(self, *args)

    def getXEDIT(self, *args):
        return _ODA_Drawings.OdDbDatabase_getXEDIT(self, *args)

    def getEXTNAMES(self, *args):
        return _ODA_Drawings.OdDbDatabase_getEXTNAMES(self, *args)

    def getPSVPSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPSVPSCALE(self, *args)

    def getOLESTARTUP(self, *args):
        return _ODA_Drawings.OdDbDatabase_getOLESTARTUP(self, *args)

    def getPELLIPSE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPELLIPSE(self, *args)

    def getISOLINES(self, *args):
        return _ODA_Drawings.OdDbDatabase_getISOLINES(self, *args)

    def getTEXTQLTY(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTEXTQLTY(self, *args)

    def getFACETRES(self, *args):
        return _ODA_Drawings.OdDbDatabase_getFACETRES(self, *args)

    def getPUCSBASE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPUCSBASE(self, *args)

    def getUCSBASE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUCSBASE(self, *args)

    def getSOLIDHIST(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSOLIDHIST(self, *args)

    def getSHOWHIST(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSHOWHIST(self, *args)

    def getLOFTPARAM(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLOFTPARAM(self, *args)

    def getLOFTNORMALS(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLOFTNORMALS(self, *args)

    def getLOFTANG1(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLOFTANG1(self, *args)

    def getLOFTANG2(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLOFTANG2(self, *args)

    def getLOFTMAG1(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLOFTMAG1(self, *args)

    def getLOFTMAG2(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLOFTMAG2(self, *args)

    def getLATITUDE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLATITUDE(self, *args)

    def getLONGITUDE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLONGITUDE(self, *args)

    def getNORTHDIRECTION(self, *args):
        return _ODA_Drawings.OdDbDatabase_getNORTHDIRECTION(self, *args)

    def getTIMEZONE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTIMEZONE(self, *args)

    def getLIGHTGLYPHDISPLAY(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLIGHTGLYPHDISPLAY(self, *args)

    def getTILEMODELIGHTSYNCH(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTILEMODELIGHTSYNCH(self, *args)

    def getINTERFERECOLOR(self, *args):
        return _ODA_Drawings.OdDbDatabase_getINTERFERECOLOR(self, *args)

    def getINTERFEREOBJVS(self, *args):
        return _ODA_Drawings.OdDbDatabase_getINTERFEREOBJVS(self, *args)

    def getINTERFEREVPVS(self, *args):
        return _ODA_Drawings.OdDbDatabase_getINTERFEREVPVS(self, *args)

    def getDRAGVS(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDRAGVS(self, *args)

    def getCSHADOW(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCSHADOW(self, *args)

    def getSHADOWPLANELOCATION(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSHADOWPLANELOCATION(self, *args)

    def getCAMERADISPLAY(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCAMERADISPLAY(self, *args)

    def getLENSLENGTH(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLENSLENGTH(self, *args)

    def getCAMERAHEIGHT(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCAMERAHEIGHT(self, *args)

    def getSTEPSPERSEC(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSTEPSPERSEC(self, *args)

    def getSTEPSIZE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSTEPSIZE(self, *args)

    def get3DDWFPREC(self, *args):
        return _ODA_Drawings.OdDbDatabase_get3DDWFPREC(self, *args)

    def getCMATERIAL(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCMATERIAL(self, *args)

    def getREALWORLDSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getREALWORLDSCALE(self, *args)

    def getDYNCONSTRAINTDISPLAY(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDYNCONSTRAINTDISPLAY(self, *args)

    def getTDUCREATE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTDUCREATE(self, *args)

    def getTDUUPDATE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTDUUPDATE(self, *args)

    def getTDINDWG(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTDINDWG(self, *args)

    def getTDUSRTIMER(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTDUSRTIMER(self, *args)

    def getPSTYLEMODE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPSTYLEMODE(self, *args)

    def getDWGCODEPAGE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDWGCODEPAGE(self, *args)

    def getREQUIREDVERSIONS(self, *args):
        return _ODA_Drawings.OdDbDatabase_getREQUIREDVERSIONS(self, *args)

    def getUCSORG(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUCSORG(self, *args)

    def getUCSXDIR(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUCSXDIR(self, *args)

    def getUCSYDIR(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUCSYDIR(self, *args)

    def getPUCSORG(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPUCSORG(self, *args)

    def getPUCSXDIR(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPUCSXDIR(self, *args)

    def getPUCSYDIR(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPUCSYDIR(self, *args)

    def getINSBASE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getINSBASE(self, *args)

    def getEXTMIN(self, *args):
        return _ODA_Drawings.OdDbDatabase_getEXTMIN(self, *args)

    def getEXTMAX(self, *args):
        return _ODA_Drawings.OdDbDatabase_getEXTMAX(self, *args)

    def getLIMMIN(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLIMMIN(self, *args)

    def getLIMMAX(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLIMMAX(self, *args)

    def getMENUNAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_getMENUNAME(self, *args)

    def getELEVATION(self, *args):
        return _ODA_Drawings.OdDbDatabase_getELEVATION(self, *args)

    def getPELEVATION(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPELEVATION(self, *args)

    def getLIMCHECK(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLIMCHECK(self, *args)

    def getUSRTIMER(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUSRTIMER(self, *args)

    def getPINSBASE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPINSBASE(self, *args)

    def getPLIMCHECK(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPLIMCHECK(self, *args)

    def getPEXTMIN(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPEXTMIN(self, *args)

    def getPEXTMAX(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPEXTMAX(self, *args)

    def getPLIMMIN(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPLIMMIN(self, *args)

    def getPLIMMAX(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPLIMMAX(self, *args)

    def getUCSNAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUCSNAME(self, *args)

    def getPUCSNAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPUCSNAME(self, *args)

    def getENDCAPS(self, *args):
        return _ODA_Drawings.OdDbDatabase_getENDCAPS(self, *args)

    def getJOINSTYLE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getJOINSTYLE(self, *args)

    def getSTYLESHEET(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSTYLESHEET(self, *args)

    def getCEPSNTYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCEPSNTYPE(self, *args)

    def getCEPSNID(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCEPSNID(self, *args)

    def getFINGERPRINTGUID(self, *args):
        return _ODA_Drawings.OdDbDatabase_getFINGERPRINTGUID(self, *args)

    def getVERSIONGUID(self, *args):
        return _ODA_Drawings.OdDbDatabase_getVERSIONGUID(self, *args)

    def getPUCSORTHOVIEW(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPUCSORTHOVIEW(self, *args)

    def getPUCSORGTOP(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPUCSORGTOP(self, *args)

    def getPUCSORGBOTTOM(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPUCSORGBOTTOM(self, *args)

    def getPUCSORGLEFT(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPUCSORGLEFT(self, *args)

    def getPUCSORGRIGHT(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPUCSORGRIGHT(self, *args)

    def getPUCSORGFRONT(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPUCSORGFRONT(self, *args)

    def getPUCSORGBACK(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPUCSORGBACK(self, *args)

    def getUCSORTHOVIEW(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUCSORTHOVIEW(self, *args)

    def getUCSORGTOP(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUCSORGTOP(self, *args)

    def getUCSORGBOTTOM(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUCSORGBOTTOM(self, *args)

    def getUCSORGLEFT(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUCSORGLEFT(self, *args)

    def getUCSORGRIGHT(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUCSORGRIGHT(self, *args)

    def getUCSORGFRONT(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUCSORGFRONT(self, *args)

    def getUCSORGBACK(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUCSORGBACK(self, *args)

    def getDGNFRAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDGNFRAME(self, *args)

    def getDBCSTATE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDBCSTATE(self, *args)

    def getINTERSECTIONCOLOR(self, *args):
        return _ODA_Drawings.OdDbDatabase_getINTERSECTIONCOLOR(self, *args)

    def getINTERSECTIONDISPLAY(self, *args):
        return _ODA_Drawings.OdDbDatabase_getINTERSECTIONDISPLAY(self, *args)

    def getHALOGAP(self, *args):
        return _ODA_Drawings.OdDbDatabase_getHALOGAP(self, *args)

    def getOBSCUREDCOLOR(self, *args):
        return _ODA_Drawings.OdDbDatabase_getOBSCUREDCOLOR(self, *args)

    def getOBSCUREDLTYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getOBSCUREDLTYPE(self, *args)

    def getINDEXCTL(self, *args):
        return _ODA_Drawings.OdDbDatabase_getINDEXCTL(self, *args)

    def getPROJECTNAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPROJECTNAME(self, *args)

    def getSORTENTS(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSORTENTS(self, *args)

    def getDIMASSOC(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDIMASSOC(self, *args)

    def getHIDETEXT(self, *args):
        return _ODA_Drawings.OdDbDatabase_getHIDETEXT(self, *args)

    def getPSOLWIDTH(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPSOLWIDTH(self, *args)

    def getPSOLHEIGHT(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPSOLHEIGHT(self, *args)

    def getCTABLESTYLE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCTABLESTYLE(self, *args)

    def getANNOALLVISIBLE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getANNOALLVISIBLE(self, *args)

    def getANNOTATIVEDWG(self, *args):
        return _ODA_Drawings.OdDbDatabase_getANNOTATIVEDWG(self, *args)

    def getMSLTSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getMSLTSCALE(self, *args)

    def getLAYEREVAL(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLAYEREVAL(self, *args)

    def getLAYERNOTIFY(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLAYERNOTIFY(self, *args)

    def getLIGHTINGUNITS(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLIGHTINGUNITS(self, *args)

    def getLIGHTSINBLOCKS(self, *args):
        return _ODA_Drawings.OdDbDatabase_getLIGHTSINBLOCKS(self, *args)

    def getDRAWORDERCTL(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDRAWORDERCTL(self, *args)

    def getHPINHERIT(self, *args):
        return _ODA_Drawings.OdDbDatabase_getHPINHERIT(self, *args)

    def getHPORIGIN(self, *args):
        return _ODA_Drawings.OdDbDatabase_getHPORIGIN(self, *args)

    def getFIELDEVAL(self, *args):
        return _ODA_Drawings.OdDbDatabase_getFIELDEVAL(self, *args)

    def getMSOLESCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getMSOLESCALE(self, *args)

    def getUPDATETHUMBNAIL(self, *args):
        return _ODA_Drawings.OdDbDatabase_getUPDATETHUMBNAIL(self, *args)

    def getDXEVAL(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDXEVAL(self, *args)

    def getGEOLATLONGFORMAT(self, *args):
        return _ODA_Drawings.OdDbDatabase_getGEOLATLONGFORMAT(self, *args)

    def getGEOMARKERVISIBILITY(self, *args):
        return _ODA_Drawings.OdDbDatabase_getGEOMARKERVISIBILITY(self, *args)

    def getPREVIEWTYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPREVIEWTYPE(self, *args)

    def getEXPORTMODELSPACE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getEXPORTMODELSPACE(self, *args)

    def getEXPORTPAPERSPACE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getEXPORTPAPERSPACE(self, *args)

    def getEXPORTPAGESETUP(self, *args):
        return _ODA_Drawings.OdDbDatabase_getEXPORTPAGESETUP(self, *args)

    def getMESHTYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getMESHTYPE(self, *args)

    def getSKYSTATUS(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSKYSTATUS(self, *args)

    def getVSACURVATUREHIGH(self, *args):
        return _ODA_Drawings.OdDbDatabase_getVSACURVATUREHIGH(self, *args)

    def getVSACURVATURELOW(self, *args):
        return _ODA_Drawings.OdDbDatabase_getVSACURVATURELOW(self, *args)

    def getVSACURVATURETYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getVSACURVATURETYPE(self, *args)

    def getVSADRAFTANGLEHIGH(self, *args):
        return _ODA_Drawings.OdDbDatabase_getVSADRAFTANGLEHIGH(self, *args)

    def getVSADRAFTANGLELOW(self, *args):
        return _ODA_Drawings.OdDbDatabase_getVSADRAFTANGLELOW(self, *args)

    def getVSAZEBRACOLOR1(self, *args):
        return _ODA_Drawings.OdDbDatabase_getVSAZEBRACOLOR1(self, *args)

    def getVSAZEBRACOLOR2(self, *args):
        return _ODA_Drawings.OdDbDatabase_getVSAZEBRACOLOR2(self, *args)

    def getVSAZEBRADIRECTION(self, *args):
        return _ODA_Drawings.OdDbDatabase_getVSAZEBRADIRECTION(self, *args)

    def getVSAZEBRASIZE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getVSAZEBRASIZE(self, *args)

    def getVSAZEBRATYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getVSAZEBRATYPE(self, *args)

    def getHPLAYER(self, *args):
        return _ODA_Drawings.OdDbDatabase_getHPLAYER(self, *args)

    def getMIRRHATCH(self, *args):
        return _ODA_Drawings.OdDbDatabase_getMIRRHATCH(self, *args)

    def getHPTRANSPARENCY(self, *args):
        return _ODA_Drawings.OdDbDatabase_getHPTRANSPARENCY(self, *args)

    def getHPCOLOR(self, *args):
        return _ODA_Drawings.OdDbDatabase_getHPCOLOR(self, *args)

    def getHPBACKGROUNDCOLOR(self, *args):
        return _ODA_Drawings.OdDbDatabase_getHPBACKGROUNDCOLOR(self, *args)

    def getCETRANSPARENCY(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCETRANSPARENCY(self, *args)

    def getCVIEWDETAILSTYLE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCVIEWDETAILSTYLE(self, *args)

    def getCVIEWSECTIONSTYLE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCVIEWSECTIONSTYLE(self, *args)

    def getWIPEOUTFRAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_getWIPEOUTFRAME(self, *args)

    def getPOINTCLOUDCLIPFRAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPOINTCLOUDCLIPFRAME(self, *args)

    def getMLEADERSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getMLEADERSCALE(self, *args)

    def getVIEWUPDATEAUTO(self, *args):
        return _ODA_Drawings.OdDbDatabase_getVIEWUPDATEAUTO(self, *args)

    def getGEOMARKPOSITIONSIZE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getGEOMARKPOSITIONSIZE(self, *args)

    def getPOINTCLOUDPOINTSIZE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPOINTCLOUDPOINTSIZE(self, *args)

    def getDIMLAYER(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDIMLAYER(self, *args)

    def getSECTIONOFFSETINC(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSECTIONOFFSETINC(self, *args)

    def getSECTIONTHICKNESSINC(self, *args):
        return _ODA_Drawings.OdDbDatabase_getSECTIONTHICKNESSINC(self, *args)

    def getXREFOVERRIDE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getXREFOVERRIDE(self, *args)

    def getCENTERCROSSGAP(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCENTERCROSSGAP(self, *args)

    def getCENTERCROSSSIZE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCENTERCROSSSIZE(self, *args)

    def getCENTEREXE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCENTEREXE(self, *args)

    def getCENTERLAYER(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCENTERLAYER(self, *args)

    def getCENTERLTSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCENTERLTSCALE(self, *args)

    def getCENTERLTYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCENTERLTYPE(self, *args)

    def getCENTERLTYPEFILE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCENTERLTYPEFILE(self, *args)

    def getCENTERMARKEXE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCENTERMARKEXE(self, *args)

    def getCANNOSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCANNOSCALE(self, *args)

    def getCMLEADERSTYLE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getCMLEADERSTYLE(self, *args)

    def getTEXTSIZE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTEXTSIZE(self, *args)

    def getTEXTSTYLE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTEXTSTYLE(self, *args)

    def getTILEMODE(self, *args):
        return _ODA_Drawings.OdDbDatabase_getTILEMODE(self, *args)

    def getDWFFRAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_getDWFFRAME(self, *args)

    def getFRAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_getFRAME(self, *args)

    def getPDFFRAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_getPDFFRAME(self, *args)

    def getXCLIPFRAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_getXCLIPFRAME(self, *args)

    def setANGBASE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setANGBASE(self, *args)

    def setANGDIR(self, *args):
        return _ODA_Drawings.OdDbDatabase_setANGDIR(self, *args)

    def setORTHOMODE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setORTHOMODE(self, *args)

    def setREGENMODE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setREGENMODE(self, *args)

    def setFILLMODE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setFILLMODE(self, *args)

    def setQTEXTMODE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setQTEXTMODE(self, *args)

    def setMIRRTEXT(self, *args):
        return _ODA_Drawings.OdDbDatabase_setMIRRTEXT(self, *args)

    def setLTSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLTSCALE(self, *args)

    def setATTMODE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setATTMODE(self, *args)

    def setTRACEWID(self, *args):
        return _ODA_Drawings.OdDbDatabase_setTRACEWID(self, *args)

    def setCLAYER(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCLAYER(self, *args)

    def setCELTYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCELTYPE(self, *args)

    def setCECOLOR(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCECOLOR(self, *args)

    def setCELTSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCELTSCALE(self, *args)

    def setCHAMFERA(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCHAMFERA(self, *args)

    def setCHAMFERB(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCHAMFERB(self, *args)

    def setCHAMFERC(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCHAMFERC(self, *args)

    def setCHAMFERD(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCHAMFERD(self, *args)

    def setDISPSILH(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDISPSILH(self, *args)

    def setDIMSTYLE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDIMSTYLE(self, *args)

    def setDIMASO(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDIMASO(self, *args)

    def setDIMSHO(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDIMSHO(self, *args)

    def setLUNITS(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLUNITS(self, *args)

    def setLUPREC(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLUPREC(self, *args)

    def setSKETCHINC(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSKETCHINC(self, *args)

    def setFILLETRAD(self, *args):
        return _ODA_Drawings.OdDbDatabase_setFILLETRAD(self, *args)

    def setAUNITS(self, *args):
        return _ODA_Drawings.OdDbDatabase_setAUNITS(self, *args)

    def setAUPREC(self, *args):
        return _ODA_Drawings.OdDbDatabase_setAUPREC(self, *args)

    def setTHICKNESS(self, *args):
        return _ODA_Drawings.OdDbDatabase_setTHICKNESS(self, *args)

    def setSKPOLY(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSKPOLY(self, *args)

    def setPDMODE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPDMODE(self, *args)

    def setPDSIZE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPDSIZE(self, *args)

    def setPLINEWID(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPLINEWID(self, *args)

    def setSPLFRAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSPLFRAME(self, *args)

    def setSPLINETYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSPLINETYPE(self, *args)

    def setSPLINESEGS(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSPLINESEGS(self, *args)

    def setSURFTAB1(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSURFTAB1(self, *args)

    def setSURFTAB2(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSURFTAB2(self, *args)

    def setSURFTYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSURFTYPE(self, *args)

    def setSURFU(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSURFU(self, *args)

    def setSURFV(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSURFV(self, *args)

    def setUSERI1(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUSERI1(self, *args)

    def setUSERI2(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUSERI2(self, *args)

    def setUSERI3(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUSERI3(self, *args)

    def setUSERI4(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUSERI4(self, *args)

    def setUSERI5(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUSERI5(self, *args)

    def setUSERR1(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUSERR1(self, *args)

    def setUSERR2(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUSERR2(self, *args)

    def setUSERR3(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUSERR3(self, *args)

    def setUSERR4(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUSERR4(self, *args)

    def setPDFUNDERLAYSHADEDMODE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPDFUNDERLAYSHADEDMODE(self, *args)

    def setUSERR5(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUSERR5(self, *args)

    def setWORLDVIEW(self, *args):
        return _ODA_Drawings.OdDbDatabase_setWORLDVIEW(self, *args)

    def setSHADEDGE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSHADEDGE(self, *args)

    def setSHADEDIF(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSHADEDIF(self, *args)

    def setMAXACTVP(self, *args):
        return _ODA_Drawings.OdDbDatabase_setMAXACTVP(self, *args)

    def setUNITMODE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUNITMODE(self, *args)

    def setVISRETAIN(self, *args):
        return _ODA_Drawings.OdDbDatabase_setVISRETAIN(self, *args)

    def setPLINEGEN(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPLINEGEN(self, *args)

    def setPSLTSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPSLTSCALE(self, *args)

    def setTREEDEPTH(self, *args):
        return _ODA_Drawings.OdDbDatabase_setTREEDEPTH(self, *args)

    def setCMLSTYLE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCMLSTYLE(self, *args)

    def setCMLJUST(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCMLJUST(self, *args)

    def setCMLSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCMLSCALE(self, *args)

    def setPROXYGRAPHICS(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPROXYGRAPHICS(self, *args)

    def setMEASUREMENT(self, *args):
        return _ODA_Drawings.OdDbDatabase_setMEASUREMENT(self, *args)

    def setCELWEIGHT(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCELWEIGHT(self, *args)

    def setLWDISPLAY(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLWDISPLAY(self, *args)

    def setINSUNITS(self, *args):
        return _ODA_Drawings.OdDbDatabase_setINSUNITS(self, *args)

    def setTSTACKALIGN(self, *args):
        return _ODA_Drawings.OdDbDatabase_setTSTACKALIGN(self, *args)

    def setTSTACKSIZE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setTSTACKSIZE(self, *args)

    def setHYPERLINKBASE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setHYPERLINKBASE(self, *args)

    def setXEDIT(self, *args):
        return _ODA_Drawings.OdDbDatabase_setXEDIT(self, *args)

    def setEXTNAMES(self, *args):
        return _ODA_Drawings.OdDbDatabase_setEXTNAMES(self, *args)

    def setPSVPSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPSVPSCALE(self, *args)

    def setOLESTARTUP(self, *args):
        return _ODA_Drawings.OdDbDatabase_setOLESTARTUP(self, *args)

    def setPELLIPSE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPELLIPSE(self, *args)

    def setISOLINES(self, *args):
        return _ODA_Drawings.OdDbDatabase_setISOLINES(self, *args)

    def setTEXTQLTY(self, *args):
        return _ODA_Drawings.OdDbDatabase_setTEXTQLTY(self, *args)

    def setFACETRES(self, *args):
        return _ODA_Drawings.OdDbDatabase_setFACETRES(self, *args)

    def setPUCSBASE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPUCSBASE(self, *args)

    def setUCSBASE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUCSBASE(self, *args)

    def setSOLIDHIST(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSOLIDHIST(self, *args)

    def setSHOWHIST(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSHOWHIST(self, *args)

    def setLOFTPARAM(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLOFTPARAM(self, *args)

    def setLOFTNORMALS(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLOFTNORMALS(self, *args)

    def setLOFTANG1(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLOFTANG1(self, *args)

    def setLOFTANG2(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLOFTANG2(self, *args)

    def setLOFTMAG1(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLOFTMAG1(self, *args)

    def setLOFTMAG2(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLOFTMAG2(self, *args)

    def setLATITUDE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLATITUDE(self, *args)

    def setLONGITUDE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLONGITUDE(self, *args)

    def setNORTHDIRECTION(self, *args):
        return _ODA_Drawings.OdDbDatabase_setNORTHDIRECTION(self, *args)

    def setTIMEZONE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setTIMEZONE(self, *args)

    def setLIGHTGLYPHDISPLAY(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLIGHTGLYPHDISPLAY(self, *args)

    def setTILEMODELIGHTSYNCH(self, *args):
        return _ODA_Drawings.OdDbDatabase_setTILEMODELIGHTSYNCH(self, *args)

    def setINTERFERECOLOR(self, *args):
        return _ODA_Drawings.OdDbDatabase_setINTERFERECOLOR(self, *args)

    def setINTERFEREOBJVS(self, *args):
        return _ODA_Drawings.OdDbDatabase_setINTERFEREOBJVS(self, *args)

    def setINTERFEREVPVS(self, *args):
        return _ODA_Drawings.OdDbDatabase_setINTERFEREVPVS(self, *args)

    def setDRAGVS(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDRAGVS(self, *args)

    def setCSHADOW(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCSHADOW(self, *args)

    def setSHADOWPLANELOCATION(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSHADOWPLANELOCATION(self, *args)

    def setCAMERADISPLAY(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCAMERADISPLAY(self, *args)

    def setLENSLENGTH(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLENSLENGTH(self, *args)

    def setCAMERAHEIGHT(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCAMERAHEIGHT(self, *args)

    def setSTEPSPERSEC(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSTEPSPERSEC(self, *args)

    def setSTEPSIZE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSTEPSIZE(self, *args)

    def set3DDWFPREC(self, *args):
        return _ODA_Drawings.OdDbDatabase_set3DDWFPREC(self, *args)

    def setCMATERIAL(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCMATERIAL(self, *args)

    def setREALWORLDSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setREALWORLDSCALE(self, *args)

    def setDYNCONSTRAINTDISPLAY(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDYNCONSTRAINTDISPLAY(self, *args)

    def setINSBASE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setINSBASE(self, *args)

    def setEXTMIN(self, *args):
        return _ODA_Drawings.OdDbDatabase_setEXTMIN(self, *args)

    def setEXTMAX(self, *args):
        return _ODA_Drawings.OdDbDatabase_setEXTMAX(self, *args)

    def setLIMMIN(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLIMMIN(self, *args)

    def setLIMMAX(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLIMMAX(self, *args)

    def setMENUNAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_setMENUNAME(self, *args)

    def setELEVATION(self, *args):
        return _ODA_Drawings.OdDbDatabase_setELEVATION(self, *args)

    def setPELEVATION(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPELEVATION(self, *args)

    def setLIMCHECK(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLIMCHECK(self, *args)

    def setUSRTIMER(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUSRTIMER(self, *args)

    def setPINSBASE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPINSBASE(self, *args)

    def setPLIMCHECK(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPLIMCHECK(self, *args)

    def setPEXTMIN(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPEXTMIN(self, *args)

    def setPEXTMAX(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPEXTMAX(self, *args)

    def setPLIMMIN(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPLIMMIN(self, *args)

    def setPLIMMAX(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPLIMMAX(self, *args)

    def setUCSNAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUCSNAME(self, *args)

    def setPUCSNAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPUCSNAME(self, *args)

    def setENDCAPS(self, *args):
        return _ODA_Drawings.OdDbDatabase_setENDCAPS(self, *args)

    def setJOINSTYLE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setJOINSTYLE(self, *args)

    def setSTYLESHEET(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSTYLESHEET(self, *args)

    def setCEPSNTYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCEPSNTYPE(self, *args)

    def setCEPSNID(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCEPSNID(self, *args)

    def setFINGERPRINTGUID(self, *args):
        return _ODA_Drawings.OdDbDatabase_setFINGERPRINTGUID(self, *args)

    def setVERSIONGUID(self, *args):
        return _ODA_Drawings.OdDbDatabase_setVERSIONGUID(self, *args)

    def setPUCSORTHOVIEW(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPUCSORTHOVIEW(self, *args)

    def setPUCSORGTOP(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPUCSORGTOP(self, *args)

    def setPUCSORGBOTTOM(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPUCSORGBOTTOM(self, *args)

    def setPUCSORGLEFT(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPUCSORGLEFT(self, *args)

    def setPUCSORGRIGHT(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPUCSORGRIGHT(self, *args)

    def setPUCSORGFRONT(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPUCSORGFRONT(self, *args)

    def setPUCSORGBACK(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPUCSORGBACK(self, *args)

    def setUCSORTHOVIEW(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUCSORTHOVIEW(self, *args)

    def setUCSORGTOP(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUCSORGTOP(self, *args)

    def setUCSORGBOTTOM(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUCSORGBOTTOM(self, *args)

    def setUCSORGLEFT(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUCSORGLEFT(self, *args)

    def setUCSORGRIGHT(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUCSORGRIGHT(self, *args)

    def setUCSORGFRONT(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUCSORGFRONT(self, *args)

    def setUCSORGBACK(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUCSORGBACK(self, *args)

    def setDGNFRAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDGNFRAME(self, *args)

    def setDBCSTATE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDBCSTATE(self, *args)

    def setINTERSECTIONCOLOR(self, *args):
        return _ODA_Drawings.OdDbDatabase_setINTERSECTIONCOLOR(self, *args)

    def setINTERSECTIONDISPLAY(self, *args):
        return _ODA_Drawings.OdDbDatabase_setINTERSECTIONDISPLAY(self, *args)

    def setHALOGAP(self, *args):
        return _ODA_Drawings.OdDbDatabase_setHALOGAP(self, *args)

    def setOBSCUREDCOLOR(self, *args):
        return _ODA_Drawings.OdDbDatabase_setOBSCUREDCOLOR(self, *args)

    def setOBSCUREDLTYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setOBSCUREDLTYPE(self, *args)

    def setINDEXCTL(self, *args):
        return _ODA_Drawings.OdDbDatabase_setINDEXCTL(self, *args)

    def setPROJECTNAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPROJECTNAME(self, *args)

    def setSORTENTS(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSORTENTS(self, *args)

    def setDIMASSOC(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDIMASSOC(self, *args)

    def setHIDETEXT(self, *args):
        return _ODA_Drawings.OdDbDatabase_setHIDETEXT(self, *args)

    def setPSOLWIDTH(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPSOLWIDTH(self, *args)

    def setPSOLHEIGHT(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPSOLHEIGHT(self, *args)

    def setCTABLESTYLE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCTABLESTYLE(self, *args)

    def setANNOALLVISIBLE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setANNOALLVISIBLE(self, *args)

    def setANNOTATIVEDWG(self, *args):
        return _ODA_Drawings.OdDbDatabase_setANNOTATIVEDWG(self, *args)

    def setMSLTSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setMSLTSCALE(self, *args)

    def setLAYEREVAL(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLAYEREVAL(self, *args)

    def setLAYERNOTIFY(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLAYERNOTIFY(self, *args)

    def setLIGHTINGUNITS(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLIGHTINGUNITS(self, *args)

    def setLIGHTSINBLOCKS(self, *args):
        return _ODA_Drawings.OdDbDatabase_setLIGHTSINBLOCKS(self, *args)

    def setDRAWORDERCTL(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDRAWORDERCTL(self, *args)

    def setHPINHERIT(self, *args):
        return _ODA_Drawings.OdDbDatabase_setHPINHERIT(self, *args)

    def setHPORIGIN(self, *args):
        return _ODA_Drawings.OdDbDatabase_setHPORIGIN(self, *args)

    def setFIELDEVAL(self, *args):
        return _ODA_Drawings.OdDbDatabase_setFIELDEVAL(self, *args)

    def setMSOLESCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setMSOLESCALE(self, *args)

    def setUPDATETHUMBNAIL(self, *args):
        return _ODA_Drawings.OdDbDatabase_setUPDATETHUMBNAIL(self, *args)

    def setDXEVAL(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDXEVAL(self, *args)

    def setGEOLATLONGFORMAT(self, *args):
        return _ODA_Drawings.OdDbDatabase_setGEOLATLONGFORMAT(self, *args)

    def setGEOMARKERVISIBILITY(self, *args):
        return _ODA_Drawings.OdDbDatabase_setGEOMARKERVISIBILITY(self, *args)

    def setPREVIEWTYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPREVIEWTYPE(self, *args)

    def setEXPORTMODELSPACE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setEXPORTMODELSPACE(self, *args)

    def setEXPORTPAPERSPACE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setEXPORTPAPERSPACE(self, *args)

    def setEXPORTPAGESETUP(self, *args):
        return _ODA_Drawings.OdDbDatabase_setEXPORTPAGESETUP(self, *args)

    def setMESHTYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setMESHTYPE(self, *args)

    def setSKYSTATUS(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSKYSTATUS(self, *args)

    def setVSACURVATUREHIGH(self, *args):
        return _ODA_Drawings.OdDbDatabase_setVSACURVATUREHIGH(self, *args)

    def setVSACURVATURELOW(self, *args):
        return _ODA_Drawings.OdDbDatabase_setVSACURVATURELOW(self, *args)

    def setVSACURVATURETYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setVSACURVATURETYPE(self, *args)

    def setVSADRAFTANGLEHIGH(self, *args):
        return _ODA_Drawings.OdDbDatabase_setVSADRAFTANGLEHIGH(self, *args)

    def setVSADRAFTANGLELOW(self, *args):
        return _ODA_Drawings.OdDbDatabase_setVSADRAFTANGLELOW(self, *args)

    def setVSAZEBRACOLOR1(self, *args):
        return _ODA_Drawings.OdDbDatabase_setVSAZEBRACOLOR1(self, *args)

    def setVSAZEBRACOLOR2(self, *args):
        return _ODA_Drawings.OdDbDatabase_setVSAZEBRACOLOR2(self, *args)

    def setVSAZEBRADIRECTION(self, *args):
        return _ODA_Drawings.OdDbDatabase_setVSAZEBRADIRECTION(self, *args)

    def setVSAZEBRASIZE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setVSAZEBRASIZE(self, *args)

    def setVSAZEBRATYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setVSAZEBRATYPE(self, *args)

    def setHPLAYER(self, *args):
        return _ODA_Drawings.OdDbDatabase_setHPLAYER(self, *args)

    def setMIRRHATCH(self, *args):
        return _ODA_Drawings.OdDbDatabase_setMIRRHATCH(self, *args)

    def setHPTRANSPARENCY(self, *args):
        return _ODA_Drawings.OdDbDatabase_setHPTRANSPARENCY(self, *args)

    def setHPCOLOR(self, *args):
        return _ODA_Drawings.OdDbDatabase_setHPCOLOR(self, *args)

    def setHPBACKGROUNDCOLOR(self, *args):
        return _ODA_Drawings.OdDbDatabase_setHPBACKGROUNDCOLOR(self, *args)

    def setCETRANSPARENCY(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCETRANSPARENCY(self, *args)

    def setCVIEWDETAILSTYLE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCVIEWDETAILSTYLE(self, *args)

    def setCVIEWSECTIONSTYLE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCVIEWSECTIONSTYLE(self, *args)

    def setWIPEOUTFRAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_setWIPEOUTFRAME(self, *args)

    def setPOINTCLOUDCLIPFRAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPOINTCLOUDCLIPFRAME(self, *args)

    def setMLEADERSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setMLEADERSCALE(self, *args)

    def setVIEWUPDATEAUTO(self, *args):
        return _ODA_Drawings.OdDbDatabase_setVIEWUPDATEAUTO(self, *args)

    def setGEOMARKPOSITIONSIZE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setGEOMARKPOSITIONSIZE(self, *args)

    def setPOINTCLOUDPOINTSIZE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPOINTCLOUDPOINTSIZE(self, *args)

    def setDIMLAYER(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDIMLAYER(self, *args)

    def setSECTIONOFFSETINC(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSECTIONOFFSETINC(self, *args)

    def setSECTIONTHICKNESSINC(self, *args):
        return _ODA_Drawings.OdDbDatabase_setSECTIONTHICKNESSINC(self, *args)

    def setXREFOVERRIDE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setXREFOVERRIDE(self, *args)

    def setCENTERCROSSGAP(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCENTERCROSSGAP(self, *args)

    def setCENTERCROSSSIZE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCENTERCROSSSIZE(self, *args)

    def setCENTEREXE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCENTEREXE(self, *args)

    def setCENTERLAYER(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCENTERLAYER(self, *args)

    def setCENTERLTSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCENTERLTSCALE(self, *args)

    def setCENTERLTYPE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCENTERLTYPE(self, *args)

    def setCENTERLTYPEFILE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCENTERLTYPEFILE(self, *args)

    def setCENTERMARKEXE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCENTERMARKEXE(self, *args)

    def setCANNOSCALE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCANNOSCALE(self, *args)

    def setCMLEADERSTYLE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setCMLEADERSTYLE(self, *args)

    def setTEXTSIZE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setTEXTSIZE(self, *args)

    def setTEXTSTYLE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setTEXTSTYLE(self, *args)

    def setTILEMODE(self, *args):
        return _ODA_Drawings.OdDbDatabase_setTILEMODE(self, *args)

    def setDWFFRAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDWFFRAME(self, *args)

    def setFRAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_setFRAME(self, *args)

    def setPDFFRAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_setPDFFRAME(self, *args)

    def setXCLIPFRAME(self, *args):
        return _ODA_Drawings.OdDbDatabase_setXCLIPFRAME(self, *args)

    def dimadec(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimadec(self, *args)

    def setDimadec(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimadec(self, *args)

    def dimalt(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimalt(self, *args)

    def setDimalt(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimalt(self, *args)

    def dimaltd(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimaltd(self, *args)

    def setDimaltd(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimaltd(self, *args)

    def dimaltf(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimaltf(self, *args)

    def setDimaltf(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimaltf(self, *args)

    def dimaltrnd(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimaltrnd(self, *args)

    def setDimaltrnd(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimaltrnd(self, *args)

    def dimalttd(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimalttd(self, *args)

    def setDimalttd(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimalttd(self, *args)

    def dimalttz(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimalttz(self, *args)

    def setDimalttz(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimalttz(self, *args)

    def dimaltu(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimaltu(self, *args)

    def setDimaltu(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimaltu(self, *args)

    def dimaltz(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimaltz(self, *args)

    def setDimaltz(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimaltz(self, *args)

    def dimapost(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimapost(self, *args)

    def setDimapost(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimapost(self, *args)

    def dimasz(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimasz(self, *args)

    def setDimasz(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimasz(self, *args)

    def dimaunit(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimaunit(self, *args)

    def setDimaunit(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimaunit(self, *args)

    def dimazin(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimazin(self, *args)

    def setDimazin(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimazin(self, *args)

    def dimcen(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimcen(self, *args)

    def setDimcen(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimcen(self, *args)

    def dimclrd(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimclrd(self, *args)

    def setDimclrd(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimclrd(self, *args)

    def dimclre(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimclre(self, *args)

    def setDimclre(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimclre(self, *args)

    def dimclrt(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimclrt(self, *args)

    def setDimclrt(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimclrt(self, *args)

    def dimdec(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimdec(self, *args)

    def setDimdec(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimdec(self, *args)

    def dimdle(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimdle(self, *args)

    def setDimdle(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimdle(self, *args)

    def dimdli(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimdli(self, *args)

    def setDimdli(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimdli(self, *args)

    def dimdsep(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimdsep(self, *args)

    def setDimdsep(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimdsep(self, *args)

    def dimexe(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimexe(self, *args)

    def setDimexe(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimexe(self, *args)

    def dimexo(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimexo(self, *args)

    def setDimexo(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimexo(self, *args)

    def dimfrac(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimfrac(self, *args)

    def setDimfrac(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimfrac(self, *args)

    def dimgap(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimgap(self, *args)

    def setDimgap(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimgap(self, *args)

    def dimjust(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimjust(self, *args)

    def setDimjust(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimjust(self, *args)

    def dimldrblk(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimldrblk(self, *args)

    def setDimldrblk(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimldrblk(self, *args)

    def dimlfac(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimlfac(self, *args)

    def setDimlfac(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimlfac(self, *args)

    def dimlim(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimlim(self, *args)

    def setDimlim(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimlim(self, *args)

    def dimlunit(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimlunit(self, *args)

    def setDimlunit(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimlunit(self, *args)

    def dimlwd(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimlwd(self, *args)

    def setDimlwd(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimlwd(self, *args)

    def dimlwe(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimlwe(self, *args)

    def setDimlwe(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimlwe(self, *args)

    def dimpost(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimpost(self, *args)

    def setDimpost(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimpost(self, *args)

    def dimrnd(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimrnd(self, *args)

    def setDimrnd(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimrnd(self, *args)

    def dimsah(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimsah(self, *args)

    def setDimsah(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimsah(self, *args)

    def dimscale(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimscale(self, *args)

    def setDimscale(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimscale(self, *args)

    def dimsd1(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimsd1(self, *args)

    def setDimsd1(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimsd1(self, *args)

    def dimsd2(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimsd2(self, *args)

    def setDimsd2(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimsd2(self, *args)

    def dimse1(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimse1(self, *args)

    def setDimse1(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimse1(self, *args)

    def dimse2(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimse2(self, *args)

    def setDimse2(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimse2(self, *args)

    def dimtad(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtad(self, *args)

    def setDimtad(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtad(self, *args)

    def dimtdec(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtdec(self, *args)

    def setDimtdec(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtdec(self, *args)

    def dimtfac(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtfac(self, *args)

    def setDimtfac(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtfac(self, *args)

    def dimtih(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtih(self, *args)

    def setDimtih(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtih(self, *args)

    def dimtm(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtm(self, *args)

    def setDimtm(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtm(self, *args)

    def dimtoh(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtoh(self, *args)

    def setDimtoh(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtoh(self, *args)

    def dimtol(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtol(self, *args)

    def setDimtol(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtol(self, *args)

    def dimtolj(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtolj(self, *args)

    def setDimtolj(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtolj(self, *args)

    def dimtp(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtp(self, *args)

    def setDimtp(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtp(self, *args)

    def dimtsz(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtsz(self, *args)

    def setDimtsz(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtsz(self, *args)

    def dimtvp(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtvp(self, *args)

    def setDimtvp(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtvp(self, *args)

    def dimtxsty(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtxsty(self, *args)

    def setDimtxsty(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtxsty(self, *args)

    def dimtxt(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtxt(self, *args)

    def setDimtxt(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtxt(self, *args)

    def dimtzin(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtzin(self, *args)

    def setDimtzin(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtzin(self, *args)

    def dimupt(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimupt(self, *args)

    def setDimupt(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimupt(self, *args)

    def dimzin(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimzin(self, *args)

    def setDimzin(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimzin(self, *args)

    def dimfxl(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimfxl(self, *args)

    def setDimfxl(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimfxl(self, *args)

    def dimfxlon(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimfxlon(self, *args)

    def setDimfxlon(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimfxlon(self, *args)

    def dimjogang(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimjogang(self, *args)

    def setDimjogang(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimjogang(self, *args)

    def dimtfill(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtfill(self, *args)

    def setDimtfill(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtfill(self, *args)

    def dimtfillclr(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtfillclr(self, *args)

    def setDimtfillclr(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtfillclr(self, *args)

    def dimarcsym(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimarcsym(self, *args)

    def setDimarcsym(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimarcsym(self, *args)

    def dimltype(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimltype(self, *args)

    def setDimltype(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimltype(self, *args)

    def dimltex1(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimltex1(self, *args)

    def setDimltex1(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimltex1(self, *args)

    def dimltex2(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimltex2(self, *args)

    def setDimltex2(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimltex2(self, *args)

    def dimtxtdirection(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtxtdirection(self, *args)

    def setDimtxtdirection(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtxtdirection(self, *args)

    def dimmzf(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimmzf(self, *args)

    def setDimmzf(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimmzf(self, *args)

    def dimmzs(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimmzs(self, *args)

    def setDimmzs(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimmzs(self, *args)

    def dimaltmzf(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimaltmzf(self, *args)

    def setDimaltmzf(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimaltmzf(self, *args)

    def dimaltmzs(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimaltmzs(self, *args)

    def setDimaltmzs(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimaltmzs(self, *args)

    def dimblk(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimblk(self, *args)

    def setDimblk(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimblk(self, *args)

    def dimblk1(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimblk1(self, *args)

    def setDimblk1(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimblk1(self, *args)

    def dimblk2(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimblk2(self, *args)

    def setDimblk2(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimblk2(self, *args)

    def dimatfit(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimatfit(self, *args)

    def setDimatfit(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimatfit(self, *args)

    def dimsoxd(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimsoxd(self, *args)

    def setDimsoxd(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimsoxd(self, *args)

    def dimtix(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtix(self, *args)

    def setDimtix(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtix(self, *args)

    def dimtmove(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtmove(self, *args)

    def setDimtmove(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtmove(self, *args)

    def dimtofl(self, *args):
        return _ODA_Drawings.OdDbDatabase_dimtofl(self, *args)

    def setDimtofl(self, *args):
        return _ODA_Drawings.OdDbDatabase_setDimtofl(self, *args)

# Register OdDbDatabase in _ODA_Drawings:
_ODA_Drawings.OdDbDatabase_swigregister(OdDbDatabase)

def OdDbDatabase_cast(*args):
    return _ODA_Drawings.OdDbDatabase_cast(*args)

def OdDbDatabase_desc(*args):
    return _ODA_Drawings.OdDbDatabase_desc(*args)

def OdDbDatabase_createObject(*args):
    return _ODA_Drawings.OdDbDatabase_createObject(*args)

def OdDbDatabase_isValidLineWeight(*args):
    return _ODA_Drawings.OdDbDatabase_isValidLineWeight(*args)

def OdDbDatabase_getNearestLineWeight(*args):
    return _ODA_Drawings.OdDbDatabase_getNearestLineWeight(*args)


def getGapsAmount(*args):
    return _ODA_Drawings.getGapsAmount(*args)

def getClassByName(*args):
    return _ODA_Drawings.getClassByName(*args)

def validateDrawingSignature(*args):
    return _ODA_Drawings.validateDrawingSignature(*args)

def odDbGetPreviewBitmap(*args):
    return _ODA_Drawings.odDbGetPreviewBitmap(*args)

def odDbSetDWGCODEPAGE(*args):
    return _ODA_Drawings.odDbSetDWGCODEPAGE(*args)

def odDbSetTDUCREATE(*args):
    return _ODA_Drawings.odDbSetTDUCREATE(*args)

def odDbSetTDUUPDATE(*args):
    return _ODA_Drawings.odDbSetTDUUPDATE(*args)

def odDbSetTDINDWG(*args):
    return _ODA_Drawings.odDbSetTDINDWG(*args)

def odDbSetTDUSRTIMER(*args):
    return _ODA_Drawings.odDbSetTDUSRTIMER(*args)

def odDbSetPSTYLEMODE(*args):
    return _ODA_Drawings.odDbSetPSTYLEMODE(*args)

def odDbSetUCSORG(*args):
    return _ODA_Drawings.odDbSetUCSORG(*args)

def odDbSetUCSXDIR(*args):
    return _ODA_Drawings.odDbSetUCSXDIR(*args)

def odDbSetUCSYDIR(*args):
    return _ODA_Drawings.odDbSetUCSYDIR(*args)

def odDbSetPUCSORG(*args):
    return _ODA_Drawings.odDbSetPUCSORG(*args)

def odDbSetPUCSXDIR(*args):
    return _ODA_Drawings.odDbSetPUCSXDIR(*args)

def odDbSetPUCSYDIR(*args):
    return _ODA_Drawings.odDbSetPUCSYDIR(*args)

def odDbSaveLineTypeFile(*args):
    return _ODA_Drawings.odDbSaveLineTypeFile(*args)

def odDbLoadMlineStyleFile(*args):
    return _ODA_Drawings.odDbLoadMlineStyleFile(*args)

def odDbSaveMlineStyleFile(*args):
    return _ODA_Drawings.odDbSaveMlineStyleFile(*args)

def DwgVersionToStr(*args):
    return _ODA_Drawings.DwgVersionToStr(*args)

def DwgVersionFromStr(*args):
    return _ODA_Drawings.DwgVersionFromStr(*args)

def odDbGetDataLinkManager(*args):
    return _ODA_Drawings.odDbGetDataLinkManager(*args)
class OdMTLoadReactor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def shouldInterrupt(self, *args):
        return _ODA_Drawings.OdMTLoadReactor_shouldInterrupt(self, *args)

    def insertDetected(self, *args):
        return _ODA_Drawings.OdMTLoadReactor_insertDetected(self, *args)

    def accessMutex(self, *args):
        return _ODA_Drawings.OdMTLoadReactor_accessMutex(self, *args)

    def __init__(self, *args):
        _ODA_Drawings.OdMTLoadReactor_swiginit(self, _ODA_Drawings.new_OdMTLoadReactor(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdMTLoadReactor

# Register OdMTLoadReactor in _ODA_Drawings:
_ODA_Drawings.OdMTLoadReactor_swigregister(OdMTLoadReactor)


def oddbDwgClassMapDesc(*args):
    return _ODA_Drawings.oddbDwgClassMapDesc(*args)
kOdDbDwgClassMapSize = _ODA_Drawings.kOdDbDwgClassMapSize
kDwgId_OdDbProxyObject = _ODA_Drawings.kDwgId_OdDbProxyObject
kDwgId_OdDbProxyEntity = _ODA_Drawings.kDwgId_OdDbProxyEntity
kDwgId_OdDbVertex = _ODA_Drawings.kDwgId_OdDbVertex
kDwgId_OdDbDimension = _ODA_Drawings.kDwgId_OdDbDimension
kOdDbDwgClassMapSize_WithProxy = _ODA_Drawings.kOdDbDwgClassMapSize_WithProxy
kNoSave = _ODA_Drawings.kNoSave
kSaveAsR12 = _ODA_Drawings.kSaveAsR12
kSaveAsR13 = _ODA_Drawings.kSaveAsR13
kSaveAsR14 = _ODA_Drawings.kSaveAsR14
OdDb_Planarity_kNonPlanar = _ODA_Drawings.OdDb_Planarity_kNonPlanar
OdDb_Planarity_kPlanar = _ODA_Drawings.OdDb_Planarity_kPlanar
OdDb_Planarity_kLinear = _ODA_Drawings.OdDb_Planarity_kLinear
class OdDbEntity(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbEntity_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbEntity_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbEntity_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbEntity_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbEntity_createObject(*args)

    def blockId(self, *args):
        return _ODA_Drawings.OdDbEntity_blockId(self, *args)

    def color(self, *args):
        return _ODA_Drawings.OdDbEntity_color(self, *args)

    def setColor(self, *args):
        return _ODA_Drawings.OdDbEntity_setColor(self, *args)

    def colorIndex(self, *args):
        return _ODA_Drawings.OdDbEntity_colorIndex(self, *args)

    def entityColor(self, *args):
        return _ODA_Drawings.OdDbEntity_entityColor(self, *args)

    def setColorIndex(self, *args):
        return _ODA_Drawings.OdDbEntity_setColorIndex(self, *args)

    def colorId(self, *args):
        return _ODA_Drawings.OdDbEntity_colorId(self, *args)

    def setColorId(self, *args):
        return _ODA_Drawings.OdDbEntity_setColorId(self, *args)

    def transparency(self, *args):
        return _ODA_Drawings.OdDbEntity_transparency(self, *args)

    def setTransparency(self, *args):
        return _ODA_Drawings.OdDbEntity_setTransparency(self, *args)

    def plotStyleName(self, *args):
        return _ODA_Drawings.OdDbEntity_plotStyleName(self, *args)

    def getPlotStyleNameId(self, *args):
        return _ODA_Drawings.OdDbEntity_getPlotStyleNameId(self, *args)

    def setPlotStyleName(self, *args):
        return _ODA_Drawings.OdDbEntity_setPlotStyleName(self, *args)

    def layer(self, *args):
        return _ODA_Drawings.OdDbEntity_layer(self, *args)

    def layerId(self, *args):
        return _ODA_Drawings.OdDbEntity_layerId(self, *args)

    def setLayer(self, *args):
        return _ODA_Drawings.OdDbEntity_setLayer(self, *args)

    def linetype(self, *args):
        return _ODA_Drawings.OdDbEntity_linetype(self, *args)

    def linetypeId(self, *args):
        return _ODA_Drawings.OdDbEntity_linetypeId(self, *args)

    def setLinetype(self, *args):
        return _ODA_Drawings.OdDbEntity_setLinetype(self, *args)

    def material(self, *args):
        return _ODA_Drawings.OdDbEntity_material(self, *args)

    def materialId(self, *args):
        return _ODA_Drawings.OdDbEntity_materialId(self, *args)

    def setMaterial(self, *args):
        return _ODA_Drawings.OdDbEntity_setMaterial(self, *args)
    kFullVisualStyle = _ODA_Drawings.OdDbEntity_kFullVisualStyle
    kFaceVisualStyle = _ODA_Drawings.OdDbEntity_kFaceVisualStyle
    kEdgeVisualStyle = _ODA_Drawings.OdDbEntity_kEdgeVisualStyle

    def visualStyleId(self, *args):
        return _ODA_Drawings.OdDbEntity_visualStyleId(self, *args)

    def setVisualStyle(self, *args):
        return _ODA_Drawings.OdDbEntity_setVisualStyle(self, *args)

    def materialMapper(self, *args):
        return _ODA_Drawings.OdDbEntity_materialMapper(self, *args)

    def setMaterialMapper(self, *args):
        return _ODA_Drawings.OdDbEntity_setMaterialMapper(self, *args)

    def linetypeScale(self, *args):
        return _ODA_Drawings.OdDbEntity_linetypeScale(self, *args)

    def setLinetypeScale(self, *args):
        return _ODA_Drawings.OdDbEntity_setLinetypeScale(self, *args)

    def visibility(self, *args):
        return _ODA_Drawings.OdDbEntity_visibility(self, *args)

    def setVisibility(self, *args):
        return _ODA_Drawings.OdDbEntity_setVisibility(self, *args)

    def tempVisibility(self, *args):
        return _ODA_Drawings.OdDbEntity_tempVisibility(self, *args)

    def setTempVisibility(self, *args):
        return _ODA_Drawings.OdDbEntity_setTempVisibility(self, *args)

    def lineWeight(self, *args):
        return _ODA_Drawings.OdDbEntity_lineWeight(self, *args)

    def setLineWeight(self, *args):
        return _ODA_Drawings.OdDbEntity_setLineWeight(self, *args)

    def castShadows(self, *args):
        return _ODA_Drawings.OdDbEntity_castShadows(self, *args)

    def setCastShadows(self, *args):
        return _ODA_Drawings.OdDbEntity_setCastShadows(self, *args)

    def receiveShadows(self, *args):
        return _ODA_Drawings.OdDbEntity_receiveShadows(self, *args)

    def setReceiveShadows(self, *args):
        return _ODA_Drawings.OdDbEntity_setReceiveShadows(self, *args)

    def collisionType(self, *args):
        return _ODA_Drawings.OdDbEntity_collisionType(self, *args)

    def setPropertiesFrom(self, *args):
        return _ODA_Drawings.OdDbEntity_setPropertiesFrom(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbEntity_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbEntity_getPlane(self, *args)

    def subHandOverTo(self, *args):
        return _ODA_Drawings.OdDbEntity_subHandOverTo(self, *args)

    def transformBy(self, *args):
        return _ODA_Drawings.OdDbEntity_transformBy(self, *args)

    def getTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbEntity_getTransformedCopy(self, *args)

    def explode(self, *args):
        return _ODA_Drawings.OdDbEntity_explode(self, *args)

    def explodeToBlock(self, *args):
        return _ODA_Drawings.OdDbEntity_explodeToBlock(self, *args)

    def explodeGeometry(self, *args):
        return _ODA_Drawings.OdDbEntity_explodeGeometry(self, *args)

    def explodeGeometryToBlock(self, *args):
        return _ODA_Drawings.OdDbEntity_explodeGeometryToBlock(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbEntity_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbEntity_subViewportDraw(self, *args)

    def setDatabaseDefaults(self, *args):
        return _ODA_Drawings.OdDbEntity_setDatabaseDefaults(self, *args)

    def subSetDatabaseDefaults(self, *args):
        return _ODA_Drawings.OdDbEntity_subSetDatabaseDefaults(self, *args)

    def applyPartialUndo(self, *args):
        return _ODA_Drawings.OdDbEntity_applyPartialUndo(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbEntity_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbEntity_dwgOutFields(self, *args)

    def appendToOwner(self, *args):
        return _ODA_Drawings.OdDbEntity_appendToOwner(self, *args)

    def dxfIn(self, *args):
        return _ODA_Drawings.OdDbEntity_dxfIn(self, *args)

    def dxfOut(self, *args):
        return _ODA_Drawings.OdDbEntity_dxfOut(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbEntity_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbEntity_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbEntity_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbEntity_dxfOutFields_R12(self, *args)

    def drawable(self, *args):
        return _ODA_Drawings.OdDbEntity_drawable(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbEntity_subSetAttributes(self, *args)

    def subList(self, *args):
        return _ODA_Drawings.OdDbEntity_subList(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbEntity_subGetClassID(self, *args)

    def subSwapIdWith(self, *args):
        return _ODA_Drawings.OdDbEntity_subSwapIdWith(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbEntity_subErase(self, *args)

    def subOpen(self, *args):
        return _ODA_Drawings.OdDbEntity_subOpen(self, *args)

    def recordGraphicsModified(self, *args):
        return _ODA_Drawings.OdDbEntity_recordGraphicsModified(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbEntity_copyFrom(self, *args)

    def list(self, *args):
        return _ODA_Drawings.OdDbEntity_list(self, *args)

    def getGeomExtents(self, *args):
        return _ODA_Drawings.OdDbEntity_getGeomExtents(self, *args)

    def highlight(self, *args):
        return _ODA_Drawings.OdDbEntity_highlight(self, *args)

    def getOsnapPoints(self, *args):
        return _ODA_Drawings.OdDbEntity_getOsnapPoints(self, *args)

    def isContentSnappable(self, *args):
        return _ODA_Drawings.OdDbEntity_isContentSnappable(self, *args)

    def getGripPoints(self, *args):
        return _ODA_Drawings.OdDbEntity_getGripPoints(self, *args)

    def moveGripPointsAt(self, *args):
        return _ODA_Drawings.OdDbEntity_moveGripPointsAt(self, *args)

    def getStretchPoints(self, *args):
        return _ODA_Drawings.OdDbEntity_getStretchPoints(self, *args)

    def moveStretchPointsAt(self, *args):
        return _ODA_Drawings.OdDbEntity_moveStretchPointsAt(self, *args)

    def dragStatus(self, *args):
        return _ODA_Drawings.OdDbEntity_dragStatus(self, *args)

    def gripStatus(self, *args):
        return _ODA_Drawings.OdDbEntity_gripStatus(self, *args)

    def cloneMeForDragging(self, *args):
        return _ODA_Drawings.OdDbEntity_cloneMeForDragging(self, *args)

    def hideMeForDragging(self, *args):
        return _ODA_Drawings.OdDbEntity_hideMeForDragging(self, *args)

    def saveAs(self, *args):
        return _ODA_Drawings.OdDbEntity_saveAs(self, *args)

    def getCompoundObjectTransform(self, *args):
        return _ODA_Drawings.OdDbEntity_getCompoundObjectTransform(self, *args)

    def intersectWith(self, *args):
        return _ODA_Drawings.OdDbEntity_intersectWith(self, *args)

    def boundingBoxIntersectWith(self, *args):
        return _ODA_Drawings.OdDbEntity_boundingBoxIntersectWith(self, *args)

    def getSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDbEntity_getSubentPathsAtGsMarker(self, *args)

    def getGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbEntity_getGsMarkersAtSubentPath(self, *args)

    def getGripPointsAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbEntity_getGripPointsAtSubentPath(self, *args)

    def moveGripPointsAtSubentPaths(self, *args):
        return _ODA_Drawings.OdDbEntity_moveGripPointsAtSubentPaths(self, *args)

    def deleteSubentPaths(self, *args):
        return _ODA_Drawings.OdDbEntity_deleteSubentPaths(self, *args)

    def addSubentPaths(self, *args):
        return _ODA_Drawings.OdDbEntity_addSubentPaths(self, *args)

    def subentPtr(self, *args):
        return _ODA_Drawings.OdDbEntity_subentPtr(self, *args)

    def transformSubentPathsBy(self, *args):
        return _ODA_Drawings.OdDbEntity_transformSubentPathsBy(self, *args)

    def getSubentClassId(self, *args):
        return _ODA_Drawings.OdDbEntity_getSubentClassId(self, *args)

    def getSubentPathGeomExtents(self, *args):
        return _ODA_Drawings.OdDbEntity_getSubentPathGeomExtents(self, *args)

    def subentGripStatus(self, *args):
        return _ODA_Drawings.OdDbEntity_subentGripStatus(self, *args)

    def getEcs(self, *args):
        return _ODA_Drawings.OdDbEntity_getEcs(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbEntity_subTransformBy(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbEntity_subGetTransformedCopy(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbEntity_subExplode(self, *args)

    def subGetCompoundObjectTransform(self, *args):
        return _ODA_Drawings.OdDbEntity_subGetCompoundObjectTransform(self, *args)

    def subCloneMeForDragging(self, *args):
        return _ODA_Drawings.OdDbEntity_subCloneMeForDragging(self, *args)

    def subHideMeForDragging(self, *args):
        return _ODA_Drawings.OdDbEntity_subHideMeForDragging(self, *args)

    def subGripStatus(self, *args):
        return _ODA_Drawings.OdDbEntity_subGripStatus(self, *args)

    def subGetOsnapPoints(self, *args):
        return _ODA_Drawings.OdDbEntity_subGetOsnapPoints(self, *args)

    def subIsContentSnappable(self, *args):
        return _ODA_Drawings.OdDbEntity_subIsContentSnappable(self, *args)

    def subGetGripPoints(self, *args):
        return _ODA_Drawings.OdDbEntity_subGetGripPoints(self, *args)

    def subMoveGripPointsAt(self, *args):
        return _ODA_Drawings.OdDbEntity_subMoveGripPointsAt(self, *args)

    def subGetStretchPoints(self, *args):
        return _ODA_Drawings.OdDbEntity_subGetStretchPoints(self, *args)

    def subMoveStretchPointsAt(self, *args):
        return _ODA_Drawings.OdDbEntity_subMoveStretchPointsAt(self, *args)

    def subIntersectWith(self, *args):
        return _ODA_Drawings.OdDbEntity_subIntersectWith(self, *args)

    def subHighlight(self, *args):
        return _ODA_Drawings.OdDbEntity_subHighlight(self, *args)

    def subVisibility(self, *args):
        return _ODA_Drawings.OdDbEntity_subVisibility(self, *args)

    def subSetVisibility(self, *args):
        return _ODA_Drawings.OdDbEntity_subSetVisibility(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbEntity_subGetGeomExtents(self, *args)

    def subDeleteSubentPaths(self, *args):
        return _ODA_Drawings.OdDbEntity_subDeleteSubentPaths(self, *args)

    def subAddSubentPaths(self, *args):
        return _ODA_Drawings.OdDbEntity_subAddSubentPaths(self, *args)

    def subMoveGripPointsAtSubentPaths(self, *args):
        return _ODA_Drawings.OdDbEntity_subMoveGripPointsAtSubentPaths(self, *args)

    def subGetGripPointsAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbEntity_subGetGripPointsAtSubentPath(self, *args)

    def subGetSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDbEntity_subGetSubentPathsAtGsMarker(self, *args)

    def subGetGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbEntity_subGetGsMarkersAtSubentPath(self, *args)

    def subSubentPtr(self, *args):
        return _ODA_Drawings.OdDbEntity_subSubentPtr(self, *args)

    def subTransformSubentPathsBy(self, *args):
        return _ODA_Drawings.OdDbEntity_subTransformSubentPathsBy(self, *args)

    def subGetSubentClassId(self, *args):
        return _ODA_Drawings.OdDbEntity_subGetSubentClassId(self, *args)

    def subGetSubentPathGeomExtents(self, *args):
        return _ODA_Drawings.OdDbEntity_subGetSubentPathGeomExtents(self, *args)

    def subSubentGripStatus(self, *args):
        return _ODA_Drawings.OdDbEntity_subSubentGripStatus(self, *args)

    @staticmethod
    def __new(*args):
        return _ODA_Drawings.OdDbEntity___new(*args)

    def __init__(self):
        this = _ODA_Drawings.OdDbEntity___new(self)
        try:
          self.this.append(this)
        except:
          self.this = this

    __swig_destroy__ = _ODA_Drawings.delete_OdDbEntity
    def __disown__(self):
        self.this.disown()
        _ODA_Drawings.disown_OdDbEntity(self)
        return weakref.proxy(self)

    def subViewportDrawLogicalFlags(self, *args):
        return _ODA_Drawings.OdDbEntity_subViewportDrawLogicalFlags(self, *args)

    def subRegenSupportFlags(self, *args):
        return _ODA_Drawings.OdDbEntity_subRegenSupportFlags(self, *args)

# Register OdDbEntity in _ODA_Drawings:
_ODA_Drawings.OdDbEntity_swigregister(OdDbEntity)

def OdDbEntity_cast(*args):
    return _ODA_Drawings.OdDbEntity_cast(*args)

def OdDbEntity_desc(*args):
    return _ODA_Drawings.OdDbEntity_desc(*args)

def OdDbEntity_createObject(*args):
    return _ODA_Drawings.OdDbEntity_createObject(*args)

def OdDbEntity___new(*args):
    return _ODA_Drawings.OdDbEntity___new(*args)

class OdDbRegion(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRegion_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRegion_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRegion_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRegion_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRegion_createObject(*args)

    def acisOut(self, *args):
        return _ODA_Drawings.OdDbRegion_acisOut(self, *args)

    def acisIn(self, *args):
        return _ODA_Drawings.OdDbRegion_acisIn(self, *args)

    def brep(self, *args):
        return _ODA_Drawings.OdDbRegion_brep(self, *args)

    def getFaceMesh(self, *args):
        return _ODA_Drawings.OdDbRegion_getFaceMesh(self, *args)

    def isNull(self, *args):
        return _ODA_Drawings.OdDbRegion_isNull(self, *args)

    @staticmethod
    def createFromCurves(*args):
        return _ODA_Drawings.OdDbRegion_createFromCurves(*args)

    def getNormal(self, *args):
        return _ODA_Drawings.OdDbRegion_getNormal(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbRegion_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbRegion_getPlane(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbRegion_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbRegion_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbRegion_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbRegion_dxfOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbRegion_subWorldDraw(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbRegion_subGetClassID(self, *args)

    def decomposeForSave(self, *args):
        return _ODA_Drawings.OdDbRegion_decomposeForSave(self, *args)

    def setBody(self, *args):
        return _ODA_Drawings.OdDbRegion_setBody(self, *args)

    def body(self, *args):
        return _ODA_Drawings.OdDbRegion_body(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbRegion_subExplode(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbRegion_subTransformBy(self, *args)

    def saveAs(self, *args):
        return _ODA_Drawings.OdDbRegion_saveAs(self, *args)

    def booleanOper(self, *args):
        return _ODA_Drawings.OdDbRegion_booleanOper(self, *args)

    def getArea(self, *args):
        return _ODA_Drawings.OdDbRegion_getArea(self, *args)

    def getPerimeter(self, *args):
        return _ODA_Drawings.OdDbRegion_getPerimeter(self, *args)

    def getAreaProp(self, *args):
        return _ODA_Drawings.OdDbRegion_getAreaProp(self, *args)

    def subIntersectWith(self, *args):
        return _ODA_Drawings.OdDbRegion_subIntersectWith(self, *args)

    def subSubentPtr(self, *args):
        return _ODA_Drawings.OdDbRegion_subSubentPtr(self, *args)

    def subGetGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbRegion_subGetGsMarkersAtSubentPath(self, *args)

    def subGetSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDbRegion_subGetSubentPathsAtGsMarker(self, *args)

    def numChanges(self, *args):
        return _ODA_Drawings.OdDbRegion_numChanges(self, *args)

    def internalSubentId(self, *args):
        return _ODA_Drawings.OdDbRegion_internalSubentId(self, *args)

    def internalSubentPtr(self, *args):
        return _ODA_Drawings.OdDbRegion_internalSubentPtr(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbRegion_subSetAttributes(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbRegion_subGetGeomExtents(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbRegion_subClose(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbRegion_copyFrom(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRegion

# Register OdDbRegion in _ODA_Drawings:
_ODA_Drawings.OdDbRegion_swigregister(OdDbRegion)

def OdDbRegion_cast(*args):
    return _ODA_Drawings.OdDbRegion_cast(*args)

def OdDbRegion_desc(*args):
    return _ODA_Drawings.OdDbRegion_desc(*args)

def OdDbRegion_createObject(*args):
    return _ODA_Drawings.OdDbRegion_createObject(*args)

def OdDbRegion_createFromCurves(*args):
    return _ODA_Drawings.OdDbRegion_createFromCurves(*args)

k3dSimpleVertex = _ODA_Drawings.k3dSimpleVertex
k3dControlVertex = _ODA_Drawings.k3dControlVertex
k3dFitVertex = _ODA_Drawings.k3dFitVertex
class OdDbVertex(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbVertex_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbVertex_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbVertex_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbVertex_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbVertex_createObject(*args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbVertex_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbVertex_dxfOutFields(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbVertex_subGetGeomExtents(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbVertex_subTransformBy(self, *args)

    def subSubentPtr(self, *args):
        return _ODA_Drawings.OdDbVertex_subSubentPtr(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbVertex

# Register OdDbVertex in _ODA_Drawings:
_ODA_Drawings.OdDbVertex_swigregister(OdDbVertex)

def OdDbVertex_cast(*args):
    return _ODA_Drawings.OdDbVertex_cast(*args)

def OdDbVertex_desc(*args):
    return _ODA_Drawings.OdDbVertex_desc(*args)

def OdDbVertex_createObject(*args):
    return _ODA_Drawings.OdDbVertex_createObject(*args)

class OdDb3dSolid(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDb3dSolid_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDb3dSolid_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDb3dSolid_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDb3dSolid_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDb3dSolid_createObject(*args)

    def isNull(self, *args):
        return _ODA_Drawings.OdDb3dSolid_isNull(self, *args)

    def acisOut(self, *args):
        return _ODA_Drawings.OdDb3dSolid_acisOut(self, *args)

    def acisIn(self, *args):
        return _ODA_Drawings.OdDb3dSolid_acisIn(self, *args)

    def brep(self, *args):
        return _ODA_Drawings.OdDb3dSolid_brep(self, *args)

    def getFaceMesh(self, *args):
        return _ODA_Drawings.OdDb3dSolid_getFaceMesh(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDb3dSolid_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDb3dSolid_subViewportDraw(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDb3dSolid_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDb3dSolid_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDb3dSolid_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDb3dSolid_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDb3dSolid_subGetClassID(self, *args)

    def createBox(self, *args):
        return _ODA_Drawings.OdDb3dSolid_createBox(self, *args)

    def createFrustum(self, *args):
        return _ODA_Drawings.OdDb3dSolid_createFrustum(self, *args)

    def createSphere(self, *args):
        return _ODA_Drawings.OdDb3dSolid_createSphere(self, *args)

    def createTorus(self, *args):
        return _ODA_Drawings.OdDb3dSolid_createTorus(self, *args)

    def createWedge(self, *args):
        return _ODA_Drawings.OdDb3dSolid_createWedge(self, *args)

    def extrude(self, *args):
        return _ODA_Drawings.OdDb3dSolid_extrude(self, *args)

    def revolve(self, *args):
        return _ODA_Drawings.OdDb3dSolid_revolve(self, *args)

    def booleanOper(self, *args):
        return _ODA_Drawings.OdDb3dSolid_booleanOper(self, *args)

    def extrudeAlongPath(self, *args):
        return _ODA_Drawings.OdDb3dSolid_extrudeAlongPath(self, *args)

    def imprintEntity(self, *args):
        return _ODA_Drawings.OdDb3dSolid_imprintEntity(self, *args)

    def getArea(self, *args):
        return _ODA_Drawings.OdDb3dSolid_getArea(self, *args)

    def checkInterference(self, *args):
        return _ODA_Drawings.OdDb3dSolid_checkInterference(self, *args)

    def getMassProp(self, *args):
        return _ODA_Drawings.OdDb3dSolid_getMassProp(self, *args)

    def getSection(self, *args):
        return _ODA_Drawings.OdDb3dSolid_getSection(self, *args)

    def getSlice(self, *args):
        return _ODA_Drawings.OdDb3dSolid_getSlice(self, *args)

    def cleanBody(self, *args):
        return _ODA_Drawings.OdDb3dSolid_cleanBody(self, *args)

    def offsetBody(self, *args):
        return _ODA_Drawings.OdDb3dSolid_offsetBody(self, *args)

    def separateBody(self, *args):
        return _ODA_Drawings.OdDb3dSolid_separateBody(self, *args)

    def createExtrudedSolid(self, *args):
        return _ODA_Drawings.OdDb3dSolid_createExtrudedSolid(self, *args)

    def createLoftedSolid(self, *args):
        return _ODA_Drawings.OdDb3dSolid_createLoftedSolid(self, *args)

    def createPyramid(self, *args):
        return _ODA_Drawings.OdDb3dSolid_createPyramid(self, *args)

    def createRevolvedSolid(self, *args):
        return _ODA_Drawings.OdDb3dSolid_createRevolvedSolid(self, *args)

    def createSweptSolid(self, *args):
        return _ODA_Drawings.OdDb3dSolid_createSweptSolid(self, *args)

    def stlOut(self, *args):
        return _ODA_Drawings.OdDb3dSolid_stlOut(self, *args)

    def decomposeForSave(self, *args):
        return _ODA_Drawings.OdDb3dSolid_decomposeForSave(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDb3dSolid_subExplode(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDb3dSolid_subTransformBy(self, *args)

    def saveAs(self, *args):
        return _ODA_Drawings.OdDb3dSolid_saveAs(self, *args)

    def setBody(self, *args):
        return _ODA_Drawings.OdDb3dSolid_setBody(self, *args)

    def body(self, *args):
        return _ODA_Drawings.OdDb3dSolid_body(self, *args)

    def copyEdge(self, *args):
        return _ODA_Drawings.OdDb3dSolid_copyEdge(self, *args)

    def copyFace(self, *args):
        return _ODA_Drawings.OdDb3dSolid_copyFace(self, *args)

    def subGetSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDb3dSolid_subGetSubentPathsAtGsMarker(self, *args)

    def internalSubentId(self, *args):
        return _ODA_Drawings.OdDb3dSolid_internalSubentId(self, *args)

    def internalSubentPtr(self, *args):
        return _ODA_Drawings.OdDb3dSolid_internalSubentPtr(self, *args)

    def subGetGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDb3dSolid_subGetGsMarkersAtSubentPath(self, *args)

    def subSubentPtr(self, *args):
        return _ODA_Drawings.OdDb3dSolid_subSubentPtr(self, *args)

    def extrudeFaces(self, *args):
        return _ODA_Drawings.OdDb3dSolid_extrudeFaces(self, *args)

    def extrudeFacesAlongPath(self, *args):
        return _ODA_Drawings.OdDb3dSolid_extrudeFacesAlongPath(self, *args)

    def taperFaces(self, *args):
        return _ODA_Drawings.OdDb3dSolid_taperFaces(self, *args)

    def transformFaces(self, *args):
        return _ODA_Drawings.OdDb3dSolid_transformFaces(self, *args)

    def removeFaces(self, *args):
        return _ODA_Drawings.OdDb3dSolid_removeFaces(self, *args)

    def offsetFaces(self, *args):
        return _ODA_Drawings.OdDb3dSolid_offsetFaces(self, *args)

    def shellBody(self, *args):
        return _ODA_Drawings.OdDb3dSolid_shellBody(self, *args)

    def numChanges(self, *args):
        return _ODA_Drawings.OdDb3dSolid_numChanges(self, *args)

    def setSubentColor(self, *args):
        return _ODA_Drawings.OdDb3dSolid_setSubentColor(self, *args)

    def getSubentColor(self, *args):
        return _ODA_Drawings.OdDb3dSolid_getSubentColor(self, *args)

    def setSubentMaterial(self, *args):
        return _ODA_Drawings.OdDb3dSolid_setSubentMaterial(self, *args)

    def getSubentMaterial(self, *args):
        return _ODA_Drawings.OdDb3dSolid_getSubentMaterial(self, *args)

    def setSubentMaterialMapper(self, *args):
        return _ODA_Drawings.OdDb3dSolid_setSubentMaterialMapper(self, *args)

    def getSubentMaterialMapper(self, *args):
        return _ODA_Drawings.OdDb3dSolid_getSubentMaterialMapper(self, *args)

    def chamferEdges(self, *args):
        return _ODA_Drawings.OdDb3dSolid_chamferEdges(self, *args)

    def filletEdges(self, *args):
        return _ODA_Drawings.OdDb3dSolid_filletEdges(self, *args)

    def createFrom(self, *args):
        return _ODA_Drawings.OdDb3dSolid_createFrom(self, *args)

    def recordHistory(self, *args):
        return _ODA_Drawings.OdDb3dSolid_recordHistory(self, *args)

    def showHistory(self, *args):
        return _ODA_Drawings.OdDb3dSolid_showHistory(self, *args)

    def setRecordHistory(self, *args):
        return _ODA_Drawings.OdDb3dSolid_setRecordHistory(self, *args)

    def setShowHistory(self, *args):
        return _ODA_Drawings.OdDb3dSolid_setShowHistory(self, *args)

    def convertToBrepAtSubentPaths(self, *args):
        return _ODA_Drawings.OdDb3dSolid_convertToBrepAtSubentPaths(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDb3dSolid_subSetAttributes(self, *args)

    def projectOnToSolid(self, *args):
        return _ODA_Drawings.OdDb3dSolid_projectOnToSolid(self, *args)

    def createSculptedSolid(self, *args):
        return _ODA_Drawings.OdDb3dSolid_createSculptedSolid(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDb3dSolid_subClose(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDb3dSolid_subGetGeomExtents(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDb3dSolid_copyFrom(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDb3dSolid

# Register OdDb3dSolid in _ODA_Drawings:
_ODA_Drawings.OdDb3dSolid_swigregister(OdDb3dSolid)

def OdDb3dSolid_cast(*args):
    return _ODA_Drawings.OdDb3dSolid_cast(*args)

def OdDb3dSolid_desc(*args):
    return _ODA_Drawings.OdDb3dSolid_desc(*args)

def OdDb3dSolid_createObject(*args):
    return _ODA_Drawings.OdDb3dSolid_createObject(*args)

class OdSmPersist(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmPersist_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmPersist_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmPersist_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmPersist_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmPersist_createObject(*args)

    def clsid(self, *args):
        return _ODA_Drawings.OdSmPersist_clsid(self, *args)

    def isDirty(self, *args):
        return _ODA_Drawings.OdSmPersist_isDirty(self, *args)

    def load(self, *args):
        return _ODA_Drawings.OdSmPersist_load(self, *args)

    def save(self, *args):
        return _ODA_Drawings.OdSmPersist_save(self, *args)

    def typeName(self, *args):
        return _ODA_Drawings.OdSmPersist_typeName(self, *args)

    def initNew(self, *args):
        return _ODA_Drawings.OdSmPersist_initNew(self, *args)

    def owner(self, *args):
        return _ODA_Drawings.OdSmPersist_owner(self, *args)

    def setOwner(self, *args):
        return _ODA_Drawings.OdSmPersist_setOwner(self, *args)

    def database(self, *args):
        return _ODA_Drawings.OdSmPersist_database(self, *args)

    def objectId(self, *args):
        return _ODA_Drawings.OdSmPersist_objectId(self, *args)

    def clear(self, *args):
        return _ODA_Drawings.OdSmPersist_clear(self, *args)

    def directlyOwnedObjects(self, *args):
        return _ODA_Drawings.OdSmPersist_directlyOwnedObjects(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmPersist

# Register OdSmPersist in _ODA_Drawings:
_ODA_Drawings.OdSmPersist_swigregister(OdSmPersist)

def OdSmPersist_cast(*args):
    return _ODA_Drawings.OdSmPersist_cast(*args)

def OdSmPersist_desc(*args):
    return _ODA_Drawings.OdSmPersist_desc(*args)

def OdSmPersist_createObject(*args):
    return _ODA_Drawings.OdSmPersist_createObject(*args)

class OdDbCurve(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbCurve_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbCurve_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbCurve_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbCurve_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbCurve_createObject(*args)

    def isClosed(self, *args):
        return _ODA_Drawings.OdDbCurve_isClosed(self, *args)

    def isPeriodic(self, *args):
        return _ODA_Drawings.OdDbCurve_isPeriodic(self, *args)

    def getStartParam(self, *args):
        return _ODA_Drawings.OdDbCurve_getStartParam(self, *args)

    def getEndParam(self, *args):
        return _ODA_Drawings.OdDbCurve_getEndParam(self, *args)

    def getStartPoint(self, *args):
        return _ODA_Drawings.OdDbCurve_getStartPoint(self, *args)

    def getEndPoint(self, *args):
        return _ODA_Drawings.OdDbCurve_getEndPoint(self, *args)

    def getPointAtParam(self, *args):
        return _ODA_Drawings.OdDbCurve_getPointAtParam(self, *args)

    def getParamAtPoint(self, *args):
        return _ODA_Drawings.OdDbCurve_getParamAtPoint(self, *args)

    def getDistAtParam(self, *args):
        return _ODA_Drawings.OdDbCurve_getDistAtParam(self, *args)

    def getParamAtDist(self, *args):
        return _ODA_Drawings.OdDbCurve_getParamAtDist(self, *args)

    def getDistAtPoint(self, *args):
        return _ODA_Drawings.OdDbCurve_getDistAtPoint(self, *args)

    def getPointAtDist(self, *args):
        return _ODA_Drawings.OdDbCurve_getPointAtDist(self, *args)

    def getFirstDeriv(self, *args):
        return _ODA_Drawings.OdDbCurve_getFirstDeriv(self, *args)

    def getSecondDeriv(self, *args):
        return _ODA_Drawings.OdDbCurve_getSecondDeriv(self, *args)

    def getClosestPointTo(self, *args):
        return _ODA_Drawings.OdDbCurve_getClosestPointTo(self, *args)

    def getSpline(self, *args):
        return _ODA_Drawings.OdDbCurve_getSpline(self, *args)

    def extend(self, *args):
        return _ODA_Drawings.OdDbCurve_extend(self, *args)

    def getArea(self, *args):
        return _ODA_Drawings.OdDbCurve_getArea(self, *args)

    def getOrthoProjectedCurve(self, *args):
        return _ODA_Drawings.OdDbCurve_getOrthoProjectedCurve(self, *args)

    def getProjectedCurve(self, *args):
        return _ODA_Drawings.OdDbCurve_getProjectedCurve(self, *args)

    def getOffsetCurves(self, *args):
        return _ODA_Drawings.OdDbCurve_getOffsetCurves(self, *args)

    def getOffsetCurvesGivenPlaneNormal(self, *args):
        return _ODA_Drawings.OdDbCurve_getOffsetCurvesGivenPlaneNormal(self, *args)

    def getSplitCurves(self, *args):
        return _ODA_Drawings.OdDbCurve_getSplitCurves(self, *args)

    def reverseCurve(self, *args):
        return _ODA_Drawings.OdDbCurve_reverseCurve(self, *args)

    def getOdGeCurve(self, *args):
        return _ODA_Drawings.OdDbCurve_getOdGeCurve(self, *args)

    @staticmethod
    def createFromOdGeCurve(*args):
        return _ODA_Drawings.OdDbCurve_createFromOdGeCurve(*args)

    def setFromOdGeCurve(self, *args):
        return _ODA_Drawings.OdDbCurve_setFromOdGeCurve(self, *args)

    def findVertexIndex(self, *args):
        return _ODA_Drawings.OdDbCurve_findVertexIndex(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbCurve

# Register OdDbCurve in _ODA_Drawings:
_ODA_Drawings.OdDbCurve_swigregister(OdDbCurve)

def OdDbCurve_cast(*args):
    return _ODA_Drawings.OdDbCurve_cast(*args)

def OdDbCurve_desc(*args):
    return _ODA_Drawings.OdDbCurve_desc(*args)

def OdDbCurve_createObject(*args):
    return _ODA_Drawings.OdDbCurve_createObject(*args)

def OdDbCurve_createFromOdGeCurve(*args):
    return _ODA_Drawings.OdDbCurve_createFromOdGeCurve(*args)

kExtendEdge = _ODA_Drawings.kExtendEdge
kStretchEdge = _ODA_Drawings.kStretchEdge
class OdDbSurface(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSurface_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSurface_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSurface_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSurface_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSurface_createObject(*args)

    def uIsolineDensity(self, *args):
        return _ODA_Drawings.OdDbSurface_uIsolineDensity(self, *args)

    def setUIsolineDensity(self, *args):
        return _ODA_Drawings.OdDbSurface_setUIsolineDensity(self, *args)

    def vIsolineDensity(self, *args):
        return _ODA_Drawings.OdDbSurface_vIsolineDensity(self, *args)

    def setVIsolineDensity(self, *args):
        return _ODA_Drawings.OdDbSurface_setVIsolineDensity(self, *args)

    @staticmethod
    def createFrom(*args):
        return _ODA_Drawings.OdDbSurface_createFrom(*args)

    def convertToRegion(self, *args):
        return _ODA_Drawings.OdDbSurface_convertToRegion(self, *args)

    def thicken(self, *args):
        return _ODA_Drawings.OdDbSurface_thicken(self, *args)

    def getArea(self, *args):
        return _ODA_Drawings.OdDbSurface_getArea(self, *args)

    def isNull(self, *args):
        return _ODA_Drawings.OdDbSurface_isNull(self, *args)

    def acisOut(self, *args):
        return _ODA_Drawings.OdDbSurface_acisOut(self, *args)

    def acisIn(self, *args):
        return _ODA_Drawings.OdDbSurface_acisIn(self, *args)

    def brep(self, *args):
        return _ODA_Drawings.OdDbSurface_brep(self, *args)

    def getFaceMesh(self, *args):
        return _ODA_Drawings.OdDbSurface_getFaceMesh(self, *args)

    def decomposeForSave(self, *args):
        return _ODA_Drawings.OdDbSurface_decomposeForSave(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbSurface_subExplode(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbSurface_subTransformBy(self, *args)

    def saveAs(self, *args):
        return _ODA_Drawings.OdDbSurface_saveAs(self, *args)

    def setBody(self, *args):
        return _ODA_Drawings.OdDbSurface_setBody(self, *args)

    def body(self, *args):
        return _ODA_Drawings.OdDbSurface_body(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbSurface_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbSurface_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbSurface_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbSurface_dxfOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbSurface_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbSurface_subViewportDraw(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbSurface_subGetClassID(self, *args)

    def internalSubentId(self, *args):
        return _ODA_Drawings.OdDbSurface_internalSubentId(self, *args)

    def internalSubentPtr(self, *args):
        return _ODA_Drawings.OdDbSurface_internalSubentPtr(self, *args)

    def subSubentPtr(self, *args):
        return _ODA_Drawings.OdDbSurface_subSubentPtr(self, *args)

    def createInterferenceObjects(self, *args):
        return _ODA_Drawings.OdDbSurface_createInterferenceObjects(self, *args)

    def booleanUnion(self, *args):
        return _ODA_Drawings.OdDbSurface_booleanUnion(self, *args)

    def booleanSubtract(self, *args):
        return _ODA_Drawings.OdDbSurface_booleanSubtract(self, *args)

    def booleanIntersect(self, *args):
        return _ODA_Drawings.OdDbSurface_booleanIntersect(self, *args)

    def imprintEntity(self, *args):
        return _ODA_Drawings.OdDbSurface_imprintEntity(self, *args)

    def createSectionObjects(self, *args):
        return _ODA_Drawings.OdDbSurface_createSectionObjects(self, *args)

    def sliceByPlane(self, *args):
        return _ODA_Drawings.OdDbSurface_sliceByPlane(self, *args)

    def sliceBySurface(self, *args):
        return _ODA_Drawings.OdDbSurface_sliceBySurface(self, *args)

    def chamferEdges(self, *args):
        return _ODA_Drawings.OdDbSurface_chamferEdges(self, *args)

    def filletEdges(self, *args):
        return _ODA_Drawings.OdDbSurface_filletEdges(self, *args)

    def setSubentColor(self, *args):
        return _ODA_Drawings.OdDbSurface_setSubentColor(self, *args)

    def getSubentColor(self, *args):
        return _ODA_Drawings.OdDbSurface_getSubentColor(self, *args)

    def setSubentMaterial(self, *args):
        return _ODA_Drawings.OdDbSurface_setSubentMaterial(self, *args)

    def getSubentMaterial(self, *args):
        return _ODA_Drawings.OdDbSurface_getSubentMaterial(self, *args)

    def setSubentMaterialMapper(self, *args):
        return _ODA_Drawings.OdDbSurface_setSubentMaterialMapper(self, *args)

    def getSubentMaterialMapper(self, *args):
        return _ODA_Drawings.OdDbSurface_getSubentMaterialMapper(self, *args)

    def subGetGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbSurface_subGetGsMarkersAtSubentPath(self, *args)

    def subGetSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDbSurface_subGetSubentPathsAtGsMarker(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbSurface_subGetTransformedCopy(self, *args)

    def convertToNurbSurface(self, *args):
        return _ODA_Drawings.OdDbSurface_convertToNurbSurface(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbSurface_subSetAttributes(self, *args)

    @staticmethod
    def trimSurface(*args):
        return _ODA_Drawings.OdDbSurface_trimSurface(*args)

    def projectOnToSurface(self, *args):
        return _ODA_Drawings.OdDbSurface_projectOnToSurface(self, *args)

    def getPerimeter(self, *args):
        return _ODA_Drawings.OdDbSurface_getPerimeter(self, *args)

    def rayTest(self, *args):
        return _ODA_Drawings.OdDbSurface_rayTest(self, *args)

    @staticmethod
    def createOffsetSurface(*args):
        return _ODA_Drawings.OdDbSurface_createOffsetSurface(*args)

    @staticmethod
    def createFilletSurface(*args):
        return _ODA_Drawings.OdDbSurface_createFilletSurface(*args)

    @staticmethod
    def createExtendSurface(*args):
        return _ODA_Drawings.OdDbSurface_createExtendSurface(*args)

    def extendEdges(self, *args):
        return _ODA_Drawings.OdDbSurface_extendEdges(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbSurface_subGetGeomExtents(self, *args)

    def subHandOverTo(self, *args):
        return _ODA_Drawings.OdDbSurface_subHandOverTo(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbSurface_subClose(self, *args)

    def numChanges(self, *args):
        return _ODA_Drawings.OdDbSurface_numChanges(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbSurface_copyFrom(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSurface

# Register OdDbSurface in _ODA_Drawings:
_ODA_Drawings.OdDbSurface_swigregister(OdDbSurface)

def OdDbSurface_cast(*args):
    return _ODA_Drawings.OdDbSurface_cast(*args)

def OdDbSurface_desc(*args):
    return _ODA_Drawings.OdDbSurface_desc(*args)

def OdDbSurface_createObject(*args):
    return _ODA_Drawings.OdDbSurface_createObject(*args)

def OdDbSurface_createFrom(*args):
    return _ODA_Drawings.OdDbSurface_createFrom(*args)

def OdDbSurface_trimSurface(*args):
    return _ODA_Drawings.OdDbSurface_trimSurface(*args)

def OdDbSurface_createOffsetSurface(*args):
    return _ODA_Drawings.OdDbSurface_createOffsetSurface(*args)

def OdDbSurface_createFilletSurface(*args):
    return _ODA_Drawings.OdDbSurface_createFilletSurface(*args)

def OdDbSurface_createExtendSurface(*args):
    return _ODA_Drawings.OdDbSurface_createExtendSurface(*args)

class OdSmFileReference(OdSmPersist):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmFileReference_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmFileReference_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmFileReference_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmFileReference_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmFileReference_createObject(*args)

    def setFileName(self, *args):
        return _ODA_Drawings.OdSmFileReference_setFileName(self, *args)

    def getFileName(self, *args):
        return _ODA_Drawings.OdSmFileReference_getFileName(self, *args)

    def resolveFileName(self, *args):
        return _ODA_Drawings.OdSmFileReference_resolveFileName(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmFileReference

# Register OdSmFileReference in _ODA_Drawings:
_ODA_Drawings.OdSmFileReference_swigregister(OdSmFileReference)

def OdSmFileReference_cast(*args):
    return _ODA_Drawings.OdSmFileReference_cast(*args)

def OdSmFileReference_desc(*args):
    return _ODA_Drawings.OdSmFileReference_desc(*args)

def OdSmFileReference_createObject(*args):
    return _ODA_Drawings.OdSmFileReference_createObject(*args)

class OdDbSymbolTableRecord(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSymbolTableRecord_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSymbolTableRecord_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSymbolTableRecord_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSymbolTableRecord_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSymbolTableRecord_createObject(*args)

    def getName(self, *args):
        return _ODA_Drawings.OdDbSymbolTableRecord_getName(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbSymbolTableRecord_setName(self, *args)

    def isDependent(self, *args):
        return _ODA_Drawings.OdDbSymbolTableRecord_isDependent(self, *args)

    def isResolved(self, *args):
        return _ODA_Drawings.OdDbSymbolTableRecord_isResolved(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbSymbolTableRecord_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbSymbolTableRecord_dwgOutFields(self, *args)

    def appendToOwner(self, *args):
        return _ODA_Drawings.OdDbSymbolTableRecord_appendToOwner(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbSymbolTableRecord_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbSymbolTableRecord_dxfOutFields(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbSymbolTableRecord_dxfOutFields_R12(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbSymbolTableRecord_copyFrom(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbSymbolTableRecord_subErase(self, *args)

    def subSwapIdWith(self, *args):
        return _ODA_Drawings.OdDbSymbolTableRecord_subSwapIdWith(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSymbolTableRecord

# Register OdDbSymbolTableRecord in _ODA_Drawings:
_ODA_Drawings.OdDbSymbolTableRecord_swigregister(OdDbSymbolTableRecord)

def OdDbSymbolTableRecord_cast(*args):
    return _ODA_Drawings.OdDbSymbolTableRecord_cast(*args)

def OdDbSymbolTableRecord_desc(*args):
    return _ODA_Drawings.OdDbSymbolTableRecord_desc(*args)

def OdDbSymbolTableRecord_createObject(*args):
    return _ODA_Drawings.OdDbSymbolTableRecord_createObject(*args)

class OdDbEvalIdMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Drawings.delete_OdDbEvalIdMap

    def find(self, *args):
        return _ODA_Drawings.OdDbEvalIdMap_find(self, *args)

    def kill(self, *args):
        return _ODA_Drawings.OdDbEvalIdMap_kill(self, *args)

# Register OdDbEvalIdMap in _ODA_Drawings:
_ODA_Drawings.OdDbEvalIdMap_swigregister(OdDbEvalIdMap)

class OdDbEvalGraph(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kNullNodeId = _ODA_Drawings.OdDbEvalGraph_kNullNodeId

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbEvalGraph_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbEvalGraph_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbEvalGraph_createObject(*args)

    def __init__(self, *args):
        _ODA_Drawings.OdDbEvalGraph_swiginit(self, _ODA_Drawings.new_OdDbEvalGraph(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbEvalGraph

    @staticmethod
    def hasGraph(*args):
        return _ODA_Drawings.OdDbEvalGraph_hasGraph(*args)

    @staticmethod
    def getGraph(*args):
        return _ODA_Drawings.OdDbEvalGraph_getGraph(*args)

    @staticmethod
    def createGraph(*args):
        return _ODA_Drawings.OdDbEvalGraph_createGraph(*args)

    @staticmethod
    def removeGraph(*args):
        return _ODA_Drawings.OdDbEvalGraph_removeGraph(*args)

    def addNode(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_addNode(self, *args)

    def removeNode(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_removeNode(self, *args)

    def getAllNodes(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_getAllNodes(self, *args)

    def getNode(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_getNode(self, *args)

    def addEdge(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_addEdge(self, *args)

    def removeEdge(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_removeEdge(self, *args)

    def getIncomingEdges(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_getIncomingEdges(self, *args)

    def getOutgoingEdges(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_getOutgoingEdges(self, *args)

    def getEdgeInfo(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_getEdgeInfo(self, *args)

    def addGraph(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_addGraph(self, *args)

    def evaluate(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_evaluate(self, *args)

    def activate(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_activate(self, *args)

    def getIsActive(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_getIsActive(self, *args)

    def equals(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_equals(self, *args)

    def isSubgraphOf(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_isSubgraphOf(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_dxfOutFields(self, *args)

    def applyPartialUndo(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_applyPartialUndo(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_copyFrom(self, *args)

    def postInDatabase(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_postInDatabase(self, *args)

    def subHandOverTo(self, *args):
        return _ODA_Drawings.OdDbEvalGraph_subHandOverTo(self, *args)

# Register OdDbEvalGraph in _ODA_Drawings:
_ODA_Drawings.OdDbEvalGraph_swigregister(OdDbEvalGraph)

def OdDbEvalGraph_cast(*args):
    return _ODA_Drawings.OdDbEvalGraph_cast(*args)

def OdDbEvalGraph_desc(*args):
    return _ODA_Drawings.OdDbEvalGraph_desc(*args)

def OdDbEvalGraph_createObject(*args):
    return _ODA_Drawings.OdDbEvalGraph_createObject(*args)

def OdDbEvalGraph_hasGraph(*args):
    return _ODA_Drawings.OdDbEvalGraph_hasGraph(*args)

def OdDbEvalGraph_getGraph(*args):
    return _ODA_Drawings.OdDbEvalGraph_getGraph(*args)

def OdDbEvalGraph_createGraph(*args):
    return _ODA_Drawings.OdDbEvalGraph_createGraph(*args)

def OdDbEvalGraph_removeGraph(*args):
    return _ODA_Drawings.OdDbEvalGraph_removeGraph(*args)

class OdDbEvalEdgeInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbEvalEdgeInfo_swiginit(self, _ODA_Drawings.new_OdDbEvalEdgeInfo(*args))

    def _from(self, *args):
        return _ODA_Drawings.OdDbEvalEdgeInfo__from(self, *args)

    def to(self, *args):
        return _ODA_Drawings.OdDbEvalEdgeInfo_to(self, *args)

    def refCount(self, *args):
        return _ODA_Drawings.OdDbEvalEdgeInfo_refCount(self, *args)

    def isInvertible(self, *args):
        return _ODA_Drawings.OdDbEvalEdgeInfo_isInvertible(self, *args)

    def isSuppressed(self, *args):
        return _ODA_Drawings.OdDbEvalEdgeInfo_isSuppressed(self, *args)

    def __eq__(self, *args):
        return _ODA_Drawings.OdDbEvalEdgeInfo___eq__(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbEvalEdgeInfo

# Register OdDbEvalEdgeInfo in _ODA_Drawings:
_ODA_Drawings.OdDbEvalEdgeInfo_swigregister(OdDbEvalEdgeInfo)

class OdDbEvalExpr(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbEvalExpr_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbEvalExpr_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbEvalExpr_createObject(*args)

    def __init__(self, *args):
        _ODA_Drawings.OdDbEvalExpr_swiginit(self, _ODA_Drawings.new_OdDbEvalExpr(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbEvalExpr

    def getGraph(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_getGraph(self, *args)

    def nodeId(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_nodeId(self, *args)

    def addedToGraph(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_addedToGraph(self, *args)

    def removedFromGraph(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_removedFromGraph(self, *args)

    def adjacentNodeRemoved(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_adjacentNodeRemoved(self, *args)

    def adjacentEdgeRemoved(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_adjacentEdgeRemoved(self, *args)

    def adjacentEdgeAdded(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_adjacentEdgeAdded(self, *args)

    def movedFromGraph(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_movedFromGraph(self, *args)

    def movedIntoGraph(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_movedIntoGraph(self, *args)

    def copiedIntoGraph(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_copiedIntoGraph(self, *args)

    def isActivatable(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_isActivatable(self, *args)

    def activated(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_activated(self, *args)

    def graphEvalStart(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_graphEvalStart(self, *args)

    def graphEvalEnd(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_graphEvalEnd(self, *args)

    def graphEvalAbort(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_graphEvalAbort(self, *args)

    def evaluate(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_evaluate(self, *args)

    def equals(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_equals(self, *args)

    def value(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_value(self, *args)

    def remappedNodeIds(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_remappedNodeIds(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_dxfOutFields(self, *args)

    def postInDatabase(self, *args):
        return _ODA_Drawings.OdDbEvalExpr_postInDatabase(self, *args)

# Register OdDbEvalExpr in _ODA_Drawings:
_ODA_Drawings.OdDbEvalExpr_swigregister(OdDbEvalExpr)

def OdDbEvalExpr_cast(*args):
    return _ODA_Drawings.OdDbEvalExpr_cast(*args)

def OdDbEvalExpr_desc(*args):
    return _ODA_Drawings.OdDbEvalExpr_desc(*args)

def OdDbEvalExpr_createObject(*args):
    return _ODA_Drawings.OdDbEvalExpr_createObject(*args)

class OdDbEvalConnectable(OdDbEvalExpr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbEvalConnectable_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbEvalConnectable_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbEvalConnectable_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbEvalConnectable_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbEvalConnectable_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbEvalConnectable

    def getConnectionNames(self, *args):
        return _ODA_Drawings.OdDbEvalConnectable_getConnectionNames(self, *args)

    def hasConnectionNamed(self, *args):
        return _ODA_Drawings.OdDbEvalConnectable_hasConnectionNamed(self, *args)

    def getConnectionType(self, *args):
        return _ODA_Drawings.OdDbEvalConnectable_getConnectionType(self, *args)

    def getConnectionValue(self, *args):
        return _ODA_Drawings.OdDbEvalConnectable_getConnectionValue(self, *args)

    def setConnectionValue(self, *args):
        return _ODA_Drawings.OdDbEvalConnectable_setConnectionValue(self, *args)

    def connectTo(self, *args):
        return _ODA_Drawings.OdDbEvalConnectable_connectTo(self, *args)

    def disconnectFrom(self, *args):
        return _ODA_Drawings.OdDbEvalConnectable_disconnectFrom(self, *args)

    def connectionAllowed(self, *args):
        return _ODA_Drawings.OdDbEvalConnectable_connectionAllowed(self, *args)

    def getConnectedObjects(self, *args):
        return _ODA_Drawings.OdDbEvalConnectable_getConnectedObjects(self, *args)

    def getConnectedNames(self, *args):
        return _ODA_Drawings.OdDbEvalConnectable_getConnectedNames(self, *args)

# Register OdDbEvalConnectable in _ODA_Drawings:
_ODA_Drawings.OdDbEvalConnectable_swigregister(OdDbEvalConnectable)

def OdDbEvalConnectable_cast(*args):
    return _ODA_Drawings.OdDbEvalConnectable_cast(*args)

def OdDbEvalConnectable_desc(*args):
    return _ODA_Drawings.OdDbEvalConnectable_desc(*args)

def OdDbEvalConnectable_createObject(*args):
    return _ODA_Drawings.OdDbEvalConnectable_createObject(*args)

class OdDbEvalContext(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Drawings.delete_OdDbEvalContext

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbEvalContext_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbEvalContext_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbEvalContext_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbEvalContext_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbEvalContext_createObject(*args)

    def insertAt(self, *args):
        return _ODA_Drawings.OdDbEvalContext_insertAt(self, *args)

    def removeAt(self, *args):
        return _ODA_Drawings.OdDbEvalContext_removeAt(self, *args)

    def getAt(self, *args):
        return _ODA_Drawings.OdDbEvalContext_getAt(self, *args)

    def newIterator(self, *args):
        return _ODA_Drawings.OdDbEvalContext_newIterator(self, *args)

# Register OdDbEvalContext in _ODA_Drawings:
_ODA_Drawings.OdDbEvalContext_swigregister(OdDbEvalContext)

def OdDbEvalContext_cast(*args):
    return _ODA_Drawings.OdDbEvalContext_cast(*args)

def OdDbEvalContext_desc(*args):
    return _ODA_Drawings.OdDbEvalContext_desc(*args)

def OdDbEvalContext_createObject(*args):
    return _ODA_Drawings.OdDbEvalContext_createObject(*args)

class OdDbEvalContextPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbEvalContextPair_swiginit(self, _ODA_Drawings.new_OdDbEvalContextPair(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbEvalContextPair

    def setKey(self, *args):
        return _ODA_Drawings.OdDbEvalContextPair_setKey(self, *args)

    def key(self, *args):
        return _ODA_Drawings.OdDbEvalContextPair_key(self, *args)

    def setValue(self, *args):
        return _ODA_Drawings.OdDbEvalContextPair_setValue(self, *args)

    def value(self, *args):
        return _ODA_Drawings.OdDbEvalContextPair_value(self, *args)

# Register OdDbEvalContextPair in _ODA_Drawings:
_ODA_Drawings.OdDbEvalContextPair_swigregister(OdDbEvalContextPair)

class OdDbEvalContextIterator(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Drawings.delete_OdDbEvalContextIterator

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbEvalContextIterator_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbEvalContextIterator_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbEvalContextIterator_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbEvalContextIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbEvalContextIterator_createObject(*args)

    def start(self, *args):
        return _ODA_Drawings.OdDbEvalContextIterator_start(self, *args)

    def next(self, *args):
        return _ODA_Drawings.OdDbEvalContextIterator_next(self, *args)

    def done(self, *args):
        return _ODA_Drawings.OdDbEvalContextIterator_done(self, *args)

    def contextPair(self, *args):
        return _ODA_Drawings.OdDbEvalContextIterator_contextPair(self, *args)

# Register OdDbEvalContextIterator in _ODA_Drawings:
_ODA_Drawings.OdDbEvalContextIterator_swigregister(OdDbEvalContextIterator)

def OdDbEvalContextIterator_cast(*args):
    return _ODA_Drawings.OdDbEvalContextIterator_cast(*args)

def OdDbEvalContextIterator_desc(*args):
    return _ODA_Drawings.OdDbEvalContextIterator_desc(*args)

def OdDbEvalContextIterator_createObject(*args):
    return _ODA_Drawings.OdDbEvalContextIterator_createObject(*args)

class OdDbColor(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbColor_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbColor_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbColor_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbColor_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbColor_createObject(*args)

    def cmColor(self, *args):
        return _ODA_Drawings.OdDbColor_cmColor(self, *args)

    def setColor(self, *args):
        return _ODA_Drawings.OdDbColor_setColor(self, *args)

    def entityColor(self, *args):
        return _ODA_Drawings.OdDbColor_entityColor(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbColor_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbColor_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbColor_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbColor_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbColor

# Register OdDbColor in _ODA_Drawings:
_ODA_Drawings.OdDbColor_swigregister(OdDbColor)

def OdDbColor_cast(*args):
    return _ODA_Drawings.OdDbColor_cast(*args)

def OdDbColor_desc(*args):
    return _ODA_Drawings.OdDbColor_desc(*args)

def OdDbColor_createObject(*args):
    return _ODA_Drawings.OdDbColor_createObject(*args)

kFull_ST = _ODA_Drawings.kFull_ST
kHalfFirst_ST = _ODA_Drawings.kHalfFirst_ST
kSecondHalf_ST = _ODA_Drawings.kSecondHalf_ST
kOffset_ST = _ODA_Drawings.kOffset_ST
kAligned_ST = _ODA_Drawings.kAligned_ST
kByObject_ST = _ODA_Drawings.kByObject_ST
kCircular_ST = _ODA_Drawings.kCircular_ST
kRectangular_ST = _ODA_Drawings.kRectangular_ST
kPolygon_ST = _ODA_Drawings.kPolygon_ST
kTangent = _ODA_Drawings.kTangent
kTangentShortend = _ODA_Drawings.kTangentShortend
kInterference = _ODA_Drawings.kInterference
kBend = _ODA_Drawings.kBend
kThread = _ODA_Drawings.kThread
kPresentation = _ODA_Drawings.kPresentation
kRegular = _ODA_Drawings.kRegular
class OdLineSegInterval(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    startParam = property(_ODA_Drawings.OdLineSegInterval_startParam_get, _ODA_Drawings.OdLineSegInterval_startParam_set)
    endParam = property(_ODA_Drawings.OdLineSegInterval_endParam_get, _ODA_Drawings.OdLineSegInterval_endParam_set)

    def __init__(self, *args):
        _ODA_Drawings.OdLineSegInterval_swiginit(self, _ODA_Drawings.new_OdLineSegInterval(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdLineSegInterval

# Register OdLineSegInterval in _ODA_Drawings:
_ODA_Drawings.OdLineSegInterval_swigregister(OdLineSegInterval)

class OdEdgeHLREdgeVisitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def edge(self, *args):
        return _ODA_Drawings.OdEdgeHLREdgeVisitor_edge(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdEdgeHLREdgeVisitor

# Register OdEdgeHLREdgeVisitor in _ODA_Drawings:
_ODA_Drawings.OdEdgeHLREdgeVisitor_swigregister(OdEdgeHLREdgeVisitor)

class OdDbNurbSurface(OdDbSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbNurbSurface_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbNurbSurface_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbNurbSurface_createObject(*args)

    def get(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_get(self, *args)

    def set(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_set(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_dxfOutFields(self, *args)

    def getControlPoints(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_getControlPoints(self, *args)

    def setControlPoints(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_setControlPoints(self, *args)

    def getControlPointAt(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_getControlPointAt(self, *args)

    def setControlPointAt(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_setControlPointAt(self, *args)

    def getNumberOfControlPointsInU(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_getNumberOfControlPointsInU(self, *args)

    def getNumberOfControlPointsInV(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_getNumberOfControlPointsInV(self, *args)

    def getUKnots(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_getUKnots(self, *args)

    def getVKnots(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_getVKnots(self, *args)

    def getNumberOfKnotsInU(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_getNumberOfKnotsInU(self, *args)

    def getNumberOfKnotsInV(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_getNumberOfKnotsInV(self, *args)

    def getWeight(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_getWeight(self, *args)

    def setWeight(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_setWeight(self, *args)

    def evaluate(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_evaluate(self, *args)

    def getDegreeInU(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_getDegreeInU(self, *args)

    def getDegreeInV(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_getDegreeInV(self, *args)

    def isClosedInU(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_isClosedInU(self, *args)

    def isClosedInV(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_isClosedInV(self, *args)

    def isPeriodicInU(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_isPeriodicInU(self, *args)

    def isPeriodicInV(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_isPeriodicInV(self, *args)

    def getPeriodInU(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_getPeriodInU(self, *args)

    def getPeriodInV(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_getPeriodInV(self, *args)

    def isRational(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_isRational(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_isPlanar(self, *args)

    def isPointOnSurface(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_isPointOnSurface(self, *args)

    def getNormal(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_getNormal(self, *args)

    def getNumberOfSpansInU(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_getNumberOfSpansInU(self, *args)

    def getNumberOfSpansInV(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_getNumberOfSpansInV(self, *args)

    def getIsolineAtU(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_getIsolineAtU(self, *args)

    def getIsolineAtV(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_getIsolineAtV(self, *args)

    def InsertKnotAtU(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_InsertKnotAtU(self, *args)

    def InsertKnotAtV(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_InsertKnotAtV(self, *args)

    def InsertControlPointsAtU(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_InsertControlPointsAtU(self, *args)

    def InsertControlPointsAtV(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_InsertControlPointsAtV(self, *args)

    def RemoveControlPointsAtU(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_RemoveControlPointsAtU(self, *args)

    def RemoveControlPointsAtV(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_RemoveControlPointsAtV(self, *args)

    def rebuild(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_rebuild(self, *args)

    def modifyPositionAndTangent(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_modifyPositionAndTangent(self, *args)

    def getParameterOfPoint(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_getParameterOfPoint(self, *args)

    def convertFrom(self, *args):
        return _ODA_Drawings.OdDbNurbSurface_convertFrom(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbNurbSurface

# Register OdDbNurbSurface in _ODA_Drawings:
_ODA_Drawings.OdDbNurbSurface_swigregister(OdDbNurbSurface)

def OdDbNurbSurface_cast(*args):
    return _ODA_Drawings.OdDbNurbSurface_cast(*args)

def OdDbNurbSurface_desc(*args):
    return _ODA_Drawings.OdDbNurbSurface_desc(*args)

def OdDbNurbSurface_createObject(*args):
    return _ODA_Drawings.OdDbNurbSurface_createObject(*args)

class OdDbSubDMesh(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSubDMesh_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSubDMesh_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSubDMesh_createObject(*args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_subWorldDraw(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_subSetAttributes(self, *args)

    def decomposeForSave(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_decomposeForSave(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_dxfOutFields(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_subTransformBy(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_subGetGeomExtents(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_subExplode(self, *args)

    def setSubDMesh(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_setSubDMesh(self, *args)

    def setSphere(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_setSphere(self, *args)

    def setCylinder(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_setCylinder(self, *args)

    def setCone(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_setCone(self, *args)

    def setTorus(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_setTorus(self, *args)

    def setBox(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_setBox(self, *args)

    def setWedge(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_setWedge(self, *args)

    def setPyramid(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_setPyramid(self, *args)

    def computeRayIntersection(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_computeRayIntersection(self, *args)

    def subdDivideUp(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_subdDivideUp(self, *args)

    def subdDivideDown(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_subdDivideDown(self, *args)

    def subdRefine(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_subdRefine(self, *args)

    def subdLevel(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_subdLevel(self, *args)

    def splitFace(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_splitFace(self, *args)

    def extrudeFaces(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_extrudeFaces(self, *args)

    def extrudeConnectedFaces(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_extrudeConnectedFaces(self, *args)

    def negate(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_negate(self, *args)

    def isWatertight(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_isWatertight(self, *args)

    def numOfFaces(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_numOfFaces(self, *args)

    def numOfSubDividedFaces(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_numOfSubDividedFaces(self, *args)

    def numOfSubDividedFacesAt(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_numOfSubDividedFacesAt(self, *args)

    def numOfVertices(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_numOfVertices(self, *args)

    def numOfSubDividedVertices(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_numOfSubDividedVertices(self, *args)

    def numOfEdges(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_numOfEdges(self, *args)

    def getVertices(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_getVertices(self, *args)

    def getEdgeArray(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_getEdgeArray(self, *args)

    def getFaceArray(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_getFaceArray(self, *args)

    def getNormalArray(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_getNormalArray(self, *args)

    def getSubDividedVertices(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_getSubDividedVertices(self, *args)

    def getSubDividedFaceArray(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_getSubDividedFaceArray(self, *args)

    def getSubDividedNormalArray(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_getSubDividedNormalArray(self, *args)

    def getVertexAt(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_getVertexAt(self, *args)

    def setVertexAt(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_setVertexAt(self, *args)

    def getSubDividedVertexAt(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_getSubDividedVertexAt(self, *args)

    def setCrease(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_setCrease(self, *args)

    def getCrease(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_getCrease(self, *args)

    def getAdjacentSubentPath(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_getAdjacentSubentPath(self, *args)

    def getSubentPath(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_getSubentPath(self, *args)

    def convertToSurface(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_convertToSurface(self, *args)

    def convertToSolid(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_convertToSolid(self, *args)

    def getSubentColor(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_getSubentColor(self, *args)

    def setSubentColor(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_setSubentColor(self, *args)

    def getSubentMaterial(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_getSubentMaterial(self, *args)

    def setSubentMaterial(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_setSubentMaterial(self, *args)

    def getSubentMaterialMapper(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_getSubentMaterialMapper(self, *args)

    def setSubentMaterialMapper(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_setSubentMaterialMapper(self, *args)

    def getFacePlane(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_getFacePlane(self, *args)

    def computeVolume(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_computeVolume(self, *args)

    def computeSurfaceArea(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_computeSurfaceArea(self, *args)

    def getVertexNormalArray(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_getVertexNormalArray(self, *args)

    def getVertexTextureArray(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_getVertexTextureArray(self, *args)

    def getVertexColorArray(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_getVertexColorArray(self, *args)

    def setVertexNormalArray(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_setVertexNormalArray(self, *args)

    def setVertexTextureArray(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_setVertexTextureArray(self, *args)

    def setVertexColorArray(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_setVertexColorArray(self, *args)

    def clearVertexNormalArray(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_clearVertexNormalArray(self, *args)

    def clearVertexTextureArray(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_clearVertexTextureArray(self, *args)

    def clearVertexColorArray(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_clearVertexColorArray(self, *args)

    def subGetSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_subGetSubentPathsAtGsMarker(self, *args)

    def subGetGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbSubDMesh_subGetGsMarkersAtSubentPath(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSubDMesh

# Register OdDbSubDMesh in _ODA_Drawings:
_ODA_Drawings.OdDbSubDMesh_swigregister(OdDbSubDMesh)

def OdDbSubDMesh_cast(*args):
    return _ODA_Drawings.OdDbSubDMesh_cast(*args)

def OdDbSubDMesh_desc(*args):
    return _ODA_Drawings.OdDbSubDMesh_desc(*args)

def OdDbSubDMesh_createObject(*args):
    return _ODA_Drawings.OdDbSubDMesh_createObject(*args)

class MeshFaceterSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    faceterDevSurface = property(_ODA_Drawings.MeshFaceterSettings_faceterDevSurface_get, _ODA_Drawings.MeshFaceterSettings_faceterDevSurface_set)
    faceterDevNormal = property(_ODA_Drawings.MeshFaceterSettings_faceterDevNormal_get, _ODA_Drawings.MeshFaceterSettings_faceterDevNormal_set)
    faceterGridRatio = property(_ODA_Drawings.MeshFaceterSettings_faceterGridRatio_get, _ODA_Drawings.MeshFaceterSettings_faceterGridRatio_set)
    faceterMaxEdgeLength = property(_ODA_Drawings.MeshFaceterSettings_faceterMaxEdgeLength_get, _ODA_Drawings.MeshFaceterSettings_faceterMaxEdgeLength_set)
    faceterMaxGrid = property(_ODA_Drawings.MeshFaceterSettings_faceterMaxGrid_get, _ODA_Drawings.MeshFaceterSettings_faceterMaxGrid_set)
    faceterMinUGrid = property(_ODA_Drawings.MeshFaceterSettings_faceterMinUGrid_get, _ODA_Drawings.MeshFaceterSettings_faceterMinUGrid_set)
    faceterMinVGrid = property(_ODA_Drawings.MeshFaceterSettings_faceterMinVGrid_get, _ODA_Drawings.MeshFaceterSettings_faceterMinVGrid_set)
    faceterMeshType = property(_ODA_Drawings.MeshFaceterSettings_faceterMeshType_get, _ODA_Drawings.MeshFaceterSettings_faceterMeshType_set)

    def __init__(self, *args):
        _ODA_Drawings.MeshFaceterSettings_swiginit(self, _ODA_Drawings.new_MeshFaceterSettings(*args))
    __swig_destroy__ = _ODA_Drawings.delete_MeshFaceterSettings

# Register MeshFaceterSettings in _ODA_Drawings:
_ODA_Drawings.MeshFaceterSettings_swigregister(MeshFaceterSettings)


def oddbGetObjectMesh(*args):
    return _ODA_Drawings.oddbGetObjectMesh(*args)
class OdDbPlotSettings(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPlotSettings_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPlotSettings_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPlotSettings_createObject(*args)
    kInches = _ODA_Drawings.OdDbPlotSettings_kInches
    kMillimeters = _ODA_Drawings.OdDbPlotSettings_kMillimeters
    kPixels = _ODA_Drawings.OdDbPlotSettings_kPixels
    k0degrees = _ODA_Drawings.OdDbPlotSettings_k0degrees
    k90degrees = _ODA_Drawings.OdDbPlotSettings_k90degrees
    k180degrees = _ODA_Drawings.OdDbPlotSettings_k180degrees
    k270degrees = _ODA_Drawings.OdDbPlotSettings_k270degrees
    kDisplay = _ODA_Drawings.OdDbPlotSettings_kDisplay
    kExtents = _ODA_Drawings.OdDbPlotSettings_kExtents
    kLimits = _ODA_Drawings.OdDbPlotSettings_kLimits
    kView = _ODA_Drawings.OdDbPlotSettings_kView
    kWindow = _ODA_Drawings.OdDbPlotSettings_kWindow
    kLayout = _ODA_Drawings.OdDbPlotSettings_kLayout
    kScaleToFit = _ODA_Drawings.OdDbPlotSettings_kScaleToFit
    k1_128in_1ft = _ODA_Drawings.OdDbPlotSettings_k1_128in_1ft
    k1_64in_1ft = _ODA_Drawings.OdDbPlotSettings_k1_64in_1ft
    k1_32in_1ft = _ODA_Drawings.OdDbPlotSettings_k1_32in_1ft
    k1_16in_1ft = _ODA_Drawings.OdDbPlotSettings_k1_16in_1ft
    k3_32in_1ft = _ODA_Drawings.OdDbPlotSettings_k3_32in_1ft
    k1_8in_1ft = _ODA_Drawings.OdDbPlotSettings_k1_8in_1ft
    k3_16in_1ft = _ODA_Drawings.OdDbPlotSettings_k3_16in_1ft
    k1_4in_1ft = _ODA_Drawings.OdDbPlotSettings_k1_4in_1ft
    k3_8in_1ft = _ODA_Drawings.OdDbPlotSettings_k3_8in_1ft
    k1_2in_1ft = _ODA_Drawings.OdDbPlotSettings_k1_2in_1ft
    k3_4in_1ft = _ODA_Drawings.OdDbPlotSettings_k3_4in_1ft
    k1in_1ft = _ODA_Drawings.OdDbPlotSettings_k1in_1ft
    k3in_1ft = _ODA_Drawings.OdDbPlotSettings_k3in_1ft
    k6in_1ft = _ODA_Drawings.OdDbPlotSettings_k6in_1ft
    k1ft_1ft = _ODA_Drawings.OdDbPlotSettings_k1ft_1ft
    k1_1 = _ODA_Drawings.OdDbPlotSettings_k1_1
    k1_2 = _ODA_Drawings.OdDbPlotSettings_k1_2
    k1_4 = _ODA_Drawings.OdDbPlotSettings_k1_4
    k1_5 = _ODA_Drawings.OdDbPlotSettings_k1_5
    k1_8 = _ODA_Drawings.OdDbPlotSettings_k1_8
    k1_10 = _ODA_Drawings.OdDbPlotSettings_k1_10
    k1_16 = _ODA_Drawings.OdDbPlotSettings_k1_16
    k1_20 = _ODA_Drawings.OdDbPlotSettings_k1_20
    k1_30 = _ODA_Drawings.OdDbPlotSettings_k1_30
    k1_40 = _ODA_Drawings.OdDbPlotSettings_k1_40
    k1_50 = _ODA_Drawings.OdDbPlotSettings_k1_50
    k1_100 = _ODA_Drawings.OdDbPlotSettings_k1_100
    k2_1 = _ODA_Drawings.OdDbPlotSettings_k2_1
    k4_1 = _ODA_Drawings.OdDbPlotSettings_k4_1
    k8_1 = _ODA_Drawings.OdDbPlotSettings_k8_1
    k10_1 = _ODA_Drawings.OdDbPlotSettings_k10_1
    k100_1 = _ODA_Drawings.OdDbPlotSettings_k100_1
    k1000_1 = _ODA_Drawings.OdDbPlotSettings_k1000_1
    k1and1_2in_1ft = _ODA_Drawings.OdDbPlotSettings_k1and1_2in_1ft
    kAsDisplayed = _ODA_Drawings.OdDbPlotSettings_kAsDisplayed
    kWireframe = _ODA_Drawings.OdDbPlotSettings_kWireframe
    kHidden = _ODA_Drawings.OdDbPlotSettings_kHidden
    kRendered = _ODA_Drawings.OdDbPlotSettings_kRendered
    kVisualStyle = _ODA_Drawings.OdDbPlotSettings_kVisualStyle
    kRenderPreset = _ODA_Drawings.OdDbPlotSettings_kRenderPreset
    kDraft = _ODA_Drawings.OdDbPlotSettings_kDraft
    kPreview = _ODA_Drawings.OdDbPlotSettings_kPreview
    kNormal = _ODA_Drawings.OdDbPlotSettings_kNormal
    kPresentation = _ODA_Drawings.OdDbPlotSettings_kPresentation
    kMaximum = _ODA_Drawings.OdDbPlotSettings_kMaximum
    kCustom = _ODA_Drawings.OdDbPlotSettings_kCustom

    def addToPlotSettingsDict(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_addToPlotSettingsDict(self, *args)

    def getPlotSettingsName(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_getPlotSettingsName(self, *args)

    def setPlotSettingsName(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_setPlotSettingsName(self, *args)

    def getPlotCfgName(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_getPlotCfgName(self, *args)

    def getPlotPaperMargins(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_getPlotPaperMargins(self, *args)

    def getPlotPaperSize(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_getPlotPaperSize(self, *args)

    def getCanonicalMediaName(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_getCanonicalMediaName(self, *args)

    def getPlotOrigin(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_getPlotOrigin(self, *args)

    def plotPaperUnits(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_plotPaperUnits(self, *args)

    def plotViewportBorders(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_plotViewportBorders(self, *args)

    def setPlotViewportBorders(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_setPlotViewportBorders(self, *args)

    def plotPlotStyles(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_plotPlotStyles(self, *args)

    def setPlotPlotStyles(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_setPlotPlotStyles(self, *args)

    def showPlotStyles(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_showPlotStyles(self, *args)

    def setShowPlotStyles(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_setShowPlotStyles(self, *args)

    def plotRotation(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_plotRotation(self, *args)

    def plotCentered(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_plotCentered(self, *args)

    def plotHidden(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_plotHidden(self, *args)

    def setPlotHidden(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_setPlotHidden(self, *args)

    def plotType(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_plotType(self, *args)

    def getPlotWindowArea(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_getPlotWindowArea(self, *args)

    def getPlotViewName(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_getPlotViewName(self, *args)

    def useStandardScale(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_useStandardScale(self, *args)

    def getCustomPrintScale(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_getCustomPrintScale(self, *args)

    def getCurrentStyleSheet(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_getCurrentStyleSheet(self, *args)

    def stdScaleType(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_stdScaleType(self, *args)

    def getStdScale(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_getStdScale(self, *args)

    def scaleLineweights(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_scaleLineweights(self, *args)

    def setScaleLineweights(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_setScaleLineweights(self, *args)

    def printLineweights(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_printLineweights(self, *args)

    def setPrintLineweights(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_setPrintLineweights(self, *args)

    def drawViewportsFirst(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_drawViewportsFirst(self, *args)

    def setDrawViewportsFirst(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_setDrawViewportsFirst(self, *args)

    def modelType(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_modelType(self, *args)

    def setModelType(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_setModelType(self, *args)

    def getTopMargin(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_getTopMargin(self, *args)

    def getRightMargin(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_getRightMargin(self, *args)

    def getBottomMargin(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_getBottomMargin(self, *args)

    def getLeftMargin(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_getLeftMargin(self, *args)

    def getPaperImageOrigin(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_getPaperImageOrigin(self, *args)

    def setPaperImageOrigin(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_setPaperImageOrigin(self, *args)

    def shadePlot(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_shadePlot(self, *args)

    def shadePlotResLevel(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_shadePlotResLevel(self, *args)

    def setShadePlotResLevel(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_setShadePlotResLevel(self, *args)

    def shadePlotCustomDPI(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_shadePlotCustomDPI(self, *args)

    def setShadePlotCustomDPI(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_setShadePlotCustomDPI(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_subGetClassID(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_dxfOutFields(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_subClose(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_subErase(self, *args)

    def subHandOverTo(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_subHandOverTo(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_copyFrom(self, *args)

    def shadePlotId(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_shadePlotId(self, *args)

    def setShadePlot(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_setShadePlot(self, *args)

    def plotWireframe(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_plotWireframe(self, *args)

    def plotAsRaster(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_plotAsRaster(self, *args)

    def plotTransparency(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_plotTransparency(self, *args)

    def setPlotTransparency(self, *args):
        return _ODA_Drawings.OdDbPlotSettings_setPlotTransparency(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPlotSettings

# Register OdDbPlotSettings in _ODA_Drawings:
_ODA_Drawings.OdDbPlotSettings_swigregister(OdDbPlotSettings)

def OdDbPlotSettings_cast(*args):
    return _ODA_Drawings.OdDbPlotSettings_cast(*args)

def OdDbPlotSettings_desc(*args):
    return _ODA_Drawings.OdDbPlotSettings_desc(*args)

def OdDbPlotSettings_createObject(*args):
    return _ODA_Drawings.OdDbPlotSettings_createObject(*args)

class OdSmDbObjectReference(OdSmFileReference):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmDbObjectReference_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmDbObjectReference_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmDbObjectReference_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmDbObjectReference_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmDbObjectReference_createObject(*args)

    def setDbHandle(self, *args):
        return _ODA_Drawings.OdSmDbObjectReference_setDbHandle(self, *args)

    def getDbHandle(self, *args):
        return _ODA_Drawings.OdSmDbObjectReference_getDbHandle(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmDbObjectReference

# Register OdSmDbObjectReference in _ODA_Drawings:
_ODA_Drawings.OdSmDbObjectReference_swigregister(OdSmDbObjectReference)

def OdSmDbObjectReference_cast(*args):
    return _ODA_Drawings.OdSmDbObjectReference_cast(*args)

def OdSmDbObjectReference_desc(*args):
    return _ODA_Drawings.OdSmDbObjectReference_desc(*args)

def OdSmDbObjectReference_createObject(*args):
    return _ODA_Drawings.OdSmDbObjectReference_createObject(*args)

EMPTY = _ODA_Drawings.EMPTY
CUSTOM_SHEETSET_PROP = _ODA_Drawings.CUSTOM_SHEETSET_PROP
CUSTOM_SHEET_PROP = _ODA_Drawings.CUSTOM_SHEET_PROP
IS_CHILD = _ODA_Drawings.IS_CHILD
class OdSmCustomPropertyValue(OdSmPersist):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmCustomPropertyValue_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmCustomPropertyValue_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmCustomPropertyValue_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmCustomPropertyValue_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmCustomPropertyValue_createObject(*args)

    def getValue(self, *args):
        return _ODA_Drawings.OdSmCustomPropertyValue_getValue(self, *args)

    def setValue(self, *args):
        return _ODA_Drawings.OdSmCustomPropertyValue_setValue(self, *args)

    def getFlags(self, *args):
        return _ODA_Drawings.OdSmCustomPropertyValue_getFlags(self, *args)

    def setFlags(self, *args):
        return _ODA_Drawings.OdSmCustomPropertyValue_setFlags(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmCustomPropertyValue

# Register OdSmCustomPropertyValue in _ODA_Drawings:
_ODA_Drawings.OdSmCustomPropertyValue_swigregister(OdSmCustomPropertyValue)

def OdSmCustomPropertyValue_cast(*args):
    return _ODA_Drawings.OdSmCustomPropertyValue_cast(*args)

def OdSmCustomPropertyValue_desc(*args):
    return _ODA_Drawings.OdSmCustomPropertyValue_desc(*args)

def OdSmCustomPropertyValue_createObject(*args):
    return _ODA_Drawings.OdSmCustomPropertyValue_createObject(*args)

class OdSmEnumCustomPropertyValue(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def next(self, *args):
        return _ODA_Drawings.OdSmEnumCustomPropertyValue_next(self, *args)

    def reset(self, *args):
        return _ODA_Drawings.OdSmEnumCustomPropertyValue_reset(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmEnumCustomPropertyValue

# Register OdSmEnumCustomPropertyValue in _ODA_Drawings:
_ODA_Drawings.OdSmEnumCustomPropertyValue_swigregister(OdSmEnumCustomPropertyValue)

class OdSmCustomPropertyBag(OdSmPersist):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmCustomPropertyBag_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmCustomPropertyBag_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmCustomPropertyBag_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmCustomPropertyBag_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmCustomPropertyBag_createObject(*args)

    def getProperty(self, *args):
        return _ODA_Drawings.OdSmCustomPropertyBag_getProperty(self, *args)

    def setProperty(self, *args):
        return _ODA_Drawings.OdSmCustomPropertyBag_setProperty(self, *args)

    def getPropertyEnumerator(self, *args):
        return _ODA_Drawings.OdSmCustomPropertyBag_getPropertyEnumerator(self, *args)

    def removeProperty(self, *args):
        return _ODA_Drawings.OdSmCustomPropertyBag_removeProperty(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmCustomPropertyBag

# Register OdSmCustomPropertyBag in _ODA_Drawings:
_ODA_Drawings.OdSmCustomPropertyBag_swigregister(OdSmCustomPropertyBag)

def OdSmCustomPropertyBag_cast(*args):
    return _ODA_Drawings.OdSmCustomPropertyBag_cast(*args)

def OdSmCustomPropertyBag_desc(*args):
    return _ODA_Drawings.OdSmCustomPropertyBag_desc(*args)

def OdSmCustomPropertyBag_createObject(*args):
    return _ODA_Drawings.OdSmCustomPropertyBag_createObject(*args)

class OdDbDictionaryIterator(ODA_Kernel.OdRxIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDictionaryIterator_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDictionaryIterator_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDictionaryIterator_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDictionaryIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDictionaryIterator_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDictionaryIterator

    def name(self, *args):
        return _ODA_Drawings.OdDbDictionaryIterator_name(self, *args)

    def getObject(self, *args):
        return _ODA_Drawings.OdDbDictionaryIterator_getObject(self, *args)

    def objectId(self, *args):
        return _ODA_Drawings.OdDbDictionaryIterator_objectId(self, *args)

    def setPosition(self, *args):
        return _ODA_Drawings.OdDbDictionaryIterator_setPosition(self, *args)

    def object(self, *args):
        return _ODA_Drawings.OdDbDictionaryIterator_object(self, *args)

# Register OdDbDictionaryIterator in _ODA_Drawings:
_ODA_Drawings.OdDbDictionaryIterator_swigregister(OdDbDictionaryIterator)

def OdDbDictionaryIterator_cast(*args):
    return _ODA_Drawings.OdDbDictionaryIterator_cast(*args)

def OdDbDictionaryIterator_desc(*args):
    return _ODA_Drawings.OdDbDictionaryIterator_desc(*args)

def OdDbDictionaryIterator_createObject(*args):
    return _ODA_Drawings.OdDbDictionaryIterator_createObject(*args)

class OdDbDictionary(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDictionary_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDictionary_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDictionary_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDictionary_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDictionary_createObject(*args)

    def getAt(self, *args):
        return _ODA_Drawings.OdDbDictionary_getAt(self, *args)

    def nameAt(self, *args):
        return _ODA_Drawings.OdDbDictionary_nameAt(self, *args)

    def has(self, *args):
        return _ODA_Drawings.OdDbDictionary_has(self, *args)

    def numEntries(self, *args):
        return _ODA_Drawings.OdDbDictionary_numEntries(self, *args)

    def remove(self, *args):
        return _ODA_Drawings.OdDbDictionary_remove(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbDictionary_setName(self, *args)

    def setAt(self, *args):
        return _ODA_Drawings.OdDbDictionary_setAt(self, *args)

    def isTreatElementsAsHard(self, *args):
        return _ODA_Drawings.OdDbDictionary_isTreatElementsAsHard(self, *args)

    def setTreatElementsAsHard(self, *args):
        return _ODA_Drawings.OdDbDictionary_setTreatElementsAsHard(self, *args)

    def newIterator(self, *args):
        return _ODA_Drawings.OdDbDictionary_newIterator(self, *args)
    kMaxSuggestNameSize = _ODA_Drawings.OdDbDictionary_kMaxSuggestNameSize

    def suggestName(self, *args):
        return _ODA_Drawings.OdDbDictionary_suggestName(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbDictionary_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbDictionary_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbDictionary_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbDictionary_dxfOutFields(self, *args)

    def mergeStyle(self, *args):
        return _ODA_Drawings.OdDbDictionary_mergeStyle(self, *args)

    def setMergeStyle(self, *args):
        return _ODA_Drawings.OdDbDictionary_setMergeStyle(self, *args)

    def goodbye(self, *args):
        return _ODA_Drawings.OdDbDictionary_goodbye(self, *args)

    def erased(self, *args):
        return _ODA_Drawings.OdDbDictionary_erased(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbDictionary_subGetClassID(self, *args)

    def applyPartialUndo(self, *args):
        return _ODA_Drawings.OdDbDictionary_applyPartialUndo(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbDictionary_subClose(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDictionary

# Register OdDbDictionary in _ODA_Drawings:
_ODA_Drawings.OdDbDictionary_swigregister(OdDbDictionary)

def OdDbDictionary_cast(*args):
    return _ODA_Drawings.OdDbDictionary_cast(*args)

def OdDbDictionary_desc(*args):
    return _ODA_Drawings.OdDbDictionary_desc(*args)

def OdDbDictionary_createObject(*args):
    return _ODA_Drawings.OdDbDictionary_createObject(*args)

class OdDbTextStyleTableRecord(OdDbSymbolTableRecord):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_createObject(*args)

    def isShapeFile(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_isShapeFile(self, *args)

    def setIsShapeFile(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_setIsShapeFile(self, *args)

    def isVertical(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_isVertical(self, *args)

    def setIsVertical(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_setIsVertical(self, *args)

    def isBackwards(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_isBackwards(self, *args)

    def setIsBackwards(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_setIsBackwards(self, *args)

    def isUpsideDown(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_isUpsideDown(self, *args)

    def setIsUpsideDown(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_setIsUpsideDown(self, *args)

    def textSize(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_textSize(self, *args)

    def setTextSize(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_setTextSize(self, *args)

    def xScale(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_xScale(self, *args)

    def setXScale(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_setXScale(self, *args)

    def obliquingAngle(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_obliquingAngle(self, *args)

    def setObliquingAngle(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_setObliquingAngle(self, *args)

    def priorSize(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_priorSize(self, *args)

    def setPriorSize(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_setPriorSize(self, *args)

    def fileName(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_fileName(self, *args)

    def setFileName(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_setFileName(self, *args)

    def bigFontFileName(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_bigFontFileName(self, *args)

    def setBigFontFileName(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_setBigFontFileName(self, *args)

    def font(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_font(self, *args)

    def setFont(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_setFont(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_subGetClassID(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_dxfOutFields_R12(self, *args)

    def dxfIn(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_dxfIn(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_subClose(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_subErase(self, *args)

    def subHandOverTo(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_subHandOverTo(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbTextStyleTableRecord_subSetAttributes(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbTextStyleTableRecord

# Register OdDbTextStyleTableRecord in _ODA_Drawings:
_ODA_Drawings.OdDbTextStyleTableRecord_swigregister(OdDbTextStyleTableRecord)

def OdDbTextStyleTableRecord_cast(*args):
    return _ODA_Drawings.OdDbTextStyleTableRecord_cast(*args)

def OdDbTextStyleTableRecord_desc(*args):
    return _ODA_Drawings.OdDbTextStyleTableRecord_desc(*args)

def OdDbTextStyleTableRecord_createObject(*args):
    return _ODA_Drawings.OdDbTextStyleTableRecord_createObject(*args)


def giFromDbTextStyle(*args):
    return _ODA_Drawings.giFromDbTextStyle(*args)

def giTextStyleFromDb(*args):
    return _ODA_Drawings.giTextStyleFromDb(*args)
class OdError_DuplicateRecordName(ODA_Kernel.OdError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdError_DuplicateRecordName_swiginit(self, _ODA_Drawings.new_OdError_DuplicateRecordName(*args))

    def existingRecordId(self, *args):
        return _ODA_Drawings.OdError_DuplicateRecordName_existingRecordId(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdError_DuplicateRecordName

# Register OdError_DuplicateRecordName in _ODA_Drawings:
_ODA_Drawings.OdError_DuplicateRecordName_swigregister(OdError_DuplicateRecordName)

class OdDbSymbolTable(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSymbolTable_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSymbolTable_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSymbolTable_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSymbolTable_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSymbolTable_createObject(*args)

    def getAt(self, *args):
        return _ODA_Drawings.OdDbSymbolTable_getAt(self, *args)

    def has(self, *args):
        return _ODA_Drawings.OdDbSymbolTable_has(self, *args)

    def newIterator(self, *args):
        return _ODA_Drawings.OdDbSymbolTable_newIterator(self, *args)

    def add(self, *args):
        return _ODA_Drawings.OdDbSymbolTable_add(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbSymbolTable_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbSymbolTable_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbSymbolTable_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbSymbolTable_dxfOutFields(self, *args)

    def dxfIn(self, *args):
        return _ODA_Drawings.OdDbSymbolTable_dxfIn(self, *args)

    def dxfOut(self, *args):
        return _ODA_Drawings.OdDbSymbolTable_dxfOut(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbSymbolTable_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbSymbolTable_dxfOutFields_R12(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSymbolTable

# Register OdDbSymbolTable in _ODA_Drawings:
_ODA_Drawings.OdDbSymbolTable_swigregister(OdDbSymbolTable)

def OdDbSymbolTable_cast(*args):
    return _ODA_Drawings.OdDbSymbolTable_cast(*args)

def OdDbSymbolTable_desc(*args):
    return _ODA_Drawings.OdDbSymbolTable_desc(*args)

def OdDbSymbolTable_createObject(*args):
    return _ODA_Drawings.OdDbSymbolTable_createObject(*args)

class OdDbSymbolTableIterator(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSymbolTableIterator_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSymbolTableIterator_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSymbolTableIterator_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSymbolTableIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSymbolTableIterator_createObject(*args)

    def start(self, *args):
        return _ODA_Drawings.OdDbSymbolTableIterator_start(self, *args)

    def done(self, *args):
        return _ODA_Drawings.OdDbSymbolTableIterator_done(self, *args)

    def getRecordId(self, *args):
        return _ODA_Drawings.OdDbSymbolTableIterator_getRecordId(self, *args)

    def getRecord(self, *args):
        return _ODA_Drawings.OdDbSymbolTableIterator_getRecord(self, *args)

    def step(self, *args):
        return _ODA_Drawings.OdDbSymbolTableIterator_step(self, *args)

    def seek(self, *args):
        return _ODA_Drawings.OdDbSymbolTableIterator_seek(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSymbolTableIterator

# Register OdDbSymbolTableIterator in _ODA_Drawings:
_ODA_Drawings.OdDbSymbolTableIterator_swigregister(OdDbSymbolTableIterator)

def OdDbSymbolTableIterator_cast(*args):
    return _ODA_Drawings.OdDbSymbolTableIterator_cast(*args)

def OdDbSymbolTableIterator_desc(*args):
    return _ODA_Drawings.OdDbSymbolTableIterator_desc(*args)

def OdDbSymbolTableIterator_createObject(*args):
    return _ODA_Drawings.OdDbSymbolTableIterator_createObject(*args)

class OdDbDynBlockReferenceProperty(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kNoUnits = _ODA_Drawings.OdDbDynBlockReferenceProperty_kNoUnits
    kAngular = _ODA_Drawings.OdDbDynBlockReferenceProperty_kAngular
    kDistance = _ODA_Drawings.OdDbDynBlockReferenceProperty_kDistance
    kArea = _ODA_Drawings.OdDbDynBlockReferenceProperty_kArea
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDynBlockReferenceProperty

    def blockId(self, *args):
        return _ODA_Drawings.OdDbDynBlockReferenceProperty_blockId(self, *args)

    def propertyName(self, *args):
        return _ODA_Drawings.OdDbDynBlockReferenceProperty_propertyName(self, *args)

    def propertyType(self, *args):
        return _ODA_Drawings.OdDbDynBlockReferenceProperty_propertyType(self, *args)

    def readOnly(self, *args):
        return _ODA_Drawings.OdDbDynBlockReferenceProperty_readOnly(self, *args)

    def show(self, *args):
        return _ODA_Drawings.OdDbDynBlockReferenceProperty_show(self, *args)

    def visibleInCurrentVisibilityState(self, *args):
        return _ODA_Drawings.OdDbDynBlockReferenceProperty_visibleInCurrentVisibilityState(self, *args)

    def description(self, *args):
        return _ODA_Drawings.OdDbDynBlockReferenceProperty_description(self, *args)

    def unitsType(self, *args):
        return _ODA_Drawings.OdDbDynBlockReferenceProperty_unitsType(self, *args)

    def getAllowedValues(self, *args):
        return _ODA_Drawings.OdDbDynBlockReferenceProperty_getAllowedValues(self, *args)

    def value(self, *args):
        return _ODA_Drawings.OdDbDynBlockReferenceProperty_value(self, *args)

    def setValue(self, *args):
        return _ODA_Drawings.OdDbDynBlockReferenceProperty_setValue(self, *args)

    def getParameter(self, *args):
        return _ODA_Drawings.OdDbDynBlockReferenceProperty_getParameter(self, *args)

    def getDescriptor(self, *args):
        return _ODA_Drawings.OdDbDynBlockReferenceProperty_getDescriptor(self, *args)

# Register OdDbDynBlockReferenceProperty in _ODA_Drawings:
_ODA_Drawings.OdDbDynBlockReferenceProperty_swigregister(OdDbDynBlockReferenceProperty)

class OdDbDynBlockReference(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDynBlockReference

    def isDynamicBlock(self, *args):
        return _ODA_Drawings.OdDbDynBlockReference_isDynamicBlock(self, *args)

    def blockId(self, *args):
        return _ODA_Drawings.OdDbDynBlockReference_blockId(self, *args)

    def getBlockProperties(self, *args):
        return _ODA_Drawings.OdDbDynBlockReference_getBlockProperties(self, *args)

    def resetBlock(self, *args):
        return _ODA_Drawings.OdDbDynBlockReference_resetBlock(self, *args)

    def convertToStaticBlock(self, *args):
        return _ODA_Drawings.OdDbDynBlockReference_convertToStaticBlock(self, *args)

    def dynamicBlockTableRecord(self, *args):
        return _ODA_Drawings.OdDbDynBlockReference_dynamicBlockTableRecord(self, *args)

    def anonymousBlockTableRecord(self, *args):
        return _ODA_Drawings.OdDbDynBlockReference_anonymousBlockTableRecord(self, *args)

    def getRepresentationContext(self, *args):
        return _ODA_Drawings.OdDbDynBlockReference_getRepresentationContext(self, *args)

# Register OdDbDynBlockReference in _ODA_Drawings:
_ODA_Drawings.OdDbDynBlockReference_swigregister(OdDbDynBlockReference)

class OdDbDynBlockTableRecord(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDynBlockTableRecord

    def isDynamicBlock(self, *args):
        return _ODA_Drawings.OdDbDynBlockTableRecord_isDynamicBlock(self, *args)

    def blockTableRecordId(self, *args):
        return _ODA_Drawings.OdDbDynBlockTableRecord_blockTableRecordId(self, *args)

    def getAnonymousBlockIds(self, *args):
        return _ODA_Drawings.OdDbDynBlockTableRecord_getAnonymousBlockIds(self, *args)

    def updateAnonymousBlocks(self, *args):
        return _ODA_Drawings.OdDbDynBlockTableRecord_updateAnonymousBlocks(self, *args)

# Register OdDbDynBlockTableRecord in _ODA_Drawings:
_ODA_Drawings.OdDbDynBlockTableRecord_swigregister(OdDbDynBlockTableRecord)

class OdDbBlockElement(OdDbEvalConnectable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    kHistoryCompression0 = _ODA_Drawings.OdDbBlockElement_kHistoryCompression0
    kHistoryCompression1 = _ODA_Drawings.OdDbBlockElement_kHistoryCompression1
    kHistoryCompression2 = _ODA_Drawings.OdDbBlockElement_kHistoryCompression2
    kHistoryCompression3 = _ODA_Drawings.OdDbBlockElement_kHistoryCompression3

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockElement_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockElement_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockElement_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockElement_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockElement_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockElement_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockElement_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockElement_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockElement_dxfOutFields(self, *args)

    def evaluate(self, *args):
        return _ODA_Drawings.OdDbBlockElement_evaluate(self, *args)

    def connectionAllowed(self, *args):
        return _ODA_Drawings.OdDbBlockElement_connectionAllowed(self, *args)

    def connectTo(self, *args):
        return _ODA_Drawings.OdDbBlockElement_connectTo(self, *args)

    def disconnectFrom(self, *args):
        return _ODA_Drawings.OdDbBlockElement_disconnectFrom(self, *args)

    def hasConnectionNamed(self, *args):
        return _ODA_Drawings.OdDbBlockElement_hasConnectionNamed(self, *args)

    def getConnectedNames(self, *args):
        return _ODA_Drawings.OdDbBlockElement_getConnectedNames(self, *args)

    def getConnectedObjects(self, *args):
        return _ODA_Drawings.OdDbBlockElement_getConnectedObjects(self, *args)

    def getConnectionNames(self, *args):
        return _ODA_Drawings.OdDbBlockElement_getConnectionNames(self, *args)

    def getConnectionType(self, *args):
        return _ODA_Drawings.OdDbBlockElement_getConnectionType(self, *args)

    def getConnectionValue(self, *args):
        return _ODA_Drawings.OdDbBlockElement_getConnectionValue(self, *args)

    def name(self, *args):
        return _ODA_Drawings.OdDbBlockElement_name(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbBlockElement_setName(self, *args)

    def getInstanceMaintenanceVersion(self, *args):
        return _ODA_Drawings.OdDbBlockElement_getInstanceMaintenanceVersion(self, *args)

    def getInstanceVersion(self, *args):
        return _ODA_Drawings.OdDbBlockElement_getInstanceVersion(self, *args)

    def getStretchPoints(self, *args):
        return _ODA_Drawings.OdDbBlockElement_getStretchPoints(self, *args)

    def moveStretchPointsAt(self, *args):
        return _ODA_Drawings.OdDbBlockElement_moveStretchPointsAt(self, *args)

    def historyCompression(self, *args):
        return _ODA_Drawings.OdDbBlockElement_historyCompression(self, *args)

    def historyRequired(self, *args):
        return _ODA_Drawings.OdDbBlockElement_historyRequired(self, *args)

    def hasInstanceData(self, *args):
        return _ODA_Drawings.OdDbBlockElement_hasInstanceData(self, *args)

    def loadInstanceData(self, *args):
        return _ODA_Drawings.OdDbBlockElement_loadInstanceData(self, *args)

    def saveInstanceData(self, *args):
        return _ODA_Drawings.OdDbBlockElement_saveInstanceData(self, *args)

    def updateConnections(self, *args):
        return _ODA_Drawings.OdDbBlockElement_updateConnections(self, *args)

    def isMemberOfCurrentVisibilitySet(self, *args):
        return _ODA_Drawings.OdDbBlockElement_isMemberOfCurrentVisibilitySet(self, *args)

    def setMemberOfCurrentVisibilitySet(self, *args):
        return _ODA_Drawings.OdDbBlockElement_setMemberOfCurrentVisibilitySet(self, *args)

    def transformBy(self, *args):
        return _ODA_Drawings.OdDbBlockElement_transformBy(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockElement

# Register OdDbBlockElement in _ODA_Drawings:
_ODA_Drawings.OdDbBlockElement_swigregister(OdDbBlockElement)

def OdDbBlockElement_cast(*args):
    return _ODA_Drawings.OdDbBlockElement_cast(*args)

def OdDbBlockElement_desc(*args):
    return _ODA_Drawings.OdDbBlockElement_desc(*args)

def OdDbBlockElement_createObject(*args):
    return _ODA_Drawings.OdDbBlockElement_createObject(*args)

kUnknownCell = _ODA_Drawings.kUnknownCell
kTextCell = _ODA_Drawings.kTextCell
kBlockCell = _ODA_Drawings.kBlockCell
kMultipleContentCell = _ODA_Drawings.kMultipleContentCell
kCellContentTypeUnknown = _ODA_Drawings.kCellContentTypeUnknown
kCellContentTypeValue = _ODA_Drawings.kCellContentTypeValue
kCellContentTypeField = _ODA_Drawings.kCellContentTypeField
kCellContentTypeBlock = _ODA_Drawings.kCellContentTypeBlock
kTopMask = _ODA_Drawings.kTopMask
kRightMask = _ODA_Drawings.kRightMask
kBottomMask = _ODA_Drawings.kBottomMask
kLeftMask = _ODA_Drawings.kLeftMask
kWindow = _ODA_Drawings.kWindow
kCrossing = _ODA_Drawings.kCrossing
kTtoB = _ODA_Drawings.kTtoB
kBtoT = _ODA_Drawings.kBtoT
kDegreesUnknown = _ODA_Drawings.kDegreesUnknown
kDegrees000 = _ODA_Drawings.kDegrees000
kDegrees090 = _ODA_Drawings.kDegrees090
kDegrees180 = _ODA_Drawings.kDegrees180
kDegrees270 = _ODA_Drawings.kDegrees270
kTopLeft = _ODA_Drawings.kTopLeft
kTopCenter = _ODA_Drawings.kTopCenter
kTopRight = _ODA_Drawings.kTopRight
kMiddleLeft = _ODA_Drawings.kMiddleLeft
kMiddleCenter = _ODA_Drawings.kMiddleCenter
kMiddleRight = _ODA_Drawings.kMiddleRight
kBottomLeft = _ODA_Drawings.kBottomLeft
kBottomCenter = _ODA_Drawings.kBottomCenter
kBottomRight = _ODA_Drawings.kBottomRight
kInvalidGridLine = _ODA_Drawings.kInvalidGridLine
kHorzTop = _ODA_Drawings.kHorzTop
kHorzInside = _ODA_Drawings.kHorzInside
kHorzBottom = _ODA_Drawings.kHorzBottom
kVertLeft = _ODA_Drawings.kVertLeft
kVertInside = _ODA_Drawings.kVertInside
kVertRight = _ODA_Drawings.kVertRight
kHorzGridLineTypes = _ODA_Drawings.kHorzGridLineTypes
kVertGridLineTypes = _ODA_Drawings.kVertGridLineTypes
kOuterGridLineTypes = _ODA_Drawings.kOuterGridLineTypes
kInnerGridLineTypes = _ODA_Drawings.kInnerGridLineTypes
kAllGridLineTypes = _ODA_Drawings.kAllGridLineTypes
kUnknownRow = _ODA_Drawings.kUnknownRow
kDataRow = _ODA_Drawings.kDataRow
kTitleRow = _ODA_Drawings.kTitleRow
kHeaderRow = _ODA_Drawings.kHeaderRow
kHorzInsideLineFirst = _ODA_Drawings.kHorzInsideLineFirst
kHorzInsideLineSecond = _ODA_Drawings.kHorzInsideLineSecond
kHorzInsideLineThird = _ODA_Drawings.kHorzInsideLineThird
kTableStyleModified = _ODA_Drawings.kTableStyleModified
kAllRows = _ODA_Drawings.kAllRows
kAllGridLines = _ODA_Drawings.kAllGridLines
kGridLineStyleSingle = _ODA_Drawings.kGridLineStyleSingle
kGridLineStyleDouble = _ODA_Drawings.kGridLineStyleDouble
kCellMarginTop = _ODA_Drawings.kCellMarginTop
kCellMarginLeft = _ODA_Drawings.kCellMarginLeft
kCellMarginBottom = _ODA_Drawings.kCellMarginBottom
kCellMarginRight = _ODA_Drawings.kCellMarginRight
kCellMarginHorzSpacing = _ODA_Drawings.kCellMarginHorzSpacing
kCellMarginVertSpacing = _ODA_Drawings.kCellMarginVertSpacing
kCellContentLayoutFlow = _ODA_Drawings.kCellContentLayoutFlow
kCellContentLayoutStackedHorizontal = _ODA_Drawings.kCellContentLayoutStackedHorizontal
kCellContentLayoutStackedVertical = _ODA_Drawings.kCellContentLayoutStackedVertical
kCellStateNone = _ODA_Drawings.kCellStateNone
kCellStateContentLocked = _ODA_Drawings.kCellStateContentLocked
kCellStateContentReadOnly = _ODA_Drawings.kCellStateContentReadOnly
kCellStateLinked = _ODA_Drawings.kCellStateLinked
kCellStateContentModifiedAfterUpdate = _ODA_Drawings.kCellStateContentModifiedAfterUpdate
kCellStateFormatLocked = _ODA_Drawings.kCellStateFormatLocked
kCellStateFormatReadOnly = _ODA_Drawings.kCellStateFormatReadOnly
kCellStateFormatModifiedAfterUpdate = _ODA_Drawings.kCellStateFormatModifiedAfterUpdate
kAllCellStates = _ODA_Drawings.kAllCellStates
kGridPropInvalid = _ODA_Drawings.kGridPropInvalid
kGridPropLineStyle = _ODA_Drawings.kGridPropLineStyle
kGridPropLineWeight = _ODA_Drawings.kGridPropLineWeight
kGridPropLinetype = _ODA_Drawings.kGridPropLinetype
kGridPropColor = _ODA_Drawings.kGridPropColor
kGridPropVisibility = _ODA_Drawings.kGridPropVisibility
kGridPropDoubleLineSpacing = _ODA_Drawings.kGridPropDoubleLineSpacing
kGridPropAll = _ODA_Drawings.kGridPropAll
kCellOptionNone = _ODA_Drawings.kCellOptionNone
kInheritCellFormat = _ODA_Drawings.kInheritCellFormat
kCellPropInvalid = _ODA_Drawings.kCellPropInvalid
kCellPropDataType = _ODA_Drawings.kCellPropDataType
kCellPropDataFormat = _ODA_Drawings.kCellPropDataFormat
kCellPropRotation = _ODA_Drawings.kCellPropRotation
kCellPropScale = _ODA_Drawings.kCellPropScale
kCellPropAlignment = _ODA_Drawings.kCellPropAlignment
kCellPropContentColor = _ODA_Drawings.kCellPropContentColor
kCellPropTextStyle = _ODA_Drawings.kCellPropTextStyle
kCellPropTextHeight = _ODA_Drawings.kCellPropTextHeight
kCellPropAutoScale = _ODA_Drawings.kCellPropAutoScale
kCellPropBackgroundColor = _ODA_Drawings.kCellPropBackgroundColor
kCellPropMarginLeft = _ODA_Drawings.kCellPropMarginLeft
kCellPropMarginTop = _ODA_Drawings.kCellPropMarginTop
kCellPropMarginRight = _ODA_Drawings.kCellPropMarginRight
kCellPropMarginBottom = _ODA_Drawings.kCellPropMarginBottom
kCellPropContentLayout = _ODA_Drawings.kCellPropContentLayout
kCellPropMergeAll = _ODA_Drawings.kCellPropMergeAll
kCellPropFlowDirBtoT = _ODA_Drawings.kCellPropFlowDirBtoT
kCellPropMarginHorzSpacing = _ODA_Drawings.kCellPropMarginHorzSpacing
kCellPropMarginVertSpacing = _ODA_Drawings.kCellPropMarginVertSpacing
kCellPropDataTypeAndFormat = _ODA_Drawings.kCellPropDataTypeAndFormat
kCellPropContent = _ODA_Drawings.kCellPropContent
kCellPropBitProperties = _ODA_Drawings.kCellPropBitProperties
kCellPropAll = _ODA_Drawings.kCellPropAll
kTableFillOptionNone = _ODA_Drawings.kTableFillOptionNone
kTableFillOptionRow = _ODA_Drawings.kTableFillOptionRow
kTableFillOptionReverse = _ODA_Drawings.kTableFillOptionReverse
kTableFillOptionGenerateSeries = _ODA_Drawings.kTableFillOptionGenerateSeries
kTableFillOptionCopyContent = _ODA_Drawings.kTableFillOptionCopyContent
kTableFillOptionCopyFormat = _ODA_Drawings.kTableFillOptionCopyFormat
kTableFillOptionOverwriteReadOnlyContent = _ODA_Drawings.kTableFillOptionOverwriteReadOnlyContent
kTableFillOptionOverwriteReadOnlyFormat = _ODA_Drawings.kTableFillOptionOverwriteReadOnlyFormat
kTableCopyOptionNone = _ODA_Drawings.kTableCopyOptionNone
kTableCopyOptionExpandOrContractTable = _ODA_Drawings.kTableCopyOptionExpandOrContractTable
kTableCopyOptionSkipContent = _ODA_Drawings.kTableCopyOptionSkipContent
kTableCopyOptionSkipValue = _ODA_Drawings.kTableCopyOptionSkipValue
kTableCopyOptionSkipField = _ODA_Drawings.kTableCopyOptionSkipField
kTableCopyOptionSkipFormula = _ODA_Drawings.kTableCopyOptionSkipFormula
kTableCopyOptionSkipBlock = _ODA_Drawings.kTableCopyOptionSkipBlock
kTableCopyOptionSkipDataLink = _ODA_Drawings.kTableCopyOptionSkipDataLink
kTableCopyOptionSkipLabelCell = _ODA_Drawings.kTableCopyOptionSkipLabelCell
kTableCopyOptionSkipDataCell = _ODA_Drawings.kTableCopyOptionSkipDataCell
kTableCopyOptionSkipFormat = _ODA_Drawings.kTableCopyOptionSkipFormat
kTableCopyOptionSkipCellStyle = _ODA_Drawings.kTableCopyOptionSkipCellStyle
kTableCopyOptionConvertFormatToOverrides = _ODA_Drawings.kTableCopyOptionConvertFormatToOverrides
kTableCopyOptionSkipCellState = _ODA_Drawings.kTableCopyOptionSkipCellState
kTableCopyOptionSkipContentFormat = _ODA_Drawings.kTableCopyOptionSkipContentFormat
kTableCopyOptionSkipDissimilarContentFormat = _ODA_Drawings.kTableCopyOptionSkipDissimilarContentFormat
kTableCopyOptionSkipGeometry = _ODA_Drawings.kTableCopyOptionSkipGeometry
kTableCopyOptionSkipMerges = _ODA_Drawings.kTableCopyOptionSkipMerges
kTableCopyOptionFillTarget = _ODA_Drawings.kTableCopyOptionFillTarget
kTableCopyOptionOverwriteReadOnlyContent = _ODA_Drawings.kTableCopyOptionOverwriteReadOnlyContent
kTableCopyOptionOverwriteReadOnlyFormat = _ODA_Drawings.kTableCopyOptionOverwriteReadOnlyFormat
kTableCopyOptionOverwriteContentModifiedAfterUpdate = _ODA_Drawings.kTableCopyOptionOverwriteContentModifiedAfterUpdate
kTableCopyOptionOverwriteFormatModifiedAfterUpdate = _ODA_Drawings.kTableCopyOptionOverwriteFormatModifiedAfterUpdate
kTableCopyOptionOnlyContentModifiedAfterUpdate = _ODA_Drawings.kTableCopyOptionOnlyContentModifiedAfterUpdate
kTableCopyOptionOnlyFormatModifiedAfterUpdate = _ODA_Drawings.kTableCopyOptionOnlyFormatModifiedAfterUpdate
kTableCopyOptionRowHeight = _ODA_Drawings.kTableCopyOptionRowHeight
kTableCopyOptionColumnWidth = _ODA_Drawings.kTableCopyOptionColumnWidth
kTableCopyOptionFullCellState = _ODA_Drawings.kTableCopyOptionFullCellState
kTableCopyOptionForRountrip = _ODA_Drawings.kTableCopyOptionForRountrip
kTableCopyOptionConvertFieldToValue = _ODA_Drawings.kTableCopyOptionConvertFieldToValue
kTableCopyOptionSkipFieldTranslation = _ODA_Drawings.kTableCopyOptionSkipFieldTranslation
kMergeCellStyleNone = _ODA_Drawings.kMergeCellStyleNone
kMergeCellStyleCopyDuplicates = _ODA_Drawings.kMergeCellStyleCopyDuplicates
kMergeCellStyleOverwriteDuplicates = _ODA_Drawings.kMergeCellStyleOverwriteDuplicates
kMergeCellStyleConvertDuplicatesToOverrides = _ODA_Drawings.kMergeCellStyleConvertDuplicatesToOverrides
kMergeCellStyleIgnoreNewStyles = _ODA_Drawings.kMergeCellStyleIgnoreNewStyles
kTableIteratorNone = _ODA_Drawings.kTableIteratorNone
kTableIteratorIterateSelection = _ODA_Drawings.kTableIteratorIterateSelection
kTableIteratorIterateRows = _ODA_Drawings.kTableIteratorIterateRows
kTableIteratorIterateColumns = _ODA_Drawings.kTableIteratorIterateColumns
kTableIteratorIterateDataLinks = _ODA_Drawings.kTableIteratorIterateDataLinks
kTableIteratorReverseOrder = _ODA_Drawings.kTableIteratorReverseOrder
kTableIteratorSkipReadOnlyContent = _ODA_Drawings.kTableIteratorSkipReadOnlyContent
kTableIteratorSkipReadOnlyFormat = _ODA_Drawings.kTableIteratorSkipReadOnlyFormat
kTableIteratorSkipMerged = _ODA_Drawings.kTableIteratorSkipMerged
class OdCellRange(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_topRow = property(_ODA_Drawings.OdCellRange_m_topRow_get, _ODA_Drawings.OdCellRange_m_topRow_set)
    m_leftColumn = property(_ODA_Drawings.OdCellRange_m_leftColumn_get, _ODA_Drawings.OdCellRange_m_leftColumn_set)
    m_bottomRow = property(_ODA_Drawings.OdCellRange_m_bottomRow_get, _ODA_Drawings.OdCellRange_m_bottomRow_set)
    m_rightColumn = property(_ODA_Drawings.OdCellRange_m_rightColumn_get, _ODA_Drawings.OdCellRange_m_rightColumn_set)

    def __init__(self, *args):
        _ODA_Drawings.OdCellRange_swiginit(self, _ODA_Drawings.new_OdCellRange(*args))

    def __eq__(self, *args):
        return _ODA_Drawings.OdCellRange___eq__(self, *args)

    def __ne__(self, *args):
        return _ODA_Drawings.OdCellRange___ne__(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdCellRange

# Register OdCellRange in _ODA_Drawings:
_ODA_Drawings.OdCellRange_swigregister(OdCellRange)

class OdGridProperty(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_propMask = property(_ODA_Drawings.OdGridProperty_m_propMask_get, _ODA_Drawings.OdGridProperty_m_propMask_set)
    m_lineStyle = property(_ODA_Drawings.OdGridProperty_m_lineStyle_get, _ODA_Drawings.OdGridProperty_m_lineStyle_set)
    m_lineWeight = property(_ODA_Drawings.OdGridProperty_m_lineWeight_get, _ODA_Drawings.OdGridProperty_m_lineWeight_set)
    m_linetype = property(_ODA_Drawings.OdGridProperty_m_linetype_get, _ODA_Drawings.OdGridProperty_m_linetype_set)
    m_color = property(_ODA_Drawings.OdGridProperty_m_color_get, _ODA_Drawings.OdGridProperty_m_color_set)
    m_visibility = property(_ODA_Drawings.OdGridProperty_m_visibility_get, _ODA_Drawings.OdGridProperty_m_visibility_set)
    m_doubleLineSpacing = property(_ODA_Drawings.OdGridProperty_m_doubleLineSpacing_get, _ODA_Drawings.OdGridProperty_m_doubleLineSpacing_set)

    def __init__(self, *args):
        _ODA_Drawings.OdGridProperty_swiginit(self, _ODA_Drawings.new_OdGridProperty(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdGridProperty

# Register OdGridProperty in _ODA_Drawings:
_ODA_Drawings.OdGridProperty_swigregister(OdGridProperty)

class OdDbTableStyle(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbTableStyle_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbTableStyle_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbTableStyle_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbTableStyle_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbTableStyle_createObject(*args)

    def getName(self, *args):
        return _ODA_Drawings.OdDbTableStyle_getName(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setName(self, *args)

    def description(self, *args):
        return _ODA_Drawings.OdDbTableStyle_description(self, *args)

    def setDescription(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setDescription(self, *args)

    def bitFlags(self, *args):
        return _ODA_Drawings.OdDbTableStyle_bitFlags(self, *args)

    def setBitFlags(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setBitFlags(self, *args)

    def flowDirection(self, *args):
        return _ODA_Drawings.OdDbTableStyle_flowDirection(self, *args)

    def setFlowDirection(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setFlowDirection(self, *args)

    def horzCellMargin(self, *args):
        return _ODA_Drawings.OdDbTableStyle_horzCellMargin(self, *args)

    def setHorzCellMargin(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setHorzCellMargin(self, *args)

    def vertCellMargin(self, *args):
        return _ODA_Drawings.OdDbTableStyle_vertCellMargin(self, *args)

    def setVertCellMargin(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setVertCellMargin(self, *args)

    def isTitleSuppressed(self, *args):
        return _ODA_Drawings.OdDbTableStyle_isTitleSuppressed(self, *args)

    def suppressTitleRow(self, *args):
        return _ODA_Drawings.OdDbTableStyle_suppressTitleRow(self, *args)

    def isHeaderSuppressed(self, *args):
        return _ODA_Drawings.OdDbTableStyle_isHeaderSuppressed(self, *args)

    def suppressHeaderRow(self, *args):
        return _ODA_Drawings.OdDbTableStyle_suppressHeaderRow(self, *args)

    def isBackgroundColorNone(self, *args):
        return _ODA_Drawings.OdDbTableStyle_isBackgroundColorNone(self, *args)

    def setBackgroundColorNone(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setBackgroundColorNone(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbTableStyle_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbTableStyle_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbTableStyle_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbTableStyle_dxfOutFields(self, *args)

    def setDatabaseDefaults(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setDatabaseDefaults(self, *args)

    def postTableStyleToDb(self, *args):
        return _ODA_Drawings.OdDbTableStyle_postTableStyleToDb(self, *args)

    def createCellStyle(self, *args):
        return _ODA_Drawings.OdDbTableStyle_createCellStyle(self, *args)

    def renameCellStyle(self, *args):
        return _ODA_Drawings.OdDbTableStyle_renameCellStyle(self, *args)

    def deleteCellStyle(self, *args):
        return _ODA_Drawings.OdDbTableStyle_deleteCellStyle(self, *args)

    def copyCellStyle(self, *args):
        return _ODA_Drawings.OdDbTableStyle_copyCellStyle(self, *args)

    def getUniqueCellStyleName(self, *args):
        return _ODA_Drawings.OdDbTableStyle_getUniqueCellStyleName(self, *args)

    def isCellStyleInUse(self, *args):
        return _ODA_Drawings.OdDbTableStyle_isCellStyleInUse(self, *args)

    def numCellStyles(self, *args):
        return _ODA_Drawings.OdDbTableStyle_numCellStyles(self, *args)

    def getCellStyles(self, *args):
        return _ODA_Drawings.OdDbTableStyle_getCellStyles(self, *args)

    def cellStyleId(self, *args):
        return _ODA_Drawings.OdDbTableStyle_cellStyleId(self, *args)

    def cellStyleName(self, *args):
        return _ODA_Drawings.OdDbTableStyle_cellStyleName(self, *args)

    def textStyle(self, *args):
        return _ODA_Drawings.OdDbTableStyle_textStyle(self, *args)

    def setTextStyle(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setTextStyle(self, *args)

    def textHeight(self, *args):
        return _ODA_Drawings.OdDbTableStyle_textHeight(self, *args)

    def setTextHeight(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setTextHeight(self, *args)

    def alignment(self, *args):
        return _ODA_Drawings.OdDbTableStyle_alignment(self, *args)

    def setAlignment(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setAlignment(self, *args)

    def color(self, *args):
        return _ODA_Drawings.OdDbTableStyle_color(self, *args)

    def setColor(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setColor(self, *args)

    def backgroundColor(self, *args):
        return _ODA_Drawings.OdDbTableStyle_backgroundColor(self, *args)

    def setBackgroundColor(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setBackgroundColor(self, *args)

    def getDataType(self, *args):
        return _ODA_Drawings.OdDbTableStyle_getDataType(self, *args)

    def setDataType(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setDataType(self, *args)

    def format(self, *args):
        return _ODA_Drawings.OdDbTableStyle_format(self, *args)

    def setFormat(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setFormat(self, *args)

    def cellClass(self, *args):
        return _ODA_Drawings.OdDbTableStyle_cellClass(self, *args)

    def setCellClass(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setCellClass(self, *args)

    def rotation(self, *args):
        return _ODA_Drawings.OdDbTableStyle_rotation(self, *args)

    def setRotation(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setRotation(self, *args)

    def isMergeAllEnabled(self, *args):
        return _ODA_Drawings.OdDbTableStyle_isMergeAllEnabled(self, *args)

    def enableMergeAll(self, *args):
        return _ODA_Drawings.OdDbTableStyle_enableMergeAll(self, *args)

    def margin(self, *args):
        return _ODA_Drawings.OdDbTableStyle_margin(self, *args)

    def setMargin(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setMargin(self, *args)

    def gridLineWeight(self, *args):
        return _ODA_Drawings.OdDbTableStyle_gridLineWeight(self, *args)

    def setGridLineWeight(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setGridLineWeight(self, *args)

    def gridColor(self, *args):
        return _ODA_Drawings.OdDbTableStyle_gridColor(self, *args)

    def setGridColor(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setGridColor(self, *args)

    def gridVisibility(self, *args):
        return _ODA_Drawings.OdDbTableStyle_gridVisibility(self, *args)

    def setGridVisibility(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setGridVisibility(self, *args)

    def gridDoubleLineSpacing(self, *args):
        return _ODA_Drawings.OdDbTableStyle_gridDoubleLineSpacing(self, *args)

    def setGridDoubleLineSpacing(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setGridDoubleLineSpacing(self, *args)

    def gridLineStyle(self, *args):
        return _ODA_Drawings.OdDbTableStyle_gridLineStyle(self, *args)

    def setGridLineStyle(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setGridLineStyle(self, *args)

    def gridLinetype(self, *args):
        return _ODA_Drawings.OdDbTableStyle_gridLinetype(self, *args)

    def setGridLinetype(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setGridLinetype(self, *args)

    def getGridProperty(self, *args):
        return _ODA_Drawings.OdDbTableStyle_getGridProperty(self, *args)

    def setGridProperty(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setGridProperty(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbTableStyle_subGetClassID(self, *args)

    def getTemplate(self, *args):
        return _ODA_Drawings.OdDbTableStyle_getTemplate(self, *args)

    def setTemplate(self, *args):
        return _ODA_Drawings.OdDbTableStyle_setTemplate(self, *args)

    def removeTemplate(self, *args):
        return _ODA_Drawings.OdDbTableStyle_removeTemplate(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbTableStyle

# Register OdDbTableStyle in _ODA_Drawings:
_ODA_Drawings.OdDbTableStyle_swigregister(OdDbTableStyle)

def OdDbTableStyle_cast(*args):
    return _ODA_Drawings.OdDbTableStyle_cast(*args)

def OdDbTableStyle_desc(*args):
    return _ODA_Drawings.OdDbTableStyle_desc(*args)

def OdDbTableStyle_createObject(*args):
    return _ODA_Drawings.OdDbTableStyle_createObject(*args)

class OdFieldValue(OdValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdFieldValue_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdFieldValue_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdFieldValue_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdFieldValue_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdFieldValue_createObject(*args)

    def __init__(self, *args):
        _ODA_Drawings.OdFieldValue_swiginit(self, _ODA_Drawings.new_OdFieldValue(*args))

    def get(self, *args):
        return _ODA_Drawings.OdFieldValue_get(self, *args)

    def set(self, *args):
        return _ODA_Drawings.OdFieldValue_set(self, *args)

    def flags(self, *args):
        return _ODA_Drawings.OdFieldValue_flags(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdFieldValue

# Register OdFieldValue in _ODA_Drawings:
_ODA_Drawings.OdFieldValue_swigregister(OdFieldValue)

def OdFieldValue_cast(*args):
    return _ODA_Drawings.OdFieldValue_cast(*args)

def OdFieldValue_desc(*args):
    return _ODA_Drawings.OdFieldValue_desc(*args)

def OdFieldValue_createObject(*args):
    return _ODA_Drawings.OdFieldValue_createObject(*args)

class OdModelerGeometry(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdModelerGeometry_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdModelerGeometry_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdModelerGeometry_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdModelerGeometry_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdModelerGeometry_createObject(*args)

    def _in(self, *args):
        return _ODA_Drawings.OdModelerGeometry__in(self, *args)

    def out(self, *args):
        return _ODA_Drawings.OdModelerGeometry_out(self, *args)

    def brep(self, *args):
        return _ODA_Drawings.OdModelerGeometry_brep(self, *args)

    def getEdgeSubentityGeometry(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getEdgeSubentityGeometry(self, *args)

    def setSubentPath(self, *args):
        return _ODA_Drawings.OdModelerGeometry_setSubentPath(self, *args)

    def generateMesh(self, *args):
        return _ODA_Drawings.OdModelerGeometry_generateMesh(self, *args)

    def setFACETRES(self, *args):
        return _ODA_Drawings.OdModelerGeometry_setFACETRES(self, *args)

    def worldDraw(self, *args):
        return _ODA_Drawings.OdModelerGeometry_worldDraw(self, *args)

    def drawSilhouettes(self, *args):
        return _ODA_Drawings.OdModelerGeometry_drawSilhouettes(self, *args)

    def getCachedSilhouettes(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getCachedSilhouettes(self, *args)

    def getHlrCurves(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getHlrCurves(self, *args)

    def explode(self, *args):
        return _ODA_Drawings.OdModelerGeometry_explode(self, *args)

    def getTransformation(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getTransformation(self, *args)

    def transformBy(self, *args):
        return _ODA_Drawings.OdModelerGeometry_transformBy(self, *args)

    def createBox(self, *args):
        return _ODA_Drawings.OdModelerGeometry_createBox(self, *args)

    def createFrustum(self, *args):
        return _ODA_Drawings.OdModelerGeometry_createFrustum(self, *args)

    def createSphere(self, *args):
        return _ODA_Drawings.OdModelerGeometry_createSphere(self, *args)

    def createTorus(self, *args):
        return _ODA_Drawings.OdModelerGeometry_createTorus(self, *args)

    def createWedge(self, *args):
        return _ODA_Drawings.OdModelerGeometry_createWedge(self, *args)

    def extrude(self, *args):
        return _ODA_Drawings.OdModelerGeometry_extrude(self, *args)

    def revolve(self, *args):
        return _ODA_Drawings.OdModelerGeometry_revolve(self, *args)

    def ClearColorAttributes(self, *args):
        return _ODA_Drawings.OdModelerGeometry_ClearColorAttributes(self, *args)

    def ClearMaterialAttributes(self, *args):
        return _ODA_Drawings.OdModelerGeometry_ClearMaterialAttributes(self, *args)

    def ClearMaterialMapperAttributes(self, *args):
        return _ODA_Drawings.OdModelerGeometry_ClearMaterialMapperAttributes(self, *args)
    kNoMaterials = _ODA_Drawings.OdModelerGeometry_kNoMaterials
    kHasMaterials = _ODA_Drawings.OdModelerGeometry_kHasMaterials
    kUnknown = _ODA_Drawings.OdModelerGeometry_kUnknown

    def hasMaterials(self, *args):
        return _ODA_Drawings.OdModelerGeometry_hasMaterials(self, *args)

    def hasTrueColorAttributes(self, *args):
        return _ODA_Drawings.OdModelerGeometry_hasTrueColorAttributes(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getPlane(self, *args)

    def setMMPerUnit(self, *args):
        return _ODA_Drawings.OdModelerGeometry_setMMPerUnit(self, *args)

    def getMMPerUnit(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getMMPerUnit(self, *args)
    kUndefined = _ODA_Drawings.OdModelerGeometry_kUndefined
    kBody = _ODA_Drawings.OdModelerGeometry_kBody
    kSolid = _ODA_Drawings.OdModelerGeometry_kSolid
    kRegion = _ODA_Drawings.OdModelerGeometry_kRegion
    kSurface = _ODA_Drawings.OdModelerGeometry_kSurface

    def bodyType(self, *args):
        return _ODA_Drawings.OdModelerGeometry_bodyType(self, *args)

    def booleanOper(self, *args):
        return _ODA_Drawings.OdModelerGeometry_booleanOper(self, *args)

    def checkInterference(self, *args):
        return _ODA_Drawings.OdModelerGeometry_checkInterference(self, *args)

    def getArea(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getArea(self, *args)

    def getPerimeter(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getPerimeter(self, *args)

    def getAreaProp(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getAreaProp(self, *args)

    def clear(self, *args):
        return _ODA_Drawings.OdModelerGeometry_clear(self, *args)

    def extrudeAlongPath(self, *args):
        return _ODA_Drawings.OdModelerGeometry_extrudeAlongPath(self, *args)

    def imprintEntity(self, *args):
        return _ODA_Drawings.OdModelerGeometry_imprintEntity(self, *args)

    def getMassProp(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getMassProp(self, *args)

    def getSection(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getSection(self, *args)

    def getSlice(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getSlice(self, *args)

    def cleanBody(self, *args):
        return _ODA_Drawings.OdModelerGeometry_cleanBody(self, *args)

    def offsetBody(self, *args):
        return _ODA_Drawings.OdModelerGeometry_offsetBody(self, *args)

    def separateBody(self, *args):
        return _ODA_Drawings.OdModelerGeometry_separateBody(self, *args)

    def createExtrudedObject(self, *args):
        return _ODA_Drawings.OdModelerGeometry_createExtrudedObject(self, *args)

    def createLoftedObject(self, *args):
        return _ODA_Drawings.OdModelerGeometry_createLoftedObject(self, *args)

    def createBlendObject(self, *args):
        return _ODA_Drawings.OdModelerGeometry_createBlendObject(self, *args)

    def createPyramid(self, *args):
        return _ODA_Drawings.OdModelerGeometry_createPyramid(self, *args)

    def createRevolvedObject(self, *args):
        return _ODA_Drawings.OdModelerGeometry_createRevolvedObject(self, *args)

    def createSweptObject(self, *args):
        return _ODA_Drawings.OdModelerGeometry_createSweptObject(self, *args)

    def checkCrossSectionCurves(self, *args):
        return _ODA_Drawings.OdModelerGeometry_checkCrossSectionCurves(self, *args)

    def checkGuideCurves(self, *args):
        return _ODA_Drawings.OdModelerGeometry_checkGuideCurves(self, *args)

    def checkPathCurve(self, *args):
        return _ODA_Drawings.OdModelerGeometry_checkPathCurve(self, *args)

    def checkSweepCurve(self, *args):
        return _ODA_Drawings.OdModelerGeometry_checkSweepCurve(self, *args)

    def checkSweepPathCurve(self, *args):
        return _ODA_Drawings.OdModelerGeometry_checkSweepPathCurve(self, *args)

    def checkRevolveCurve(self, *args):
        return _ODA_Drawings.OdModelerGeometry_checkRevolveCurve(self, *args)

    def createFrom(self, *args):
        return _ODA_Drawings.OdModelerGeometry_createFrom(self, *args)

    def convertToRegion(self, *args):
        return _ODA_Drawings.OdModelerGeometry_convertToRegion(self, *args)

    def thicken(self, *args):
        return _ODA_Drawings.OdModelerGeometry_thicken(self, *args)

    def intersectWith(self, *args):
        return _ODA_Drawings.OdModelerGeometry_intersectWith(self, *args)

    def copySubEntity(self, *args):
        return _ODA_Drawings.OdModelerGeometry_copySubEntity(self, *args)

    def taperFaces(self, *args):
        return _ODA_Drawings.OdModelerGeometry_taperFaces(self, *args)

    def removeFaces(self, *args):
        return _ODA_Drawings.OdModelerGeometry_removeFaces(self, *args)

    def offsetFaces(self, *args):
        return _ODA_Drawings.OdModelerGeometry_offsetFaces(self, *args)

    def shellBody(self, *args):
        return _ODA_Drawings.OdModelerGeometry_shellBody(self, *args)

    def transformFaces(self, *args):
        return _ODA_Drawings.OdModelerGeometry_transformFaces(self, *args)

    def getSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getSubentPathsAtGsMarker(self, *args)

    def getGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getGsMarkersAtSubentPath(self, *args)

    def internalSubentId(self, *args):
        return _ODA_Drawings.OdModelerGeometry_internalSubentId(self, *args)

    def internalSubentPtr(self, *args):
        return _ODA_Drawings.OdModelerGeometry_internalSubentPtr(self, *args)

    def getNurbCurvesCache(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getNurbCurvesCache(self, *args)

    def setBody(self, *args):
        return _ODA_Drawings.OdModelerGeometry_setBody(self, *args)

    def body(self, *args):
        return _ODA_Drawings.OdModelerGeometry_body(self, *args)

    def setSubentColor(self, *args):
        return _ODA_Drawings.OdModelerGeometry_setSubentColor(self, *args)

    def getSubentColor(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getSubentColor(self, *args)

    def setSubentMaterial(self, *args):
        return _ODA_Drawings.OdModelerGeometry_setSubentMaterial(self, *args)

    def getSubentMaterial(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getSubentMaterial(self, *args)

    def setSubentMaterialMapper(self, *args):
        return _ODA_Drawings.OdModelerGeometry_setSubentMaterialMapper(self, *args)

    def getSubentMaterialMapper(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getSubentMaterialMapper(self, *args)

    def chamferEdges(self, *args):
        return _ODA_Drawings.OdModelerGeometry_chamferEdges(self, *args)

    def filletEdges(self, *args):
        return _ODA_Drawings.OdModelerGeometry_filletEdges(self, *args)

    def createSectionObjects(self, *args):
        return _ODA_Drawings.OdModelerGeometry_createSectionObjects(self, *args)

    def sliceByPlane(self, *args):
        return _ODA_Drawings.OdModelerGeometry_sliceByPlane(self, *args)

    def sliceBySurface(self, *args):
        return _ODA_Drawings.OdModelerGeometry_sliceBySurface(self, *args)

    def extrudeFaces(self, *args):
        return _ODA_Drawings.OdModelerGeometry_extrudeFaces(self, *args)

    def extrudeFacesAlongPath(self, *args):
        return _ODA_Drawings.OdModelerGeometry_extrudeFacesAlongPath(self, *args)

    def ChangeFacesDoubleSidedParam(self, *args):
        return _ODA_Drawings.OdModelerGeometry_ChangeFacesDoubleSidedParam(self, *args)

    def convertToNurbSurface(self, *args):
        return _ODA_Drawings.OdModelerGeometry_convertToNurbSurface(self, *args)

    def get(self, *args):
        return _ODA_Drawings.OdModelerGeometry_get(self, *args)

    def set(self, *args):
        return _ODA_Drawings.OdModelerGeometry_set(self, *args)

    def getNumberOfControlPointsInU(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getNumberOfControlPointsInU(self, *args)

    def getNumberOfControlPointsInV(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getNumberOfControlPointsInV(self, *args)

    def getNumberOfKnotsInU(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getNumberOfKnotsInU(self, *args)

    def getNumberOfKnotsInV(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getNumberOfKnotsInV(self, *args)

    def getUKnots(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getUKnots(self, *args)

    def getVKnots(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getVKnots(self, *args)

    def getDegreeInU(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getDegreeInU(self, *args)

    def getDegreeInV(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getDegreeInV(self, *args)

    def isClosedInU(self, *args):
        return _ODA_Drawings.OdModelerGeometry_isClosedInU(self, *args)

    def isClosedInV(self, *args):
        return _ODA_Drawings.OdModelerGeometry_isClosedInV(self, *args)

    def isPeriodicInU(self, *args):
        return _ODA_Drawings.OdModelerGeometry_isPeriodicInU(self, *args)

    def isPeriodicInV(self, *args):
        return _ODA_Drawings.OdModelerGeometry_isPeriodicInV(self, *args)

    def getPeriodInU(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getPeriodInU(self, *args)

    def getPeriodInV(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getPeriodInV(self, *args)

    def evaluate(self, *args):
        return _ODA_Drawings.OdModelerGeometry_evaluate(self, *args)

    def isRational(self, *args):
        return _ODA_Drawings.OdModelerGeometry_isRational(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdModelerGeometry_isPlanar(self, *args)

    def isPointOnSurface(self, *args):
        return _ODA_Drawings.OdModelerGeometry_isPointOnSurface(self, *args)

    def getNormal(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getNormal(self, *args)

    def getNumberOfSpansInU(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getNumberOfSpansInU(self, *args)

    def getNumberOfSpansInV(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getNumberOfSpansInV(self, *args)

    def getIsolineAtU(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getIsolineAtU(self, *args)

    def getIsolineAtV(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getIsolineAtV(self, *args)

    def InsertKnot(self, *args):
        return _ODA_Drawings.OdModelerGeometry_InsertKnot(self, *args)

    def InsertControlPointsAtU(self, *args):
        return _ODA_Drawings.OdModelerGeometry_InsertControlPointsAtU(self, *args)

    def InsertControlPointsAtV(self, *args):
        return _ODA_Drawings.OdModelerGeometry_InsertControlPointsAtV(self, *args)

    def RemoveControlPointsAtU(self, *args):
        return _ODA_Drawings.OdModelerGeometry_RemoveControlPointsAtU(self, *args)

    def RemoveControlPointsAtV(self, *args):
        return _ODA_Drawings.OdModelerGeometry_RemoveControlPointsAtV(self, *args)

    def rebuild(self, *args):
        return _ODA_Drawings.OdModelerGeometry_rebuild(self, *args)

    def modifyPositionAndTangent(self, *args):
        return _ODA_Drawings.OdModelerGeometry_modifyPositionAndTangent(self, *args)

    def getParameterOfPoint(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getParameterOfPoint(self, *args)

    def getControlPoints(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getControlPoints(self, *args)

    def setControlPoints(self, *args):
        return _ODA_Drawings.OdModelerGeometry_setControlPoints(self, *args)

    def getControlPointAndWeight(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getControlPointAndWeight(self, *args)

    def setControlPointAndWeight(self, *args):
        return _ODA_Drawings.OdModelerGeometry_setControlPointAndWeight(self, *args)

    def setColorToSubents(self, *args):
        return _ODA_Drawings.OdModelerGeometry_setColorToSubents(self, *args)

    def setMaterialToSubents(self, *args):
        return _ODA_Drawings.OdModelerGeometry_setMaterialToSubents(self, *args)

    def setMaterialResolver(self, *args):
        return _ODA_Drawings.OdModelerGeometry_setMaterialResolver(self, *args)

    def setMaterialMapperToSubents(self, *args):
        return _ODA_Drawings.OdModelerGeometry_setMaterialMapperToSubents(self, *args)

    def trimSurface(self, *args):
        return _ODA_Drawings.OdModelerGeometry_trimSurface(self, *args)

    def projectOnToEntity(self, *args):
        return _ODA_Drawings.OdModelerGeometry_projectOnToEntity(self, *args)

    def createSculptedSolid(self, *args):
        return _ODA_Drawings.OdModelerGeometry_createSculptedSolid(self, *args)

    def rayTest(self, *args):
        return _ODA_Drawings.OdModelerGeometry_rayTest(self, *args)

    def createFilletSurface(self, *args):
        return _ODA_Drawings.OdModelerGeometry_createFilletSurface(self, *args)

    def extendEdges(self, *args):
        return _ODA_Drawings.OdModelerGeometry_extendEdges(self, *args)

    def getObjectMesh(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getObjectMesh(self, *args)

    def getBoundingBox(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getBoundingBox(self, *args)

    def getSectionViewInfo(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getSectionViewInfo(self, *args)

    def createCachedCurves(self, *args):
        return _ODA_Drawings.OdModelerGeometry_createCachedCurves(self, *args)

    def restoreAttributes(self, *args):
        return _ODA_Drawings.OdModelerGeometry_restoreAttributes(self, *args)

    def addSubentitySpecialSettings(self, *args):
        return _ODA_Drawings.OdModelerGeometry_addSubentitySpecialSettings(self, *args)

    def getFaceMesh(self, *args):
        return _ODA_Drawings.OdModelerGeometry_getFaceMesh(self, *args)

    def auditAcisData(self, *args):
        return _ODA_Drawings.OdModelerGeometry_auditAcisData(self, *args)

    def enableAcisAudit(self, *args):
        return _ODA_Drawings.OdModelerGeometry_enableAcisAudit(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdModelerGeometry

# Register OdModelerGeometry in _ODA_Drawings:
_ODA_Drawings.OdModelerGeometry_swigregister(OdModelerGeometry)

def OdModelerGeometry_cast(*args):
    return _ODA_Drawings.OdModelerGeometry_cast(*args)

def OdModelerGeometry_desc(*args):
    return _ODA_Drawings.OdModelerGeometry_desc(*args)

def OdModelerGeometry_createObject(*args):
    return _ODA_Drawings.OdModelerGeometry_createObject(*args)

class NumIsolines(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    numU = property(_ODA_Drawings.NumIsolines_numU_get, _ODA_Drawings.NumIsolines_numU_set)
    numV = property(_ODA_Drawings.NumIsolines_numV_get, _ODA_Drawings.NumIsolines_numV_set)

    def __init__(self, *args):
        _ODA_Drawings.NumIsolines_swiginit(self, _ODA_Drawings.new_NumIsolines(*args))
    __swig_destroy__ = _ODA_Drawings.delete_NumIsolines

# Register NumIsolines in _ODA_Drawings:
_ODA_Drawings.NumIsolines_swigregister(NumIsolines)

class OdDbLayout(OdDbPlotSettings):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLayout_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLayout_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLayout_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLayout_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLayout_createObject(*args)

    def getLIMMIN(self, *args):
        return _ODA_Drawings.OdDbLayout_getLIMMIN(self, *args)

    def setLIMMIN(self, *args):
        return _ODA_Drawings.OdDbLayout_setLIMMIN(self, *args)

    def getLIMMAX(self, *args):
        return _ODA_Drawings.OdDbLayout_getLIMMAX(self, *args)

    def setLIMMAX(self, *args):
        return _ODA_Drawings.OdDbLayout_setLIMMAX(self, *args)

    def getEXTMIN(self, *args):
        return _ODA_Drawings.OdDbLayout_getEXTMIN(self, *args)

    def setEXTMIN(self, *args):
        return _ODA_Drawings.OdDbLayout_setEXTMIN(self, *args)

    def getEXTMAX(self, *args):
        return _ODA_Drawings.OdDbLayout_getEXTMAX(self, *args)

    def setEXTMAX(self, *args):
        return _ODA_Drawings.OdDbLayout_setEXTMAX(self, *args)

    def getINSBASE(self, *args):
        return _ODA_Drawings.OdDbLayout_getINSBASE(self, *args)

    def setINSBASE(self, *args):
        return _ODA_Drawings.OdDbLayout_setINSBASE(self, *args)

    def getLIMCHECK(self, *args):
        return _ODA_Drawings.OdDbLayout_getLIMCHECK(self, *args)

    def setLIMCHECK(self, *args):
        return _ODA_Drawings.OdDbLayout_setLIMCHECK(self, *args)

    def getPSLTSCALE(self, *args):
        return _ODA_Drawings.OdDbLayout_getPSLTSCALE(self, *args)

    def setPSLTSCALE(self, *args):
        return _ODA_Drawings.OdDbLayout_setPSLTSCALE(self, *args)

    def getBlockTableRecordId(self, *args):
        return _ODA_Drawings.OdDbLayout_getBlockTableRecordId(self, *args)

    def setBlockTableRecordId(self, *args):
        return _ODA_Drawings.OdDbLayout_setBlockTableRecordId(self, *args)

    def addToLayoutDict(self, *args):
        return _ODA_Drawings.OdDbLayout_addToLayoutDict(self, *args)

    def getLayoutName(self, *args):
        return _ODA_Drawings.OdDbLayout_getLayoutName(self, *args)

    def setLayoutName(self, *args):
        return _ODA_Drawings.OdDbLayout_setLayoutName(self, *args)

    def getTabOrder(self, *args):
        return _ODA_Drawings.OdDbLayout_getTabOrder(self, *args)

    def setTabOrder(self, *args):
        return _ODA_Drawings.OdDbLayout_setTabOrder(self, *args)

    def getTabSelected(self, *args):
        return _ODA_Drawings.OdDbLayout_getTabSelected(self, *args)

    def setTabSelected(self, *args):
        return _ODA_Drawings.OdDbLayout_setTabSelected(self, *args)

    def getViewportArray(self, *args):
        return _ODA_Drawings.OdDbLayout_getViewportArray(self, *args)

    def thumbnailBitmap(self, *args):
        return _ODA_Drawings.OdDbLayout_thumbnailBitmap(self, *args)

    def setThumbnailBitmap(self, *args):
        return _ODA_Drawings.OdDbLayout_setThumbnailBitmap(self, *args)

    def getPreviewImage(self, *args):
        return _ODA_Drawings.OdDbLayout_getPreviewImage(self, *args)

    def setPreviewImage(self, *args):
        return _ODA_Drawings.OdDbLayout_setPreviewImage(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbLayout_subGetClassID(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbLayout_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbLayout_dwgOutFields(self, *args)

    def appendToOwner(self, *args):
        return _ODA_Drawings.OdDbLayout_appendToOwner(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbLayout_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbLayout_dxfOutFields(self, *args)

    def activeViewportId(self, *args):
        return _ODA_Drawings.OdDbLayout_activeViewportId(self, *args)

    def setActiveViewportId(self, *args):
        return _ODA_Drawings.OdDbLayout_setActiveViewportId(self, *args)

    def overallVportId(self, *args):
        return _ODA_Drawings.OdDbLayout_overallVportId(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbLayout_subSetAttributes(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbLayout_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbLayout_subViewportDraw(self, *args)

    def getGeomExtents(self, *args):
        return _ODA_Drawings.OdDbLayout_getGeomExtents(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbLayout_subClose(self, *args)

    def annoAllVisible(self, *args):
        return _ODA_Drawings.OdDbLayout_annoAllVisible(self, *args)

    def setAnnoAllVisible(self, *args):
        return _ODA_Drawings.OdDbLayout_setAnnoAllVisible(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLayout

# Register OdDbLayout in _ODA_Drawings:
_ODA_Drawings.OdDbLayout_swigregister(OdDbLayout)

def OdDbLayout_cast(*args):
    return _ODA_Drawings.OdDbLayout_cast(*args)

def OdDbLayout_desc(*args):
    return _ODA_Drawings.OdDbLayout_desc(*args)

def OdDbLayout_createObject(*args):
    return _ODA_Drawings.OdDbLayout_createObject(*args)

class OdSmNamedDbObjectReference(OdSmDbObjectReference):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmNamedDbObjectReference_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmNamedDbObjectReference_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmNamedDbObjectReference_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmNamedDbObjectReference_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmNamedDbObjectReference_createObject(*args)

    def setName(self, *args):
        return _ODA_Drawings.OdSmNamedDbObjectReference_setName(self, *args)

    def getName(self, *args):
        return _ODA_Drawings.OdSmNamedDbObjectReference_getName(self, *args)

    def setOwnerDbHandle(self, *args):
        return _ODA_Drawings.OdSmNamedDbObjectReference_setOwnerDbHandle(self, *args)

    def getOwnerDbHandle(self, *args):
        return _ODA_Drawings.OdSmNamedDbObjectReference_getOwnerDbHandle(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmNamedDbObjectReference

# Register OdSmNamedDbObjectReference in _ODA_Drawings:
_ODA_Drawings.OdSmNamedDbObjectReference_swigregister(OdSmNamedDbObjectReference)

def OdSmNamedDbObjectReference_cast(*args):
    return _ODA_Drawings.OdSmNamedDbObjectReference_cast(*args)

def OdSmNamedDbObjectReference_desc(*args):
    return _ODA_Drawings.OdSmNamedDbObjectReference_desc(*args)

def OdSmNamedDbObjectReference_createObject(*args):
    return _ODA_Drawings.OdSmNamedDbObjectReference_createObject(*args)

class OdSmDbBlockRecordReference(OdSmNamedDbObjectReference):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmDbBlockRecordReference_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmDbBlockRecordReference_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmDbBlockRecordReference_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmDbBlockRecordReference_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmDbBlockRecordReference_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmDbBlockRecordReference

# Register OdSmDbBlockRecordReference in _ODA_Drawings:
_ODA_Drawings.OdSmDbBlockRecordReference_swigregister(OdSmDbBlockRecordReference)

def OdSmDbBlockRecordReference_cast(*args):
    return _ODA_Drawings.OdSmDbBlockRecordReference_cast(*args)

def OdSmDbBlockRecordReference_desc(*args):
    return _ODA_Drawings.OdSmDbBlockRecordReference_desc(*args)

def OdSmDbBlockRecordReference_createObject(*args):
    return _ODA_Drawings.OdSmDbBlockRecordReference_createObject(*args)

class OdSmDbViewReference(OdSmNamedDbObjectReference):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmDbViewReference_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmDbViewReference_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmDbViewReference_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmDbViewReference_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmDbViewReference_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmDbViewReference

# Register OdSmDbViewReference in _ODA_Drawings:
_ODA_Drawings.OdSmDbViewReference_swigregister(OdSmDbViewReference)

def OdSmDbViewReference_cast(*args):
    return _ODA_Drawings.OdSmDbViewReference_cast(*args)

def OdSmDbViewReference_desc(*args):
    return _ODA_Drawings.OdSmDbViewReference_desc(*args)

def OdSmDbViewReference_createObject(*args):
    return _ODA_Drawings.OdSmDbViewReference_createObject(*args)

class OdSmDbLayoutReference(OdSmNamedDbObjectReference):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmDbLayoutReference_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmDbLayoutReference_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmDbLayoutReference_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmDbLayoutReference_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmDbLayoutReference_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmDbLayoutReference

# Register OdSmDbLayoutReference in _ODA_Drawings:
_ODA_Drawings.OdSmDbLayoutReference_swigregister(OdSmDbLayoutReference)

def OdSmDbLayoutReference_cast(*args):
    return _ODA_Drawings.OdSmDbLayoutReference_cast(*args)

def OdSmDbLayoutReference_desc(*args):
    return _ODA_Drawings.OdSmDbLayoutReference_desc(*args)

def OdSmDbLayoutReference_createObject(*args):
    return _ODA_Drawings.OdSmDbLayoutReference_createObject(*args)

class OdSmComponent(OdSmPersist):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmComponent_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmComponent_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmComponent_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmComponent_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmComponent_createObject(*args)

    def getName(self, *args):
        return _ODA_Drawings.OdSmComponent_getName(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdSmComponent_setName(self, *args)

    def getDesc(self, *args):
        return _ODA_Drawings.OdSmComponent_getDesc(self, *args)

    def setDesc(self, *args):
        return _ODA_Drawings.OdSmComponent_setDesc(self, *args)

    def customProperties(self, *args):
        return _ODA_Drawings.OdSmComponent_customProperties(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmComponent

# Register OdSmComponent in _ODA_Drawings:
_ODA_Drawings.OdSmComponent_swigregister(OdSmComponent)

def OdSmComponent_cast(*args):
    return _ODA_Drawings.OdSmComponent_cast(*args)

def OdSmComponent_desc(*args):
    return _ODA_Drawings.OdSmComponent_desc(*args)

def OdSmComponent_createObject(*args):
    return _ODA_Drawings.OdSmComponent_createObject(*args)


def repairPreExtendedSymbolName(*args):
    return _ODA_Drawings.repairPreExtendedSymbolName(*args)

def repairSymbolName(*args):
    return _ODA_Drawings.repairSymbolName(*args)

def validatePreExtendedSymbolName(*args):
    return _ODA_Drawings.validatePreExtendedSymbolName(*args)

def validateSymbolName(*args):
    return _ODA_Drawings.validateSymbolName(*args)

def getMaxSymbolNameLength(*args):
    return _ODA_Drawings.getMaxSymbolNameLength(*args)

def getSymbolName(*args):
    return _ODA_Drawings.getSymbolName(*args)

def getViewportId(*args):
    return _ODA_Drawings.getViewportId(*args)

def getBlockId(*args):
    return _ODA_Drawings.getBlockId(*args)

def getDimStyleId(*args):
    return _ODA_Drawings.getDimStyleId(*args)

def getLinetypeId(*args):
    return _ODA_Drawings.getLinetypeId(*args)

def getRegAppId(*args):
    return _ODA_Drawings.getRegAppId(*args)

def getTextStyleId(*args):
    return _ODA_Drawings.getTextStyleId(*args)

def getUCSId(*args):
    return _ODA_Drawings.getUCSId(*args)

def getViewId(*args):
    return _ODA_Drawings.getViewId(*args)

def getPlotstyleId(*args):
    return _ODA_Drawings.getPlotstyleId(*args)

def getMLStyleId(*args):
    return _ODA_Drawings.getMLStyleId(*args)

def getTableStyleId(*args):
    return _ODA_Drawings.getTableStyleId(*args)

def getMLeaderStyleId(*args):
    return _ODA_Drawings.getMLeaderStyleId(*args)

def getVisualStyleId(*args):
    return _ODA_Drawings.getVisualStyleId(*args)

def linetypeByLayerName(*args):
    return _ODA_Drawings.linetypeByLayerName(*args)

def isLinetypeByLayerName(*args):
    return _ODA_Drawings.isLinetypeByLayerName(*args)

def linetypeByBlockName(*args):
    return _ODA_Drawings.linetypeByBlockName(*args)

def isLinetypeByBlockName(*args):
    return _ODA_Drawings.isLinetypeByBlockName(*args)

def linetypeContinuousName(*args):
    return _ODA_Drawings.linetypeContinuousName(*args)

def isLinetypeContinuousName(*args):
    return _ODA_Drawings.isLinetypeContinuousName(*args)

def layerZeroName(*args):
    return _ODA_Drawings.layerZeroName(*args)

def isLayerZeroName(*args):
    return _ODA_Drawings.isLayerZeroName(*args)

def layerDefpointsName(*args):
    return _ODA_Drawings.layerDefpointsName(*args)

def isLayerDefpointsName(*args):
    return _ODA_Drawings.isLayerDefpointsName(*args)

def textStyleStandardName(*args):
    return _ODA_Drawings.textStyleStandardName(*args)

def MLineStyleStandardName(*args):
    return _ODA_Drawings.MLineStyleStandardName(*args)

def isMLineStandardName(*args):
    return _ODA_Drawings.isMLineStandardName(*args)

def dimStyleStandardName(*args):
    return _ODA_Drawings.dimStyleStandardName(*args)

def viewportActiveName(*args):
    return _ODA_Drawings.viewportActiveName(*args)

def isViewportActiveName(*args):
    return _ODA_Drawings.isViewportActiveName(*args)

def isTextStyleStandardName(*args):
    return _ODA_Drawings.isTextStyleStandardName(*args)

def textStyleStandardId(*args):
    return _ODA_Drawings.textStyleStandardId(*args)

def dimStyleStandardId(*args):
    return _ODA_Drawings.dimStyleStandardId(*args)

def MLineStyleStandardId(*args):
    return _ODA_Drawings.MLineStyleStandardId(*args)

def getLayerId(*args):
    return _ODA_Drawings.getLayerId(*args)

def blockModelSpaceName(*args):
    return _ODA_Drawings.blockModelSpaceName(*args)

def isBlockModelSpaceName(*args):
    return _ODA_Drawings.isBlockModelSpaceName(*args)

def blockPaperSpaceName(*args):
    return _ODA_Drawings.blockPaperSpaceName(*args)

def isBlockPaperSpaceName(*args):
    return _ODA_Drawings.isBlockPaperSpaceName(*args)

def isKindOfBlockPaperSpaceName(*args):
    return _ODA_Drawings.isKindOfBlockPaperSpaceName(*args)

def plotStyleNormalName(*args):
    return _ODA_Drawings.plotStyleNormalName(*args)

def TableStyleStandardName(*args):
    return _ODA_Drawings.TableStyleStandardName(*args)

def isTableStandardName(*args):
    return _ODA_Drawings.isTableStandardName(*args)

def MLeaderStyleStandardName(*args):
    return _ODA_Drawings.MLeaderStyleStandardName(*args)

def isMLeaderStandardName(*args):
    return _ODA_Drawings.isMLeaderStandardName(*args)

def DetailViewStyleStandardName(*args):
    return _ODA_Drawings.DetailViewStyleStandardName(*args)

def isDetailViewStyleStandardName(*args):
    return _ODA_Drawings.isDetailViewStyleStandardName(*args)

def SectionViewStyleStandardName(*args):
    return _ODA_Drawings.SectionViewStyleStandardName(*args)

def isSectionViewStyleStandardName(*args):
    return _ODA_Drawings.isSectionViewStyleStandardName(*args)
class OdDbBlkParamPropertyDescriptor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbBlkParamPropertyDescriptor_swiginit(self, _ODA_Drawings.new_OdDbBlkParamPropertyDescriptor(*args))
    m_sName = property(_ODA_Drawings.OdDbBlkParamPropertyDescriptor_m_sName_get, _ODA_Drawings.OdDbBlkParamPropertyDescriptor_m_sName_set)
    m_sConnection = property(_ODA_Drawings.OdDbBlkParamPropertyDescriptor_m_sConnection_get, _ODA_Drawings.OdDbBlkParamPropertyDescriptor_m_sConnection_set)
    m_nType = property(_ODA_Drawings.OdDbBlkParamPropertyDescriptor_m_nType_get, _ODA_Drawings.OdDbBlkParamPropertyDescriptor_m_nType_set)
    m_bReadonly = property(_ODA_Drawings.OdDbBlkParamPropertyDescriptor_m_bReadonly_get, _ODA_Drawings.OdDbBlkParamPropertyDescriptor_m_bReadonly_set)
    m_bVisible = property(_ODA_Drawings.OdDbBlkParamPropertyDescriptor_m_bVisible_get, _ODA_Drawings.OdDbBlkParamPropertyDescriptor_m_bVisible_set)
    m_sDescription = property(_ODA_Drawings.OdDbBlkParamPropertyDescriptor_m_sDescription_get, _ODA_Drawings.OdDbBlkParamPropertyDescriptor_m_sDescription_set)
    m_bListPresent = property(_ODA_Drawings.OdDbBlkParamPropertyDescriptor_m_bListPresent_get, _ODA_Drawings.OdDbBlkParamPropertyDescriptor_m_bListPresent_set)
    m_nUnitsType = property(_ODA_Drawings.OdDbBlkParamPropertyDescriptor_m_nUnitsType_get, _ODA_Drawings.OdDbBlkParamPropertyDescriptor_m_nUnitsType_set)
    m_pAllowedValues = property(_ODA_Drawings.OdDbBlkParamPropertyDescriptor_m_pAllowedValues_get, _ODA_Drawings.OdDbBlkParamPropertyDescriptor_m_pAllowedValues_set)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlkParamPropertyDescriptor

# Register OdDbBlkParamPropertyDescriptor in _ODA_Drawings:
_ODA_Drawings.OdDbBlkParamPropertyDescriptor_swigregister(OdDbBlkParamPropertyDescriptor)

class OdDbBlockParameter(OdDbBlockElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockParameter_dxfOutFields(self, *args)
    Base = _ODA_Drawings.OdDbBlockParameter_Base
    End = _ODA_Drawings.OdDbBlockParameter_End
    BaseXEndY = _ODA_Drawings.OdDbBlockParameter_BaseXEndY
    EndXBaseY = _ODA_Drawings.OdDbBlockParameter_EndXBaseY
    InvalidComponent = _ODA_Drawings.OdDbBlockParameter_InvalidComponent

    def getPropertyConnectionName(self, *args):
        return _ODA_Drawings.OdDbBlockParameter_getPropertyConnectionName(self, *args)

    def getPropertyDescription(self, *args):
        return _ODA_Drawings.OdDbBlockParameter_getPropertyDescription(self, *args)

    def getPropertyValue(self, *args):
        return _ODA_Drawings.OdDbBlockParameter_getPropertyValue(self, *args)

    def getComponentForGrip(self, *args):
        return _ODA_Drawings.OdDbBlockParameter_getComponentForGrip(self, *args)

    def setPropertyValue(self, *args):
        return _ODA_Drawings.OdDbBlockParameter_setPropertyValue(self, *args)

    def chainActions(self, *args):
        return _ODA_Drawings.OdDbBlockParameter_chainActions(self, *args)

    def setChainActions(self, *args):
        return _ODA_Drawings.OdDbBlockParameter_setChainActions(self, *args)

    def showProperties(self, *args):
        return _ODA_Drawings.OdDbBlockParameter_showProperties(self, *args)

    def setShowProperties(self, *args):
        return _ODA_Drawings.OdDbBlockParameter_setShowProperties(self, *args)

    def addGrip(self, *args):
        return _ODA_Drawings.OdDbBlockParameter_addGrip(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockParameter

# Register OdDbBlockParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlockParameter_swigregister(OdDbBlockParameter)

def OdDbBlockParameter_cast(*args):
    return _ODA_Drawings.OdDbBlockParameter_cast(*args)

def OdDbBlockParameter_desc(*args):
    return _ODA_Drawings.OdDbBlockParameter_desc(*args)

def OdDbBlockParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlockParameter_createObject(*args)

class OdDbCell(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_row = property(_ODA_Drawings.OdDbCell_m_row_get, _ODA_Drawings.OdDbCell_m_row_set)
    m_column = property(_ODA_Drawings.OdDbCell_m_column_get, _ODA_Drawings.OdDbCell_m_column_set)

    def __init__(self, *args):
        _ODA_Drawings.OdDbCell_swiginit(self, _ODA_Drawings.new_OdDbCell(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbCell

# Register OdDbCell in _ODA_Drawings:
_ODA_Drawings.OdDbCell_swigregister(OdDbCell)

class OdDbTableIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbTableIterator_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbTableIterator_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbTableIterator_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbTableIterator_queryX(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbTableIterator

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbTableIterator_createObject(*args)

    def start(self, *args):
        return _ODA_Drawings.OdDbTableIterator_start(self, *args)

    def step(self, *args):
        return _ODA_Drawings.OdDbTableIterator_step(self, *args)

    def done(self, *args):
        return _ODA_Drawings.OdDbTableIterator_done(self, *args)

    def seek(self, *args):
        return _ODA_Drawings.OdDbTableIterator_seek(self, *args)

    def getCell(self, *args):
        return _ODA_Drawings.OdDbTableIterator_getCell(self, *args)

    def getRow(self, *args):
        return _ODA_Drawings.OdDbTableIterator_getRow(self, *args)

    def getColumn(self, *args):
        return _ODA_Drawings.OdDbTableIterator_getColumn(self, *args)

# Register OdDbTableIterator in _ODA_Drawings:
_ODA_Drawings.OdDbTableIterator_swigregister(OdDbTableIterator)

def OdDbTableIterator_cast(*args):
    return _ODA_Drawings.OdDbTableIterator_cast(*args)

def OdDbTableIterator_desc(*args):
    return _ODA_Drawings.OdDbTableIterator_desc(*args)

def OdDbTableIterator_createObject(*args):
    return _ODA_Drawings.OdDbTableIterator_createObject(*args)

class OdFd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kEvalRecursive = _ODA_Drawings.OdFd_kEvalRecursive

    def __init__(self, *args):
        _ODA_Drawings.OdFd_swiginit(self, _ODA_Drawings.new_OdFd(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdFd

# Register OdFd in _ODA_Drawings:
_ODA_Drawings.OdFd_swigregister(OdFd)

class OdDbField(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    kInitialized = _ODA_Drawings.OdDbField_kInitialized
    kCompiled = _ODA_Drawings.OdDbField_kCompiled
    kModified = _ODA_Drawings.OdDbField_kModified
    kEvaluated = _ODA_Drawings.OdDbField_kEvaluated
    kHasCache = _ODA_Drawings.OdDbField_kHasCache
    kHasFormattedString = _ODA_Drawings.OdDbField_kHasFormattedString
    kDisable = _ODA_Drawings.OdDbField_kDisable
    kOnOpen = _ODA_Drawings.OdDbField_kOnOpen
    kOnSave = _ODA_Drawings.OdDbField_kOnSave
    kOnPlot = _ODA_Drawings.OdDbField_kOnPlot
    kOnEtransmit = _ODA_Drawings.OdDbField_kOnEtransmit
    kOnRegen = _ODA_Drawings.OdDbField_kOnRegen
    kOnDemand = _ODA_Drawings.OdDbField_kOnDemand
    kAutomatic = _ODA_Drawings.OdDbField_kAutomatic
    kOpen = _ODA_Drawings.OdDbField_kOpen
    kSave = _ODA_Drawings.OdDbField_kSave
    kPlot = _ODA_Drawings.OdDbField_kPlot
    kEtransmit = _ODA_Drawings.OdDbField_kEtransmit
    kRegen = _ODA_Drawings.OdDbField_kRegen
    kDemand = _ODA_Drawings.OdDbField_kDemand
    kPreview = _ODA_Drawings.OdDbField_kPreview
    kNotYetEvaluated = _ODA_Drawings.OdDbField_kNotYetEvaluated
    kSuccess = _ODA_Drawings.OdDbField_kSuccess
    kEvaluatorNotFound = _ODA_Drawings.OdDbField_kEvaluatorNotFound
    kSyntaxError = _ODA_Drawings.OdDbField_kSyntaxError
    kInvalidCode = _ODA_Drawings.OdDbField_kInvalidCode
    kInvalidContext = _ODA_Drawings.OdDbField_kInvalidContext
    kOtherError = _ODA_Drawings.OdDbField_kOtherError
    kRawCode = _ODA_Drawings.OdDbField_kRawCode
    kFieldCode = _ODA_Drawings.OdDbField_kFieldCode
    kEvaluatedText = _ODA_Drawings.OdDbField_kEvaluatedText
    kEvaluatedChildren = _ODA_Drawings.OdDbField_kEvaluatedChildren
    kObjectReference = _ODA_Drawings.OdDbField_kObjectReference
    kAddMarkers = _ODA_Drawings.OdDbField_kAddMarkers
    kEscapeBackslash = _ODA_Drawings.OdDbField_kEscapeBackslash
    kStripOptions = _ODA_Drawings.OdDbField_kStripOptions
    kPreserveFields = _ODA_Drawings.OdDbField_kPreserveFields
    kTextField = _ODA_Drawings.OdDbField_kTextField
    kPreserveOptions = _ODA_Drawings.OdDbField_kPreserveOptions
    kDetachChildren = _ODA_Drawings.OdDbField_kDetachChildren
    kChildObjectReference = _ODA_Drawings.OdDbField_kChildObjectReference
    kForExpression = _ODA_Drawings.OdDbField_kForExpression
    kSkipFilingResult = _ODA_Drawings.OdDbField_kSkipFilingResult

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbField_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbField_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbField_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbField_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbField_createObject(*args)

    def setInObject(self, *args):
        return _ODA_Drawings.OdDbField_setInObject(self, *args)

    def postInDatabase(self, *args):
        return _ODA_Drawings.OdDbField_postInDatabase(self, *args)

    def state(self, *args):
        return _ODA_Drawings.OdDbField_state(self, *args)

    def evaluationStatus(self, *args):
        return _ODA_Drawings.OdDbField_evaluationStatus(self, *args)

    def evaluationOption(self, *args):
        return _ODA_Drawings.OdDbField_evaluationOption(self, *args)

    def setEvaluationOption(self, *args):
        return _ODA_Drawings.OdDbField_setEvaluationOption(self, *args)

    def filingOption(self, *args):
        return _ODA_Drawings.OdDbField_filingOption(self, *args)

    def setFilingOption(self, *args):
        return _ODA_Drawings.OdDbField_setFilingOption(self, *args)

    def evaluatorId(self, *args):
        return _ODA_Drawings.OdDbField_evaluatorId(self, *args)

    def setEvaluatorId(self, *args):
        return _ODA_Drawings.OdDbField_setEvaluatorId(self, *args)

    def isTextField(self, *args):
        return _ODA_Drawings.OdDbField_isTextField(self, *args)

    def getFieldCode(self, *args):
        return _ODA_Drawings.OdDbField_getFieldCode(self, *args)

    def setFieldCode(self, *args):
        return _ODA_Drawings.OdDbField_setFieldCode(self, *args)

    def setFieldCodeWithParse(self, *args):
        return _ODA_Drawings.OdDbField_setFieldCodeWithParse(self, *args)

    def childCount(self, *args):
        return _ODA_Drawings.OdDbField_childCount(self, *args)

    def getChild(self, *args):
        return _ODA_Drawings.OdDbField_getChild(self, *args)

    def getFormat(self, *args):
        return _ODA_Drawings.OdDbField_getFormat(self, *args)

    def setFormat(self, *args):
        return _ODA_Drawings.OdDbField_setFormat(self, *args)

    def evaluate(self, *args):
        return _ODA_Drawings.OdDbField_evaluate(self, *args)

    def dataType(self, *args):
        return _ODA_Drawings.OdDbField_dataType(self, *args)

    def getValue(self, *args):
        return _ODA_Drawings.OdDbField_getValue(self, *args)

    def hasHyperlink(self, *args):
        return _ODA_Drawings.OdDbField_hasHyperlink(self, *args)

    def getHyperlink(self, *args):
        return _ODA_Drawings.OdDbField_getHyperlink(self, *args)

    def setHyperlink(self, *args):
        return _ODA_Drawings.OdDbField_setHyperlink(self, *args)

    def removeHyperlink(self, *args):
        return _ODA_Drawings.OdDbField_removeHyperlink(self, *args)

    def getData(self, *args):
        return _ODA_Drawings.OdDbField_getData(self, *args)

    def setData(self, *args):
        return _ODA_Drawings.OdDbField_setData(self, *args)

    def setField(self, *args):
        return _ODA_Drawings.OdDbField_setField(self, *args)

    def removeField(self, *args):
        return _ODA_Drawings.OdDbField_removeField(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbField_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbField_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbField_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbField_dxfOutFields(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbField_subClose(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbField

# Register OdDbField in _ODA_Drawings:
_ODA_Drawings.OdDbField_swigregister(OdDbField)

def OdDbField_cast(*args):
    return _ODA_Drawings.OdDbField_cast(*args)

def OdDbField_desc(*args):
    return _ODA_Drawings.OdDbField_desc(*args)

def OdDbField_createObject(*args):
    return _ODA_Drawings.OdDbField_createObject(*args)


def copyTextFieldToObject(*args):
    return _ODA_Drawings.copyTextFieldToObject(*args)

def copyFieldWithChild(*args):
    return _ODA_Drawings.copyFieldWithChild(*args)
class OdDbLinkedData(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLinkedData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLinkedData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLinkedData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLinkedData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLinkedData_createObject(*args)

    def name(self, *args):
        return _ODA_Drawings.OdDbLinkedData_name(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbLinkedData_setName(self, *args)

    def description(self, *args):
        return _ODA_Drawings.OdDbLinkedData_description(self, *args)

    def setDescription(self, *args):
        return _ODA_Drawings.OdDbLinkedData_setDescription(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbLinkedData_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbLinkedData_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbLinkedData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbLinkedData_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLinkedData

# Register OdDbLinkedData in _ODA_Drawings:
_ODA_Drawings.OdDbLinkedData_swigregister(OdDbLinkedData)

def OdDbLinkedData_cast(*args):
    return _ODA_Drawings.OdDbLinkedData_cast(*args)

def OdDbLinkedData_desc(*args):
    return _ODA_Drawings.OdDbLinkedData_desc(*args)

def OdDbLinkedData_createObject(*args):
    return _ODA_Drawings.OdDbLinkedData_createObject(*args)

class OdDbObjectIterator(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectIterator_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectIterator_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectIterator_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectIterator_createObject(*args)

    def start(self, *args):
        return _ODA_Drawings.OdDbObjectIterator_start(self, *args)

    def done(self, *args):
        return _ODA_Drawings.OdDbObjectIterator_done(self, *args)

    def objectId(self, *args):
        return _ODA_Drawings.OdDbObjectIterator_objectId(self, *args)

    def entity(self, *args):
        return _ODA_Drawings.OdDbObjectIterator_entity(self, *args)

    def step(self, *args):
        return _ODA_Drawings.OdDbObjectIterator_step(self, *args)

    def seek(self, *args):
        return _ODA_Drawings.OdDbObjectIterator_seek(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectIterator

# Register OdDbObjectIterator in _ODA_Drawings:
_ODA_Drawings.OdDbObjectIterator_swigregister(OdDbObjectIterator)

def OdDbObjectIterator_cast(*args):
    return _ODA_Drawings.OdDbObjectIterator_cast(*args)

def OdDbObjectIterator_desc(*args):
    return _ODA_Drawings.OdDbObjectIterator_desc(*args)

def OdDbObjectIterator_createObject(*args):
    return _ODA_Drawings.OdDbObjectIterator_createObject(*args)

class OdModelerGeometryCreator(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdModelerGeometryCreator_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdModelerGeometryCreator_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdModelerGeometryCreator_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdModelerGeometryCreator_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdModelerGeometryCreator_createObject(*args)

    def createModeler(self, *args):
        return _ODA_Drawings.OdModelerGeometryCreator_createModeler(self, *args)

    def createSat(self, *args):
        return _ODA_Drawings.OdModelerGeometryCreator_createSat(self, *args)

    def createRegionFromCurves(self, *args):
        return _ODA_Drawings.OdModelerGeometryCreator_createRegionFromCurves(self, *args)

    def initBrepBuilder(self, *args):
        return _ODA_Drawings.OdModelerGeometryCreator_initBrepBuilder(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdModelerGeometryCreator

# Register OdModelerGeometryCreator in _ODA_Drawings:
_ODA_Drawings.OdModelerGeometryCreator_swigregister(OdModelerGeometryCreator)

def OdModelerGeometryCreator_cast(*args):
    return _ODA_Drawings.OdModelerGeometryCreator_cast(*args)

def OdModelerGeometryCreator_desc(*args):
    return _ODA_Drawings.OdModelerGeometryCreator_desc(*args)

def OdModelerGeometryCreator_createObject(*args):
    return _ODA_Drawings.OdModelerGeometryCreator_createObject(*args)

class OdDbPlotSettingsValidator(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_createObject(*args)

    def setPlotCfgName(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_setPlotCfgName(self, *args)

    def setCanonicalMediaName(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_setCanonicalMediaName(self, *args)

    def setPlotOrigin(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_setPlotOrigin(self, *args)

    def setPlotPaperUnits(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_setPlotPaperUnits(self, *args)

    def setPlotRotation(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_setPlotRotation(self, *args)

    def setPlotCentered(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_setPlotCentered(self, *args)

    def setPlotType(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_setPlotType(self, *args)

    def setPlotWindowArea(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_setPlotWindowArea(self, *args)

    def setPlotViewName(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_setPlotViewName(self, *args)

    def setUseStandardScale(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_setUseStandardScale(self, *args)

    def setCustomPrintScale(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_setCustomPrintScale(self, *args)

    def setCurrentStyleSheet(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_setCurrentStyleSheet(self, *args)

    def setStdScaleType(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_setStdScaleType(self, *args)

    def setStdScale(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_setStdScale(self, *args)

    def plotDeviceList(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_plotDeviceList(self, *args)

    def canonicalMediaNameList(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_canonicalMediaNameList(self, *args)

    def getLocaleMediaName(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_getLocaleMediaName(self, *args)

    def setClosestMediaName(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_setClosestMediaName(self, *args)

    def plotStyleSheetList(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_plotStyleSheetList(self, *args)

    def refreshLists(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_refreshLists(self, *args)

    def setZoomToPaperOnUpdate(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_setZoomToPaperOnUpdate(self, *args)

    def setDefaultPlotConfig(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidator_setDefaultPlotConfig(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPlotSettingsValidator

# Register OdDbPlotSettingsValidator in _ODA_Drawings:
_ODA_Drawings.OdDbPlotSettingsValidator_swigregister(OdDbPlotSettingsValidator)

def OdDbPlotSettingsValidator_cast(*args):
    return _ODA_Drawings.OdDbPlotSettingsValidator_cast(*args)

def OdDbPlotSettingsValidator_desc(*args):
    return _ODA_Drawings.OdDbPlotSettingsValidator_desc(*args)

def OdDbPlotSettingsValidator_createObject(*args):
    return _ODA_Drawings.OdDbPlotSettingsValidator_createObject(*args)

class OdDbLayoutManagerReactor(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLayoutManagerReactor_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLayoutManagerReactor_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLayoutManagerReactor_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLayoutManagerReactor_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLayoutManagerReactor_createObject(*args)

    def layoutCreated(self, *args):
        return _ODA_Drawings.OdDbLayoutManagerReactor_layoutCreated(self, *args)

    def layoutToBeRemoved(self, *args):
        return _ODA_Drawings.OdDbLayoutManagerReactor_layoutToBeRemoved(self, *args)

    def layoutRemoved(self, *args):
        return _ODA_Drawings.OdDbLayoutManagerReactor_layoutRemoved(self, *args)

    def abortLayoutRemoved(self, *args):
        return _ODA_Drawings.OdDbLayoutManagerReactor_abortLayoutRemoved(self, *args)

    def layoutToBeCopied(self, *args):
        return _ODA_Drawings.OdDbLayoutManagerReactor_layoutToBeCopied(self, *args)

    def layoutCopied(self, *args):
        return _ODA_Drawings.OdDbLayoutManagerReactor_layoutCopied(self, *args)

    def abortLayoutCopied(self, *args):
        return _ODA_Drawings.OdDbLayoutManagerReactor_abortLayoutCopied(self, *args)

    def layoutToBeRenamed(self, *args):
        return _ODA_Drawings.OdDbLayoutManagerReactor_layoutToBeRenamed(self, *args)

    def layoutRenamed(self, *args):
        return _ODA_Drawings.OdDbLayoutManagerReactor_layoutRenamed(self, *args)

    def abortLayoutRename(self, *args):
        return _ODA_Drawings.OdDbLayoutManagerReactor_abortLayoutRename(self, *args)

    def layoutSwitched(self, *args):
        return _ODA_Drawings.OdDbLayoutManagerReactor_layoutSwitched(self, *args)

    def plotStyleTableChanged(self, *args):
        return _ODA_Drawings.OdDbLayoutManagerReactor_plotStyleTableChanged(self, *args)

    def layoutToBeDeactivated(self, *args):
        return _ODA_Drawings.OdDbLayoutManagerReactor_layoutToBeDeactivated(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLayoutManagerReactor

# Register OdDbLayoutManagerReactor in _ODA_Drawings:
_ODA_Drawings.OdDbLayoutManagerReactor_swigregister(OdDbLayoutManagerReactor)

def OdDbLayoutManagerReactor_cast(*args):
    return _ODA_Drawings.OdDbLayoutManagerReactor_cast(*args)

def OdDbLayoutManagerReactor_desc(*args):
    return _ODA_Drawings.OdDbLayoutManagerReactor_desc(*args)

def OdDbLayoutManagerReactor_createObject(*args):
    return _ODA_Drawings.OdDbLayoutManagerReactor_createObject(*args)

class OdDbLayoutManager(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLayoutManager_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLayoutManager_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLayoutManager_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLayoutManager_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLayoutManager_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLayoutManager

    def setCurrentLayout(self, *args):
        return _ODA_Drawings.OdDbLayoutManager_setCurrentLayout(self, *args)

    def findActiveLayout(self, *args):
        return _ODA_Drawings.OdDbLayoutManager_findActiveLayout(self, *args)

    def getActiveLayoutBTRId(self, *args):
        return _ODA_Drawings.OdDbLayoutManager_getActiveLayoutBTRId(self, *args)

    def findLayoutNamed(self, *args):
        return _ODA_Drawings.OdDbLayoutManager_findLayoutNamed(self, *args)

    def deleteLayout(self, *args):
        return _ODA_Drawings.OdDbLayoutManager_deleteLayout(self, *args)

    def createLayout(self, *args):
        return _ODA_Drawings.OdDbLayoutManager_createLayout(self, *args)

    def renameLayout(self, *args):
        return _ODA_Drawings.OdDbLayoutManager_renameLayout(self, *args)

    def cloneLayout(self, *args):
        return _ODA_Drawings.OdDbLayoutManager_cloneLayout(self, *args)

    def getNonRectVPIdFromClipId(self, *args):
        return _ODA_Drawings.OdDbLayoutManager_getNonRectVPIdFromClipId(self, *args)

    def isVpnumClipped(self, *args):
        return _ODA_Drawings.OdDbLayoutManager_isVpnumClipped(self, *args)

    def countLayouts(self, *args):
        return _ODA_Drawings.OdDbLayoutManager_countLayouts(self, *args)

    def addReactor(self, *args):
        return _ODA_Drawings.OdDbLayoutManager_addReactor(self, *args)

    def removeReactor(self, *args):
        return _ODA_Drawings.OdDbLayoutManager_removeReactor(self, *args)

# Register OdDbLayoutManager in _ODA_Drawings:
_ODA_Drawings.OdDbLayoutManager_swigregister(OdDbLayoutManager)

def OdDbLayoutManager_cast(*args):
    return _ODA_Drawings.OdDbLayoutManager_cast(*args)

def OdDbLayoutManager_desc(*args):
    return _ODA_Drawings.OdDbLayoutManager_desc(*args)

def OdDbLayoutManager_createObject(*args):
    return _ODA_Drawings.OdDbLayoutManager_createObject(*args)

class OdDbAbstractViewportData(ODA_Kernel.OdAbstractViewPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAbstractViewportData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAbstractViewportData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAbstractViewportData_createObject(*args)

    def setProps(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setProps(self, *args)

    def setUcs(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setUcs(self, *args)

    def hasViewOffset(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_hasViewOffset(self, *args)

    def applyPlotSettings(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_applyPlotSettings(self, *args)

    def compatibleCopyObject(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_compatibleCopyObject(self, *args)

    def isUcsSavedWithViewport(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_isUcsSavedWithViewport(self, *args)

    def setUcsPerViewport(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setUcsPerViewport(self, *args)

    def isUcsFollowModeOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_isUcsFollowModeOn(self, *args)

    def setUcsFollowModeOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setUcsFollowModeOn(self, *args)

    def circleSides(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_circleSides(self, *args)

    def setCircleSides(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setCircleSides(self, *args)

    def isGridOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_isGridOn(self, *args)

    def setGridOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setGridOn(self, *args)

    def gridIncrement(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_gridIncrement(self, *args)

    def setGridIncrement(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setGridIncrement(self, *args)

    def isGridBoundToLimits(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_isGridBoundToLimits(self, *args)

    def setGridBoundToLimits(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setGridBoundToLimits(self, *args)

    def isGridAdaptive(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_isGridAdaptive(self, *args)

    def setGridAdaptive(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setGridAdaptive(self, *args)

    def isGridSubdivisionRestricted(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_isGridSubdivisionRestricted(self, *args)

    def setGridSubdivisionRestricted(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setGridSubdivisionRestricted(self, *args)

    def isGridFollow(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_isGridFollow(self, *args)

    def setGridFollow(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setGridFollow(self, *args)

    def gridMajor(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_gridMajor(self, *args)

    def setGridMajor(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setGridMajor(self, *args)

    def isUcsIconVisible(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_isUcsIconVisible(self, *args)

    def setUcsIconVisible(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setUcsIconVisible(self, *args)

    def isUcsIconAtOrigin(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_isUcsIconAtOrigin(self, *args)

    def setUcsIconAtOrigin(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setUcsIconAtOrigin(self, *args)

    def isSnapOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_isSnapOn(self, *args)

    def setSnapOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setSnapOn(self, *args)

    def isSnapIsometric(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_isSnapIsometric(self, *args)

    def setSnapIsometric(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setSnapIsometric(self, *args)

    def snapAngle(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_snapAngle(self, *args)

    def setSnapAngle(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setSnapAngle(self, *args)

    def snapBase(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_snapBase(self, *args)

    def setSnapBase(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setSnapBase(self, *args)

    def snapIncrement(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_snapIncrement(self, *args)

    def setSnapIncrement(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setSnapIncrement(self, *args)

    def snapIsoPair(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_snapIsoPair(self, *args)

    def setSnapIsoPair(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setSnapIsoPair(self, *args)

    def brightness(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_brightness(self, *args)

    def setBrightness(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setBrightness(self, *args)

    def contrast(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_contrast(self, *args)

    def setContrast(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setContrast(self, *args)

    def ambientLightColor(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_ambientLightColor(self, *args)

    def setAmbientLightColor(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setAmbientLightColor(self, *args)

    def sunId(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_sunId(self, *args)

    def setSun(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setSun(self, *args)

    def toneOperatorParameters(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_toneOperatorParameters(self, *args)

    def setToneOperatorParameters(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setToneOperatorParameters(self, *args)

    def gsView(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_gsView(self, *args)

    def setGsView(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setGsView(self, *args)

    def navvcubedisplay(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_navvcubedisplay(self, *args)

    def setNavvcubedisplay(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setNavvcubedisplay(self, *args)

    def setView(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportData_setView(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAbstractViewportData

# Register OdDbAbstractViewportData in _ODA_Drawings:
_ODA_Drawings.OdDbAbstractViewportData_swigregister(OdDbAbstractViewportData)

def OdDbAbstractViewportData_cast(*args):
    return _ODA_Drawings.OdDbAbstractViewportData_cast(*args)

def OdDbAbstractViewportData_desc(*args):
    return _ODA_Drawings.OdDbAbstractViewportData_desc(*args)

def OdDbAbstractViewportData_createObject(*args):
    return _ODA_Drawings.OdDbAbstractViewportData_createObject(*args)

class SavePeWriteEnabler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.SavePeWriteEnabler_swiginit(self, _ODA_Drawings.new_SavePeWriteEnabler(*args))
    __swig_destroy__ = _ODA_Drawings.delete_SavePeWriteEnabler

# Register SavePeWriteEnabler in _ODA_Drawings:
_ODA_Drawings.SavePeWriteEnabler_swigregister(SavePeWriteEnabler)

class OdSmProjectPointLocation(OdSmPersist):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmProjectPointLocation_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmProjectPointLocation_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocation_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocation_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmProjectPointLocation_createObject(*args)

    def getName(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocation_getName(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocation_setName(self, *args)

    def getURL(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocation_getURL(self, *args)

    def setURL(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocation_setURL(self, *args)

    def getFolder(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocation_getFolder(self, *args)

    def setFolder(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocation_setFolder(self, *args)

    def getUsername(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocation_getUsername(self, *args)

    def setUsername(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocation_setUsername(self, *args)

    def getPassword(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocation_getPassword(self, *args)

    def setPassword(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocation_setPassword(self, *args)

    def getResourceType(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocation_getResourceType(self, *args)

    def setResourceType(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocation_setResourceType(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmProjectPointLocation

# Register OdSmProjectPointLocation in _ODA_Drawings:
_ODA_Drawings.OdSmProjectPointLocation_swigregister(OdSmProjectPointLocation)

def OdSmProjectPointLocation_cast(*args):
    return _ODA_Drawings.OdSmProjectPointLocation_cast(*args)

def OdSmProjectPointLocation_desc(*args):
    return _ODA_Drawings.OdSmProjectPointLocation_desc(*args)

def OdSmProjectPointLocation_createObject(*args):
    return _ODA_Drawings.OdSmProjectPointLocation_createObject(*args)

class OdSmSheet(OdSmComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmSheet_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmSheet_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmSheet_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmSheet_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmSheet_createObject(*args)

    def getNumber(self, *args):
        return _ODA_Drawings.OdSmSheet_getNumber(self, *args)

    def setNumber(self, *args):
        return _ODA_Drawings.OdSmSheet_setNumber(self, *args)

    def getTitle(self, *args):
        return _ODA_Drawings.OdSmSheet_getTitle(self, *args)

    def setTitle(self, *args):
        return _ODA_Drawings.OdSmSheet_setTitle(self, *args)

    def getLayout(self, *args):
        return _ODA_Drawings.OdSmSheet_getLayout(self, *args)

    def setLayout(self, *args):
        return _ODA_Drawings.OdSmSheet_setLayout(self, *args)

    def getDoNotPlot(self, *args):
        return _ODA_Drawings.OdSmSheet_getDoNotPlot(self, *args)

    def setDoNotPlot(self, *args):
        return _ODA_Drawings.OdSmSheet_setDoNotPlot(self, *args)

    def getSheetViews(self, *args):
        return _ODA_Drawings.OdSmSheet_getSheetViews(self, *args)

    def getRevisionNumber(self, *args):
        return _ODA_Drawings.OdSmSheet_getRevisionNumber(self, *args)

    def setRevisionNumber(self, *args):
        return _ODA_Drawings.OdSmSheet_setRevisionNumber(self, *args)

    def getRevisionDate(self, *args):
        return _ODA_Drawings.OdSmSheet_getRevisionDate(self, *args)

    def setRevisionDate(self, *args):
        return _ODA_Drawings.OdSmSheet_setRevisionDate(self, *args)

    def getIssuePurpose(self, *args):
        return _ODA_Drawings.OdSmSheet_getIssuePurpose(self, *args)

    def setIssuePurpose(self, *args):
        return _ODA_Drawings.OdSmSheet_setIssuePurpose(self, *args)

    def getCategory(self, *args):
        return _ODA_Drawings.OdSmSheet_getCategory(self, *args)

    def setCategory(self, *args):
        return _ODA_Drawings.OdSmSheet_setCategory(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmSheet

# Register OdSmSheet in _ODA_Drawings:
_ODA_Drawings.OdSmSheet_swigregister(OdSmSheet)

def OdSmSheet_cast(*args):
    return _ODA_Drawings.OdSmSheet_cast(*args)

def OdSmSheet_desc(*args):
    return _ODA_Drawings.OdSmSheet_desc(*args)

def OdSmSheet_createObject(*args):
    return _ODA_Drawings.OdSmSheet_createObject(*args)

SHEET_ADDED = _ODA_Drawings.SHEET_ADDED
SHEET_DELETED = _ODA_Drawings.SHEET_DELETED
SHEET_SUBSET_CREATED = _ODA_Drawings.SHEET_SUBSET_CREATED
SHEET_SUBSET_DELETED = _ODA_Drawings.SHEET_SUBSET_DELETED
SHEET_SELECTION_SET_CREATED = _ODA_Drawings.SHEET_SELECTION_SET_CREATED
SHEET_SELECTION_SET_DELETED = _ODA_Drawings.SHEET_SELECTION_SET_DELETED
SHEET_VIEW_CREATED = _ODA_Drawings.SHEET_VIEW_CREATED
SHEET_VIEW_DELETED = _ODA_Drawings.SHEET_VIEW_DELETED
SHEET_VIEW_CATEGORY_CREATED = _ODA_Drawings.SHEET_VIEW_CATEGORY_CREATED
SHEET_VIEW_CATEGORY_DELETED = _ODA_Drawings.SHEET_VIEW_CATEGORY_DELETED
MODEL_RESOURCE_ADDED = _ODA_Drawings.MODEL_RESOURCE_ADDED
MODEL_RESOURCE_DELETED = _ODA_Drawings.MODEL_RESOURCE_DELETED
CALLOUT_BLOCK_ADDED = _ODA_Drawings.CALLOUT_BLOCK_ADDED
CALLOUT_BLOCK_DELETED = _ODA_Drawings.CALLOUT_BLOCK_DELETED
SHEETS_RENUMBERED = _ODA_Drawings.SHEETS_RENUMBERED
ACSM_DATABASE_CREATED = _ODA_Drawings.ACSM_DATABASE_CREATED
ACSM_DATABASE_OPENED = _ODA_Drawings.ACSM_DATABASE_OPENED
ACSM_DATABASE_IS_CLOSING = _ODA_Drawings.ACSM_DATABASE_IS_CLOSING
ACSM_DATABASE_WATCH_ERROR = _ODA_Drawings.ACSM_DATABASE_WATCH_ERROR
ACSM_DATABASE_LOCKED = _ODA_Drawings.ACSM_DATABASE_LOCKED
ACSM_DATABASE_UNLOCKED = _ODA_Drawings.ACSM_DATABASE_UNLOCKED
ACSM_DATABASE_CHANGED = _ODA_Drawings.ACSM_DATABASE_CHANGED
ACSM_DATABASE_INITNEW_BEGIN = _ODA_Drawings.ACSM_DATABASE_INITNEW_BEGIN
ACSM_DATABASE_INITNEW_FAILED = _ODA_Drawings.ACSM_DATABASE_INITNEW_FAILED
ACSM_DATABASE_INITNEW_COMPLETE = _ODA_Drawings.ACSM_DATABASE_INITNEW_COMPLETE
ACSM_DATABASE_LOAD_BEGIN = _ODA_Drawings.ACSM_DATABASE_LOAD_BEGIN
ACSM_DATABASE_LOAD_FAILED = _ODA_Drawings.ACSM_DATABASE_LOAD_FAILED
ACSM_DATABASE_LOAD_COMPLETE = _ODA_Drawings.ACSM_DATABASE_LOAD_COMPLETE
class OdSmEvents(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def onChanged(self, *args):
        return _ODA_Drawings.OdSmEvents_onChanged(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmEvents

# Register OdSmEvents in _ODA_Drawings:
_ODA_Drawings.OdSmEvents_swigregister(OdSmEvents)

class OdDbFilter(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbFilter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbFilter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbFilter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbFilter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbFilter_createObject(*args)

    def indexClass(self, *args):
        return _ODA_Drawings.OdDbFilter_indexClass(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbFilter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbFilter_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbFilter

# Register OdDbFilter in _ODA_Drawings:
_ODA_Drawings.OdDbFilter_swigregister(OdDbFilter)

def OdDbFilter_cast(*args):
    return _ODA_Drawings.OdDbFilter_cast(*args)

def OdDbFilter_desc(*args):
    return _ODA_Drawings.OdDbFilter_desc(*args)

def OdDbFilter_createObject(*args):
    return _ODA_Drawings.OdDbFilter_createObject(*args)

class OdDbRasterImageDef(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRasterImageDef_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRasterImageDef_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRasterImageDef_createObject(*args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_subErase(self, *args)

    def subHandOverTo(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_subHandOverTo(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_subClose(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_dxfOutFields(self, *args)

    def setSourceFileName(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_setSourceFileName(self, *args)

    def sourceFileName(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_sourceFileName(self, *args)

    def load(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_load(self, *args)

    def unload(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_unload(self, *args)

    def isLoaded(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_isLoaded(self, *args)

    def size(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_size(self, *args)

    def resolutionMMPerPixel(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_resolutionMMPerPixel(self, *args)

    def setResolutionMMPerPixel(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_setResolutionMMPerPixel(self, *args)

    def entityCount(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_entityCount(self, *args)

    def updateEntities(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_updateEntities(self, *args)

    def resolutionUnits(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_resolutionUnits(self, *args)

    def setResolutionUnits(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_setResolutionUnits(self, *args)

    def image(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_image(self, *args)

    def setImage(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_setImage(self, *args)

    @staticmethod
    def createImageDictionary(*args):
        return _ODA_Drawings.OdDbRasterImageDef_createImageDictionary(*args)

    @staticmethod
    def imageDictionary(*args):
        return _ODA_Drawings.OdDbRasterImageDef_imageDictionary(*args)
    kMaxSuggestNameSize = _ODA_Drawings.OdDbRasterImageDef_kMaxSuggestNameSize

    @staticmethod
    def suggestName(*args):
        return _ODA_Drawings.OdDbRasterImageDef_suggestName(*args)

    def activeFileName(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_activeFileName(self, *args)

    def setActiveFileName(self, *args):
        return _ODA_Drawings.OdDbRasterImageDef_setActiveFileName(self, *args)

    @staticmethod
    def classVersion(*args):
        return _ODA_Drawings.OdDbRasterImageDef_classVersion(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRasterImageDef

# Register OdDbRasterImageDef in _ODA_Drawings:
_ODA_Drawings.OdDbRasterImageDef_swigregister(OdDbRasterImageDef)

def OdDbRasterImageDef_cast(*args):
    return _ODA_Drawings.OdDbRasterImageDef_cast(*args)

def OdDbRasterImageDef_desc(*args):
    return _ODA_Drawings.OdDbRasterImageDef_desc(*args)

def OdDbRasterImageDef_createObject(*args):
    return _ODA_Drawings.OdDbRasterImageDef_createObject(*args)

def OdDbRasterImageDef_createImageDictionary(*args):
    return _ODA_Drawings.OdDbRasterImageDef_createImageDictionary(*args)

def OdDbRasterImageDef_imageDictionary(*args):
    return _ODA_Drawings.OdDbRasterImageDef_imageDictionary(*args)

def OdDbRasterImageDef_suggestName(*args):
    return _ODA_Drawings.OdDbRasterImageDef_suggestName(*args)

def OdDbRasterImageDef_classVersion(*args):
    return _ODA_Drawings.OdDbRasterImageDef_classVersion(*args)

class OdDbRasterImageDefReactor(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRasterImageDefReactor_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRasterImageDefReactor_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRasterImageDefReactor_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRasterImageDefReactor_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRasterImageDefReactor_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbRasterImageDefReactor_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbRasterImageDefReactor_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbRasterImageDefReactor_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbRasterImageDefReactor_dxfOutFields(self, *args)

    def erased(self, *args):
        return _ODA_Drawings.OdDbRasterImageDefReactor_erased(self, *args)

    def modified(self, *args):
        return _ODA_Drawings.OdDbRasterImageDefReactor_modified(self, *args)
    kUnload = _ODA_Drawings.OdDbRasterImageDefReactor_kUnload
    kErase = _ODA_Drawings.OdDbRasterImageDefReactor_kErase

    @staticmethod
    def setEnable(*args):
        return _ODA_Drawings.OdDbRasterImageDefReactor_setEnable(*args)

    def onDeleteImage(self, *args):
        return _ODA_Drawings.OdDbRasterImageDefReactor_onDeleteImage(self, *args)

    @staticmethod
    def classVersion(*args):
        return _ODA_Drawings.OdDbRasterImageDefReactor_classVersion(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRasterImageDefReactor

# Register OdDbRasterImageDefReactor in _ODA_Drawings:
_ODA_Drawings.OdDbRasterImageDefReactor_swigregister(OdDbRasterImageDefReactor)

def OdDbRasterImageDefReactor_cast(*args):
    return _ODA_Drawings.OdDbRasterImageDefReactor_cast(*args)

def OdDbRasterImageDefReactor_desc(*args):
    return _ODA_Drawings.OdDbRasterImageDefReactor_desc(*args)

def OdDbRasterImageDefReactor_createObject(*args):
    return _ODA_Drawings.OdDbRasterImageDefReactor_createObject(*args)

def OdDbRasterImageDefReactor_setEnable(*args):
    return _ODA_Drawings.OdDbRasterImageDefReactor_setEnable(*args)

def OdDbRasterImageDefReactor_classVersion(*args):
    return _ODA_Drawings.OdDbRasterImageDefReactor_classVersion(*args)

class OdDbRasterImageDefTransReactor(OdDbObjectReactor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRasterImageDefTransReactor_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRasterImageDefTransReactor_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRasterImageDefTransReactor_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRasterImageDefTransReactor_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRasterImageDefTransReactor_createObject(*args)

    def onDeleteImage(self, *args):
        return _ODA_Drawings.OdDbRasterImageDefTransReactor_onDeleteImage(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRasterImageDefTransReactor

# Register OdDbRasterImageDefTransReactor in _ODA_Drawings:
_ODA_Drawings.OdDbRasterImageDefTransReactor_swigregister(OdDbRasterImageDefTransReactor)

def OdDbRasterImageDefTransReactor_cast(*args):
    return _ODA_Drawings.OdDbRasterImageDefTransReactor_cast(*args)

def OdDbRasterImageDefTransReactor_desc(*args):
    return _ODA_Drawings.OdDbRasterImageDefTransReactor_desc(*args)

def OdDbRasterImageDefTransReactor_createObject(*args):
    return _ODA_Drawings.OdDbRasterImageDefTransReactor_createObject(*args)

class OdDbImage(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbImage_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbImage_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbImage_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbImage_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbImage_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbImage

# Register OdDbImage in _ODA_Drawings:
_ODA_Drawings.OdDbImage_swigregister(OdDbImage)

def OdDbImage_cast(*args):
    return _ODA_Drawings.OdDbImage_cast(*args)

def OdDbImage_desc(*args):
    return _ODA_Drawings.OdDbImage_desc(*args)

def OdDbImage_createObject(*args):
    return _ODA_Drawings.OdDbImage_createObject(*args)

k2dVertex = _ODA_Drawings.k2dVertex
k2dSplineCtlVertex = _ODA_Drawings.k2dSplineCtlVertex
k2dSplineFitVertex = _ODA_Drawings.k2dSplineFitVertex
k2dCurveFitVertex = _ODA_Drawings.k2dCurveFitVertex
class OdDb2dVertex(OdDbVertex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDb2dVertex_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDb2dVertex_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDb2dVertex_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDb2dVertex_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDb2dVertex_createObject(*args)

    def vertexType(self, *args):
        return _ODA_Drawings.OdDb2dVertex_vertexType(self, *args)

    def setVertexType(self, *args):
        return _ODA_Drawings.OdDb2dVertex_setVertexType(self, *args)

    def position(self, *args):
        return _ODA_Drawings.OdDb2dVertex_position(self, *args)

    def setPosition(self, *args):
        return _ODA_Drawings.OdDb2dVertex_setPosition(self, *args)

    def startWidth(self, *args):
        return _ODA_Drawings.OdDb2dVertex_startWidth(self, *args)

    def setStartWidth(self, *args):
        return _ODA_Drawings.OdDb2dVertex_setStartWidth(self, *args)

    def endWidth(self, *args):
        return _ODA_Drawings.OdDb2dVertex_endWidth(self, *args)

    def setEndWidth(self, *args):
        return _ODA_Drawings.OdDb2dVertex_setEndWidth(self, *args)

    def bulge(self, *args):
        return _ODA_Drawings.OdDb2dVertex_bulge(self, *args)

    def setBulge(self, *args):
        return _ODA_Drawings.OdDb2dVertex_setBulge(self, *args)

    def isTangentUsed(self, *args):
        return _ODA_Drawings.OdDb2dVertex_isTangentUsed(self, *args)

    def useTangent(self, *args):
        return _ODA_Drawings.OdDb2dVertex_useTangent(self, *args)

    def ignoreTangent(self, *args):
        return _ODA_Drawings.OdDb2dVertex_ignoreTangent(self, *args)

    def tangent(self, *args):
        return _ODA_Drawings.OdDb2dVertex_tangent(self, *args)

    def setTangent(self, *args):
        return _ODA_Drawings.OdDb2dVertex_setTangent(self, *args)

    def vertexIdentifier(self, *args):
        return _ODA_Drawings.OdDb2dVertex_vertexIdentifier(self, *args)

    def setVertexIdentifier(self, *args):
        return _ODA_Drawings.OdDb2dVertex_setVertexIdentifier(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDb2dVertex_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDb2dVertex_dwgOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDb2dVertex_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDb2dVertex_dxfOutFields_R12(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDb2dVertex_subTransformBy(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.OdDb2dVertex_subGetTransformedCopy(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDb2dVertex

# Register OdDb2dVertex in _ODA_Drawings:
_ODA_Drawings.OdDb2dVertex_swigregister(OdDb2dVertex)

def OdDb2dVertex_cast(*args):
    return _ODA_Drawings.OdDb2dVertex_cast(*args)

def OdDb2dVertex_desc(*args):
    return _ODA_Drawings.OdDb2dVertex_desc(*args)

def OdDb2dVertex_createObject(*args):
    return _ODA_Drawings.OdDb2dVertex_createObject(*args)

class OdDbBlock1PtParameter(OdDbBlockParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlock1PtParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlock1PtParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlock1PtParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlock1PtParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlock1PtParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlock1PtParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlock1PtParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlock1PtParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlock1PtParameter_dxfOutFields(self, *args)

    def getAssociatedGrip(self, *args):
        return _ODA_Drawings.OdDbBlock1PtParameter_getAssociatedGrip(self, *args)

    def graphEvalEnd(self, *args):
        return _ODA_Drawings.OdDbBlock1PtParameter_graphEvalEnd(self, *args)

    def definitionPoint(self, *args):
        return _ODA_Drawings.OdDbBlock1PtParameter_definitionPoint(self, *args)

    def setDefinitionPoint(self, *args):
        return _ODA_Drawings.OdDbBlock1PtParameter_setDefinitionPoint(self, *args)

    def point(self, *args):
        return _ODA_Drawings.OdDbBlock1PtParameter_point(self, *args)

    def setPoint(self, *args):
        return _ODA_Drawings.OdDbBlock1PtParameter_setPoint(self, *args)

    def updatedPoint(self, *args):
        return _ODA_Drawings.OdDbBlock1PtParameter_updatedPoint(self, *args)

    def setUpdatedPoint(self, *args):
        return _ODA_Drawings.OdDbBlock1PtParameter_setUpdatedPoint(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlock1PtParameter

# Register OdDbBlock1PtParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlock1PtParameter_swigregister(OdDbBlock1PtParameter)

def OdDbBlock1PtParameter_cast(*args):
    return _ODA_Drawings.OdDbBlock1PtParameter_cast(*args)

def OdDbBlock1PtParameter_desc(*args):
    return _ODA_Drawings.OdDbBlock1PtParameter_desc(*args)

def OdDbBlock1PtParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlock1PtParameter_createObject(*args)

class OdDbBlock2PtParameter(OdDbBlockParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlock2PtParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlock2PtParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlock2PtParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_dxfOutFields(self, *args)
    start = _ODA_Drawings.OdDbBlock2PtParameter_start
    mid = _ODA_Drawings.OdDbBlock2PtParameter_mid

    def basePoint(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_basePoint(self, *args)

    def endPoint(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_endPoint(self, *args)

    def distance(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_distance(self, *args)

    def angle(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_angle(self, *args)

    def baseLocation(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_baseLocation(self, *args)

    def definitionBasePoint(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_definitionBasePoint(self, *args)

    def definitionEndPoint(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_definitionEndPoint(self, *args)

    def definitionDistance(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_definitionDistance(self, *args)

    def definitionAngle(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_definitionAngle(self, *args)

    def updatedBasePoint(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_updatedBasePoint(self, *args)

    def updatedEndPoint(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_updatedEndPoint(self, *args)

    def updatedDistance(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_updatedDistance(self, *args)

    def updatedAngle(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_updatedAngle(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_normal(self, *args)

    def getAssociatedGrip(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_getAssociatedGrip(self, *args)

    def graphEvalEnd(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_graphEvalEnd(self, *args)

    def parameterComponentHasAction(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_parameterComponentHasAction(self, *args)

    def setBaseLocation(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_setBaseLocation(self, *args)

    def setBasePoint(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_setBasePoint(self, *args)

    def setEndPoint(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_setEndPoint(self, *args)

    def setDefinitionBasePoint(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_setDefinitionBasePoint(self, *args)

    def setDefinitionEndPoint(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_setDefinitionEndPoint(self, *args)

    def setUpdatedBasePoint(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_setUpdatedBasePoint(self, *args)

    def setUpdatedEndPoint(self, *args):
        return _ODA_Drawings.OdDbBlock2PtParameter_setUpdatedEndPoint(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlock2PtParameter

# Register OdDbBlock2PtParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlock2PtParameter_swigregister(OdDbBlock2PtParameter)

def OdDbBlock2PtParameter_cast(*args):
    return _ODA_Drawings.OdDbBlock2PtParameter_cast(*args)

def OdDbBlock2PtParameter_desc(*args):
    return _ODA_Drawings.OdDbBlock2PtParameter_desc(*args)

def OdDbBlock2PtParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlock2PtParameter_createObject(*args)

class OdDbFiler(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbFiler_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbFiler_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbFiler_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbFiler_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbFiler_createObject(*args)

    def filerStatus(self, *args):
        return _ODA_Drawings.OdDbFiler_filerStatus(self, *args)

    def resetFilerStatus(self, *args):
        return _ODA_Drawings.OdDbFiler_resetFilerStatus(self, *args)
    kFileFiler = _ODA_Drawings.OdDbFiler_kFileFiler
    kCopyFiler = _ODA_Drawings.OdDbFiler_kCopyFiler
    kUndoFiler = _ODA_Drawings.OdDbFiler_kUndoFiler
    kBagFiler = _ODA_Drawings.OdDbFiler_kBagFiler
    kIdXlateFiler = _ODA_Drawings.OdDbFiler_kIdXlateFiler
    kPageFiler = _ODA_Drawings.OdDbFiler_kPageFiler
    kDeepCloneFiler = _ODA_Drawings.OdDbFiler_kDeepCloneFiler
    kIdFiler = _ODA_Drawings.OdDbFiler_kIdFiler
    kPurgeFiler = _ODA_Drawings.OdDbFiler_kPurgeFiler
    kWblockCloneFiler = _ODA_Drawings.OdDbFiler_kWblockCloneFiler

    def filerType(self, *args):
        return _ODA_Drawings.OdDbFiler_filerType(self, *args)

    def database(self, *args):
        return _ODA_Drawings.OdDbFiler_database(self, *args)

    def dwgVersion(self, *args):
        return _ODA_Drawings.OdDbFiler_dwgVersion(self, *args)

    def getAuditInfo(self, *args):
        return _ODA_Drawings.OdDbFiler_getAuditInfo(self, *args)

    def setController(self, *args):
        return _ODA_Drawings.OdDbFiler_setController(self, *args)

    def controller(self, *args):
        return _ODA_Drawings.OdDbFiler_controller(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbFiler

# Register OdDbFiler in _ODA_Drawings:
_ODA_Drawings.OdDbFiler_swigregister(OdDbFiler)

def OdDbFiler_cast(*args):
    return _ODA_Drawings.OdDbFiler_cast(*args)

def OdDbFiler_desc(*args):
    return _ODA_Drawings.OdDbFiler_desc(*args)

def OdDbFiler_createObject(*args):
    return _ODA_Drawings.OdDbFiler_createObject(*args)

class OdDxfCode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Unknown = _ODA_Drawings.OdDxfCode_Unknown
    Name = _ODA_Drawings.OdDxfCode_Name
    String = _ODA_Drawings.OdDxfCode_String
    Bool = _ODA_Drawings.OdDxfCode_Bool
    Integer8 = _ODA_Drawings.OdDxfCode_Integer8
    Integer16 = _ODA_Drawings.OdDxfCode_Integer16
    Integer32 = _ODA_Drawings.OdDxfCode_Integer32
    Double = _ODA_Drawings.OdDxfCode_Double
    Angle = _ODA_Drawings.OdDxfCode_Angle
    Point = _ODA_Drawings.OdDxfCode_Point
    BinaryChunk = _ODA_Drawings.OdDxfCode_BinaryChunk
    LayerName = _ODA_Drawings.OdDxfCode_LayerName
    Handle = _ODA_Drawings.OdDxfCode_Handle
    ObjectId = _ODA_Drawings.OdDxfCode_ObjectId
    SoftPointerId = _ODA_Drawings.OdDxfCode_SoftPointerId
    HardPointerId = _ODA_Drawings.OdDxfCode_HardPointerId
    SoftOwnershipId = _ODA_Drawings.OdDxfCode_SoftOwnershipId
    HardOwnershipId = _ODA_Drawings.OdDxfCode_HardOwnershipId
    Integer64 = _ODA_Drawings.OdDxfCode_Integer64

    @staticmethod
    def _getType(*args):
        return _ODA_Drawings.OdDxfCode__getType(*args)

    def __init__(self, *args):
        _ODA_Drawings.OdDxfCode_swiginit(self, _ODA_Drawings.new_OdDxfCode(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDxfCode

# Register OdDxfCode in _ODA_Drawings:
_ODA_Drawings.OdDxfCode_swigregister(OdDxfCode)

def OdDxfCode__getType(*args):
    return _ODA_Drawings.OdDxfCode__getType(*args)

class OdDbDxfFiler(OdDbFiler):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDxfFiler_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDxfFiler_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDxfFiler_createObject(*args)

    def seek(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_seek(self, *args)

    def tell(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_tell(self, *args)

    def precision(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_precision(self, *args)

    def setPrecision(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_setPrecision(self, *args)
    kDfltPrec = _ODA_Drawings.OdDbDxfFiler_kDfltPrec
    kMaxPrec = _ODA_Drawings.OdDbDxfFiler_kMaxPrec

    def writeXDataStart(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_writeXDataStart(self, *args)

    def includesDefaultValues(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_includesDefaultValues(self, *args)

    def atEOF(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_atEOF(self, *args)

    def atEndOfObject(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_atEndOfObject(self, *args)

    def atExtendedData(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_atExtendedData(self, *args)

    def atSubclassData(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_atSubclassData(self, *args)

    def atEmbeddedObjectStart(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_atEmbeddedObjectStart(self, *args)

    def nextItem(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_nextItem(self, *args)

    def nextRb(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_nextRb(self, *args)

    def writeRb(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_writeRb(self, *args)

    def pushBackItem(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_pushBackItem(self, *args)

    def rdString(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdString(self, *args)

    def rdBool(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdBool(self, *args)

    def rdInt8(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdInt8(self, *args)

    def rdInt16(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdInt16(self, *args)

    def rdInt32(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdInt32(self, *args)

    def rdInt64(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdInt64(self, *args)

    def rdUInt8(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdUInt8(self, *args)

    def rdUInt16(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdUInt16(self, *args)

    def rdUInt32(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdUInt32(self, *args)

    def rdUInt64(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdUInt64(self, *args)

    def rdHandle(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdHandle(self, *args)

    def rdObjectId(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdObjectId(self, *args)

    def rdAngle(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdAngle(self, *args)

    def rdDouble(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdDouble(self, *args)

    def rdPoint2d(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdPoint2d(self, *args)

    def rdPoint3d(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdPoint3d(self, *args)

    def rdVector2d(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdVector2d(self, *args)

    def rdVector3d(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdVector3d(self, *args)

    def rdScale3d(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdScale3d(self, *args)

    def rdBinaryChunk(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_rdBinaryChunk(self, *args)

    def copyItem(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_copyItem(self, *args)

    def wrName(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrName(self, *args)

    def wrString(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrString(self, *args)

    def wrStringOpt(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrStringOpt(self, *args)

    def wrSubclassMarker(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrSubclassMarker(self, *args)

    def wrEmbeddedObjectStart(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrEmbeddedObjectStart(self, *args)

    def wrBool(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrBool(self, *args)

    def wrBoolOpt(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrBoolOpt(self, *args)

    def wrInt8(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrInt8(self, *args)

    def wrInt8Opt(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrInt8Opt(self, *args)

    def wrUInt8(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrUInt8(self, *args)

    def wrUInt8Opt(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrUInt8Opt(self, *args)

    def wrInt16(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrInt16(self, *args)

    def wrInt16Opt(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrInt16Opt(self, *args)

    def wrUInt16(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrUInt16(self, *args)

    def wrUInt16Opt(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrUInt16Opt(self, *args)

    def wrInt32(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrInt32(self, *args)

    def wrInt32Opt(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrInt32Opt(self, *args)

    def wrUInt32(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrUInt32(self, *args)

    def wrUInt32Opt(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrUInt32Opt(self, *args)

    def wrInt64(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrInt64(self, *args)

    def wrInt64Opt(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrInt64Opt(self, *args)

    def wrUInt64(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrUInt64(self, *args)

    def wrUInt64Opt(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrUInt64Opt(self, *args)

    def wrHandle(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrHandle(self, *args)

    def wrObjectId(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrObjectId(self, *args)

    def wrObjectIdOpt(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrObjectIdOpt(self, *args)

    def wrAngle(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrAngle(self, *args)

    def wrAngleOpt(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrAngleOpt(self, *args)

    def wrDouble(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrDouble(self, *args)

    def wrDoubleOpt(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrDoubleOpt(self, *args)

    def wrPoint2d(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrPoint2d(self, *args)

    def wrPoint2dOpt(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrPoint2dOpt(self, *args)

    def wrPoint3d(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrPoint3d(self, *args)

    def wrPoint3dOpt(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrPoint3dOpt(self, *args)

    def wrVector2d(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrVector2d(self, *args)

    def wrVector2dOpt(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrVector2dOpt(self, *args)

    def wrVector3d(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrVector3d(self, *args)

    def wrVector3dOpt(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrVector3dOpt(self, *args)

    def wrScale3d(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrScale3d(self, *args)

    def wrBinaryChunk(self, *args):
        return _ODA_Drawings.OdDbDxfFiler_wrBinaryChunk(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDxfFiler

# Register OdDbDxfFiler in _ODA_Drawings:
_ODA_Drawings.OdDbDxfFiler_swigregister(OdDbDxfFiler)

def OdDbDxfFiler_cast(*args):
    return _ODA_Drawings.OdDbDxfFiler_cast(*args)

def OdDbDxfFiler_desc(*args):
    return _ODA_Drawings.OdDbDxfFiler_desc(*args)

def OdDbDxfFiler_createObject(*args):
    return _ODA_Drawings.OdDbDxfFiler_createObject(*args)

class OdError_DwgObjectImproperlyRead(ODA_Kernel.OdError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdError_DwgObjectImproperlyRead_swiginit(self, _ODA_Drawings.new_OdError_DwgObjectImproperlyRead(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdError_DwgObjectImproperlyRead

# Register OdError_DwgObjectImproperlyRead in _ODA_Drawings:
_ODA_Drawings.OdError_DwgObjectImproperlyRead_swigregister(OdError_DwgObjectImproperlyRead)

class OdDbDwgFiler(OdDbFiler):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDwgFiler_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDwgFiler_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDwgFiler_createObject(*args)

    def seek(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_seek(self, *args)

    def tell(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_tell(self, *args)

    def rdBool(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdBool(self, *args)

    def rdString(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdString(self, *args)

    def rdBytes(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdBytes(self, *args)

    def rdInt8(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdInt8(self, *args)

    def rdUInt8(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdUInt8(self, *args)

    def rdInt16(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdInt16(self, *args)

    def rdInt32(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdInt32(self, *args)

    def rdInt64(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdInt64(self, *args)

    def rdAddress(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdAddress(self, *args)

    def rdDouble(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdDouble(self, *args)

    def rdDbHandle(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdDbHandle(self, *args)

    def rdSoftOwnershipId(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdSoftOwnershipId(self, *args)

    def rdHardOwnershipId(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdHardOwnershipId(self, *args)

    def rdHardPointerId(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdHardPointerId(self, *args)

    def rdSoftPointerId(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdSoftPointerId(self, *args)

    def rdPoint2d(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdPoint2d(self, *args)

    def rdPoint3d(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdPoint3d(self, *args)

    def rdVector2d(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdVector2d(self, *args)

    def rdVector3d(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdVector3d(self, *args)

    def rdScale3d(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdScale3d(self, *args)

    def rdThickness(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdThickness(self, *args)

    def rdExtrusion(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_rdExtrusion(self, *args)

    def wrBool(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrBool(self, *args)

    def wrString(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrString(self, *args)

    def wrBytes(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrBytes(self, *args)

    def wrInt8(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrInt8(self, *args)

    def wrUInt8(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrUInt8(self, *args)

    def wrInt16(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrInt16(self, *args)

    def wrInt32(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrInt32(self, *args)

    def wrInt64(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrInt64(self, *args)

    def wrAddress(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrAddress(self, *args)

    def wrDouble(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrDouble(self, *args)

    def wrDbHandle(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrDbHandle(self, *args)

    def wrSoftOwnershipId(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrSoftOwnershipId(self, *args)

    def wrHardOwnershipId(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrHardOwnershipId(self, *args)

    def wrSoftPointerId(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrSoftPointerId(self, *args)

    def wrHardPointerId(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrHardPointerId(self, *args)

    def wrPoint2d(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrPoint2d(self, *args)

    def wrPoint3d(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrPoint3d(self, *args)

    def wrVector2d(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrVector2d(self, *args)

    def wrVector3d(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrVector3d(self, *args)

    def wrScale3d(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrScale3d(self, *args)

    def wrThickness(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrThickness(self, *args)

    def wrExtrusion(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_wrExtrusion(self, *args)

    def usesReferences(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_usesReferences(self, *args)

    def addReference(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_addReference(self, *args)

    def isPersistentMode(self, *args):
        return _ODA_Drawings.OdDbDwgFiler_isPersistentMode(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDwgFiler

# Register OdDbDwgFiler in _ODA_Drawings:
_ODA_Drawings.OdDbDwgFiler_swigregister(OdDbDwgFiler)

def OdDbDwgFiler_cast(*args):
    return _ODA_Drawings.OdDbDwgFiler_cast(*args)

def OdDbDwgFiler_desc(*args):
    return _ODA_Drawings.OdDbDwgFiler_desc(*args)

def OdDbDwgFiler_createObject(*args):
    return _ODA_Drawings.OdDbDwgFiler_createObject(*args)

class OdIdFiler(OdDbDwgFiler):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def seek(self, *args):
        return _ODA_Drawings.OdIdFiler_seek(self, *args)

    def tell(self, *args):
        return _ODA_Drawings.OdIdFiler_tell(self, *args)

    def filerStatus(self, *args):
        return _ODA_Drawings.OdIdFiler_filerStatus(self, *args)

    def resetFilerStatus(self, *args):
        return _ODA_Drawings.OdIdFiler_resetFilerStatus(self, *args)

    def filerType(self, *args):
        return _ODA_Drawings.OdIdFiler_filerType(self, *args)

    def dwgVersion(self, *args):
        return _ODA_Drawings.OdIdFiler_dwgVersion(self, *args)

    def rdBool(self, *args):
        return _ODA_Drawings.OdIdFiler_rdBool(self, *args)

    def rdString(self, *args):
        return _ODA_Drawings.OdIdFiler_rdString(self, *args)

    def rdBytes(self, *args):
        return _ODA_Drawings.OdIdFiler_rdBytes(self, *args)

    def rdInt8(self, *args):
        return _ODA_Drawings.OdIdFiler_rdInt8(self, *args)

    def rdUInt8(self, *args):
        return _ODA_Drawings.OdIdFiler_rdUInt8(self, *args)

    def rdInt16(self, *args):
        return _ODA_Drawings.OdIdFiler_rdInt16(self, *args)

    def rdInt32(self, *args):
        return _ODA_Drawings.OdIdFiler_rdInt32(self, *args)

    def rdInt64(self, *args):
        return _ODA_Drawings.OdIdFiler_rdInt64(self, *args)

    def rdDouble(self, *args):
        return _ODA_Drawings.OdIdFiler_rdDouble(self, *args)

    def rdDbHandle(self, *args):
        return _ODA_Drawings.OdIdFiler_rdDbHandle(self, *args)

    def rdSoftOwnershipId(self, *args):
        return _ODA_Drawings.OdIdFiler_rdSoftOwnershipId(self, *args)

    def rdHardOwnershipId(self, *args):
        return _ODA_Drawings.OdIdFiler_rdHardOwnershipId(self, *args)

    def rdHardPointerId(self, *args):
        return _ODA_Drawings.OdIdFiler_rdHardPointerId(self, *args)

    def rdSoftPointerId(self, *args):
        return _ODA_Drawings.OdIdFiler_rdSoftPointerId(self, *args)

    def rdPoint2d(self, *args):
        return _ODA_Drawings.OdIdFiler_rdPoint2d(self, *args)

    def rdPoint3d(self, *args):
        return _ODA_Drawings.OdIdFiler_rdPoint3d(self, *args)

    def rdVector3d(self, *args):
        return _ODA_Drawings.OdIdFiler_rdVector3d(self, *args)

    def rdVector2d(self, *args):
        return _ODA_Drawings.OdIdFiler_rdVector2d(self, *args)

    def rdScale3d(self, *args):
        return _ODA_Drawings.OdIdFiler_rdScale3d(self, *args)

    def wrBool(self, *args):
        return _ODA_Drawings.OdIdFiler_wrBool(self, *args)

    def wrString(self, *args):
        return _ODA_Drawings.OdIdFiler_wrString(self, *args)

    def wrBytes(self, *args):
        return _ODA_Drawings.OdIdFiler_wrBytes(self, *args)

    def wrInt8(self, *args):
        return _ODA_Drawings.OdIdFiler_wrInt8(self, *args)

    def wrUInt8(self, *args):
        return _ODA_Drawings.OdIdFiler_wrUInt8(self, *args)

    def wrInt16(self, *args):
        return _ODA_Drawings.OdIdFiler_wrInt16(self, *args)

    def wrInt32(self, *args):
        return _ODA_Drawings.OdIdFiler_wrInt32(self, *args)

    def wrInt64(self, *args):
        return _ODA_Drawings.OdIdFiler_wrInt64(self, *args)

    def wrDouble(self, *args):
        return _ODA_Drawings.OdIdFiler_wrDouble(self, *args)

    def wrDbHandle(self, *args):
        return _ODA_Drawings.OdIdFiler_wrDbHandle(self, *args)

    def wrPoint2d(self, *args):
        return _ODA_Drawings.OdIdFiler_wrPoint2d(self, *args)

    def wrPoint3d(self, *args):
        return _ODA_Drawings.OdIdFiler_wrPoint3d(self, *args)

    def wrVector2d(self, *args):
        return _ODA_Drawings.OdIdFiler_wrVector2d(self, *args)

    def wrVector3d(self, *args):
        return _ODA_Drawings.OdIdFiler_wrVector3d(self, *args)

    def wrScale3d(self, *args):
        return _ODA_Drawings.OdIdFiler_wrScale3d(self, *args)

    def setController(self, *args):
        return _ODA_Drawings.OdIdFiler_setController(self, *args)

    def controller(self, *args):
        return _ODA_Drawings.OdIdFiler_controller(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdIdFiler

# Register OdIdFiler in _ODA_Drawings:
_ODA_Drawings.OdIdFiler_swigregister(OdIdFiler)

class OdDbLSObject(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLSObject_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLSObject_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLSObject_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLSObject_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLSObject_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbLSObject_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbLSObject_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbLSObject_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbLSObject_dxfOutFields(self, *args)

    def componentUID(self, *args):
        return _ODA_Drawings.OdDbLSObject_componentUID(self, *args)

    def setComponentUID(self, *args):
        return _ODA_Drawings.OdDbLSObject_setComponentUID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLSObject

# Register OdDbLSObject in _ODA_Drawings:
_ODA_Drawings.OdDbLSObject_swigregister(OdDbLSObject)

def OdDbLSObject_cast(*args):
    return _ODA_Drawings.OdDbLSObject_cast(*args)

def OdDbLSObject_desc(*args):
    return _ODA_Drawings.OdDbLSObject_desc(*args)

def OdDbLSObject_createObject(*args):
    return _ODA_Drawings.OdDbLSObject_createObject(*args)

class OdDbFrame(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbFrame_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbFrame_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbFrame_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbFrame_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbFrame_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbFrame

# Register OdDbFrame in _ODA_Drawings:
_ODA_Drawings.OdDbFrame_swigregister(OdDbFrame)

def OdDbFrame_cast(*args):
    return _ODA_Drawings.OdDbFrame_cast(*args)

def OdDbFrame_desc(*args):
    return _ODA_Drawings.OdDbFrame_desc(*args)

def OdDbFrame_createObject(*args):
    return _ODA_Drawings.OdDbFrame_createObject(*args)

class OdDbLinkedTableData(OdDbLinkedData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLinkedTableData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLinkedTableData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLinkedTableData_createObject(*args)

    def setSize(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_setSize(self, *args)

    def numColumns(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_numColumns(self, *args)

    def getColumnName(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_getColumnName(self, *args)

    def setColumnName(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_setColumnName(self, *args)

    def appendColumn(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_appendColumn(self, *args)

    def insertColumn(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_insertColumn(self, *args)

    def deleteColumn(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_deleteColumn(self, *args)

    def numRows(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_numRows(self, *args)

    def canInsert(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_canInsert(self, *args)

    def appendRow(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_appendRow(self, *args)

    def insertRow(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_insertRow(self, *args)

    def canDelete(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_canDelete(self, *args)

    def deleteRow(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_deleteRow(self, *args)

    def isContentEditable(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_isContentEditable(self, *args)

    def cellState(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_cellState(self, *args)

    def setCellState(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_setCellState(self, *args)

    def getToolTip(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_getToolTip(self, *args)

    def setToolTip(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_setToolTip(self, *args)

    def getCustomData(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_getCustomData(self, *args)

    def setCustomData(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_setCustomData(self, *args)

    def numContents(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_numContents(self, *args)

    def createContent(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_createContent(self, *args)

    def moveContent(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_moveContent(self, *args)

    def deleteContent(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_deleteContent(self, *args)

    def contentType(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_contentType(self, *args)

    def getDataType(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_getDataType(self, *args)

    def setDataType(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_setDataType(self, *args)

    def dataFormat(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_dataFormat(self, *args)

    def setDataFormat(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_setDataFormat(self, *args)

    def getValue(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_getValue(self, *args)

    def setValue(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_setValue(self, *args)

    def getText(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_getText(self, *args)

    def setText(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_setText(self, *args)

    def hasFormula(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_hasFormula(self, *args)

    def getFormula(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_getFormula(self, *args)

    def setFormula(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_setFormula(self, *args)

    def getFieldId(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_getFieldId(self, *args)

    def setFieldId(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_setFieldId(self, *args)

    def getField(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_getField(self, *args)

    def getBlockTableRecordId(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_getBlockTableRecordId(self, *args)

    def setBlockTableRecordId(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_setBlockTableRecordId(self, *args)

    def getBlockAttributeValue(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_getBlockAttributeValue(self, *args)

    def setBlockAttributeValue(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_setBlockAttributeValue(self, *args)

    def isLinked(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_isLinked(self, *args)

    def getDataLink(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_getDataLink(self, *args)

    def setDataLink(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_setDataLink(self, *args)

    def getDataLinkRange(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_getDataLinkRange(self, *args)

    def removeDataLink(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_removeDataLink(self, *args)

    def updateDataLink(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_updateDataLink(self, *args)

    def clear(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_clear(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_copyFrom(self, *args)

    def getIterator(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_getIterator(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbLinkedTableData_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLinkedTableData

# Register OdDbLinkedTableData in _ODA_Drawings:
_ODA_Drawings.OdDbLinkedTableData_swigregister(OdDbLinkedTableData)

def OdDbLinkedTableData_cast(*args):
    return _ODA_Drawings.OdDbLinkedTableData_cast(*args)

def OdDbLinkedTableData_desc(*args):
    return _ODA_Drawings.OdDbLinkedTableData_desc(*args)

def OdDbLinkedTableData_createObject(*args):
    return _ODA_Drawings.OdDbLinkedTableData_createObject(*args)

class OdDbText(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbText_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbText_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbText_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbText_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbText_createObject(*args)

    def position(self, *args):
        return _ODA_Drawings.OdDbText_position(self, *args)

    def setPosition(self, *args):
        return _ODA_Drawings.OdDbText_setPosition(self, *args)

    def alignmentPoint(self, *args):
        return _ODA_Drawings.OdDbText_alignmentPoint(self, *args)

    def setAlignmentPoint(self, *args):
        return _ODA_Drawings.OdDbText_setAlignmentPoint(self, *args)

    def isDefaultAlignment(self, *args):
        return _ODA_Drawings.OdDbText_isDefaultAlignment(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbText_normal(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDbText_setNormal(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbText_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbText_getPlane(self, *args)

    def thickness(self, *args):
        return _ODA_Drawings.OdDbText_thickness(self, *args)

    def setThickness(self, *args):
        return _ODA_Drawings.OdDbText_setThickness(self, *args)

    def oblique(self, *args):
        return _ODA_Drawings.OdDbText_oblique(self, *args)

    def setOblique(self, *args):
        return _ODA_Drawings.OdDbText_setOblique(self, *args)

    def rotation(self, *args):
        return _ODA_Drawings.OdDbText_rotation(self, *args)

    def setRotation(self, *args):
        return _ODA_Drawings.OdDbText_setRotation(self, *args)

    def height(self, *args):
        return _ODA_Drawings.OdDbText_height(self, *args)

    def setHeight(self, *args):
        return _ODA_Drawings.OdDbText_setHeight(self, *args)

    def widthFactor(self, *args):
        return _ODA_Drawings.OdDbText_widthFactor(self, *args)

    def setWidthFactor(self, *args):
        return _ODA_Drawings.OdDbText_setWidthFactor(self, *args)

    def isMirroredInX(self, *args):
        return _ODA_Drawings.OdDbText_isMirroredInX(self, *args)

    def mirrorInX(self, *args):
        return _ODA_Drawings.OdDbText_mirrorInX(self, *args)

    def isMirroredInY(self, *args):
        return _ODA_Drawings.OdDbText_isMirroredInY(self, *args)

    def mirrorInY(self, *args):
        return _ODA_Drawings.OdDbText_mirrorInY(self, *args)

    def textString(self, *args):
        return _ODA_Drawings.OdDbText_textString(self, *args)

    def setTextString(self, *args):
        return _ODA_Drawings.OdDbText_setTextString(self, *args)

    def textStyle(self, *args):
        return _ODA_Drawings.OdDbText_textStyle(self, *args)

    def setTextStyle(self, *args):
        return _ODA_Drawings.OdDbText_setTextStyle(self, *args)

    def horizontalMode(self, *args):
        return _ODA_Drawings.OdDbText_horizontalMode(self, *args)

    def setHorizontalMode(self, *args):
        return _ODA_Drawings.OdDbText_setHorizontalMode(self, *args)

    def verticalMode(self, *args):
        return _ODA_Drawings.OdDbText_verticalMode(self, *args)

    def setVerticalMode(self, *args):
        return _ODA_Drawings.OdDbText_setVerticalMode(self, *args)

    def correctSpelling(self, *args):
        return _ODA_Drawings.OdDbText_correctSpelling(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbText_subGetClassID(self, *args)

    def adjustAlignment(self, *args):
        return _ODA_Drawings.OdDbText_adjustAlignment(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbText_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbText_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbText_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbText_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbText_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbText_dxfOutFields_R12(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbText_subClose(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbText_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbText_subViewportDraw(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbText_subTransformBy(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbText_subGetTransformedCopy(self, *args)

    def getBoundingPoints(self, *args):
        return _ODA_Drawings.OdDbText_getBoundingPoints(self, *args)

    def setField(self, *args):
        return _ODA_Drawings.OdDbText_setField(self, *args)

    def removeField(self, *args):
        return _ODA_Drawings.OdDbText_removeField(self, *args)

    def convertFieldToText(self, *args):
        return _ODA_Drawings.OdDbText_convertFieldToText(self, *args)

    def subSetDatabaseDefaults(self, *args):
        return _ODA_Drawings.OdDbText_subSetDatabaseDefaults(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbText

# Register OdDbText in _ODA_Drawings:
_ODA_Drawings.OdDbText_swigregister(OdDbText)

def OdDbText_cast(*args):
    return _ODA_Drawings.OdDbText_cast(*args)

def OdDbText_desc(*args):
    return _ODA_Drawings.OdDbText_desc(*args)

def OdDbText_createObject(*args):
    return _ODA_Drawings.OdDbText_createObject(*args)

class OdDbMTextFragment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    location = property(_ODA_Drawings.OdDbMTextFragment_location_get, _ODA_Drawings.OdDbMTextFragment_location_set)
    text = property(_ODA_Drawings.OdDbMTextFragment_text_get, _ODA_Drawings.OdDbMTextFragment_text_set)
    font = property(_ODA_Drawings.OdDbMTextFragment_font_get, _ODA_Drawings.OdDbMTextFragment_font_set)
    bigfont = property(_ODA_Drawings.OdDbMTextFragment_bigfont_get, _ODA_Drawings.OdDbMTextFragment_bigfont_set)
    extents = property(_ODA_Drawings.OdDbMTextFragment_extents_get, _ODA_Drawings.OdDbMTextFragment_extents_set)
    capsHeight = property(_ODA_Drawings.OdDbMTextFragment_capsHeight_get, _ODA_Drawings.OdDbMTextFragment_capsHeight_set)
    widthFactor = property(_ODA_Drawings.OdDbMTextFragment_widthFactor_get, _ODA_Drawings.OdDbMTextFragment_widthFactor_set)
    obliqueAngle = property(_ODA_Drawings.OdDbMTextFragment_obliqueAngle_get, _ODA_Drawings.OdDbMTextFragment_obliqueAngle_set)
    trackingFactor = property(_ODA_Drawings.OdDbMTextFragment_trackingFactor_get, _ODA_Drawings.OdDbMTextFragment_trackingFactor_set)
    color = property(_ODA_Drawings.OdDbMTextFragment_color_get, _ODA_Drawings.OdDbMTextFragment_color_set)
    vertical = property(_ODA_Drawings.OdDbMTextFragment_vertical_get, _ODA_Drawings.OdDbMTextFragment_vertical_set)
    stackTop = property(_ODA_Drawings.OdDbMTextFragment_stackTop_get, _ODA_Drawings.OdDbMTextFragment_stackTop_set)
    stackBottom = property(_ODA_Drawings.OdDbMTextFragment_stackBottom_get, _ODA_Drawings.OdDbMTextFragment_stackBottom_set)
    underlined = property(_ODA_Drawings.OdDbMTextFragment_underlined_get, _ODA_Drawings.OdDbMTextFragment_underlined_set)
    overlined = property(_ODA_Drawings.OdDbMTextFragment_overlined_get, _ODA_Drawings.OdDbMTextFragment_overlined_set)
    strikethrough = property(_ODA_Drawings.OdDbMTextFragment_strikethrough_get, _ODA_Drawings.OdDbMTextFragment_strikethrough_set)
    underPoints = property(_ODA_Drawings.OdDbMTextFragment_underPoints_get, _ODA_Drawings.OdDbMTextFragment_underPoints_set)
    overPoints = property(_ODA_Drawings.OdDbMTextFragment_overPoints_get, _ODA_Drawings.OdDbMTextFragment_overPoints_set)
    strikePoints = property(_ODA_Drawings.OdDbMTextFragment_strikePoints_get, _ODA_Drawings.OdDbMTextFragment_strikePoints_set)
    fontname = property(_ODA_Drawings.OdDbMTextFragment_fontname_get, _ODA_Drawings.OdDbMTextFragment_fontname_set)
    charset = property(_ODA_Drawings.OdDbMTextFragment_charset_get, _ODA_Drawings.OdDbMTextFragment_charset_set)
    bold = property(_ODA_Drawings.OdDbMTextFragment_bold_get, _ODA_Drawings.OdDbMTextFragment_bold_set)
    italic = property(_ODA_Drawings.OdDbMTextFragment_italic_get, _ODA_Drawings.OdDbMTextFragment_italic_set)
    changeStyle = property(_ODA_Drawings.OdDbMTextFragment_changeStyle_get, _ODA_Drawings.OdDbMTextFragment_changeStyle_set)
    lineBreak = property(_ODA_Drawings.OdDbMTextFragment_lineBreak_get, _ODA_Drawings.OdDbMTextFragment_lineBreak_set)
    newParagraph = property(_ODA_Drawings.OdDbMTextFragment_newParagraph_get, _ODA_Drawings.OdDbMTextFragment_newParagraph_set)

    def __init__(self, *args):
        _ODA_Drawings.OdDbMTextFragment_swiginit(self, _ODA_Drawings.new_OdDbMTextFragment(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbMTextFragment

# Register OdDbMTextFragment in _ODA_Drawings:
_ODA_Drawings.OdDbMTextFragment_swigregister(OdDbMTextFragment)

class OdDbMTextIndent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paragraphInd = property(_ODA_Drawings.OdDbMTextIndent_paragraphInd_get, _ODA_Drawings.OdDbMTextIndent_paragraphInd_set)
    firstLineInd = property(_ODA_Drawings.OdDbMTextIndent_firstLineInd_get, _ODA_Drawings.OdDbMTextIndent_firstLineInd_set)
    tabs = property(_ODA_Drawings.OdDbMTextIndent_tabs_get, _ODA_Drawings.OdDbMTextIndent_tabs_set)

    def __init__(self, *args):
        _ODA_Drawings.OdDbMTextIndent_swiginit(self, _ODA_Drawings.new_OdDbMTextIndent(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbMTextIndent

# Register OdDbMTextIndent in _ODA_Drawings:
_ODA_Drawings.OdDbMTextIndent_swigregister(OdDbMTextIndent)

class OdDbMText(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbMText_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbMText_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbMText_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbMText_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbMText_createObject(*args)

    def location(self, *args):
        return _ODA_Drawings.OdDbMText_location(self, *args)

    def setLocation(self, *args):
        return _ODA_Drawings.OdDbMText_setLocation(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbMText_normal(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDbMText_setNormal(self, *args)

    def direction(self, *args):
        return _ODA_Drawings.OdDbMText_direction(self, *args)

    def setDirection(self, *args):
        return _ODA_Drawings.OdDbMText_setDirection(self, *args)

    def rotation(self, *args):
        return _ODA_Drawings.OdDbMText_rotation(self, *args)

    def setRotation(self, *args):
        return _ODA_Drawings.OdDbMText_setRotation(self, *args)

    def width(self, *args):
        return _ODA_Drawings.OdDbMText_width(self, *args)

    def setWidth(self, *args):
        return _ODA_Drawings.OdDbMText_setWidth(self, *args)

    def textStyle(self, *args):
        return _ODA_Drawings.OdDbMText_textStyle(self, *args)

    def setTextStyle(self, *args):
        return _ODA_Drawings.OdDbMText_setTextStyle(self, *args)

    def textHeight(self, *args):
        return _ODA_Drawings.OdDbMText_textHeight(self, *args)

    def setTextHeight(self, *args):
        return _ODA_Drawings.OdDbMText_setTextHeight(self, *args)
    kTopLeft = _ODA_Drawings.OdDbMText_kTopLeft
    kTopCenter = _ODA_Drawings.OdDbMText_kTopCenter
    kTopRight = _ODA_Drawings.OdDbMText_kTopRight
    kMiddleLeft = _ODA_Drawings.OdDbMText_kMiddleLeft
    kMiddleCenter = _ODA_Drawings.OdDbMText_kMiddleCenter
    kMiddleRight = _ODA_Drawings.OdDbMText_kMiddleRight
    kBottomLeft = _ODA_Drawings.OdDbMText_kBottomLeft
    kBottomCenter = _ODA_Drawings.OdDbMText_kBottomCenter
    kBottomRight = _ODA_Drawings.OdDbMText_kBottomRight
    kBaseLeft = _ODA_Drawings.OdDbMText_kBaseLeft
    kBaseCenter = _ODA_Drawings.OdDbMText_kBaseCenter
    kBaseRight = _ODA_Drawings.OdDbMText_kBaseRight
    kBaseAlign = _ODA_Drawings.OdDbMText_kBaseAlign
    kBottomAlign = _ODA_Drawings.OdDbMText_kBottomAlign
    kMiddleAlign = _ODA_Drawings.OdDbMText_kMiddleAlign
    kTopAlign = _ODA_Drawings.OdDbMText_kTopAlign
    kBaseFit = _ODA_Drawings.OdDbMText_kBaseFit
    kBottomFit = _ODA_Drawings.OdDbMText_kBottomFit
    kMiddleFit = _ODA_Drawings.OdDbMText_kMiddleFit
    kTopFit = _ODA_Drawings.OdDbMText_kTopFit
    kBaseMid = _ODA_Drawings.OdDbMText_kBaseMid
    kBottomMid = _ODA_Drawings.OdDbMText_kBottomMid
    kMiddleMid = _ODA_Drawings.OdDbMText_kMiddleMid
    kTopMid = _ODA_Drawings.OdDbMText_kTopMid

    def attachment(self, *args):
        return _ODA_Drawings.OdDbMText_attachment(self, *args)

    def setAttachment(self, *args):
        return _ODA_Drawings.OdDbMText_setAttachment(self, *args)
    kLtoR = _ODA_Drawings.OdDbMText_kLtoR
    kRtoL = _ODA_Drawings.OdDbMText_kRtoL
    kTtoB = _ODA_Drawings.OdDbMText_kTtoB
    kBtoT = _ODA_Drawings.OdDbMText_kBtoT
    kByStyle = _ODA_Drawings.OdDbMText_kByStyle

    def flowDirection(self, *args):
        return _ODA_Drawings.OdDbMText_flowDirection(self, *args)

    def setFlowDirection(self, *args):
        return _ODA_Drawings.OdDbMText_setFlowDirection(self, *args)

    def contents(self, *args):
        return _ODA_Drawings.OdDbMText_contents(self, *args)

    def setContents(self, *args):
        return _ODA_Drawings.OdDbMText_setContents(self, *args)

    def setContentsRTF(self, *args):
        return _ODA_Drawings.OdDbMText_setContentsRTF(self, *args)

    def actualWidth(self, *args):
        return _ODA_Drawings.OdDbMText_actualWidth(self, *args)

    @staticmethod
    def nonBreakSpace(*args):
        return _ODA_Drawings.OdDbMText_nonBreakSpace(*args)

    @staticmethod
    def overlineOn(*args):
        return _ODA_Drawings.OdDbMText_overlineOn(*args)

    @staticmethod
    def overlineOff(*args):
        return _ODA_Drawings.OdDbMText_overlineOff(*args)

    @staticmethod
    def underlineOn(*args):
        return _ODA_Drawings.OdDbMText_underlineOn(*args)

    @staticmethod
    def underlineOff(*args):
        return _ODA_Drawings.OdDbMText_underlineOff(*args)

    @staticmethod
    def colorChange(*args):
        return _ODA_Drawings.OdDbMText_colorChange(*args)

    @staticmethod
    def fontChange(*args):
        return _ODA_Drawings.OdDbMText_fontChange(*args)

    @staticmethod
    def heightChange(*args):
        return _ODA_Drawings.OdDbMText_heightChange(*args)

    @staticmethod
    def widthChange(*args):
        return _ODA_Drawings.OdDbMText_widthChange(*args)

    @staticmethod
    def obliqueChange(*args):
        return _ODA_Drawings.OdDbMText_obliqueChange(*args)

    @staticmethod
    def trackChange(*args):
        return _ODA_Drawings.OdDbMText_trackChange(*args)

    @staticmethod
    def lineBreak(*args):
        return _ODA_Drawings.OdDbMText_lineBreak(*args)

    @staticmethod
    def paragraphBreak(*args):
        return _ODA_Drawings.OdDbMText_paragraphBreak(*args)

    @staticmethod
    def stackStart(*args):
        return _ODA_Drawings.OdDbMText_stackStart(*args)

    @staticmethod
    def alignChange(*args):
        return _ODA_Drawings.OdDbMText_alignChange(*args)

    @staticmethod
    def blockBegin(*args):
        return _ODA_Drawings.OdDbMText_blockBegin(*args)

    @staticmethod
    def blockEnd(*args):
        return _ODA_Drawings.OdDbMText_blockEnd(*args)

    def setLineSpacingStyle(self, *args):
        return _ODA_Drawings.OdDbMText_setLineSpacingStyle(self, *args)

    def lineSpacingStyle(self, *args):
        return _ODA_Drawings.OdDbMText_lineSpacingStyle(self, *args)

    def setLineSpacingFactor(self, *args):
        return _ODA_Drawings.OdDbMText_setLineSpacingFactor(self, *args)

    def lineSpacingFactor(self, *args):
        return _ODA_Drawings.OdDbMText_lineSpacingFactor(self, *args)

    def horizontalMode(self, *args):
        return _ODA_Drawings.OdDbMText_horizontalMode(self, *args)

    def setHorizontalMode(self, *args):
        return _ODA_Drawings.OdDbMText_setHorizontalMode(self, *args)

    def verticalMode(self, *args):
        return _ODA_Drawings.OdDbMText_verticalMode(self, *args)

    def setVerticalMode(self, *args):
        return _ODA_Drawings.OdDbMText_setVerticalMode(self, *args)

    def getEcs(self, *args):
        return _ODA_Drawings.OdDbMText_getEcs(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbMText_subSetAttributes(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbMText_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbMText_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbMText_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbMText_dxfOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbMText_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbMText_subViewportDraw(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbMText_subTransformBy(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbMText_subExplode(self, *args)

    def explodeGeometry(self, *args):
        return _ODA_Drawings.OdDbMText_explodeGeometry(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbMText_subGetClassID(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbMText_subClose(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbMText_isPlanar(self, *args)

    def explodeFragments(self, *args):
        return _ODA_Drawings.OdDbMText_explodeFragments(self, *args)

    def actualHeight(self, *args):
        return _ODA_Drawings.OdDbMText_actualHeight(self, *args)

    def getActualBoundingPoints(self, *args):
        return _ODA_Drawings.OdDbMText_getActualBoundingPoints(self, *args)

    def getBoundingPoints(self, *args):
        return _ODA_Drawings.OdDbMText_getBoundingPoints(self, *args)

    def setAttachmentMovingLocation(self, *args):
        return _ODA_Drawings.OdDbMText_setAttachmentMovingLocation(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbMText_subGetGeomExtents(self, *args)

    def backgroundFillOn(self, *args):
        return _ODA_Drawings.OdDbMText_backgroundFillOn(self, *args)

    def setBackgroundFill(self, *args):
        return _ODA_Drawings.OdDbMText_setBackgroundFill(self, *args)

    def getBackgroundFillColor(self, *args):
        return _ODA_Drawings.OdDbMText_getBackgroundFillColor(self, *args)

    def setBackgroundFillColor(self, *args):
        return _ODA_Drawings.OdDbMText_setBackgroundFillColor(self, *args)

    def getBackgroundScaleFactor(self, *args):
        return _ODA_Drawings.OdDbMText_getBackgroundScaleFactor(self, *args)

    def setBackgroundScaleFactor(self, *args):
        return _ODA_Drawings.OdDbMText_setBackgroundScaleFactor(self, *args)

    def getBackgroundTransparency(self, *args):
        return _ODA_Drawings.OdDbMText_getBackgroundTransparency(self, *args)

    def setBackgroundTransparency(self, *args):
        return _ODA_Drawings.OdDbMText_setBackgroundTransparency(self, *args)

    def useBackgroundColorOn(self, *args):
        return _ODA_Drawings.OdDbMText_useBackgroundColorOn(self, *args)

    def setUseBackgroundColor(self, *args):
        return _ODA_Drawings.OdDbMText_setUseBackgroundColor(self, *args)

    def getParagraphsIndent(self, *args):
        return _ODA_Drawings.OdDbMText_getParagraphsIndent(self, *args)

    def setField(self, *args):
        return _ODA_Drawings.OdDbMText_setField(self, *args)

    def removeField(self, *args):
        return _ODA_Drawings.OdDbMText_removeField(self, *args)

    def convertFieldToText(self, *args):
        return _ODA_Drawings.OdDbMText_convertFieldToText(self, *args)

    def subSetDatabaseDefaults(self, *args):
        return _ODA_Drawings.OdDbMText_subSetDatabaseDefaults(self, *args)
    kNoColumns = _ODA_Drawings.OdDbMText_kNoColumns
    kStaticColumns = _ODA_Drawings.OdDbMText_kStaticColumns
    kDynamicColumns = _ODA_Drawings.OdDbMText_kDynamicColumns

    def setDynamicColumns(self, *args):
        return _ODA_Drawings.OdDbMText_setDynamicColumns(self, *args)

    def setStaticColumns(self, *args):
        return _ODA_Drawings.OdDbMText_setStaticColumns(self, *args)

    def getColumnType(self, *args):
        return _ODA_Drawings.OdDbMText_getColumnType(self, *args)

    def setColumnType(self, *args):
        return _ODA_Drawings.OdDbMText_setColumnType(self, *args)

    def getColumnAutoHeight(self, *args):
        return _ODA_Drawings.OdDbMText_getColumnAutoHeight(self, *args)

    def setColumnAutoHeight(self, *args):
        return _ODA_Drawings.OdDbMText_setColumnAutoHeight(self, *args)

    def getColumnCount(self, *args):
        return _ODA_Drawings.OdDbMText_getColumnCount(self, *args)

    def setColumnCount(self, *args):
        return _ODA_Drawings.OdDbMText_setColumnCount(self, *args)

    def getColumnWidth(self, *args):
        return _ODA_Drawings.OdDbMText_getColumnWidth(self, *args)

    def setColumnWidth(self, *args):
        return _ODA_Drawings.OdDbMText_setColumnWidth(self, *args)

    def getColumnGutterWidth(self, *args):
        return _ODA_Drawings.OdDbMText_getColumnGutterWidth(self, *args)

    def setColumnGutterWidth(self, *args):
        return _ODA_Drawings.OdDbMText_setColumnGutterWidth(self, *args)

    def getColumnFlowReversed(self, *args):
        return _ODA_Drawings.OdDbMText_getColumnFlowReversed(self, *args)

    def setColumnFlowReversed(self, *args):
        return _ODA_Drawings.OdDbMText_setColumnFlowReversed(self, *args)

    def getColumnHeight(self, *args):
        return _ODA_Drawings.OdDbMText_getColumnHeight(self, *args)

    def setColumnHeight(self, *args):
        return _ODA_Drawings.OdDbMText_setColumnHeight(self, *args)

    def height(self, *args):
        return _ODA_Drawings.OdDbMText_height(self, *args)

    def setHeight(self, *args):
        return _ODA_Drawings.OdDbMText_setHeight(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbMText_getPlane(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbMText_subGetTransformedCopy(self, *args)

    def ascent(self, *args):
        return _ODA_Drawings.OdDbMText_ascent(self, *args)

    def descent(self, *args):
        return _ODA_Drawings.OdDbMText_descent(self, *args)

    def setShowBorders(self, *args):
        return _ODA_Drawings.OdDbMText_setShowBorders(self, *args)

    def showBorders(self, *args):
        return _ODA_Drawings.OdDbMText_showBorders(self, *args)

    def text(self, *args):
        return _ODA_Drawings.OdDbMText_text(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbMText

# Register OdDbMText in _ODA_Drawings:
_ODA_Drawings.OdDbMText_swigregister(OdDbMText)

def OdDbMText_cast(*args):
    return _ODA_Drawings.OdDbMText_cast(*args)

def OdDbMText_desc(*args):
    return _ODA_Drawings.OdDbMText_desc(*args)

def OdDbMText_createObject(*args):
    return _ODA_Drawings.OdDbMText_createObject(*args)

def OdDbMText_nonBreakSpace(*args):
    return _ODA_Drawings.OdDbMText_nonBreakSpace(*args)

def OdDbMText_overlineOn(*args):
    return _ODA_Drawings.OdDbMText_overlineOn(*args)

def OdDbMText_overlineOff(*args):
    return _ODA_Drawings.OdDbMText_overlineOff(*args)

def OdDbMText_underlineOn(*args):
    return _ODA_Drawings.OdDbMText_underlineOn(*args)

def OdDbMText_underlineOff(*args):
    return _ODA_Drawings.OdDbMText_underlineOff(*args)

def OdDbMText_colorChange(*args):
    return _ODA_Drawings.OdDbMText_colorChange(*args)

def OdDbMText_fontChange(*args):
    return _ODA_Drawings.OdDbMText_fontChange(*args)

def OdDbMText_heightChange(*args):
    return _ODA_Drawings.OdDbMText_heightChange(*args)

def OdDbMText_widthChange(*args):
    return _ODA_Drawings.OdDbMText_widthChange(*args)

def OdDbMText_obliqueChange(*args):
    return _ODA_Drawings.OdDbMText_obliqueChange(*args)

def OdDbMText_trackChange(*args):
    return _ODA_Drawings.OdDbMText_trackChange(*args)

def OdDbMText_lineBreak(*args):
    return _ODA_Drawings.OdDbMText_lineBreak(*args)

def OdDbMText_paragraphBreak(*args):
    return _ODA_Drawings.OdDbMText_paragraphBreak(*args)

def OdDbMText_stackStart(*args):
    return _ODA_Drawings.OdDbMText_stackStart(*args)

def OdDbMText_alignChange(*args):
    return _ODA_Drawings.OdDbMText_alignChange(*args)

def OdDbMText_blockBegin(*args):
    return _ODA_Drawings.OdDbMText_blockBegin(*args)

def OdDbMText_blockEnd(*args):
    return _ODA_Drawings.OdDbMText_blockEnd(*args)

class OdDbGraphNode(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbGraphNode_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbGraphNode_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbGraphNode_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbGraphNode_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGraphNode_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGraphNode
    kNone = _ODA_Drawings.OdDbGraphNode_kNone
    kVisited = _ODA_Drawings.OdDbGraphNode_kVisited
    kOutsideRefed = _ODA_Drawings.OdDbGraphNode_kOutsideRefed
    kSelected = _ODA_Drawings.OdDbGraphNode_kSelected
    kInList = _ODA_Drawings.OdDbGraphNode_kInList
    kListAll = _ODA_Drawings.OdDbGraphNode_kListAll
    kFirstLevel = _ODA_Drawings.OdDbGraphNode_kFirstLevel
    kUnresTree = _ODA_Drawings.OdDbGraphNode_kUnresTree
    kAll = _ODA_Drawings.OdDbGraphNode_kAll

    def data(self, *args):
        return _ODA_Drawings.OdDbGraphNode_data(self, *args)

    def setData(self, *args):
        return _ODA_Drawings.OdDbGraphNode_setData(self, *args)

    def numOut(self, *args):
        return _ODA_Drawings.OdDbGraphNode_numOut(self, *args)

    def numIn(self, *args):
        return _ODA_Drawings.OdDbGraphNode_numIn(self, *args)

    def _in(self, *args):
        return _ODA_Drawings.OdDbGraphNode__in(self, *args)

    def out(self, *args):
        return _ODA_Drawings.OdDbGraphNode_out(self, *args)

    def addRefTo(self, *args):
        return _ODA_Drawings.OdDbGraphNode_addRefTo(self, *args)

    def removeRefTo(self, *args):
        return _ODA_Drawings.OdDbGraphNode_removeRefTo(self, *args)

    def disconnectAll(self, *args):
        return _ODA_Drawings.OdDbGraphNode_disconnectAll(self, *args)

    def owner(self, *args):
        return _ODA_Drawings.OdDbGraphNode_owner(self, *args)

    def isMarkedAs(self, *args):
        return _ODA_Drawings.OdDbGraphNode_isMarkedAs(self, *args)

    def markAs(self, *args):
        return _ODA_Drawings.OdDbGraphNode_markAs(self, *args)

    def clear(self, *args):
        return _ODA_Drawings.OdDbGraphNode_clear(self, *args)

    def numCycleOut(self, *args):
        return _ODA_Drawings.OdDbGraphNode_numCycleOut(self, *args)

    def numCycleIn(self, *args):
        return _ODA_Drawings.OdDbGraphNode_numCycleIn(self, *args)

    def cycleIn(self, *args):
        return _ODA_Drawings.OdDbGraphNode_cycleIn(self, *args)

    def cycleOut(self, *args):
        return _ODA_Drawings.OdDbGraphNode_cycleOut(self, *args)

    def nextCycleNode(self, *args):
        return _ODA_Drawings.OdDbGraphNode_nextCycleNode(self, *args)

    def isCycleNode(self, *args):
        return _ODA_Drawings.OdDbGraphNode_isCycleNode(self, *args)

# Register OdDbGraphNode in _ODA_Drawings:
_ODA_Drawings.OdDbGraphNode_swigregister(OdDbGraphNode)

def OdDbGraphNode_cast(*args):
    return _ODA_Drawings.OdDbGraphNode_cast(*args)

def OdDbGraphNode_desc(*args):
    return _ODA_Drawings.OdDbGraphNode_desc(*args)

def OdDbGraphNode_createObject(*args):
    return _ODA_Drawings.OdDbGraphNode_createObject(*args)

class OdDbGraphStack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbGraphStack_swiginit(self, _ODA_Drawings.new_OdDbGraphStack(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGraphStack

    def push(self, *args):
        return _ODA_Drawings.OdDbGraphStack_push(self, *args)

    def pop(self, *args):
        return _ODA_Drawings.OdDbGraphStack_pop(self, *args)

    def top(self, *args):
        return _ODA_Drawings.OdDbGraphStack_top(self, *args)

    def isEmpty(self, *args):
        return _ODA_Drawings.OdDbGraphStack_isEmpty(self, *args)

# Register OdDbGraphStack in _ODA_Drawings:
_ODA_Drawings.OdDbGraphStack_swigregister(OdDbGraphStack)

class OdDbGraph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbGraph_swiginit(self, _ODA_Drawings.new_OdDbGraph(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGraph

    def node(self, *args):
        return _ODA_Drawings.OdDbGraph_node(self, *args)

    def rootNode(self, *args):
        return _ODA_Drawings.OdDbGraph_rootNode(self, *args)

    def numNodes(self, *args):
        return _ODA_Drawings.OdDbGraph_numNodes(self, *args)

    def isEmpty(self, *args):
        return _ODA_Drawings.OdDbGraph_isEmpty(self, *args)

    def addNode(self, *args):
        return _ODA_Drawings.OdDbGraph_addNode(self, *args)

    def addEdge(self, *args):
        return _ODA_Drawings.OdDbGraph_addEdge(self, *args)

    def delNode(self, *args):
        return _ODA_Drawings.OdDbGraph_delNode(self, *args)

    def reset(self, *args):
        return _ODA_Drawings.OdDbGraph_reset(self, *args)

    def clearAll(self, *args):
        return _ODA_Drawings.OdDbGraph_clearAll(self, *args)

    def getOutgoing(self, *args):
        return _ODA_Drawings.OdDbGraph_getOutgoing(self, *args)

    def findCycles(self, *args):
        return _ODA_Drawings.OdDbGraph_findCycles(self, *args)

    def breakCycleEdge(self, *args):
        return _ODA_Drawings.OdDbGraph_breakCycleEdge(self, *args)

# Register OdDbGraph in _ODA_Drawings:
_ODA_Drawings.OdDbGraph_swigregister(OdDbGraph)

class OdDbSelectionFilter(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSelectionFilter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSelectionFilter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSelectionFilter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSelectionFilter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSelectionFilter_createObject(*args)

    def accept(self, *args):
        return _ODA_Drawings.OdDbSelectionFilter_accept(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSelectionFilter

# Register OdDbSelectionFilter in _ODA_Drawings:
_ODA_Drawings.OdDbSelectionFilter_swigregister(OdDbSelectionFilter)

def OdDbSelectionFilter_cast(*args):
    return _ODA_Drawings.OdDbSelectionFilter_cast(*args)

def OdDbSelectionFilter_desc(*args):
    return _ODA_Drawings.OdDbSelectionFilter_desc(*args)

def OdDbSelectionFilter_createObject(*args):
    return _ODA_Drawings.OdDbSelectionFilter_createObject(*args)

class OdDbParametrizedSF(OdDbSelectionFilter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbParametrizedSF_createObject(*args)

    def setSpecification(self, *args):
        return _ODA_Drawings.OdDbParametrizedSF_setSpecification(self, *args)

    def specification(self, *args):
        return _ODA_Drawings.OdDbParametrizedSF_specification(self, *args)

    def database(self, *args):
        return _ODA_Drawings.OdDbParametrizedSF_database(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbParametrizedSF

# Register OdDbParametrizedSF in _ODA_Drawings:
_ODA_Drawings.OdDbParametrizedSF_swigregister(OdDbParametrizedSF)

def OdDbParametrizedSF_createObject(*args):
    return _ODA_Drawings.OdDbParametrizedSF_createObject(*args)

class OdDbSelectionSetIterator(ODA_Kernel.OdSelectionSetIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSelectionSetIterator_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSelectionSetIterator_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSelectionSetIterator_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSelectionSetIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSelectionSetIterator_createObject(*args)

    def objectId(self, *args):
        return _ODA_Drawings.OdDbSelectionSetIterator_objectId(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSelectionSetIterator

# Register OdDbSelectionSetIterator in _ODA_Drawings:
_ODA_Drawings.OdDbSelectionSetIterator_swigregister(OdDbSelectionSetIterator)

def OdDbSelectionSetIterator_cast(*args):
    return _ODA_Drawings.OdDbSelectionSetIterator_cast(*args)

def OdDbSelectionSetIterator_desc(*args):
    return _ODA_Drawings.OdDbSelectionSetIterator_desc(*args)

def OdDbSelectionSetIterator_createObject(*args):
    return _ODA_Drawings.OdDbSelectionSetIterator_createObject(*args)

class OdDbSelectionSet(ODA_Kernel.OdSelectionSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSelectionSet_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSelectionSet_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSelectionSet_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSelectionSet_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSelectionSet_createObject(*args)

    def database(self, *args):
        return _ODA_Drawings.OdDbSelectionSet_database(self, *args)

    def objectIdArray(self, *args):
        return _ODA_Drawings.OdDbSelectionSet_objectIdArray(self, *args)

    @staticmethod
    def select(*args):
        return _ODA_Drawings.OdDbSelectionSet_select(*args)

    def append(self, *args):
        return _ODA_Drawings.OdDbSelectionSet_append(self, *args)

    def remove(self, *args):
        return _ODA_Drawings.OdDbSelectionSet_remove(self, *args)

    def isMember(self, *args):
        return _ODA_Drawings.OdDbSelectionSet_isMember(self, *args)

    def subentCount(self, *args):
        return _ODA_Drawings.OdDbSelectionSet_subentCount(self, *args)

    def getSubentity(self, *args):
        return _ODA_Drawings.OdDbSelectionSet_getSubentity(self, *args)

    def method(self, *args):
        return _ODA_Drawings.OdDbSelectionSet_method(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSelectionSet

# Register OdDbSelectionSet in _ODA_Drawings:
_ODA_Drawings.OdDbSelectionSet_swigregister(OdDbSelectionSet)

def OdDbSelectionSet_cast(*args):
    return _ODA_Drawings.OdDbSelectionSet_cast(*args)

def OdDbSelectionSet_desc(*args):
    return _ODA_Drawings.OdDbSelectionSet_desc(*args)

def OdDbSelectionSet_createObject(*args):
    return _ODA_Drawings.OdDbSelectionSet_createObject(*args)

def OdDbSelectionSet_select(*args):
    return _ODA_Drawings.OdDbSelectionSet_select(*args)

class OdDbHostAppServices(ODA_Kernel.OdDbBaseHostAppServices):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbHostAppServices_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbHostAppServices_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbHostAppServices_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbHostAppServices

    def findFile(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_findFile(self, *args)

    def newProgressMeter(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_newProgressMeter(self, *args)

    def releaseProgressMeter(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_releaseProgressMeter(self, *args)

    def databaseClass(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_databaseClass(self, *args)

    def createDatabase(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_createDatabase(self, *args)

    def recoverFile(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_recoverFile(self, *args)

    def readFile(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_readFile(self, *args)

    def program(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_program(self, *args)

    def product(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_product(self, *args)

    def companyName(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_companyName(self, *args)

    def prodcode(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_prodcode(self, *args)

    def releaseMajorMinorString(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_releaseMajorMinorString(self, *args)

    def releaseMajorVersion(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_releaseMajorVersion(self, *args)

    def releaseMinorVersion(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_releaseMinorVersion(self, *args)

    def versionString(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_versionString(self, *args)

    def warning(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_warning(self, *args)

    def getErrorDescription(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getErrorDescription(self, *args)

    def doFullCRCCheck(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_doFullCRCCheck(self, *args)

    def newUndoController(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_newUndoController(self, *args)

    def auditPrintReport(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_auditPrintReport(self, *args)

    def plotSettingsValidator(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_plotSettingsValidator(self, *args)

    def getAlternateFontName(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getAlternateFontName(self, *args)

    def getFontMapFileName(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getFontMapFileName(self, *args)

    def getPreferableFont(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPreferableFont(self, *args)

    def getSubstituteFont(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getSubstituteFont(self, *args)

    def getSubstituteFontByChar(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getSubstituteFontByChar(self, *args)

    def getSystemFontFolders(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getSystemFontFolders(self, *args)

    def collectFilePathsInDirectory(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_collectFilePathsInDirectory(self, *args)

    def patternManager(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_patternManager(self, *args)

    def getPassword(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPassword(self, *args)

    def getPasswordCache(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPasswordCache(self, *args)

    def newPageController(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_newPageController(self, *args)

    def fileDialog(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_fileDialog(self, *args)

    def layoutManager(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_layoutManager(self, *args)

    def educationalPlotStamp(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_educationalPlotStamp(self, *args)

    def getDgnHostAppServices(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getDgnHostAppServices(self, *args)

    def getThumbSize(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getThumbSize(self, *args)

    def gsBitmapDevice(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_gsBitmapDevice(self, *args)

    def getHistoryFile(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getHistoryFile(self, *args)

    def brepBuilder(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_brepBuilder(self, *args)

    def fixName(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_fixName(self, *args)

    def getPLOTTRANSPARENCYOVERRIDE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPLOTTRANSPARENCYOVERRIDE(self, *args)

    def setPLOTTRANSPARENCYOVERRIDE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPLOTTRANSPARENCYOVERRIDE(self, *args)

    def getATTREQ(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getATTREQ(self, *args)

    def setATTREQ(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setATTREQ(self, *args)

    def getATTDIA(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getATTDIA(self, *args)

    def setATTDIA(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setATTDIA(self, *args)

    def getBLIPMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getBLIPMODE(self, *args)

    def setBLIPMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setBLIPMODE(self, *args)

    def getDELOBJ(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getDELOBJ(self, *args)

    def setDELOBJ(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setDELOBJ(self, *args)

    def getFILEDIA(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getFILEDIA(self, *args)

    def setFILEDIA(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setFILEDIA(self, *args)

    def getCOORDS(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getCOORDS(self, *args)

    def setCOORDS(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setCOORDS(self, *args)

    def getDRAGMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getDRAGMODE(self, *args)

    def setDRAGMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setDRAGMODE(self, *args)

    def getOSMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getOSMODE(self, *args)

    def setOSMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setOSMODE(self, *args)

    def getPICKFIRST(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPICKFIRST(self, *args)

    def setPICKFIRST(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPICKFIRST(self, *args)

    def getPICKBOX(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPICKBOX(self, *args)

    def setPICKBOX(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPICKBOX(self, *args)

    def getAPERTURE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getAPERTURE(self, *args)

    def setAPERTURE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setAPERTURE(self, *args)

    def getPICKADD(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPICKADD(self, *args)

    def setPICKADD(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPICKADD(self, *args)

    def getPICKSTYLE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPICKSTYLE(self, *args)

    def setPICKSTYLE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPICKSTYLE(self, *args)

    def getLWDISPSCALE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getLWDISPSCALE(self, *args)

    def setLWDISPSCALE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setLWDISPSCALE(self, *args)

    def getLWDEFAULT(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getLWDEFAULT(self, *args)

    def setLWDEFAULT(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setLWDEFAULT(self, *args)

    def getFONTALT(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getFONTALT(self, *args)

    def setFONTALT(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setFONTALT(self, *args)

    def getPLINETYPE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPLINETYPE(self, *args)

    def setPLINETYPE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPLINETYPE(self, *args)

    def getPROXYSHOW(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPROXYSHOW(self, *args)

    def setPROXYSHOW(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPROXYSHOW(self, *args)

    def getTEXTFILL(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getTEXTFILL(self, *args)

    def setTEXTFILL(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setTEXTFILL(self, *args)

    def getGRIPHOVER(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getGRIPHOVER(self, *args)

    def setGRIPHOVER(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setGRIPHOVER(self, *args)

    def getGRIPOBJLIMIT(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getGRIPOBJLIMIT(self, *args)

    def setGRIPOBJLIMIT(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setGRIPOBJLIMIT(self, *args)

    def getGRIPTIPS(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getGRIPTIPS(self, *args)

    def setGRIPTIPS(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setGRIPTIPS(self, *args)

    def getHPASSOC(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getHPASSOC(self, *args)

    def setHPASSOC(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setHPASSOC(self, *args)

    def getLOCALROOTPREFIX(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getLOCALROOTPREFIX(self, *args)

    def setLOCALROOTPREFIX(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setLOCALROOTPREFIX(self, *args)

    def getLOGFILEMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getLOGFILEMODE(self, *args)

    def setLOGFILEMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setLOGFILEMODE(self, *args)

    def getMAXHATCHDENSITY(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getMAXHATCHDENSITY(self, *args)

    def setMAXHATCHDENSITY(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setMAXHATCHDENSITY(self, *args)

    def getHPMAXCONTOURPOINTS(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getHPMAXCONTOURPOINTS(self, *args)

    def setHPMAXCONTOURPOINTS(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setHPMAXCONTOURPOINTS(self, *args)

    def getHPCUTPOINTSLIMIT(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getHPCUTPOINTSLIMIT(self, *args)

    def setHPCUTPOINTSLIMIT(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setHPCUTPOINTSLIMIT(self, *args)

    def getHPSMOOTHEVALUATE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getHPSMOOTHEVALUATE(self, *args)

    def setHPSMOOTHEVALUATE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setHPSMOOTHEVALUATE(self, *args)

    def getHPNEWDRAW(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getHPNEWDRAW(self, *args)

    def setHPNEWDRAW(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setHPNEWDRAW(self, *args)

    def getSILHGENMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getSILHGENMODE(self, *args)

    def setSILHGENMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setSILHGENMODE(self, *args)

    def getSILHWIDTH(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getSILHWIDTH(self, *args)

    def setSILHWIDTH(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setSILHWIDTH(self, *args)

    def getFIELDDISPLAY(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getFIELDDISPLAY(self, *args)

    def setFIELDDISPLAY(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setFIELDDISPLAY(self, *args)

    def getUCSVIEW(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getUCSVIEW(self, *args)

    def setUCSVIEW(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setUCSVIEW(self, *args)

    def getGRIPBLOCK(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getGRIPBLOCK(self, *args)

    def setGRIPBLOCK(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setGRIPBLOCK(self, *args)

    def getGRIPCOLOR(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getGRIPCOLOR(self, *args)

    def setGRIPCOLOR(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setGRIPCOLOR(self, *args)

    def getGRIPCONTOUR(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getGRIPCONTOUR(self, *args)

    def setGRIPCONTOUR(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setGRIPCONTOUR(self, *args)

    def getGRIPDYNCOLOR(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getGRIPDYNCOLOR(self, *args)

    def setGRIPDYNCOLOR(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setGRIPDYNCOLOR(self, *args)

    def getGRIPHOT(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getGRIPHOT(self, *args)

    def setGRIPHOT(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setGRIPHOT(self, *args)

    def getGRIPS(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getGRIPS(self, *args)

    def setGRIPS(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setGRIPS(self, *args)

    def getGRIPSIZE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getGRIPSIZE(self, *args)

    def setGRIPSIZE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setGRIPSIZE(self, *args)

    def getSAVEFIDELITY(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getSAVEFIDELITY(self, *args)

    def setSAVEFIDELITY(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setSAVEFIDELITY(self, *args)

    def getDWFOSNAP(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getDWFOSNAP(self, *args)

    def setDWFOSNAP(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setDWFOSNAP(self, *args)

    def getDGNOSNAP(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getDGNOSNAP(self, *args)

    def setDGNOSNAP(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setDGNOSNAP(self, *args)

    def getOLEQUALITY(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getOLEQUALITY(self, *args)

    def setOLEQUALITY(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setOLEQUALITY(self, *args)

    def getOLEHIDE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getOLEHIDE(self, *args)

    def setOLEHIDE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setOLEHIDE(self, *args)

    def getISAVEPERCENT(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getISAVEPERCENT(self, *args)

    def setISAVEPERCENT(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setISAVEPERCENT(self, *args)

    def getDEMANDLOAD(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getDEMANDLOAD(self, *args)

    def setDEMANDLOAD(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setDEMANDLOAD(self, *args)

    def getLAYLOCKFADECTL(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getLAYLOCKFADECTL(self, *args)

    def setLAYLOCKFADECTL(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setLAYLOCKFADECTL(self, *args)

    def getTHUMBSIZE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getTHUMBSIZE(self, *args)

    def setTHUMBSIZE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setTHUMBSIZE(self, *args)

    def getPUBLISHHATCH(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPUBLISHHATCH(self, *args)

    def setPUBLISHHATCH(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPUBLISHHATCH(self, *args)

    def getOPENPARTIAL(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getOPENPARTIAL(self, *args)

    def setOPENPARTIAL(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setOPENPARTIAL(self, *args)

    def getDGNIMPORTMAX(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getDGNIMPORTMAX(self, *args)

    def setDGNIMPORTMAX(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setDGNIMPORTMAX(self, *args)

    def getPLINECONVERTMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPLINECONVERTMODE(self, *args)

    def setPLINECONVERTMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPLINECONVERTMODE(self, *args)

    def getPDFOSNAP(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPDFOSNAP(self, *args)

    def setPDFOSNAP(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPDFOSNAP(self, *args)

    def getXFADECTL(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getXFADECTL(self, *args)

    def setXFADECTL(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setXFADECTL(self, *args)

    def getXDWGFADECTL(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getXDWGFADECTL(self, *args)

    def setXDWGFADECTL(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setXDWGFADECTL(self, *args)

    def getPARAMETERCOPYMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPARAMETERCOPYMODE(self, *args)

    def setPARAMETERCOPYMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPARAMETERCOPYMODE(self, *args)

    def getOBJECTISOLATIONMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getOBJECTISOLATIONMODE(self, *args)

    def setOBJECTISOLATIONMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setOBJECTISOLATIONMODE(self, *args)

    def getARRAYTYPE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getARRAYTYPE(self, *args)

    def setARRAYTYPE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setARRAYTYPE(self, *args)

    def getPOINTCLOUDAUTOUPDATE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPOINTCLOUDAUTOUPDATE(self, *args)

    def setPOINTCLOUDAUTOUPDATE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPOINTCLOUDAUTOUPDATE(self, *args)

    def getPOINTCLOUDDENSITY(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPOINTCLOUDDENSITY(self, *args)

    def setPOINTCLOUDDENSITY(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPOINTCLOUDDENSITY(self, *args)

    def getPOINTCLOUDLOCK(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPOINTCLOUDLOCK(self, *args)

    def setPOINTCLOUDLOCK(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPOINTCLOUDLOCK(self, *args)

    def getPOINTCLOUDRTDENSITY(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPOINTCLOUDRTDENSITY(self, *args)

    def setPOINTCLOUDRTDENSITY(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPOINTCLOUDRTDENSITY(self, *args)

    def getARRAYASSOCIATIVITY(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getARRAYASSOCIATIVITY(self, *args)

    def setARRAYASSOCIATIVITY(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setARRAYASSOCIATIVITY(self, *args)

    def getPOINTCLOUDBOUNDARY(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPOINTCLOUDBOUNDARY(self, *args)

    def setPOINTCLOUDBOUNDARY(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPOINTCLOUDBOUNDARY(self, *args)

    def getPOINTCLOUDPOINTMAX(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPOINTCLOUDPOINTMAX(self, *args)

    def setPOINTCLOUDPOINTMAX(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPOINTCLOUDPOINTMAX(self, *args)

    def getTEXTALIGNMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getTEXTALIGNMODE(self, *args)

    def setTEXTALIGNMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setTEXTALIGNMODE(self, *args)

    def getLINESMOOTHING(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getLINESMOOTHING(self, *args)

    def setLINESMOOTHING(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setLINESMOOTHING(self, *args)

    def getHPLINETYPE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getHPLINETYPE(self, *args)

    def setHPLINETYPE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setHPLINETYPE(self, *args)

    def getPOINTCLOUDPOINTMAXLEGACY(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPOINTCLOUDPOINTMAXLEGACY(self, *args)

    def setPOINTCLOUDPOINTMAXLEGACY(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPOINTCLOUDPOINTMAXLEGACY(self, *args)

    def getPOINTCLOUDLOD(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPOINTCLOUDLOD(self, *args)

    def setPOINTCLOUDLOD(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPOINTCLOUDLOD(self, *args)

    def getREVCLOUDCREATEMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getREVCLOUDCREATEMODE(self, *args)

    def setREVCLOUDCREATEMODE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setREVCLOUDCREATEMODE(self, *args)

    def getREVCLOUDGRIPS(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getREVCLOUDGRIPS(self, *args)

    def setREVCLOUDGRIPS(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setREVCLOUDGRIPS(self, *args)

    def getLTGAPSELECTION(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getLTGAPSELECTION(self, *args)

    def setLTGAPSELECTION(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setLTGAPSELECTION(self, *args)

    def getSELECTIONEFFECTCOLOR(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getSELECTIONEFFECTCOLOR(self, *args)

    def setSELECTIONEFFECTCOLOR(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setSELECTIONEFFECTCOLOR(self, *args)

    def getSELECTIONEFFECT(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getSELECTIONEFFECT(self, *args)

    def setSELECTIONEFFECT(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setSELECTIONEFFECT(self, *args)

    def getIMAGEHLT(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getIMAGEHLT(self, *args)

    def setIMAGEHLT(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setIMAGEHLT(self, *args)

    def getSAVEROUNDTRIP(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getSAVEROUNDTRIP(self, *args)

    def setSAVEROUNDTRIP(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setSAVEROUNDTRIP(self, *args)

    def getR12SaveDeviation(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getR12SaveDeviation(self, *args)

    def setR12SaveDeviation(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setR12SaveDeviation(self, *args)

    def getR12SaveAccuracy(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getR12SaveAccuracy(self, *args)

    def setR12SaveAccuracy(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setR12SaveAccuracy(self, *args)

    def getAcisSaveAsMode(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getAcisSaveAsMode(self, *args)

    def setAcisSaveAsMode(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setAcisSaveAsMode(self, *args)

    def getAcisProxyMode(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getAcisProxyMode(self, *args)

    def setAcisProxyMode(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setAcisProxyMode(self, *args)

    def getPLINECACHE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPLINECACHE(self, *args)

    def setPLINECACHE(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPLINECACHE(self, *args)

    def getDxfTextAdjustAlignment(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getDxfTextAdjustAlignment(self, *args)

    def setDxfTextAdjustAlignment(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setDxfTextAdjustAlignment(self, *args)

    def getRecomputeDimBlocksRequired(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getRecomputeDimBlocksRequired(self, *args)

    def setRecomputeDimBlocksRequired(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setRecomputeDimBlocksRequired(self, *args)

    def getAllowSavingEmptyAcisObjects(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getAllowSavingEmptyAcisObjects(self, *args)

    def setAllowSavingEmptyAcisObjects(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setAllowSavingEmptyAcisObjects(self, *args)

    def getRestoreHatchFromBlkRef(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getRestoreHatchFromBlkRef(self, *args)

    def setRestoreHatchFromBlkRef(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setRestoreHatchFromBlkRef(self, *args)

    def getMtMode(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getMtMode(self, *args)

    def setMtMode(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setMtMode(self, *args)

    def getNegativeHandlesReserved(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getNegativeHandlesReserved(self, *args)

    def setNegativeHandlesReserved(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setNegativeHandlesReserved(self, *args)

    def getVerticalApplicationsMode(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getVerticalApplicationsMode(self, *args)

    def setVerticalApplicationsMode(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setVerticalApplicationsMode(self, *args)

    def getEnableAcisAudit(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getEnableAcisAudit(self, *args)

    def setEnableAcisAudit(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setEnableAcisAudit(self, *args)

    def getHonourLockedLayer(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getHonourLockedLayer(self, *args)

    def setHonourLockedLayer(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setHonourLockedLayer(self, *args)

    def getTableIndicator(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getTableIndicator(self, *args)

    def setTableIndicator(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setTableIndicator(self, *args)

    def getTableLinkIndicator(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getTableLinkIndicator(self, *args)

    def setTableLinkIndicator(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setTableLinkIndicator(self, *args)

    def getTableSelectIndicator(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getTableSelectIndicator(self, *args)

    def setTableSelectIndicator(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setTableSelectIndicator(self, *args)

    def getTableIndicatorColor(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getTableIndicatorColor(self, *args)

    def setTableIndicatorColor(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setTableIndicatorColor(self, *args)

    def getPDFIMPORTIMAGEPATH(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPDFIMPORTIMAGEPATH(self, *args)

    def setPDFIMPORTIMAGEPATH(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPDFIMPORTIMAGEPATH(self, *args)

    def getPartialViewingMode(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getPartialViewingMode(self, *args)

    def setPartialViewingMode(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setPartialViewingMode(self, *args)

    def getXREFREGAPPCTL(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_getXREFREGAPPCTL(self, *args)

    def setXREFREGAPPCTL(self, *args):
        return _ODA_Drawings.OdDbHostAppServices_setXREFREGAPPCTL(self, *args)

# Register OdDbHostAppServices in _ODA_Drawings:
_ODA_Drawings.OdDbHostAppServices_swigregister(OdDbHostAppServices)

def OdDbHostAppServices_cast(*args):
    return _ODA_Drawings.OdDbHostAppServices_cast(*args)

def OdDbHostAppServices_desc(*args):
    return _ODA_Drawings.OdDbHostAppServices_desc(*args)

def OdDbHostAppServices_createObject(*args):
    return _ODA_Drawings.OdDbHostAppServices_createObject(*args)

class OdDbHostAppServices2(OdDbHostAppServices):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def __new(*args):
        return _ODA_Drawings.OdDbHostAppServices2___new(*args)

    def __init__(self):
        this = _ODA_Drawings.OdDbHostAppServices2___new(self)
        try:
          self.this.append(this)
        except:
          self.this = this

    __swig_destroy__ = _ODA_Drawings.delete_OdDbHostAppServices2
    def __disown__(self):
        self.this.disown()
        _ODA_Drawings.disown_OdDbHostAppServices2(self)
        return weakref.proxy(self)

# Register OdDbHostAppServices2 in _ODA_Drawings:
_ODA_Drawings.OdDbHostAppServices2_swigregister(OdDbHostAppServices2)

def OdDbHostAppServices2___new(*args):
    return _ODA_Drawings.OdDbHostAppServices2___new(*args)

class OdDbAbstractViewTable(OdDbSymbolTable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAbstractViewTable_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAbstractViewTable_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTable_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTable_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAbstractViewTable_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAbstractViewTable

# Register OdDbAbstractViewTable in _ODA_Drawings:
_ODA_Drawings.OdDbAbstractViewTable_swigregister(OdDbAbstractViewTable)

def OdDbAbstractViewTable_cast(*args):
    return _ODA_Drawings.OdDbAbstractViewTable_cast(*args)

def OdDbAbstractViewTable_desc(*args):
    return _ODA_Drawings.OdDbAbstractViewTable_desc(*args)

def OdDbAbstractViewTable_createObject(*args):
    return _ODA_Drawings.OdDbAbstractViewTable_createObject(*args)

class OdDbAbstractViewTableRecord(OdDbSymbolTableRecord):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_createObject(*args)

    def centerPoint(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_centerPoint(self, *args)

    def setCenterPoint(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setCenterPoint(self, *args)

    def height(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_height(self, *args)

    def setHeight(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setHeight(self, *args)

    def width(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_width(self, *args)

    def setWidth(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setWidth(self, *args)

    def target(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_target(self, *args)

    def setTarget(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setTarget(self, *args)

    def viewDirection(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_viewDirection(self, *args)

    def setViewDirection(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setViewDirection(self, *args)

    def viewTwist(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_viewTwist(self, *args)

    def setViewTwist(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setViewTwist(self, *args)

    def lensLength(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_lensLength(self, *args)

    def setLensLength(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setLensLength(self, *args)

    def frontClipDistance(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_frontClipDistance(self, *args)

    def setFrontClipDistance(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setFrontClipDistance(self, *args)

    def backClipDistance(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_backClipDistance(self, *args)

    def setBackClipDistance(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setBackClipDistance(self, *args)

    def perspectiveEnabled(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_perspectiveEnabled(self, *args)

    def setPerspectiveEnabled(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setPerspectiveEnabled(self, *args)

    def frontClipEnabled(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_frontClipEnabled(self, *args)

    def setFrontClipEnabled(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setFrontClipEnabled(self, *args)

    def backClipEnabled(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_backClipEnabled(self, *args)

    def setBackClipEnabled(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setBackClipEnabled(self, *args)

    def frontClipAtEye(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_frontClipAtEye(self, *args)

    def setFrontClipAtEye(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setFrontClipAtEye(self, *args)

    def setRenderMode(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setRenderMode(self, *args)

    def renderMode(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_renderMode(self, *args)

    def getUcs(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_getUcs(self, *args)

    def isUcsOrthographic(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_isUcsOrthographic(self, *args)

    def ucsName(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_ucsName(self, *args)

    def elevation(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_elevation(self, *args)

    def setUcs(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setUcs(self, *args)

    def setUcsToWorld(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setUcsToWorld(self, *args)

    def setElevation(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setElevation(self, *args)

    def background(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_background(self, *args)

    def setBackground(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setBackground(self, *args)

    def visualStyle(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_visualStyle(self, *args)

    def setVisualStyle(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setVisualStyle(self, *args)

    def isDefaultLightingOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_isDefaultLightingOn(self, *args)

    def setDefaultLightingOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setDefaultLightingOn(self, *args)

    def defaultLightingType(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_defaultLightingType(self, *args)

    def setDefaultLightingType(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setDefaultLightingType(self, *args)

    def brightness(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_brightness(self, *args)

    def setBrightness(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setBrightness(self, *args)

    def contrast(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_contrast(self, *args)

    def setContrast(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setContrast(self, *args)

    def ambientLightColor(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_ambientLightColor(self, *args)

    def setAmbientLightColor(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setAmbientLightColor(self, *args)

    def sunId(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_sunId(self, *args)

    def setSun(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setSun(self, *args)

    def toneOperatorParameters(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_toneOperatorParameters(self, *args)

    def setToneOperatorParameters(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_setToneOperatorParameters(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_dwgOutFields(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_copyFrom(self, *args)

    def drawable(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_drawable(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbAbstractViewTableRecord_subSetAttributes(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAbstractViewTableRecord

# Register OdDbAbstractViewTableRecord in _ODA_Drawings:
_ODA_Drawings.OdDbAbstractViewTableRecord_swigregister(OdDbAbstractViewTableRecord)

def OdDbAbstractViewTableRecord_cast(*args):
    return _ODA_Drawings.OdDbAbstractViewTableRecord_cast(*args)

def OdDbAbstractViewTableRecord_desc(*args):
    return _ODA_Drawings.OdDbAbstractViewTableRecord_desc(*args)

def OdDbAbstractViewTableRecord_createObject(*args):
    return _ODA_Drawings.OdDbAbstractViewTableRecord_createObject(*args)

class OdSmCalloutBlocks(OdSmComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmCalloutBlocks_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmCalloutBlocks_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmCalloutBlocks_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmCalloutBlocks_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmCalloutBlocks_createObject(*args)

    def add(self, *args):
        return _ODA_Drawings.OdSmCalloutBlocks_add(self, *args)

    def remove(self, *args):
        return _ODA_Drawings.OdSmCalloutBlocks_remove(self, *args)

    def getEnumerator(self, *args):
        return _ODA_Drawings.OdSmCalloutBlocks_getEnumerator(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmCalloutBlocks

# Register OdSmCalloutBlocks in _ODA_Drawings:
_ODA_Drawings.OdSmCalloutBlocks_swigregister(OdSmCalloutBlocks)

def OdSmCalloutBlocks_cast(*args):
    return _ODA_Drawings.OdSmCalloutBlocks_cast(*args)

def OdSmCalloutBlocks_desc(*args):
    return _ODA_Drawings.OdSmCalloutBlocks_desc(*args)

def OdSmCalloutBlocks_createObject(*args):
    return _ODA_Drawings.OdSmCalloutBlocks_createObject(*args)

class OdSmSheetView(OdSmComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmSheetView_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmSheetView_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmSheetView_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmSheetView_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmSheetView_createObject(*args)

    def getNamedView(self, *args):
        return _ODA_Drawings.OdSmSheetView_getNamedView(self, *args)

    def setNamedView(self, *args):
        return _ODA_Drawings.OdSmSheetView_setNamedView(self, *args)

    def getCategory(self, *args):
        return _ODA_Drawings.OdSmSheetView_getCategory(self, *args)

    def setCategory(self, *args):
        return _ODA_Drawings.OdSmSheetView_setCategory(self, *args)

    def getNumber(self, *args):
        return _ODA_Drawings.OdSmSheetView_getNumber(self, *args)

    def setNumber(self, *args):
        return _ODA_Drawings.OdSmSheetView_setNumber(self, *args)

    def getTitle(self, *args):
        return _ODA_Drawings.OdSmSheetView_getTitle(self, *args)

    def setTitle(self, *args):
        return _ODA_Drawings.OdSmSheetView_setTitle(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmSheetView

# Register OdSmSheetView in _ODA_Drawings:
_ODA_Drawings.OdSmSheetView_swigregister(OdSmSheetView)

def OdSmSheetView_cast(*args):
    return _ODA_Drawings.OdSmSheetView_cast(*args)

def OdSmSheetView_desc(*args):
    return _ODA_Drawings.OdSmSheetView_desc(*args)

def OdSmSheetView_createObject(*args):
    return _ODA_Drawings.OdSmSheetView_createObject(*args)

class OdSmProjectPointLocations(OdSmComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmProjectPointLocations_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmProjectPointLocations_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocations_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocations_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmProjectPointLocations_createObject(*args)

    def getLocation(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocations_getLocation(self, *args)

    def removeLocation(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocations_removeLocation(self, *args)

    def addNewLocation(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocations_addNewLocation(self, *args)

    def getEnumerator(self, *args):
        return _ODA_Drawings.OdSmProjectPointLocations_getEnumerator(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmProjectPointLocations

# Register OdSmProjectPointLocations in _ODA_Drawings:
_ODA_Drawings.OdSmProjectPointLocations_swigregister(OdSmProjectPointLocations)

def OdSmProjectPointLocations_cast(*args):
    return _ODA_Drawings.OdSmProjectPointLocations_cast(*args)

def OdSmProjectPointLocations_desc(*args):
    return _ODA_Drawings.OdSmProjectPointLocations_desc(*args)

def OdSmProjectPointLocations_createObject(*args):
    return _ODA_Drawings.OdSmProjectPointLocations_createObject(*args)

class OdSmSubset(OdSmComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmSubset_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmSubset_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmSubset_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmSubset_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmSubset_createObject(*args)

    def getNewSheetLocation(self, *args):
        return _ODA_Drawings.OdSmSubset_getNewSheetLocation(self, *args)

    def setNewSheetLocation(self, *args):
        return _ODA_Drawings.OdSmSubset_setNewSheetLocation(self, *args)

    def getDefDwtLayout(self, *args):
        return _ODA_Drawings.OdSmSubset_getDefDwtLayout(self, *args)

    def setDefDwtLayout(self, *args):
        return _ODA_Drawings.OdSmSubset_setDefDwtLayout(self, *args)

    def getPromptForDwt(self, *args):
        return _ODA_Drawings.OdSmSubset_getPromptForDwt(self, *args)

    def setPromptForDwt(self, *args):
        return _ODA_Drawings.OdSmSubset_setPromptForDwt(self, *args)

    def getOverrideSheetPublish(self, *args):
        return _ODA_Drawings.OdSmSubset_getOverrideSheetPublish(self, *args)

    def setOverrideSheetPublish(self, *args):
        return _ODA_Drawings.OdSmSubset_setOverrideSheetPublish(self, *args)

    def getSheetEnumerator(self, *args):
        return _ODA_Drawings.OdSmSubset_getSheetEnumerator(self, *args)

    def addNewSheet(self, *args):
        return _ODA_Drawings.OdSmSubset_addNewSheet(self, *args)

    def insertComponent(self, *args):
        return _ODA_Drawings.OdSmSubset_insertComponent(self, *args)

    def insertComponentAfter(self, *args):
        return _ODA_Drawings.OdSmSubset_insertComponentAfter(self, *args)

    def importSheet(self, *args):
        return _ODA_Drawings.OdSmSubset_importSheet(self, *args)

    def removeSheet(self, *args):
        return _ODA_Drawings.OdSmSubset_removeSheet(self, *args)

    def createSubset(self, *args):
        return _ODA_Drawings.OdSmSubset_createSubset(self, *args)

    def removeSubset(self, *args):
        return _ODA_Drawings.OdSmSubset_removeSubset(self, *args)

    def notifyRegisteredEventHandlers(self, *args):
        return _ODA_Drawings.OdSmSubset_notifyRegisteredEventHandlers(self, *args)

    def updateInMemoryDwgHints(self, *args):
        return _ODA_Drawings.OdSmSubset_updateInMemoryDwgHints(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmSubset

# Register OdSmSubset in _ODA_Drawings:
_ODA_Drawings.OdSmSubset_swigregister(OdSmSubset)

def OdSmSubset_cast(*args):
    return _ODA_Drawings.OdSmSubset_cast(*args)

def OdSmSubset_desc(*args):
    return _ODA_Drawings.OdSmSubset_desc(*args)

def OdSmSubset_createObject(*args):
    return _ODA_Drawings.OdSmSubset_createObject(*args)

class OdDbShHistoryNode(OdDbEvalConnectable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShHistoryNode_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShHistoryNode_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShHistoryNode_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShHistoryNode_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShHistoryNode_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShHistoryNode_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShHistoryNode_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShHistoryNode_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShHistoryNode_dxfOutFields(self, *args)

    def color(self, *args):
        return _ODA_Drawings.OdDbShHistoryNode_color(self, *args)

    def setColor(self, *args):
        return _ODA_Drawings.OdDbShHistoryNode_setColor(self, *args)

    def nodeMaterialId(self, *args):
        return _ODA_Drawings.OdDbShHistoryNode_nodeMaterialId(self, *args)

    def setNodeMaterialId(self, *args):
        return _ODA_Drawings.OdDbShHistoryNode_setNodeMaterialId(self, *args)

    def stepId(self, *args):
        return _ODA_Drawings.OdDbShHistoryNode_stepId(self, *args)

    def setStepId(self, *args):
        return _ODA_Drawings.OdDbShHistoryNode_setStepId(self, *args)

    def transform(self, *args):
        return _ODA_Drawings.OdDbShHistoryNode_transform(self, *args)

    def postInDatabase(self, *args):
        return _ODA_Drawings.OdDbShHistoryNode_postInDatabase(self, *args)

    def evaluate(self, *args):
        return _ODA_Drawings.OdDbShHistoryNode_evaluate(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShHistoryNode

# Register OdDbShHistoryNode in _ODA_Drawings:
_ODA_Drawings.OdDbShHistoryNode_swigregister(OdDbShHistoryNode)

def OdDbShHistoryNode_cast(*args):
    return _ODA_Drawings.OdDbShHistoryNode_cast(*args)

def OdDbShHistoryNode_desc(*args):
    return _ODA_Drawings.OdDbShHistoryNode_desc(*args)

def OdDbShHistoryNode_createObject(*args):
    return _ODA_Drawings.OdDbShHistoryNode_createObject(*args)

class OdDbBlockIterator(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockIterator_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockIterator_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockIterator_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockIterator_createObject(*args)

    def start(self, *args):
        return _ODA_Drawings.OdDbBlockIterator_start(self, *args)

    def next(self, *args):
        return _ODA_Drawings.OdDbBlockIterator_next(self, *args)

    def id(self, *args):
        return _ODA_Drawings.OdDbBlockIterator_id(self, *args)

    def seek(self, *args):
        return _ODA_Drawings.OdDbBlockIterator_seek(self, *args)

    @staticmethod
    def newBlockIterator(*args):
        return _ODA_Drawings.OdDbBlockIterator_newBlockIterator(*args)

    @staticmethod
    def newFilteredIterator(*args):
        return _ODA_Drawings.OdDbBlockIterator_newFilteredIterator(*args)

    @staticmethod
    def newCompositeIterator(*args):
        return _ODA_Drawings.OdDbBlockIterator_newCompositeIterator(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockIterator

# Register OdDbBlockIterator in _ODA_Drawings:
_ODA_Drawings.OdDbBlockIterator_swigregister(OdDbBlockIterator)

def OdDbBlockIterator_cast(*args):
    return _ODA_Drawings.OdDbBlockIterator_cast(*args)

def OdDbBlockIterator_desc(*args):
    return _ODA_Drawings.OdDbBlockIterator_desc(*args)

def OdDbBlockIterator_createObject(*args):
    return _ODA_Drawings.OdDbBlockIterator_createObject(*args)

def OdDbBlockIterator_newBlockIterator(*args):
    return _ODA_Drawings.OdDbBlockIterator_newBlockIterator(*args)

def OdDbBlockIterator_newFilteredIterator(*args):
    return _ODA_Drawings.OdDbBlockIterator_newFilteredIterator(*args)

def OdDbBlockIterator_newCompositeIterator(*args):
    return _ODA_Drawings.OdDbBlockIterator_newCompositeIterator(*args)

class OdDbFilteredBlockIterator(OdDbBlockIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbFilteredBlockIterator_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbFilteredBlockIterator_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbFilteredBlockIterator_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbFilteredBlockIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbFilteredBlockIterator_createObject(*args)

    def estimatedHitFraction(self, *args):
        return _ODA_Drawings.OdDbFilteredBlockIterator_estimatedHitFraction(self, *args)

    def accepts(self, *args):
        return _ODA_Drawings.OdDbFilteredBlockIterator_accepts(self, *args)

    def buffersForComposition(self, *args):
        return _ODA_Drawings.OdDbFilteredBlockIterator_buffersForComposition(self, *args)

    def addToBuffer(self, *args):
        return _ODA_Drawings.OdDbFilteredBlockIterator_addToBuffer(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbFilteredBlockIterator

# Register OdDbFilteredBlockIterator in _ODA_Drawings:
_ODA_Drawings.OdDbFilteredBlockIterator_swigregister(OdDbFilteredBlockIterator)

def OdDbFilteredBlockIterator_cast(*args):
    return _ODA_Drawings.OdDbFilteredBlockIterator_cast(*args)

def OdDbFilteredBlockIterator_desc(*args):
    return _ODA_Drawings.OdDbFilteredBlockIterator_desc(*args)

def OdDbFilteredBlockIterator_createObject(*args):
    return _ODA_Drawings.OdDbFilteredBlockIterator_createObject(*args)

class OdDbBlockChangeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def start(self, *args):
        return _ODA_Drawings.OdDbBlockChangeIterator_start(self, *args)

    def id(self, *args):
        return _ODA_Drawings.OdDbBlockChangeIterator_id(self, *args)

    def next(self, *args):
        return _ODA_Drawings.OdDbBlockChangeIterator_next(self, *args)

    def done(self, *args):
        return _ODA_Drawings.OdDbBlockChangeIterator_done(self, *args)

    def curIdInfo(self, *args):
        return _ODA_Drawings.OdDbBlockChangeIterator_curIdInfo(self, *args)

    def setCurIdInfo(self, *args):
        return _ODA_Drawings.OdDbBlockChangeIterator_setCurIdInfo(self, *args)

    def updateData(self, *args):
        return _ODA_Drawings.OdDbBlockChangeIterator_updateData(self, *args)

    def clearProcessedFlags(self, *args):
        return _ODA_Drawings.OdDbBlockChangeIterator_clearProcessedFlags(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockChangeIterator

# Register OdDbBlockChangeIterator in _ODA_Drawings:
_ODA_Drawings.OdDbBlockChangeIterator_swigregister(OdDbBlockChangeIterator)

class OdDbIndexUpdateData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    kModified = _ODA_Drawings.OdDbIndexUpdateData_kModified
    kDeleted = _ODA_Drawings.OdDbIndexUpdateData_kDeleted
    kProcessed = _ODA_Drawings.OdDbIndexUpdateData_kProcessed
    kUnknownKey = _ODA_Drawings.OdDbIndexUpdateData_kUnknownKey

    def objectBeingIndexedId(self, *args):
        return _ODA_Drawings.OdDbIndexUpdateData_objectBeingIndexedId(self, *args)

    def addId(self, *args):
        return _ODA_Drawings.OdDbIndexUpdateData_addId(self, *args)

    def setIdFlags(self, *args):
        return _ODA_Drawings.OdDbIndexUpdateData_setIdFlags(self, *args)

    def setIdData(self, *args):
        return _ODA_Drawings.OdDbIndexUpdateData_setIdData(self, *args)

    def getIdData(self, *args):
        return _ODA_Drawings.OdDbIndexUpdateData_getIdData(self, *args)

    def getIdFlags(self, *args):
        return _ODA_Drawings.OdDbIndexUpdateData_getIdFlags(self, *args)

    def getFlagsAndData(self, *args):
        return _ODA_Drawings.OdDbIndexUpdateData_getFlagsAndData(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbIndexUpdateData

# Register OdDbIndexUpdateData in _ODA_Drawings:
_ODA_Drawings.OdDbIndexUpdateData_swigregister(OdDbIndexUpdateData)

class OdDbIndexUpdateDataIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbIndexUpdateDataIterator_swiginit(self, _ODA_Drawings.new_OdDbIndexUpdateDataIterator(*args))

    def start(self, *args):
        return _ODA_Drawings.OdDbIndexUpdateDataIterator_start(self, *args)

    def id(self, *args):
        return _ODA_Drawings.OdDbIndexUpdateDataIterator_id(self, *args)

    def next(self, *args):
        return _ODA_Drawings.OdDbIndexUpdateDataIterator_next(self, *args)

    def done(self, *args):
        return _ODA_Drawings.OdDbIndexUpdateDataIterator_done(self, *args)

    def currentData(self, *args):
        return _ODA_Drawings.OdDbIndexUpdateDataIterator_currentData(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbIndexUpdateDataIterator

# Register OdDbIndexUpdateDataIterator in _ODA_Drawings:
_ODA_Drawings.OdDbIndexUpdateDataIterator_swigregister(OdDbIndexUpdateDataIterator)

class OdDbIndex(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbIndex_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbIndex_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbIndex_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbIndex_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbIndex_createObject(*args)

    def newIterator(self, *args):
        return _ODA_Drawings.OdDbIndex_newIterator(self, *args)

    def rebuildFull(self, *args):
        return _ODA_Drawings.OdDbIndex_rebuildFull(self, *args)

    def setLastUpdatedAt(self, *args):
        return _ODA_Drawings.OdDbIndex_setLastUpdatedAt(self, *args)

    def lastUpdatedAt(self, *args):
        return _ODA_Drawings.OdDbIndex_lastUpdatedAt(self, *args)

    def setLastUpdatedAtU(self, *args):
        return _ODA_Drawings.OdDbIndex_setLastUpdatedAtU(self, *args)

    def lastUpdatedAtU(self, *args):
        return _ODA_Drawings.OdDbIndex_lastUpdatedAtU(self, *args)

    def isUptoDate(self, *args):
        return _ODA_Drawings.OdDbIndex_isUptoDate(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbIndex_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbIndex_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbIndex_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbIndex_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbIndex

# Register OdDbIndex in _ODA_Drawings:
_ODA_Drawings.OdDbIndex_swigregister(OdDbIndex)

def OdDbIndex_cast(*args):
    return _ODA_Drawings.OdDbIndex_cast(*args)

def OdDbIndex_desc(*args):
    return _ODA_Drawings.OdDbIndex_desc(*args)

def OdDbIndex_createObject(*args):
    return _ODA_Drawings.OdDbIndex_createObject(*args)


def updateIndexes(*args):
    return _ODA_Drawings.updateIndexes(*args)

def addIndex(*args):
    return _ODA_Drawings.addIndex(*args)

def removeIndex(*args):
    return _ODA_Drawings.removeIndex(*args)

def getIndex(*args):
    return _ODA_Drawings.getIndex(*args)

def numIndexes(*args):
    return _ODA_Drawings.numIndexes(*args)

def addFilter(*args):
    return _ODA_Drawings.addFilter(*args)

def removeFilter(*args):
    return _ODA_Drawings.removeFilter(*args)

def getFilter(*args):
    return _ODA_Drawings.getFilter(*args)

def numFilters(*args):
    return _ODA_Drawings.numFilters(*args)
class OdDbViewRep(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewRep_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewRep_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewRep_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewRep_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewRep_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewRep
    kVisibleLines = _ODA_Drawings.OdDbViewRep_kVisibleLines
    kVisibleAndHiddenLines = _ODA_Drawings.OdDbViewRep_kVisibleAndHiddenLines
    kShadedVisibleLines = _ODA_Drawings.OdDbViewRep_kShadedVisibleLines
    kShadedVisibleAndHiddenLines = _ODA_Drawings.OdDbViewRep_kShadedVisibleAndHiddenLines
    kSourceNotDefined = _ODA_Drawings.OdDbViewRep_kSourceNotDefined
    kInventorSource = _ODA_Drawings.OdDbViewRep_kInventorSource
    kFusionSource = _ODA_Drawings.OdDbViewRep_kFusionSource
    kModelSpaceSource = _ODA_Drawings.OdDbViewRep_kModelSpaceSource
    kBaseFront = _ODA_Drawings.OdDbViewRep_kBaseFront
    kBaseTop = _ODA_Drawings.OdDbViewRep_kBaseTop
    kBaseRight = _ODA_Drawings.OdDbViewRep_kBaseRight
    kBaseBack = _ODA_Drawings.OdDbViewRep_kBaseBack
    kBaseBottom = _ODA_Drawings.OdDbViewRep_kBaseBottom
    kBaseLeft = _ODA_Drawings.OdDbViewRep_kBaseLeft
    kBaseNEIsometric = _ODA_Drawings.OdDbViewRep_kBaseNEIsometric
    kBaseNWIsometric = _ODA_Drawings.OdDbViewRep_kBaseNWIsometric
    kBaseSEIsometric = _ODA_Drawings.OdDbViewRep_kBaseSEIsometric
    kBaseSWIsometric = _ODA_Drawings.OdDbViewRep_kBaseSWIsometric
    kBaseCurrent = _ODA_Drawings.OdDbViewRep_kBaseCurrent
    kDetail = _ODA_Drawings.OdDbViewRep_kDetail
    kSection = _ODA_Drawings.OdDbViewRep_kSection
    kProjected = _ODA_Drawings.OdDbViewRep_kProjected
    kShaded = _ODA_Drawings.OdDbViewRep_kShaded
    kLabelVisibility = _ODA_Drawings.OdDbViewRep_kLabelVisibility
    kScaleFromParent = _ODA_Drawings.OdDbViewRep_kScaleFromParent

    def sketchModelSpaceToModelSpaceXform(self, *args):
        return _ODA_Drawings.OdDbViewRep_sketchModelSpaceToModelSpaceXform(self, *args)

    def sketchModelSpaceToPaperSpaceXform(self, *args):
        return _ODA_Drawings.OdDbViewRep_sketchModelSpaceToPaperSpaceXform(self, *args)

    def viewModelSpaceToModelSpaceXform(self, *args):
        return _ODA_Drawings.OdDbViewRep_viewModelSpaceToModelSpaceXform(self, *args)

    def viewModelSpaceToPaperSpaceXform(self, *args):
        return _ODA_Drawings.OdDbViewRep_viewModelSpaceToPaperSpaceXform(self, *args)

    def selSetObjId(self, *args):
        return _ODA_Drawings.OdDbViewRep_selSetObjId(self, *args)

    def isPartialMSView(self, *args):
        return _ODA_Drawings.OdDbViewRep_isPartialMSView(self, *args)

    def viewIndex(self, *args):
        return _ODA_Drawings.OdDbViewRep_viewIndex(self, *args)

    def setInventorDrawingViewId(self, *args):
        return _ODA_Drawings.OdDbViewRep_setInventorDrawingViewId(self, *args)

    def inventorDrawingViewId(self, *args):
        return _ODA_Drawings.OdDbViewRep_inventorDrawingViewId(self, *args)

    def layoutId(self, *args):
        return _ODA_Drawings.OdDbViewRep_layoutId(self, *args)

    def getSketchManager(self, *args):
        return _ODA_Drawings.OdDbViewRep_getSketchManager(self, *args)

    def viewBlockReference(self, *args):
        return _ODA_Drawings.OdDbViewRep_viewBlockReference(self, *args)

    def blockReference(self, *args):
        return _ODA_Drawings.OdDbViewRep_blockReference(self, *args)

    def viewBorderId(self, *args):
        return _ODA_Drawings.OdDbViewRep_viewBorderId(self, *args)

    def viewportId(self, *args):
        return _ODA_Drawings.OdDbViewRep_viewportId(self, *args)

    def sourceType(self, *args):
        return _ODA_Drawings.OdDbViewRep_sourceType(self, *args)

    def label(self, *args):
        return _ODA_Drawings.OdDbViewRep_label(self, *args)

    def labelVisibility(self, *args):
        return _ODA_Drawings.OdDbViewRep_labelVisibility(self, *args)

    def scale(self, *args):
        return _ODA_Drawings.OdDbViewRep_scale(self, *args)

    def isShaded(self, *args):
        return _ODA_Drawings.OdDbViewRep_isShaded(self, *args)

    def shadeResolution(self, *args):
        return _ODA_Drawings.OdDbViewRep_shadeResolution(self, *args)

    def viewStyleType(self, *args):
        return _ODA_Drawings.OdDbViewRep_viewStyleType(self, *args)

    def viewType(self, *args):
        return _ODA_Drawings.OdDbViewRep_viewType(self, *args)

    def camera(self, *args):
        return _ODA_Drawings.OdDbViewRep_camera(self, *args)

    def rotationAngle(self, *args):
        return _ODA_Drawings.OdDbViewRep_rotationAngle(self, *args)

    def viewBasePoint(self, *args):
        return _ODA_Drawings.OdDbViewRep_viewBasePoint(self, *args)

    def center(self, *args):
        return _ODA_Drawings.OdDbViewRep_center(self, *args)

    def updateViewportScale(self, *args):
        return _ODA_Drawings.OdDbViewRep_updateViewportScale(self, *args)

    def isScaleFromParent(self, *args):
        return _ODA_Drawings.OdDbViewRep_isScaleFromParent(self, *args)

    def setScaleFromParent(self, *args):
        return _ODA_Drawings.OdDbViewRep_setScaleFromParent(self, *args)

# Register OdDbViewRep in _ODA_Drawings:
_ODA_Drawings.OdDbViewRep_swigregister(OdDbViewRep)

def OdDbViewRep_cast(*args):
    return _ODA_Drawings.OdDbViewRep_cast(*args)

def OdDbViewRep_desc(*args):
    return _ODA_Drawings.OdDbViewRep_desc(*args)

def OdDbViewRep_createObject(*args):
    return _ODA_Drawings.OdDbViewRep_createObject(*args)

class OdDbModelDocViewStyle(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbModelDocViewStyle_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbModelDocViewStyle_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbModelDocViewStyle_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbModelDocViewStyle_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbModelDocViewStyle_createObject(*args)
    kAboveView = _ODA_Drawings.OdDbModelDocViewStyle_kAboveView
    kBelowView = _ODA_Drawings.OdDbModelDocViewStyle_kBelowView
    kTextAlignmentLeft = _ODA_Drawings.OdDbModelDocViewStyle_kTextAlignmentLeft
    kTextAlignmentCenter = _ODA_Drawings.OdDbModelDocViewStyle_kTextAlignmentCenter
    kTextAlignmentRight = _ODA_Drawings.OdDbModelDocViewStyle_kTextAlignmentRight
    __swig_destroy__ = _ODA_Drawings.delete_OdDbModelDocViewStyle

    def getName(self, *args):
        return _ODA_Drawings.OdDbModelDocViewStyle_getName(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbModelDocViewStyle_setName(self, *args)

    def description(self, *args):
        return _ODA_Drawings.OdDbModelDocViewStyle_description(self, *args)

    def setDescription(self, *args):
        return _ODA_Drawings.OdDbModelDocViewStyle_setDescription(self, *args)

    def setDatabaseDefaults(self, *args):
        return _ODA_Drawings.OdDbModelDocViewStyle_setDatabaseDefaults(self, *args)

    def postViewStyleToDb(self, *args):
        return _ODA_Drawings.OdDbModelDocViewStyle_postViewStyleToDb(self, *args)

    def getDisplayName(self, *args):
        return _ODA_Drawings.OdDbModelDocViewStyle_getDisplayName(self, *args)

    def setDispayName(self, *args):
        return _ODA_Drawings.OdDbModelDocViewStyle_setDispayName(self, *args)

    def canRename(self, *args):
        return _ODA_Drawings.OdDbModelDocViewStyle_canRename(self, *args)

    def setCanRename(self, *args):
        return _ODA_Drawings.OdDbModelDocViewStyle_setCanRename(self, *args)

# Register OdDbModelDocViewStyle in _ODA_Drawings:
_ODA_Drawings.OdDbModelDocViewStyle_swigregister(OdDbModelDocViewStyle)

def OdDbModelDocViewStyle_cast(*args):
    return _ODA_Drawings.OdDbModelDocViewStyle_cast(*args)

def OdDbModelDocViewStyle_desc(*args):
    return _ODA_Drawings.OdDbModelDocViewStyle_desc(*args)

def OdDbModelDocViewStyle_createObject(*args):
    return _ODA_Drawings.OdDbModelDocViewStyle_createObject(*args)

class OdDbWipeoutVariables(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbWipeoutVariables_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbWipeoutVariables_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbWipeoutVariables_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbWipeoutVariables_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbWipeoutVariables_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbWipeoutVariables_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbWipeoutVariables_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbWipeoutVariables_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbWipeoutVariables_dxfOutFields(self, *args)

    def showFrame(self, *args):
        return _ODA_Drawings.OdDbWipeoutVariables_showFrame(self, *args)

    def setShowFrame(self, *args):
        return _ODA_Drawings.OdDbWipeoutVariables_setShowFrame(self, *args)

    @staticmethod
    def openWipeoutVariables(*args):
        return _ODA_Drawings.OdDbWipeoutVariables_openWipeoutVariables(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbWipeoutVariables

# Register OdDbWipeoutVariables in _ODA_Drawings:
_ODA_Drawings.OdDbWipeoutVariables_swigregister(OdDbWipeoutVariables)

def OdDbWipeoutVariables_cast(*args):
    return _ODA_Drawings.OdDbWipeoutVariables_cast(*args)

def OdDbWipeoutVariables_desc(*args):
    return _ODA_Drawings.OdDbWipeoutVariables_desc(*args)

def OdDbWipeoutVariables_createObject(*args):
    return _ODA_Drawings.OdDbWipeoutVariables_createObject(*args)

def OdDbWipeoutVariables_openWipeoutVariables(*args):
    return _ODA_Drawings.OdDbWipeoutVariables_openWipeoutVariables(*args)

class OdDbRasterImage(OdDbImage):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRasterImage_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRasterImage_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRasterImage_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRasterImage_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRasterImage_createObject(*args)
    kInvalid = _ODA_Drawings.OdDbRasterImage_kInvalid
    kRect = _ODA_Drawings.OdDbRasterImage_kRect
    kPoly = _ODA_Drawings.OdDbRasterImage_kPoly
    kShow = _ODA_Drawings.OdDbRasterImage_kShow
    kShowUnAligned = _ODA_Drawings.OdDbRasterImage_kShowUnAligned
    kClip = _ODA_Drawings.OdDbRasterImage_kClip
    kTransparent = _ODA_Drawings.OdDbRasterImage_kTransparent

    def setImageDefId(self, *args):
        return _ODA_Drawings.OdDbRasterImage_setImageDefId(self, *args)

    def imageDefId(self, *args):
        return _ODA_Drawings.OdDbRasterImage_imageDefId(self, *args)

    def setReactorId(self, *args):
        return _ODA_Drawings.OdDbRasterImage_setReactorId(self, *args)

    def reactorId(self, *args):
        return _ODA_Drawings.OdDbRasterImage_reactorId(self, *args)

    def setClipBoundary(self, *args):
        return _ODA_Drawings.OdDbRasterImage_setClipBoundary(self, *args)

    def clipBoundary(self, *args):
        return _ODA_Drawings.OdDbRasterImage_clipBoundary(self, *args)

    def isClipped(self, *args):
        return _ODA_Drawings.OdDbRasterImage_isClipped(self, *args)

    def getVertices(self, *args):
        return _ODA_Drawings.OdDbRasterImage_getVertices(self, *args)

    def setClipBoundaryToWholeImage(self, *args):
        return _ODA_Drawings.OdDbRasterImage_setClipBoundaryToWholeImage(self, *args)

    def clipBoundaryType(self, *args):
        return _ODA_Drawings.OdDbRasterImage_clipBoundaryType(self, *args)

    def getPixelToModelTransform(self, *args):
        return _ODA_Drawings.OdDbRasterImage_getPixelToModelTransform(self, *args)

    def setBrightness(self, *args):
        return _ODA_Drawings.OdDbRasterImage_setBrightness(self, *args)

    def brightness(self, *args):
        return _ODA_Drawings.OdDbRasterImage_brightness(self, *args)

    def setContrast(self, *args):
        return _ODA_Drawings.OdDbRasterImage_setContrast(self, *args)

    def contrast(self, *args):
        return _ODA_Drawings.OdDbRasterImage_contrast(self, *args)

    def setFade(self, *args):
        return _ODA_Drawings.OdDbRasterImage_setFade(self, *args)

    def fade(self, *args):
        return _ODA_Drawings.OdDbRasterImage_fade(self, *args)

    def setDisplayOpt(self, *args):
        return _ODA_Drawings.OdDbRasterImage_setDisplayOpt(self, *args)

    def isSetDisplayOpt(self, *args):
        return _ODA_Drawings.OdDbRasterImage_isSetDisplayOpt(self, *args)

    def imageSize(self, *args):
        return _ODA_Drawings.OdDbRasterImage_imageSize(self, *args)

    def scale(self, *args):
        return _ODA_Drawings.OdDbRasterImage_scale(self, *args)

    def setOrientation(self, *args):
        return _ODA_Drawings.OdDbRasterImage_setOrientation(self, *args)

    def getOrientation(self, *args):
        return _ODA_Drawings.OdDbRasterImage_getOrientation(self, *args)

    def setClipInverted(self, *args):
        return _ODA_Drawings.OdDbRasterImage_setClipInverted(self, *args)

    def isClipInverted(self, *args):
        return _ODA_Drawings.OdDbRasterImage_isClipInverted(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbRasterImage_subSetAttributes(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbRasterImage_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbRasterImage_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbRasterImage_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbRasterImage_dxfOutFields(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbRasterImage_subClose(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbRasterImage_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbRasterImage_subViewportDraw(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbRasterImage_subGetGeomExtents(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbRasterImage_subGetClassID(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbRasterImage_subTransformBy(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbRasterImage_subExplode(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRasterImage

# Register OdDbRasterImage in _ODA_Drawings:
_ODA_Drawings.OdDbRasterImage_swigregister(OdDbRasterImage)

def OdDbRasterImage_cast(*args):
    return _ODA_Drawings.OdDbRasterImage_cast(*args)

def OdDbRasterImage_desc(*args):
    return _ODA_Drawings.OdDbRasterImage_desc(*args)

def OdDbRasterImage_createObject(*args):
    return _ODA_Drawings.OdDbRasterImage_createObject(*args)


def pixelToModel(*args):
    return _ODA_Drawings.pixelToModel(*args)

def modelToPixel(*args):
    return _ODA_Drawings.modelToPixel(*args)

def pixelToModelTransform(*args):
    return _ODA_Drawings.pixelToModelTransform(*args)
k2dSimplePoly = _ODA_Drawings.k2dSimplePoly
k2dFitCurvePoly = _ODA_Drawings.k2dFitCurvePoly
k2dQuadSplinePoly = _ODA_Drawings.k2dQuadSplinePoly
k2dCubicSplinePoly = _ODA_Drawings.k2dCubicSplinePoly
class OdDb2dPolyline(OdDbCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDb2dPolyline_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDb2dPolyline_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDb2dPolyline_createObject(*args)

    def polyType(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_polyType(self, *args)

    def setPolyType(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_setPolyType(self, *args)

    def makeClosed(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_makeClosed(self, *args)

    def makeOpen(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_makeOpen(self, *args)

    def defaultStartWidth(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_defaultStartWidth(self, *args)

    def setDefaultStartWidth(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_setDefaultStartWidth(self, *args)

    def defaultEndWidth(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_defaultEndWidth(self, *args)

    def setDefaultEndWidth(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_setDefaultEndWidth(self, *args)

    def thickness(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_thickness(self, *args)

    def setThickness(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_setThickness(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_normal(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_setNormal(self, *args)

    def elevation(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_elevation(self, *args)

    def setElevation(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_setElevation(self, *args)

    def isLinetypeGenerationOn(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_isLinetypeGenerationOn(self, *args)

    def setLinetypeGenerationOn(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_setLinetypeGenerationOn(self, *args)

    def setLinetypeGenerationOff(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_setLinetypeGenerationOff(self, *args)

    def straighten(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_straighten(self, *args)

    def appendVertex(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_appendVertex(self, *args)

    def insertVertexAt(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_insertVertexAt(self, *args)

    def openVertex(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_openVertex(self, *args)

    def openSequenceEnd(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_openSequenceEnd(self, *args)

    def vertexIterator(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_vertexIterator(self, *args)

    def vertexPosition(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_vertexPosition(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_subWorldDraw(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_dxfOutFields_R12(self, *args)

    def dxfOut(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_dxfOut(self, *args)

    def dxfIn(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_dxfIn(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_subClose(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_subExplode(self, *args)

    def explodeGeometry(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_explodeGeometry(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_subTransformBy(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_subGetClassID(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_isPlanar(self, *args)

    def getArea(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_getArea(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_getPlane(self, *args)

    def isClosed(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_isClosed(self, *args)

    def isPeriodic(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_isPeriodic(self, *args)

    def getStartParam(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_getStartParam(self, *args)

    def getEndParam(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_getEndParam(self, *args)

    def getStartPoint(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_getStartPoint(self, *args)

    def getEndPoint(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_getEndPoint(self, *args)

    def getPointAtParam(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_getPointAtParam(self, *args)

    def getParamAtPoint(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_getParamAtPoint(self, *args)

    def getDistAtParam(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_getDistAtParam(self, *args)

    def getParamAtDist(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_getParamAtDist(self, *args)

    def getFirstDeriv(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_getFirstDeriv(self, *args)

    def getSecondDeriv(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_getSecondDeriv(self, *args)

    def convertToPolyType(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_convertToPolyType(self, *args)

    def curveFit(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_curveFit(self, *args)

    def splineFit(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_splineFit(self, *args)

    def subGetSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_subGetSubentPathsAtGsMarker(self, *args)

    def subGetGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_subGetGsMarkersAtSubentPath(self, *args)

    def subSubentPtr(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_subSubentPtr(self, *args)

    def getEcs(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_getEcs(self, *args)

    def getOdGeCurve(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_getOdGeCurve(self, *args)

    def setFromOdGeCurve(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_setFromOdGeCurve(self, *args)

    def reverseCurve(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_reverseCurve(self, *args)

    def findVertexIndex(self, *args):
        return _ODA_Drawings.OdDb2dPolyline_findVertexIndex(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDb2dPolyline

# Register OdDb2dPolyline in _ODA_Drawings:
_ODA_Drawings.OdDb2dPolyline_swigregister(OdDb2dPolyline)

def OdDb2dPolyline_cast(*args):
    return _ODA_Drawings.OdDb2dPolyline_cast(*args)

def OdDb2dPolyline_desc(*args):
    return _ODA_Drawings.OdDb2dPolyline_desc(*args)

def OdDb2dPolyline_createObject(*args):
    return _ODA_Drawings.OdDb2dPolyline_createObject(*args)

class OdDbDimension(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDimension_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDimension_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDimension_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDimension_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDimension_createObject(*args)

    def textPosition(self, *args):
        return _ODA_Drawings.OdDbDimension_textPosition(self, *args)

    def setTextPosition(self, *args):
        return _ODA_Drawings.OdDbDimension_setTextPosition(self, *args)

    def isUsingDefaultTextPosition(self, *args):
        return _ODA_Drawings.OdDbDimension_isUsingDefaultTextPosition(self, *args)

    def useSetTextPosition(self, *args):
        return _ODA_Drawings.OdDbDimension_useSetTextPosition(self, *args)

    def useDefaultTextPosition(self, *args):
        return _ODA_Drawings.OdDbDimension_useDefaultTextPosition(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbDimension_normal(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDbDimension_setNormal(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbDimension_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbDimension_getPlane(self, *args)

    def elevation(self, *args):
        return _ODA_Drawings.OdDbDimension_elevation(self, *args)

    def setElevation(self, *args):
        return _ODA_Drawings.OdDbDimension_setElevation(self, *args)

    def dimensionText(self, *args):
        return _ODA_Drawings.OdDbDimension_dimensionText(self, *args)

    def setDimensionText(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimensionText(self, *args)

    def textRotation(self, *args):
        return _ODA_Drawings.OdDbDimension_textRotation(self, *args)

    def setTextRotation(self, *args):
        return _ODA_Drawings.OdDbDimension_setTextRotation(self, *args)

    def dimensionStyle(self, *args):
        return _ODA_Drawings.OdDbDimension_dimensionStyle(self, *args)

    def setDimensionStyle(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimensionStyle(self, *args)

    def textAttachment(self, *args):
        return _ODA_Drawings.OdDbDimension_textAttachment(self, *args)

    def setTextAttachment(self, *args):
        return _ODA_Drawings.OdDbDimension_setTextAttachment(self, *args)

    def textLineSpacingStyle(self, *args):
        return _ODA_Drawings.OdDbDimension_textLineSpacingStyle(self, *args)

    def setTextLineSpacingStyle(self, *args):
        return _ODA_Drawings.OdDbDimension_setTextLineSpacingStyle(self, *args)

    def textLineSpacingFactor(self, *args):
        return _ODA_Drawings.OdDbDimension_textLineSpacingFactor(self, *args)

    def setTextLineSpacingFactor(self, *args):
        return _ODA_Drawings.OdDbDimension_setTextLineSpacingFactor(self, *args)

    def getDimstyleData(self, *args):
        return _ODA_Drawings.OdDbDimension_getDimstyleData(self, *args)

    def setDimstyleData(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimstyleData(self, *args)

    def horizontalRotation(self, *args):
        return _ODA_Drawings.OdDbDimension_horizontalRotation(self, *args)

    def setHorizontalRotation(self, *args):
        return _ODA_Drawings.OdDbDimension_setHorizontalRotation(self, *args)

    def dimBlockId(self, *args):
        return _ODA_Drawings.OdDbDimension_dimBlockId(self, *args)

    def setDimBlockId(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimBlockId(self, *args)

    def isSingleDimBlockReference(self, *args):
        return _ODA_Drawings.OdDbDimension_isSingleDimBlockReference(self, *args)

    def dimBlockPosition(self, *args):
        return _ODA_Drawings.OdDbDimension_dimBlockPosition(self, *args)

    def setDimBlockPosition(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimBlockPosition(self, *args)

    def dimBlockRotation(self, *args):
        return _ODA_Drawings.OdDbDimension_dimBlockRotation(self, *args)

    def setDimBlockRotation(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimBlockRotation(self, *args)

    def dimBlockScale(self, *args):
        return _ODA_Drawings.OdDbDimension_dimBlockScale(self, *args)

    def setDimBlockScale(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimBlockScale(self, *args)

    def dimBlockTransform(self, *args):
        return _ODA_Drawings.OdDbDimension_dimBlockTransform(self, *args)

    def recomputeDimBlock(self, *args):
        return _ODA_Drawings.OdDbDimension_recomputeDimBlock(self, *args)

    def getMeasurement(self, *args):
        return _ODA_Drawings.OdDbDimension_getMeasurement(self, *args)

    def measurement(self, *args):
        return _ODA_Drawings.OdDbDimension_measurement(self, *args)

    def getBgrndTxtColor(self, *args):
        return _ODA_Drawings.OdDbDimension_getBgrndTxtColor(self, *args)

    def setBgrndTxtColor(self, *args):
        return _ODA_Drawings.OdDbDimension_setBgrndTxtColor(self, *args)

    def getExtLineFixLenEnable(self, *args):
        return _ODA_Drawings.OdDbDimension_getExtLineFixLenEnable(self, *args)

    def setExtLineFixLenEnable(self, *args):
        return _ODA_Drawings.OdDbDimension_setExtLineFixLenEnable(self, *args)

    def getExtLineFixLen(self, *args):
        return _ODA_Drawings.OdDbDimension_getExtLineFixLen(self, *args)

    def setExtLineFixLen(self, *args):
        return _ODA_Drawings.OdDbDimension_setExtLineFixLen(self, *args)

    def getDimLinetype(self, *args):
        return _ODA_Drawings.OdDbDimension_getDimLinetype(self, *args)

    def setDimLinetype(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimLinetype(self, *args)

    def getDimExt1Linetype(self, *args):
        return _ODA_Drawings.OdDbDimension_getDimExt1Linetype(self, *args)

    def setDimExt1Linetype(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimExt1Linetype(self, *args)

    def getDimExt2Linetype(self, *args):
        return _ODA_Drawings.OdDbDimension_getDimExt2Linetype(self, *args)

    def setDimExt2Linetype(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimExt2Linetype(self, *args)

    def getArrowFirstIsFlipped(self, *args):
        return _ODA_Drawings.OdDbDimension_getArrowFirstIsFlipped(self, *args)

    def getArrowSecondIsFlipped(self, *args):
        return _ODA_Drawings.OdDbDimension_getArrowSecondIsFlipped(self, *args)

    def setArrowFirstIsFlipped(self, *args):
        return _ODA_Drawings.OdDbDimension_setArrowFirstIsFlipped(self, *args)

    def setArrowSecondIsFlipped(self, *args):
        return _ODA_Drawings.OdDbDimension_setArrowSecondIsFlipped(self, *args)
    kShapeRemove = _ODA_Drawings.OdDbDimension_kShapeRemove
    kShapeRound = _ODA_Drawings.OdDbDimension_kShapeRound
    kShapeAngular = _ODA_Drawings.OdDbDimension_kShapeAngular
    kShapeNone = _ODA_Drawings.OdDbDimension_kShapeNone
    kShapeLabel = _ODA_Drawings.OdDbDimension_kShapeLabel
    kShapeRate = _ODA_Drawings.OdDbDimension_kShapeRate

    def inspection(self, *args):
        return _ODA_Drawings.OdDbDimension_inspection(self, *args)

    def setInspection(self, *args):
        return _ODA_Drawings.OdDbDimension_setInspection(self, *args)

    def inspectionFrame(self, *args):
        return _ODA_Drawings.OdDbDimension_inspectionFrame(self, *args)

    def setInspectionFrame(self, *args):
        return _ODA_Drawings.OdDbDimension_setInspectionFrame(self, *args)

    def inspectionLabel(self, *args):
        return _ODA_Drawings.OdDbDimension_inspectionLabel(self, *args)

    def setInspectionLabel(self, *args):
        return _ODA_Drawings.OdDbDimension_setInspectionLabel(self, *args)

    def inspectionRate(self, *args):
        return _ODA_Drawings.OdDbDimension_inspectionRate(self, *args)

    def setInspectionRate(self, *args):
        return _ODA_Drawings.OdDbDimension_setInspectionRate(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbDimension_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbDimension_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbDimension_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbDimension_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbDimension_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbDimension_dxfOutFields_R12(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbDimension_subGetClassID(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbDimension_subSetAttributes(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbDimension_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbDimension_subViewportDraw(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbDimension_subExplode(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbDimension_subClose(self, *args)

    def modified(self, *args):
        return _ODA_Drawings.OdDbDimension_modified(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbDimension_subTransformBy(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbDimension_subGetTransformedCopy(self, *args)

    def subSetDatabaseDefaults(self, *args):
        return _ODA_Drawings.OdDbDimension_subSetDatabaseDefaults(self, *args)

    def appendToOwner(self, *args):
        return _ODA_Drawings.OdDbDimension_appendToOwner(self, *args)

    def formatMeasurement(self, *args):
        return _ODA_Drawings.OdDbDimension_formatMeasurement(self, *args)

    def explodeGeometry(self, *args):
        return _ODA_Drawings.OdDbDimension_explodeGeometry(self, *args)

    def dimBlock(self, *args):
        return _ODA_Drawings.OdDbDimension_dimBlock(self, *args)

    def subGetCompoundObjectTransform(self, *args):
        return _ODA_Drawings.OdDbDimension_subGetCompoundObjectTransform(self, *args)

    def isDynamicDimension(self, *args):
        return _ODA_Drawings.OdDbDimension_isDynamicDimension(self, *args)

    def setDynamicDimension(self, *args):
        return _ODA_Drawings.OdDbDimension_setDynamicDimension(self, *args)

    def isConstraintObject(self, *args):
        return _ODA_Drawings.OdDbDimension_isConstraintObject(self, *args)

    def isConstraintDynamic(self, *args):
        return _ODA_Drawings.OdDbDimension_isConstraintDynamic(self, *args)

    def setConstraintDynamic(self, *args):
        return _ODA_Drawings.OdDbDimension_setConstraintDynamic(self, *args)

    def shouldParticipateInOPM(self, *args):
        return _ODA_Drawings.OdDbDimension_shouldParticipateInOPM(self, *args)

    def setShouldParticipateInOPM(self, *args):
        return _ODA_Drawings.OdDbDimension_setShouldParticipateInOPM(self, *args)

    def setDIMTALN(self, *args):
        return _ODA_Drawings.OdDbDimension_setDIMTALN(self, *args)

    def getDIMTALN(self, *args):
        return _ODA_Drawings.OdDbDimension_getDIMTALN(self, *args)

    def removeTextField(self, *args):
        return _ODA_Drawings.OdDbDimension_removeTextField(self, *args)

    def fieldToMText(self, *args):
        return _ODA_Drawings.OdDbDimension_fieldToMText(self, *args)

    def fieldFromMText(self, *args):
        return _ODA_Drawings.OdDbDimension_fieldFromMText(self, *args)

    def getEcs(self, *args):
        return _ODA_Drawings.OdDbDimension_getEcs(self, *args)

    def resetTextDefinedSize(self, *args):
        return _ODA_Drawings.OdDbDimension_resetTextDefinedSize(self, *args)

    def setTextDefinedSize(self, *args):
        return _ODA_Drawings.OdDbDimension_setTextDefinedSize(self, *args)

    def textDefinedSize(self, *args):
        return _ODA_Drawings.OdDbDimension_textDefinedSize(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbDimension_subGetGeomExtents(self, *args)

    def dimadec(self, *args):
        return _ODA_Drawings.OdDbDimension_dimadec(self, *args)

    def setDimadec(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimadec(self, *args)

    def dimalt(self, *args):
        return _ODA_Drawings.OdDbDimension_dimalt(self, *args)

    def setDimalt(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimalt(self, *args)

    def dimaltd(self, *args):
        return _ODA_Drawings.OdDbDimension_dimaltd(self, *args)

    def setDimaltd(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimaltd(self, *args)

    def dimaltf(self, *args):
        return _ODA_Drawings.OdDbDimension_dimaltf(self, *args)

    def setDimaltf(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimaltf(self, *args)

    def dimaltrnd(self, *args):
        return _ODA_Drawings.OdDbDimension_dimaltrnd(self, *args)

    def setDimaltrnd(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimaltrnd(self, *args)

    def dimalttd(self, *args):
        return _ODA_Drawings.OdDbDimension_dimalttd(self, *args)

    def setDimalttd(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimalttd(self, *args)

    def dimalttz(self, *args):
        return _ODA_Drawings.OdDbDimension_dimalttz(self, *args)

    def setDimalttz(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimalttz(self, *args)

    def dimaltu(self, *args):
        return _ODA_Drawings.OdDbDimension_dimaltu(self, *args)

    def setDimaltu(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimaltu(self, *args)

    def dimaltz(self, *args):
        return _ODA_Drawings.OdDbDimension_dimaltz(self, *args)

    def setDimaltz(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimaltz(self, *args)

    def dimapost(self, *args):
        return _ODA_Drawings.OdDbDimension_dimapost(self, *args)

    def setDimapost(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimapost(self, *args)

    def dimasz(self, *args):
        return _ODA_Drawings.OdDbDimension_dimasz(self, *args)

    def setDimasz(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimasz(self, *args)

    def dimaunit(self, *args):
        return _ODA_Drawings.OdDbDimension_dimaunit(self, *args)

    def setDimaunit(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimaunit(self, *args)

    def dimazin(self, *args):
        return _ODA_Drawings.OdDbDimension_dimazin(self, *args)

    def setDimazin(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimazin(self, *args)

    def dimcen(self, *args):
        return _ODA_Drawings.OdDbDimension_dimcen(self, *args)

    def setDimcen(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimcen(self, *args)

    def dimclrd(self, *args):
        return _ODA_Drawings.OdDbDimension_dimclrd(self, *args)

    def setDimclrd(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimclrd(self, *args)

    def dimclre(self, *args):
        return _ODA_Drawings.OdDbDimension_dimclre(self, *args)

    def setDimclre(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimclre(self, *args)

    def dimclrt(self, *args):
        return _ODA_Drawings.OdDbDimension_dimclrt(self, *args)

    def setDimclrt(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimclrt(self, *args)

    def dimdec(self, *args):
        return _ODA_Drawings.OdDbDimension_dimdec(self, *args)

    def setDimdec(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimdec(self, *args)

    def dimdle(self, *args):
        return _ODA_Drawings.OdDbDimension_dimdle(self, *args)

    def setDimdle(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimdle(self, *args)

    def dimdli(self, *args):
        return _ODA_Drawings.OdDbDimension_dimdli(self, *args)

    def setDimdli(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimdli(self, *args)

    def dimdsep(self, *args):
        return _ODA_Drawings.OdDbDimension_dimdsep(self, *args)

    def setDimdsep(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimdsep(self, *args)

    def dimexe(self, *args):
        return _ODA_Drawings.OdDbDimension_dimexe(self, *args)

    def setDimexe(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimexe(self, *args)

    def dimexo(self, *args):
        return _ODA_Drawings.OdDbDimension_dimexo(self, *args)

    def setDimexo(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimexo(self, *args)

    def dimfrac(self, *args):
        return _ODA_Drawings.OdDbDimension_dimfrac(self, *args)

    def setDimfrac(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimfrac(self, *args)

    def dimgap(self, *args):
        return _ODA_Drawings.OdDbDimension_dimgap(self, *args)

    def setDimgap(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimgap(self, *args)

    def dimjust(self, *args):
        return _ODA_Drawings.OdDbDimension_dimjust(self, *args)

    def setDimjust(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimjust(self, *args)

    def dimldrblk(self, *args):
        return _ODA_Drawings.OdDbDimension_dimldrblk(self, *args)

    def setDimldrblk(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimldrblk(self, *args)

    def dimlfac(self, *args):
        return _ODA_Drawings.OdDbDimension_dimlfac(self, *args)

    def setDimlfac(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimlfac(self, *args)

    def dimlim(self, *args):
        return _ODA_Drawings.OdDbDimension_dimlim(self, *args)

    def setDimlim(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimlim(self, *args)

    def dimlunit(self, *args):
        return _ODA_Drawings.OdDbDimension_dimlunit(self, *args)

    def setDimlunit(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimlunit(self, *args)

    def dimlwd(self, *args):
        return _ODA_Drawings.OdDbDimension_dimlwd(self, *args)

    def setDimlwd(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimlwd(self, *args)

    def dimlwe(self, *args):
        return _ODA_Drawings.OdDbDimension_dimlwe(self, *args)

    def setDimlwe(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimlwe(self, *args)

    def dimpost(self, *args):
        return _ODA_Drawings.OdDbDimension_dimpost(self, *args)

    def setDimpost(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimpost(self, *args)

    def dimrnd(self, *args):
        return _ODA_Drawings.OdDbDimension_dimrnd(self, *args)

    def setDimrnd(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimrnd(self, *args)

    def dimsah(self, *args):
        return _ODA_Drawings.OdDbDimension_dimsah(self, *args)

    def setDimsah(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimsah(self, *args)

    def dimscale(self, *args):
        return _ODA_Drawings.OdDbDimension_dimscale(self, *args)

    def setDimscale(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimscale(self, *args)

    def dimsd1(self, *args):
        return _ODA_Drawings.OdDbDimension_dimsd1(self, *args)

    def setDimsd1(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimsd1(self, *args)

    def dimsd2(self, *args):
        return _ODA_Drawings.OdDbDimension_dimsd2(self, *args)

    def setDimsd2(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimsd2(self, *args)

    def dimse1(self, *args):
        return _ODA_Drawings.OdDbDimension_dimse1(self, *args)

    def setDimse1(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimse1(self, *args)

    def dimse2(self, *args):
        return _ODA_Drawings.OdDbDimension_dimse2(self, *args)

    def setDimse2(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimse2(self, *args)

    def dimtad(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtad(self, *args)

    def setDimtad(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtad(self, *args)

    def dimtdec(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtdec(self, *args)

    def setDimtdec(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtdec(self, *args)

    def dimtfac(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtfac(self, *args)

    def setDimtfac(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtfac(self, *args)

    def dimtih(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtih(self, *args)

    def setDimtih(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtih(self, *args)

    def dimtm(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtm(self, *args)

    def setDimtm(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtm(self, *args)

    def dimtoh(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtoh(self, *args)

    def setDimtoh(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtoh(self, *args)

    def dimtol(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtol(self, *args)

    def setDimtol(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtol(self, *args)

    def dimtolj(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtolj(self, *args)

    def setDimtolj(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtolj(self, *args)

    def dimtp(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtp(self, *args)

    def setDimtp(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtp(self, *args)

    def dimtsz(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtsz(self, *args)

    def setDimtsz(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtsz(self, *args)

    def dimtvp(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtvp(self, *args)

    def setDimtvp(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtvp(self, *args)

    def dimtxsty(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtxsty(self, *args)

    def setDimtxsty(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtxsty(self, *args)

    def dimtxt(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtxt(self, *args)

    def setDimtxt(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtxt(self, *args)

    def dimtzin(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtzin(self, *args)

    def setDimtzin(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtzin(self, *args)

    def dimupt(self, *args):
        return _ODA_Drawings.OdDbDimension_dimupt(self, *args)

    def setDimupt(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimupt(self, *args)

    def dimzin(self, *args):
        return _ODA_Drawings.OdDbDimension_dimzin(self, *args)

    def setDimzin(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimzin(self, *args)

    def dimfxl(self, *args):
        return _ODA_Drawings.OdDbDimension_dimfxl(self, *args)

    def setDimfxl(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimfxl(self, *args)

    def dimfxlon(self, *args):
        return _ODA_Drawings.OdDbDimension_dimfxlon(self, *args)

    def setDimfxlon(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimfxlon(self, *args)

    def dimjogang(self, *args):
        return _ODA_Drawings.OdDbDimension_dimjogang(self, *args)

    def setDimjogang(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimjogang(self, *args)

    def dimtfill(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtfill(self, *args)

    def setDimtfill(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtfill(self, *args)

    def dimtfillclr(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtfillclr(self, *args)

    def setDimtfillclr(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtfillclr(self, *args)

    def dimarcsym(self, *args):
        return _ODA_Drawings.OdDbDimension_dimarcsym(self, *args)

    def setDimarcsym(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimarcsym(self, *args)

    def dimltype(self, *args):
        return _ODA_Drawings.OdDbDimension_dimltype(self, *args)

    def setDimltype(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimltype(self, *args)

    def dimltex1(self, *args):
        return _ODA_Drawings.OdDbDimension_dimltex1(self, *args)

    def setDimltex1(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimltex1(self, *args)

    def dimltex2(self, *args):
        return _ODA_Drawings.OdDbDimension_dimltex2(self, *args)

    def setDimltex2(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimltex2(self, *args)

    def dimtxtdirection(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtxtdirection(self, *args)

    def setDimtxtdirection(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtxtdirection(self, *args)

    def dimmzf(self, *args):
        return _ODA_Drawings.OdDbDimension_dimmzf(self, *args)

    def setDimmzf(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimmzf(self, *args)

    def dimmzs(self, *args):
        return _ODA_Drawings.OdDbDimension_dimmzs(self, *args)

    def setDimmzs(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimmzs(self, *args)

    def dimaltmzf(self, *args):
        return _ODA_Drawings.OdDbDimension_dimaltmzf(self, *args)

    def setDimaltmzf(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimaltmzf(self, *args)

    def dimaltmzs(self, *args):
        return _ODA_Drawings.OdDbDimension_dimaltmzs(self, *args)

    def setDimaltmzs(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimaltmzs(self, *args)

    def dimblk(self, *args):
        return _ODA_Drawings.OdDbDimension_dimblk(self, *args)

    def setDimblk(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimblk(self, *args)

    def dimblk1(self, *args):
        return _ODA_Drawings.OdDbDimension_dimblk1(self, *args)

    def setDimblk1(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimblk1(self, *args)

    def dimblk2(self, *args):
        return _ODA_Drawings.OdDbDimension_dimblk2(self, *args)

    def setDimblk2(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimblk2(self, *args)

    def dimatfit(self, *args):
        return _ODA_Drawings.OdDbDimension_dimatfit(self, *args)

    def setDimatfit(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimatfit(self, *args)

    def dimsoxd(self, *args):
        return _ODA_Drawings.OdDbDimension_dimsoxd(self, *args)

    def setDimsoxd(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimsoxd(self, *args)

    def dimtix(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtix(self, *args)

    def setDimtix(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtix(self, *args)

    def dimtmove(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtmove(self, *args)

    def setDimtmove(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtmove(self, *args)

    def dimtofl(self, *args):
        return _ODA_Drawings.OdDbDimension_dimtofl(self, *args)

    def setDimtofl(self, *args):
        return _ODA_Drawings.OdDbDimension_setDimtofl(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDimension

# Register OdDbDimension in _ODA_Drawings:
_ODA_Drawings.OdDbDimension_swigregister(OdDbDimension)

def OdDbDimension_cast(*args):
    return _ODA_Drawings.OdDbDimension_cast(*args)

def OdDbDimension_desc(*args):
    return _ODA_Drawings.OdDbDimension_desc(*args)

def OdDbDimension_createObject(*args):
    return _ODA_Drawings.OdDbDimension_createObject(*args)

class OdDbDimensionRecomputePE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def setMeasurementValue(*args):
        return _ODA_Drawings.OdDbDimensionRecomputePE_setMeasurementValue(*args)

    @staticmethod
    def resetDimBlockInsertParams(*args):
        return _ODA_Drawings.OdDbDimensionRecomputePE_resetDimBlockInsertParams(*args)

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDimensionRecomputePE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDimensionRecomputePE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDimensionRecomputePE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDimensionRecomputePE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDimensionRecomputePE_createObject(*args)

    def recomputeDimMeasurement(self, *args):
        return _ODA_Drawings.OdDbDimensionRecomputePE_recomputeDimMeasurement(self, *args)

    def recomputeDimBlock(self, *args):
        return _ODA_Drawings.OdDbDimensionRecomputePE_recomputeDimBlock(self, *args)

    def formatMeasurement(self, *args):
        return _ODA_Drawings.OdDbDimensionRecomputePE_formatMeasurement(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDimensionRecomputePE

# Register OdDbDimensionRecomputePE in _ODA_Drawings:
_ODA_Drawings.OdDbDimensionRecomputePE_swigregister(OdDbDimensionRecomputePE)

def OdDbDimensionRecomputePE_setMeasurementValue(*args):
    return _ODA_Drawings.OdDbDimensionRecomputePE_setMeasurementValue(*args)

def OdDbDimensionRecomputePE_resetDimBlockInsertParams(*args):
    return _ODA_Drawings.OdDbDimensionRecomputePE_resetDimBlockInsertParams(*args)

def OdDbDimensionRecomputePE_cast(*args):
    return _ODA_Drawings.OdDbDimensionRecomputePE_cast(*args)

def OdDbDimensionRecomputePE_desc(*args):
    return _ODA_Drawings.OdDbDimensionRecomputePE_desc(*args)

def OdDbDimensionRecomputePE_createObject(*args):
    return _ODA_Drawings.OdDbDimensionRecomputePE_createObject(*args)

kXrefAttach = _ODA_Drawings.kXrefAttach
kXrefBind = _ODA_Drawings.kXrefBind
kXrefDetach = _ODA_Drawings.kXrefDetach
kXrefOverlay = _ODA_Drawings.kXrefOverlay
kXrefPath = _ODA_Drawings.kXrefPath
kXrefReload = _ODA_Drawings.kXrefReload
kXrefResolve = _ODA_Drawings.kXrefResolve
kXrefUnload = _ODA_Drawings.kXrefUnload
kXrefXBind = _ODA_Drawings.kXrefXBind
class OdRxEventReactor(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdRxEventReactor_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdRxEventReactor_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdRxEventReactor_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdRxEventReactor_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdRxEventReactor_createObject(*args)

    def dwgFileOpened(self, *args):
        return _ODA_Drawings.OdRxEventReactor_dwgFileOpened(self, *args)

    def initialDwgFileOpenComplete(self, *args):
        return _ODA_Drawings.OdRxEventReactor_initialDwgFileOpenComplete(self, *args)

    def databaseConstructed(self, *args):
        return _ODA_Drawings.OdRxEventReactor_databaseConstructed(self, *args)

    def databaseToBeDestroyed(self, *args):
        return _ODA_Drawings.OdRxEventReactor_databaseToBeDestroyed(self, *args)

    def beginSave(self, *args):
        return _ODA_Drawings.OdRxEventReactor_beginSave(self, *args)

    def saveComplete(self, *args):
        return _ODA_Drawings.OdRxEventReactor_saveComplete(self, *args)

    def abortSave(self, *args):
        return _ODA_Drawings.OdRxEventReactor_abortSave(self, *args)

    def beginDxfIn(self, *args):
        return _ODA_Drawings.OdRxEventReactor_beginDxfIn(self, *args)

    def abortDxfIn(self, *args):
        return _ODA_Drawings.OdRxEventReactor_abortDxfIn(self, *args)

    def dxfInComplete(self, *args):
        return _ODA_Drawings.OdRxEventReactor_dxfInComplete(self, *args)

    def beginDxfOut(self, *args):
        return _ODA_Drawings.OdRxEventReactor_beginDxfOut(self, *args)

    def abortDxfOut(self, *args):
        return _ODA_Drawings.OdRxEventReactor_abortDxfOut(self, *args)

    def dxfOutComplete(self, *args):
        return _ODA_Drawings.OdRxEventReactor_dxfOutComplete(self, *args)

    def beginInsert(self, *args):
        return _ODA_Drawings.OdRxEventReactor_beginInsert(self, *args)

    def otherInsert(self, *args):
        return _ODA_Drawings.OdRxEventReactor_otherInsert(self, *args)

    def abortInsert(self, *args):
        return _ODA_Drawings.OdRxEventReactor_abortInsert(self, *args)

    def endInsert(self, *args):
        return _ODA_Drawings.OdRxEventReactor_endInsert(self, *args)

    def wblockNotice(self, *args):
        return _ODA_Drawings.OdRxEventReactor_wblockNotice(self, *args)

    def beginWblock(self, *args):
        return _ODA_Drawings.OdRxEventReactor_beginWblock(self, *args)

    def otherWblock(self, *args):
        return _ODA_Drawings.OdRxEventReactor_otherWblock(self, *args)

    def abortWblock(self, *args):
        return _ODA_Drawings.OdRxEventReactor_abortWblock(self, *args)

    def endWblock(self, *args):
        return _ODA_Drawings.OdRxEventReactor_endWblock(self, *args)

    def beginWblockObjects(self, *args):
        return _ODA_Drawings.OdRxEventReactor_beginWblockObjects(self, *args)

    def beginDeepClone(self, *args):
        return _ODA_Drawings.OdRxEventReactor_beginDeepClone(self, *args)

    def beginDeepCloneXlation(self, *args):
        return _ODA_Drawings.OdRxEventReactor_beginDeepCloneXlation(self, *args)

    def abortDeepClone(self, *args):
        return _ODA_Drawings.OdRxEventReactor_abortDeepClone(self, *args)

    def endDeepClone(self, *args):
        return _ODA_Drawings.OdRxEventReactor_endDeepClone(self, *args)

    def partialOpenNotice(self, *args):
        return _ODA_Drawings.OdRxEventReactor_partialOpenNotice(self, *args)

    def xrefSubCommandStart(self, *args):
        return _ODA_Drawings.OdRxEventReactor_xrefSubCommandStart(self, *args)

    def xrefSubCommandEnd(self, *args):
        return _ODA_Drawings.OdRxEventReactor_xrefSubCommandEnd(self, *args)

    def xrefSubCommandAborted(self, *args):
        return _ODA_Drawings.OdRxEventReactor_xrefSubCommandAborted(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdRxEventReactor

# Register OdRxEventReactor in _ODA_Drawings:
_ODA_Drawings.OdRxEventReactor_swigregister(OdRxEventReactor)

def OdRxEventReactor_cast(*args):
    return _ODA_Drawings.OdRxEventReactor_cast(*args)

def OdRxEventReactor_desc(*args):
    return _ODA_Drawings.OdRxEventReactor_desc(*args)

def OdRxEventReactor_createObject(*args):
    return _ODA_Drawings.OdRxEventReactor_createObject(*args)

class OdRxEvent(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdRxEvent_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdRxEvent_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdRxEvent_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdRxEvent_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdRxEvent_createObject(*args)

    def addReactor(self, *args):
        return _ODA_Drawings.OdRxEvent_addReactor(self, *args)

    def removeReactor(self, *args):
        return _ODA_Drawings.OdRxEvent_removeReactor(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdRxEvent

# Register OdRxEvent in _ODA_Drawings:
_ODA_Drawings.OdRxEvent_swigregister(OdRxEvent)

def OdRxEvent_cast(*args):
    return _ODA_Drawings.OdRxEvent_cast(*args)

def OdRxEvent_desc(*args):
    return _ODA_Drawings.OdRxEvent_desc(*args)

def OdRxEvent_createObject(*args):
    return _ODA_Drawings.OdRxEvent_createObject(*args)


def odrxEvent(*args):
    return _ODA_Drawings.odrxEvent(*args)
class OdDbBlockLookUpParameter(OdDbBlock1PtParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockLookUpParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockLookUpParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockLookUpParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockLookUpParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockLookUpParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockLookUpParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockLookUpParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockLookUpParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockLookUpParameter_dxfOutFields(self, *args)

    def getAssociatedLookupGrip(self, *args):
        return _ODA_Drawings.OdDbBlockLookUpParameter_getAssociatedLookupGrip(self, *args)

    def historyRequired(self, *args):
        return _ODA_Drawings.OdDbBlockLookUpParameter_historyRequired(self, *args)

    def lookupActionName(self, *args):
        return _ODA_Drawings.OdDbBlockLookUpParameter_lookupActionName(self, *args)

    def lookupDescription(self, *args):
        return _ODA_Drawings.OdDbBlockLookUpParameter_lookupDescription(self, *args)

    def lookupName(self, *args):
        return _ODA_Drawings.OdDbBlockLookUpParameter_lookupName(self, *args)

    def setLookupActionName(self, *args):
        return _ODA_Drawings.OdDbBlockLookUpParameter_setLookupActionName(self, *args)

    def setLookupDescription(self, *args):
        return _ODA_Drawings.OdDbBlockLookUpParameter_setLookupDescription(self, *args)

    def setLookupName(self, *args):
        return _ODA_Drawings.OdDbBlockLookUpParameter_setLookupName(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockLookUpParameter

# Register OdDbBlockLookUpParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlockLookUpParameter_swigregister(OdDbBlockLookUpParameter)

def OdDbBlockLookUpParameter_cast(*args):
    return _ODA_Drawings.OdDbBlockLookUpParameter_cast(*args)

def OdDbBlockLookUpParameter_desc(*args):
    return _ODA_Drawings.OdDbBlockLookUpParameter_desc(*args)

def OdDbBlockLookUpParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlockLookUpParameter_createObject(*args)

class OdDbBlockFlipParameter(OdDbBlock2PtParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockFlipParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockFlipParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockFlipParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_dxfOutFields(self, *args)
    NotFlipped = _ODA_Drawings.OdDbBlockFlipParameter_NotFlipped
    Flipped = _ODA_Drawings.OdDbBlockFlipParameter_Flipped

    def flipState(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_flipState(self, *args)

    def setFlipState(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_setFlipState(self, *args)

    def updatedFlipState(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_updatedFlipState(self, *args)

    def setUpdatedFlipState(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_setUpdatedFlipState(self, *args)

    def graphEvalEnd(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_graphEvalEnd(self, *args)

    def flipLabel(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_flipLabel(self, *args)

    def setFlipLabel(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_setFlipLabel(self, *args)

    def flipLabelDescription(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_flipLabelDescription(self, *args)

    def setFlipLabelDescription(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_setFlipLabelDescription(self, *args)

    def baseStateLabel(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_baseStateLabel(self, *args)

    def setBaseStateLabel(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_setBaseStateLabel(self, *args)

    def flippedStateLabel(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_flippedStateLabel(self, *args)

    def setFlippedStateLabel(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_setFlippedStateLabel(self, *args)

    def definitionLabelPoint(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_definitionLabelPoint(self, *args)

    def setDefinitionLabelPoint(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_setDefinitionLabelPoint(self, *args)

    def getAssociatedFlipGrip(self, *args):
        return _ODA_Drawings.OdDbBlockFlipParameter_getAssociatedFlipGrip(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockFlipParameter

# Register OdDbBlockFlipParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlockFlipParameter_swigregister(OdDbBlockFlipParameter)

def OdDbBlockFlipParameter_cast(*args):
    return _ODA_Drawings.OdDbBlockFlipParameter_cast(*args)

def OdDbBlockFlipParameter_desc(*args):
    return _ODA_Drawings.OdDbBlockFlipParameter_desc(*args)

def OdDbBlockFlipParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlockFlipParameter_createObject(*args)

class OdDbLSStroke(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kLSNoWidth = _ODA_Drawings.OdDbLSStroke_kLSNoWidth
    kLSWidthLeft = _ODA_Drawings.OdDbLSStroke_kLSWidthLeft
    kLSWidthRight = _ODA_Drawings.OdDbLSStroke_kLSWidthRight
    kLSWidthFull = _ODA_Drawings.OdDbLSStroke_kLSWidthFull
    kLSCapsClosed = _ODA_Drawings.OdDbLSStroke_kLSCapsClosed
    kLSCapsOpen = _ODA_Drawings.OdDbLSStroke_kLSCapsOpen
    kLSCapsExtended = _ODA_Drawings.OdDbLSStroke_kLSCapsExtended
    kLSCapsHexagon = _ODA_Drawings.OdDbLSStroke_kLSCapsHexagon
    kLSCapsOctagon = _ODA_Drawings.OdDbLSStroke_kLSCapsOctagon
    kLSCapsDecagon = _ODA_Drawings.OdDbLSStroke_kLSCapsDecagon
    kLSCapsArc = _ODA_Drawings.OdDbLSStroke_kLSCapsArc

    def __init__(self, *args):
        _ODA_Drawings.OdDbLSStroke_swiginit(self, _ODA_Drawings.new_OdDbLSStroke(*args))

    def isDash(self, *args):
        return _ODA_Drawings.OdDbLSStroke_isDash(self, *args)

    def isGap(self, *args):
        return _ODA_Drawings.OdDbLSStroke_isGap(self, *args)

    def setDash(self, *args):
        return _ODA_Drawings.OdDbLSStroke_setDash(self, *args)

    def setGap(self, *args):
        return _ODA_Drawings.OdDbLSStroke_setGap(self, *args)

    def setIsDash(self, *args):
        return _ODA_Drawings.OdDbLSStroke_setIsDash(self, *args)

    def bypassCorner(self, *args):
        return _ODA_Drawings.OdDbLSStroke_bypassCorner(self, *args)

    def setBypassCorner(self, *args):
        return _ODA_Drawings.OdDbLSStroke_setBypassCorner(self, *args)

    def canBeScaled(self, *args):
        return _ODA_Drawings.OdDbLSStroke_canBeScaled(self, *args)

    def setCanBeScaled(self, *args):
        return _ODA_Drawings.OdDbLSStroke_setCanBeScaled(self, *args)

    def invertAtOrigin(self, *args):
        return _ODA_Drawings.OdDbLSStroke_invertAtOrigin(self, *args)

    def setInvertAtOrigin(self, *args):
        return _ODA_Drawings.OdDbLSStroke_setInvertAtOrigin(self, *args)

    def invertAtEnd(self, *args):
        return _ODA_Drawings.OdDbLSStroke_invertAtEnd(self, *args)

    def setInvertAtEnd(self, *args):
        return _ODA_Drawings.OdDbLSStroke_setInvertAtEnd(self, *args)

    def length(self, *args):
        return _ODA_Drawings.OdDbLSStroke_length(self, *args)

    def setLength(self, *args):
        return _ODA_Drawings.OdDbLSStroke_setLength(self, *args)

    def startWidth(self, *args):
        return _ODA_Drawings.OdDbLSStroke_startWidth(self, *args)

    def setStartWidth(self, *args):
        return _ODA_Drawings.OdDbLSStroke_setStartWidth(self, *args)

    def endWidth(self, *args):
        return _ODA_Drawings.OdDbLSStroke_endWidth(self, *args)

    def setEndWidth(self, *args):
        return _ODA_Drawings.OdDbLSStroke_setEndWidth(self, *args)

    def widthMode(self, *args):
        return _ODA_Drawings.OdDbLSStroke_widthMode(self, *args)

    def setWidthMode(self, *args):
        return _ODA_Drawings.OdDbLSStroke_setWidthMode(self, *args)

    def capMode(self, *args):
        return _ODA_Drawings.OdDbLSStroke_capMode(self, *args)

    def setCapMode(self, *args):
        return _ODA_Drawings.OdDbLSStroke_setCapMode(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLSStroke

# Register OdDbLSStroke in _ODA_Drawings:
_ODA_Drawings.OdDbLSStroke_swigregister(OdDbLSStroke)

kLSSymbolComponent = _ODA_Drawings.kLSSymbolComponent
kLSCompoundComponent = _ODA_Drawings.kLSCompoundComponent
kLSStrokePatternComponent = _ODA_Drawings.kLSStrokePatternComponent
kLSPointComponent = _ODA_Drawings.kLSPointComponent
kLSInternalComponent = _ODA_Drawings.kLSInternalComponent
class OdDbLSComponent(OdDbLSObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLSComponent_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLSComponent_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLSComponent_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLSComponent_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLSComponent_createObject(*args)

    def componentType(self, *args):
        return _ODA_Drawings.OdDbLSComponent_componentType(self, *args)

    def setComponentType(self, *args):
        return _ODA_Drawings.OdDbLSComponent_setComponentType(self, *args)

    def componentUID(self, *args):
        return _ODA_Drawings.OdDbLSComponent_componentUID(self, *args)

    def description(self, *args):
        return _ODA_Drawings.OdDbLSComponent_description(self, *args)

    def setDescription(self, *args):
        return _ODA_Drawings.OdDbLSComponent_setDescription(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLSComponent

# Register OdDbLSComponent in _ODA_Drawings:
_ODA_Drawings.OdDbLSComponent_swigregister(OdDbLSComponent)

def OdDbLSComponent_cast(*args):
    return _ODA_Drawings.OdDbLSComponent_cast(*args)

def OdDbLSComponent_desc(*args):
    return _ODA_Drawings.OdDbLSComponent_desc(*args)

def OdDbLSComponent_createObject(*args):
    return _ODA_Drawings.OdDbLSComponent_createObject(*args)

class OdDbPolygonMeshVertex(OdDbVertex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPolygonMeshVertex_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPolygonMeshVertex_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPolygonMeshVertex_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPolygonMeshVertex_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPolygonMeshVertex_createObject(*args)

    def vertexType(self, *args):
        return _ODA_Drawings.OdDbPolygonMeshVertex_vertexType(self, *args)

    def position(self, *args):
        return _ODA_Drawings.OdDbPolygonMeshVertex_position(self, *args)

    def setPosition(self, *args):
        return _ODA_Drawings.OdDbPolygonMeshVertex_setPosition(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPolygonMeshVertex_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPolygonMeshVertex_dwgOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbPolygonMeshVertex_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbPolygonMeshVertex_dxfOutFields_R12(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbPolygonMeshVertex_subErase(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPolygonMeshVertex

# Register OdDbPolygonMeshVertex in _ODA_Drawings:
_ODA_Drawings.OdDbPolygonMeshVertex_swigregister(OdDbPolygonMeshVertex)

def OdDbPolygonMeshVertex_cast(*args):
    return _ODA_Drawings.OdDbPolygonMeshVertex_cast(*args)

def OdDbPolygonMeshVertex_desc(*args):
    return _ODA_Drawings.OdDbPolygonMeshVertex_desc(*args)

def OdDbPolygonMeshVertex_createObject(*args):
    return _ODA_Drawings.OdDbPolygonMeshVertex_createObject(*args)

class OdDbOleFrame(OdDbFrame):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbOleFrame_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbOleFrame_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbOleFrame_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbOleFrame_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbOleFrame_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbOleFrame

# Register OdDbOleFrame in _ODA_Drawings:
_ODA_Drawings.OdDbOleFrame_swigregister(OdDbOleFrame)

def OdDbOleFrame_cast(*args):
    return _ODA_Drawings.OdDbOleFrame_cast(*args)

def OdDbOleFrame_desc(*args):
    return _ODA_Drawings.OdDbOleFrame_desc(*args)

def OdDbOleFrame_createObject(*args):
    return _ODA_Drawings.OdDbOleFrame_createObject(*args)

class OdDbSpline(OdDbCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSpline_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSpline_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSpline_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSpline_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSpline_createObject(*args)

    def isRational(self, *args):
        return _ODA_Drawings.OdDbSpline_isRational(self, *args)

    def degree(self, *args):
        return _ODA_Drawings.OdDbSpline_degree(self, *args)

    def elevateDegree(self, *args):
        return _ODA_Drawings.OdDbSpline_elevateDegree(self, *args)

    def numControlPoints(self, *args):
        return _ODA_Drawings.OdDbSpline_numControlPoints(self, *args)

    def getControlPointAt(self, *args):
        return _ODA_Drawings.OdDbSpline_getControlPointAt(self, *args)

    def setControlPointAt(self, *args):
        return _ODA_Drawings.OdDbSpline_setControlPointAt(self, *args)

    def numFitPoints(self, *args):
        return _ODA_Drawings.OdDbSpline_numFitPoints(self, *args)

    def getFitPointAt(self, *args):
        return _ODA_Drawings.OdDbSpline_getFitPointAt(self, *args)

    def setFitPointAt(self, *args):
        return _ODA_Drawings.OdDbSpline_setFitPointAt(self, *args)

    def insertFitPointAt(self, *args):
        return _ODA_Drawings.OdDbSpline_insertFitPointAt(self, *args)

    def removeFitPointAt(self, *args):
        return _ODA_Drawings.OdDbSpline_removeFitPointAt(self, *args)

    def fitTolerance(self, *args):
        return _ODA_Drawings.OdDbSpline_fitTolerance(self, *args)

    def setFitTol(self, *args):
        return _ODA_Drawings.OdDbSpline_setFitTol(self, *args)

    def getFitTangents(self, *args):
        return _ODA_Drawings.OdDbSpline_getFitTangents(self, *args)

    def setFitTangents(self, *args):
        return _ODA_Drawings.OdDbSpline_setFitTangents(self, *args)

    def hasFitData(self, *args):
        return _ODA_Drawings.OdDbSpline_hasFitData(self, *args)

    def getFitData(self, *args):
        return _ODA_Drawings.OdDbSpline_getFitData(self, *args)

    def setFitData(self, *args):
        return _ODA_Drawings.OdDbSpline_setFitData(self, *args)

    def purgeFitData(self, *args):
        return _ODA_Drawings.OdDbSpline_purgeFitData(self, *args)

    def getNurbsData(self, *args):
        return _ODA_Drawings.OdDbSpline_getNurbsData(self, *args)

    def setNurbsData(self, *args):
        return _ODA_Drawings.OdDbSpline_setNurbsData(self, *args)

    def weightAt(self, *args):
        return _ODA_Drawings.OdDbSpline_weightAt(self, *args)

    def setWeightAt(self, *args):
        return _ODA_Drawings.OdDbSpline_setWeightAt(self, *args)

    def insertKnot(self, *args):
        return _ODA_Drawings.OdDbSpline_insertKnot(self, *args)

    def reverseCurve(self, *args):
        return _ODA_Drawings.OdDbSpline_reverseCurve(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbSpline_subGetClassID(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbSpline_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbSpline_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbSpline_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbSpline_dxfOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbSpline_subWorldDraw(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbSpline_subTransformBy(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbSpline_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbSpline_getPlane(self, *args)

    def getPointAtParam(self, *args):
        return _ODA_Drawings.OdDbSpline_getPointAtParam(self, *args)

    def getParamAtPoint(self, *args):
        return _ODA_Drawings.OdDbSpline_getParamAtPoint(self, *args)

    def getStartParam(self, *args):
        return _ODA_Drawings.OdDbSpline_getStartParam(self, *args)

    def getEndParam(self, *args):
        return _ODA_Drawings.OdDbSpline_getEndParam(self, *args)

    def getStartPoint(self, *args):
        return _ODA_Drawings.OdDbSpline_getStartPoint(self, *args)

    def getEndPoint(self, *args):
        return _ODA_Drawings.OdDbSpline_getEndPoint(self, *args)

    def getDistAtParam(self, *args):
        return _ODA_Drawings.OdDbSpline_getDistAtParam(self, *args)

    def getParamAtDist(self, *args):
        return _ODA_Drawings.OdDbSpline_getParamAtDist(self, *args)

    def getFirstDeriv(self, *args):
        return _ODA_Drawings.OdDbSpline_getFirstDeriv(self, *args)

    def getSecondDeriv(self, *args):
        return _ODA_Drawings.OdDbSpline_getSecondDeriv(self, *args)

    def getArea(self, *args):
        return _ODA_Drawings.OdDbSpline_getArea(self, *args)

    def getSplitCurves(self, *args):
        return _ODA_Drawings.OdDbSpline_getSplitCurves(self, *args)

    def decomposeForSave(self, *args):
        return _ODA_Drawings.OdDbSpline_decomposeForSave(self, *args)
    kFitPoints = _ODA_Drawings.OdDbSpline_kFitPoints
    kControlPoints = _ODA_Drawings.OdDbSpline_kControlPoints

    def type(self, *args):
        return _ODA_Drawings.OdDbSpline_type(self, *args)

    def setType(self, *args):
        return _ODA_Drawings.OdDbSpline_setType(self, *args)

    def cvFrame(self, *args):
        return _ODA_Drawings.OdDbSpline_cvFrame(self, *args)

    def setCvFrame(self, *args):
        return _ODA_Drawings.OdDbSpline_setCvFrame(self, *args)

    def insertControlPointAt(self, *args):
        return _ODA_Drawings.OdDbSpline_insertControlPointAt(self, *args)

    def removeControlPointAt(self, *args):
        return _ODA_Drawings.OdDbSpline_removeControlPointAt(self, *args)

    def isNull(self, *args):
        return _ODA_Drawings.OdDbSpline_isNull(self, *args)

    def modifyPositionAndTangent(self, *args):
        return _ODA_Drawings.OdDbSpline_modifyPositionAndTangent(self, *args)

    def getOdGeCurve(self, *args):
        return _ODA_Drawings.OdDbSpline_getOdGeCurve(self, *args)

    def setFromOdGeCurve(self, *args):
        return _ODA_Drawings.OdDbSpline_setFromOdGeCurve(self, *args)

    def toPolyline(self, *args):
        return _ODA_Drawings.OdDbSpline_toPolyline(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbSpline_subExplode(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSpline

# Register OdDbSpline in _ODA_Drawings:
_ODA_Drawings.OdDbSpline_swigregister(OdDbSpline)
kPlineVerticesThrehold = cvar.kPlineVerticesThrehold

def OdDbSpline_cast(*args):
    return _ODA_Drawings.OdDbSpline_cast(*args)

def OdDbSpline_desc(*args):
    return _ODA_Drawings.OdDbSpline_desc(*args)

def OdDbSpline_createObject(*args):
    return _ODA_Drawings.OdDbSpline_createObject(*args)

class OdDbSplinePE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSplinePE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSplinePE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSplinePE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSplinePE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSplinePE_createObject(*args)

    def getParamAtPoint(self, *args):
        return _ODA_Drawings.OdDbSplinePE_getParamAtPoint(self, *args)

    def getArea(self, *args):
        return _ODA_Drawings.OdDbSplinePE_getArea(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSplinePE

# Register OdDbSplinePE in _ODA_Drawings:
_ODA_Drawings.OdDbSplinePE_swigregister(OdDbSplinePE)

def OdDbSplinePE_cast(*args):
    return _ODA_Drawings.OdDbSplinePE_cast(*args)

def OdDbSplinePE_desc(*args):
    return _ODA_Drawings.OdDbSplinePE_desc(*args)

def OdDbSplinePE_createObject(*args):
    return _ODA_Drawings.OdDbSplinePE_createObject(*args)

class OdDbBlockReference(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockReference_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockReference_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockReference_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockReference_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockReference_createObject(*args)

    def blockTableRecord(self, *args):
        return _ODA_Drawings.OdDbBlockReference_blockTableRecord(self, *args)

    def setBlockTableRecord(self, *args):
        return _ODA_Drawings.OdDbBlockReference_setBlockTableRecord(self, *args)

    def position(self, *args):
        return _ODA_Drawings.OdDbBlockReference_position(self, *args)

    def setPosition(self, *args):
        return _ODA_Drawings.OdDbBlockReference_setPosition(self, *args)

    def scaleFactors(self, *args):
        return _ODA_Drawings.OdDbBlockReference_scaleFactors(self, *args)

    def setScaleFactors(self, *args):
        return _ODA_Drawings.OdDbBlockReference_setScaleFactors(self, *args)

    def rotation(self, *args):
        return _ODA_Drawings.OdDbBlockReference_rotation(self, *args)

    def setRotation(self, *args):
        return _ODA_Drawings.OdDbBlockReference_setRotation(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbBlockReference_normal(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDbBlockReference_setNormal(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbBlockReference_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbBlockReference_getPlane(self, *args)

    def blockTransform(self, *args):
        return _ODA_Drawings.OdDbBlockReference_blockTransform(self, *args)

    def setBlockTransform(self, *args):
        return _ODA_Drawings.OdDbBlockReference_setBlockTransform(self, *args)

    def appendAttribute(self, *args):
        return _ODA_Drawings.OdDbBlockReference_appendAttribute(self, *args)

    def openAttribute(self, *args):
        return _ODA_Drawings.OdDbBlockReference_openAttribute(self, *args)

    def openSequenceEnd(self, *args):
        return _ODA_Drawings.OdDbBlockReference_openSequenceEnd(self, *args)

    def attributeIterator(self, *args):
        return _ODA_Drawings.OdDbBlockReference_attributeIterator(self, *args)

    def explodeToBlock(self, *args):
        return _ODA_Drawings.OdDbBlockReference_explodeToBlock(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbBlockReference_subSetAttributes(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbBlockReference_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbBlockReference_subViewportDraw(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockReference_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockReference_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockReference_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockReference_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbBlockReference_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbBlockReference_dxfOutFields_R12(self, *args)

    def dxfIn(self, *args):
        return _ODA_Drawings.OdDbBlockReference_dxfIn(self, *args)

    def dxfOut(self, *args):
        return _ODA_Drawings.OdDbBlockReference_dxfOut(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbBlockReference_subClose(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbBlockReference_subGetClassID(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbBlockReference_subTransformBy(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbBlockReference_subGetTransformedCopy(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbBlockReference_subExplode(self, *args)

    def subHandOverTo(self, *args):
        return _ODA_Drawings.OdDbBlockReference_subHandOverTo(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbBlockReference_subGetGeomExtents(self, *args)

    def explodeGeometry(self, *args):
        return _ODA_Drawings.OdDbBlockReference_explodeGeometry(self, *args)

    def treatAsOdDbBlockRefForExplode(self, *args):
        return _ODA_Drawings.OdDbBlockReference_treatAsOdDbBlockRefForExplode(self, *args)

    def geomExtentsBestFit(self, *args):
        return _ODA_Drawings.OdDbBlockReference_geomExtentsBestFit(self, *args)

    def explodeToOwnerSpace(self, *args):
        return _ODA_Drawings.OdDbBlockReference_explodeToOwnerSpace(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbBlockReference_copyFrom(self, *args)

    def subGetCompoundObjectTransform(self, *args):
        return _ODA_Drawings.OdDbBlockReference_subGetCompoundObjectTransform(self, *args)

    def subGetSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDbBlockReference_subGetSubentPathsAtGsMarker(self, *args)

    def subGetGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbBlockReference_subGetGsMarkersAtSubentPath(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockReference

# Register OdDbBlockReference in _ODA_Drawings:
_ODA_Drawings.OdDbBlockReference_swigregister(OdDbBlockReference)

def OdDbBlockReference_cast(*args):
    return _ODA_Drawings.OdDbBlockReference_cast(*args)

def OdDbBlockReference_desc(*args):
    return _ODA_Drawings.OdDbBlockReference_desc(*args)

def OdDbBlockReference_createObject(*args):
    return _ODA_Drawings.OdDbBlockReference_createObject(*args)


def decompTransform(*args):
    return _ODA_Drawings.decompTransform(*args)

def dimfit(*args):
    return _ODA_Drawings.dimfit(*args)

def dimunit(*args):
    return _ODA_Drawings.dimunit(*args)

def dimatfit(*args):
    return _ODA_Drawings.dimatfit(*args)

def dimtmove(*args):
    return _ODA_Drawings.dimtmove(*args)

def dimlunit(*args):
    return _ODA_Drawings.dimlunit(*args)

def dimfrac(*args):
    return _ODA_Drawings.dimfrac(*args)

def arrowName(*args):
    return _ODA_Drawings.arrowName(*args)

def isBuiltInArrow(*args):
    return _ODA_Drawings.isBuiltInArrow(*args)

def isZeroLengthArrow(*args):
    return _ODA_Drawings.isZeroLengthArrow(*args)

def findArrowId(*args):
    return _ODA_Drawings.findArrowId(*args)

def getArrowId(*args):
    return _ODA_Drawings.getArrowId(*args)
kFirstArrow = _ODA_Drawings.kFirstArrow
kSecondArrow = _ODA_Drawings.kSecondArrow
class OdDbDimStyleTableRecord(OdDbSymbolTableRecord):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_createObject(*args)

    def getBgrndTxtColor(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_getBgrndTxtColor(self, *args)

    def setBgrndTxtColor(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setBgrndTxtColor(self, *args)

    def getExtLineFixLenEnable(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_getExtLineFixLenEnable(self, *args)

    def setExtLineFixLenEnable(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setExtLineFixLenEnable(self, *args)

    def getExtLineFixLen(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_getExtLineFixLen(self, *args)

    def setExtLineFixLen(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setExtLineFixLen(self, *args)

    def getArcSymbolType(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_getArcSymbolType(self, *args)

    def setArcSymbolType(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setArcSymbolType(self, *args)

    def getJogAngle(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_getJogAngle(self, *args)

    def setJogAngle(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setJogAngle(self, *args)

    def getDimLinetype(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_getDimLinetype(self, *args)

    def setDimLinetype(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimLinetype(self, *args)

    def getDimExt1Linetype(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_getDimExt1Linetype(self, *args)

    def setDimExt1Linetype(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimExt1Linetype(self, *args)

    def getDimExt2Linetype(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_getDimExt2Linetype(self, *args)

    def setDimExt2Linetype(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimExt2Linetype(self, *args)

    def jogSymbolHeight(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_jogSymbolHeight(self, *args)

    def setJogSymbolHeight(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setJogSymbolHeight(self, *args)

    def setDIMTALN(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDIMTALN(self, *args)

    def getDIMTALN(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_getDIMTALN(self, *args)

    def setDIMBREAK(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDIMBREAK(self, *args)

    def getDIMBREAK(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_getDIMBREAK(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dxfOutFields_R12(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_subGetClassID(self, *args)

    def arrowId(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_arrowId(self, *args)

    def isModifiedForRecompute(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_isModifiedForRecompute(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_subErase(self, *args)

    def dimadec(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimadec(self, *args)

    def setDimadec(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimadec(self, *args)

    def dimalt(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimalt(self, *args)

    def setDimalt(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimalt(self, *args)

    def dimaltd(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimaltd(self, *args)

    def setDimaltd(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimaltd(self, *args)

    def dimaltf(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimaltf(self, *args)

    def setDimaltf(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimaltf(self, *args)

    def dimaltrnd(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimaltrnd(self, *args)

    def setDimaltrnd(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimaltrnd(self, *args)

    def dimalttd(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimalttd(self, *args)

    def setDimalttd(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimalttd(self, *args)

    def dimalttz(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimalttz(self, *args)

    def setDimalttz(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimalttz(self, *args)

    def dimaltu(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimaltu(self, *args)

    def setDimaltu(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimaltu(self, *args)

    def dimaltz(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimaltz(self, *args)

    def setDimaltz(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimaltz(self, *args)

    def dimapost(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimapost(self, *args)

    def setDimapost(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimapost(self, *args)

    def dimasz(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimasz(self, *args)

    def setDimasz(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimasz(self, *args)

    def dimaunit(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimaunit(self, *args)

    def setDimaunit(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimaunit(self, *args)

    def dimazin(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimazin(self, *args)

    def setDimazin(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimazin(self, *args)

    def dimcen(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimcen(self, *args)

    def setDimcen(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimcen(self, *args)

    def dimclrd(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimclrd(self, *args)

    def setDimclrd(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimclrd(self, *args)

    def dimclre(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimclre(self, *args)

    def setDimclre(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimclre(self, *args)

    def dimclrt(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimclrt(self, *args)

    def setDimclrt(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimclrt(self, *args)

    def dimdec(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimdec(self, *args)

    def setDimdec(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimdec(self, *args)

    def dimdle(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimdle(self, *args)

    def setDimdle(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimdle(self, *args)

    def dimdli(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimdli(self, *args)

    def setDimdli(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimdli(self, *args)

    def dimdsep(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimdsep(self, *args)

    def setDimdsep(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimdsep(self, *args)

    def dimexe(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimexe(self, *args)

    def setDimexe(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimexe(self, *args)

    def dimexo(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimexo(self, *args)

    def setDimexo(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimexo(self, *args)

    def dimfrac(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimfrac(self, *args)

    def setDimfrac(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimfrac(self, *args)

    def dimgap(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimgap(self, *args)

    def setDimgap(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimgap(self, *args)

    def dimjust(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimjust(self, *args)

    def setDimjust(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimjust(self, *args)

    def dimldrblk(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimldrblk(self, *args)

    def setDimldrblk(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimldrblk(self, *args)

    def dimlfac(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimlfac(self, *args)

    def setDimlfac(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimlfac(self, *args)

    def dimlim(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimlim(self, *args)

    def setDimlim(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimlim(self, *args)

    def dimlunit(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimlunit(self, *args)

    def setDimlunit(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimlunit(self, *args)

    def dimlwd(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimlwd(self, *args)

    def setDimlwd(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimlwd(self, *args)

    def dimlwe(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimlwe(self, *args)

    def setDimlwe(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimlwe(self, *args)

    def dimpost(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimpost(self, *args)

    def setDimpost(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimpost(self, *args)

    def dimrnd(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimrnd(self, *args)

    def setDimrnd(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimrnd(self, *args)

    def dimsah(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimsah(self, *args)

    def setDimsah(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimsah(self, *args)

    def dimscale(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimscale(self, *args)

    def setDimscale(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimscale(self, *args)

    def dimsd1(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimsd1(self, *args)

    def setDimsd1(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimsd1(self, *args)

    def dimsd2(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimsd2(self, *args)

    def setDimsd2(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimsd2(self, *args)

    def dimse1(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimse1(self, *args)

    def setDimse1(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimse1(self, *args)

    def dimse2(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimse2(self, *args)

    def setDimse2(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimse2(self, *args)

    def dimtad(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtad(self, *args)

    def setDimtad(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtad(self, *args)

    def dimtdec(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtdec(self, *args)

    def setDimtdec(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtdec(self, *args)

    def dimtfac(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtfac(self, *args)

    def setDimtfac(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtfac(self, *args)

    def dimtih(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtih(self, *args)

    def setDimtih(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtih(self, *args)

    def dimtm(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtm(self, *args)

    def setDimtm(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtm(self, *args)

    def dimtoh(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtoh(self, *args)

    def setDimtoh(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtoh(self, *args)

    def dimtol(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtol(self, *args)

    def setDimtol(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtol(self, *args)

    def dimtolj(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtolj(self, *args)

    def setDimtolj(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtolj(self, *args)

    def dimtp(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtp(self, *args)

    def setDimtp(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtp(self, *args)

    def dimtsz(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtsz(self, *args)

    def setDimtsz(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtsz(self, *args)

    def dimtvp(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtvp(self, *args)

    def setDimtvp(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtvp(self, *args)

    def dimtxsty(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtxsty(self, *args)

    def setDimtxsty(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtxsty(self, *args)

    def dimtxt(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtxt(self, *args)

    def setDimtxt(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtxt(self, *args)

    def dimtzin(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtzin(self, *args)

    def setDimtzin(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtzin(self, *args)

    def dimupt(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimupt(self, *args)

    def setDimupt(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimupt(self, *args)

    def dimzin(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimzin(self, *args)

    def setDimzin(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimzin(self, *args)

    def dimfxl(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimfxl(self, *args)

    def setDimfxl(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimfxl(self, *args)

    def dimfxlon(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimfxlon(self, *args)

    def setDimfxlon(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimfxlon(self, *args)

    def dimjogang(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimjogang(self, *args)

    def setDimjogang(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimjogang(self, *args)

    def dimtfill(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtfill(self, *args)

    def setDimtfill(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtfill(self, *args)

    def dimtfillclr(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtfillclr(self, *args)

    def setDimtfillclr(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtfillclr(self, *args)

    def dimarcsym(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimarcsym(self, *args)

    def setDimarcsym(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimarcsym(self, *args)

    def dimltype(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimltype(self, *args)

    def setDimltype(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimltype(self, *args)

    def dimltex1(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimltex1(self, *args)

    def setDimltex1(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimltex1(self, *args)

    def dimltex2(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimltex2(self, *args)

    def setDimltex2(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimltex2(self, *args)

    def dimtxtdirection(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtxtdirection(self, *args)

    def setDimtxtdirection(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtxtdirection(self, *args)

    def dimmzf(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimmzf(self, *args)

    def setDimmzf(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimmzf(self, *args)

    def dimmzs(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimmzs(self, *args)

    def setDimmzs(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimmzs(self, *args)

    def dimaltmzf(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimaltmzf(self, *args)

    def setDimaltmzf(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimaltmzf(self, *args)

    def dimaltmzs(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimaltmzs(self, *args)

    def setDimaltmzs(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimaltmzs(self, *args)

    def dimblk(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimblk(self, *args)

    def setDimblk(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimblk(self, *args)

    def dimblk1(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimblk1(self, *args)

    def setDimblk1(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimblk1(self, *args)

    def dimblk2(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimblk2(self, *args)

    def setDimblk2(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimblk2(self, *args)

    def dimatfit(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimatfit(self, *args)

    def setDimatfit(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimatfit(self, *args)

    def dimsoxd(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimsoxd(self, *args)

    def setDimsoxd(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimsoxd(self, *args)

    def dimtix(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtix(self, *args)

    def setDimtix(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtix(self, *args)

    def dimtmove(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtmove(self, *args)

    def setDimtmove(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtmove(self, *args)

    def dimtofl(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_dimtofl(self, *args)

    def setDimtofl(self, *args):
        return _ODA_Drawings.OdDbDimStyleTableRecord_setDimtofl(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDimStyleTableRecord

# Register OdDbDimStyleTableRecord in _ODA_Drawings:
_ODA_Drawings.OdDbDimStyleTableRecord_swigregister(OdDbDimStyleTableRecord)

def OdDbDimStyleTableRecord_cast(*args):
    return _ODA_Drawings.OdDbDimStyleTableRecord_cast(*args)

def OdDbDimStyleTableRecord_desc(*args):
    return _ODA_Drawings.OdDbDimStyleTableRecord_desc(*args)

def OdDbDimStyleTableRecord_createObject(*args):
    return _ODA_Drawings.OdDbDimStyleTableRecord_createObject(*args)

class OdDbFormattedTableData(OdDbLinkedTableData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbFormattedTableData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbFormattedTableData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbFormattedTableData_createObject(*args)

    def insertRowAndInherit(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_insertRowAndInherit(self, *args)

    def insertColumnAndInherit(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_insertColumnAndInherit(self, *args)

    def setFieldId(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setFieldId(self, *args)

    def merge(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_merge(self, *args)

    def unmerge(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_unmerge(self, *args)

    def isMerged(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_isMerged(self, *args)

    def getMergeRange(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_getMergeRange(self, *args)

    def isMergeAllEnabled(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_isMergeAllEnabled(self, *args)

    def enableMergeAll(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_enableMergeAll(self, *args)

    def isFormatEditable(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_isFormatEditable(self, *args)

    def rotation(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_rotation(self, *args)

    def setRotation(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setRotation(self, *args)

    def scale(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_scale(self, *args)

    def setScale(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setScale(self, *args)

    def isAutoScale(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_isAutoScale(self, *args)

    def setAutoScale(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setAutoScale(self, *args)

    def alignment(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_alignment(self, *args)

    def setAlignment(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setAlignment(self, *args)

    def contentColor(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_contentColor(self, *args)

    def setContentColor(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setContentColor(self, *args)

    def textStyle(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_textStyle(self, *args)

    def setTextStyle(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setTextStyle(self, *args)

    def textHeight(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_textHeight(self, *args)

    def setTextHeight(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setTextHeight(self, *args)

    def backgroundColor(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_backgroundColor(self, *args)

    def setBackgroundColor(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setBackgroundColor(self, *args)

    def contentLayout(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_contentLayout(self, *args)

    def setContentLayout(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setContentLayout(self, *args)

    def flowDirection(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_flowDirection(self, *args)

    def setFlowDirection(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setFlowDirection(self, *args)

    def margin(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_margin(self, *args)

    def setMargin(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setMargin(self, *args)

    def gridLineStyle(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_gridLineStyle(self, *args)

    def setGridLineStyle(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setGridLineStyle(self, *args)

    def gridLineWeight(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_gridLineWeight(self, *args)

    def setGridLineWeight(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setGridLineWeight(self, *args)

    def gridLinetype(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_gridLinetype(self, *args)

    def setGridLinetype(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setGridLinetype(self, *args)

    def gridColor(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_gridColor(self, *args)

    def setGridColor(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setGridColor(self, *args)

    def gridVisibility(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_gridVisibility(self, *args)

    def setGridVisibility(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setGridVisibility(self, *args)

    def gridDoubleLineSpacing(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_gridDoubleLineSpacing(self, *args)

    def setGridDoubleLineSpacing(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setGridDoubleLineSpacing(self, *args)

    def getGridProperty(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_getGridProperty(self, *args)

    def setGridProperty(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setGridProperty(self, *args)

    def getOverride(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_getOverride(self, *args)

    def setOverride(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_setOverride(self, *args)

    def removeAllOverrides(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_removeAllOverrides(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbFormattedTableData_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbFormattedTableData

# Register OdDbFormattedTableData in _ODA_Drawings:
_ODA_Drawings.OdDbFormattedTableData_swigregister(OdDbFormattedTableData)

def OdDbFormattedTableData_cast(*args):
    return _ODA_Drawings.OdDbFormattedTableData_cast(*args)

def OdDbFormattedTableData_desc(*args):
    return _ODA_Drawings.OdDbFormattedTableData_desc(*args)

def OdDbFormattedTableData_createObject(*args):
    return _ODA_Drawings.OdDbFormattedTableData_createObject(*args)

class ColorModelHSL(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.ColorModelHSL_swiginit(self, _ODA_Drawings.new_ColorModelHSL(*args))

    def __eq__(self, *args):
        return _ODA_Drawings.ColorModelHSL___eq__(self, *args)
    hue = property(_ODA_Drawings.ColorModelHSL_hue_get, _ODA_Drawings.ColorModelHSL_hue_set)
    saturation = property(_ODA_Drawings.ColorModelHSL_saturation_get, _ODA_Drawings.ColorModelHSL_saturation_set)
    luminance = property(_ODA_Drawings.ColorModelHSL_luminance_get, _ODA_Drawings.ColorModelHSL_luminance_set)
    alpha = property(_ODA_Drawings.ColorModelHSL_alpha_get, _ODA_Drawings.ColorModelHSL_alpha_set)
    __swig_destroy__ = _ODA_Drawings.delete_ColorModelHSL

# Register ColorModelHSL in _ODA_Drawings:
_ODA_Drawings.ColorModelHSL_swigregister(ColorModelHSL)

class ArgbColor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.ArgbColor_swiginit(self, _ODA_Drawings.new_ArgbColor(*args))

    def setColor(self, *args):
        return _ODA_Drawings.ArgbColor_setColor(self, *args)

    def color(self, *args):
        return _ODA_Drawings.ArgbColor_color(self, *args)

    @staticmethod
    def COLORREFToArgb(*args):
        return _ODA_Drawings.ArgbColor_COLORREFToArgb(*args)

    def gradientRgb(self, *args):
        return _ODA_Drawings.ArgbColor_gradientRgb(self, *args)

    def fromCOLORREF(self, *args):
        return _ODA_Drawings.ArgbColor_fromCOLORREF(self, *args)

    def toCOLORREF(self, *args):
        return _ODA_Drawings.ArgbColor_toCOLORREF(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_ArgbColor

# Register ArgbColor in _ODA_Drawings:
_ODA_Drawings.ArgbColor_swigregister(ArgbColor)

def ArgbColor_COLORREFToArgb(*args):
    return _ODA_Drawings.ArgbColor_COLORREFToArgb(*args)

class OdDbAttribute(OdDbText):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAttribute_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAttribute_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAttribute_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAttribute_createObject(*args)

    def tag(self, *args):
        return _ODA_Drawings.OdDbAttribute_tag(self, *args)

    def setTag(self, *args):
        return _ODA_Drawings.OdDbAttribute_setTag(self, *args)

    def isInvisible(self, *args):
        return _ODA_Drawings.OdDbAttribute_isInvisible(self, *args)

    def setInvisible(self, *args):
        return _ODA_Drawings.OdDbAttribute_setInvisible(self, *args)

    def isConstant(self, *args):
        return _ODA_Drawings.OdDbAttribute_isConstant(self, *args)

    def isVerifiable(self, *args):
        return _ODA_Drawings.OdDbAttribute_isVerifiable(self, *args)

    def isPreset(self, *args):
        return _ODA_Drawings.OdDbAttribute_isPreset(self, *args)

    def fieldLength(self, *args):
        return _ODA_Drawings.OdDbAttribute_fieldLength(self, *args)

    def setFieldLength(self, *args):
        return _ODA_Drawings.OdDbAttribute_setFieldLength(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbAttribute_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbAttribute_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbAttribute_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbAttribute_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbAttribute_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbAttribute_dxfOutFields_R12(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbAttribute_subGetClassID(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbAttribute_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbAttribute_subViewportDraw(self, *args)

    def setAttributeFromBlock(self, *args):
        return _ODA_Drawings.OdDbAttribute_setAttributeFromBlock(self, *args)

    def lockPositionInBlock(self, *args):
        return _ODA_Drawings.OdDbAttribute_lockPositionInBlock(self, *args)

    def setLockPositionInBlock(self, *args):
        return _ODA_Drawings.OdDbAttribute_setLockPositionInBlock(self, *args)

    def isMTextAttribute(self, *args):
        return _ODA_Drawings.OdDbAttribute_isMTextAttribute(self, *args)

    def getMTextAttribute(self, *args):
        return _ODA_Drawings.OdDbAttribute_getMTextAttribute(self, *args)

    def setMTextAttribute(self, *args):
        return _ODA_Drawings.OdDbAttribute_setMTextAttribute(self, *args)

    def convertIntoMTextAttribute(self, *args):
        return _ODA_Drawings.OdDbAttribute_convertIntoMTextAttribute(self, *args)

    def updateMTextAttribute(self, *args):
        return _ODA_Drawings.OdDbAttribute_updateMTextAttribute(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbAttribute_subClose(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAttribute

# Register OdDbAttribute in _ODA_Drawings:
_ODA_Drawings.OdDbAttribute_swigregister(OdDbAttribute)

def OdDbAttribute_cast(*args):
    return _ODA_Drawings.OdDbAttribute_cast(*args)

def OdDbAttribute_desc(*args):
    return _ODA_Drawings.OdDbAttribute_desc(*args)

def OdDbAttribute_createObject(*args):
    return _ODA_Drawings.OdDbAttribute_createObject(*args)

class OdDbMLeaderStyle(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    kNoneContent = _ODA_Drawings.OdDbMLeaderStyle_kNoneContent
    kBlockContent = _ODA_Drawings.OdDbMLeaderStyle_kBlockContent
    kMTextContent = _ODA_Drawings.OdDbMLeaderStyle_kMTextContent
    kToleranceContent = _ODA_Drawings.OdDbMLeaderStyle_kToleranceContent
    kDrawContentFirst = _ODA_Drawings.OdDbMLeaderStyle_kDrawContentFirst
    kDrawLeaderFirst = _ODA_Drawings.OdDbMLeaderStyle_kDrawLeaderFirst
    kDrawLeaderHeadFirst = _ODA_Drawings.OdDbMLeaderStyle_kDrawLeaderHeadFirst
    kDrawLeaderTailFirst = _ODA_Drawings.OdDbMLeaderStyle_kDrawLeaderTailFirst
    kInVisibleLeader = _ODA_Drawings.OdDbMLeaderStyle_kInVisibleLeader
    kStraightLeader = _ODA_Drawings.OdDbMLeaderStyle_kStraightLeader
    kSplineLeader = _ODA_Drawings.OdDbMLeaderStyle_kSplineLeader
    kAttachmentHorizontal = _ODA_Drawings.OdDbMLeaderStyle_kAttachmentHorizontal
    kAttachmentVertical = _ODA_Drawings.OdDbMLeaderStyle_kAttachmentVertical
    kAttachmentTopOfTop = _ODA_Drawings.OdDbMLeaderStyle_kAttachmentTopOfTop
    kAttachmentMiddleOfTop = _ODA_Drawings.OdDbMLeaderStyle_kAttachmentMiddleOfTop
    kAttachmentMiddle = _ODA_Drawings.OdDbMLeaderStyle_kAttachmentMiddle
    kAttachmentMiddleOfBottom = _ODA_Drawings.OdDbMLeaderStyle_kAttachmentMiddleOfBottom
    kAttachmentBottomOfBottom = _ODA_Drawings.OdDbMLeaderStyle_kAttachmentBottomOfBottom
    kAttachmentBottomLine = _ODA_Drawings.OdDbMLeaderStyle_kAttachmentBottomLine
    kAttachmentBottomOfTopLine = _ODA_Drawings.OdDbMLeaderStyle_kAttachmentBottomOfTopLine
    kAttachmentBottomOfTop = _ODA_Drawings.OdDbMLeaderStyle_kAttachmentBottomOfTop
    kAttachmentAllLine = _ODA_Drawings.OdDbMLeaderStyle_kAttachmentAllLine
    kAttachmentCenter = _ODA_Drawings.OdDbMLeaderStyle_kAttachmentCenter
    kAttachmentLinedCenter = _ODA_Drawings.OdDbMLeaderStyle_kAttachmentLinedCenter
    kInsertAngle = _ODA_Drawings.OdDbMLeaderStyle_kInsertAngle
    kHorizontalAngle = _ODA_Drawings.OdDbMLeaderStyle_kHorizontalAngle
    kAlwaysRightReadingAngle = _ODA_Drawings.OdDbMLeaderStyle_kAlwaysRightReadingAngle
    kLeftAlignment = _ODA_Drawings.OdDbMLeaderStyle_kLeftAlignment
    kCenterAlignment = _ODA_Drawings.OdDbMLeaderStyle_kCenterAlignment
    kRightAlignment = _ODA_Drawings.OdDbMLeaderStyle_kRightAlignment
    kConnectExtents = _ODA_Drawings.OdDbMLeaderStyle_kConnectExtents
    kConnectBase = _ODA_Drawings.OdDbMLeaderStyle_kConnectBase
    kUnknownLeader = _ODA_Drawings.OdDbMLeaderStyle_kUnknownLeader
    kLeftLeader = _ODA_Drawings.OdDbMLeaderStyle_kLeftLeader
    kRightLeader = _ODA_Drawings.OdDbMLeaderStyle_kRightLeader
    kTopLeader = _ODA_Drawings.OdDbMLeaderStyle_kTopLeader
    kBottomLeader = _ODA_Drawings.OdDbMLeaderStyle_kBottomLeader
    kAny = _ODA_Drawings.OdDbMLeaderStyle_kAny
    k15 = _ODA_Drawings.OdDbMLeaderStyle_k15
    k30 = _ODA_Drawings.OdDbMLeaderStyle_k30
    k45 = _ODA_Drawings.OdDbMLeaderStyle_k45
    k60 = _ODA_Drawings.OdDbMLeaderStyle_k60
    k90 = _ODA_Drawings.OdDbMLeaderStyle_k90
    kHorz = _ODA_Drawings.OdDbMLeaderStyle_kHorz

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbMLeaderStyle_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbMLeaderStyle_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbMLeaderStyle_createObject(*args)

    def setDatabaseDefaults(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setDatabaseDefaults(self, *args)

    def getName(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_getName(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setName(self, *args)

    def description(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_description(self, *args)

    def setDescription(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setDescription(self, *args)

    def bitFlags(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_bitFlags(self, *args)

    def setBitFlags(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setBitFlags(self, *args)

    def setContentType(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setContentType(self, *args)

    def contentType(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_contentType(self, *args)

    def setDrawMLeaderOrderType(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setDrawMLeaderOrderType(self, *args)

    def drawMLeaderOrderType(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_drawMLeaderOrderType(self, *args)

    def setDrawLeaderOrderType(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setDrawLeaderOrderType(self, *args)

    def drawLeaderOrderType(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_drawLeaderOrderType(self, *args)

    def setMaxLeaderSegmentsPoints(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setMaxLeaderSegmentsPoints(self, *args)

    def maxLeaderSegmentsPoints(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_maxLeaderSegmentsPoints(self, *args)

    def setFirstSegmentAngleConstraint(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setFirstSegmentAngleConstraint(self, *args)

    def firstSegmentAngleConstraint(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_firstSegmentAngleConstraint(self, *args)

    def setSecondSegmentAngleConstraint(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setSecondSegmentAngleConstraint(self, *args)

    def secondSegmentAngleConstraint(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_secondSegmentAngleConstraint(self, *args)

    def setLeaderLineType(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setLeaderLineType(self, *args)

    def leaderLineType(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_leaderLineType(self, *args)

    def setLeaderLineColor(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setLeaderLineColor(self, *args)

    def leaderLineColor(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_leaderLineColor(self, *args)

    def setLeaderLineTypeId(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setLeaderLineTypeId(self, *args)

    def leaderLineTypeId(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_leaderLineTypeId(self, *args)

    def setLeaderLineWeight(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setLeaderLineWeight(self, *args)

    def leaderLineWeight(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_leaderLineWeight(self, *args)

    def setEnableLanding(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setEnableLanding(self, *args)

    def enableLanding(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_enableLanding(self, *args)

    def setLandingGap(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setLandingGap(self, *args)

    def landingGap(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_landingGap(self, *args)

    def setEnableDogleg(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setEnableDogleg(self, *args)

    def enableDogleg(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_enableDogleg(self, *args)

    def setDoglegLength(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setDoglegLength(self, *args)

    def doglegLength(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_doglegLength(self, *args)

    def setArrowSymbolId(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setArrowSymbolId(self, *args)

    def arrowSymbolId(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_arrowSymbolId(self, *args)

    def setArrowSize(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setArrowSize(self, *args)

    def arrowSize(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_arrowSize(self, *args)

    def setDefaultMText(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setDefaultMText(self, *args)

    def defaultMText(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_defaultMText(self, *args)

    def setTextStyleId(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setTextStyleId(self, *args)

    def textStyleId(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_textStyleId(self, *args)

    def setTextAttachmentType(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setTextAttachmentType(self, *args)

    def textAttachmentType(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_textAttachmentType(self, *args)

    def setTextAngleType(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setTextAngleType(self, *args)

    def textAngleType(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_textAngleType(self, *args)

    def setTextAlignmentType(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setTextAlignmentType(self, *args)

    def textAlignmentType(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_textAlignmentType(self, *args)

    def setTextAlignAlwaysLeft(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setTextAlignAlwaysLeft(self, *args)

    def textAlignAlwaysLeft(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_textAlignAlwaysLeft(self, *args)

    def setTextColor(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setTextColor(self, *args)

    def textColor(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_textColor(self, *args)

    def setTextHeight(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setTextHeight(self, *args)

    def textHeight(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_textHeight(self, *args)

    def setEnableFrameText(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setEnableFrameText(self, *args)

    def enableFrameText(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_enableFrameText(self, *args)

    def setAlignSpace(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setAlignSpace(self, *args)

    def alignSpace(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_alignSpace(self, *args)

    def setBlockId(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setBlockId(self, *args)

    def blockId(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_blockId(self, *args)

    def setBlockColor(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setBlockColor(self, *args)

    def blockColor(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_blockColor(self, *args)

    def setBlockScale(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setBlockScale(self, *args)

    def blockScale(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_blockScale(self, *args)

    def setEnableBlockScale(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setEnableBlockScale(self, *args)

    def enableBlockScale(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_enableBlockScale(self, *args)

    def setBlockRotation(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setBlockRotation(self, *args)

    def blockRotation(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_blockRotation(self, *args)

    def setEnableBlockRotation(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setEnableBlockRotation(self, *args)

    def enableBlockRotation(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_enableBlockRotation(self, *args)

    def setBlockConnectionType(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setBlockConnectionType(self, *args)

    def blockConnectionType(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_blockConnectionType(self, *args)

    def setScale(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setScale(self, *args)

    def scale(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_scale(self, *args)

    def overwritePropChanged(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_overwritePropChanged(self, *args)

    def postMLeaderStyleToDb(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_postMLeaderStyleToDb(self, *args)

    def setAnnotative(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setAnnotative(self, *args)

    def annotative(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_annotative(self, *args)

    def setBreakSize(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setBreakSize(self, *args)

    def breakSize(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_breakSize(self, *args)

    def setTextAttachmentDirection(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setTextAttachmentDirection(self, *args)

    def textAttachmentDirection(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_textAttachmentDirection(self, *args)

    def setExtendLeaderToText(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_setExtendLeaderToText(self, *args)

    def extendLeaderToText(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_extendLeaderToText(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_dxfOutFields(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_subClose(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbMLeaderStyle_subGetClassID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbMLeaderStyle

# Register OdDbMLeaderStyle in _ODA_Drawings:
_ODA_Drawings.OdDbMLeaderStyle_swigregister(OdDbMLeaderStyle)

def OdDbMLeaderStyle_cast(*args):
    return _ODA_Drawings.OdDbMLeaderStyle_cast(*args)

def OdDbMLeaderStyle_desc(*args):
    return _ODA_Drawings.OdDbMLeaderStyle_desc(*args)

def OdDbMLeaderStyle_createObject(*args):
    return _ODA_Drawings.OdDbMLeaderStyle_createObject(*args)

class OdDbGeoDatum(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_ODA_Drawings.OdDbGeoDatum_id_get, _ODA_Drawings.OdDbGeoDatum_id_set)
    desc = property(_ODA_Drawings.OdDbGeoDatum_desc_get, _ODA_Drawings.OdDbGeoDatum_desc_set)

    def __init__(self, *args):
        _ODA_Drawings.OdDbGeoDatum_swiginit(self, _ODA_Drawings.new_OdDbGeoDatum(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGeoDatum

# Register OdDbGeoDatum in _ODA_Drawings:
_ODA_Drawings.OdDbGeoDatum_swigregister(OdDbGeoDatum)

class OdDbGeoEllipsoid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_ODA_Drawings.OdDbGeoEllipsoid_id_get, _ODA_Drawings.OdDbGeoEllipsoid_id_set)
    desc = property(_ODA_Drawings.OdDbGeoEllipsoid_desc_get, _ODA_Drawings.OdDbGeoEllipsoid_desc_set)
    polarRadius = property(_ODA_Drawings.OdDbGeoEllipsoid_polarRadius_get, _ODA_Drawings.OdDbGeoEllipsoid_polarRadius_set)
    eccentricity = property(_ODA_Drawings.OdDbGeoEllipsoid_eccentricity_get, _ODA_Drawings.OdDbGeoEllipsoid_eccentricity_set)

    def __init__(self, *args):
        _ODA_Drawings.OdDbGeoEllipsoid_swiginit(self, _ODA_Drawings.new_OdDbGeoEllipsoid(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGeoEllipsoid

# Register OdDbGeoEllipsoid in _ODA_Drawings:
_ODA_Drawings.OdDbGeoEllipsoid_swigregister(OdDbGeoEllipsoid)

class OdDbGeoProjectionParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_ODA_Drawings.OdDbGeoProjectionParameter_name_get, _ODA_Drawings.OdDbGeoProjectionParameter_name_set)
    value = property(_ODA_Drawings.OdDbGeoProjectionParameter_value_get, _ODA_Drawings.OdDbGeoProjectionParameter_value_set)

    def __init__(self, *args):
        _ODA_Drawings.OdDbGeoProjectionParameter_swiginit(self, _ODA_Drawings.new_OdDbGeoProjectionParameter(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGeoProjectionParameter

# Register OdDbGeoProjectionParameter in _ODA_Drawings:
_ODA_Drawings.OdDbGeoProjectionParameter_swigregister(OdDbGeoProjectionParameter)

class OdDbGeoCoordinateSystemCategory(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemCategory_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemCategory_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemCategory_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemCategory_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemCategory_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGeoCoordinateSystemCategory

    def getId(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemCategory_getId(self, *args)

    def getNumOfCoordinateSystem(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemCategory_getNumOfCoordinateSystem(self, *args)

    def getCoordinateSystemAt(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemCategory_getCoordinateSystemAt(self, *args)

    @staticmethod
    def createAll(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemCategory_createAll(*args)

# Register OdDbGeoCoordinateSystemCategory in _ODA_Drawings:
_ODA_Drawings.OdDbGeoCoordinateSystemCategory_swigregister(OdDbGeoCoordinateSystemCategory)

def OdDbGeoCoordinateSystemCategory_cast(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystemCategory_cast(*args)

def OdDbGeoCoordinateSystemCategory_desc(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystemCategory_desc(*args)

def OdDbGeoCoordinateSystemCategory_createObject(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystemCategory_createObject(*args)

def OdDbGeoCoordinateSystemCategory_createAll(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystemCategory_createAll(*args)

class OdDbGeoCoordinateSystem(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_createObject(*args)
    kTypeUnknown = _ODA_Drawings.OdDbGeoCoordinateSystem_kTypeUnknown
    kTypeArbitrary = _ODA_Drawings.OdDbGeoCoordinateSystem_kTypeArbitrary
    kTypeGeographic = _ODA_Drawings.OdDbGeoCoordinateSystem_kTypeGeographic
    kTypeProjected = _ODA_Drawings.OdDbGeoCoordinateSystem_kTypeProjected
    kProjectionCodeUnknown = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeUnknown
    kProjectionCodeAlber = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeAlber
    kProjectionCodeAzede = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeAzede
    kProjectionCodeAzmea = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeAzmea
    kProjectionCodeAzmed = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeAzmed
    kProjectionCodeBipolar = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeBipolar
    kProjectionCodeBonne = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeBonne
    kProjectionCodeCassini = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeCassini
    kProjectionCodeEckert4 = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeEckert4
    kProjectionCodeEckert6 = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeEckert6
    kProjectionCodeEdcnc = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeEdcnc
    kProjectionCodeEdcyl = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeEdcyl
    kProjectionCodeGaussK = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeGaussK
    kProjectionCodeGnomonic = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeGnomonic
    kProjectionCodeGoode = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeGoode
    kProjectionCodeHom1uv = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeHom1uv
    kProjectionCodeHom1xy = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeHom1xy
    kProjectionCodeHom2uv = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeHom2uv
    kProjectionCodeHom2xy = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeHom2xy
    kProjectionCodeKrovak = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeKrovak
    kProjectionCodeKrvk95 = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeKrvk95
    kProjectionCodeLL = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeLL
    kProjectionCodeLm1sp = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeLm1sp
    kProjectionCodeLm2sp = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeLm2sp
    kProjectionCodeLmblg = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeLmblg
    kProjectionCodeLmtan = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeLmtan
    kProjectionCodeMiller = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeMiller
    kProjectionCodeMndotl = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeMndotl
    kProjectionCodeMndott = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeMndott
    kProjectionCodeModpc = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeModpc
    kProjectionCodeMollweid = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeMollweid
    kProjectionCodeMrcat = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeMrcat
    kProjectionCodeMrcatK = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeMrcatK
    kProjectionCodeMstero = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeMstero
    kProjectionCodeNeacyl = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeNeacyl
    kProjectionCodeNerth = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeNerth
    kProjectionCodeNzealand = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeNzealand
    kProjectionCodeOblqM = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeOblqM
    kProjectionCodeObqcyl = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeObqcyl
    kProjectionCodeOrtho = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeOrtho
    kProjectionCodeOstn02 = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeOstn02
    kProjectionCodeOstn97 = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeOstn97
    kProjectionCodeOstro = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeOstro
    kProjectionCodePlycn = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodePlycn
    kProjectionCodePstro = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodePstro
    kProjectionCodePstrosl = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodePstrosl
    kProjectionCodeRskew = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeRskew
    kProjectionCodeRskewc = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeRskewc
    kProjectionCodeRskewo = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeRskewo
    kProjectionCodeRobinson = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeRobinson
    kProjectionCodeSinus = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeSinus
    kProjectionCodeSotrm = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeSotrm
    kProjectionCodeSstro = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeSstro
    kProjectionCodeSwiss = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeSwiss
    kProjectionCodeSys34 = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeSys34
    kProjectionCodeSys34_99 = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeSys34_99
    kProjectionCodeTeacyl = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeTeacyl
    kProjectionCodeTm = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeTm
    kProjectionCodeTrmeraf = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeTrmeraf
    kProjectionCodeTrmrkrg = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeTrmrkrg
    kProjectionCodeTrmrs = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeTrmrs
    kProjectionCodeVdgrntn = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeVdgrntn
    kProjectionCodeWccsl = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeWccsl
    kProjectionCodeWccst = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeWccst
    kProjectionCodeUtm = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeUtm
    kProjectionCodeWinkl = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeWinkl
    kProjectionCodeNrthsrt = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeNrthsrt
    kProjectionCodeLmbrtaf = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeLmbrtaf
    kProjectionCodeSys34_01 = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeSys34_01
    kProjectionCodeEdcylE = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeEdcylE
    kProjectionCodePlateCarree = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodePlateCarree
    kProjectionCodePvMercator = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodePvMercator
    kProjectionCodeLmMich = _ODA_Drawings.OdDbGeoCoordinateSystem_kProjectionCodeLmMich
    kUnitUnknown = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitUnknown
    kUnitMeter = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitMeter
    kUnitFoot = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitFoot
    kUnitInch = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitInch
    kUnitIFoot = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitIFoot
    kUnitClarkeFoot = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitClarkeFoot
    kUnitIInch = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitIInch
    kUnitCentimeter = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitCentimeter
    kUnitKilometer = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitKilometer
    kUnitYard = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitYard
    kUnitSearsYard = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitSearsYard
    kUnitMile = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitMile
    kUnitIYard = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitIYard
    kUnitIMile = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitIMile
    kUnitKnot = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitKnot
    kUnitNautM = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitNautM
    kUnitLat66 = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitLat66
    kUnitLat83 = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitLat83
    kUnitDecimeter = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitDecimeter
    kUnitMillimeter = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitMillimeter
    kUnitDekameter = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitDekameter
    kUnitHectometer = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitHectometer
    kUnitGermanMeter = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitGermanMeter
    kUnitCaGrid = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitCaGrid
    kUnitClarkeChain = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitClarkeChain
    kUnitGunterChain = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitGunterChain
    kUnitBenoitChain = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitBenoitChain
    kUnitSearsChain = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitSearsChain
    kUnitClarkeLink = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitClarkeLink
    kUnitGunterLink = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitGunterLink
    kUnitBenoitLink = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitBenoitLink
    kUnitSearsLink = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitSearsLink
    kUnitRod = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitRod
    kUnitPerch = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitPerch
    kUnitPole = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitPole
    kUnitFurlong = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitFurlong
    kUnitRood = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitRood
    kUnitCapeFoot = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitCapeFoot
    kUnitBrealey = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitBrealey
    kUnitSearsFoot = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitSearsFoot
    kUnitGoldCoastFoot = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitGoldCoastFoot
    kUnitMicroInch = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitMicroInch
    kUnitIndianYard = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitIndianYard
    kUnitIndianFoot = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitIndianFoot
    kUnitIndianFt37 = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitIndianFt37
    kUnitIndianFt62 = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitIndianFt62
    kUnitIndianFt75 = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitIndianFt75
    kUnitIndianYd37 = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitIndianYd37
    kUnitDecameter = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitDecameter
    kUnitInternationalChain = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitInternationalChain
    kUnitInternationalLink = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitInternationalLink
    kUnitBrFootTrunc = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitBrFootTrunc
    kUnitBrChainTrunc = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitBrChainTrunc
    kUnitBrLinkTrunc = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitBrLinkTrunc
    kUnitDegree = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitDegree
    kUnitGrad = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitGrad
    kUnitGrade = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitGrade
    kUnitMapInfo = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitMapInfo
    kUnitMil = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitMil
    kUnitMinute = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitMinute
    kUnitRadian = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitRadian
    kUnitSecond = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitSecond
    kUnitDecisec = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitDecisec
    kUnitCentisec = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitCentisec
    kUnitMillisec = _ODA_Drawings.OdDbGeoCoordinateSystem_kUnitMillisec
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGeoCoordinateSystem

    def getId(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_getId(self, *args)

    def getEpsgCode(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_getEpsgCode(self, *args)

    def getType(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_getType(self, *args)

    def getDescription(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_getDescription(self, *args)

    def getUnit(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_getUnit(self, *args)

    def getUnitScale(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_getUnitScale(self, *args)

    def getProjectionCode(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_getProjectionCode(self, *args)

    def getProjectionParameters(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_getProjectionParameters(self, *args)

    def getDatum(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_getDatum(self, *args)

    def getEllipsoid(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_getEllipsoid(self, *args)

    def getOffset(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_getOffset(self, *args)

    def getCartesianExtents(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_getCartesianExtents(self, *args)

    def getGeodeticExtents(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_getGeodeticExtents(self, *args)

    def getXmlRepresentation(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_getXmlRepresentation(self, *args)

    def getWktRepresentation(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_getWktRepresentation(self, *args)

    @staticmethod
    def create(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_create(*args)

    @staticmethod
    def createAll(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_createAll(*args)

    @staticmethod
    def unitNameToString(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystem_unitNameToString(*args)

# Register OdDbGeoCoordinateSystem in _ODA_Drawings:
_ODA_Drawings.OdDbGeoCoordinateSystem_swigregister(OdDbGeoCoordinateSystem)

def OdDbGeoCoordinateSystem_cast(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystem_cast(*args)

def OdDbGeoCoordinateSystem_desc(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystem_desc(*args)

def OdDbGeoCoordinateSystem_createObject(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystem_createObject(*args)

def OdDbGeoCoordinateSystem_create(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystem_create(*args)

def OdDbGeoCoordinateSystem_createAll(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystem_createAll(*args)

def OdDbGeoCoordinateSystem_unitNameToString(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystem_unitNameToString(*args)

class OdDbGeoCoordinateSystemTransformer(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemTransformer_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemTransformer_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemTransformer_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemTransformer_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemTransformer_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGeoCoordinateSystemTransformer

    def getSourceCoordinateSystemId(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemTransformer_getSourceCoordinateSystemId(self, *args)

    def getTargetCoordinateSystemId(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemTransformer_getTargetCoordinateSystemId(self, *args)

    @staticmethod
    def transformPoint(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemTransformer_transformPoint(*args)

    @staticmethod
    def transformPoints(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemTransformer_transformPoints(*args)

    @staticmethod
    def create(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemTransformer_create(*args)

# Register OdDbGeoCoordinateSystemTransformer in _ODA_Drawings:
_ODA_Drawings.OdDbGeoCoordinateSystemTransformer_swigregister(OdDbGeoCoordinateSystemTransformer)

def OdDbGeoCoordinateSystemTransformer_cast(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystemTransformer_cast(*args)

def OdDbGeoCoordinateSystemTransformer_desc(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystemTransformer_desc(*args)

def OdDbGeoCoordinateSystemTransformer_createObject(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystemTransformer_createObject(*args)

def OdDbGeoCoordinateSystemTransformer_transformPoint(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystemTransformer_transformPoint(*args)

def OdDbGeoCoordinateSystemTransformer_transformPoints(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystemTransformer_transformPoints(*args)

def OdDbGeoCoordinateSystemTransformer_create(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystemTransformer_create(*args)

class OdDbCompoundObjectId(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbCompoundObjectId_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbCompoundObjectId_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbCompoundObjectId_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbCompoundObjectId

    def __eq__(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId___eq__(self, *args)

    def __ne__(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId___ne__(self, *args)

    def topId(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId_topId(self, *args)

    def leafId(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId_leafId(self, *args)

    def getFullPath(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId_getFullPath(self, *args)

    def getPath(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId_getPath(self, *args)

    def setEmpty(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId_setEmpty(self, *args)

    def set(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId_set(self, *args)

    def setFullPath(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId_setFullPath(self, *args)

    def isEmpty(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId_isEmpty(self, *args)

    def isValid(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId_isValid(self, *args)

    def isExternal(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId_isExternal(self, *args)

    def isSimpleObjectId(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId_isSimpleObjectId(self, *args)

    def getTransform(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId_getTransform(self, *args)

    def remap(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId_remap(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId_dwgOutFields(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId_dwgInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId_dxfOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbCompoundObjectId_dxfInFields(self, *args)

    @staticmethod
    def nullId(*args):
        return _ODA_Drawings.OdDbCompoundObjectId_nullId(*args)

# Register OdDbCompoundObjectId in _ODA_Drawings:
_ODA_Drawings.OdDbCompoundObjectId_swigregister(OdDbCompoundObjectId)

def OdDbCompoundObjectId_cast(*args):
    return _ODA_Drawings.OdDbCompoundObjectId_cast(*args)

def OdDbCompoundObjectId_desc(*args):
    return _ODA_Drawings.OdDbCompoundObjectId_desc(*args)

def OdDbCompoundObjectId_createObject(*args):
    return _ODA_Drawings.OdDbCompoundObjectId_createObject(*args)

def OdDbCompoundObjectId_nullId(*args):
    return _ODA_Drawings.OdDbCompoundObjectId_nullId(*args)

class OdDbParentTransformOfChildPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbParentTransformOfChildPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbParentTransformOfChildPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbParentTransformOfChildPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbParentTransformOfChildPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbParentTransformOfChildPE_createObject(*args)

    def getParentTransformOfChild(self, *args):
        return _ODA_Drawings.OdDbParentTransformOfChildPE_getParentTransformOfChild(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbParentTransformOfChildPE

# Register OdDbParentTransformOfChildPE in _ODA_Drawings:
_ODA_Drawings.OdDbParentTransformOfChildPE_swigregister(OdDbParentTransformOfChildPE)

def OdDbParentTransformOfChildPE_cast(*args):
    return _ODA_Drawings.OdDbParentTransformOfChildPE_cast(*args)

def OdDbParentTransformOfChildPE_desc(*args):
    return _ODA_Drawings.OdDbParentTransformOfChildPE_desc(*args)

def OdDbParentTransformOfChildPE_createObject(*args):
    return _ODA_Drawings.OdDbParentTransformOfChildPE_createObject(*args)

class OdDbDgnUnderlayItem(ODA_Kernel.OdDbUnderlayItem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDgnUnderlayItem_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDgnUnderlayItem_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDgnUnderlayItem_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDgnUnderlayItem_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDgnUnderlayItem_createObject(*args)

    def useMasterUnits(self, *args):
        return _ODA_Drawings.OdDbDgnUnderlayItem_useMasterUnits(self, *args)

    def setUseMasterUnits(self, *args):
        return _ODA_Drawings.OdDbDgnUnderlayItem_setUseMasterUnits(self, *args)

    def showRasterRef(self, *args):
        return _ODA_Drawings.OdDbDgnUnderlayItem_showRasterRef(self, *args)

    def setShowRasterRef(self, *args):
        return _ODA_Drawings.OdDbDgnUnderlayItem_setShowRasterRef(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDgnUnderlayItem

# Register OdDbDgnUnderlayItem in _ODA_Drawings:
_ODA_Drawings.OdDbDgnUnderlayItem_swigregister(OdDbDgnUnderlayItem)

def OdDbDgnUnderlayItem_cast(*args):
    return _ODA_Drawings.OdDbDgnUnderlayItem_cast(*args)

def OdDbDgnUnderlayItem_desc(*args):
    return _ODA_Drawings.OdDbDgnUnderlayItem_desc(*args)

def OdDbDgnUnderlayItem_createObject(*args):
    return _ODA_Drawings.OdDbDgnUnderlayItem_createObject(*args)

kXrfNotAnXref = _ODA_Drawings.kXrfNotAnXref
kXrfResolved = _ODA_Drawings.kXrfResolved
kXrfUnloaded = _ODA_Drawings.kXrfUnloaded
kXrfUnreferenced = _ODA_Drawings.kXrfUnreferenced
kXrfFileNotFound = _ODA_Drawings.kXrfFileNotFound
kXrfUnresolved = _ODA_Drawings.kXrfUnresolved
class OdDbXrefGraphNode(OdDbGraphNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbXrefGraphNode_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbXrefGraphNode_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbXrefGraphNode_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbXrefGraphNode_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbXrefGraphNode_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbXrefGraphNode

    def name(self, *args):
        return _ODA_Drawings.OdDbXrefGraphNode_name(self, *args)

    def blockId(self, *args):
        return _ODA_Drawings.OdDbXrefGraphNode_blockId(self, *args)

    def database(self, *args):
        return _ODA_Drawings.OdDbXrefGraphNode_database(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbXrefGraphNode_setName(self, *args)

    def setBlockId(self, *args):
        return _ODA_Drawings.OdDbXrefGraphNode_setBlockId(self, *args)

    def setDatabase(self, *args):
        return _ODA_Drawings.OdDbXrefGraphNode_setDatabase(self, *args)

    def isNested(self, *args):
        return _ODA_Drawings.OdDbXrefGraphNode_isNested(self, *args)

    def xrefStatus(self, *args):
        return _ODA_Drawings.OdDbXrefGraphNode_xrefStatus(self, *args)

    def setXrefStatus(self, *args):
        return _ODA_Drawings.OdDbXrefGraphNode_setXrefStatus(self, *args)

# Register OdDbXrefGraphNode in _ODA_Drawings:
_ODA_Drawings.OdDbXrefGraphNode_swigregister(OdDbXrefGraphNode)

def OdDbXrefGraphNode_cast(*args):
    return _ODA_Drawings.OdDbXrefGraphNode_cast(*args)

def OdDbXrefGraphNode_desc(*args):
    return _ODA_Drawings.OdDbXrefGraphNode_desc(*args)

def OdDbXrefGraphNode_createObject(*args):
    return _ODA_Drawings.OdDbXrefGraphNode_createObject(*args)

class OdDbXrefGraph(OdDbGraph):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbXrefGraph_swiginit(self, _ODA_Drawings.new_OdDbXrefGraph(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbXrefGraph

    def xrefNode(self, *args):
        return _ODA_Drawings.OdDbXrefGraph_xrefNode(self, *args)

    def hostDwg(self, *args):
        return _ODA_Drawings.OdDbXrefGraph_hostDwg(self, *args)

    def markUnresolvedTrees(self, *args):
        return _ODA_Drawings.OdDbXrefGraph_markUnresolvedTrees(self, *args)

    @staticmethod
    def getFrom(*args):
        return _ODA_Drawings.OdDbXrefGraph_getFrom(*args)

# Register OdDbXrefGraph in _ODA_Drawings:
_ODA_Drawings.OdDbXrefGraph_swigregister(OdDbXrefGraph)

def OdDbXrefGraph_getFrom(*args):
    return _ODA_Drawings.OdDbXrefGraph_getFrom(*args)

HATCH_PATTERN_NAME_LENGTH = _ODA_Drawings.HATCH_PATTERN_NAME_LENGTH
class OdDbHatch(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbHatch_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbHatch_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbHatch_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbHatch_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbHatch_createObject(*args)
    kDefault = _ODA_Drawings.OdDbHatch_kDefault
    kExternal = _ODA_Drawings.OdDbHatch_kExternal
    kPolyline = _ODA_Drawings.OdDbHatch_kPolyline
    kDerived = _ODA_Drawings.OdDbHatch_kDerived
    kTextbox = _ODA_Drawings.OdDbHatch_kTextbox
    kOutermost = _ODA_Drawings.OdDbHatch_kOutermost
    kNotClosed = _ODA_Drawings.OdDbHatch_kNotClosed
    kSelfIntersecting = _ODA_Drawings.OdDbHatch_kSelfIntersecting
    kTextIsland = _ODA_Drawings.OdDbHatch_kTextIsland
    kDuplicate = _ODA_Drawings.OdDbHatch_kDuplicate
    kIsAnnotative = _ODA_Drawings.OdDbHatch_kIsAnnotative
    kDoesNotSupportScale = _ODA_Drawings.OdDbHatch_kDoesNotSupportScale
    kForceAnnoAllVisible = _ODA_Drawings.OdDbHatch_kForceAnnoAllVisible
    kOrientToPaper = _ODA_Drawings.OdDbHatch_kOrientToPaper
    kIsAnnotativeBlock = _ODA_Drawings.OdDbHatch_kIsAnnotativeBlock
    kNone = _ODA_Drawings.OdDbHatch_kNone
    kLine = _ODA_Drawings.OdDbHatch_kLine
    kCirArc = _ODA_Drawings.OdDbHatch_kCirArc
    kEllArc = _ODA_Drawings.OdDbHatch_kEllArc
    kSpline = _ODA_Drawings.OdDbHatch_kSpline
    kUserDefined = _ODA_Drawings.OdDbHatch_kUserDefined
    kPreDefined = _ODA_Drawings.OdDbHatch_kPreDefined
    kCustomDefined = _ODA_Drawings.OdDbHatch_kCustomDefined
    kNormal = _ODA_Drawings.OdDbHatch_kNormal
    kOuter = _ODA_Drawings.OdDbHatch_kOuter
    kIgnore = _ODA_Drawings.OdDbHatch_kIgnore
    kHatchObject = _ODA_Drawings.OdDbHatch_kHatchObject
    kGradientObject = _ODA_Drawings.OdDbHatch_kGradientObject
    kPreDefinedGradient = _ODA_Drawings.OdDbHatch_kPreDefinedGradient
    kUserDefinedGradient = _ODA_Drawings.OdDbHatch_kUserDefinedGradient

    def elevation(self, *args):
        return _ODA_Drawings.OdDbHatch_elevation(self, *args)

    def setElevation(self, *args):
        return _ODA_Drawings.OdDbHatch_setElevation(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbHatch_normal(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDbHatch_setNormal(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbHatch_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbHatch_getPlane(self, *args)

    def numLoops(self, *args):
        return _ODA_Drawings.OdDbHatch_numLoops(self, *args)

    def loopTypeAt(self, *args):
        return _ODA_Drawings.OdDbHatch_loopTypeAt(self, *args)

    def getLoopAt(self, *args):
        return _ODA_Drawings.OdDbHatch_getLoopAt(self, *args)

    def appendLoop(self, *args):
        return _ODA_Drawings.OdDbHatch_appendLoop(self, *args)

    def appendOrderedLoop(self, *args):
        return _ODA_Drawings.OdDbHatch_appendOrderedLoop(self, *args)

    def insertLoopAt(self, *args):
        return _ODA_Drawings.OdDbHatch_insertLoopAt(self, *args)

    def removeLoopAt(self, *args):
        return _ODA_Drawings.OdDbHatch_removeLoopAt(self, *args)

    def associative(self, *args):
        return _ODA_Drawings.OdDbHatch_associative(self, *args)

    def setAssociative(self, *args):
        return _ODA_Drawings.OdDbHatch_setAssociative(self, *args)

    def getAssocObjIdsAt(self, *args):
        return _ODA_Drawings.OdDbHatch_getAssocObjIdsAt(self, *args)

    def getAssocObjIds(self, *args):
        return _ODA_Drawings.OdDbHatch_getAssocObjIds(self, *args)

    def setAssocObjIdsAt(self, *args):
        return _ODA_Drawings.OdDbHatch_setAssocObjIdsAt(self, *args)

    def removeAssocObjIds(self, *args):
        return _ODA_Drawings.OdDbHatch_removeAssocObjIds(self, *args)

    def patternType(self, *args):
        return _ODA_Drawings.OdDbHatch_patternType(self, *args)

    def isSolidFill(self, *args):
        return _ODA_Drawings.OdDbHatch_isSolidFill(self, *args)

    def patternName(self, *args):
        return _ODA_Drawings.OdDbHatch_patternName(self, *args)

    def setPattern(self, *args):
        return _ODA_Drawings.OdDbHatch_setPattern(self, *args)

    def patternAngle(self, *args):
        return _ODA_Drawings.OdDbHatch_patternAngle(self, *args)

    def setPatternAngle(self, *args):
        return _ODA_Drawings.OdDbHatch_setPatternAngle(self, *args)

    def patternSpace(self, *args):
        return _ODA_Drawings.OdDbHatch_patternSpace(self, *args)

    def setPatternSpace(self, *args):
        return _ODA_Drawings.OdDbHatch_setPatternSpace(self, *args)

    def patternScale(self, *args):
        return _ODA_Drawings.OdDbHatch_patternScale(self, *args)

    def setPatternScale(self, *args):
        return _ODA_Drawings.OdDbHatch_setPatternScale(self, *args)

    def patternDouble(self, *args):
        return _ODA_Drawings.OdDbHatch_patternDouble(self, *args)

    def setPatternDouble(self, *args):
        return _ODA_Drawings.OdDbHatch_setPatternDouble(self, *args)

    def numPatternDefinitions(self, *args):
        return _ODA_Drawings.OdDbHatch_numPatternDefinitions(self, *args)

    def getPatternDefinitionAt(self, *args):
        return _ODA_Drawings.OdDbHatch_getPatternDefinitionAt(self, *args)

    def regeneratePattern(self, *args):
        return _ODA_Drawings.OdDbHatch_regeneratePattern(self, *args)

    def hatchStyle(self, *args):
        return _ODA_Drawings.OdDbHatch_hatchStyle(self, *args)

    def setHatchStyle(self, *args):
        return _ODA_Drawings.OdDbHatch_setHatchStyle(self, *args)

    def numSeedPoints(self, *args):
        return _ODA_Drawings.OdDbHatch_numSeedPoints(self, *args)

    def getSeedPointAt(self, *args):
        return _ODA_Drawings.OdDbHatch_getSeedPointAt(self, *args)

    def setSeedPointAt(self, *args):
        return _ODA_Drawings.OdDbHatch_setSeedPointAt(self, *args)

    def appendSeedPoint(self, *args):
        return _ODA_Drawings.OdDbHatch_appendSeedPoint(self, *args)

    def removeSeedPointAt(self, *args):
        return _ODA_Drawings.OdDbHatch_removeSeedPointAt(self, *args)

    def pixelSize(self, *args):
        return _ODA_Drawings.OdDbHatch_pixelSize(self, *args)

    def setPixelSize(self, *args):
        return _ODA_Drawings.OdDbHatch_setPixelSize(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbHatch_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbHatch_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbHatch_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbHatch_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbHatch_subGetClassID(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbHatch_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbHatch_subViewportDraw(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbHatch_subTransformBy(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbHatch_subGetTransformedCopy(self, *args)

    def decomposeForSave(self, *args):
        return _ODA_Drawings.OdDbHatch_decomposeForSave(self, *args)

    def subSetDatabaseDefaults(self, *args):
        return _ODA_Drawings.OdDbHatch_subSetDatabaseDefaults(self, *args)

    def evaluateHatch(self, *args):
        return _ODA_Drawings.OdDbHatch_evaluateHatch(self, *args)

    def numHatchLines(self, *args):
        return _ODA_Drawings.OdDbHatch_numHatchLines(self, *args)

    def getHatchLineDataAt(self, *args):
        return _ODA_Drawings.OdDbHatch_getHatchLineDataAt(self, *args)

    def getHatchLinesData(self, *args):
        return _ODA_Drawings.OdDbHatch_getHatchLinesData(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbHatch_subExplode(self, *args)

    def openedForModify(self, *args):
        return _ODA_Drawings.OdDbHatch_openedForModify(self, *args)

    def modifiedGraphics(self, *args):
        return _ODA_Drawings.OdDbHatch_modifiedGraphics(self, *args)

    def hatchObjectType(self, *args):
        return _ODA_Drawings.OdDbHatch_hatchObjectType(self, *args)

    def setHatchObjectType(self, *args):
        return _ODA_Drawings.OdDbHatch_setHatchObjectType(self, *args)

    def isGradient(self, *args):
        return _ODA_Drawings.OdDbHatch_isGradient(self, *args)

    def isHatch(self, *args):
        return _ODA_Drawings.OdDbHatch_isHatch(self, *args)

    def gradientType(self, *args):
        return _ODA_Drawings.OdDbHatch_gradientType(self, *args)

    def gradientName(self, *args):
        return _ODA_Drawings.OdDbHatch_gradientName(self, *args)

    def setGradient(self, *args):
        return _ODA_Drawings.OdDbHatch_setGradient(self, *args)

    def gradientAngle(self, *args):
        return _ODA_Drawings.OdDbHatch_gradientAngle(self, *args)

    def setGradientAngle(self, *args):
        return _ODA_Drawings.OdDbHatch_setGradientAngle(self, *args)

    def getGradientColors(self, *args):
        return _ODA_Drawings.OdDbHatch_getGradientColors(self, *args)

    def setGradientColors(self, *args):
        return _ODA_Drawings.OdDbHatch_setGradientColors(self, *args)

    def getGradientOneColorMode(self, *args):
        return _ODA_Drawings.OdDbHatch_getGradientOneColorMode(self, *args)

    def setGradientOneColorMode(self, *args):
        return _ODA_Drawings.OdDbHatch_setGradientOneColorMode(self, *args)

    def getShadeTintValue(self, *args):
        return _ODA_Drawings.OdDbHatch_getShadeTintValue(self, *args)

    def setShadeTintValue(self, *args):
        return _ODA_Drawings.OdDbHatch_setShadeTintValue(self, *args)

    def gradientShift(self, *args):
        return _ODA_Drawings.OdDbHatch_gradientShift(self, *args)

    def setGradientShift(self, *args):
        return _ODA_Drawings.OdDbHatch_setGradientShift(self, *args)

    def evaluateGradientColorAt(self, *args):
        return _ODA_Drawings.OdDbHatch_evaluateGradientColorAt(self, *args)

    def appendToOwner(self, *args):
        return _ODA_Drawings.OdDbHatch_appendToOwner(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbHatch_subClose(self, *args)

    def setRawPattern(self, *args):
        return _ODA_Drawings.OdDbHatch_setRawPattern(self, *args)

    def getPattern(self, *args):
        return _ODA_Drawings.OdDbHatch_getPattern(self, *args)

    def getRawPattern(self, *args):
        return _ODA_Drawings.OdDbHatch_getRawPattern(self, *args)

    def setOriginPoint(self, *args):
        return _ODA_Drawings.OdDbHatch_setOriginPoint(self, *args)

    def originPoint(self, *args):
        return _ODA_Drawings.OdDbHatch_originPoint(self, *args)

    def explodeGeometry(self, *args):
        return _ODA_Drawings.OdDbHatch_explodeGeometry(self, *args)

    def getArea(self, *args):
        return _ODA_Drawings.OdDbHatch_getArea(self, *args)

    def getRegionArea(self, *args):
        return _ODA_Drawings.OdDbHatch_getRegionArea(self, *args)

    @staticmethod
    def makeClosedLoop(*args):
        return _ODA_Drawings.OdDbHatch_makeClosedLoop(*args)

    def markModifiedLoop(self, *args):
        return _ODA_Drawings.OdDbHatch_markModifiedLoop(self, *args)

    def unmarkModifiedLoop(self, *args):
        return _ODA_Drawings.OdDbHatch_unmarkModifiedLoop(self, *args)

    def getMarkedModifiedLoops(self, *args):
        return _ODA_Drawings.OdDbHatch_getMarkedModifiedLoops(self, *args)

    def clearMarkModifiedLoops(self, *args):
        return _ODA_Drawings.OdDbHatch_clearMarkModifiedLoops(self, *args)

    def updateMarkedLoops(self, *args):
        return _ODA_Drawings.OdDbHatch_updateMarkedLoops(self, *args)

    def setShadeTintValueAndColor2(self, *args):
        return _ODA_Drawings.OdDbHatch_setShadeTintValueAndColor2(self, *args)

    def subGetSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDbHatch_subGetSubentPathsAtGsMarker(self, *args)

    def subGetGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbHatch_subGetGsMarkersAtSubentPath(self, *args)

    def subSubentPtr(self, *args):
        return _ODA_Drawings.OdDbHatch_subSubentPtr(self, *args)

    def backgroundColor(self, *args):
        return _ODA_Drawings.OdDbHatch_backgroundColor(self, *args)

    def setBackgroundColor(self, *args):
        return _ODA_Drawings.OdDbHatch_setBackgroundColor(self, *args)

    def getEcs(self, *args):
        return _ODA_Drawings.OdDbHatch_getEcs(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbHatch

# Register OdDbHatch in _ODA_Drawings:
_ODA_Drawings.OdDbHatch_swigregister(OdDbHatch)

def OdDbHatch_cast(*args):
    return _ODA_Drawings.OdDbHatch_cast(*args)

def OdDbHatch_desc(*args):
    return _ODA_Drawings.OdDbHatch_desc(*args)

def OdDbHatch_createObject(*args):
    return _ODA_Drawings.OdDbHatch_createObject(*args)

def OdDbHatch_makeClosedLoop(*args):
    return _ODA_Drawings.OdDbHatch_makeClosedLoop(*args)


def oddbCreateEdgesFromEntity(*args):
    return _ODA_Drawings.oddbCreateEdgesFromEntity(*args)
class OdDbUnitsFormatter(ODA_Kernel.OdDbBaseUnitsFormatter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbUnitsFormatter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbUnitsFormatter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbUnitsFormatter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbUnitsFormatter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbUnitsFormatter_createObject(*args)

    @staticmethod
    def formatColor(*args):
        return _ODA_Drawings.OdDbUnitsFormatter_formatColor(*args)

    @staticmethod
    def unformatColor(*args):
        return _ODA_Drawings.OdDbUnitsFormatter_unformatColor(*args)

    def toUserAngle(self, *args):
        return _ODA_Drawings.OdDbUnitsFormatter_toUserAngle(self, *args)

    def fromUserAngle(self, *args):
        return _ODA_Drawings.OdDbUnitsFormatter_fromUserAngle(self, *args)

    def formatPoint(self, *args):
        return _ODA_Drawings.OdDbUnitsFormatter_formatPoint(self, *args)

    def unformatPoint(self, *args):
        return _ODA_Drawings.OdDbUnitsFormatter_unformatPoint(self, *args)

    def toUCS(self, *args):
        return _ODA_Drawings.OdDbUnitsFormatter_toUCS(self, *args)

    def fromUCS(self, *args):
        return _ODA_Drawings.OdDbUnitsFormatter_fromUCS(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbUnitsFormatter

# Register OdDbUnitsFormatter in _ODA_Drawings:
_ODA_Drawings.OdDbUnitsFormatter_swigregister(OdDbUnitsFormatter)

def OdDbUnitsFormatter_cast(*args):
    return _ODA_Drawings.OdDbUnitsFormatter_cast(*args)

def OdDbUnitsFormatter_desc(*args):
    return _ODA_Drawings.OdDbUnitsFormatter_desc(*args)

def OdDbUnitsFormatter_createObject(*args):
    return _ODA_Drawings.OdDbUnitsFormatter_createObject(*args)

def OdDbUnitsFormatter_formatColor(*args):
    return _ODA_Drawings.OdDbUnitsFormatter_formatColor(*args)

def OdDbUnitsFormatter_unformatColor(*args):
    return _ODA_Drawings.OdDbUnitsFormatter_unformatColor(*args)

class OdEdSSetTracker(ODA_Kernel.OdSSetTracker):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdEdSSetTracker_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdEdSSetTracker_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdEdSSetTracker_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdEdSSetTracker_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdEdSSetTracker_createObject(*args)

    def append(self, *args):
        return _ODA_Drawings.OdEdSSetTracker_append(self, *args)

    def remove(self, *args):
        return _ODA_Drawings.OdEdSSetTracker_remove(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdEdSSetTracker

# Register OdEdSSetTracker in _ODA_Drawings:
_ODA_Drawings.OdEdSSetTracker_swigregister(OdEdSSetTracker)

def OdEdSSetTracker_cast(*args):
    return _ODA_Drawings.OdEdSSetTracker_cast(*args)

def OdEdSSetTracker_desc(*args):
    return _ODA_Drawings.OdEdSSetTracker_desc(*args)

def OdEdSSetTracker_createObject(*args):
    return _ODA_Drawings.OdEdSSetTracker_createObject(*args)

class OdDbUserIO(ODA_Kernel.OdEdBaseUserIO):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbUserIO_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbUserIO_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbUserIO_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbUserIO_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbUserIO_createObject(*args)

    def setPickfirst(self, *args):
        return _ODA_Drawings.OdDbUserIO_setPickfirst(self, *args)

    def pickfirst(self, *args):
        return _ODA_Drawings.OdDbUserIO_pickfirst(self, *args)

    def getColor(self, *args):
        return _ODA_Drawings.OdDbUserIO_getColor(self, *args)

    def select(self, *args):
        return _ODA_Drawings.OdDbUserIO_select(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbUserIO

# Register OdDbUserIO in _ODA_Drawings:
_ODA_Drawings.OdDbUserIO_swigregister(OdDbUserIO)

def OdDbUserIO_cast(*args):
    return _ODA_Drawings.OdDbUserIO_cast(*args)

def OdDbUserIO_desc(*args):
    return _ODA_Drawings.OdDbUserIO_desc(*args)

def OdDbUserIO_createObject(*args):
    return _ODA_Drawings.OdDbUserIO_createObject(*args)

kStandard = _ODA_Drawings.kStandard
kGranite = _ODA_Drawings.kGranite
kMarble = _ODA_Drawings.kMarble
kWood = _ODA_Drawings.kWood
kAmbient = _ODA_Drawings.kAmbient
kDiffuse = _ODA_Drawings.kDiffuse
kSpecular = _ODA_Drawings.kSpecular
kTransparency = _ODA_Drawings.kTransparency
kRoughness = _ODA_Drawings.kRoughness
kBumpMap = _ODA_Drawings.kBumpMap
kReflectionProp = _ODA_Drawings.kReflectionProp
kRefraction = _ODA_Drawings.kRefraction
kRndSimple = _ODA_Drawings.kRndSimple
kRndPhotoReal = _ODA_Drawings.kRndPhotoReal
kRndRaytrace = _ODA_Drawings.kRndRaytrace
kDestViewport = _ODA_Drawings.kDestViewport
kDestWindow = _ODA_Drawings.kDestWindow
kDestFile = _ODA_Drawings.kDestFile
kGouraud = _ODA_Drawings.kGouraud
kPhong = _ODA_Drawings.kPhong
kAntiAliasNone = _ODA_Drawings.kAntiAliasNone
kAntiAliasMinimal = _ODA_Drawings.kAntiAliasMinimal
kAntiAliasLow = _ODA_Drawings.kAntiAliasLow
kAntiAliasMedium = _ODA_Drawings.kAntiAliasMedium
kAntiAliasHigh = _ODA_Drawings.kAntiAliasHigh
kTMapSampPoint = _ODA_Drawings.kTMapSampPoint
kTMapSampLinear = _ODA_Drawings.kTMapSampLinear
kTMapSampMipMap = _ODA_Drawings.kTMapSampMipMap
kBackgroundSolid = _ODA_Drawings.kBackgroundSolid
kBackgroundGradient = _ODA_Drawings.kBackgroundGradient
kBackgroundImage = _ODA_Drawings.kBackgroundImage
kBackgroundMerge = _ODA_Drawings.kBackgroundMerge
kRndPref = _ODA_Drawings.kRndPref
kRndFullOpt = _ODA_Drawings.kRndFullOpt
kRndQuickOpt = _ODA_Drawings.kRndQuickOpt
kRndScanlOpt = _ODA_Drawings.kRndScanlOpt
kRndRaytrOpt = _ODA_Drawings.kRndRaytrOpt
kRndRFileOpt = _ODA_Drawings.kRndRFileOpt
kRndFogOpt = _ODA_Drawings.kRndFogOpt
kRndBGOpt = _ODA_Drawings.kRndBGOpt
kRndOptAmount = _ODA_Drawings.kRndOptAmount
kPlanar = _ODA_Drawings.kPlanar
kBox = _ODA_Drawings.kBox
kCylinder = _ODA_Drawings.kCylinder
kSphere = _ODA_Drawings.kSphere
kTmDefault = _ODA_Drawings.kTmDefault
kTmTile = _ODA_Drawings.kTmTile
kTmCrop = _ODA_Drawings.kTmCrop
kTmClamp = _ODA_Drawings.kTmClamp
kSetuvPlanar = _ODA_Drawings.kSetuvPlanar
kSetuvCylindrical = _ODA_Drawings.kSetuvCylindrical
kSetuvSpherical = _ODA_Drawings.kSetuvSpherical
kSetuvSolid = _ODA_Drawings.kSetuvSolid
class OdAveBitmap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Drawings.delete_OdAveBitmap

    def blendFactor(self, *args):
        return _ODA_Drawings.OdAveBitmap_blendFactor(self, *args)

    def source(self, *args):
        return _ODA_Drawings.OdAveBitmap_source(self, *args)

    def scaleU(self, *args):
        return _ODA_Drawings.OdAveBitmap_scaleU(self, *args)

    def scaleV(self, *args):
        return _ODA_Drawings.OdAveBitmap_scaleV(self, *args)

    def offsetU(self, *args):
        return _ODA_Drawings.OdAveBitmap_offsetU(self, *args)

    def offsetV(self, *args):
        return _ODA_Drawings.OdAveBitmap_offsetV(self, *args)

    def tileMethod(self, *args):
        return _ODA_Drawings.OdAveBitmap_tileMethod(self, *args)

    def useAutoAxis(self, *args):
        return _ODA_Drawings.OdAveBitmap_useAutoAxis(self, *args)

    def fitToObject(self, *args):
        return _ODA_Drawings.OdAveBitmap_fitToObject(self, *args)

    def setBlendFactor(self, *args):
        return _ODA_Drawings.OdAveBitmap_setBlendFactor(self, *args)

    def setSource(self, *args):
        return _ODA_Drawings.OdAveBitmap_setSource(self, *args)

    def setScaleU(self, *args):
        return _ODA_Drawings.OdAveBitmap_setScaleU(self, *args)

    def setScaleV(self, *args):
        return _ODA_Drawings.OdAveBitmap_setScaleV(self, *args)

    def setOffsetU(self, *args):
        return _ODA_Drawings.OdAveBitmap_setOffsetU(self, *args)

    def setOffsetV(self, *args):
        return _ODA_Drawings.OdAveBitmap_setOffsetV(self, *args)

    def setTileMethod(self, *args):
        return _ODA_Drawings.OdAveBitmap_setTileMethod(self, *args)

    def setUseAutoAxis(self, *args):
        return _ODA_Drawings.OdAveBitmap_setUseAutoAxis(self, *args)

    def setFitToObject(self, *args):
        return _ODA_Drawings.OdAveBitmap_setFitToObject(self, *args)

# Register OdAveBitmap in _ODA_Drawings:
_ODA_Drawings.OdAveBitmap_swigregister(OdAveBitmap)

class OdTfSchemaManager(ODA_Kernel.OdTfSchemaManagerInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdTfSchemaManager_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdTfSchemaManager_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdTfSchemaManager_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdTfSchemaManager_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdTfSchemaManager_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdTfSchemaManager

    def registerSchema(self, *args):
        return _ODA_Drawings.OdTfSchemaManager_registerSchema(self, *args)

    def convertSchema(self, *args):
        return _ODA_Drawings.OdTfSchemaManager_convertSchema(self, *args)

    def setAppServices(self, *args):
        return _ODA_Drawings.OdTfSchemaManager_setAppServices(self, *args)

    def unloadSchema(self, *args):
        return _ODA_Drawings.OdTfSchemaManager_unloadSchema(self, *args)

    def getNamesRegisteredSchemes(self, *args):
        return _ODA_Drawings.OdTfSchemaManager_getNamesRegisteredSchemes(self, *args)

# Register OdTfSchemaManager in _ODA_Drawings:
_ODA_Drawings.OdTfSchemaManager_swigregister(OdTfSchemaManager)

def OdTfSchemaManager_cast(*args):
    return _ODA_Drawings.OdTfSchemaManager_cast(*args)

def OdTfSchemaManager_desc(*args):
    return _ODA_Drawings.OdTfSchemaManager_desc(*args)

def OdTfSchemaManager_createObject(*args):
    return _ODA_Drawings.OdTfSchemaManager_createObject(*args)


def odTfInitialize(*args):
    return _ODA_Drawings.odTfInitialize(*args)

def odrxRegisterSchema(*args):
    return _ODA_Drawings.odrxRegisterSchema(*args)

def odrxConvertSchema(*args):
    return _ODA_Drawings.odrxConvertSchema(*args)
class OdDbBlockTableIterator(OdDbSymbolTableIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockTableIterator_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockTableIterator_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockTableIterator_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockTableIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockTableIterator_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockTableIterator

# Register OdDbBlockTableIterator in _ODA_Drawings:
_ODA_Drawings.OdDbBlockTableIterator_swigregister(OdDbBlockTableIterator)

def OdDbBlockTableIterator_cast(*args):
    return _ODA_Drawings.OdDbBlockTableIterator_cast(*args)

def OdDbBlockTableIterator_desc(*args):
    return _ODA_Drawings.OdDbBlockTableIterator_desc(*args)

def OdDbBlockTableIterator_createObject(*args):
    return _ODA_Drawings.OdDbBlockTableIterator_createObject(*args)

class OdDbBlockTable(OdDbSymbolTable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockTable_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockTable_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockTable_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockTable_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockTable_createObject(*args)

    def getAt(self, *args):
        return _ODA_Drawings.OdDbBlockTable_getAt(self, *args)

    def has(self, *args):
        return _ODA_Drawings.OdDbBlockTable_has(self, *args)

    def newIterator(self, *args):
        return _ODA_Drawings.OdDbBlockTable_newIterator(self, *args)

    def add(self, *args):
        return _ODA_Drawings.OdDbBlockTable_add(self, *args)

    def getModelSpaceId(self, *args):
        return _ODA_Drawings.OdDbBlockTable_getModelSpaceId(self, *args)

    def getPaperSpaceId(self, *args):
        return _ODA_Drawings.OdDbBlockTable_getPaperSpaceId(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockTable_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockTable_dwgOutFields(self, *args)

    def dxfIn(self, *args):
        return _ODA_Drawings.OdDbBlockTable_dxfIn(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbBlockTable_subGetClassID(self, *args)

    def applyPartialUndo(self, *args):
        return _ODA_Drawings.OdDbBlockTable_applyPartialUndo(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockTable

# Register OdDbBlockTable in _ODA_Drawings:
_ODA_Drawings.OdDbBlockTable_swigregister(OdDbBlockTable)

def OdDbBlockTable_cast(*args):
    return _ODA_Drawings.OdDbBlockTable_cast(*args)

def OdDbBlockTable_desc(*args):
    return _ODA_Drawings.OdDbBlockTable_desc(*args)

def OdDbBlockTable_createObject(*args):
    return _ODA_Drawings.OdDbBlockTable_createObject(*args)

class OdDbTextStyleTable(OdDbSymbolTable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbTextStyleTable_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbTextStyleTable_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbTextStyleTable_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbTextStyleTable_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbTextStyleTable_createObject(*args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbTextStyleTable_subGetClassID(self, *args)

    def add(self, *args):
        return _ODA_Drawings.OdDbTextStyleTable_add(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbTextStyleTable

# Register OdDbTextStyleTable in _ODA_Drawings:
_ODA_Drawings.OdDbTextStyleTable_swigregister(OdDbTextStyleTable)

def OdDbTextStyleTable_cast(*args):
    return _ODA_Drawings.OdDbTextStyleTable_cast(*args)

def OdDbTextStyleTable_desc(*args):
    return _ODA_Drawings.OdDbTextStyleTable_desc(*args)

def OdDbTextStyleTable_createObject(*args):
    return _ODA_Drawings.OdDbTextStyleTable_createObject(*args)

class OdDbDimStyleTable(OdDbSymbolTable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDimStyleTable_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDimStyleTable_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDimStyleTable_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDimStyleTable_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDimStyleTable_createObject(*args)

    def add(self, *args):
        return _ODA_Drawings.OdDbDimStyleTable_add(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbDimStyleTable_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbDimStyleTable_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbDimStyleTable_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbDimStyleTable_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbDimStyleTable_subGetClassID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDimStyleTable

# Register OdDbDimStyleTable in _ODA_Drawings:
_ODA_Drawings.OdDbDimStyleTable_swigregister(OdDbDimStyleTable)

def OdDbDimStyleTable_cast(*args):
    return _ODA_Drawings.OdDbDimStyleTable_cast(*args)

def OdDbDimStyleTable_desc(*args):
    return _ODA_Drawings.OdDbDimStyleTable_desc(*args)

def OdDbDimStyleTable_createObject(*args):
    return _ODA_Drawings.OdDbDimStyleTable_createObject(*args)

class OdDbViewTable(OdDbAbstractViewTable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewTable_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewTable_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewTable_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewTable_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewTable_createObject(*args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbViewTable_subGetClassID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewTable

# Register OdDbViewTable in _ODA_Drawings:
_ODA_Drawings.OdDbViewTable_swigregister(OdDbViewTable)

def OdDbViewTable_cast(*args):
    return _ODA_Drawings.OdDbViewTable_cast(*args)

def OdDbViewTable_desc(*args):
    return _ODA_Drawings.OdDbViewTable_desc(*args)

def OdDbViewTable_createObject(*args):
    return _ODA_Drawings.OdDbViewTable_createObject(*args)

class OdDbViewTableRecord(OdDbAbstractViewTableRecord):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewTableRecord_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewTableRecord_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewTableRecord_createObject(*args)

    def isPaperspaceView(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_isPaperspaceView(self, *args)

    def setIsPaperspaceView(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_setIsPaperspaceView(self, *args)

    def isUcsAssociatedToView(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_isUcsAssociatedToView(self, *args)

    def disassociateUcsFromView(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_disassociateUcsFromView(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_dxfOutFields_R12(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_subGetClassID(self, *args)

    def getCategoryName(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_getCategoryName(self, *args)

    def setCategoryName(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_setCategoryName(self, *args)

    def getLayerState(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_getLayerState(self, *args)

    def setLayerState(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_setLayerState(self, *args)

    def getLayout(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_getLayout(self, *args)

    def setLayout(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_setLayout(self, *args)

    def isViewAssociatedToViewport(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_isViewAssociatedToViewport(self, *args)

    def setViewAssociatedToViewport(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_setViewAssociatedToViewport(self, *args)

    def getThumbnail(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_getThumbnail(self, *args)

    def setThumbnail(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_setThumbnail(self, *args)

    def isCameraPlottable(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_isCameraPlottable(self, *args)

    def setIsCameraPlottable(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_setIsCameraPlottable(self, *args)

    def camera(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_camera(self, *args)

    def setCamera(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_setCamera(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_subClose(self, *args)

    def subSwapIdWith(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_subSwapIdWith(self, *args)

    def liveSection(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_liveSection(self, *args)

    def setLiveSection(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_setLiveSection(self, *args)

    def setAnnotationScale(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_setAnnotationScale(self, *args)

    def annotationScale(self, *args):
        return _ODA_Drawings.OdDbViewTableRecord_annotationScale(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewTableRecord

# Register OdDbViewTableRecord in _ODA_Drawings:
_ODA_Drawings.OdDbViewTableRecord_swigregister(OdDbViewTableRecord)

def OdDbViewTableRecord_cast(*args):
    return _ODA_Drawings.OdDbViewTableRecord_cast(*args)

def OdDbViewTableRecord_desc(*args):
    return _ODA_Drawings.OdDbViewTableRecord_desc(*args)

def OdDbViewTableRecord_createObject(*args):
    return _ODA_Drawings.OdDbViewTableRecord_createObject(*args)

class OdDbViewportTable(OdDbAbstractViewTable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewportTable_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewportTable_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewportTable_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewportTable_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewportTable_createObject(*args)

    def SetActiveViewport(self, *args):
        return _ODA_Drawings.OdDbViewportTable_SetActiveViewport(self, *args)

    def getActiveViewportId(self, *args):
        return _ODA_Drawings.OdDbViewportTable_getActiveViewportId(self, *args)

    def DeleteConfiguration(self, *args):
        return _ODA_Drawings.OdDbViewportTable_DeleteConfiguration(self, *args)

    def add(self, *args):
        return _ODA_Drawings.OdDbViewportTable_add(self, *args)

    def dxfIn(self, *args):
        return _ODA_Drawings.OdDbViewportTable_dxfIn(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbViewportTable_subGetClassID(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbViewportTable_subClose(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewportTable

# Register OdDbViewportTable in _ODA_Drawings:
_ODA_Drawings.OdDbViewportTable_swigregister(OdDbViewportTable)

def OdDbViewportTable_cast(*args):
    return _ODA_Drawings.OdDbViewportTable_cast(*args)

def OdDbViewportTable_desc(*args):
    return _ODA_Drawings.OdDbViewportTable_desc(*args)

def OdDbViewportTable_createObject(*args):
    return _ODA_Drawings.OdDbViewportTable_createObject(*args)

class OdDbViewportTableRecord(OdDbAbstractViewTableRecord):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewportTableRecord_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewportTableRecord_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewportTableRecord_createObject(*args)

    def lowerLeftCorner(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_lowerLeftCorner(self, *args)

    def setLowerLeftCorner(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setLowerLeftCorner(self, *args)

    def upperRightCorner(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_upperRightCorner(self, *args)

    def setUpperRightCorner(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setUpperRightCorner(self, *args)

    def ucsFollowMode(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_ucsFollowMode(self, *args)

    def setUcsFollowMode(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setUcsFollowMode(self, *args)

    def circleSides(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_circleSides(self, *args)

    def setCircleSides(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setCircleSides(self, *args)

    def iconEnabled(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_iconEnabled(self, *args)

    def setIconEnabled(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setIconEnabled(self, *args)

    def iconAtOrigin(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_iconAtOrigin(self, *args)

    def setIconAtOrigin(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setIconAtOrigin(self, *args)

    def gridEnabled(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_gridEnabled(self, *args)

    def setGridEnabled(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setGridEnabled(self, *args)

    def gridIncrements(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_gridIncrements(self, *args)

    def setGridIncrements(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setGridIncrements(self, *args)

    def snapEnabled(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_snapEnabled(self, *args)

    def setSnapEnabled(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setSnapEnabled(self, *args)

    def isometricSnapEnabled(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_isometricSnapEnabled(self, *args)

    def setIsometricSnapEnabled(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setIsometricSnapEnabled(self, *args)

    def snapPair(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_snapPair(self, *args)

    def setSnapPair(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setSnapPair(self, *args)

    def snapAngle(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_snapAngle(self, *args)

    def setSnapAngle(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setSnapAngle(self, *args)

    def snapBase(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_snapBase(self, *args)

    def setSnapBase(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setSnapBase(self, *args)

    def snapIncrements(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_snapIncrements(self, *args)

    def setSnapIncrements(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setSnapIncrements(self, *args)

    def isUcsSavedWithViewport(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_isUcsSavedWithViewport(self, *args)

    def setUcsPerViewport(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setUcsPerViewport(self, *args)

    def fastZoomsEnabled(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_fastZoomsEnabled(self, *args)

    def setFastZoomsEnabled(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setFastZoomsEnabled(self, *args)

    def isGridBoundToLimits(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_isGridBoundToLimits(self, *args)

    def setGridBoundToLimits(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setGridBoundToLimits(self, *args)

    def isGridAdaptive(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_isGridAdaptive(self, *args)

    def setGridAdaptive(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setGridAdaptive(self, *args)

    def isGridSubdivisionRestricted(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_isGridSubdivisionRestricted(self, *args)

    def setGridSubdivisionRestricted(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setGridSubdivisionRestricted(self, *args)

    def isGridFollow(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_isGridFollow(self, *args)

    def setGridFollow(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setGridFollow(self, *args)

    def gridMajor(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_gridMajor(self, *args)

    def setGridMajor(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setGridMajor(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_dxfOutFields_R12(self, *args)

    def gsView(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_gsView(self, *args)

    def setGsView(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_setGsView(self, *args)

    def drawable(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_drawable(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_subGetClassID(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_copyFrom(self, *args)

    def zoomExtents(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_zoomExtents(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbViewportTableRecord_subClose(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewportTableRecord

# Register OdDbViewportTableRecord in _ODA_Drawings:
_ODA_Drawings.OdDbViewportTableRecord_swigregister(OdDbViewportTableRecord)

def OdDbViewportTableRecord_cast(*args):
    return _ODA_Drawings.OdDbViewportTableRecord_cast(*args)

def OdDbViewportTableRecord_desc(*args):
    return _ODA_Drawings.OdDbViewportTableRecord_desc(*args)

def OdDbViewportTableRecord_createObject(*args):
    return _ODA_Drawings.OdDbViewportTableRecord_createObject(*args)

class OdDbLinetypeTableIterator(OdDbSymbolTableIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLinetypeTableIterator_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLinetypeTableIterator_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableIterator_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLinetypeTableIterator_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLinetypeTableIterator

# Register OdDbLinetypeTableIterator in _ODA_Drawings:
_ODA_Drawings.OdDbLinetypeTableIterator_swigregister(OdDbLinetypeTableIterator)

def OdDbLinetypeTableIterator_cast(*args):
    return _ODA_Drawings.OdDbLinetypeTableIterator_cast(*args)

def OdDbLinetypeTableIterator_desc(*args):
    return _ODA_Drawings.OdDbLinetypeTableIterator_desc(*args)

def OdDbLinetypeTableIterator_createObject(*args):
    return _ODA_Drawings.OdDbLinetypeTableIterator_createObject(*args)

class OdDbLinetypeTable(OdDbSymbolTable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLinetypeTable_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLinetypeTable_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLinetypeTable_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLinetypeTable_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLinetypeTable_createObject(*args)

    def getAt(self, *args):
        return _ODA_Drawings.OdDbLinetypeTable_getAt(self, *args)

    def has(self, *args):
        return _ODA_Drawings.OdDbLinetypeTable_has(self, *args)

    def add(self, *args):
        return _ODA_Drawings.OdDbLinetypeTable_add(self, *args)

    def newIterator(self, *args):
        return _ODA_Drawings.OdDbLinetypeTable_newIterator(self, *args)

    def getLinetypeByLayerId(self, *args):
        return _ODA_Drawings.OdDbLinetypeTable_getLinetypeByLayerId(self, *args)

    def getLinetypeByBlockId(self, *args):
        return _ODA_Drawings.OdDbLinetypeTable_getLinetypeByBlockId(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbLinetypeTable_subGetClassID(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbLinetypeTable_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbLinetypeTable_dwgOutFields(self, *args)

    def dxfOut(self, *args):
        return _ODA_Drawings.OdDbLinetypeTable_dxfOut(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLinetypeTable

# Register OdDbLinetypeTable in _ODA_Drawings:
_ODA_Drawings.OdDbLinetypeTable_swigregister(OdDbLinetypeTable)

def OdDbLinetypeTable_cast(*args):
    return _ODA_Drawings.OdDbLinetypeTable_cast(*args)

def OdDbLinetypeTable_desc(*args):
    return _ODA_Drawings.OdDbLinetypeTable_desc(*args)

def OdDbLinetypeTable_createObject(*args):
    return _ODA_Drawings.OdDbLinetypeTable_createObject(*args)

class OdDbUCSTable(OdDbSymbolTable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbUCSTable_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbUCSTable_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbUCSTable_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbUCSTable_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbUCSTable_createObject(*args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbUCSTable_subGetClassID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbUCSTable

# Register OdDbUCSTable in _ODA_Drawings:
_ODA_Drawings.OdDbUCSTable_swigregister(OdDbUCSTable)

def OdDbUCSTable_cast(*args):
    return _ODA_Drawings.OdDbUCSTable_cast(*args)

def OdDbUCSTable_desc(*args):
    return _ODA_Drawings.OdDbUCSTable_desc(*args)

def OdDbUCSTable_createObject(*args):
    return _ODA_Drawings.OdDbUCSTable_createObject(*args)

class OdDbUCSTableRecord(OdDbSymbolTableRecord):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbUCSTableRecord_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbUCSTableRecord_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbUCSTableRecord_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbUCSTableRecord_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbUCSTableRecord_createObject(*args)

    def origin(self, *args):
        return _ODA_Drawings.OdDbUCSTableRecord_origin(self, *args)

    def setOrigin(self, *args):
        return _ODA_Drawings.OdDbUCSTableRecord_setOrigin(self, *args)

    def xAxis(self, *args):
        return _ODA_Drawings.OdDbUCSTableRecord_xAxis(self, *args)

    def setXAxis(self, *args):
        return _ODA_Drawings.OdDbUCSTableRecord_setXAxis(self, *args)

    def yAxis(self, *args):
        return _ODA_Drawings.OdDbUCSTableRecord_yAxis(self, *args)

    def setYAxis(self, *args):
        return _ODA_Drawings.OdDbUCSTableRecord_setYAxis(self, *args)

    def ucsBaseOrigin(self, *args):
        return _ODA_Drawings.OdDbUCSTableRecord_ucsBaseOrigin(self, *args)

    def setUcsBaseOrigin(self, *args):
        return _ODA_Drawings.OdDbUCSTableRecord_setUcsBaseOrigin(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbUCSTableRecord_subGetClassID(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbUCSTableRecord_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbUCSTableRecord_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbUCSTableRecord_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbUCSTableRecord_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbUCSTableRecord_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbUCSTableRecord_dxfOutFields_R12(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbUCSTableRecord

# Register OdDbUCSTableRecord in _ODA_Drawings:
_ODA_Drawings.OdDbUCSTableRecord_swigregister(OdDbUCSTableRecord)

def OdDbUCSTableRecord_cast(*args):
    return _ODA_Drawings.OdDbUCSTableRecord_cast(*args)

def OdDbUCSTableRecord_desc(*args):
    return _ODA_Drawings.OdDbUCSTableRecord_desc(*args)

def OdDbUCSTableRecord_createObject(*args):
    return _ODA_Drawings.OdDbUCSTableRecord_createObject(*args)

class OdDbRegAppTable(OdDbSymbolTable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRegAppTable_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRegAppTable_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRegAppTable_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRegAppTable_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRegAppTable_createObject(*args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbRegAppTable_subGetClassID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRegAppTable

# Register OdDbRegAppTable in _ODA_Drawings:
_ODA_Drawings.OdDbRegAppTable_swigregister(OdDbRegAppTable)

def OdDbRegAppTable_cast(*args):
    return _ODA_Drawings.OdDbRegAppTable_cast(*args)

def OdDbRegAppTable_desc(*args):
    return _ODA_Drawings.OdDbRegAppTable_desc(*args)

def OdDbRegAppTable_createObject(*args):
    return _ODA_Drawings.OdDbRegAppTable_createObject(*args)

class OdDbRegAppTableRecord(OdDbSymbolTableRecord):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRegAppTableRecord_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRegAppTableRecord_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRegAppTableRecord_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRegAppTableRecord_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRegAppTableRecord_createObject(*args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbRegAppTableRecord_subGetClassID(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbRegAppTableRecord_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbRegAppTableRecord_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbRegAppTableRecord_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbRegAppTableRecord_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbRegAppTableRecord_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbRegAppTableRecord_dxfOutFields_R12(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbRegAppTableRecord_subErase(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRegAppTableRecord

# Register OdDbRegAppTableRecord in _ODA_Drawings:
_ODA_Drawings.OdDbRegAppTableRecord_swigregister(OdDbRegAppTableRecord)

def OdDbRegAppTableRecord_cast(*args):
    return _ODA_Drawings.OdDbRegAppTableRecord_cast(*args)

def OdDbRegAppTableRecord_desc(*args):
    return _ODA_Drawings.OdDbRegAppTableRecord_desc(*args)

def OdDbRegAppTableRecord_createObject(*args):
    return _ODA_Drawings.OdDbRegAppTableRecord_createObject(*args)

class OdDbLayerTable(OdDbSymbolTable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLayerTable_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLayerTable_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLayerTable_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLayerTable_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLayerTable_createObject(*args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbLayerTable_subGetClassID(self, *args)

    def generateUsageData(self, *args):
        return _ODA_Drawings.OdDbLayerTable_generateUsageData(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLayerTable

# Register OdDbLayerTable in _ODA_Drawings:
_ODA_Drawings.OdDbLayerTable_swigregister(OdDbLayerTable)

def OdDbLayerTable_cast(*args):
    return _ODA_Drawings.OdDbLayerTable_cast(*args)

def OdDbLayerTable_desc(*args):
    return _ODA_Drawings.OdDbLayerTable_desc(*args)

def OdDbLayerTable_createObject(*args):
    return _ODA_Drawings.OdDbLayerTable_createObject(*args)

class OdDbLayerTableRecord(OdDbSymbolTableRecord):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLayerTableRecord_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLayerTableRecord_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLayerTableRecord_createObject(*args)

    def isFrozen(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_isFrozen(self, *args)

    def setIsFrozen(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_setIsFrozen(self, *args)

    def isOff(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_isOff(self, *args)

    def setIsOff(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_setIsOff(self, *args)

    def VPDFLT(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_VPDFLT(self, *args)

    def setVPDFLT(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_setVPDFLT(self, *args)

    def isLocked(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_isLocked(self, *args)

    def setIsLocked(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_setIsLocked(self, *args)

    def isPlottable(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_isPlottable(self, *args)

    def setIsPlottable(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_setIsPlottable(self, *args)

    @staticmethod
    def isHidden(*args):
        return _ODA_Drawings.OdDbLayerTableRecord_isHidden(*args)

    def setIsHidden(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_setIsHidden(self, *args)

    @staticmethod
    def isReconciled(*args):
        return _ODA_Drawings.OdDbLayerTableRecord_isReconciled(*args)

    def setIsReconciled(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_setIsReconciled(self, *args)

    def transparency(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_transparency(self, *args)

    def setTransparency(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_setTransparency(self, *args)

    def color(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_color(self, *args)

    def setColor(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_setColor(self, *args)

    def colorIndex(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_colorIndex(self, *args)

    def setColorIndex(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_setColorIndex(self, *args)

    def lineWeight(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_lineWeight(self, *args)

    def setLineWeight(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_setLineWeight(self, *args)

    def linetypeObjectId(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_linetypeObjectId(self, *args)

    def setLinetypeObjectId(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_setLinetypeObjectId(self, *args)

    def materialId(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_materialId(self, *args)

    def setMaterialId(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_setMaterialId(self, *args)

    def plotStyleName(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_plotStyleName(self, *args)

    def plotStyleNameId(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_plotStyleNameId(self, *args)

    def setPlotStyleName(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_setPlotStyleName(self, *args)

    def description(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_description(self, *args)

    def setDescription(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_setDescription(self, *args)

    def isInUse(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_isInUse(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_dxfOutFields_R12(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_subGetClassID(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_subErase(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_subSetAttributes(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_subViewportDraw(self, *args)

    def drawable(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_drawable(self, *args)

    def removeAllOverrides(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_removeAllOverrides(self, *args)

    def removeColorOverride(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_removeColorOverride(self, *args)

    def removeLinetypeOverride(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_removeLinetypeOverride(self, *args)

    def removeLineWeightOverride(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_removeLineWeightOverride(self, *args)

    def removePlotStyleOverride(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_removePlotStyleOverride(self, *args)

    def removeTransparencyOverride(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_removeTransparencyOverride(self, *args)

    def removeViewportOverrides(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_removeViewportOverrides(self, *args)

    def hasOverrides(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_hasOverrides(self, *args)

    def hasAnyOverrides(self, *args):
        return _ODA_Drawings.OdDbLayerTableRecord_hasAnyOverrides(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLayerTableRecord

# Register OdDbLayerTableRecord in _ODA_Drawings:
_ODA_Drawings.OdDbLayerTableRecord_swigregister(OdDbLayerTableRecord)

def OdDbLayerTableRecord_cast(*args):
    return _ODA_Drawings.OdDbLayerTableRecord_cast(*args)

def OdDbLayerTableRecord_desc(*args):
    return _ODA_Drawings.OdDbLayerTableRecord_desc(*args)

def OdDbLayerTableRecord_createObject(*args):
    return _ODA_Drawings.OdDbLayerTableRecord_createObject(*args)

def OdDbLayerTableRecord_isHidden(*args):
    return _ODA_Drawings.OdDbLayerTableRecord_isHidden(*args)

def OdDbLayerTableRecord_isReconciled(*args):
    return _ODA_Drawings.OdDbLayerTableRecord_isReconciled(*args)

class OdSmViewCategory(OdSmComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmViewCategory_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmViewCategory_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmViewCategory_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmViewCategory_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmViewCategory_createObject(*args)

    def getSheetViewEnumerator(self, *args):
        return _ODA_Drawings.OdSmViewCategory_getSheetViewEnumerator(self, *args)

    def getCalloutBlocks(self, *args):
        return _ODA_Drawings.OdSmViewCategory_getCalloutBlocks(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmViewCategory

# Register OdSmViewCategory in _ODA_Drawings:
_ODA_Drawings.OdSmViewCategory_swigregister(OdSmViewCategory)

def OdSmViewCategory_cast(*args):
    return _ODA_Drawings.OdSmViewCategory_cast(*args)

def OdSmViewCategory_desc(*args):
    return _ODA_Drawings.OdSmViewCategory_desc(*args)

def OdSmViewCategory_createObject(*args):
    return _ODA_Drawings.OdSmViewCategory_createObject(*args)

class OdSmSheetSelSet(OdSmComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmSheetSelSet_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmSheetSelSet_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmSheetSelSet_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmSheetSelSet_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmSheetSelSet_createObject(*args)

    def add(self, *args):
        return _ODA_Drawings.OdSmSheetSelSet_add(self, *args)

    def remove(self, *args):
        return _ODA_Drawings.OdSmSheetSelSet_remove(self, *args)

    def getEnumerator(self, *args):
        return _ODA_Drawings.OdSmSheetSelSet_getEnumerator(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmSheetSelSet

# Register OdSmSheetSelSet in _ODA_Drawings:
_ODA_Drawings.OdSmSheetSelSet_swigregister(OdSmSheetSelSet)

def OdSmSheetSelSet_cast(*args):
    return _ODA_Drawings.OdSmSheetSelSet_cast(*args)

def OdSmSheetSelSet_desc(*args):
    return _ODA_Drawings.OdSmSheetSelSet_desc(*args)

def OdSmSheetSelSet_createObject(*args):
    return _ODA_Drawings.OdSmSheetSelSet_createObject(*args)

class OdSmObjectId(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmObjectId_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmObjectId_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmObjectId_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmObjectId_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmObjectId_createObject(*args)

    def getHandle(self, *args):
        return _ODA_Drawings.OdSmObjectId_getHandle(self, *args)

    def getDatabase(self, *args):
        return _ODA_Drawings.OdSmObjectId_getDatabase(self, *args)

    def getOwner(self, *args):
        return _ODA_Drawings.OdSmObjectId_getOwner(self, *args)

    def isEqual(self, *args):
        return _ODA_Drawings.OdSmObjectId_isEqual(self, *args)

    def isValid(self, *args):
        return _ODA_Drawings.OdSmObjectId_isValid(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmObjectId

# Register OdSmObjectId in _ODA_Drawings:
_ODA_Drawings.OdSmObjectId_swigregister(OdSmObjectId)

def OdSmObjectId_cast(*args):
    return _ODA_Drawings.OdSmObjectId_cast(*args)

def OdSmObjectId_desc(*args):
    return _ODA_Drawings.OdSmObjectId_desc(*args)

def OdSmObjectId_createObject(*args):
    return _ODA_Drawings.OdSmObjectId_createObject(*args)

class OdSmSheetSet(OdSmSubset):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmSheetSet_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmSheetSet_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmSheetSet_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmSheetSet_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmSheetSet_createObject(*args)

    def getAltPageSetups(self, *args):
        return _ODA_Drawings.OdSmSheetSet_getAltPageSetups(self, *args)

    def setAltPageSetups(self, *args):
        return _ODA_Drawings.OdSmSheetSet_setAltPageSetups(self, *args)

    def getDefAltPageSetup(self, *args):
        return _ODA_Drawings.OdSmSheetSet_getDefAltPageSetup(self, *args)

    def setDefAltPageSetup(self, *args):
        return _ODA_Drawings.OdSmSheetSet_setDefAltPageSetup(self, *args)

    def getPromptForDwgName(self, *args):
        return _ODA_Drawings.OdSmSheetSet_getPromptForDwgName(self, *args)

    def setPromptForDwgName(self, *args):
        return _ODA_Drawings.OdSmSheetSet_setPromptForDwgName(self, *args)

    def getSheetSelSets(self, *args):
        return _ODA_Drawings.OdSmSheetSet_getSheetSelSets(self, *args)

    def getResources(self, *args):
        return _ODA_Drawings.OdSmSheetSet_getResources(self, *args)

    def getCalloutBlocks(self, *args):
        return _ODA_Drawings.OdSmSheetSet_getCalloutBlocks(self, *args)

    def getViewCategories(self, *args):
        return _ODA_Drawings.OdSmSheetSet_getViewCategories(self, *args)

    def getDefLabelBlk(self, *args):
        return _ODA_Drawings.OdSmSheetSet_getDefLabelBlk(self, *args)

    def setDefLabelBlk(self, *args):
        return _ODA_Drawings.OdSmSheetSet_setDefLabelBlk(self, *args)

    def getPublishOptions(self, *args):
        return _ODA_Drawings.OdSmSheetSet_getPublishOptions(self, *args)

    def subscribe(self, *args):
        return _ODA_Drawings.OdSmSheetSet_subscribe(self, *args)

    def unSubscribe(self, *args):
        return _ODA_Drawings.OdSmSheetSet_unSubscribe(self, *args)

    def updateSheetCustomProps(self, *args):
        return _ODA_Drawings.OdSmSheetSet_updateSheetCustomProps(self, *args)

    def getProjectNumber(self, *args):
        return _ODA_Drawings.OdSmSheetSet_getProjectNumber(self, *args)

    def setProjectNumber(self, *args):
        return _ODA_Drawings.OdSmSheetSet_setProjectNumber(self, *args)

    def getProjectName(self, *args):
        return _ODA_Drawings.OdSmSheetSet_getProjectName(self, *args)

    def setProjectName(self, *args):
        return _ODA_Drawings.OdSmSheetSet_setProjectName(self, *args)

    def getProjectPhase(self, *args):
        return _ODA_Drawings.OdSmSheetSet_getProjectPhase(self, *args)

    def setProjectPhase(self, *args):
        return _ODA_Drawings.OdSmSheetSet_setProjectPhase(self, *args)

    def getProjectMilestone(self, *args):
        return _ODA_Drawings.OdSmSheetSet_getProjectMilestone(self, *args)

    def setProjectMilestone(self, *args):
        return _ODA_Drawings.OdSmSheetSet_setProjectMilestone(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmSheetSet

# Register OdSmSheetSet in _ODA_Drawings:
_ODA_Drawings.OdSmSheetSet_swigregister(OdSmSheetSet)

def OdSmSheetSet_cast(*args):
    return _ODA_Drawings.OdSmSheetSet_cast(*args)

def OdSmSheetSet_desc(*args):
    return _ODA_Drawings.OdSmSheetSet_desc(*args)

def OdSmSheetSet_createObject(*args):
    return _ODA_Drawings.OdSmSheetSet_createObject(*args)

class OdDbShPrimitive(OdDbShHistoryNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShPrimitive_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShPrimitive_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShPrimitive_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShPrimitive_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShPrimitive_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShPrimitive_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShPrimitive_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShPrimitive_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShPrimitive_dxfOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbShPrimitive_subWorldDraw(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShPrimitive

# Register OdDbShPrimitive in _ODA_Drawings:
_ODA_Drawings.OdDbShPrimitive_swigregister(OdDbShPrimitive)

def OdDbShPrimitive_cast(*args):
    return _ODA_Drawings.OdDbShPrimitive_cast(*args)

def OdDbShPrimitive_desc(*args):
    return _ODA_Drawings.OdDbShPrimitive_desc(*args)

def OdDbShPrimitive_createObject(*args):
    return _ODA_Drawings.OdDbShPrimitive_createObject(*args)

class OdDbMaterial(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbMaterial_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbMaterial_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbMaterial_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbMaterial_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbMaterial_createObject(*args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbMaterial_setName(self, *args)

    def name(self, *args):
        return _ODA_Drawings.OdDbMaterial_name(self, *args)

    def setDescription(self, *args):
        return _ODA_Drawings.OdDbMaterial_setDescription(self, *args)

    def description(self, *args):
        return _ODA_Drawings.OdDbMaterial_description(self, *args)

    def setAmbient(self, *args):
        return _ODA_Drawings.OdDbMaterial_setAmbient(self, *args)

    def ambient(self, *args):
        return _ODA_Drawings.OdDbMaterial_ambient(self, *args)

    def setDiffuse(self, *args):
        return _ODA_Drawings.OdDbMaterial_setDiffuse(self, *args)

    def diffuse(self, *args):
        return _ODA_Drawings.OdDbMaterial_diffuse(self, *args)

    def setSpecular(self, *args):
        return _ODA_Drawings.OdDbMaterial_setSpecular(self, *args)

    def specular(self, *args):
        return _ODA_Drawings.OdDbMaterial_specular(self, *args)

    def setReflection(self, *args):
        return _ODA_Drawings.OdDbMaterial_setReflection(self, *args)

    def reflection(self, *args):
        return _ODA_Drawings.OdDbMaterial_reflection(self, *args)

    def setOpacity(self, *args):
        return _ODA_Drawings.OdDbMaterial_setOpacity(self, *args)

    def opacity(self, *args):
        return _ODA_Drawings.OdDbMaterial_opacity(self, *args)

    def setBump(self, *args):
        return _ODA_Drawings.OdDbMaterial_setBump(self, *args)

    def bump(self, *args):
        return _ODA_Drawings.OdDbMaterial_bump(self, *args)

    def setRefraction(self, *args):
        return _ODA_Drawings.OdDbMaterial_setRefraction(self, *args)

    def refraction(self, *args):
        return _ODA_Drawings.OdDbMaterial_refraction(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbMaterial_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbMaterial_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbMaterial_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbMaterial_dxfOutFields(self, *args)

    def drawable(self, *args):
        return _ODA_Drawings.OdDbMaterial_drawable(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbMaterial_subSetAttributes(self, *args)

    def translucence(self, *args):
        return _ODA_Drawings.OdDbMaterial_translucence(self, *args)

    def setTranslucence(self, *args):
        return _ODA_Drawings.OdDbMaterial_setTranslucence(self, *args)

    def selfIllumination(self, *args):
        return _ODA_Drawings.OdDbMaterial_selfIllumination(self, *args)

    def setSelfIllumination(self, *args):
        return _ODA_Drawings.OdDbMaterial_setSelfIllumination(self, *args)

    def reflectivity(self, *args):
        return _ODA_Drawings.OdDbMaterial_reflectivity(self, *args)

    def setReflectivity(self, *args):
        return _ODA_Drawings.OdDbMaterial_setReflectivity(self, *args)

    def mode(self, *args):
        return _ODA_Drawings.OdDbMaterial_mode(self, *args)

    def setMode(self, *args):
        return _ODA_Drawings.OdDbMaterial_setMode(self, *args)

    def channelFlags(self, *args):
        return _ODA_Drawings.OdDbMaterial_channelFlags(self, *args)

    def setChannelFlags(self, *args):
        return _ODA_Drawings.OdDbMaterial_setChannelFlags(self, *args)

    def illuminationModel(self, *args):
        return _ODA_Drawings.OdDbMaterial_illuminationModel(self, *args)

    def setIlluminationModel(self, *args):
        return _ODA_Drawings.OdDbMaterial_setIlluminationModel(self, *args)

    def colorBleedScale(self, *args):
        return _ODA_Drawings.OdDbMaterial_colorBleedScale(self, *args)

    def setColorBleedScale(self, *args):
        return _ODA_Drawings.OdDbMaterial_setColorBleedScale(self, *args)

    def indirectBumpScale(self, *args):
        return _ODA_Drawings.OdDbMaterial_indirectBumpScale(self, *args)

    def setIndirectBumpScale(self, *args):
        return _ODA_Drawings.OdDbMaterial_setIndirectBumpScale(self, *args)

    def reflectanceScale(self, *args):
        return _ODA_Drawings.OdDbMaterial_reflectanceScale(self, *args)

    def setReflectanceScale(self, *args):
        return _ODA_Drawings.OdDbMaterial_setReflectanceScale(self, *args)

    def transmittanceScale(self, *args):
        return _ODA_Drawings.OdDbMaterial_transmittanceScale(self, *args)

    def setTransmittanceScale(self, *args):
        return _ODA_Drawings.OdDbMaterial_setTransmittanceScale(self, *args)

    def twoSided(self, *args):
        return _ODA_Drawings.OdDbMaterial_twoSided(self, *args)

    def setTwoSided(self, *args):
        return _ODA_Drawings.OdDbMaterial_setTwoSided(self, *args)

    def luminanceMode(self, *args):
        return _ODA_Drawings.OdDbMaterial_luminanceMode(self, *args)

    def setLuminanceMode(self, *args):
        return _ODA_Drawings.OdDbMaterial_setLuminanceMode(self, *args)

    def luminance(self, *args):
        return _ODA_Drawings.OdDbMaterial_luminance(self, *args)

    def setLuminance(self, *args):
        return _ODA_Drawings.OdDbMaterial_setLuminance(self, *args)

    def shininess(self, *args):
        return _ODA_Drawings.OdDbMaterial_shininess(self, *args)

    def setShininess(self, *args):
        return _ODA_Drawings.OdDbMaterial_setShininess(self, *args)

    def normalMap(self, *args):
        return _ODA_Drawings.OdDbMaterial_normalMap(self, *args)

    def setNormalMap(self, *args):
        return _ODA_Drawings.OdDbMaterial_setNormalMap(self, *args)

    def isAnonymous(self, *args):
        return _ODA_Drawings.OdDbMaterial_isAnonymous(self, *args)

    def setAnonymous(self, *args):
        return _ODA_Drawings.OdDbMaterial_setAnonymous(self, *args)

    def globalIllumination(self, *args):
        return _ODA_Drawings.OdDbMaterial_globalIllumination(self, *args)

    def setGlobalIllumination(self, *args):
        return _ODA_Drawings.OdDbMaterial_setGlobalIllumination(self, *args)

    def finalGather(self, *args):
        return _ODA_Drawings.OdDbMaterial_finalGather(self, *args)

    def setFinalGather(self, *args):
        return _ODA_Drawings.OdDbMaterial_setFinalGather(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbMaterial_subGetClassID(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbMaterial_subErase(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbMaterial

# Register OdDbMaterial in _ODA_Drawings:
_ODA_Drawings.OdDbMaterial_swigregister(OdDbMaterial)

def OdDbMaterial_cast(*args):
    return _ODA_Drawings.OdDbMaterial_cast(*args)

def OdDbMaterial_desc(*args):
    return _ODA_Drawings.OdDbMaterial_desc(*args)

def OdDbMaterial_createObject(*args):
    return _ODA_Drawings.OdDbMaterial_createObject(*args)

class OdDbLayerFilter(OdDbFilter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLayerFilter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLayerFilter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLayerFilter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLayerFilter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLayerFilter_createObject(*args)

    def indexClass(self, *args):
        return _ODA_Drawings.OdDbLayerFilter_indexClass(self, *args)

    def isValid(self, *args):
        return _ODA_Drawings.OdDbLayerFilter_isValid(self, *args)

    def add(self, *args):
        return _ODA_Drawings.OdDbLayerFilter_add(self, *args)

    def remove(self, *args):
        return _ODA_Drawings.OdDbLayerFilter_remove(self, *args)

    def getAt(self, *args):
        return _ODA_Drawings.OdDbLayerFilter_getAt(self, *args)

    def layerCount(self, *args):
        return _ODA_Drawings.OdDbLayerFilter_layerCount(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbLayerFilter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbLayerFilter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbLayerFilter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbLayerFilter_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLayerFilter

# Register OdDbLayerFilter in _ODA_Drawings:
_ODA_Drawings.OdDbLayerFilter_swigregister(OdDbLayerFilter)

def OdDbLayerFilter_cast(*args):
    return _ODA_Drawings.OdDbLayerFilter_cast(*args)

def OdDbLayerFilter_desc(*args):
    return _ODA_Drawings.OdDbLayerFilter_desc(*args)

def OdDbLayerFilter_createObject(*args):
    return _ODA_Drawings.OdDbLayerFilter_createObject(*args)

class CAseDLPNTableRecord(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.CAseDLPNTableRecord_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.CAseDLPNTableRecord_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.CAseDLPNTableRecord_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.CAseDLPNTableRecord_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.CAseDLPNTableRecord_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_CAseDLPNTableRecord

# Register CAseDLPNTableRecord in _ODA_Drawings:
_ODA_Drawings.CAseDLPNTableRecord_swigregister(CAseDLPNTableRecord)

def CAseDLPNTableRecord_cast(*args):
    return _ODA_Drawings.CAseDLPNTableRecord_cast(*args)

def CAseDLPNTableRecord_desc(*args):
    return _ODA_Drawings.CAseDLPNTableRecord_desc(*args)

def CAseDLPNTableRecord_createObject(*args):
    return _ODA_Drawings.CAseDLPNTableRecord_createObject(*args)

class OdDbVbaProject(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbVbaProject_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbVbaProject_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbVbaProject_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbVbaProject_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbVbaProject_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbVbaProject_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbVbaProject_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbVbaProject_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbVbaProject_dxfOutFields(self, *args)

    def getVbaProject(self, *args):
        return _ODA_Drawings.OdDbVbaProject_getVbaProject(self, *args)

    def setVbaProject(self, *args):
        return _ODA_Drawings.OdDbVbaProject_setVbaProject(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbVbaProject

# Register OdDbVbaProject in _ODA_Drawings:
_ODA_Drawings.OdDbVbaProject_swigregister(OdDbVbaProject)

def OdDbVbaProject_cast(*args):
    return _ODA_Drawings.OdDbVbaProject_cast(*args)

def OdDbVbaProject_desc(*args):
    return _ODA_Drawings.OdDbVbaProject_desc(*args)

def OdDbVbaProject_createObject(*args):
    return _ODA_Drawings.OdDbVbaProject_createObject(*args)

class OdDbSpatialIndex(OdDbIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSpatialIndex_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSpatialIndex_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSpatialIndex_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSpatialIndex_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSpatialIndex_createObject(*args)

    def newIterator(self, *args):
        return _ODA_Drawings.OdDbSpatialIndex_newIterator(self, *args)

    def rebuildFull(self, *args):
        return _ODA_Drawings.OdDbSpatialIndex_rebuildFull(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbSpatialIndex_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbSpatialIndex_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbSpatialIndex_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbSpatialIndex_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSpatialIndex

# Register OdDbSpatialIndex in _ODA_Drawings:
_ODA_Drawings.OdDbSpatialIndex_swigregister(OdDbSpatialIndex)

def OdDbSpatialIndex_cast(*args):
    return _ODA_Drawings.OdDbSpatialIndex_cast(*args)

def OdDbSpatialIndex_desc(*args):
    return _ODA_Drawings.OdDbSpatialIndex_desc(*args)

def OdDbSpatialIndex_createObject(*args):
    return _ODA_Drawings.OdDbSpatialIndex_createObject(*args)

ODDB_INFINITE_XCLIP_DEPTH = _ODA_Drawings.ODDB_INFINITE_XCLIP_DEPTH
class OdDbSpatialFilter(OdDbFilter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSpatialFilter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSpatialFilter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSpatialFilter_createObject(*args)

    def indexClass(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_indexClass(self, *args)

    def queryBounds(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_queryBounds(self, *args)

    def getVolume(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_getVolume(self, *args)

    def setDefinition(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_setDefinition(self, *args)

    def getDefinition(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_getDefinition(self, *args)

    def getClipSpaceToWCSMatrix(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_getClipSpaceToWCSMatrix(self, *args)

    def getOriginalInverseBlockXform(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_getOriginalInverseBlockXform(self, *args)

    def boundary(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_boundary(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_normal(self, *args)

    def origin(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_origin(self, *args)

    def frontClipEnabled(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_frontClipEnabled(self, *args)

    def frontClipDist(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_frontClipDist(self, *args)

    def backClipDistEnabled(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_backClipDistEnabled(self, *args)

    def backClipDist(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_backClipDist(self, *args)

    def isEnabled(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_isEnabled(self, *args)

    def setPerspectiveCamera(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_setPerspectiveCamera(self, *args)

    def clipVolumeIntersectsExtents(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_clipVolumeIntersectsExtents(self, *args)

    def hasPerspectiveCamera(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_hasPerspectiveCamera(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_dxfOutFields(self, *args)

    def isFilterInverted(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_isFilterInverted(self, *args)

    def setFilterInverted(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_setFilterInverted(self, *args)

    def generateClipBoundaryFromPline(self, *args):
        return _ODA_Drawings.OdDbSpatialFilter_generateClipBoundaryFromPline(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSpatialFilter

# Register OdDbSpatialFilter in _ODA_Drawings:
_ODA_Drawings.OdDbSpatialFilter_swigregister(OdDbSpatialFilter)

def OdDbSpatialFilter_cast(*args):
    return _ODA_Drawings.OdDbSpatialFilter_cast(*args)

def OdDbSpatialFilter_desc(*args):
    return _ODA_Drawings.OdDbSpatialFilter_desc(*args)

def OdDbSpatialFilter_createObject(*args):
    return _ODA_Drawings.OdDbSpatialFilter_createObject(*args)

class OdDbSortentsTable(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSortentsTable_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSortentsTable_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSortentsTable_createObject(*args)

    def getSortHandle(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_getSortHandle(self, *args)

    def moveToBottom(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_moveToBottom(self, *args)

    def moveToTop(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_moveToTop(self, *args)

    def moveBelow(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_moveBelow(self, *args)

    def moveAbove(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_moveAbove(self, *args)

    def swapOrder(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_swapOrder(self, *args)

    def blockId(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_blockId(self, *args)

    def firstEntityIsDrawnBeforeSecond(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_firstEntityIsDrawnBeforeSecond(self, *args)

    def getFullDrawOrder(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_getFullDrawOrder(self, *args)

    def getRelativeDrawOrder(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_getRelativeDrawOrder(self, *args)

    def setRelativeDrawOrder(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_setRelativeDrawOrder(self, *args)

    def setAbsoluteDrawOrder(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_setAbsoluteDrawOrder(self, *args)

    def getAbsoluteDrawOrder(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_getAbsoluteDrawOrder(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbSortentsTable_subGetClassID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSortentsTable

# Register OdDbSortentsTable in _ODA_Drawings:
_ODA_Drawings.OdDbSortentsTable_swigregister(OdDbSortentsTable)

def OdDbSortentsTable_cast(*args):
    return _ODA_Drawings.OdDbSortentsTable_cast(*args)

def OdDbSortentsTable_desc(*args):
    return _ODA_Drawings.OdDbSortentsTable_desc(*args)

def OdDbSortentsTable_createObject(*args):
    return _ODA_Drawings.OdDbSortentsTable_createObject(*args)

class OdDbRasterVariables(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRasterVariables_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRasterVariables_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRasterVariables_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRasterVariables_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRasterVariables_createObject(*args)
    kImageFrameInvalid = _ODA_Drawings.OdDbRasterVariables_kImageFrameInvalid
    kImageFrameOff = _ODA_Drawings.OdDbRasterVariables_kImageFrameOff
    kImageFrameAbove = _ODA_Drawings.OdDbRasterVariables_kImageFrameAbove
    kImageFrameBelow = _ODA_Drawings.OdDbRasterVariables_kImageFrameBelow
    kImageFrameOnNoPlot = _ODA_Drawings.OdDbRasterVariables_kImageFrameOnNoPlot
    kImageQualityInvalid = _ODA_Drawings.OdDbRasterVariables_kImageQualityInvalid
    kImageQualityDraft = _ODA_Drawings.OdDbRasterVariables_kImageQualityDraft
    kImageQualityHigh = _ODA_Drawings.OdDbRasterVariables_kImageQualityHigh

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbRasterVariables_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbRasterVariables_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbRasterVariables_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbRasterVariables_dxfOutFields(self, *args)

    def imageFrame(self, *args):
        return _ODA_Drawings.OdDbRasterVariables_imageFrame(self, *args)

    def setImageFrame(self, *args):
        return _ODA_Drawings.OdDbRasterVariables_setImageFrame(self, *args)

    def imageQuality(self, *args):
        return _ODA_Drawings.OdDbRasterVariables_imageQuality(self, *args)

    def setImageQuality(self, *args):
        return _ODA_Drawings.OdDbRasterVariables_setImageQuality(self, *args)

    def userScale(self, *args):
        return _ODA_Drawings.OdDbRasterVariables_userScale(self, *args)

    def setUserScale(self, *args):
        return _ODA_Drawings.OdDbRasterVariables_setUserScale(self, *args)

    @staticmethod
    def openRasterVariables(*args):
        return _ODA_Drawings.OdDbRasterVariables_openRasterVariables(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRasterVariables

# Register OdDbRasterVariables in _ODA_Drawings:
_ODA_Drawings.OdDbRasterVariables_swigregister(OdDbRasterVariables)

def OdDbRasterVariables_cast(*args):
    return _ODA_Drawings.OdDbRasterVariables_cast(*args)

def OdDbRasterVariables_desc(*args):
    return _ODA_Drawings.OdDbRasterVariables_desc(*args)

def OdDbRasterVariables_createObject(*args):
    return _ODA_Drawings.OdDbRasterVariables_createObject(*args)

def OdDbRasterVariables_openRasterVariables(*args):
    return _ODA_Drawings.OdDbRasterVariables_openRasterVariables(*args)

class OdDbPlaceHolder(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPlaceHolder_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPlaceHolder_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPlaceHolder_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPlaceHolder_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPlaceHolder_createObject(*args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPlaceHolder_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPlaceHolder_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPlaceHolder

# Register OdDbPlaceHolder in _ODA_Drawings:
_ODA_Drawings.OdDbPlaceHolder_swigregister(OdDbPlaceHolder)

def OdDbPlaceHolder_cast(*args):
    return _ODA_Drawings.OdDbPlaceHolder_cast(*args)

def OdDbPlaceHolder_desc(*args):
    return _ODA_Drawings.OdDbPlaceHolder_desc(*args)

def OdDbPlaceHolder_createObject(*args):
    return _ODA_Drawings.OdDbPlaceHolder_createObject(*args)

class OdDbLayerIndex(OdDbIndex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLayerIndex_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLayerIndex_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLayerIndex_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLayerIndex_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLayerIndex_createObject(*args)

    def newIterator(self, *args):
        return _ODA_Drawings.OdDbLayerIndex_newIterator(self, *args)

    def rebuildFull(self, *args):
        return _ODA_Drawings.OdDbLayerIndex_rebuildFull(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbLayerIndex_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbLayerIndex_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbLayerIndex_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbLayerIndex_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLayerIndex

# Register OdDbLayerIndex in _ODA_Drawings:
_ODA_Drawings.OdDbLayerIndex_swigregister(OdDbLayerIndex)

def OdDbLayerIndex_cast(*args):
    return _ODA_Drawings.OdDbLayerIndex_cast(*args)

def OdDbLayerIndex_desc(*args):
    return _ODA_Drawings.OdDbLayerIndex_desc(*args)

def OdDbLayerIndex_createObject(*args):
    return _ODA_Drawings.OdDbLayerIndex_createObject(*args)

class OdDbIdBufferIterator(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def start(self, *args):
        return _ODA_Drawings.OdDbIdBufferIterator_start(self, *args)

    def done(self, *args):
        return _ODA_Drawings.OdDbIdBufferIterator_done(self, *args)

    def next(self, *args):
        return _ODA_Drawings.OdDbIdBufferIterator_next(self, *args)

    def id(self, *args):
        return _ODA_Drawings.OdDbIdBufferIterator_id(self, *args)

    def seek(self, *args):
        return _ODA_Drawings.OdDbIdBufferIterator_seek(self, *args)

    def removeCurrentId(self, *args):
        return _ODA_Drawings.OdDbIdBufferIterator_removeCurrentId(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbIdBufferIterator

# Register OdDbIdBufferIterator in _ODA_Drawings:
_ODA_Drawings.OdDbIdBufferIterator_swigregister(OdDbIdBufferIterator)

class OdDbIdBuffer(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbIdBuffer_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbIdBuffer_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbIdBuffer_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbIdBuffer_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbIdBuffer_createObject(*args)

    def newIterator(self, *args):
        return _ODA_Drawings.OdDbIdBuffer_newIterator(self, *args)

    def addId(self, *args):
        return _ODA_Drawings.OdDbIdBuffer_addId(self, *args)

    def addIds(self, *args):
        return _ODA_Drawings.OdDbIdBuffer_addIds(self, *args)

    def numIds(self, *args):
        return _ODA_Drawings.OdDbIdBuffer_numIds(self, *args)

    def removeAll(self, *args):
        return _ODA_Drawings.OdDbIdBuffer_removeAll(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbIdBuffer_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbIdBuffer_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbIdBuffer_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbIdBuffer_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbIdBuffer

# Register OdDbIdBuffer in _ODA_Drawings:
_ODA_Drawings.OdDbIdBuffer_swigregister(OdDbIdBuffer)

def OdDbIdBuffer_cast(*args):
    return _ODA_Drawings.OdDbIdBuffer_cast(*args)

def OdDbIdBuffer_desc(*args):
    return _ODA_Drawings.OdDbIdBuffer_desc(*args)

def OdDbIdBuffer_createObject(*args):
    return _ODA_Drawings.OdDbIdBuffer_createObject(*args)

class OdDbDictionaryWithDefault(OdDbDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDictionaryWithDefault_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDictionaryWithDefault_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDictionaryWithDefault_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDictionaryWithDefault_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDictionaryWithDefault_createObject(*args)

    def setDefaultId(self, *args):
        return _ODA_Drawings.OdDbDictionaryWithDefault_setDefaultId(self, *args)

    def defaultId(self, *args):
        return _ODA_Drawings.OdDbDictionaryWithDefault_defaultId(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbDictionaryWithDefault_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbDictionaryWithDefault_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbDictionaryWithDefault_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbDictionaryWithDefault_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDictionaryWithDefault

# Register OdDbDictionaryWithDefault in _ODA_Drawings:
_ODA_Drawings.OdDbDictionaryWithDefault_swigregister(OdDbDictionaryWithDefault)

def OdDbDictionaryWithDefault_cast(*args):
    return _ODA_Drawings.OdDbDictionaryWithDefault_cast(*args)

def OdDbDictionaryWithDefault_desc(*args):
    return _ODA_Drawings.OdDbDictionaryWithDefault_desc(*args)

def OdDbDictionaryWithDefault_createObject(*args):
    return _ODA_Drawings.OdDbDictionaryWithDefault_createObject(*args)

class OdDbDictionaryVar(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDictionaryVar_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDictionaryVar_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDictionaryVar_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDictionaryVar_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDictionaryVar_createObject(*args)

    def getSchema(self, *args):
        return _ODA_Drawings.OdDbDictionaryVar_getSchema(self, *args)

    def setSchema(self, *args):
        return _ODA_Drawings.OdDbDictionaryVar_setSchema(self, *args)

    def value(self, *args):
        return _ODA_Drawings.OdDbDictionaryVar_value(self, *args)

    def valueAs(self, *args):
        return _ODA_Drawings.OdDbDictionaryVar_valueAs(self, *args)

    def setValue(self, *args):
        return _ODA_Drawings.OdDbDictionaryVar_setValue(self, *args)

    def dxfIn(self, *args):
        return _ODA_Drawings.OdDbDictionaryVar_dxfIn(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbDictionaryVar_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbDictionaryVar_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbDictionaryVar_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbDictionaryVar_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDictionaryVar

# Register OdDbDictionaryVar in _ODA_Drawings:
_ODA_Drawings.OdDbDictionaryVar_swigregister(OdDbDictionaryVar)

def OdDbDictionaryVar_cast(*args):
    return _ODA_Drawings.OdDbDictionaryVar_cast(*args)

def OdDbDictionaryVar_desc(*args):
    return _ODA_Drawings.OdDbDictionaryVar_desc(*args)

def OdDbDictionaryVar_createObject(*args):
    return _ODA_Drawings.OdDbDictionaryVar_createObject(*args)

MSTYLE_DXF_FILL_ON = _ODA_Drawings.MSTYLE_DXF_FILL_ON
MSTYLE_DXF_SHOW_MITERS = _ODA_Drawings.MSTYLE_DXF_SHOW_MITERS
MSTYLE_DXF_START_SQUARE_CAP = _ODA_Drawings.MSTYLE_DXF_START_SQUARE_CAP
MSTYLE_DXF_START_INNER_ARCS = _ODA_Drawings.MSTYLE_DXF_START_INNER_ARCS
MSTYLE_DXF_START_ROUND_CAP = _ODA_Drawings.MSTYLE_DXF_START_ROUND_CAP
MSTYLE_DXF_END_SQUARE_CAP = _ODA_Drawings.MSTYLE_DXF_END_SQUARE_CAP
MSTYLE_DXF_END_INNER_ARCS = _ODA_Drawings.MSTYLE_DXF_END_INNER_ARCS
MSTYLE_DXF_END_ROUND_CAP = _ODA_Drawings.MSTYLE_DXF_END_ROUND_CAP
MSTYLE_DXF_JUST_TOP = _ODA_Drawings.MSTYLE_DXF_JUST_TOP
MSTYLE_DXF_JUST_ZERO = _ODA_Drawings.MSTYLE_DXF_JUST_ZERO
MSTYLE_DXF_JUST_BOT = _ODA_Drawings.MSTYLE_DXF_JUST_BOT
class OdDbMlineStyle(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbMlineStyle_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbMlineStyle_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbMlineStyle_createObject(*args)

    def initMlineStyle(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_initMlineStyle(self, *args)

    def set(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_set(self, *args)

    def setDescription(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_setDescription(self, *args)

    def description(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_description(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_setName(self, *args)

    def name(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_name(self, *args)

    def setShowMiters(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_setShowMiters(self, *args)

    def showMiters(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_showMiters(self, *args)

    def setStartSquareCap(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_setStartSquareCap(self, *args)

    def startSquareCap(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_startSquareCap(self, *args)

    def setStartRoundCap(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_setStartRoundCap(self, *args)

    def startRoundCap(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_startRoundCap(self, *args)

    def setStartInnerArcs(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_setStartInnerArcs(self, *args)

    def startInnerArcs(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_startInnerArcs(self, *args)

    def setEndSquareCap(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_setEndSquareCap(self, *args)

    def endSquareCap(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_endSquareCap(self, *args)

    def setEndRoundCap(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_setEndRoundCap(self, *args)

    def endRoundCap(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_endRoundCap(self, *args)

    def setEndInnerArcs(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_setEndInnerArcs(self, *args)

    def endInnerArcs(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_endInnerArcs(self, *args)

    def setFillColor(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_setFillColor(self, *args)

    def fillColor(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_fillColor(self, *args)

    def setFilled(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_setFilled(self, *args)

    def filled(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_filled(self, *args)

    def setStartAngle(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_setStartAngle(self, *args)

    def startAngle(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_startAngle(self, *args)

    def setEndAngle(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_setEndAngle(self, *args)

    def endAngle(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_endAngle(self, *args)

    def addElement(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_addElement(self, *args)

    def removeElementAt(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_removeElementAt(self, *args)

    def numElements(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_numElements(self, *args)

    def setElement(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_setElement(self, *args)

    def getElementAt(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_getElementAt(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_subGetClassID(self, *args)

    def appendToOwner(self, *args):
        return _ODA_Drawings.OdDbMlineStyle_appendToOwner(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbMlineStyle

# Register OdDbMlineStyle in _ODA_Drawings:
_ODA_Drawings.OdDbMlineStyle_swigregister(OdDbMlineStyle)

def OdDbMlineStyle_cast(*args):
    return _ODA_Drawings.OdDbMlineStyle_cast(*args)

def OdDbMlineStyle_desc(*args):
    return _ODA_Drawings.OdDbMlineStyle_desc(*args)

def OdDbMlineStyle_createObject(*args):
    return _ODA_Drawings.OdDbMlineStyle_createObject(*args)

class OdDbGroupIterator(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbGroupIterator_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbGroupIterator_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbGroupIterator_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbGroupIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGroupIterator_createObject(*args)

    def getObject(self, *args):
        return _ODA_Drawings.OdDbGroupIterator_getObject(self, *args)

    def objectId(self, *args):
        return _ODA_Drawings.OdDbGroupIterator_objectId(self, *args)

    def done(self, *args):
        return _ODA_Drawings.OdDbGroupIterator_done(self, *args)

    def next(self, *args):
        return _ODA_Drawings.OdDbGroupIterator_next(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGroupIterator

# Register OdDbGroupIterator in _ODA_Drawings:
_ODA_Drawings.OdDbGroupIterator_swigregister(OdDbGroupIterator)

def OdDbGroupIterator_cast(*args):
    return _ODA_Drawings.OdDbGroupIterator_cast(*args)

def OdDbGroupIterator_desc(*args):
    return _ODA_Drawings.OdDbGroupIterator_desc(*args)

def OdDbGroupIterator_createObject(*args):
    return _ODA_Drawings.OdDbGroupIterator_createObject(*args)

class OdDbGroup(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbGroup_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbGroup_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbGroup_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbGroup_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGroup_createObject(*args)

    def newIterator(self, *args):
        return _ODA_Drawings.OdDbGroup_newIterator(self, *args)

    def description(self, *args):
        return _ODA_Drawings.OdDbGroup_description(self, *args)

    def setDescription(self, *args):
        return _ODA_Drawings.OdDbGroup_setDescription(self, *args)

    def isSelectable(self, *args):
        return _ODA_Drawings.OdDbGroup_isSelectable(self, *args)

    def setSelectable(self, *args):
        return _ODA_Drawings.OdDbGroup_setSelectable(self, *args)

    def name(self, *args):
        return _ODA_Drawings.OdDbGroup_name(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbGroup_setName(self, *args)

    def isNotAccessible(self, *args):
        return _ODA_Drawings.OdDbGroup_isNotAccessible(self, *args)

    def isAnonymous(self, *args):
        return _ODA_Drawings.OdDbGroup_isAnonymous(self, *args)

    def setAnonymous(self, *args):
        return _ODA_Drawings.OdDbGroup_setAnonymous(self, *args)

    def append(self, *args):
        return _ODA_Drawings.OdDbGroup_append(self, *args)

    def prepend(self, *args):
        return _ODA_Drawings.OdDbGroup_prepend(self, *args)

    def insertAt(self, *args):
        return _ODA_Drawings.OdDbGroup_insertAt(self, *args)

    def remove(self, *args):
        return _ODA_Drawings.OdDbGroup_remove(self, *args)

    def removeAt(self, *args):
        return _ODA_Drawings.OdDbGroup_removeAt(self, *args)

    def replace(self, *args):
        return _ODA_Drawings.OdDbGroup_replace(self, *args)

    def transfer(self, *args):
        return _ODA_Drawings.OdDbGroup_transfer(self, *args)

    def clear(self, *args):
        return _ODA_Drawings.OdDbGroup_clear(self, *args)

    def numEntities(self, *args):
        return _ODA_Drawings.OdDbGroup_numEntities(self, *args)

    def has(self, *args):
        return _ODA_Drawings.OdDbGroup_has(self, *args)

    def allEntityIds(self, *args):
        return _ODA_Drawings.OdDbGroup_allEntityIds(self, *args)

    def getIndex(self, *args):
        return _ODA_Drawings.OdDbGroup_getIndex(self, *args)

    def reverse(self, *args):
        return _ODA_Drawings.OdDbGroup_reverse(self, *args)

    def setColorIndex(self, *args):
        return _ODA_Drawings.OdDbGroup_setColorIndex(self, *args)

    def setColor(self, *args):
        return _ODA_Drawings.OdDbGroup_setColor(self, *args)

    def setLayer(self, *args):
        return _ODA_Drawings.OdDbGroup_setLayer(self, *args)

    def setLinetype(self, *args):
        return _ODA_Drawings.OdDbGroup_setLinetype(self, *args)

    def setLinetypeScale(self, *args):
        return _ODA_Drawings.OdDbGroup_setLinetypeScale(self, *args)

    def setVisibility(self, *args):
        return _ODA_Drawings.OdDbGroup_setVisibility(self, *args)

    def setPlotStyleName(self, *args):
        return _ODA_Drawings.OdDbGroup_setPlotStyleName(self, *args)

    def setLineweight(self, *args):
        return _ODA_Drawings.OdDbGroup_setLineweight(self, *args)

    def setHighlight(self, *args):
        return _ODA_Drawings.OdDbGroup_setHighlight(self, *args)

    def setMaterial(self, *args):
        return _ODA_Drawings.OdDbGroup_setMaterial(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbGroup_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbGroup_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbGroup_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbGroup_dxfOutFields(self, *args)

    def copied(self, *args):
        return _ODA_Drawings.OdDbGroup_copied(self, *args)

    def appendToOwner(self, *args):
        return _ODA_Drawings.OdDbGroup_appendToOwner(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbGroup_subGetClassID(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbGroup_subClose(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGroup

# Register OdDbGroup in _ODA_Drawings:
_ODA_Drawings.OdDbGroup_swigregister(OdDbGroup)

def OdDbGroup_cast(*args):
    return _ODA_Drawings.OdDbGroup_cast(*args)

def OdDbGroup_desc(*args):
    return _ODA_Drawings.OdDbGroup_desc(*args)

def OdDbGroup_createObject(*args):
    return _ODA_Drawings.OdDbGroup_createObject(*args)

class OdRxSketchObject(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdRxSketchObject_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdRxSketchObject_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdRxSketchObject_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdRxSketchObject_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdRxSketchObject_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdRxSketchObject

    def sketchTag(self, *args):
        return _ODA_Drawings.OdRxSketchObject_sketchTag(self, *args)

    def getViewRepId(self, *args):
        return _ODA_Drawings.OdRxSketchObject_getViewRepId(self, *args)

    def getSecSymbolId(self, *args):
        return _ODA_Drawings.OdRxSketchObject_getSecSymbolId(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdRxSketchObject_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdRxSketchObject_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdRxSketchObject_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdRxSketchObject_dxfOutFields(self, *args)

# Register OdRxSketchObject in _ODA_Drawings:
_ODA_Drawings.OdRxSketchObject_swigregister(OdRxSketchObject)

def OdRxSketchObject_cast(*args):
    return _ODA_Drawings.OdRxSketchObject_cast(*args)

def OdRxSketchObject_desc(*args):
    return _ODA_Drawings.OdRxSketchObject_desc(*args)

def OdRxSketchObject_createObject(*args):
    return _ODA_Drawings.OdRxSketchObject_createObject(*args)

class OdRxFreeSketch(OdRxSketchObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdRxFreeSketch_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdRxFreeSketch_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdRxFreeSketch_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdRxFreeSketch_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdRxFreeSketch_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdRxFreeSketch

# Register OdRxFreeSketch in _ODA_Drawings:
_ODA_Drawings.OdRxFreeSketch_swigregister(OdRxFreeSketch)

def OdRxFreeSketch_cast(*args):
    return _ODA_Drawings.OdRxFreeSketch_cast(*args)

def OdRxFreeSketch_desc(*args):
    return _ODA_Drawings.OdRxFreeSketch_desc(*args)

def OdRxFreeSketch_createObject(*args):
    return _ODA_Drawings.OdRxFreeSketch_createObject(*args)

class OdRxSymbolSketch(OdRxSketchObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdRxSymbolSketch_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdRxSymbolSketch_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdRxSymbolSketch_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdRxSymbolSketch_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdRxSymbolSketch_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdRxSymbolSketch

# Register OdRxSymbolSketch in _ODA_Drawings:
_ODA_Drawings.OdRxSymbolSketch_swigregister(OdRxSymbolSketch)

def OdRxSymbolSketch_cast(*args):
    return _ODA_Drawings.OdRxSymbolSketch_cast(*args)

def OdRxSymbolSketch_desc(*args):
    return _ODA_Drawings.OdRxSymbolSketch_desc(*args)

def OdRxSymbolSketch_createObject(*args):
    return _ODA_Drawings.OdRxSymbolSketch_createObject(*args)

class OdRxSectionSketch(OdRxSketchObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdRxSectionSketch_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdRxSectionSketch_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdRxSectionSketch_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdRxSectionSketch_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdRxSectionSketch_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdRxSectionSketch

# Register OdRxSectionSketch in _ODA_Drawings:
_ODA_Drawings.OdRxSectionSketch_swigregister(OdRxSectionSketch)

def OdRxSectionSketch_cast(*args):
    return _ODA_Drawings.OdRxSectionSketch_cast(*args)

def OdRxSectionSketch_desc(*args):
    return _ODA_Drawings.OdRxSectionSketch_desc(*args)

def OdRxSectionSketch_createObject(*args):
    return _ODA_Drawings.OdRxSectionSketch_createObject(*args)

class OdRxDetailSketch(OdRxSketchObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdRxDetailSketch_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdRxDetailSketch_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdRxDetailSketch_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdRxDetailSketch_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdRxDetailSketch_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdRxDetailSketch

# Register OdRxDetailSketch in _ODA_Drawings:
_ODA_Drawings.OdRxDetailSketch_swigregister(OdRxDetailSketch)

def OdRxDetailSketch_cast(*args):
    return _ODA_Drawings.OdRxDetailSketch_cast(*args)

def OdRxDetailSketch_desc(*args):
    return _ODA_Drawings.OdRxDetailSketch_desc(*args)

def OdRxDetailSketch_createObject(*args):
    return _ODA_Drawings.OdRxDetailSketch_createObject(*args)

class OdDbViewRepOrientationDef(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewRepOrientationDef_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewRepOrientationDef_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewRepOrientationDef_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewRepOrientationDef_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewRepOrientationDef_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewRepOrientationDef

# Register OdDbViewRepOrientationDef in _ODA_Drawings:
_ODA_Drawings.OdDbViewRepOrientationDef_swigregister(OdDbViewRepOrientationDef)

def OdDbViewRepOrientationDef_cast(*args):
    return _ODA_Drawings.OdDbViewRepOrientationDef_cast(*args)

def OdDbViewRepOrientationDef_desc(*args):
    return _ODA_Drawings.OdDbViewRepOrientationDef_desc(*args)

def OdDbViewRepOrientationDef_createObject(*args):
    return _ODA_Drawings.OdDbViewRepOrientationDef_createObject(*args)

class OdDbViewRepSource(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewRepSource_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewRepSource_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewRepSource_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewRepSource_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewRepSource_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewRepSource

    def type(self, *args):
        return _ODA_Drawings.OdDbViewRepSource_type(self, *args)

# Register OdDbViewRepSource in _ODA_Drawings:
_ODA_Drawings.OdDbViewRepSource_swigregister(OdDbViewRepSource)

def OdDbViewRepSource_cast(*args):
    return _ODA_Drawings.OdDbViewRepSource_cast(*args)

def OdDbViewRepSource_desc(*args):
    return _ODA_Drawings.OdDbViewRepSource_desc(*args)

def OdDbViewRepSource_createObject(*args):
    return _ODA_Drawings.OdDbViewRepSource_createObject(*args)

class OdDbViewRepFusionSource(OdDbViewRepSource):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewRepFusionSource_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewRepFusionSource_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewRepFusionSource_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewRepFusionSource_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewRepFusionSource_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewRepFusionSource

    def type(self, *args):
        return _ODA_Drawings.OdDbViewRepFusionSource_type(self, *args)

# Register OdDbViewRepFusionSource in _ODA_Drawings:
_ODA_Drawings.OdDbViewRepFusionSource_swigregister(OdDbViewRepFusionSource)

def OdDbViewRepFusionSource_cast(*args):
    return _ODA_Drawings.OdDbViewRepFusionSource_cast(*args)

def OdDbViewRepFusionSource_desc(*args):
    return _ODA_Drawings.OdDbViewRepFusionSource_desc(*args)

def OdDbViewRepFusionSource_createObject(*args):
    return _ODA_Drawings.OdDbViewRepFusionSource_createObject(*args)

class OdDbViewRepCutDefinition(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewRepCutDefinition_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewRepCutDefinition_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewRepCutDefinition_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewRepCutDefinition_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewRepCutDefinition_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewRepCutDefinition

# Register OdDbViewRepCutDefinition in _ODA_Drawings:
_ODA_Drawings.OdDbViewRepCutDefinition_swigregister(OdDbViewRepCutDefinition)

def OdDbViewRepCutDefinition_cast(*args):
    return _ODA_Drawings.OdDbViewRepCutDefinition_cast(*args)

def OdDbViewRepCutDefinition_desc(*args):
    return _ODA_Drawings.OdDbViewRepCutDefinition_desc(*args)

def OdDbViewRepCutDefinition_createObject(*args):
    return _ODA_Drawings.OdDbViewRepCutDefinition_createObject(*args)

class OdDbDetailViewStyle(OdDbModelDocViewStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDetailViewStyle_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDetailViewStyle_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDetailViewStyle_createObject(*args)
    kOutsideBoundary = _ODA_Drawings.OdDbDetailViewStyle_kOutsideBoundary
    kOutsideBoundaryWithLeader = _ODA_Drawings.OdDbDetailViewStyle_kOutsideBoundaryWithLeader
    kOnBoundary = _ODA_Drawings.OdDbDetailViewStyle_kOnBoundary
    kOnBoundaryWithLeader = _ODA_Drawings.OdDbDetailViewStyle_kOnBoundaryWithLeader
    kSmooth = _ODA_Drawings.OdDbDetailViewStyle_kSmooth
    kSmoothWithBorder = _ODA_Drawings.OdDbDetailViewStyle_kSmoothWithBorder
    kSmoothWithConnectionLine = _ODA_Drawings.OdDbDetailViewStyle_kSmoothWithConnectionLine
    kJagged = _ODA_Drawings.OdDbDetailViewStyle_kJagged
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDetailViewStyle

    def identifierStyleId(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_identifierStyleId(self, *args)

    def setIdentifierStyleId(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setIdentifierStyleId(self, *args)

    def identifierColor(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_identifierColor(self, *args)

    def setIdentifierColor(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setIdentifierColor(self, *args)

    def identifierHeight(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_identifierHeight(self, *args)

    def setIdentifierHeight(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setIdentifierHeight(self, *args)

    def identifierOffset(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_identifierOffset(self, *args)

    def setIdentifierOffset(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setIdentifierOffset(self, *args)

    def identifierPlacement(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_identifierPlacement(self, *args)

    def setIdentifierPlacement(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setIdentifierPlacement(self, *args)

    def arrowSymbolId(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_arrowSymbolId(self, *args)

    def setArrowSymbolId(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setArrowSymbolId(self, *args)

    def arrowSymbolColor(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_arrowSymbolColor(self, *args)

    def setArrowSymbolColor(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setArrowSymbolColor(self, *args)

    def arrowSymbolSize(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_arrowSymbolSize(self, *args)

    def setArrowSymbolSize(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setArrowSymbolSize(self, *args)

    def showArrows(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_showArrows(self, *args)

    def setShowArrows(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setShowArrows(self, *args)

    def boundaryLineWeight(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_boundaryLineWeight(self, *args)

    def setBoundaryLineWeight(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setBoundaryLineWeight(self, *args)

    def boundaryLineColor(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_boundaryLineColor(self, *args)

    def setBoundaryLineColor(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setBoundaryLineColor(self, *args)

    def boundaryLineTypeId(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_boundaryLineTypeId(self, *args)

    def setBoundaryLineTypeId(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setBoundaryLineTypeId(self, *args)

    def connectionLineWeight(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_connectionLineWeight(self, *args)

    def setConnectionLineWeight(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setConnectionLineWeight(self, *args)

    def connectionLineColor(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_connectionLineColor(self, *args)

    def setConnectionLineColor(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setConnectionLineColor(self, *args)

    def connectionLineTypeId(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_connectionLineTypeId(self, *args)

    def setConnectionLineTypeId(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setConnectionLineTypeId(self, *args)

    def viewLabelTextStyleId(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_viewLabelTextStyleId(self, *args)

    def setViewLabelTextStyleId(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setViewLabelTextStyleId(self, *args)

    def viewLabelTextColor(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_viewLabelTextColor(self, *args)

    def setViewLabelTextColor(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setViewLabelTextColor(self, *args)

    def viewLabelTextHeight(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_viewLabelTextHeight(self, *args)

    def setViewLabelTextHeight(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setViewLabelTextHeight(self, *args)

    def viewLabelOffset(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_viewLabelOffset(self, *args)

    def setViewLabelOffset(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setViewLabelOffset(self, *args)

    def viewLabelAttachment(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_viewLabelAttachment(self, *args)

    def setViewLabelAttachment(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setViewLabelAttachment(self, *args)

    def viewLabelAlignment(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_viewLabelAlignment(self, *args)

    def setViewLabelAlignment(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setViewLabelAlignment(self, *args)

    def viewLabelPattern(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_viewLabelPattern(self, *args)

    def getViewLabelPattern(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_getViewLabelPattern(self, *args)

    def setViewLabelPattern(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setViewLabelPattern(self, *args)

    def showViewLabel(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_showViewLabel(self, *args)

    def setShowViewLabel(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setShowViewLabel(self, *args)

    def modelEdge(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_modelEdge(self, *args)

    def setModelEdge(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setModelEdge(self, *args)

    def borderLineWeight(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_borderLineWeight(self, *args)

    def setBorderLineWeight(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setBorderLineWeight(self, *args)

    def borderLineColor(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_borderLineColor(self, *args)

    def setBorderLineColor(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setBorderLineColor(self, *args)

    def borderLineTypeId(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_borderLineTypeId(self, *args)

    def setBorderLineTypeId(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_setBorderLineTypeId(self, *args)

    def postViewStyleToDb(self, *args):
        return _ODA_Drawings.OdDbDetailViewStyle_postViewStyleToDb(self, *args)

# Register OdDbDetailViewStyle in _ODA_Drawings:
_ODA_Drawings.OdDbDetailViewStyle_swigregister(OdDbDetailViewStyle)

def OdDbDetailViewStyle_cast(*args):
    return _ODA_Drawings.OdDbDetailViewStyle_cast(*args)

def OdDbDetailViewStyle_desc(*args):
    return _ODA_Drawings.OdDbDetailViewStyle_desc(*args)

def OdDbDetailViewStyle_createObject(*args):
    return _ODA_Drawings.OdDbDetailViewStyle_createObject(*args)

class OdDbViewSymbol(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewSymbol_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewSymbol_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewSymbol_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewSymbol_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewSymbol_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewSymbol

    def symbolStyleId(self, *args):
        return _ODA_Drawings.OdDbViewSymbol_symbolStyleId(self, *args)

    def setSymbolStyleId(self, *args):
        return _ODA_Drawings.OdDbViewSymbol_setSymbolStyleId(self, *args)

    def scale(self, *args):
        return _ODA_Drawings.OdDbViewSymbol_scale(self, *args)

    def setScale(self, *args):
        return _ODA_Drawings.OdDbViewSymbol_setScale(self, *args)

    def getIdentifier(self, *args):
        return _ODA_Drawings.OdDbViewSymbol_getIdentifier(self, *args)

    def setIdentifier(self, *args):
        return _ODA_Drawings.OdDbViewSymbol_setIdentifier(self, *args)

# Register OdDbViewSymbol in _ODA_Drawings:
_ODA_Drawings.OdDbViewSymbol_swigregister(OdDbViewSymbol)

def OdDbViewSymbol_cast(*args):
    return _ODA_Drawings.OdDbViewSymbol_cast(*args)

def OdDbViewSymbol_desc(*args):
    return _ODA_Drawings.OdDbViewSymbol_desc(*args)

def OdDbViewSymbol_createObject(*args):
    return _ODA_Drawings.OdDbViewSymbol_createObject(*args)

class OdDbProxyObject(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbProxyObject_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbProxyObject_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbProxyObject_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbProxyObject_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbProxyObject_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbProxyObject_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbProxyObject_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbProxyObject_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbProxyObject_dxfOutFields(self, *args)

    def dxfIn(self, *args):
        return _ODA_Drawings.OdDbProxyObject_dxfIn(self, *args)

    def proxyFlags(self, *args):
        return _ODA_Drawings.OdDbProxyObject_proxyFlags(self, *args)

    def originalClassName(self, *args):
        return _ODA_Drawings.OdDbProxyObject_originalClassName(self, *args)

    def originalDxfName(self, *args):
        return _ODA_Drawings.OdDbProxyObject_originalDxfName(self, *args)

    def applicationDescription(self, *args):
        return _ODA_Drawings.OdDbProxyObject_applicationDescription(self, *args)

    def getReferences(self, *args):
        return _ODA_Drawings.OdDbProxyObject_getReferences(self, *args)

    def mergeStyle(self, *args):
        return _ODA_Drawings.OdDbProxyObject_mergeStyle(self, *args)
    kNoOperation = _ODA_Drawings.OdDbProxyObject_kNoOperation
    kEraseAllowed = _ODA_Drawings.OdDbProxyObject_kEraseAllowed
    kCloningAllowed = _ODA_Drawings.OdDbProxyObject_kCloningAllowed
    kAllButCloningAllowed = _ODA_Drawings.OdDbProxyObject_kAllButCloningAllowed
    kAllAllowedBits = _ODA_Drawings.OdDbProxyObject_kAllAllowedBits
    kMergeIgnore = _ODA_Drawings.OdDbProxyObject_kMergeIgnore
    kMergeReplace = _ODA_Drawings.OdDbProxyObject_kMergeReplace
    kMergeMangleName = _ODA_Drawings.OdDbProxyObject_kMergeMangleName
    kDisableProxyWarning = _ODA_Drawings.OdDbProxyObject_kDisableProxyWarning

    def eraseAllowed(self, *args):
        return _ODA_Drawings.OdDbProxyObject_eraseAllowed(self, *args)

    def allButCloningAllowed(self, *args):
        return _ODA_Drawings.OdDbProxyObject_allButCloningAllowed(self, *args)

    def cloningAllowed(self, *args):
        return _ODA_Drawings.OdDbProxyObject_cloningAllowed(self, *args)

    def allOperationsAllowed(self, *args):
        return _ODA_Drawings.OdDbProxyObject_allOperationsAllowed(self, *args)

    def isR13FormatProxy(self, *args):
        return _ODA_Drawings.OdDbProxyObject_isR13FormatProxy(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbProxyObject_subErase(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbProxyObject

# Register OdDbProxyObject in _ODA_Drawings:
_ODA_Drawings.OdDbProxyObject_swigregister(OdDbProxyObject)

def OdDbProxyObject_cast(*args):
    return _ODA_Drawings.OdDbProxyObject_cast(*args)

def OdDbProxyObject_desc(*args):
    return _ODA_Drawings.OdDbProxyObject_desc(*args)

def OdDbProxyObject_createObject(*args):
    return _ODA_Drawings.OdDbProxyObject_createObject(*args)

class OdDbWipeout(OdDbRasterImage):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbWipeout_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbWipeout_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbWipeout_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbWipeout_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbWipeout_createObject(*args)

    def setBoundary(self, *args):
        return _ODA_Drawings.OdDbWipeout_setBoundary(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbWipeout_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbWipeout_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbWipeout_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbWipeout_dxfOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbWipeout_subWorldDraw(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbWipeout_subGetTransformedCopy(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbWipeout_subGetClassID(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbWipeout_subSetAttributes(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbWipeout

# Register OdDbWipeout in _ODA_Drawings:
_ODA_Drawings.OdDbWipeout_swigregister(OdDbWipeout)

def OdDbWipeout_cast(*args):
    return _ODA_Drawings.OdDbWipeout_cast(*args)

def OdDbWipeout_desc(*args):
    return _ODA_Drawings.OdDbWipeout_desc(*args)

def OdDbWipeout_createObject(*args):
    return _ODA_Drawings.OdDbWipeout_createObject(*args)

class RText(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.RText_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.RText_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.RText_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.RText_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.RText_createObject(*args)

    def normal(self, *args):
        return _ODA_Drawings.RText_normal(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.RText_setNormal(self, *args)

    def getPoint(self, *args):
        return _ODA_Drawings.RText_getPoint(self, *args)

    def setPoint(self, *args):
        return _ODA_Drawings.RText_setPoint(self, *args)

    def getRotAngle(self, *args):
        return _ODA_Drawings.RText_getRotAngle(self, *args)

    def setRotAngle(self, *args):
        return _ODA_Drawings.RText_setRotAngle(self, *args)

    def getHeight(self, *args):
        return _ODA_Drawings.RText_getHeight(self, *args)

    def setHeight(self, *args):
        return _ODA_Drawings.RText_setHeight(self, *args)

    def isStringExpression(self, *args):
        return _ODA_Drawings.RText_isStringExpression(self, *args)

    def setToExpression(self, *args):
        return _ODA_Drawings.RText_setToExpression(self, *args)

    def enabledMTextSequences(self, *args):
        return _ODA_Drawings.RText_enabledMTextSequences(self, *args)

    def enableMTextSequences(self, *args):
        return _ODA_Drawings.RText_enableMTextSequences(self, *args)

    def getStringContents(self, *args):
        return _ODA_Drawings.RText_getStringContents(self, *args)

    def setStringContents(self, *args):
        return _ODA_Drawings.RText_setStringContents(self, *args)

    def textStyleId(self, *args):
        return _ODA_Drawings.RText_textStyleId(self, *args)

    def textStyleName(self, *args):
        return _ODA_Drawings.RText_textStyleName(self, *args)

    def setTextStyle(self, *args):
        return _ODA_Drawings.RText_setTextStyle(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.RText_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.RText_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.RText_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.RText_dxfOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.RText_subWorldDraw(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.RText_subTransformBy(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.RText_subGetTransformedCopy(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.RText_subClose(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_RText

# Register RText in _ODA_Drawings:
_ODA_Drawings.RText_swigregister(RText)

def RText_cast(*args):
    return _ODA_Drawings.RText_cast(*args)

def RText_desc(*args):
    return _ODA_Drawings.RText_desc(*args)

def RText_createObject(*args):
    return _ODA_Drawings.RText_createObject(*args)

kFit = _ODA_Drawings.kFit
kLeft = _ODA_Drawings.kLeft
kRight = _ODA_Drawings.kRight
kCenter = _ODA_Drawings.kCenter
kOnConvexSide = _ODA_Drawings.kOnConvexSide
kOnConcaveSide = _ODA_Drawings.kOnConcaveSide
kOutwardFromCenter = _ODA_Drawings.kOutwardFromCenter
kInwardToTheCenter = _ODA_Drawings.kInwardToTheCenter
class OdDbArcAlignedText(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbArcAlignedText_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbArcAlignedText_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbArcAlignedText_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_dxfOutFields(self, *args)

    def textString(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_textString(self, *args)

    def setTextString(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setTextString(self, *args)

    def arcId(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_arcId(self, *args)

    def setArcId(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setArcId(self, *args)

    def center(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_center(self, *args)

    def setCenter(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setCenter(self, *args)

    def radius(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_radius(self, *args)

    def setRadius(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setRadius(self, *args)

    def setStartAngle(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setStartAngle(self, *args)

    def startAngle(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_startAngle(self, *args)

    def setEndAngle(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setEndAngle(self, *args)

    def endAngle(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_endAngle(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_normal(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setNormal(self, *args)

    def offsetFromArc(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_offsetFromArc(self, *args)

    def setOffsetFromArc(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setOffsetFromArc(self, *args)

    def rightOffset(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_rightOffset(self, *args)

    def setRightOffset(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setRightOffset(self, *args)

    def leftOffset(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_leftOffset(self, *args)

    def setLeftOffset(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setLeftOffset(self, *args)

    def textSize(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_textSize(self, *args)

    def setTextSize(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setTextSize(self, *args)

    def xScale(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_xScale(self, *args)

    def setXScale(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setXScale(self, *args)

    def charSpacing(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_charSpacing(self, *args)

    def setCharSpacing(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setCharSpacing(self, *args)

    def isReversedCharOrder(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_isReversedCharOrder(self, *args)

    def reverseCharOrder(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_reverseCharOrder(self, *args)

    def wizardFlag(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_wizardFlag(self, *args)

    def setWizardFlag(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setWizardFlag(self, *args)

    def alignment(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_alignment(self, *args)

    def setAlignment(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setAlignment(self, *args)

    def textPosition(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_textPosition(self, *args)

    def setTextPosition(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setTextPosition(self, *args)

    def textDirection(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_textDirection(self, *args)

    def setTextDirection(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setTextDirection(self, *args)

    def isUnderlined(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_isUnderlined(self, *args)

    def setUnderlined(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setUnderlined(self, *args)

    def textStyle(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_textStyle(self, *args)

    def setTextStyle(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setTextStyle(self, *args)

    def fileName(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_fileName(self, *args)

    def setFileName(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setFileName(self, *args)

    def bigFontFileName(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_bigFontFileName(self, *args)

    def setBigFontFileName(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setBigFontFileName(self, *args)

    def setFont(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_setFont(self, *args)

    def font(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_font(self, *args)

    def isShxFont(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_isShxFont(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_subWorldDraw(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_subTransformBy(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_subExplode(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_subClose(self, *args)

    def modified(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_modified(self, *args)

    def erased(self, *args):
        return _ODA_Drawings.OdDbArcAlignedText_erased(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbArcAlignedText

# Register OdDbArcAlignedText in _ODA_Drawings:
_ODA_Drawings.OdDbArcAlignedText_swigregister(OdDbArcAlignedText)

def OdDbArcAlignedText_cast(*args):
    return _ODA_Drawings.OdDbArcAlignedText_cast(*args)

def OdDbArcAlignedText_desc(*args):
    return _ODA_Drawings.OdDbArcAlignedText_desc(*args)

def OdDbArcAlignedText_createObject(*args):
    return _ODA_Drawings.OdDbArcAlignedText_createObject(*args)

class OdDbXrecordIterator(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbXrecordIterator_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbXrecordIterator_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbXrecordIterator_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbXrecordIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbXrecordIterator_createObject(*args)

    def start(self, *args):
        return _ODA_Drawings.OdDbXrecordIterator_start(self, *args)

    def done(self, *args):
        return _ODA_Drawings.OdDbXrecordIterator_done(self, *args)

    def next(self, *args):
        return _ODA_Drawings.OdDbXrecordIterator_next(self, *args)

    def curRestype(self, *args):
        return _ODA_Drawings.OdDbXrecordIterator_curRestype(self, *args)

    def getCurResbuf(self, *args):
        return _ODA_Drawings.OdDbXrecordIterator_getCurResbuf(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbXrecordIterator

# Register OdDbXrecordIterator in _ODA_Drawings:
_ODA_Drawings.OdDbXrecordIterator_swigregister(OdDbXrecordIterator)

def OdDbXrecordIterator_cast(*args):
    return _ODA_Drawings.OdDbXrecordIterator_cast(*args)

def OdDbXrecordIterator_desc(*args):
    return _ODA_Drawings.OdDbXrecordIterator_desc(*args)

def OdDbXrecordIterator_createObject(*args):
    return _ODA_Drawings.OdDbXrecordIterator_createObject(*args)

class OdDbXrecord(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbXrecord_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbXrecord_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbXrecord_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbXrecord_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbXrecord_createObject(*args)

    def rbChain(self, *args):
        return _ODA_Drawings.OdDbXrecord_rbChain(self, *args)

    def newIterator(self, *args):
        return _ODA_Drawings.OdDbXrecord_newIterator(self, *args)

    def setFromRbChain(self, *args):
        return _ODA_Drawings.OdDbXrecord_setFromRbChain(self, *args)

    def appendRbChain(self, *args):
        return _ODA_Drawings.OdDbXrecord_appendRbChain(self, *args)

    def isXlateReferences(self, *args):
        return _ODA_Drawings.OdDbXrecord_isXlateReferences(self, *args)

    def setXlateReferences(self, *args):
        return _ODA_Drawings.OdDbXrecord_setXlateReferences(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbXrecord_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbXrecord_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbXrecord_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbXrecord_dxfOutFields(self, *args)

    def mergeStyle(self, *args):
        return _ODA_Drawings.OdDbXrecord_mergeStyle(self, *args)

    def setMergeStyle(self, *args):
        return _ODA_Drawings.OdDbXrecord_setMergeStyle(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbXrecord_subGetClassID(self, *args)
    kOpenExisting = _ODA_Drawings.OdDbXrecord_kOpenExisting
    kCreateIfNotFound = _ODA_Drawings.OdDbXrecord_kCreateIfNotFound

    @staticmethod
    def open(*args):
        return _ODA_Drawings.OdDbXrecord_open(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbXrecord

# Register OdDbXrecord in _ODA_Drawings:
_ODA_Drawings.OdDbXrecord_swigregister(OdDbXrecord)

def OdDbXrecord_cast(*args):
    return _ODA_Drawings.OdDbXrecord_cast(*args)

def OdDbXrecord_desc(*args):
    return _ODA_Drawings.OdDbXrecord_desc(*args)

def OdDbXrecord_createObject(*args):
    return _ODA_Drawings.OdDbXrecord_createObject(*args)

def OdDbXrecord_open(*args):
    return _ODA_Drawings.OdDbXrecord_open(*args)

class OdDbTrace(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbTrace_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbTrace_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbTrace_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbTrace_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbTrace_createObject(*args)

    def getPointAt(self, *args):
        return _ODA_Drawings.OdDbTrace_getPointAt(self, *args)

    def setPointAt(self, *args):
        return _ODA_Drawings.OdDbTrace_setPointAt(self, *args)

    def thickness(self, *args):
        return _ODA_Drawings.OdDbTrace_thickness(self, *args)

    def setThickness(self, *args):
        return _ODA_Drawings.OdDbTrace_setThickness(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbTrace_normal(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDbTrace_setNormal(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbTrace_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbTrace_getPlane(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbTrace_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbTrace_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbTrace_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbTrace_dxfOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbTrace_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbTrace_subViewportDraw(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbTrace_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbTrace_dxfOutFields_R12(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbTrace_subGetClassID(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbTrace_subTransformBy(self, *args)

    def subGetSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDbTrace_subGetSubentPathsAtGsMarker(self, *args)

    def subGetGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbTrace_subGetGsMarkersAtSubentPath(self, *args)

    def getEcs(self, *args):
        return _ODA_Drawings.OdDbTrace_getEcs(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbTrace

# Register OdDbTrace in _ODA_Drawings:
_ODA_Drawings.OdDbTrace_swigregister(OdDbTrace)

def OdDbTrace_cast(*args):
    return _ODA_Drawings.OdDbTrace_cast(*args)

def OdDbTrace_desc(*args):
    return _ODA_Drawings.OdDbTrace_desc(*args)

def OdDbTrace_createObject(*args):
    return _ODA_Drawings.OdDbTrace_createObject(*args)

class OdDbSolid(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSolid_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSolid_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSolid_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSolid_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSolid_createObject(*args)

    def getPointAt(self, *args):
        return _ODA_Drawings.OdDbSolid_getPointAt(self, *args)

    def setPointAt(self, *args):
        return _ODA_Drawings.OdDbSolid_setPointAt(self, *args)

    def thickness(self, *args):
        return _ODA_Drawings.OdDbSolid_thickness(self, *args)

    def setThickness(self, *args):
        return _ODA_Drawings.OdDbSolid_setThickness(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbSolid_normal(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDbSolid_setNormal(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbSolid_getPlane(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbSolid_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbSolid_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbSolid_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbSolid_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbSolid_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbSolid_dxfOutFields_R12(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbSolid_subGetClassID(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbSolid_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbSolid_subViewportDraw(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbSolid_subTransformBy(self, *args)

    def subGetSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDbSolid_subGetSubentPathsAtGsMarker(self, *args)

    def subGetGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbSolid_subGetGsMarkersAtSubentPath(self, *args)

    def getEcs(self, *args):
        return _ODA_Drawings.OdDbSolid_getEcs(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSolid

# Register OdDbSolid in _ODA_Drawings:
_ODA_Drawings.OdDbSolid_swigregister(OdDbSolid)

def OdDbSolid_cast(*args):
    return _ODA_Drawings.OdDbSolid_cast(*args)

def OdDbSolid_desc(*args):
    return _ODA_Drawings.OdDbSolid_desc(*args)

def OdDbSolid_createObject(*args):
    return _ODA_Drawings.OdDbSolid_createObject(*args)

class OdDbPolyFaceMesh(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPolyFaceMesh_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPolyFaceMesh_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPolyFaceMesh_createObject(*args)

    def numVertices(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_numVertices(self, *args)

    def numFaces(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_numFaces(self, *args)

    def appendVertex(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_appendVertex(self, *args)

    def appendFaceRecord(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_appendFaceRecord(self, *args)

    def openVertex(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_openVertex(self, *args)

    def openSequenceEnd(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_openSequenceEnd(self, *args)

    def clear(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_clear(self, *args)

    def vertexIterator(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_vertexIterator(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_subWorldDraw(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_dxfOutFields(self, *args)

    def dxfOut(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_dxfOut(self, *args)

    def dxfIn(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_dxfIn(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_subGetClassID(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_dxfOutFields_R12(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_subClose(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_getPlane(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_subTransformBy(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_subGetGeomExtents(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_subExplode(self, *args)

    def explodeGeometry(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_explodeGeometry(self, *args)

    def subGetSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_subGetSubentPathsAtGsMarker(self, *args)

    def subGetGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMesh_subGetGsMarkersAtSubentPath(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPolyFaceMesh

# Register OdDbPolyFaceMesh in _ODA_Drawings:
_ODA_Drawings.OdDbPolyFaceMesh_swigregister(OdDbPolyFaceMesh)

def OdDbPolyFaceMesh_cast(*args):
    return _ODA_Drawings.OdDbPolyFaceMesh_cast(*args)

def OdDbPolyFaceMesh_desc(*args):
    return _ODA_Drawings.OdDbPolyFaceMesh_desc(*args)

def OdDbPolyFaceMesh_createObject(*args):
    return _ODA_Drawings.OdDbPolyFaceMesh_createObject(*args)

class OdDbDiametricDimension(OdDbDimension):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDiametricDimension_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDiametricDimension_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDiametricDimension_createObject(*args)

    def setLeaderLength(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_setLeaderLength(self, *args)

    def leaderLength(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_leaderLength(self, *args)

    def chordPoint(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_chordPoint(self, *args)

    def setChordPoint(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_setChordPoint(self, *args)

    def farChordPoint(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_farChordPoint(self, *args)

    def setFarChordPoint(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_setFarChordPoint(self, *args)

    def extArcOn(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_extArcOn(self, *args)

    def extArcStartAngle(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_extArcStartAngle(self, *args)

    def setExtArcStartAngle(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_setExtArcStartAngle(self, *args)

    def extArcEndAngle(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_extArcEndAngle(self, *args)

    def setExtArcEndAngle(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_setExtArcEndAngle(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_dxfOutFields_R12(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbDiametricDimension_subGetClassID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDiametricDimension

# Register OdDbDiametricDimension in _ODA_Drawings:
_ODA_Drawings.OdDbDiametricDimension_swigregister(OdDbDiametricDimension)

def OdDbDiametricDimension_cast(*args):
    return _ODA_Drawings.OdDbDiametricDimension_cast(*args)

def OdDbDiametricDimension_desc(*args):
    return _ODA_Drawings.OdDbDiametricDimension_desc(*args)

def OdDbDiametricDimension_createObject(*args):
    return _ODA_Drawings.OdDbDiametricDimension_createObject(*args)

class OdDbRadialDimension(OdDbDimension):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRadialDimension_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRadialDimension_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRadialDimension_createObject(*args)

    def setLeaderLength(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_setLeaderLength(self, *args)

    def leaderLength(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_leaderLength(self, *args)

    def center(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_center(self, *args)

    def setCenter(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_setCenter(self, *args)

    def chordPoint(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_chordPoint(self, *args)

    def setChordPoint(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_setChordPoint(self, *args)

    def extArcOn(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_extArcOn(self, *args)

    def extArcStartAngle(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_extArcStartAngle(self, *args)

    def setExtArcStartAngle(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_setExtArcStartAngle(self, *args)

    def extArcEndAngle(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_extArcEndAngle(self, *args)

    def setExtArcEndAngle(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_setExtArcEndAngle(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_dxfOutFields_R12(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbRadialDimension_subGetClassID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRadialDimension

# Register OdDbRadialDimension in _ODA_Drawings:
_ODA_Drawings.OdDbRadialDimension_swigregister(OdDbRadialDimension)

def OdDbRadialDimension_cast(*args):
    return _ODA_Drawings.OdDbRadialDimension_cast(*args)

def OdDbRadialDimension_desc(*args):
    return _ODA_Drawings.OdDbRadialDimension_desc(*args)

def OdDbRadialDimension_createObject(*args):
    return _ODA_Drawings.OdDbRadialDimension_createObject(*args)

class OdDb2LineAngularDimension(OdDbDimension):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDb2LineAngularDimension_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDb2LineAngularDimension_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDb2LineAngularDimension_createObject(*args)

    def arcPoint(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_arcPoint(self, *args)

    def setArcPoint(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_setArcPoint(self, *args)

    def xLine1Start(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_xLine1Start(self, *args)

    def setXLine1Start(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_setXLine1Start(self, *args)

    def xLine1End(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_xLine1End(self, *args)

    def setXLine1End(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_setXLine1End(self, *args)

    def xLine2Start(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_xLine2Start(self, *args)

    def setXLine2Start(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_setXLine2Start(self, *args)

    def xLine2End(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_xLine2End(self, *args)

    def setXLine2End(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_setXLine2End(self, *args)

    def extArcOn(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_extArcOn(self, *args)

    def setExtArcOn(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_setExtArcOn(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_dxfOutFields_R12(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDb2LineAngularDimension_subGetClassID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDb2LineAngularDimension

# Register OdDb2LineAngularDimension in _ODA_Drawings:
_ODA_Drawings.OdDb2LineAngularDimension_swigregister(OdDb2LineAngularDimension)

def OdDb2LineAngularDimension_cast(*args):
    return _ODA_Drawings.OdDb2LineAngularDimension_cast(*args)

def OdDb2LineAngularDimension_desc(*args):
    return _ODA_Drawings.OdDb2LineAngularDimension_desc(*args)

def OdDb2LineAngularDimension_createObject(*args):
    return _ODA_Drawings.OdDb2LineAngularDimension_createObject(*args)

class OdDb3PointAngularDimension(OdDbDimension):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDb3PointAngularDimension_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDb3PointAngularDimension_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDb3PointAngularDimension_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDb3PointAngularDimension_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDb3PointAngularDimension_createObject(*args)

    def arcPoint(self, *args):
        return _ODA_Drawings.OdDb3PointAngularDimension_arcPoint(self, *args)

    def setArcPoint(self, *args):
        return _ODA_Drawings.OdDb3PointAngularDimension_setArcPoint(self, *args)

    def xLine1Point(self, *args):
        return _ODA_Drawings.OdDb3PointAngularDimension_xLine1Point(self, *args)

    def setXLine1Point(self, *args):
        return _ODA_Drawings.OdDb3PointAngularDimension_setXLine1Point(self, *args)

    def xLine2Point(self, *args):
        return _ODA_Drawings.OdDb3PointAngularDimension_xLine2Point(self, *args)

    def setXLine2Point(self, *args):
        return _ODA_Drawings.OdDb3PointAngularDimension_setXLine2Point(self, *args)

    def centerPoint(self, *args):
        return _ODA_Drawings.OdDb3PointAngularDimension_centerPoint(self, *args)

    def extArcOn(self, *args):
        return _ODA_Drawings.OdDb3PointAngularDimension_extArcOn(self, *args)

    def setExtArcOn(self, *args):
        return _ODA_Drawings.OdDb3PointAngularDimension_setExtArcOn(self, *args)

    def setCenterPoint(self, *args):
        return _ODA_Drawings.OdDb3PointAngularDimension_setCenterPoint(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDb3PointAngularDimension_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDb3PointAngularDimension_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDb3PointAngularDimension_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDb3PointAngularDimension_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDb3PointAngularDimension_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDb3PointAngularDimension_dxfOutFields_R12(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDb3PointAngularDimension_subGetClassID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDb3PointAngularDimension

# Register OdDb3PointAngularDimension in _ODA_Drawings:
_ODA_Drawings.OdDb3PointAngularDimension_swigregister(OdDb3PointAngularDimension)

def OdDb3PointAngularDimension_cast(*args):
    return _ODA_Drawings.OdDb3PointAngularDimension_cast(*args)

def OdDb3PointAngularDimension_desc(*args):
    return _ODA_Drawings.OdDb3PointAngularDimension_desc(*args)

def OdDb3PointAngularDimension_createObject(*args):
    return _ODA_Drawings.OdDb3PointAngularDimension_createObject(*args)

class OdDbRotatedDimension(OdDbDimension):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRotatedDimension_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRotatedDimension_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRotatedDimension_createObject(*args)

    def xLine1Point(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_xLine1Point(self, *args)

    def setXLine1Point(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_setXLine1Point(self, *args)

    def xLine2Point(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_xLine2Point(self, *args)

    def setXLine2Point(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_setXLine2Point(self, *args)

    def dimLinePoint(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_dimLinePoint(self, *args)

    def setDimLinePoint(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_setDimLinePoint(self, *args)

    def oblique(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_oblique(self, *args)

    def setOblique(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_setOblique(self, *args)

    def rotation(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_rotation(self, *args)

    def setRotation(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_setRotation(self, *args)

    def jogSymbolOn(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_jogSymbolOn(self, *args)

    def setJogSymbolOn(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_setJogSymbolOn(self, *args)

    def jogSymbolPosition(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_jogSymbolPosition(self, *args)

    def setJogSymbolPosition(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_setJogSymbolPosition(self, *args)

    def jogSymbolHeight(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_jogSymbolHeight(self, *args)

    def setJogSymbolHeight(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_setJogSymbolHeight(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_dxfOutFields_R12(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbRotatedDimension_subGetClassID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRotatedDimension

# Register OdDbRotatedDimension in _ODA_Drawings:
_ODA_Drawings.OdDbRotatedDimension_swigregister(OdDbRotatedDimension)

def OdDbRotatedDimension_cast(*args):
    return _ODA_Drawings.OdDbRotatedDimension_cast(*args)

def OdDbRotatedDimension_desc(*args):
    return _ODA_Drawings.OdDbRotatedDimension_desc(*args)

def OdDbRotatedDimension_createObject(*args):
    return _ODA_Drawings.OdDbRotatedDimension_createObject(*args)

class OdDbOrdinateDimension(OdDbDimension):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbOrdinateDimension_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbOrdinateDimension_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimension_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimension_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbOrdinateDimension_createObject(*args)

    def isUsingXAxis(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimension_isUsingXAxis(self, *args)

    def isUsingYAxis(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimension_isUsingYAxis(self, *args)

    def useXAxis(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimension_useXAxis(self, *args)

    def useYAxis(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimension_useYAxis(self, *args)

    def origin(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimension_origin(self, *args)

    def setOrigin(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimension_setOrigin(self, *args)

    def definingPoint(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimension_definingPoint(self, *args)

    def setDefiningPoint(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimension_setDefiningPoint(self, *args)

    def leaderEndPoint(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimension_leaderEndPoint(self, *args)

    def setLeaderEndPoint(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimension_setLeaderEndPoint(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimension_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimension_dxfOutFields_R12(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimension_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimension_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimension_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimension_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimension_subGetClassID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbOrdinateDimension

# Register OdDbOrdinateDimension in _ODA_Drawings:
_ODA_Drawings.OdDbOrdinateDimension_swigregister(OdDbOrdinateDimension)

def OdDbOrdinateDimension_cast(*args):
    return _ODA_Drawings.OdDbOrdinateDimension_cast(*args)

def OdDbOrdinateDimension_desc(*args):
    return _ODA_Drawings.OdDbOrdinateDimension_desc(*args)

def OdDbOrdinateDimension_createObject(*args):
    return _ODA_Drawings.OdDbOrdinateDimension_createObject(*args)

class OdDbProxyEntity(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbProxyEntity_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbProxyEntity_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbProxyEntity_createObject(*args)
    kNoMetafile = _ODA_Drawings.OdDbProxyEntity_kNoMetafile
    kBoundingBox = _ODA_Drawings.OdDbProxyEntity_kBoundingBox
    kFullGraphics = _ODA_Drawings.OdDbProxyEntity_kFullGraphics

    def graphicsMetafileType(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_graphicsMetafileType(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_subExplode(self, *args)
    kNoOperation = _ODA_Drawings.OdDbProxyEntity_kNoOperation
    kEraseAllowed = _ODA_Drawings.OdDbProxyEntity_kEraseAllowed
    kTransformAllowed = _ODA_Drawings.OdDbProxyEntity_kTransformAllowed
    kColorChangeAllowed = _ODA_Drawings.OdDbProxyEntity_kColorChangeAllowed
    kLayerChangeAllowed = _ODA_Drawings.OdDbProxyEntity_kLayerChangeAllowed
    kLinetypeChangeAllowed = _ODA_Drawings.OdDbProxyEntity_kLinetypeChangeAllowed
    kLinetypeScaleChangeAllowed = _ODA_Drawings.OdDbProxyEntity_kLinetypeScaleChangeAllowed
    kVisibilityChangeAllowed = _ODA_Drawings.OdDbProxyEntity_kVisibilityChangeAllowed
    kCloningAllowed = _ODA_Drawings.OdDbProxyEntity_kCloningAllowed
    kLineWeightChangeAllowed = _ODA_Drawings.OdDbProxyEntity_kLineWeightChangeAllowed
    kPlotStyleNameChangeAllowed = _ODA_Drawings.OdDbProxyEntity_kPlotStyleNameChangeAllowed
    kDisableProxyWarning = _ODA_Drawings.OdDbProxyEntity_kDisableProxyWarning
    kMaterialChangeAllowed = _ODA_Drawings.OdDbProxyEntity_kMaterialChangeAllowed
    kAllButCloningAllowed = _ODA_Drawings.OdDbProxyEntity_kAllButCloningAllowed
    kAllAllowedBits = _ODA_Drawings.OdDbProxyEntity_kAllAllowedBits

    def proxyFlags(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_proxyFlags(self, *args)

    def eraseAllowed(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_eraseAllowed(self, *args)

    def transformAllowed(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_transformAllowed(self, *args)

    def colorChangeAllowed(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_colorChangeAllowed(self, *args)

    def layerChangeAllowed(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_layerChangeAllowed(self, *args)

    def linetypeChangeAllowed(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_linetypeChangeAllowed(self, *args)

    def linetypeScaleChangeAllowed(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_linetypeScaleChangeAllowed(self, *args)

    def visibilityChangeAllowed(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_visibilityChangeAllowed(self, *args)

    def lineWeightChangeAllowed(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_lineWeightChangeAllowed(self, *args)

    def plotStyleNameChangeAllowed(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_plotStyleNameChangeAllowed(self, *args)

    def materialChangeAllowed(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_materialChangeAllowed(self, *args)

    def cloningAllowed(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_cloningAllowed(self, *args)

    def allButCloningAllowed(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_allButCloningAllowed(self, *args)

    def allOperationsAllowed(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_allOperationsAllowed(self, *args)

    def isR13FormatProxy(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_isR13FormatProxy(self, *args)

    def originalClassName(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_originalClassName(self, *args)

    def originalDxfName(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_originalDxfName(self, *args)

    def applicationDescription(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_applicationDescription(self, *args)

    def getReferences(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_getReferences(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_dxfOutFields(self, *args)

    def dxfIn(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_dxfIn(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_subTransformBy(self, *args)

    def setColor(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_setColor(self, *args)

    def setColorIndex(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_setColorIndex(self, *args)

    def setColorId(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_setColorId(self, *args)

    def setPlotStyleName(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_setPlotStyleName(self, *args)

    def setLayer(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_setLayer(self, *args)

    def setLinetype(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_setLinetype(self, *args)

    def setLinetypeScale(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_setLinetypeScale(self, *args)

    def subSetVisibility(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_subSetVisibility(self, *args)

    def setLineWeight(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_setLineWeight(self, *args)

    def setMaterial(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_setMaterial(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbProxyEntity_subErase(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbProxyEntity

# Register OdDbProxyEntity in _ODA_Drawings:
_ODA_Drawings.OdDbProxyEntity_swigregister(OdDbProxyEntity)

def OdDbProxyEntity_cast(*args):
    return _ODA_Drawings.OdDbProxyEntity_cast(*args)

def OdDbProxyEntity_desc(*args):
    return _ODA_Drawings.OdDbProxyEntity_desc(*args)

def OdDbProxyEntity_createObject(*args):
    return _ODA_Drawings.OdDbProxyEntity_createObject(*args)

class OdDbPolyline(OdDbCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPolyline_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPolyline_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPolyline_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPolyline_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPolyline_createObject(*args)

    def convertFrom(self, *args):
        return _ODA_Drawings.OdDbPolyline_convertFrom(self, *args)

    def convertTo(self, *args):
        return _ODA_Drawings.OdDbPolyline_convertTo(self, *args)

    def getPointAt(self, *args):
        return _ODA_Drawings.OdDbPolyline_getPointAt(self, *args)
    kLine = _ODA_Drawings.OdDbPolyline_kLine
    kArc = _ODA_Drawings.OdDbPolyline_kArc
    kCoincident = _ODA_Drawings.OdDbPolyline_kCoincident
    kPoint = _ODA_Drawings.OdDbPolyline_kPoint
    kEmpty = _ODA_Drawings.OdDbPolyline_kEmpty

    def segType(self, *args):
        return _ODA_Drawings.OdDbPolyline_segType(self, *args)

    def getLineSegAt(self, *args):
        return _ODA_Drawings.OdDbPolyline_getLineSegAt(self, *args)

    def getArcSegAt(self, *args):
        return _ODA_Drawings.OdDbPolyline_getArcSegAt(self, *args)

    def onSegAt(self, *args):
        return _ODA_Drawings.OdDbPolyline_onSegAt(self, *args)

    def setClosed(self, *args):
        return _ODA_Drawings.OdDbPolyline_setClosed(self, *args)

    def setPlinegen(self, *args):
        return _ODA_Drawings.OdDbPolyline_setPlinegen(self, *args)

    def setElevation(self, *args):
        return _ODA_Drawings.OdDbPolyline_setElevation(self, *args)

    def setThickness(self, *args):
        return _ODA_Drawings.OdDbPolyline_setThickness(self, *args)

    def setConstantWidth(self, *args):
        return _ODA_Drawings.OdDbPolyline_setConstantWidth(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDbPolyline_setNormal(self, *args)

    def isOnlyLines(self, *args):
        return _ODA_Drawings.OdDbPolyline_isOnlyLines(self, *args)

    def hasPlinegen(self, *args):
        return _ODA_Drawings.OdDbPolyline_hasPlinegen(self, *args)

    def elevation(self, *args):
        return _ODA_Drawings.OdDbPolyline_elevation(self, *args)

    def thickness(self, *args):
        return _ODA_Drawings.OdDbPolyline_thickness(self, *args)

    def getConstantWidth(self, *args):
        return _ODA_Drawings.OdDbPolyline_getConstantWidth(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbPolyline_normal(self, *args)

    def addVertexAt(self, *args):
        return _ODA_Drawings.OdDbPolyline_addVertexAt(self, *args)

    def removeVertexAt(self, *args):
        return _ODA_Drawings.OdDbPolyline_removeVertexAt(self, *args)

    def numVerts(self, *args):
        return _ODA_Drawings.OdDbPolyline_numVerts(self, *args)

    def getBulgeAt(self, *args):
        return _ODA_Drawings.OdDbPolyline_getBulgeAt(self, *args)

    def getVertexIdentifierAt(self, *args):
        return _ODA_Drawings.OdDbPolyline_getVertexIdentifierAt(self, *args)

    def getWidthsAt(self, *args):
        return _ODA_Drawings.OdDbPolyline_getWidthsAt(self, *args)

    def setPointAt(self, *args):
        return _ODA_Drawings.OdDbPolyline_setPointAt(self, *args)

    def setBulgeAt(self, *args):
        return _ODA_Drawings.OdDbPolyline_setBulgeAt(self, *args)

    def setVertexIdentifierAt(self, *args):
        return _ODA_Drawings.OdDbPolyline_setVertexIdentifierAt(self, *args)

    def setWidthsAt(self, *args):
        return _ODA_Drawings.OdDbPolyline_setWidthsAt(self, *args)

    def minimizeMemory(self, *args):
        return _ODA_Drawings.OdDbPolyline_minimizeMemory(self, *args)

    def maximizeMemory(self, *args):
        return _ODA_Drawings.OdDbPolyline_maximizeMemory(self, *args)

    def reset(self, *args):
        return _ODA_Drawings.OdDbPolyline_reset(self, *args)

    def hasBulges(self, *args):
        return _ODA_Drawings.OdDbPolyline_hasBulges(self, *args)

    def hasVertexIdentifiers(self, *args):
        return _ODA_Drawings.OdDbPolyline_hasVertexIdentifiers(self, *args)

    def hasWidth(self, *args):
        return _ODA_Drawings.OdDbPolyline_hasWidth(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbPolyline_subGetTransformedCopy(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbPolyline_subTransformBy(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbPolyline_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbPolyline_subViewportDraw(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPolyline_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPolyline_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPolyline_dxfInFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbPolyline_dxfInFields_R12(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPolyline_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbPolyline_subGetClassID(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbPolyline_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbPolyline_getPlane(self, *args)

    def isClosed(self, *args):
        return _ODA_Drawings.OdDbPolyline_isClosed(self, *args)

    def isPeriodic(self, *args):
        return _ODA_Drawings.OdDbPolyline_isPeriodic(self, *args)

    def getStartParam(self, *args):
        return _ODA_Drawings.OdDbPolyline_getStartParam(self, *args)

    def getEndParam(self, *args):
        return _ODA_Drawings.OdDbPolyline_getEndParam(self, *args)

    def getStartPoint(self, *args):
        return _ODA_Drawings.OdDbPolyline_getStartPoint(self, *args)

    def getEndPoint(self, *args):
        return _ODA_Drawings.OdDbPolyline_getEndPoint(self, *args)

    def getPointAtParam(self, *args):
        return _ODA_Drawings.OdDbPolyline_getPointAtParam(self, *args)

    def getParamAtPoint(self, *args):
        return _ODA_Drawings.OdDbPolyline_getParamAtPoint(self, *args)

    def getFirstDeriv(self, *args):
        return _ODA_Drawings.OdDbPolyline_getFirstDeriv(self, *args)

    def getSecondDeriv(self, *args):
        return _ODA_Drawings.OdDbPolyline_getSecondDeriv(self, *args)

    def getArea(self, *args):
        return _ODA_Drawings.OdDbPolyline_getArea(self, *args)

    def getDistAtParam(self, *args):
        return _ODA_Drawings.OdDbPolyline_getDistAtParam(self, *args)

    def getParamAtDist(self, *args):
        return _ODA_Drawings.OdDbPolyline_getParamAtDist(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbPolyline_subExplode(self, *args)

    def explodeGeometry(self, *args):
        return _ODA_Drawings.OdDbPolyline_explodeGeometry(self, *args)

    def subGetSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDbPolyline_subGetSubentPathsAtGsMarker(self, *args)

    def subGetGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbPolyline_subGetGsMarkersAtSubentPath(self, *args)

    def subSubentPtr(self, *args):
        return _ODA_Drawings.OdDbPolyline_subSubentPtr(self, *args)

    def reverseCurve(self, *args):
        return _ODA_Drawings.OdDbPolyline_reverseCurve(self, *args)

    def getEcs(self, *args):
        return _ODA_Drawings.OdDbPolyline_getEcs(self, *args)

    def getOdGeCurve(self, *args):
        return _ODA_Drawings.OdDbPolyline_getOdGeCurve(self, *args)

    def setFromOdGeCurve(self, *args):
        return _ODA_Drawings.OdDbPolyline_setFromOdGeCurve(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPolyline

# Register OdDbPolyline in _ODA_Drawings:
_ODA_Drawings.OdDbPolyline_swigregister(OdDbPolyline)

def OdDbPolyline_cast(*args):
    return _ODA_Drawings.OdDbPolyline_cast(*args)

def OdDbPolyline_desc(*args):
    return _ODA_Drawings.OdDbPolyline_desc(*args)

def OdDbPolyline_createObject(*args):
    return _ODA_Drawings.OdDbPolyline_createObject(*args)

class OdDbXline(OdDbCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbXline_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbXline_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbXline_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbXline_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbXline_createObject(*args)

    def basePoint(self, *args):
        return _ODA_Drawings.OdDbXline_basePoint(self, *args)

    def setBasePoint(self, *args):
        return _ODA_Drawings.OdDbXline_setBasePoint(self, *args)

    def unitDir(self, *args):
        return _ODA_Drawings.OdDbXline_unitDir(self, *args)

    def setUnitDir(self, *args):
        return _ODA_Drawings.OdDbXline_setUnitDir(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbXline_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbXline_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbXline_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbXline_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbXline_subGetClassID(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbXline_subWorldDraw(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbXline_subGetGeomExtents(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbXline_subTransformBy(self, *args)

    def isClosed(self, *args):
        return _ODA_Drawings.OdDbXline_isClosed(self, *args)

    def isPeriodic(self, *args):
        return _ODA_Drawings.OdDbXline_isPeriodic(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbXline_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbXline_getPlane(self, *args)

    def getStartParam(self, *args):
        return _ODA_Drawings.OdDbXline_getStartParam(self, *args)

    def getEndParam(self, *args):
        return _ODA_Drawings.OdDbXline_getEndParam(self, *args)

    def getStartPoint(self, *args):
        return _ODA_Drawings.OdDbXline_getStartPoint(self, *args)

    def getEndPoint(self, *args):
        return _ODA_Drawings.OdDbXline_getEndPoint(self, *args)

    def getPointAtParam(self, *args):
        return _ODA_Drawings.OdDbXline_getPointAtParam(self, *args)

    def getParamAtPoint(self, *args):
        return _ODA_Drawings.OdDbXline_getParamAtPoint(self, *args)

    def getDistAtParam(self, *args):
        return _ODA_Drawings.OdDbXline_getDistAtParam(self, *args)

    def getParamAtDist(self, *args):
        return _ODA_Drawings.OdDbXline_getParamAtDist(self, *args)

    def getFirstDeriv(self, *args):
        return _ODA_Drawings.OdDbXline_getFirstDeriv(self, *args)

    def getSecondDeriv(self, *args):
        return _ODA_Drawings.OdDbXline_getSecondDeriv(self, *args)

    def getArea(self, *args):
        return _ODA_Drawings.OdDbXline_getArea(self, *args)

    def getOdGeCurve(self, *args):
        return _ODA_Drawings.OdDbXline_getOdGeCurve(self, *args)

    def setFromOdGeCurve(self, *args):
        return _ODA_Drawings.OdDbXline_setFromOdGeCurve(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbXline

# Register OdDbXline in _ODA_Drawings:
_ODA_Drawings.OdDbXline_swigregister(OdDbXline)

def OdDbXline_cast(*args):
    return _ODA_Drawings.OdDbXline_cast(*args)

def OdDbXline_desc(*args):
    return _ODA_Drawings.OdDbXline_desc(*args)

def OdDbXline_createObject(*args):
    return _ODA_Drawings.OdDbXline_createObject(*args)

class OdDbFaceRecord(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbFaceRecord_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbFaceRecord_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbFaceRecord_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbFaceRecord_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbFaceRecord_createObject(*args)

    def getVertexAt(self, *args):
        return _ODA_Drawings.OdDbFaceRecord_getVertexAt(self, *args)

    def setVertexAt(self, *args):
        return _ODA_Drawings.OdDbFaceRecord_setVertexAt(self, *args)

    def isEdgeVisibleAt(self, *args):
        return _ODA_Drawings.OdDbFaceRecord_isEdgeVisibleAt(self, *args)

    def makeEdgeVisibleAt(self, *args):
        return _ODA_Drawings.OdDbFaceRecord_makeEdgeVisibleAt(self, *args)

    def makeEdgeInvisibleAt(self, *args):
        return _ODA_Drawings.OdDbFaceRecord_makeEdgeInvisibleAt(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbFaceRecord_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbFaceRecord_dxfOutFields_R12(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbFaceRecord_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbFaceRecord_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbFaceRecord_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbFaceRecord_dxfOutFields(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbFaceRecord_subErase(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbFaceRecord_subGetGeomExtents(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbFaceRecord

# Register OdDbFaceRecord in _ODA_Drawings:
_ODA_Drawings.OdDbFaceRecord_swigregister(OdDbFaceRecord)

def OdDbFaceRecord_cast(*args):
    return _ODA_Drawings.OdDbFaceRecord_cast(*args)

def OdDbFaceRecord_desc(*args):
    return _ODA_Drawings.OdDbFaceRecord_desc(*args)

def OdDbFaceRecord_createObject(*args):
    return _ODA_Drawings.OdDbFaceRecord_createObject(*args)

class OdDbPolyFaceMeshVertex(OdDbVertex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPolyFaceMeshVertex_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPolyFaceMeshVertex_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMeshVertex_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMeshVertex_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPolyFaceMeshVertex_createObject(*args)

    def position(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMeshVertex_position(self, *args)

    def setPosition(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMeshVertex_setPosition(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMeshVertex_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMeshVertex_dwgOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMeshVertex_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMeshVertex_dxfOutFields_R12(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbPolyFaceMeshVertex_subErase(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPolyFaceMeshVertex

# Register OdDbPolyFaceMeshVertex in _ODA_Drawings:
_ODA_Drawings.OdDbPolyFaceMeshVertex_swigregister(OdDbPolyFaceMeshVertex)

def OdDbPolyFaceMeshVertex_cast(*args):
    return _ODA_Drawings.OdDbPolyFaceMeshVertex_cast(*args)

def OdDbPolyFaceMeshVertex_desc(*args):
    return _ODA_Drawings.OdDbPolyFaceMeshVertex_desc(*args)

def OdDbPolyFaceMeshVertex_createObject(*args):
    return _ODA_Drawings.OdDbPolyFaceMeshVertex_createObject(*args)

class OdDbFcf(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbFcf_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbFcf_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbFcf_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbFcf_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbFcf_createObject(*args)
    kAll = _ODA_Drawings.OdDbFcf_kAll

    def setText(self, *args):
        return _ODA_Drawings.OdDbFcf_setText(self, *args)

    def text(self, *args):
        return _ODA_Drawings.OdDbFcf_text(self, *args)

    def setLocation(self, *args):
        return _ODA_Drawings.OdDbFcf_setLocation(self, *args)

    def location(self, *args):
        return _ODA_Drawings.OdDbFcf_location(self, *args)

    def setOrientation(self, *args):
        return _ODA_Drawings.OdDbFcf_setOrientation(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbFcf_normal(self, *args)

    def direction(self, *args):
        return _ODA_Drawings.OdDbFcf_direction(self, *args)

    def setDimensionStyle(self, *args):
        return _ODA_Drawings.OdDbFcf_setDimensionStyle(self, *args)

    def dimensionStyle(self, *args):
        return _ODA_Drawings.OdDbFcf_dimensionStyle(self, *args)

    def dimclrd(self, *args):
        return _ODA_Drawings.OdDbFcf_dimclrd(self, *args)

    def dimclrt(self, *args):
        return _ODA_Drawings.OdDbFcf_dimclrt(self, *args)

    def dimgap(self, *args):
        return _ODA_Drawings.OdDbFcf_dimgap(self, *args)

    def dimscale(self, *args):
        return _ODA_Drawings.OdDbFcf_dimscale(self, *args)

    def dimtxsty(self, *args):
        return _ODA_Drawings.OdDbFcf_dimtxsty(self, *args)

    def dimtxt(self, *args):
        return _ODA_Drawings.OdDbFcf_dimtxt(self, *args)

    def setDimclrd(self, *args):
        return _ODA_Drawings.OdDbFcf_setDimclrd(self, *args)

    def setDimclrt(self, *args):
        return _ODA_Drawings.OdDbFcf_setDimclrt(self, *args)

    def setDimgap(self, *args):
        return _ODA_Drawings.OdDbFcf_setDimgap(self, *args)

    def setDimscale(self, *args):
        return _ODA_Drawings.OdDbFcf_setDimscale(self, *args)

    def setDimtxsty(self, *args):
        return _ODA_Drawings.OdDbFcf_setDimtxsty(self, *args)

    def setDimtxt(self, *args):
        return _ODA_Drawings.OdDbFcf_setDimtxt(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbFcf_subGetClassID(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbFcf_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbFcf_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbFcf_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbFcf_dxfOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbFcf_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbFcf_subViewportDraw(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbFcf_subTransformBy(self, *args)

    def subSetDatabaseDefaults(self, *args):
        return _ODA_Drawings.OdDbFcf_subSetDatabaseDefaults(self, *args)

    def getBoundingPoints(self, *args):
        return _ODA_Drawings.OdDbFcf_getBoundingPoints(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbFcf_subClose(self, *args)

    def modified(self, *args):
        return _ODA_Drawings.OdDbFcf_modified(self, *args)

    def getDimstyleData(self, *args):
        return _ODA_Drawings.OdDbFcf_getDimstyleData(self, *args)

    def setDimstyleData(self, *args):
        return _ODA_Drawings.OdDbFcf_setDimstyleData(self, *args)

    def getBoundingPline(self, *args):
        return _ODA_Drawings.OdDbFcf_getBoundingPline(self, *args)

    def decomposeForSave(self, *args):
        return _ODA_Drawings.OdDbFcf_decomposeForSave(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbFcf_subGetGeomExtents(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbFcf

# Register OdDbFcf in _ODA_Drawings:
_ODA_Drawings.OdDbFcf_swigregister(OdDbFcf)

def OdDbFcf_cast(*args):
    return _ODA_Drawings.OdDbFcf_cast(*args)

def OdDbFcf_desc(*args):
    return _ODA_Drawings.OdDbFcf_desc(*args)

def OdDbFcf_createObject(*args):
    return _ODA_Drawings.OdDbFcf_createObject(*args)

class OdDbShape(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShape_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShape_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShape_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShape_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShape_createObject(*args)

    def position(self, *args):
        return _ODA_Drawings.OdDbShape_position(self, *args)

    def setPosition(self, *args):
        return _ODA_Drawings.OdDbShape_setPosition(self, *args)

    def size(self, *args):
        return _ODA_Drawings.OdDbShape_size(self, *args)

    def setSize(self, *args):
        return _ODA_Drawings.OdDbShape_setSize(self, *args)

    def name(self, *args):
        return _ODA_Drawings.OdDbShape_name(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbShape_setName(self, *args)

    def rotation(self, *args):
        return _ODA_Drawings.OdDbShape_rotation(self, *args)

    def setRotation(self, *args):
        return _ODA_Drawings.OdDbShape_setRotation(self, *args)

    def widthFactor(self, *args):
        return _ODA_Drawings.OdDbShape_widthFactor(self, *args)

    def setWidthFactor(self, *args):
        return _ODA_Drawings.OdDbShape_setWidthFactor(self, *args)

    def oblique(self, *args):
        return _ODA_Drawings.OdDbShape_oblique(self, *args)

    def setOblique(self, *args):
        return _ODA_Drawings.OdDbShape_setOblique(self, *args)

    def thickness(self, *args):
        return _ODA_Drawings.OdDbShape_thickness(self, *args)

    def setThickness(self, *args):
        return _ODA_Drawings.OdDbShape_setThickness(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbShape_normal(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDbShape_setNormal(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbShape_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbShape_getPlane(self, *args)

    def shapeNumber(self, *args):
        return _ODA_Drawings.OdDbShape_shapeNumber(self, *args)

    def setShapeNumber(self, *args):
        return _ODA_Drawings.OdDbShape_setShapeNumber(self, *args)

    def styleId(self, *args):
        return _ODA_Drawings.OdDbShape_styleId(self, *args)

    def setStyleId(self, *args):
        return _ODA_Drawings.OdDbShape_setStyleId(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbShape_subWorldDraw(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShape_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShape_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShape_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShape_dxfOutFields(self, *args)

    def dxfOut(self, *args):
        return _ODA_Drawings.OdDbShape_dxfOut(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbShape_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbShape_dxfOutFields_R12(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbShape_subGetClassID(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbShape_subTransformBy(self, *args)

    def getEcs(self, *args):
        return _ODA_Drawings.OdDbShape_getEcs(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShape

# Register OdDbShape in _ODA_Drawings:
_ODA_Drawings.OdDbShape_swigregister(OdDbShape)

def OdDbShape_cast(*args):
    return _ODA_Drawings.OdDbShape_cast(*args)

def OdDbShape_desc(*args):
    return _ODA_Drawings.OdDbShape_desc(*args)

def OdDbShape_createObject(*args):
    return _ODA_Drawings.OdDbShape_createObject(*args)

class OdDbSequenceEnd(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSequenceEnd_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSequenceEnd_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSequenceEnd_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSequenceEnd_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSequenceEnd_createObject(*args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbSequenceEnd_dxfOutFields(self, *args)

    def dxfIn(self, *args):
        return _ODA_Drawings.OdDbSequenceEnd_dxfIn(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbSequenceEnd_subGetGeomExtents(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbSequenceEnd_subErase(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbSequenceEnd_subGetTransformedCopy(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSequenceEnd

# Register OdDbSequenceEnd in _ODA_Drawings:
_ODA_Drawings.OdDbSequenceEnd_swigregister(OdDbSequenceEnd)

def OdDbSequenceEnd_cast(*args):
    return _ODA_Drawings.OdDbSequenceEnd_cast(*args)

def OdDbSequenceEnd_desc(*args):
    return _ODA_Drawings.OdDbSequenceEnd_desc(*args)

def OdDbSequenceEnd_createObject(*args):
    return _ODA_Drawings.OdDbSequenceEnd_createObject(*args)

class OdDbRay(OdDbCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRay_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRay_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRay_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRay_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRay_createObject(*args)

    def basePoint(self, *args):
        return _ODA_Drawings.OdDbRay_basePoint(self, *args)

    def setBasePoint(self, *args):
        return _ODA_Drawings.OdDbRay_setBasePoint(self, *args)

    def unitDir(self, *args):
        return _ODA_Drawings.OdDbRay_unitDir(self, *args)

    def setUnitDir(self, *args):
        return _ODA_Drawings.OdDbRay_setUnitDir(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbRay_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbRay_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbRay_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbRay_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbRay_subGetClassID(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbRay_subWorldDraw(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbRay_subGetGeomExtents(self, *args)

    def isClosed(self, *args):
        return _ODA_Drawings.OdDbRay_isClosed(self, *args)

    def isPeriodic(self, *args):
        return _ODA_Drawings.OdDbRay_isPeriodic(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbRay_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbRay_getPlane(self, *args)

    def getStartParam(self, *args):
        return _ODA_Drawings.OdDbRay_getStartParam(self, *args)

    def getEndParam(self, *args):
        return _ODA_Drawings.OdDbRay_getEndParam(self, *args)

    def getStartPoint(self, *args):
        return _ODA_Drawings.OdDbRay_getStartPoint(self, *args)

    def getEndPoint(self, *args):
        return _ODA_Drawings.OdDbRay_getEndPoint(self, *args)

    def getPointAtParam(self, *args):
        return _ODA_Drawings.OdDbRay_getPointAtParam(self, *args)

    def getParamAtPoint(self, *args):
        return _ODA_Drawings.OdDbRay_getParamAtPoint(self, *args)

    def getDistAtParam(self, *args):
        return _ODA_Drawings.OdDbRay_getDistAtParam(self, *args)

    def getParamAtDist(self, *args):
        return _ODA_Drawings.OdDbRay_getParamAtDist(self, *args)

    def getFirstDeriv(self, *args):
        return _ODA_Drawings.OdDbRay_getFirstDeriv(self, *args)

    def getSecondDeriv(self, *args):
        return _ODA_Drawings.OdDbRay_getSecondDeriv(self, *args)

    def getArea(self, *args):
        return _ODA_Drawings.OdDbRay_getArea(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbRay_subTransformBy(self, *args)

    def getOdGeCurve(self, *args):
        return _ODA_Drawings.OdDbRay_getOdGeCurve(self, *args)

    def setFromOdGeCurve(self, *args):
        return _ODA_Drawings.OdDbRay_setFromOdGeCurve(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRay

# Register OdDbRay in _ODA_Drawings:
_ODA_Drawings.OdDbRay_swigregister(OdDbRay)

def OdDbRay_cast(*args):
    return _ODA_Drawings.OdDbRay_cast(*args)

def OdDbRay_desc(*args):
    return _ODA_Drawings.OdDbRay_desc(*args)

def OdDbRay_createObject(*args):
    return _ODA_Drawings.OdDbRay_createObject(*args)

class OdDbPoint(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPoint_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPoint_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPoint_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPoint_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPoint_createObject(*args)

    def position(self, *args):
        return _ODA_Drawings.OdDbPoint_position(self, *args)

    def setPosition(self, *args):
        return _ODA_Drawings.OdDbPoint_setPosition(self, *args)

    def thickness(self, *args):
        return _ODA_Drawings.OdDbPoint_thickness(self, *args)

    def setThickness(self, *args):
        return _ODA_Drawings.OdDbPoint_setThickness(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbPoint_normal(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDbPoint_setNormal(self, *args)

    def ecsRotation(self, *args):
        return _ODA_Drawings.OdDbPoint_ecsRotation(self, *args)

    def setEcsRotation(self, *args):
        return _ODA_Drawings.OdDbPoint_setEcsRotation(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbPoint_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbPoint_getPlane(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbPoint_subGetGeomExtents(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPoint_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPoint_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPoint_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPoint_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbPoint_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbPoint_dxfOutFields_R12(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbPoint_subTransformBy(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbPoint_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbPoint_subViewportDraw(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbPoint_subSetAttributes(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbPoint_subGetClassID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPoint

# Register OdDbPoint in _ODA_Drawings:
_ODA_Drawings.OdDbPoint_swigregister(OdDbPoint)

def OdDbPoint_cast(*args):
    return _ODA_Drawings.OdDbPoint_cast(*args)

def OdDbPoint_desc(*args):
    return _ODA_Drawings.OdDbPoint_desc(*args)

def OdDbPoint_createObject(*args):
    return _ODA_Drawings.OdDbPoint_createObject(*args)

class Mline(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kTop = _ODA_Drawings.Mline_kTop
    kZero = _ODA_Drawings.Mline_kZero
    kBottom = _ODA_Drawings.Mline_kBottom
    kOpen = _ODA_Drawings.Mline_kOpen
    kClosed = _ODA_Drawings.Mline_kClosed
    kMerged = _ODA_Drawings.Mline_kMerged

    def __init__(self, *args):
        _ODA_Drawings.Mline_swiginit(self, _ODA_Drawings.new_Mline(*args))
    __swig_destroy__ = _ODA_Drawings.delete_Mline

# Register Mline in _ODA_Drawings:
_ODA_Drawings.Mline_swigregister(Mline)

class OdMLSegment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_AreaFillParams = property(_ODA_Drawings.OdMLSegment_m_AreaFillParams_get, _ODA_Drawings.OdMLSegment_m_AreaFillParams_set)
    m_SegParams = property(_ODA_Drawings.OdMLSegment_m_SegParams_get, _ODA_Drawings.OdMLSegment_m_SegParams_set)

    def __init__(self, *args):
        _ODA_Drawings.OdMLSegment_swiginit(self, _ODA_Drawings.new_OdMLSegment(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdMLSegment

# Register OdMLSegment in _ODA_Drawings:
_ODA_Drawings.OdMLSegment_swigregister(OdMLSegment)

class OdDbMline(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbMline_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbMline_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbMline_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbMline_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbMline_createObject(*args)

    def setStyle(self, *args):
        return _ODA_Drawings.OdDbMline_setStyle(self, *args)

    def style(self, *args):
        return _ODA_Drawings.OdDbMline_style(self, *args)

    def setJustification(self, *args):
        return _ODA_Drawings.OdDbMline_setJustification(self, *args)

    def justification(self, *args):
        return _ODA_Drawings.OdDbMline_justification(self, *args)

    def setScale(self, *args):
        return _ODA_Drawings.OdDbMline_setScale(self, *args)

    def scale(self, *args):
        return _ODA_Drawings.OdDbMline_scale(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbMline_normal(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDbMline_setNormal(self, *args)

    def appendSeg(self, *args):
        return _ODA_Drawings.OdDbMline_appendSeg(self, *args)

    def removeLastSeg(self, *args):
        return _ODA_Drawings.OdDbMline_removeLastSeg(self, *args)

    def moveVertexAt(self, *args):
        return _ODA_Drawings.OdDbMline_moveVertexAt(self, *args)

    def setClosedMline(self, *args):
        return _ODA_Drawings.OdDbMline_setClosedMline(self, *args)

    def closedMline(self, *args):
        return _ODA_Drawings.OdDbMline_closedMline(self, *args)

    def setSupressStartCaps(self, *args):
        return _ODA_Drawings.OdDbMline_setSupressStartCaps(self, *args)

    def supressStartCaps(self, *args):
        return _ODA_Drawings.OdDbMline_supressStartCaps(self, *args)

    def setSupressEndCaps(self, *args):
        return _ODA_Drawings.OdDbMline_setSupressEndCaps(self, *args)

    def supressEndCaps(self, *args):
        return _ODA_Drawings.OdDbMline_supressEndCaps(self, *args)

    def numVertices(self, *args):
        return _ODA_Drawings.OdDbMline_numVertices(self, *args)

    def vertexAt(self, *args):
        return _ODA_Drawings.OdDbMline_vertexAt(self, *args)

    def axisAt(self, *args):
        return _ODA_Drawings.OdDbMline_axisAt(self, *args)

    def miterAt(self, *args):
        return _ODA_Drawings.OdDbMline_miterAt(self, *args)

    def getParametersAt(self, *args):
        return _ODA_Drawings.OdDbMline_getParametersAt(self, *args)

    def setParametersAt(self, *args):
        return _ODA_Drawings.OdDbMline_setParametersAt(self, *args)

    def element(self, *args):
        return _ODA_Drawings.OdDbMline_element(self, *args)

    def getClosestPointTo(self, *args):
        return _ODA_Drawings.OdDbMline_getClosestPointTo(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbMline_getPlane(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbMline_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbMline_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbMline_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbMline_dxfOutFields(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbMline_subTransformBy(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbMline_subWorldDraw(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbMline_subExplode(self, *args)

    def explodeGeometry(self, *args):
        return _ODA_Drawings.OdDbMline_explodeGeometry(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbMline_subClose(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbMline_subGetClassID(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbMline_subGetTransformedCopy(self, *args)

    def subSetDatabaseDefaults(self, *args):
        return _ODA_Drawings.OdDbMline_subSetDatabaseDefaults(self, *args)

    def subGetSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDbMline_subGetSubentPathsAtGsMarker(self, *args)

    def subGetGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbMline_subGetGsMarkersAtSubentPath(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbMline

# Register OdDbMline in _ODA_Drawings:
_ODA_Drawings.OdDbMline_swigregister(OdDbMline)

def OdDbMline_cast(*args):
    return _ODA_Drawings.OdDbMline_cast(*args)

def OdDbMline_desc(*args):
    return _ODA_Drawings.OdDbMline_desc(*args)

def OdDbMline_createObject(*args):
    return _ODA_Drawings.OdDbMline_createObject(*args)

class OdDbMInsertBlock(OdDbBlockReference):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbMInsertBlock_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbMInsertBlock_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbMInsertBlock_createObject(*args)

    def columns(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_columns(self, *args)

    def setColumns(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_setColumns(self, *args)

    def rows(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_rows(self, *args)

    def setRows(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_setRows(self, *args)

    def columnSpacing(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_columnSpacing(self, *args)

    def setColumnSpacing(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_setColumnSpacing(self, *args)

    def rowSpacing(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_rowSpacing(self, *args)

    def setRowSpacing(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_setRowSpacing(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_subGetClassID(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_subTransformBy(self, *args)

    def explodeToBlock(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_explodeToBlock(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_subGetGeomExtents(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_subWorldDraw(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbMInsertBlock_subExplode(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbMInsertBlock

# Register OdDbMInsertBlock in _ODA_Drawings:
_ODA_Drawings.OdDbMInsertBlock_swigregister(OdDbMInsertBlock)

def OdDbMInsertBlock_cast(*args):
    return _ODA_Drawings.OdDbMInsertBlock_cast(*args)

def OdDbMInsertBlock_desc(*args):
    return _ODA_Drawings.OdDbMInsertBlock_desc(*args)

def OdDbMInsertBlock_createObject(*args):
    return _ODA_Drawings.OdDbMInsertBlock_createObject(*args)

class OdDbFace(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbFace_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbFace_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbFace_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbFace_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbFace_createObject(*args)

    def getVertexAt(self, *args):
        return _ODA_Drawings.OdDbFace_getVertexAt(self, *args)

    def setVertexAt(self, *args):
        return _ODA_Drawings.OdDbFace_setVertexAt(self, *args)

    def isEdgeVisibleAt(self, *args):
        return _ODA_Drawings.OdDbFace_isEdgeVisibleAt(self, *args)

    def makeEdgeVisibleAt(self, *args):
        return _ODA_Drawings.OdDbFace_makeEdgeVisibleAt(self, *args)

    def makeEdgeInvisibleAt(self, *args):
        return _ODA_Drawings.OdDbFace_makeEdgeInvisibleAt(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbFace_getPlane(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbFace_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbFace_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbFace_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbFace_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbFace_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbFace_dxfOutFields_R12(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbFace_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbFace_subViewportDraw(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbFace_subGetClassID(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbFace_subTransformBy(self, *args)

    def subGetSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDbFace_subGetSubentPathsAtGsMarker(self, *args)

    def subGetGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbFace_subGetGsMarkersAtSubentPath(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbFace

# Register OdDbFace in _ODA_Drawings:
_ODA_Drawings.OdDbFace_swigregister(OdDbFace)

def OdDbFace_cast(*args):
    return _ODA_Drawings.OdDbFace_cast(*args)

def OdDbFace_desc(*args):
    return _ODA_Drawings.OdDbFace_desc(*args)

def OdDbFace_createObject(*args):
    return _ODA_Drawings.OdDbFace_createObject(*args)

class OdDbBlockEnd(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockEnd_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockEnd_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockEnd_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockEnd_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockEnd_createObject(*args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockEnd_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockEnd_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbBlockEnd_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbBlockEnd_dxfOutFields_R12(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbBlockEnd_subGetGeomExtents(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockEnd

# Register OdDbBlockEnd in _ODA_Drawings:
_ODA_Drawings.OdDbBlockEnd_swigregister(OdDbBlockEnd)

def OdDbBlockEnd_cast(*args):
    return _ODA_Drawings.OdDbBlockEnd_cast(*args)

def OdDbBlockEnd_desc(*args):
    return _ODA_Drawings.OdDbBlockEnd_desc(*args)

def OdDbBlockEnd_createObject(*args):
    return _ODA_Drawings.OdDbBlockEnd_createObject(*args)

class OdDbAlignedDimension(OdDbDimension):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAlignedDimension_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAlignedDimension_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAlignedDimension_createObject(*args)

    def xLine1Point(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_xLine1Point(self, *args)

    def setXLine1Point(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_setXLine1Point(self, *args)

    def xLine2Point(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_xLine2Point(self, *args)

    def setXLine2Point(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_setXLine2Point(self, *args)

    def dimLinePoint(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_dimLinePoint(self, *args)

    def setDimLinePoint(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_setDimLinePoint(self, *args)

    def oblique(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_oblique(self, *args)

    def setOblique(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_setOblique(self, *args)

    def jogSymbolOn(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_jogSymbolOn(self, *args)

    def setJogSymbolOn(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_setJogSymbolOn(self, *args)

    def jogSymbolPosition(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_jogSymbolPosition(self, *args)

    def setJogSymbolPosition(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_setJogSymbolPosition(self, *args)

    def jogSymbolHeight(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_jogSymbolHeight(self, *args)

    def setJogSymbolHeight(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_setJogSymbolHeight(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_dxfOutFields_R12(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbAlignedDimension_subGetClassID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAlignedDimension

# Register OdDbAlignedDimension in _ODA_Drawings:
_ODA_Drawings.OdDbAlignedDimension_swigregister(OdDbAlignedDimension)

def OdDbAlignedDimension_cast(*args):
    return _ODA_Drawings.OdDbAlignedDimension_cast(*args)

def OdDbAlignedDimension_desc(*args):
    return _ODA_Drawings.OdDbAlignedDimension_desc(*args)

def OdDbAlignedDimension_createObject(*args):
    return _ODA_Drawings.OdDbAlignedDimension_createObject(*args)

class OdDbBlockBegin(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockBegin_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockBegin_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockBegin_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockBegin_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockBegin_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockBegin_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockBegin_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockBegin_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockBegin_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbBlockBegin_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbBlockBegin_dxfOutFields_R12(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbBlockBegin_subGetGeomExtents(self, *args)

    def dxfIn(self, *args):
        return _ODA_Drawings.OdDbBlockBegin_dxfIn(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockBegin

# Register OdDbBlockBegin in _ODA_Drawings:
_ODA_Drawings.OdDbBlockBegin_swigregister(OdDbBlockBegin)

def OdDbBlockBegin_cast(*args):
    return _ODA_Drawings.OdDbBlockBegin_cast(*args)

def OdDbBlockBegin_desc(*args):
    return _ODA_Drawings.OdDbBlockBegin_desc(*args)

def OdDbBlockBegin_createObject(*args):
    return _ODA_Drawings.OdDbBlockBegin_createObject(*args)

class OdDbAttributeDefinition(OdDbText):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAttributeDefinition_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAttributeDefinition_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAttributeDefinition_createObject(*args)

    def prompt(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_prompt(self, *args)

    def setPrompt(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_setPrompt(self, *args)

    def tag(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_tag(self, *args)

    def setTag(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_setTag(self, *args)

    def isInvisible(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_isInvisible(self, *args)

    def setInvisible(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_setInvisible(self, *args)

    def isConstant(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_isConstant(self, *args)

    def setConstant(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_setConstant(self, *args)

    def isVerifiable(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_isVerifiable(self, *args)

    def setVerifiable(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_setVerifiable(self, *args)

    def isPreset(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_isPreset(self, *args)

    def setPreset(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_setPreset(self, *args)

    def fieldLength(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_fieldLength(self, *args)

    def setFieldLength(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_setFieldLength(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_subGetClassID(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_dxfOutFields_R12(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_subViewportDraw(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_subSetAttributes(self, *args)

    def appendToOwner(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_appendToOwner(self, *args)

    def lockPositionInBlock(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_lockPositionInBlock(self, *args)

    def setLockPositionInBlock(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_setLockPositionInBlock(self, *args)

    def isMTextAttributeDefinition(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_isMTextAttributeDefinition(self, *args)

    def getMTextAttributeDefinition(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_getMTextAttributeDefinition(self, *args)

    def setMTextAttributeDefinition(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_setMTextAttributeDefinition(self, *args)

    def convertIntoMTextAttributeDefinition(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_convertIntoMTextAttributeDefinition(self, *args)

    def updateMTextAttributeDefinition(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_updateMTextAttributeDefinition(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbAttributeDefinition_subClose(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAttributeDefinition

# Register OdDbAttributeDefinition in _ODA_Drawings:
_ODA_Drawings.OdDbAttributeDefinition_swigregister(OdDbAttributeDefinition)

def OdDbAttributeDefinition_cast(*args):
    return _ODA_Drawings.OdDbAttributeDefinition_cast(*args)

def OdDbAttributeDefinition_desc(*args):
    return _ODA_Drawings.OdDbAttributeDefinition_desc(*args)

def OdDbAttributeDefinition_createObject(*args):
    return _ODA_Drawings.OdDbAttributeDefinition_createObject(*args)

class OdDbIdPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbIdPair_swiginit(self, _ODA_Drawings.new_OdDbIdPair(*args))

    def key(self, *args):
        return _ODA_Drawings.OdDbIdPair_key(self, *args)

    def value(self, *args):
        return _ODA_Drawings.OdDbIdPair_value(self, *args)

    def isCloned(self, *args):
        return _ODA_Drawings.OdDbIdPair_isCloned(self, *args)

    def isPrimary(self, *args):
        return _ODA_Drawings.OdDbIdPair_isPrimary(self, *args)

    def isOwnerXlated(self, *args):
        return _ODA_Drawings.OdDbIdPair_isOwnerXlated(self, *args)

    def set(self, *args):
        return _ODA_Drawings.OdDbIdPair_set(self, *args)

    def setKey(self, *args):
        return _ODA_Drawings.OdDbIdPair_setKey(self, *args)

    def setValue(self, *args):
        return _ODA_Drawings.OdDbIdPair_setValue(self, *args)

    def setCloned(self, *args):
        return _ODA_Drawings.OdDbIdPair_setCloned(self, *args)

    def setPrimary(self, *args):
        return _ODA_Drawings.OdDbIdPair_setPrimary(self, *args)

    def setOwnerXlated(self, *args):
        return _ODA_Drawings.OdDbIdPair_setOwnerXlated(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbIdPair

# Register OdDbIdPair in _ODA_Drawings:
_ODA_Drawings.OdDbIdPair_swigregister(OdDbIdPair)

kDcCopy = _ODA_Drawings.kDcCopy
kDcExplode = _ODA_Drawings.kDcExplode
kDcBlock = _ODA_Drawings.kDcBlock
kDcXrefBind = _ODA_Drawings.kDcXrefBind
kDcSymTableMerge = _ODA_Drawings.kDcSymTableMerge
kDcInsert = _ODA_Drawings.kDcInsert
kDcWblock = _ODA_Drawings.kDcWblock
kDcObjects = _ODA_Drawings.kDcObjects
kDcXrefInsert = _ODA_Drawings.kDcXrefInsert
kDcInsertCopy = _ODA_Drawings.kDcInsertCopy
kDcWblkObjects = _ODA_Drawings.kDcWblkObjects
class OdDbIdMapping(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbIdMapping_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbIdMapping_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbIdMapping_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbIdMapping_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbIdMapping_createObject(*args)

    def assign(self, *args):
        return _ODA_Drawings.OdDbIdMapping_assign(self, *args)

    def compute(self, *args):
        return _ODA_Drawings.OdDbIdMapping_compute(self, *args)

    def _del(self, *args):
        return _ODA_Drawings.OdDbIdMapping__del(self, *args)

    def newIterator(self, *args):
        return _ODA_Drawings.OdDbIdMapping_newIterator(self, *args)

    def destDb(self, *args):
        return _ODA_Drawings.OdDbIdMapping_destDb(self, *args)

    def setDestDb(self, *args):
        return _ODA_Drawings.OdDbIdMapping_setDestDb(self, *args)

    def origDb(self, *args):
        return _ODA_Drawings.OdDbIdMapping_origDb(self, *args)

    def insertingXrefBlockId(self, *args):
        return _ODA_Drawings.OdDbIdMapping_insertingXrefBlockId(self, *args)

    def deepCloneContext(self, *args):
        return _ODA_Drawings.OdDbIdMapping_deepCloneContext(self, *args)

    def duplicateRecordCloning(self, *args):
        return _ODA_Drawings.OdDbIdMapping_duplicateRecordCloning(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbIdMapping

# Register OdDbIdMapping in _ODA_Drawings:
_ODA_Drawings.OdDbIdMapping_swigregister(OdDbIdMapping)

def OdDbIdMapping_cast(*args):
    return _ODA_Drawings.OdDbIdMapping_cast(*args)

def OdDbIdMapping_desc(*args):
    return _ODA_Drawings.OdDbIdMapping_desc(*args)

def OdDbIdMapping_createObject(*args):
    return _ODA_Drawings.OdDbIdMapping_createObject(*args)

class OdDbIdMappingIter(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbIdMappingIter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbIdMappingIter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbIdMappingIter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbIdMappingIter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbIdMappingIter_createObject(*args)

    def start(self, *args):
        return _ODA_Drawings.OdDbIdMappingIter_start(self, *args)

    def getMap(self, *args):
        return _ODA_Drawings.OdDbIdMappingIter_getMap(self, *args)

    def next(self, *args):
        return _ODA_Drawings.OdDbIdMappingIter_next(self, *args)

    def done(self, *args):
        return _ODA_Drawings.OdDbIdMappingIter_done(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbIdMappingIter

# Register OdDbIdMappingIter in _ODA_Drawings:
_ODA_Drawings.OdDbIdMappingIter_swigregister(OdDbIdMappingIter)

def OdDbIdMappingIter_cast(*args):
    return _ODA_Drawings.OdDbIdMappingIter_cast(*args)

def OdDbIdMappingIter_desc(*args):
    return _ODA_Drawings.OdDbIdMappingIter_desc(*args)

def OdDbIdMappingIter_createObject(*args):
    return _ODA_Drawings.OdDbIdMappingIter_createObject(*args)

class OdEditorReactor(OdRxEventReactor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdEditorReactor_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdEditorReactor_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdEditorReactor_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdEditorReactor_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdEditorReactor_createObject(*args)

    def beginDwgOpen(self, *args):
        return _ODA_Drawings.OdEditorReactor_beginDwgOpen(self, *args)

    def endDwgOpen(self, *args):
        return _ODA_Drawings.OdEditorReactor_endDwgOpen(self, *args)

    def beginClose(self, *args):
        return _ODA_Drawings.OdEditorReactor_beginClose(self, *args)

    def dwgFileOpened(self, *args):
        return _ODA_Drawings.OdEditorReactor_dwgFileOpened(self, *args)

    def beginAttach(self, *args):
        return _ODA_Drawings.OdEditorReactor_beginAttach(self, *args)

    def otherAttach(self, *args):
        return _ODA_Drawings.OdEditorReactor_otherAttach(self, *args)

    def abortAttach(self, *args):
        return _ODA_Drawings.OdEditorReactor_abortAttach(self, *args)

    def endAttach(self, *args):
        return _ODA_Drawings.OdEditorReactor_endAttach(self, *args)

    def redirected(self, *args):
        return _ODA_Drawings.OdEditorReactor_redirected(self, *args)

    def comandeered(self, *args):
        return _ODA_Drawings.OdEditorReactor_comandeered(self, *args)

    def beginRestore(self, *args):
        return _ODA_Drawings.OdEditorReactor_beginRestore(self, *args)

    def abortRestore(self, *args):
        return _ODA_Drawings.OdEditorReactor_abortRestore(self, *args)

    def endRestore(self, *args):
        return _ODA_Drawings.OdEditorReactor_endRestore(self, *args)
    kStart = _ODA_Drawings.OdEditorReactor_kStart
    kStartItem = _ODA_Drawings.OdEditorReactor_kStartItem
    kEndItem = _ODA_Drawings.OdEditorReactor_kEndItem
    kEnd = _ODA_Drawings.OdEditorReactor_kEnd
    kWillAbort = _ODA_Drawings.OdEditorReactor_kWillAbort
    kAborted = _ODA_Drawings.OdEditorReactor_kAborted
    kStartXBindBlock = _ODA_Drawings.OdEditorReactor_kStartXBindBlock
    kStartXBindSymbol = _ODA_Drawings.OdEditorReactor_kStartXBindSymbol

    def xrefSubcommandBindItem(self, *args):
        return _ODA_Drawings.OdEditorReactor_xrefSubcommandBindItem(self, *args)

    def xrefSubcommandAttachItem(self, *args):
        return _ODA_Drawings.OdEditorReactor_xrefSubcommandAttachItem(self, *args)

    def xrefSubcommandOverlayItem(self, *args):
        return _ODA_Drawings.OdEditorReactor_xrefSubcommandOverlayItem(self, *args)

    def xrefSubcommandDetachItem(self, *args):
        return _ODA_Drawings.OdEditorReactor_xrefSubcommandDetachItem(self, *args)

    def xrefSubcommandPathItem(self, *args):
        return _ODA_Drawings.OdEditorReactor_xrefSubcommandPathItem(self, *args)

    def xrefSubcommandReloadItem(self, *args):
        return _ODA_Drawings.OdEditorReactor_xrefSubcommandReloadItem(self, *args)

    def xrefSubcommandUnloadItem(self, *args):
        return _ODA_Drawings.OdEditorReactor_xrefSubcommandUnloadItem(self, *args)

    def undoSubcommandAuto(self, *args):
        return _ODA_Drawings.OdEditorReactor_undoSubcommandAuto(self, *args)

    def undoSubcommandControl(self, *args):
        return _ODA_Drawings.OdEditorReactor_undoSubcommandControl(self, *args)

    def undoSubcommandBegin(self, *args):
        return _ODA_Drawings.OdEditorReactor_undoSubcommandBegin(self, *args)

    def undoSubcommandEnd(self, *args):
        return _ODA_Drawings.OdEditorReactor_undoSubcommandEnd(self, *args)

    def undoSubcommandMark(self, *args):
        return _ODA_Drawings.OdEditorReactor_undoSubcommandMark(self, *args)

    def undoSubcommandBack(self, *args):
        return _ODA_Drawings.OdEditorReactor_undoSubcommandBack(self, *args)

    def undoSubcommandNumber(self, *args):
        return _ODA_Drawings.OdEditorReactor_undoSubcommandNumber(self, *args)

    def pickfirstModified(self, *args):
        return _ODA_Drawings.OdEditorReactor_pickfirstModified(self, *args)

    def layoutSwitched(self, *args):
        return _ODA_Drawings.OdEditorReactor_layoutSwitched(self, *args)

    def docFrameMovedOrResized(self, *args):
        return _ODA_Drawings.OdEditorReactor_docFrameMovedOrResized(self, *args)

    def mainFrameMovedOrResized(self, *args):
        return _ODA_Drawings.OdEditorReactor_mainFrameMovedOrResized(self, *args)

    def beginDoubleClick(self, *args):
        return _ODA_Drawings.OdEditorReactor_beginDoubleClick(self, *args)

    def beginRightClick(self, *args):
        return _ODA_Drawings.OdEditorReactor_beginRightClick(self, *args)

    def toolbarBitmapSizeWillChange(self, *args):
        return _ODA_Drawings.OdEditorReactor_toolbarBitmapSizeWillChange(self, *args)

    def toolbarBitmapSizeChanged(self, *args):
        return _ODA_Drawings.OdEditorReactor_toolbarBitmapSizeChanged(self, *args)

    def objectsLazyLoaded(self, *args):
        return _ODA_Drawings.OdEditorReactor_objectsLazyLoaded(self, *args)

    def beginQuit(self, *args):
        return _ODA_Drawings.OdEditorReactor_beginQuit(self, *args)

    def quitAborted(self, *args):
        return _ODA_Drawings.OdEditorReactor_quitAborted(self, *args)

    def quitWillStart(self, *args):
        return _ODA_Drawings.OdEditorReactor_quitWillStart(self, *args)

    def modelessOperationWillStart(self, *args):
        return _ODA_Drawings.OdEditorReactor_modelessOperationWillStart(self, *args)

    def modelessOperationEnded(self, *args):
        return _ODA_Drawings.OdEditorReactor_modelessOperationEnded(self, *args)

    def sysVarChanged(self, *args):
        return _ODA_Drawings.OdEditorReactor_sysVarChanged(self, *args)

    def sysVarWillChange(self, *args):
        return _ODA_Drawings.OdEditorReactor_sysVarWillChange(self, *args)

    def xrefSubCommandStart(self, *args):
        return _ODA_Drawings.OdEditorReactor_xrefSubCommandStart(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdEditorReactor

# Register OdEditorReactor in _ODA_Drawings:
_ODA_Drawings.OdEditorReactor_swigregister(OdEditorReactor)

def OdEditorReactor_cast(*args):
    return _ODA_Drawings.OdEditorReactor_cast(*args)

def OdEditorReactor_desc(*args):
    return _ODA_Drawings.OdEditorReactor_desc(*args)

def OdEditorReactor_createObject(*args):
    return _ODA_Drawings.OdEditorReactor_createObject(*args)

class OdEditor(OdRxEvent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdEditor_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdEditor_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdEditor_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdEditor_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdEditor_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdEditor

# Register OdEditor in _ODA_Drawings:
_ODA_Drawings.OdEditor_swigregister(OdEditor)

def OdEditor_cast(*args):
    return _ODA_Drawings.OdEditor_cast(*args)

def OdEditor_desc(*args):
    return _ODA_Drawings.OdEditor_desc(*args)

def OdEditor_createObject(*args):
    return _ODA_Drawings.OdEditor_createObject(*args)


def odedEditor(*args):
    return _ODA_Drawings.odedEditor(*args)
class OdDbBlockRepresentationData(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockRepresentationData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockRepresentationData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockRepresentationData_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationData_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationData_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationData_dxfOutFields(self, *args)

    def setBlock(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationData_setBlock(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockRepresentationData

# Register OdDbBlockRepresentationData in _ODA_Drawings:
_ODA_Drawings.OdDbBlockRepresentationData_swigregister(OdDbBlockRepresentationData)

def OdDbBlockRepresentationData_cast(*args):
    return _ODA_Drawings.OdDbBlockRepresentationData_cast(*args)

def OdDbBlockRepresentationData_desc(*args):
    return _ODA_Drawings.OdDbBlockRepresentationData_desc(*args)

def OdDbBlockRepresentationData_createObject(*args):
    return _ODA_Drawings.OdDbBlockRepresentationData_createObject(*args)

class OdDbBlockGripExpr(OdDbEvalExpr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockGripExpr_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockGripExpr_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockGripExpr_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockGripExpr_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockGripExpr_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockGripExpr_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockGripExpr_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockGripExpr_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockGripExpr_dxfOutFields(self, *args)

    def __init__(self, *args):
        _ODA_Drawings.OdDbBlockGripExpr_swiginit(self, _ODA_Drawings.new_OdDbBlockGripExpr(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockGripExpr

# Register OdDbBlockGripExpr in _ODA_Drawings:
_ODA_Drawings.OdDbBlockGripExpr_swigregister(OdDbBlockGripExpr)

def OdDbBlockGripExpr_cast(*args):
    return _ODA_Drawings.OdDbBlockGripExpr_cast(*args)

def OdDbBlockGripExpr_desc(*args):
    return _ODA_Drawings.OdDbBlockGripExpr_desc(*args)

def OdDbBlockGripExpr_createObject(*args):
    return _ODA_Drawings.OdDbBlockGripExpr_createObject(*args)

class OdDbBlockGrip(OdDbBlockElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockGrip_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockGrip_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockGrip_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_dxfOutFields(self, *args)

    def addedToGraph(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_addedToGraph(self, *args)

    def removedFromGraph(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_removedFromGraph(self, *args)

    def definitionGripOffset(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_definitionGripOffset(self, *args)

    def displayLocation(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_displayLocation(self, *args)

    def setDisplayLocation(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_setDisplayLocation(self, *args)

    def getAssociatedParameter(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_getAssociatedParameter(self, *args)

    def getAssociatedParameterComponent(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_getAssociatedParameterComponent(self, *args)

    def gripOffset(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_gripOffset(self, *args)

    def insertionCycling(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_insertionCycling(self, *args)

    def setInsertionCycling(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_setInsertionCycling(self, *args)

    def insertionCyclingWeight(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_insertionCyclingWeight(self, *args)

    def setInsertionCyclingWeight(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_setInsertionCyclingWeight(self, *args)

    def location(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_location(self, *args)

    def paramBasePoint(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_paramBasePoint(self, *args)

    def setUpdatedLocation(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_setUpdatedLocation(self, *args)

    def updatedLocation(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_updatedLocation(self, *args)

    def setDefinitionPoint(self, *args):
        return _ODA_Drawings.OdDbBlockGrip_setDefinitionPoint(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockGrip

# Register OdDbBlockGrip in _ODA_Drawings:
_ODA_Drawings.OdDbBlockGrip_swigregister(OdDbBlockGrip)

def OdDbBlockGrip_cast(*args):
    return _ODA_Drawings.OdDbBlockGrip_cast(*args)

def OdDbBlockGrip_desc(*args):
    return _ODA_Drawings.OdDbBlockGrip_desc(*args)

def OdDbBlockGrip_createObject(*args):
    return _ODA_Drawings.OdDbBlockGrip_createObject(*args)

class OdDbBlockXYGrip(OdDbBlockGrip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockXYGrip_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockXYGrip_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockXYGrip_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockXYGrip_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockXYGrip_createObject(*args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockXYGrip_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockXYGrip_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockXYGrip

# Register OdDbBlockXYGrip in _ODA_Drawings:
_ODA_Drawings.OdDbBlockXYGrip_swigregister(OdDbBlockXYGrip)

def OdDbBlockXYGrip_cast(*args):
    return _ODA_Drawings.OdDbBlockXYGrip_cast(*args)

def OdDbBlockXYGrip_desc(*args):
    return _ODA_Drawings.OdDbBlockXYGrip_desc(*args)

def OdDbBlockXYGrip_createObject(*args):
    return _ODA_Drawings.OdDbBlockXYGrip_createObject(*args)

class OdDbBlockPolarGrip(OdDbBlockGrip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockPolarGrip_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockPolarGrip_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockPolarGrip_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockPolarGrip_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockPolarGrip_createObject(*args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockPolarGrip_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockPolarGrip_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockPolarGrip

# Register OdDbBlockPolarGrip in _ODA_Drawings:
_ODA_Drawings.OdDbBlockPolarGrip_swigregister(OdDbBlockPolarGrip)

def OdDbBlockPolarGrip_cast(*args):
    return _ODA_Drawings.OdDbBlockPolarGrip_cast(*args)

def OdDbBlockPolarGrip_desc(*args):
    return _ODA_Drawings.OdDbBlockPolarGrip_desc(*args)

def OdDbBlockPolarGrip_createObject(*args):
    return _ODA_Drawings.OdDbBlockPolarGrip_createObject(*args)

class OdDbBlockRotationGrip(OdDbBlockGrip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockRotationGrip_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockRotationGrip_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockRotationGrip_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockRotationGrip_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockRotationGrip_createObject(*args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockRotationGrip_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockRotationGrip_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockRotationGrip

# Register OdDbBlockRotationGrip in _ODA_Drawings:
_ODA_Drawings.OdDbBlockRotationGrip_swigregister(OdDbBlockRotationGrip)

def OdDbBlockRotationGrip_cast(*args):
    return _ODA_Drawings.OdDbBlockRotationGrip_cast(*args)

def OdDbBlockRotationGrip_desc(*args):
    return _ODA_Drawings.OdDbBlockRotationGrip_desc(*args)

def OdDbBlockRotationGrip_createObject(*args):
    return _ODA_Drawings.OdDbBlockRotationGrip_createObject(*args)

class OdDbBlockLinearGrip(OdDbBlockGrip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockLinearGrip_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockLinearGrip_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockLinearGrip_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockLinearGrip_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockLinearGrip_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockLinearGrip_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockLinearGrip_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockLinearGrip_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockLinearGrip_dxfOutFields(self, *args)

    def orientation(self, *args):
        return _ODA_Drawings.OdDbBlockLinearGrip_orientation(self, *args)

    def setOrientation(self, *args):
        return _ODA_Drawings.OdDbBlockLinearGrip_setOrientation(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockLinearGrip

# Register OdDbBlockLinearGrip in _ODA_Drawings:
_ODA_Drawings.OdDbBlockLinearGrip_swigregister(OdDbBlockLinearGrip)

def OdDbBlockLinearGrip_cast(*args):
    return _ODA_Drawings.OdDbBlockLinearGrip_cast(*args)

def OdDbBlockLinearGrip_desc(*args):
    return _ODA_Drawings.OdDbBlockLinearGrip_desc(*args)

def OdDbBlockLinearGrip_createObject(*args):
    return _ODA_Drawings.OdDbBlockLinearGrip_createObject(*args)

class OdDbBlockFlipGrip(OdDbBlockGrip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockFlipGrip_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockFlipGrip_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockFlipGrip_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockFlipGrip_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockFlipGrip_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockFlipGrip_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockFlipGrip_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockFlipGrip_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockFlipGrip_dxfOutFields(self, *args)

    def flipState(self, *args):
        return _ODA_Drawings.OdDbBlockFlipGrip_flipState(self, *args)

    def setFlipState(self, *args):
        return _ODA_Drawings.OdDbBlockFlipGrip_setFlipState(self, *args)

    def setUpdatedFlipState(self, *args):
        return _ODA_Drawings.OdDbBlockFlipGrip_setUpdatedFlipState(self, *args)

    def updatedFlipState(self, *args):
        return _ODA_Drawings.OdDbBlockFlipGrip_updatedFlipState(self, *args)

    def orientation(self, *args):
        return _ODA_Drawings.OdDbBlockFlipGrip_orientation(self, *args)

    def setOrientation(self, *args):
        return _ODA_Drawings.OdDbBlockFlipGrip_setOrientation(self, *args)

    def graphEvalEnd(self, *args):
        return _ODA_Drawings.OdDbBlockFlipGrip_graphEvalEnd(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockFlipGrip

# Register OdDbBlockFlipGrip in _ODA_Drawings:
_ODA_Drawings.OdDbBlockFlipGrip_swigregister(OdDbBlockFlipGrip)

def OdDbBlockFlipGrip_cast(*args):
    return _ODA_Drawings.OdDbBlockFlipGrip_cast(*args)

def OdDbBlockFlipGrip_desc(*args):
    return _ODA_Drawings.OdDbBlockFlipGrip_desc(*args)

def OdDbBlockFlipGrip_createObject(*args):
    return _ODA_Drawings.OdDbBlockFlipGrip_createObject(*args)

class OdDbBlockLookupGrip(OdDbBlockGrip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockLookupGrip_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockLookupGrip_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockLookupGrip_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockLookupGrip_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockLookupGrip_createObject(*args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockLookupGrip_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockLookupGrip_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockLookupGrip

# Register OdDbBlockLookupGrip in _ODA_Drawings:
_ODA_Drawings.OdDbBlockLookupGrip_swigregister(OdDbBlockLookupGrip)

def OdDbBlockLookupGrip_cast(*args):
    return _ODA_Drawings.OdDbBlockLookupGrip_cast(*args)

def OdDbBlockLookupGrip_desc(*args):
    return _ODA_Drawings.OdDbBlockLookupGrip_desc(*args)

def OdDbBlockLookupGrip_createObject(*args):
    return _ODA_Drawings.OdDbBlockLookupGrip_createObject(*args)

class OdDbBlockAlignmentGrip(OdDbBlockGrip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockAlignmentGrip_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockAlignmentGrip_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockAlignmentGrip_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockAlignmentGrip_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockAlignmentGrip_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockAlignmentGrip_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockAlignmentGrip_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockAlignmentGrip_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockAlignmentGrip_dxfOutFields(self, *args)

    def orientation(self, *args):
        return _ODA_Drawings.OdDbBlockAlignmentGrip_orientation(self, *args)

    def setOrientation(self, *args):
        return _ODA_Drawings.OdDbBlockAlignmentGrip_setOrientation(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockAlignmentGrip

# Register OdDbBlockAlignmentGrip in _ODA_Drawings:
_ODA_Drawings.OdDbBlockAlignmentGrip_swigregister(OdDbBlockAlignmentGrip)

def OdDbBlockAlignmentGrip_cast(*args):
    return _ODA_Drawings.OdDbBlockAlignmentGrip_cast(*args)

def OdDbBlockAlignmentGrip_desc(*args):
    return _ODA_Drawings.OdDbBlockAlignmentGrip_desc(*args)

def OdDbBlockAlignmentGrip_createObject(*args):
    return _ODA_Drawings.OdDbBlockAlignmentGrip_createObject(*args)

class OdDbBlockVisibilityGrip(OdDbBlockGrip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockVisibilityGrip_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockVisibilityGrip_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityGrip_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityGrip_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockVisibilityGrip_createObject(*args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityGrip_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityGrip_dxfOutFields(self, *args)

    def setMemberOfCurrentVisibilitySet(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityGrip_setMemberOfCurrentVisibilitySet(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockVisibilityGrip

# Register OdDbBlockVisibilityGrip in _ODA_Drawings:
_ODA_Drawings.OdDbBlockVisibilityGrip_swigregister(OdDbBlockVisibilityGrip)

def OdDbBlockVisibilityGrip_cast(*args):
    return _ODA_Drawings.OdDbBlockVisibilityGrip_cast(*args)

def OdDbBlockVisibilityGrip_desc(*args):
    return _ODA_Drawings.OdDbBlockVisibilityGrip_desc(*args)

def OdDbBlockVisibilityGrip_createObject(*args):
    return _ODA_Drawings.OdDbBlockVisibilityGrip_createObject(*args)

class OdDbBlockParamValueSet(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockParamValueSet_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockParamValueSet_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockParamValueSet_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockParamValueSet

    def assign(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_assign(self, *args)

    def angDir(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_angDir(self, *args)

    def angular(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_angular(self, *args)

    def closestLegalValue(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_closestLegalValue(self, *args)

    def dwgInFieldsHelper(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_dwgInFieldsHelper(self, *args)

    def dwgOutFieldsHelper(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_dwgOutFieldsHelper(self, *args)

    def dxfInFieldsHelper(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_dxfInFieldsHelper(self, *args)

    def dxfOutFieldsHelper(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_dxfOutFieldsHelper(self, *args)

    def increment(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_increment(self, *args)

    def maximum(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_maximum(self, *args)

    def minimum(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_minimum(self, *args)

    def setAngDir(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_setAngDir(self, *args)

    def setAngular(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_setAngular(self, *args)

    def setIncrement(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_setIncrement(self, *args)

    def setMaximum(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_setMaximum(self, *args)

    def setMinimum(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_setMinimum(self, *args)

    def setUseIncrement(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_setUseIncrement(self, *args)

    def setUseMaximum(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_setUseMaximum(self, *args)

    def setUseMinimum(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_setUseMinimum(self, *args)

    def setUseValueList(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_setUseValueList(self, *args)

    def setValueList(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_setValueList(self, *args)

    def sortedValueListIncluding(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_sortedValueListIncluding(self, *args)

    def updateValue(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_updateValue(self, *args)

    def useIncrement(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_useIncrement(self, *args)

    def useMaximum(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_useMaximum(self, *args)

    def useMinimum(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_useMinimum(self, *args)

    def useValueList(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_useValueList(self, *args)

    def valueIsLegal(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_valueIsLegal(self, *args)

    def valueList(self, *args):
        return _ODA_Drawings.OdDbBlockParamValueSet_valueList(self, *args)

# Register OdDbBlockParamValueSet in _ODA_Drawings:
_ODA_Drawings.OdDbBlockParamValueSet_swigregister(OdDbBlockParamValueSet)

def OdDbBlockParamValueSet_cast(*args):
    return _ODA_Drawings.OdDbBlockParamValueSet_cast(*args)

def OdDbBlockParamValueSet_desc(*args):
    return _ODA_Drawings.OdDbBlockParamValueSet_desc(*args)

def OdDbBlockParamValueSet_createObject(*args):
    return _ODA_Drawings.OdDbBlockParamValueSet_createObject(*args)

class OdDbLSSymbolReference(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kLSAtStroke = _ODA_Drawings.OdDbLSSymbolReference_kLSAtStroke
    kLSAtOrigin = _ODA_Drawings.OdDbLSSymbolReference_kLSAtOrigin
    kLSAtEnd = _ODA_Drawings.OdDbLSSymbolReference_kLSAtEnd
    kLSAtVertex = _ODA_Drawings.OdDbLSSymbolReference_kLSAtVertex
    kLSNoJustify = _ODA_Drawings.OdDbLSSymbolReference_kLSNoJustify
    kLSJustifyLeft = _ODA_Drawings.OdDbLSSymbolReference_kLSJustifyLeft
    kLSJustifyRight = _ODA_Drawings.OdDbLSSymbolReference_kLSJustifyRight
    kLSJustifyCenter = _ODA_Drawings.OdDbLSSymbolReference_kLSJustifyCenter
    kLSRelative = _ODA_Drawings.OdDbLSSymbolReference_kLSRelative
    kLSAbsolute = _ODA_Drawings.OdDbLSSymbolReference_kLSAbsolute
    kLSAdjusted = _ODA_Drawings.OdDbLSSymbolReference_kLSAdjusted

    def __init__(self, *args):
        _ODA_Drawings.OdDbLSSymbolReference_swiginit(self, _ODA_Drawings.new_OdDbLSSymbolReference(*args))

    def partialStrokes(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_partialStrokes(self, *args)

    def setPartialStrokes(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_setPartialStrokes(self, *args)

    def clipPartial(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_clipPartial(self, *args)

    def setClipPartial(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_setClipPartial(self, *args)

    def allowStretch(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_allowStretch(self, *args)

    def setAllowStretch(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_setAllowStretch(self, *args)

    def partialProjected(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_partialProjected(self, *args)

    def setPartialProjected(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_setPartialProjected(self, *args)

    def useSymbolColor(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_useSymbolColor(self, *args)

    def setUseSymbolColor(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_setUseSymbolColor(self, *args)

    def useSymbolLineweight(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_useSymbolLineweight(self, *args)

    def setUseSymbolLineweight(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_setUseSymbolLineweight(self, *args)

    def justify(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_justify(self, *args)

    def setJustify(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_setJustify(self, *args)

    def rotationType(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_rotationType(self, *args)

    def setRotationType(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_setRotationType(self, *args)

    def vertexMask(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_vertexMask(self, *args)

    def setVertexMask(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_setVertexMask(self, *args)

    def xOffset(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_xOffset(self, *args)

    def setXOffset(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_setXOffset(self, *args)

    def yOffset(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_yOffset(self, *args)

    def setYOffset(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_setYOffset(self, *args)

    def angle(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_angle(self, *args)

    def setAngle(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_setAngle(self, *args)

    def strokeNumber(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_strokeNumber(self, *args)

    def setStrokeNumber(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_setStrokeNumber(self, *args)

    def symbolComponent(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_symbolComponent(self, *args)

    def setSymbolComponent(self, *args):
        return _ODA_Drawings.OdDbLSSymbolReference_setSymbolComponent(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLSSymbolReference

# Register OdDbLSSymbolReference in _ODA_Drawings:
_ODA_Drawings.OdDbLSSymbolReference_swigregister(OdDbLSSymbolReference)

class OdDbLSStrokePatternComponent(OdDbLSComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    kLSPhaseDistance = _ODA_Drawings.OdDbLSStrokePatternComponent_kLSPhaseDistance
    kLSPhaseFraction = _ODA_Drawings.OdDbLSStrokePatternComponent_kLSPhaseFraction
    kLSPhaseCentered = _ODA_Drawings.OdDbLSStrokePatternComponent_kLSPhaseCentered

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_createObject(*args)

    def autoPhase(self, *args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_autoPhase(self, *args)

    def setAutoPhase(self, *args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_setAutoPhase(self, *args)

    def hasIterationLimit(self, *args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_hasIterationLimit(self, *args)

    def setHasIterationLimit(self, *args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_setHasIterationLimit(self, *args)

    def insertStroke(self, *args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_insertStroke(self, *args)

    def stroke(self, *args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_stroke(self, *args)

    def deleteStroke(self, *args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_deleteStroke(self, *args)

    def numberStrokes(self, *args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_numberStrokes(self, *args)

    def isSingleSegment(self, *args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_isSingleSegment(self, *args)

    def setIsSingleSegment(self, *args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_setIsSingleSegment(self, *args)

    def iterationLimit(self, *args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_iterationLimit(self, *args)

    def setIterationLimit(self, *args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_setIterationLimit(self, *args)

    def phase(self, *args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_phase(self, *args)

    def setPhase(self, *args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_setPhase(self, *args)

    def phaseMode(self, *args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_phaseMode(self, *args)

    def setPhaseMode(self, *args):
        return _ODA_Drawings.OdDbLSStrokePatternComponent_setPhaseMode(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLSStrokePatternComponent

# Register OdDbLSStrokePatternComponent in _ODA_Drawings:
_ODA_Drawings.OdDbLSStrokePatternComponent_swigregister(OdDbLSStrokePatternComponent)

def OdDbLSStrokePatternComponent_cast(*args):
    return _ODA_Drawings.OdDbLSStrokePatternComponent_cast(*args)

def OdDbLSStrokePatternComponent_desc(*args):
    return _ODA_Drawings.OdDbLSStrokePatternComponent_desc(*args)

def OdDbLSStrokePatternComponent_createObject(*args):
    return _ODA_Drawings.OdDbLSStrokePatternComponent_createObject(*args)

class OdDbRenderSettings(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRenderSettings_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRenderSettings_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRenderSettings_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRenderSettings

    def drawable(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_drawable(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_setName(self, *args)

    def name(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_name(self, *args)

    def setDescription(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_setDescription(self, *args)

    def description(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_description(self, *args)

    def setDisplayIndex(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_setDisplayIndex(self, *args)

    def displayIndex(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_displayIndex(self, *args)

    def setMaterialsEnabled(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_setMaterialsEnabled(self, *args)

    def materialsEnabled(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_materialsEnabled(self, *args)

    def setTextureSampling(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_setTextureSampling(self, *args)

    def textureSampling(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_textureSampling(self, *args)

    def setBackFacesEnabled(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_setBackFacesEnabled(self, *args)

    def backFacesEnabled(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_backFacesEnabled(self, *args)

    def setShadowsEnabled(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_setShadowsEnabled(self, *args)

    def shadowsEnabled(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_shadowsEnabled(self, *args)

    def setPreviewImageFileName(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_setPreviewImageFileName(self, *args)

    def previewImageFileName(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_previewImageFileName(self, *args)

    def setDiagnosticBackgroundEnabled(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_setDiagnosticBackgroundEnabled(self, *args)

    def diagnosticBackgroundEnabled(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_diagnosticBackgroundEnabled(self, *args)

    def setIsPredefined(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_setIsPredefined(self, *args)

    def isPredefined(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_isPredefined(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_dxfOutFields(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbRenderSettings_subSetAttributes(self, *args)

    def __eq__(self, *args):
        return _ODA_Drawings.OdDbRenderSettings___eq__(self, *args)

    @staticmethod
    def castByClassName(*args):
        return _ODA_Drawings.OdDbRenderSettings_castByClassName(*args)

# Register OdDbRenderSettings in _ODA_Drawings:
_ODA_Drawings.OdDbRenderSettings_swigregister(OdDbRenderSettings)

def OdDbRenderSettings_cast(*args):
    return _ODA_Drawings.OdDbRenderSettings_cast(*args)

def OdDbRenderSettings_desc(*args):
    return _ODA_Drawings.OdDbRenderSettings_desc(*args)

def OdDbRenderSettings_createObject(*args):
    return _ODA_Drawings.OdDbRenderSettings_createObject(*args)

def OdDbRenderSettings_castByClassName(*args):
    return _ODA_Drawings.OdDbRenderSettings_castByClassName(*args)

class OdDbMentalRayRenderSettings(OdDbRenderSettings):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    kSamplingMultiplierZero = _ODA_Drawings.OdDbMentalRayRenderSettings_kSamplingMultiplierZero
    kSamplingMultiplierOneEighth = _ODA_Drawings.OdDbMentalRayRenderSettings_kSamplingMultiplierOneEighth
    kSamplingMultiplierOneFourth = _ODA_Drawings.OdDbMentalRayRenderSettings_kSamplingMultiplierOneFourth
    kSamplingMultiplierOneHalf = _ODA_Drawings.OdDbMentalRayRenderSettings_kSamplingMultiplierOneHalf
    kSamplingMultiplierOne = _ODA_Drawings.OdDbMentalRayRenderSettings_kSamplingMultiplierOne
    kSamplingMultiplierTwo = _ODA_Drawings.OdDbMentalRayRenderSettings_kSamplingMultiplierTwo

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbMentalRayRenderSettings

    def setSampling(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setSampling(self, *args)

    def sampling(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_sampling(self, *args)

    def setSamplingFilter(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setSamplingFilter(self, *args)

    def SamplingFilter(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_SamplingFilter(self, *args)

    def setSamplingContrastColor(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setSamplingContrastColor(self, *args)

    def samplingContrastColor(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_samplingContrastColor(self, *args)

    def setShadowMode(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setShadowMode(self, *args)

    def shadowMode(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_shadowMode(self, *args)

    def setShadowMapsEnabled(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setShadowMapsEnabled(self, *args)

    def shadowMapsEnabled(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_shadowMapsEnabled(self, *args)

    def setRayTracingEnabled(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setRayTracingEnabled(self, *args)

    def rayTracingEnabled(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_rayTracingEnabled(self, *args)

    def setRayTraceDepth(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setRayTraceDepth(self, *args)

    def rayTraceDepth(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_rayTraceDepth(self, *args)

    def setGlobalIlluminationEnabled(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setGlobalIlluminationEnabled(self, *args)

    def globalIlluminationEnabled(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_globalIlluminationEnabled(self, *args)

    def setGISampleCount(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setGISampleCount(self, *args)

    def giSampleCount(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_giSampleCount(self, *args)

    def setGISampleRadiusEnabled(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setGISampleRadiusEnabled(self, *args)

    def giSampleRadiusEnabled(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_giSampleRadiusEnabled(self, *args)

    def setGISampleRadius(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setGISampleRadius(self, *args)

    def giSampleRadius(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_giSampleRadius(self, *args)

    def setGIPhotonsPerLight(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setGIPhotonsPerLight(self, *args)

    def giPhotonsPerLight(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_giPhotonsPerLight(self, *args)

    def setPhotonTraceDepth(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setPhotonTraceDepth(self, *args)

    def photonTraceDepth(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_photonTraceDepth(self, *args)

    def setFinalGatheringEnabled(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setFinalGatheringEnabled(self, *args)

    def finalGatheringEnabled(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_finalGatheringEnabled(self, *args)

    def setFGRayCount(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setFGRayCount(self, *args)

    def fgRayCount(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_fgRayCount(self, *args)

    def setFGRadiusState(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setFGRadiusState(self, *args)

    def fgSampleRadiusState(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_fgSampleRadiusState(self, *args)

    def setFGSampleRadius(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setFGSampleRadius(self, *args)

    def fgSampleRadius(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_fgSampleRadius(self, *args)

    def setEnergyMultiplier(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setEnergyMultiplier(self, *args)

    def energyMultiplier(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_energyMultiplier(self, *args)

    def setDiagnosticMode(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setDiagnosticMode(self, *args)

    def diagnosticMode(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_diagnosticMode(self, *args)

    def setDiagnosticGridMode(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setDiagnosticGridMode(self, *args)

    def diagnosticGridMode(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_diagnosticGridMode(self, *args)

    def setDiagnosticPhotonMode(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setDiagnosticPhotonMode(self, *args)

    def diagnosticPhotonMode(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_diagnosticPhotonMode(self, *args)

    def setDiagnosticSamplesMode(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setDiagnosticSamplesMode(self, *args)

    def diagnosticSamplesMode(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_diagnosticSamplesMode(self, *args)

    def setDiagnosticBSPMode(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setDiagnosticBSPMode(self, *args)

    def diagnosticBSPMode(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_diagnosticBSPMode(self, *args)

    def setExportMIEnabled(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setExportMIEnabled(self, *args)

    def exportMIEnabled(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_exportMIEnabled(self, *args)

    def setExportMIFileName(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setExportMIFileName(self, *args)

    def exportMIFileName(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_exportMIFileName(self, *args)

    def setTileSize(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setTileSize(self, *args)

    def tileSize(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_tileSize(self, *args)

    def setTileOrder(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setTileOrder(self, *args)

    def tileOrder(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_tileOrder(self, *args)

    def setMemoryLimit(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setMemoryLimit(self, *args)

    def memoryLimit(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_memoryLimit(self, *args)

    def setFinalGatheringMode(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setFinalGatheringMode(self, *args)

    def finalGatheringMode(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_finalGatheringMode(self, *args)

    def setLightLuminanceScale(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setLightLuminanceScale(self, *args)

    def lightLuminanceScale(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_lightLuminanceScale(self, *args)

    def setExportMIMode(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setExportMIMode(self, *args)

    def exportMIMode(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_exportMIMode(self, *args)

    def setShadowSamplingMultiplier(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_setShadowSamplingMultiplier(self, *args)

    def shadowSamplingMultiplier(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_shadowSamplingMultiplier(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_dxfOutFields(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings_subSetAttributes(self, *args)

    def __eq__(self, *args):
        return _ODA_Drawings.OdDbMentalRayRenderSettings___eq__(self, *args)

# Register OdDbMentalRayRenderSettings in _ODA_Drawings:
_ODA_Drawings.OdDbMentalRayRenderSettings_swigregister(OdDbMentalRayRenderSettings)

def OdDbMentalRayRenderSettings_cast(*args):
    return _ODA_Drawings.OdDbMentalRayRenderSettings_cast(*args)

def OdDbMentalRayRenderSettings_desc(*args):
    return _ODA_Drawings.OdDbMentalRayRenderSettings_desc(*args)

def OdDbMentalRayRenderSettings_createObject(*args):
    return _ODA_Drawings.OdDbMentalRayRenderSettings_createObject(*args)

class OdDbRapidRTRenderSettings(OdDbRenderSettings):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    krLevel = _ODA_Drawings.OdDbRapidRTRenderSettings_krLevel
    krTime = _ODA_Drawings.OdDbRapidRTRenderSettings_krTime
    krInfinite = _ODA_Drawings.OdDbRapidRTRenderSettings_krInfinite

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRapidRTRenderSettings

    def setRenderTarget(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_setRenderTarget(self, *args)

    def renderTarget(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_renderTarget(self, *args)

    def setRenderLevel(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_setRenderLevel(self, *args)

    def renderLevel(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_renderLevel(self, *args)

    def setRenderTime(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_setRenderTime(self, *args)

    def renderTime(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_renderTime(self, *args)

    def setLightingModel(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_setLightingModel(self, *args)

    def lightingModel(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_lightingModel(self, *args)

    def setFilterType(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_setFilterType(self, *args)

    def filterType(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_filterType(self, *args)

    def setFilterWidth(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_setFilterWidth(self, *args)

    def filterWidth(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_filterWidth(self, *args)

    def setFilterHeight(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_setFilterHeight(self, *args)

    def filterHeight(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_filterHeight(self, *args)

    def setFilterDimensions(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_setFilterDimensions(self, *args)

    def filterDimensions(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_filterDimensions(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_dxfOutFields(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings_subSetAttributes(self, *args)

    def __eq__(self, *args):
        return _ODA_Drawings.OdDbRapidRTRenderSettings___eq__(self, *args)

# Register OdDbRapidRTRenderSettings in _ODA_Drawings:
_ODA_Drawings.OdDbRapidRTRenderSettings_swigregister(OdDbRapidRTRenderSettings)

def OdDbRapidRTRenderSettings_cast(*args):
    return _ODA_Drawings.OdDbRapidRTRenderSettings_cast(*args)

def OdDbRapidRTRenderSettings_desc(*args):
    return _ODA_Drawings.OdDbRapidRTRenderSettings_desc(*args)

def OdDbRapidRTRenderSettings_createObject(*args):
    return _ODA_Drawings.OdDbRapidRTRenderSettings_createObject(*args)

class OdDbRenderEnvironment(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRenderEnvironment_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRenderEnvironment_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRenderEnvironment_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRenderEnvironment

    def setFogEnabled(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_setFogEnabled(self, *args)

    def fogEnabled(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_fogEnabled(self, *args)

    def setFogBackgroundEnabled(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_setFogBackgroundEnabled(self, *args)

    def fogBackgroundEnabled(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_fogBackgroundEnabled(self, *args)

    def setFogColor(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_setFogColor(self, *args)

    def fogColor(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_fogColor(self, *args)

    def setFogDensity(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_setFogDensity(self, *args)

    def fogDensity(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_fogDensity(self, *args)

    def setDistances(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_setDistances(self, *args)

    def distances(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_distances(self, *args)

    def setEnvironmentImageEnabled(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_setEnvironmentImageEnabled(self, *args)

    def environmentImageEnabled(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_environmentImageEnabled(self, *args)

    def setEnvironmentImageFileName(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_setEnvironmentImageFileName(self, *args)

    def environmentImageFileName(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_environmentImageFileName(self, *args)

    def drawable(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_drawable(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_dxfOutFields(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbRenderEnvironment_subSetAttributes(self, *args)

# Register OdDbRenderEnvironment in _ODA_Drawings:
_ODA_Drawings.OdDbRenderEnvironment_swigregister(OdDbRenderEnvironment)

def OdDbRenderEnvironment_cast(*args):
    return _ODA_Drawings.OdDbRenderEnvironment_cast(*args)

def OdDbRenderEnvironment_desc(*args):
    return _ODA_Drawings.OdDbRenderEnvironment_desc(*args)

def OdDbRenderEnvironment_createObject(*args):
    return _ODA_Drawings.OdDbRenderEnvironment_createObject(*args)

class OdDbRenderGlobal(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRenderGlobal_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRenderGlobal_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRenderGlobal_createObject(*args)
    krView = _ODA_Drawings.OdDbRenderGlobal_krView
    krCrop = _ODA_Drawings.OdDbRenderGlobal_krCrop
    krSelected = _ODA_Drawings.OdDbRenderGlobal_krSelected
    krWindow = _ODA_Drawings.OdDbRenderGlobal_krWindow
    krViewport = _ODA_Drawings.OdDbRenderGlobal_krViewport
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRenderGlobal

    def setProcedureAndDestination(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_setProcedureAndDestination(self, *args)

    def procedureAndDestination(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_procedureAndDestination(self, *args)

    def setProcedure(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_setProcedure(self, *args)

    def procedure(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_procedure(self, *args)

    def setDestination(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_setDestination(self, *args)

    def destination(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_destination(self, *args)

    def setSaveEnabled(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_setSaveEnabled(self, *args)

    def saveEnabled(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_saveEnabled(self, *args)

    def setSaveFileName(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_setSaveFileName(self, *args)

    def saveFileName(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_saveFileName(self, *args)

    def setDimensions(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_setDimensions(self, *args)

    def dimensions(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_dimensions(self, *args)

    def setPredefinedPresetsFirst(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_setPredefinedPresetsFirst(self, *args)

    def predefinedPresetsFirst(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_predefinedPresetsFirst(self, *args)

    def setHighInfoLevel(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_setHighInfoLevel(self, *args)

    def highInfoLevel(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_highInfoLevel(self, *args)

    def setExposureType(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_setExposureType(self, *args)

    def exposureType(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_exposureType(self, *args)

    def dimensionName(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_dimensionName(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbRenderGlobal_dxfOutFields(self, *args)

# Register OdDbRenderGlobal in _ODA_Drawings:
_ODA_Drawings.OdDbRenderGlobal_swigregister(OdDbRenderGlobal)

def OdDbRenderGlobal_cast(*args):
    return _ODA_Drawings.OdDbRenderGlobal_cast(*args)

def OdDbRenderGlobal_desc(*args):
    return _ODA_Drawings.OdDbRenderGlobal_desc(*args)

def OdDbRenderGlobal_createObject(*args):
    return _ODA_Drawings.OdDbRenderGlobal_createObject(*args)

class OdDbRenderEntry(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRenderEntry_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRenderEntry_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRenderEntry_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRenderEntry

    def setImageFileName(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_setImageFileName(self, *args)

    def imageFileName(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_imageFileName(self, *args)

    def setDisplayIndex(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_setDisplayIndex(self, *args)

    def displayIndex(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_displayIndex(self, *args)

    def setPresetName(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_setPresetName(self, *args)

    def presetName(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_presetName(self, *args)

    def setViewName(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_setViewName(self, *args)

    def viewName(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_viewName(self, *args)

    def setDimensions(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_setDimensions(self, *args)

    def dimensions(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_dimensions(self, *args)

    def dimensionW(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_dimensionW(self, *args)

    def dimensionH(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_dimensionH(self, *args)

    def setStartTime(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_setStartTime(self, *args)

    def startTime(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_startTime(self, *args)

    def setEndTime(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_setEndTime(self, *args)

    def endTime(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_endTime(self, *args)

    def setRenderTime(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_setRenderTime(self, *args)

    def renderTime(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_renderTime(self, *args)

    def setMemoryAmount(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_setMemoryAmount(self, *args)

    def memoryAmount(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_memoryAmount(self, *args)

    def setMaterialCount(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_setMaterialCount(self, *args)

    def materialCount(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_materialCount(self, *args)

    def setLightCount(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_setLightCount(self, *args)

    def lightCount(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_lightCount(self, *args)

    def setTriangleCount(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_setTriangleCount(self, *args)

    def triangleCount(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_triangleCount(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbRenderEntry_dxfOutFields(self, *args)

# Register OdDbRenderEntry in _ODA_Drawings:
_ODA_Drawings.OdDbRenderEntry_swigregister(OdDbRenderEntry)

def OdDbRenderEntry_cast(*args):
    return _ODA_Drawings.OdDbRenderEntry_cast(*args)

def OdDbRenderEntry_desc(*args):
    return _ODA_Drawings.OdDbRenderEntry_desc(*args)

def OdDbRenderEntry_createObject(*args):
    return _ODA_Drawings.OdDbRenderEntry_createObject(*args)


def oddbGetRenderSettingsDictionaryId(*args):
    return _ODA_Drawings.oddbGetRenderSettingsDictionaryId(*args)

def oddbGetRenderSettingsDictionary(*args):
    return _ODA_Drawings.oddbGetRenderSettingsDictionary(*args)

def oddbGetRenderPlotSettingsDictionaryId(*args):
    return _ODA_Drawings.oddbGetRenderPlotSettingsDictionaryId(*args)

def oddbGetRenderPlotSettingsDictionary(*args):
    return _ODA_Drawings.oddbGetRenderPlotSettingsDictionary(*args)

def oddbGetRenderGlobalObjectId(*args):
    return _ODA_Drawings.oddbGetRenderGlobalObjectId(*args)

def oddbGetRenderGlobalObject(*args):
    return _ODA_Drawings.oddbGetRenderGlobalObject(*args)

def oddbGetRenderEnvironmentObjectId(*args):
    return _ODA_Drawings.oddbGetRenderEnvironmentObjectId(*args)

def oddbGetRenderEnvironmentObject(*args):
    return _ODA_Drawings.oddbGetRenderEnvironmentObject(*args)

def oddbGetActiveRenderSettingsObjectId(*args):
    return _ODA_Drawings.oddbGetActiveRenderSettingsObjectId(*args)

def oddbGetActiveRenderSettingsObject(*args):
    return _ODA_Drawings.oddbGetActiveRenderSettingsObject(*args)

def oddbGetRenderEntriesDictionaryId(*args):
    return _ODA_Drawings.oddbGetRenderEntriesDictionaryId(*args)

def oddbGetRenderEntriesDictionary(*args):
    return _ODA_Drawings.oddbGetRenderEntriesDictionary(*args)

def oddbGetRenderRapidRTSettingsDictionaryId(*args):
    return _ODA_Drawings.oddbGetRenderRapidRTSettingsDictionaryId(*args)

def oddbGetRenderRapidRTSettingsDictionary(*args):
    return _ODA_Drawings.oddbGetRenderRapidRTSettingsDictionary(*args)

def oddbGetActiveRenderRapidRTSettingsObjectId(*args):
    return _ODA_Drawings.oddbGetActiveRenderRapidRTSettingsObjectId(*args)

def oddbGetActiveRenderRapidRTSettingsObject(*args):
    return _ODA_Drawings.oddbGetActiveRenderRapidRTSettingsObject(*args)
class OdDbViewport(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewport_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewport_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewport_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewport_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewport_createObject(*args)

    def height(self, *args):
        return _ODA_Drawings.OdDbViewport_height(self, *args)

    def setHeight(self, *args):
        return _ODA_Drawings.OdDbViewport_setHeight(self, *args)

    def width(self, *args):
        return _ODA_Drawings.OdDbViewport_width(self, *args)

    def setWidth(self, *args):
        return _ODA_Drawings.OdDbViewport_setWidth(self, *args)

    def centerPoint(self, *args):
        return _ODA_Drawings.OdDbViewport_centerPoint(self, *args)

    def setCenterPoint(self, *args):
        return _ODA_Drawings.OdDbViewport_setCenterPoint(self, *args)

    def number(self, *args):
        return _ODA_Drawings.OdDbViewport_number(self, *args)

    def isOn(self, *args):
        return _ODA_Drawings.OdDbViewport_isOn(self, *args)

    def setOn(self, *args):
        return _ODA_Drawings.OdDbViewport_setOn(self, *args)

    def setOff(self, *args):
        return _ODA_Drawings.OdDbViewport_setOff(self, *args)

    def viewTarget(self, *args):
        return _ODA_Drawings.OdDbViewport_viewTarget(self, *args)

    def setViewTarget(self, *args):
        return _ODA_Drawings.OdDbViewport_setViewTarget(self, *args)

    def viewDirection(self, *args):
        return _ODA_Drawings.OdDbViewport_viewDirection(self, *args)

    def setViewDirection(self, *args):
        return _ODA_Drawings.OdDbViewport_setViewDirection(self, *args)

    def viewHeight(self, *args):
        return _ODA_Drawings.OdDbViewport_viewHeight(self, *args)

    def setViewHeight(self, *args):
        return _ODA_Drawings.OdDbViewport_setViewHeight(self, *args)

    def viewCenter(self, *args):
        return _ODA_Drawings.OdDbViewport_viewCenter(self, *args)

    def setViewCenter(self, *args):
        return _ODA_Drawings.OdDbViewport_setViewCenter(self, *args)

    def twistAngle(self, *args):
        return _ODA_Drawings.OdDbViewport_twistAngle(self, *args)

    def setTwistAngle(self, *args):
        return _ODA_Drawings.OdDbViewport_setTwistAngle(self, *args)

    def lensLength(self, *args):
        return _ODA_Drawings.OdDbViewport_lensLength(self, *args)

    def setLensLength(self, *args):
        return _ODA_Drawings.OdDbViewport_setLensLength(self, *args)

    def isFrontClipOn(self, *args):
        return _ODA_Drawings.OdDbViewport_isFrontClipOn(self, *args)

    def setFrontClipOn(self, *args):
        return _ODA_Drawings.OdDbViewport_setFrontClipOn(self, *args)

    def setFrontClipOff(self, *args):
        return _ODA_Drawings.OdDbViewport_setFrontClipOff(self, *args)

    def isBackClipOn(self, *args):
        return _ODA_Drawings.OdDbViewport_isBackClipOn(self, *args)

    def setBackClipOn(self, *args):
        return _ODA_Drawings.OdDbViewport_setBackClipOn(self, *args)

    def setBackClipOff(self, *args):
        return _ODA_Drawings.OdDbViewport_setBackClipOff(self, *args)

    def isFrontClipAtEyeOn(self, *args):
        return _ODA_Drawings.OdDbViewport_isFrontClipAtEyeOn(self, *args)

    def setFrontClipAtEyeOn(self, *args):
        return _ODA_Drawings.OdDbViewport_setFrontClipAtEyeOn(self, *args)

    def setFrontClipAtEyeOff(self, *args):
        return _ODA_Drawings.OdDbViewport_setFrontClipAtEyeOff(self, *args)

    def frontClipDistance(self, *args):
        return _ODA_Drawings.OdDbViewport_frontClipDistance(self, *args)

    def setFrontClipDistance(self, *args):
        return _ODA_Drawings.OdDbViewport_setFrontClipDistance(self, *args)

    def backClipDistance(self, *args):
        return _ODA_Drawings.OdDbViewport_backClipDistance(self, *args)

    def setBackClipDistance(self, *args):
        return _ODA_Drawings.OdDbViewport_setBackClipDistance(self, *args)

    def isPerspectiveOn(self, *args):
        return _ODA_Drawings.OdDbViewport_isPerspectiveOn(self, *args)

    def setPerspectiveOn(self, *args):
        return _ODA_Drawings.OdDbViewport_setPerspectiveOn(self, *args)

    def setPerspectiveOff(self, *args):
        return _ODA_Drawings.OdDbViewport_setPerspectiveOff(self, *args)

    def isUcsFollowModeOn(self, *args):
        return _ODA_Drawings.OdDbViewport_isUcsFollowModeOn(self, *args)

    def setUcsFollowModeOn(self, *args):
        return _ODA_Drawings.OdDbViewport_setUcsFollowModeOn(self, *args)

    def setUcsFollowModeOff(self, *args):
        return _ODA_Drawings.OdDbViewport_setUcsFollowModeOff(self, *args)

    def isUcsIconVisible(self, *args):
        return _ODA_Drawings.OdDbViewport_isUcsIconVisible(self, *args)

    def setUcsIconVisible(self, *args):
        return _ODA_Drawings.OdDbViewport_setUcsIconVisible(self, *args)

    def setUcsIconInvisible(self, *args):
        return _ODA_Drawings.OdDbViewport_setUcsIconInvisible(self, *args)

    def isUcsIconAtOrigin(self, *args):
        return _ODA_Drawings.OdDbViewport_isUcsIconAtOrigin(self, *args)

    def setUcsIconAtOrigin(self, *args):
        return _ODA_Drawings.OdDbViewport_setUcsIconAtOrigin(self, *args)

    def setUcsIconAtCorner(self, *args):
        return _ODA_Drawings.OdDbViewport_setUcsIconAtCorner(self, *args)

    def isFastZoomOn(self, *args):
        return _ODA_Drawings.OdDbViewport_isFastZoomOn(self, *args)

    def setFastZoomOn(self, *args):
        return _ODA_Drawings.OdDbViewport_setFastZoomOn(self, *args)

    def setFastZoomOff(self, *args):
        return _ODA_Drawings.OdDbViewport_setFastZoomOff(self, *args)

    def circleSides(self, *args):
        return _ODA_Drawings.OdDbViewport_circleSides(self, *args)

    def setCircleSides(self, *args):
        return _ODA_Drawings.OdDbViewport_setCircleSides(self, *args)

    def isSnapOn(self, *args):
        return _ODA_Drawings.OdDbViewport_isSnapOn(self, *args)

    def setSnapOn(self, *args):
        return _ODA_Drawings.OdDbViewport_setSnapOn(self, *args)

    def setSnapOff(self, *args):
        return _ODA_Drawings.OdDbViewport_setSnapOff(self, *args)

    def isSnapIsometric(self, *args):
        return _ODA_Drawings.OdDbViewport_isSnapIsometric(self, *args)

    def setSnapIsometric(self, *args):
        return _ODA_Drawings.OdDbViewport_setSnapIsometric(self, *args)

    def setSnapStandard(self, *args):
        return _ODA_Drawings.OdDbViewport_setSnapStandard(self, *args)

    def snapAngle(self, *args):
        return _ODA_Drawings.OdDbViewport_snapAngle(self, *args)

    def setSnapAngle(self, *args):
        return _ODA_Drawings.OdDbViewport_setSnapAngle(self, *args)

    def snapBasePoint(self, *args):
        return _ODA_Drawings.OdDbViewport_snapBasePoint(self, *args)

    def setSnapBasePoint(self, *args):
        return _ODA_Drawings.OdDbViewport_setSnapBasePoint(self, *args)

    def snapIncrement(self, *args):
        return _ODA_Drawings.OdDbViewport_snapIncrement(self, *args)

    def setSnapIncrement(self, *args):
        return _ODA_Drawings.OdDbViewport_setSnapIncrement(self, *args)

    def snapIsoPair(self, *args):
        return _ODA_Drawings.OdDbViewport_snapIsoPair(self, *args)

    def setSnapIsoPair(self, *args):
        return _ODA_Drawings.OdDbViewport_setSnapIsoPair(self, *args)

    def isGridOn(self, *args):
        return _ODA_Drawings.OdDbViewport_isGridOn(self, *args)

    def setGridOn(self, *args):
        return _ODA_Drawings.OdDbViewport_setGridOn(self, *args)

    def setGridOff(self, *args):
        return _ODA_Drawings.OdDbViewport_setGridOff(self, *args)

    def gridIncrement(self, *args):
        return _ODA_Drawings.OdDbViewport_gridIncrement(self, *args)

    def setGridIncrement(self, *args):
        return _ODA_Drawings.OdDbViewport_setGridIncrement(self, *args)

    def hiddenLinesRemoved(self, *args):
        return _ODA_Drawings.OdDbViewport_hiddenLinesRemoved(self, *args)

    def showHiddenLines(self, *args):
        return _ODA_Drawings.OdDbViewport_showHiddenLines(self, *args)

    def removeHiddenLines(self, *args):
        return _ODA_Drawings.OdDbViewport_removeHiddenLines(self, *args)

    def freezeLayersInViewport(self, *args):
        return _ODA_Drawings.OdDbViewport_freezeLayersInViewport(self, *args)

    def thawLayersInViewport(self, *args):
        return _ODA_Drawings.OdDbViewport_thawLayersInViewport(self, *args)

    def thawAllLayersInViewport(self, *args):
        return _ODA_Drawings.OdDbViewport_thawAllLayersInViewport(self, *args)

    def isLayerFrozenInViewport(self, *args):
        return _ODA_Drawings.OdDbViewport_isLayerFrozenInViewport(self, *args)

    def getFrozenLayerList(self, *args):
        return _ODA_Drawings.OdDbViewport_getFrozenLayerList(self, *args)

    def updateDisplay(self, *args):
        return _ODA_Drawings.OdDbViewport_updateDisplay(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbViewport_subSetAttributes(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbViewport_subWorldDraw(self, *args)

    def isLocked(self, *args):
        return _ODA_Drawings.OdDbViewport_isLocked(self, *args)

    def setLocked(self, *args):
        return _ODA_Drawings.OdDbViewport_setLocked(self, *args)

    def setUnlocked(self, *args):
        return _ODA_Drawings.OdDbViewport_setUnlocked(self, *args)

    def isTransparent(self, *args):
        return _ODA_Drawings.OdDbViewport_isTransparent(self, *args)

    def setTransparent(self, *args):
        return _ODA_Drawings.OdDbViewport_setTransparent(self, *args)

    def setOpaque(self, *args):
        return _ODA_Drawings.OdDbViewport_setOpaque(self, *args)
    kScaleToFit = _ODA_Drawings.OdDbViewport_kScaleToFit
    kCustomScale = _ODA_Drawings.OdDbViewport_kCustomScale
    k1_1 = _ODA_Drawings.OdDbViewport_k1_1
    k1_2 = _ODA_Drawings.OdDbViewport_k1_2
    k1_4 = _ODA_Drawings.OdDbViewport_k1_4
    k1_5 = _ODA_Drawings.OdDbViewport_k1_5
    k1_8 = _ODA_Drawings.OdDbViewport_k1_8
    k1_10 = _ODA_Drawings.OdDbViewport_k1_10
    k1_16 = _ODA_Drawings.OdDbViewport_k1_16
    k1_20 = _ODA_Drawings.OdDbViewport_k1_20
    k1_30 = _ODA_Drawings.OdDbViewport_k1_30
    k1_40 = _ODA_Drawings.OdDbViewport_k1_40
    k1_50 = _ODA_Drawings.OdDbViewport_k1_50
    k1_100 = _ODA_Drawings.OdDbViewport_k1_100
    k2_1 = _ODA_Drawings.OdDbViewport_k2_1
    k4_1 = _ODA_Drawings.OdDbViewport_k4_1
    k8_1 = _ODA_Drawings.OdDbViewport_k8_1
    k10_1 = _ODA_Drawings.OdDbViewport_k10_1
    k100_1 = _ODA_Drawings.OdDbViewport_k100_1
    k1_128in_1ft = _ODA_Drawings.OdDbViewport_k1_128in_1ft
    k1_64in_1ft = _ODA_Drawings.OdDbViewport_k1_64in_1ft
    k1_32in_1ft = _ODA_Drawings.OdDbViewport_k1_32in_1ft
    k1_16in_1ft = _ODA_Drawings.OdDbViewport_k1_16in_1ft
    k3_32in_1ft = _ODA_Drawings.OdDbViewport_k3_32in_1ft
    k1_8in_1ft = _ODA_Drawings.OdDbViewport_k1_8in_1ft
    k3_16in_1ft = _ODA_Drawings.OdDbViewport_k3_16in_1ft
    k1_4in_1ft = _ODA_Drawings.OdDbViewport_k1_4in_1ft
    k3_8in_1ft = _ODA_Drawings.OdDbViewport_k3_8in_1ft
    k1_2in_1ft = _ODA_Drawings.OdDbViewport_k1_2in_1ft
    k3_4in_1ft = _ODA_Drawings.OdDbViewport_k3_4in_1ft
    k1in_1ft = _ODA_Drawings.OdDbViewport_k1in_1ft
    k1and1_2in_1ft = _ODA_Drawings.OdDbViewport_k1and1_2in_1ft
    k3in_1ft = _ODA_Drawings.OdDbViewport_k3in_1ft
    k6in_1ft = _ODA_Drawings.OdDbViewport_k6in_1ft
    k1ft_1ft = _ODA_Drawings.OdDbViewport_k1ft_1ft
    kAsDisplayed = _ODA_Drawings.OdDbViewport_kAsDisplayed
    kWireframe = _ODA_Drawings.OdDbViewport_kWireframe
    kHidden = _ODA_Drawings.OdDbViewport_kHidden
    kRendered = _ODA_Drawings.OdDbViewport_kRendered
    kVisualStyle = _ODA_Drawings.OdDbViewport_kVisualStyle
    kRenderPreset = _ODA_Drawings.OdDbViewport_kRenderPreset

    def customScale(self, *args):
        return _ODA_Drawings.OdDbViewport_customScale(self, *args)

    def setCustomScale(self, *args):
        return _ODA_Drawings.OdDbViewport_setCustomScale(self, *args)

    def standardScale(self, *args):
        return _ODA_Drawings.OdDbViewport_standardScale(self, *args)

    def setStandardScale(self, *args):
        return _ODA_Drawings.OdDbViewport_setStandardScale(self, *args)

    def plotStyleSheet(self, *args):
        return _ODA_Drawings.OdDbViewport_plotStyleSheet(self, *args)

    def effectivePlotStyleSheet(self, *args):
        return _ODA_Drawings.OdDbViewport_effectivePlotStyleSheet(self, *args)

    def setPlotStyleSheet(self, *args):
        return _ODA_Drawings.OdDbViewport_setPlotStyleSheet(self, *args)

    def isNonRectClipOn(self, *args):
        return _ODA_Drawings.OdDbViewport_isNonRectClipOn(self, *args)

    def setNonRectClipOn(self, *args):
        return _ODA_Drawings.OdDbViewport_setNonRectClipOn(self, *args)

    def setNonRectClipOff(self, *args):
        return _ODA_Drawings.OdDbViewport_setNonRectClipOff(self, *args)

    def nonRectClipEntityId(self, *args):
        return _ODA_Drawings.OdDbViewport_nonRectClipEntityId(self, *args)

    def setNonRectClipEntityId(self, *args):
        return _ODA_Drawings.OdDbViewport_setNonRectClipEntityId(self, *args)

    def getUcs(self, *args):
        return _ODA_Drawings.OdDbViewport_getUcs(self, *args)

    def isUcsOrthographic(self, *args):
        return _ODA_Drawings.OdDbViewport_isUcsOrthographic(self, *args)

    def ucsName(self, *args):
        return _ODA_Drawings.OdDbViewport_ucsName(self, *args)

    def elevation(self, *args):
        return _ODA_Drawings.OdDbViewport_elevation(self, *args)

    def setUcs(self, *args):
        return _ODA_Drawings.OdDbViewport_setUcs(self, *args)

    def setUcsToWorld(self, *args):
        return _ODA_Drawings.OdDbViewport_setUcsToWorld(self, *args)

    def setElevation(self, *args):
        return _ODA_Drawings.OdDbViewport_setElevation(self, *args)

    def isUcsSavedWithViewport(self, *args):
        return _ODA_Drawings.OdDbViewport_isUcsSavedWithViewport(self, *args)

    def setUcsPerViewport(self, *args):
        return _ODA_Drawings.OdDbViewport_setUcsPerViewport(self, *args)

    def setRenderMode(self, *args):
        return _ODA_Drawings.OdDbViewport_setRenderMode(self, *args)

    def renderMode(self, *args):
        return _ODA_Drawings.OdDbViewport_renderMode(self, *args)

    def shadePlot(self, *args):
        return _ODA_Drawings.OdDbViewport_shadePlot(self, *args)

    def shadePlotId(self, *args):
        return _ODA_Drawings.OdDbViewport_shadePlotId(self, *args)

    def setShadePlot(self, *args):
        return _ODA_Drawings.OdDbViewport_setShadePlot(self, *args)

    def plotWireframe(self, *args):
        return _ODA_Drawings.OdDbViewport_plotWireframe(self, *args)

    def plotAsRaster(self, *args):
        return _ODA_Drawings.OdDbViewport_plotAsRaster(self, *args)

    def background(self, *args):
        return _ODA_Drawings.OdDbViewport_background(self, *args)

    def setBackground(self, *args):
        return _ODA_Drawings.OdDbViewport_setBackground(self, *args)

    def visualStyle(self, *args):
        return _ODA_Drawings.OdDbViewport_visualStyle(self, *args)

    def setVisualStyle(self, *args):
        return _ODA_Drawings.OdDbViewport_setVisualStyle(self, *args)

    def isDefaultLightingOn(self, *args):
        return _ODA_Drawings.OdDbViewport_isDefaultLightingOn(self, *args)

    def setDefaultLightingOn(self, *args):
        return _ODA_Drawings.OdDbViewport_setDefaultLightingOn(self, *args)

    def defaultLightingType(self, *args):
        return _ODA_Drawings.OdDbViewport_defaultLightingType(self, *args)

    def setDefaultLightingType(self, *args):
        return _ODA_Drawings.OdDbViewport_setDefaultLightingType(self, *args)

    def brightness(self, *args):
        return _ODA_Drawings.OdDbViewport_brightness(self, *args)

    def setBrightness(self, *args):
        return _ODA_Drawings.OdDbViewport_setBrightness(self, *args)

    def contrast(self, *args):
        return _ODA_Drawings.OdDbViewport_contrast(self, *args)

    def setContrast(self, *args):
        return _ODA_Drawings.OdDbViewport_setContrast(self, *args)

    def ambientLightColor(self, *args):
        return _ODA_Drawings.OdDbViewport_ambientLightColor(self, *args)

    def setAmbientLightColor(self, *args):
        return _ODA_Drawings.OdDbViewport_setAmbientLightColor(self, *args)

    def sunId(self, *args):
        return _ODA_Drawings.OdDbViewport_sunId(self, *args)

    def setSun(self, *args):
        return _ODA_Drawings.OdDbViewport_setSun(self, *args)

    def toneOperatorParameters(self, *args):
        return _ODA_Drawings.OdDbViewport_toneOperatorParameters(self, *args)

    def setToneOperatorParameters(self, *args):
        return _ODA_Drawings.OdDbViewport_setToneOperatorParameters(self, *args)

    def setAnnotationScale(self, *args):
        return _ODA_Drawings.OdDbViewport_setAnnotationScale(self, *args)

    def annotationScale(self, *args):
        return _ODA_Drawings.OdDbViewport_annotationScale(self, *args)

    def isGridBoundToLimits(self, *args):
        return _ODA_Drawings.OdDbViewport_isGridBoundToLimits(self, *args)

    def setGridBoundToLimits(self, *args):
        return _ODA_Drawings.OdDbViewport_setGridBoundToLimits(self, *args)

    def isGridAdaptive(self, *args):
        return _ODA_Drawings.OdDbViewport_isGridAdaptive(self, *args)

    def setGridAdaptive(self, *args):
        return _ODA_Drawings.OdDbViewport_setGridAdaptive(self, *args)

    def isGridSubdivisionRestricted(self, *args):
        return _ODA_Drawings.OdDbViewport_isGridSubdivisionRestricted(self, *args)

    def setGridSubdivisionRestricted(self, *args):
        return _ODA_Drawings.OdDbViewport_setGridSubdivisionRestricted(self, *args)

    def isGridFollow(self, *args):
        return _ODA_Drawings.OdDbViewport_isGridFollow(self, *args)

    def setGridFollow(self, *args):
        return _ODA_Drawings.OdDbViewport_setGridFollow(self, *args)

    def gridMajor(self, *args):
        return _ODA_Drawings.OdDbViewport_gridMajor(self, *args)

    def setGridMajor(self, *args):
        return _ODA_Drawings.OdDbViewport_setGridMajor(self, *args)

    def setModelView(self, *args):
        return _ODA_Drawings.OdDbViewport_setModelView(self, *args)

    def getModelView(self, *args):
        return _ODA_Drawings.OdDbViewport_getModelView(self, *args)

    def removeModelView(self, *args):
        return _ODA_Drawings.OdDbViewport_removeModelView(self, *args)

    def syncModelView(self, *args):
        return _ODA_Drawings.OdDbViewport_syncModelView(self, *args)

    def setSheetView(self, *args):
        return _ODA_Drawings.OdDbViewport_setSheetView(self, *args)

    def getSheetView(self, *args):
        return _ODA_Drawings.OdDbViewport_getSheetView(self, *args)

    def removeSheetView(self, *args):
        return _ODA_Drawings.OdDbViewport_removeSheetView(self, *args)

    def setLabelBlock(self, *args):
        return _ODA_Drawings.OdDbViewport_setLabelBlock(self, *args)

    def getLabelBlock(self, *args):
        return _ODA_Drawings.OdDbViewport_getLabelBlock(self, *args)

    def removeLabelBlock(self, *args):
        return _ODA_Drawings.OdDbViewport_removeLabelBlock(self, *args)

    def gsView(self, *args):
        return _ODA_Drawings.OdDbViewport_gsView(self, *args)

    def setGsView(self, *args):
        return _ODA_Drawings.OdDbViewport_setGsView(self, *args)

    def subSetDatabaseDefaults(self, *args):
        return _ODA_Drawings.OdDbViewport_subSetDatabaseDefaults(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbViewport_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbViewport_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbViewport_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbViewport_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbViewport_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbViewport_dxfOutFields_R12(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbViewport_subGetClassID(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbViewport_subClose(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbViewport_subErase(self, *args)

    def zoomExtents(self, *args):
        return _ODA_Drawings.OdDbViewport_zoomExtents(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbViewport_subGetGeomExtents(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbViewport_subTransformBy(self, *args)

    def modified(self, *args):
        return _ODA_Drawings.OdDbViewport_modified(self, *args)

    def erased(self, *args):
        return _ODA_Drawings.OdDbViewport_erased(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbViewport_subGetTransformedCopy(self, *args)

    def explodeGeometry(self, *args):
        return _ODA_Drawings.OdDbViewport_explodeGeometry(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewport

# Register OdDbViewport in _ODA_Drawings:
_ODA_Drawings.OdDbViewport_swigregister(OdDbViewport)

def OdDbViewport_cast(*args):
    return _ODA_Drawings.OdDbViewport_cast(*args)

def OdDbViewport_desc(*args):
    return _ODA_Drawings.OdDbViewport_desc(*args)

def OdDbViewport_createObject(*args):
    return _ODA_Drawings.OdDbViewport_createObject(*args)

kSimpleMesh = _ODA_Drawings.kSimpleMesh
kQuadSurfaceMesh = _ODA_Drawings.kQuadSurfaceMesh
kCubicSurfaceMesh = _ODA_Drawings.kCubicSurfaceMesh
kBezierSurfaceMesh = _ODA_Drawings.kBezierSurfaceMesh
class OdDbPolygonMesh(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPolygonMesh_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPolygonMesh_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPolygonMesh_createObject(*args)

    def polyMeshType(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_polyMeshType(self, *args)

    def setPolyMeshType(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_setPolyMeshType(self, *args)

    def convertToPolyMeshType(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_convertToPolyMeshType(self, *args)

    def mSize(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_mSize(self, *args)

    def setMSize(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_setMSize(self, *args)

    def nSize(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_nSize(self, *args)

    def setNSize(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_setNSize(self, *args)

    def isMClosed(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_isMClosed(self, *args)

    def makeMClosed(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_makeMClosed(self, *args)

    def makeMOpen(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_makeMOpen(self, *args)

    def isNClosed(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_isNClosed(self, *args)

    def makeNClosed(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_makeNClosed(self, *args)

    def makeNOpen(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_makeNOpen(self, *args)

    def mSurfaceDensity(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_mSurfaceDensity(self, *args)

    def setMSurfaceDensity(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_setMSurfaceDensity(self, *args)

    def nSurfaceDensity(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_nSurfaceDensity(self, *args)

    def setNSurfaceDensity(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_setNSurfaceDensity(self, *args)

    def straighten(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_straighten(self, *args)

    def surfaceFit(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_surfaceFit(self, *args)

    def appendVertex(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_appendVertex(self, *args)

    def openVertex(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_openVertex(self, *args)

    def openSequenceEnd(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_openSequenceEnd(self, *args)

    def vertexIterator(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_vertexIterator(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_dxfOutFields(self, *args)

    def dxfOut(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_dxfOut(self, *args)

    def dxfIn(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_dxfIn(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_dxfOutFields_R12(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_subWorldDraw(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_subClose(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_subGetClassID(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_getPlane(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_subTransformBy(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_subExplode(self, *args)

    def explodeGeometry(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_explodeGeometry(self, *args)

    def subGetSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_subGetSubentPathsAtGsMarker(self, *args)

    def subGetGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbPolygonMesh_subGetGsMarkersAtSubentPath(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPolygonMesh

# Register OdDbPolygonMesh in _ODA_Drawings:
_ODA_Drawings.OdDbPolygonMesh_swigregister(OdDbPolygonMesh)

def OdDbPolygonMesh_cast(*args):
    return _ODA_Drawings.OdDbPolygonMesh_cast(*args)

def OdDbPolygonMesh_desc(*args):
    return _ODA_Drawings.OdDbPolygonMesh_desc(*args)

def OdDbPolygonMesh_createObject(*args):
    return _ODA_Drawings.OdDbPolygonMesh_createObject(*args)

class OdRectangle3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    upLeft = property(_ODA_Drawings.OdRectangle3d_upLeft_get, _ODA_Drawings.OdRectangle3d_upLeft_set)
    upRight = property(_ODA_Drawings.OdRectangle3d_upRight_get, _ODA_Drawings.OdRectangle3d_upRight_set)
    lowLeft = property(_ODA_Drawings.OdRectangle3d_lowLeft_get, _ODA_Drawings.OdRectangle3d_lowLeft_set)
    lowRight = property(_ODA_Drawings.OdRectangle3d_lowRight_get, _ODA_Drawings.OdRectangle3d_lowRight_set)

    def __init__(self, *args):
        _ODA_Drawings.OdRectangle3d_swiginit(self, _ODA_Drawings.new_OdRectangle3d(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdRectangle3d

# Register OdRectangle3d in _ODA_Drawings:
_ODA_Drawings.OdRectangle3d_swigregister(OdRectangle3d)

class OdDbOle2Frame(OdDbOleFrame):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbOle2Frame_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbOle2Frame_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbOle2Frame_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_dxfOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_subViewportDraw(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_subTransformBy(self, *args)

    def getLocation(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_getLocation(self, *args)

    def position(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_position(self, *args)

    def setPosition(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_setPosition(self, *args)

    def getUserType(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_getUserType(self, *args)
    kUnknown = _ODA_Drawings.OdDbOle2Frame_kUnknown
    kLink = _ODA_Drawings.OdDbOle2Frame_kLink
    kEmbedded = _ODA_Drawings.OdDbOle2Frame_kEmbedded
    kStatic = _ODA_Drawings.OdDbOle2Frame_kStatic

    def getType(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_getType(self, *args)

    def getLinkName(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_getLinkName(self, *args)

    def getLinkPath(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_getLinkPath(self, *args)
    kMonochrome = _ODA_Drawings.OdDbOle2Frame_kMonochrome
    kLowGraphics = _ODA_Drawings.OdDbOle2Frame_kLowGraphics
    kHighGraphics = _ODA_Drawings.OdDbOle2Frame_kHighGraphics
    kAutomatic = _ODA_Drawings.OdDbOle2Frame_kAutomatic

    def outputQuality(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_outputQuality(self, *args)

    def setOutputQuality(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_setOutputQuality(self, *args)

    def getCompoundDocumentDataSize(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_getCompoundDocumentDataSize(self, *args)

    def getCompoundDocument(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_getCompoundDocument(self, *args)

    def setCompoundDocument(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_setCompoundDocument(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_subGetClassID(self, *args)

    def itemHandler(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_itemHandler(self, *args)

    def getItemHandler(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_getItemHandler(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_subClose(self, *args)

    def unhandled_unknown0(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_unhandled_unknown0(self, *args)

    def unhandled_unknown1(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_unhandled_unknown1(self, *args)

    def unhandled_unknown2(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_unhandled_unknown2(self, *args)

    def unhandled_setUnknown(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_unhandled_setUnknown(self, *args)

    def unhandled_himetricWidth(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_unhandled_himetricWidth(self, *args)

    def unhandled_himetricHeight(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_unhandled_himetricHeight(self, *args)

    def unhandled_setHimetricSize(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_unhandled_setHimetricSize(self, *args)

    def reset(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_reset(self, *args)

    def autoOutputQuality(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_autoOutputQuality(self, *args)

    def setAutoOutputQuality(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_setAutoOutputQuality(self, *args)

    def rotation(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_rotation(self, *args)

    def setRotation(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_setRotation(self, *args)

    def wcsWidth(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_wcsWidth(self, *args)

    def setWcsWidth(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_setWcsWidth(self, *args)

    def wcsHeight(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_wcsHeight(self, *args)

    def setWcsHeight(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_setWcsHeight(self, *args)

    def scaleWidth(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_scaleWidth(self, *args)

    def setScaleWidth(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_setScaleWidth(self, *args)

    def scaleHeight(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_scaleHeight(self, *args)

    def setScaleHeight(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_setScaleHeight(self, *args)

    def lockAspect(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_lockAspect(self, *args)

    def setLockAspect(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_setLockAspect(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_subGetTransformedCopy(self, *args)

    def subSetDatabaseDefaults(self, *args):
        return _ODA_Drawings.OdDbOle2Frame_subSetDatabaseDefaults(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbOle2Frame

# Register OdDbOle2Frame in _ODA_Drawings:
_ODA_Drawings.OdDbOle2Frame_swigregister(OdDbOle2Frame)

def OdDbOle2Frame_cast(*args):
    return _ODA_Drawings.OdDbOle2Frame_cast(*args)

def OdDbOle2Frame_desc(*args):
    return _ODA_Drawings.OdDbOle2Frame_desc(*args)

def OdDbOle2Frame_createObject(*args):
    return _ODA_Drawings.OdDbOle2Frame_createObject(*args)

class OdDbGeoPositionMarker(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    kLeftAlignment = _ODA_Drawings.OdDbGeoPositionMarker_kLeftAlignment
    kCenterAlignment = _ODA_Drawings.OdDbGeoPositionMarker_kCenterAlignment
    kRightAlignment = _ODA_Drawings.OdDbGeoPositionMarker_kRightAlignment

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbGeoPositionMarker_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbGeoPositionMarker_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGeoPositionMarker_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGeoPositionMarker

    def position(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_position(self, *args)

    def setPosition(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_setPosition(self, *args)

    def radius(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_radius(self, *args)

    def setRadius(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_setRadius(self, *args)

    def text(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_text(self, *args)

    def setText(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_setText(self, *args)

    def mtext(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_mtext(self, *args)

    def setMText(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_setMText(self, *args)

    def mtextVisible(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_mtextVisible(self, *args)

    def setMTextVisible(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_setMTextVisible(self, *args)

    def landingGap(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_landingGap(self, *args)

    def setLandingGap(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_setLandingGap(self, *args)

    def enableFrameText(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_enableFrameText(self, *args)

    def setEnableFrameText(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_setEnableFrameText(self, *args)

    def textAlignmentType(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_textAlignmentType(self, *args)

    def setTextAlignmentType(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_setTextAlignmentType(self, *args)

    def notes(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_notes(self, *args)

    def setNotes(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_setNotes(self, *args)

    def geoPosition(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_geoPosition(self, *args)

    def setGeoPosition(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_setGeoPosition(self, *args)

    def latLonAlt(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_latLonAlt(self, *args)

    def setLatLonAlt(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_setLatLonAlt(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_normal(self, *args)

    def textStyle(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_textStyle(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_dxfOutFields(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_subSetAttributes(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_subViewportDraw(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_subTransformBy(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_subClose(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_subGetGeomExtents(self, *args)

    def subSetDatabaseDefaults(self, *args):
        return _ODA_Drawings.OdDbGeoPositionMarker_subSetDatabaseDefaults(self, *args)

# Register OdDbGeoPositionMarker in _ODA_Drawings:
_ODA_Drawings.OdDbGeoPositionMarker_swigregister(OdDbGeoPositionMarker)

def OdDbGeoPositionMarker_cast(*args):
    return _ODA_Drawings.OdDbGeoPositionMarker_cast(*args)

def OdDbGeoPositionMarker_desc(*args):
    return _ODA_Drawings.OdDbGeoPositionMarker_desc(*args)

def OdDbGeoPositionMarker_createObject(*args):
    return _ODA_Drawings.OdDbGeoPositionMarker_createObject(*args)

class OdDbHelix(OdDbSpline):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbHelix_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbHelix_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbHelix_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbHelix_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbHelix_createObject(*args)
    kTurnHeight = _ODA_Drawings.OdDbHelix_kTurnHeight
    kTurns = _ODA_Drawings.OdDbHelix_kTurns
    kHeight = _ODA_Drawings.OdDbHelix_kHeight

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbHelix_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbHelix_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbHelix_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbHelix_dxfOutFields(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbHelix_subExplode(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbHelix_subTransformBy(self, *args)

    def createHelix(self, *args):
        return _ODA_Drawings.OdDbHelix_createHelix(self, *args)

    def axisPoint(self, *args):
        return _ODA_Drawings.OdDbHelix_axisPoint(self, *args)

    def setAxisPoint(self, *args):
        return _ODA_Drawings.OdDbHelix_setAxisPoint(self, *args)

    def startPoint(self, *args):
        return _ODA_Drawings.OdDbHelix_startPoint(self, *args)

    def setStartPoint(self, *args):
        return _ODA_Drawings.OdDbHelix_setStartPoint(self, *args)

    def axisVector(self, *args):
        return _ODA_Drawings.OdDbHelix_axisVector(self, *args)

    def setAxisVector(self, *args):
        return _ODA_Drawings.OdDbHelix_setAxisVector(self, *args)

    def height(self, *args):
        return _ODA_Drawings.OdDbHelix_height(self, *args)

    def setHeight(self, *args):
        return _ODA_Drawings.OdDbHelix_setHeight(self, *args)

    def baseRadius(self, *args):
        return _ODA_Drawings.OdDbHelix_baseRadius(self, *args)

    def setBaseRadius(self, *args):
        return _ODA_Drawings.OdDbHelix_setBaseRadius(self, *args)

    def topRadius(self, *args):
        return _ODA_Drawings.OdDbHelix_topRadius(self, *args)

    def setTopRadius(self, *args):
        return _ODA_Drawings.OdDbHelix_setTopRadius(self, *args)

    def turns(self, *args):
        return _ODA_Drawings.OdDbHelix_turns(self, *args)

    def setTurns(self, *args):
        return _ODA_Drawings.OdDbHelix_setTurns(self, *args)

    def turnHeight(self, *args):
        return _ODA_Drawings.OdDbHelix_turnHeight(self, *args)

    def setTurnHeight(self, *args):
        return _ODA_Drawings.OdDbHelix_setTurnHeight(self, *args)

    def twist(self, *args):
        return _ODA_Drawings.OdDbHelix_twist(self, *args)

    def setTwist(self, *args):
        return _ODA_Drawings.OdDbHelix_setTwist(self, *args)

    def constrain(self, *args):
        return _ODA_Drawings.OdDbHelix_constrain(self, *args)

    def setConstrain(self, *args):
        return _ODA_Drawings.OdDbHelix_setConstrain(self, *args)

    def turnSlope(self, *args):
        return _ODA_Drawings.OdDbHelix_turnSlope(self, *args)

    def totalLength(self, *args):
        return _ODA_Drawings.OdDbHelix_totalLength(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbHelix_subGetClassID(self, *args)

    def reverseCurve(self, *args):
        return _ODA_Drawings.OdDbHelix_reverseCurve(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbHelix

# Register OdDbHelix in _ODA_Drawings:
_ODA_Drawings.OdDbHelix_swigregister(OdDbHelix)

def OdDbHelix_cast(*args):
    return _ODA_Drawings.OdDbHelix_cast(*args)

def OdDbHelix_desc(*args):
    return _ODA_Drawings.OdDbHelix_desc(*args)

def OdDbHelix_createObject(*args):
    return _ODA_Drawings.OdDbHelix_createObject(*args)

kTableBreakNone = _ODA_Drawings.kTableBreakNone
kTableBreakEnableBreaking = _ODA_Drawings.kTableBreakEnableBreaking
kTableBreakRepeatTopLabels = _ODA_Drawings.kTableBreakRepeatTopLabels
kTableBreakRepeatBottomLabels = _ODA_Drawings.kTableBreakRepeatBottomLabels
kTableBreakAllowManualPositions = _ODA_Drawings.kTableBreakAllowManualPositions
kTableBreakAllowManualHeights = _ODA_Drawings.kTableBreakAllowManualHeights
kTableBreakFlowRight = _ODA_Drawings.kTableBreakFlowRight
kTableBreakFlowDownOrUp = _ODA_Drawings.kTableBreakFlowDownOrUp
kTableBreakFlowLeft = _ODA_Drawings.kTableBreakFlowLeft
kTableHitNone = _ODA_Drawings.kTableHitNone
kTableHitCell = _ODA_Drawings.kTableHitCell
kTableHitRowIndicator = _ODA_Drawings.kTableHitRowIndicator
kTableHitColumnIndicator = _ODA_Drawings.kTableHitColumnIndicator
kTableHitGridLine = _ODA_Drawings.kTableHitGridLine
class OdDbSubTable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    position = property(_ODA_Drawings.OdDbSubTable_position_get, _ODA_Drawings.OdDbSubTable_position_set)
    height = property(_ODA_Drawings.OdDbSubTable_height_get, _ODA_Drawings.OdDbSubTable_height_set)

    def __init__(self, *args):
        _ODA_Drawings.OdDbSubTable_swiginit(self, _ODA_Drawings.new_OdDbSubTable(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSubTable

# Register OdDbSubTable in _ODA_Drawings:
_ODA_Drawings.OdDbSubTable_swigregister(OdDbSubTable)

class OdDbTable(OdDbBlockReference):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbTable_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbTable_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbTable_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbTable_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbTable_createObject(*args)
    kTitleSuppressed = _ODA_Drawings.OdDbTable_kTitleSuppressed
    kHeaderSuppressed = _ODA_Drawings.OdDbTable_kHeaderSuppressed
    kFlowDirection = _ODA_Drawings.OdDbTable_kFlowDirection
    kHorzCellMargin = _ODA_Drawings.OdDbTable_kHorzCellMargin
    kVertCellMargin = _ODA_Drawings.OdDbTable_kVertCellMargin
    kTitleRowColor = _ODA_Drawings.OdDbTable_kTitleRowColor
    kHeaderRowColor = _ODA_Drawings.OdDbTable_kHeaderRowColor
    kDataRowColor = _ODA_Drawings.OdDbTable_kDataRowColor
    kTitleRowFillNone = _ODA_Drawings.OdDbTable_kTitleRowFillNone
    kHeaderRowFillNone = _ODA_Drawings.OdDbTable_kHeaderRowFillNone
    kDataRowFillNone = _ODA_Drawings.OdDbTable_kDataRowFillNone
    kTitleRowFillColor = _ODA_Drawings.OdDbTable_kTitleRowFillColor
    kHeaderRowFillColor = _ODA_Drawings.OdDbTable_kHeaderRowFillColor
    kDataRowFillColor = _ODA_Drawings.OdDbTable_kDataRowFillColor
    kTitleRowAlignment = _ODA_Drawings.OdDbTable_kTitleRowAlignment
    kHeaderRowAlignment = _ODA_Drawings.OdDbTable_kHeaderRowAlignment
    kDataRowAlignment = _ODA_Drawings.OdDbTable_kDataRowAlignment
    kTitleRowTextStyle = _ODA_Drawings.OdDbTable_kTitleRowTextStyle
    kHeaderRowTextStyle = _ODA_Drawings.OdDbTable_kHeaderRowTextStyle
    kDataRowTextStyle = _ODA_Drawings.OdDbTable_kDataRowTextStyle
    kTitleRowTextHeight = _ODA_Drawings.OdDbTable_kTitleRowTextHeight
    kHeaderRowTextHeight = _ODA_Drawings.OdDbTable_kHeaderRowTextHeight
    kDataRowTextHeight = _ODA_Drawings.OdDbTable_kDataRowTextHeight
    kTitleRowDataType = _ODA_Drawings.OdDbTable_kTitleRowDataType
    kHeaderRowDataType = _ODA_Drawings.OdDbTable_kHeaderRowDataType
    kDataRowDataType = _ODA_Drawings.OdDbTable_kDataRowDataType
    kTitleHorzTopColor = _ODA_Drawings.OdDbTable_kTitleHorzTopColor
    kTitleHorzInsideColor = _ODA_Drawings.OdDbTable_kTitleHorzInsideColor
    kTitleHorzBottomColor = _ODA_Drawings.OdDbTable_kTitleHorzBottomColor
    kTitleVertLeftColor = _ODA_Drawings.OdDbTable_kTitleVertLeftColor
    kTitleVertInsideColor = _ODA_Drawings.OdDbTable_kTitleVertInsideColor
    kTitleVertRightColor = _ODA_Drawings.OdDbTable_kTitleVertRightColor
    kHeaderHorzTopColor = _ODA_Drawings.OdDbTable_kHeaderHorzTopColor
    kHeaderHorzInsideColor = _ODA_Drawings.OdDbTable_kHeaderHorzInsideColor
    kHeaderHorzBottomColor = _ODA_Drawings.OdDbTable_kHeaderHorzBottomColor
    kHeaderVertLeftColor = _ODA_Drawings.OdDbTable_kHeaderVertLeftColor
    kHeaderVertInsideColor = _ODA_Drawings.OdDbTable_kHeaderVertInsideColor
    kHeaderVertRightColor = _ODA_Drawings.OdDbTable_kHeaderVertRightColor
    kDataHorzTopColor = _ODA_Drawings.OdDbTable_kDataHorzTopColor
    kDataHorzInsideColor = _ODA_Drawings.OdDbTable_kDataHorzInsideColor
    kDataHorzBottomColor = _ODA_Drawings.OdDbTable_kDataHorzBottomColor
    kDataVertLeftColor = _ODA_Drawings.OdDbTable_kDataVertLeftColor
    kDataVertInsideColor = _ODA_Drawings.OdDbTable_kDataVertInsideColor
    kDataVertRightColor = _ODA_Drawings.OdDbTable_kDataVertRightColor
    kTitleHorzTopLineWeight = _ODA_Drawings.OdDbTable_kTitleHorzTopLineWeight
    kTitleHorzInsideLineWeight = _ODA_Drawings.OdDbTable_kTitleHorzInsideLineWeight
    kTitleHorzBottomLineWeight = _ODA_Drawings.OdDbTable_kTitleHorzBottomLineWeight
    kTitleVertLeftLineWeight = _ODA_Drawings.OdDbTable_kTitleVertLeftLineWeight
    kTitleVertInsideLineWeight = _ODA_Drawings.OdDbTable_kTitleVertInsideLineWeight
    kTitleVertRightLineWeight = _ODA_Drawings.OdDbTable_kTitleVertRightLineWeight
    kHeaderHorzTopLineWeight = _ODA_Drawings.OdDbTable_kHeaderHorzTopLineWeight
    kHeaderHorzInsideLineWeight = _ODA_Drawings.OdDbTable_kHeaderHorzInsideLineWeight
    kHeaderHorzBottomLineWeight = _ODA_Drawings.OdDbTable_kHeaderHorzBottomLineWeight
    kHeaderVertLeftLineWeight = _ODA_Drawings.OdDbTable_kHeaderVertLeftLineWeight
    kHeaderVertInsideLineWeight = _ODA_Drawings.OdDbTable_kHeaderVertInsideLineWeight
    kHeaderVertRightLineWeight = _ODA_Drawings.OdDbTable_kHeaderVertRightLineWeight
    kDataHorzTopLineWeight = _ODA_Drawings.OdDbTable_kDataHorzTopLineWeight
    kDataHorzInsideLineWeight = _ODA_Drawings.OdDbTable_kDataHorzInsideLineWeight
    kDataHorzBottomLineWeight = _ODA_Drawings.OdDbTable_kDataHorzBottomLineWeight
    kDataVertLeftLineWeight = _ODA_Drawings.OdDbTable_kDataVertLeftLineWeight
    kDataVertInsideLineWeight = _ODA_Drawings.OdDbTable_kDataVertInsideLineWeight
    kDataVertRightLineWeight = _ODA_Drawings.OdDbTable_kDataVertRightLineWeight
    kTitleHorzTopVisibility = _ODA_Drawings.OdDbTable_kTitleHorzTopVisibility
    kTitleHorzInsideVisibility = _ODA_Drawings.OdDbTable_kTitleHorzInsideVisibility
    kTitleHorzBottomVisibility = _ODA_Drawings.OdDbTable_kTitleHorzBottomVisibility
    kTitleVertLeftVisibility = _ODA_Drawings.OdDbTable_kTitleVertLeftVisibility
    kTitleVertInsideVisibility = _ODA_Drawings.OdDbTable_kTitleVertInsideVisibility
    kTitleVertRightVisibility = _ODA_Drawings.OdDbTable_kTitleVertRightVisibility
    kHeaderHorzTopVisibility = _ODA_Drawings.OdDbTable_kHeaderHorzTopVisibility
    kHeaderHorzInsideVisibility = _ODA_Drawings.OdDbTable_kHeaderHorzInsideVisibility
    kHeaderHorzBottomVisibility = _ODA_Drawings.OdDbTable_kHeaderHorzBottomVisibility
    kHeaderVertLeftVisibility = _ODA_Drawings.OdDbTable_kHeaderVertLeftVisibility
    kHeaderVertInsideVisibility = _ODA_Drawings.OdDbTable_kHeaderVertInsideVisibility
    kHeaderVertRightVisibility = _ODA_Drawings.OdDbTable_kHeaderVertRightVisibility
    kDataHorzTopVisibility = _ODA_Drawings.OdDbTable_kDataHorzTopVisibility
    kDataHorzInsideVisibility = _ODA_Drawings.OdDbTable_kDataHorzInsideVisibility
    kDataHorzBottomVisibility = _ODA_Drawings.OdDbTable_kDataHorzBottomVisibility
    kDataVertLeftVisibility = _ODA_Drawings.OdDbTable_kDataVertLeftVisibility
    kDataVertInsideVisibility = _ODA_Drawings.OdDbTable_kDataVertInsideVisibility
    kDataVertRightVisibility = _ODA_Drawings.OdDbTable_kDataVertRightVisibility
    kCellAlignment = _ODA_Drawings.OdDbTable_kCellAlignment
    kCellBackgroundFillNone = _ODA_Drawings.OdDbTable_kCellBackgroundFillNone
    kCellBackgroundColor = _ODA_Drawings.OdDbTable_kCellBackgroundColor
    kCellContentColor = _ODA_Drawings.OdDbTable_kCellContentColor
    kCellTextStyle = _ODA_Drawings.OdDbTable_kCellTextStyle
    kCellTextHeight = _ODA_Drawings.OdDbTable_kCellTextHeight
    kCellTopGridColor = _ODA_Drawings.OdDbTable_kCellTopGridColor
    kCellRightGridColor = _ODA_Drawings.OdDbTable_kCellRightGridColor
    kCellBottomGridColor = _ODA_Drawings.OdDbTable_kCellBottomGridColor
    kCellLeftGridColor = _ODA_Drawings.OdDbTable_kCellLeftGridColor
    kCellTopGridLineWeight = _ODA_Drawings.OdDbTable_kCellTopGridLineWeight
    kCellRightGridLineWeight = _ODA_Drawings.OdDbTable_kCellRightGridLineWeight
    kCellBottomGridLineWeight = _ODA_Drawings.OdDbTable_kCellBottomGridLineWeight
    kCellLeftGridLineWeight = _ODA_Drawings.OdDbTable_kCellLeftGridLineWeight
    kCellTopVisibility = _ODA_Drawings.OdDbTable_kCellTopVisibility
    kCellRightVisibility = _ODA_Drawings.OdDbTable_kCellRightVisibility
    kCellBottomVisibility = _ODA_Drawings.OdDbTable_kCellBottomVisibility
    kCellLeftVisibility = _ODA_Drawings.OdDbTable_kCellLeftVisibility
    kCellDataType = _ODA_Drawings.OdDbTable_kCellDataType

    def tableStyle(self, *args):
        return _ODA_Drawings.OdDbTable_tableStyle(self, *args)

    def setTableStyle(self, *args):
        return _ODA_Drawings.OdDbTable_setTableStyle(self, *args)

    def direction(self, *args):
        return _ODA_Drawings.OdDbTable_direction(self, *args)

    def setDirection(self, *args):
        return _ODA_Drawings.OdDbTable_setDirection(self, *args)

    def numRows(self, *args):
        return _ODA_Drawings.OdDbTable_numRows(self, *args)

    def setNumRows(self, *args):
        return _ODA_Drawings.OdDbTable_setNumRows(self, *args)

    def numColumns(self, *args):
        return _ODA_Drawings.OdDbTable_numColumns(self, *args)

    def setNumColumns(self, *args):
        return _ODA_Drawings.OdDbTable_setNumColumns(self, *args)

    def width(self, *args):
        return _ODA_Drawings.OdDbTable_width(self, *args)

    def setWidth(self, *args):
        return _ODA_Drawings.OdDbTable_setWidth(self, *args)

    def columnWidth(self, *args):
        return _ODA_Drawings.OdDbTable_columnWidth(self, *args)

    def setColumnWidth(self, *args):
        return _ODA_Drawings.OdDbTable_setColumnWidth(self, *args)

    def height(self, *args):
        return _ODA_Drawings.OdDbTable_height(self, *args)

    def setHeight(self, *args):
        return _ODA_Drawings.OdDbTable_setHeight(self, *args)

    def rowHeight(self, *args):
        return _ODA_Drawings.OdDbTable_rowHeight(self, *args)

    def setRowHeight(self, *args):
        return _ODA_Drawings.OdDbTable_setRowHeight(self, *args)

    def minimumColumnWidth(self, *args):
        return _ODA_Drawings.OdDbTable_minimumColumnWidth(self, *args)

    def minimumRowHeight(self, *args):
        return _ODA_Drawings.OdDbTable_minimumRowHeight(self, *args)

    def minimumTableWidth(self, *args):
        return _ODA_Drawings.OdDbTable_minimumTableWidth(self, *args)

    def minimumTableHeight(self, *args):
        return _ODA_Drawings.OdDbTable_minimumTableHeight(self, *args)

    def horzCellMargin(self, *args):
        return _ODA_Drawings.OdDbTable_horzCellMargin(self, *args)

    def setHorzCellMargin(self, *args):
        return _ODA_Drawings.OdDbTable_setHorzCellMargin(self, *args)

    def vertCellMargin(self, *args):
        return _ODA_Drawings.OdDbTable_vertCellMargin(self, *args)

    def setVertCellMargin(self, *args):
        return _ODA_Drawings.OdDbTable_setVertCellMargin(self, *args)

    def flowDirection(self, *args):
        return _ODA_Drawings.OdDbTable_flowDirection(self, *args)

    def setFlowDirection(self, *args):
        return _ODA_Drawings.OdDbTable_setFlowDirection(self, *args)

    def isTitleSuppressed(self, *args):
        return _ODA_Drawings.OdDbTable_isTitleSuppressed(self, *args)

    def suppressTitleRow(self, *args):
        return _ODA_Drawings.OdDbTable_suppressTitleRow(self, *args)

    def isHeaderSuppressed(self, *args):
        return _ODA_Drawings.OdDbTable_isHeaderSuppressed(self, *args)

    def suppressHeaderRow(self, *args):
        return _ODA_Drawings.OdDbTable_suppressHeaderRow(self, *args)

    def alignment(self, *args):
        return _ODA_Drawings.OdDbTable_alignment(self, *args)

    def setAlignment(self, *args):
        return _ODA_Drawings.OdDbTable_setAlignment(self, *args)

    def isBackgroundColorNone(self, *args):
        return _ODA_Drawings.OdDbTable_isBackgroundColorNone(self, *args)

    def setBackgroundColorNone(self, *args):
        return _ODA_Drawings.OdDbTable_setBackgroundColorNone(self, *args)

    def backgroundColor(self, *args):
        return _ODA_Drawings.OdDbTable_backgroundColor(self, *args)

    def setBackgroundColor(self, *args):
        return _ODA_Drawings.OdDbTable_setBackgroundColor(self, *args)

    def tableStyleOverrides(self, *args):
        return _ODA_Drawings.OdDbTable_tableStyleOverrides(self, *args)

    def clearTableStyleOverrides(self, *args):
        return _ODA_Drawings.OdDbTable_clearTableStyleOverrides(self, *args)

    def cellType(self, *args):
        return _ODA_Drawings.OdDbTable_cellType(self, *args)

    def setCellType(self, *args):
        return _ODA_Drawings.OdDbTable_setCellType(self, *args)

    def getCellExtents(self, *args):
        return _ODA_Drawings.OdDbTable_getCellExtents(self, *args)

    def cellStyleOverrides(self, *args):
        return _ODA_Drawings.OdDbTable_cellStyleOverrides(self, *args)

    def clearCellOverrides(self, *args):
        return _ODA_Drawings.OdDbTable_clearCellOverrides(self, *args)

    def deleteCellContent(self, *args):
        return _ODA_Drawings.OdDbTable_deleteCellContent(self, *args)

    def rowType(self, *args):
        return _ODA_Drawings.OdDbTable_rowType(self, *args)

    def textRotation(self, *args):
        return _ODA_Drawings.OdDbTable_textRotation(self, *args)

    def setTextRotation(self, *args):
        return _ODA_Drawings.OdDbTable_setTextRotation(self, *args)

    def blockScale(self, *args):
        return _ODA_Drawings.OdDbTable_blockScale(self, *args)

    def setBlockScale(self, *args):
        return _ODA_Drawings.OdDbTable_setBlockScale(self, *args)

    def blockRotation(self, *args):
        return _ODA_Drawings.OdDbTable_blockRotation(self, *args)

    def setBlockRotation(self, *args):
        return _ODA_Drawings.OdDbTable_setBlockRotation(self, *args)

    def insertColumns(self, *args):
        return _ODA_Drawings.OdDbTable_insertColumns(self, *args)

    def deleteColumns(self, *args):
        return _ODA_Drawings.OdDbTable_deleteColumns(self, *args)

    def insertRows(self, *args):
        return _ODA_Drawings.OdDbTable_insertRows(self, *args)

    def deleteRows(self, *args):
        return _ODA_Drawings.OdDbTable_deleteRows(self, *args)

    def mergeCells(self, *args):
        return _ODA_Drawings.OdDbTable_mergeCells(self, *args)

    def unmergeCells(self, *args):
        return _ODA_Drawings.OdDbTable_unmergeCells(self, *args)

    def isMergedCell(self, *args):
        return _ODA_Drawings.OdDbTable_isMergedCell(self, *args)

    def mergedHeight(self, *args):
        return _ODA_Drawings.OdDbTable_mergedHeight(self, *args)

    def mergedWidth(self, *args):
        return _ODA_Drawings.OdDbTable_mergedWidth(self, *args)

    def mergedFlag(self, *args):
        return _ODA_Drawings.OdDbTable_mergedFlag(self, *args)

    def generateLayout(self, *args):
        return _ODA_Drawings.OdDbTable_generateLayout(self, *args)

    def recomputeTableBlock(self, *args):
        return _ODA_Drawings.OdDbTable_recomputeTableBlock(self, *args)

    def hitTest(self, *args):
        return _ODA_Drawings.OdDbTable_hitTest(self, *args)

    def select(self, *args):
        return _ODA_Drawings.OdDbTable_select(self, *args)

    def selectSubRegion(self, *args):
        return _ODA_Drawings.OdDbTable_selectSubRegion(self, *args)

    def reselectSubRegion(self, *args):
        return _ODA_Drawings.OdDbTable_reselectSubRegion(self, *args)

    def getSubSelection(self, *args):
        return _ODA_Drawings.OdDbTable_getSubSelection(self, *args)

    def setSubSelection(self, *args):
        return _ODA_Drawings.OdDbTable_setSubSelection(self, *args)

    def clearSubSelection(self, *args):
        return _ODA_Drawings.OdDbTable_clearSubSelection(self, *args)

    def hasSubSelection(self, *args):
        return _ODA_Drawings.OdDbTable_hasSubSelection(self, *args)

    def select_next_cell(self, *args):
        return _ODA_Drawings.OdDbTable_select_next_cell(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbTable_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbTable_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbTable_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbTable_dxfOutFields(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbTable_subClose(self, *args)

    def subSetDatabaseDefaults(self, *args):
        return _ODA_Drawings.OdDbTable_subSetDatabaseDefaults(self, *args)

    def modified(self, *args):
        return _ODA_Drawings.OdDbTable_modified(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbTable_subGetClassID(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbTable_subWorldDraw(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbTable_subTransformBy(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbTable_subGetTransformedCopy(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbTable_subGetGeomExtents(self, *args)

    def resetValue(self, *args):
        return _ODA_Drawings.OdDbTable_resetValue(self, *args)

    def format(self, *args):
        return _ODA_Drawings.OdDbTable_format(self, *args)

    def setFormat(self, *args):
        return _ODA_Drawings.OdDbTable_setFormat(self, *args)

    def isBreakEnabled(self, *args):
        return _ODA_Drawings.OdDbTable_isBreakEnabled(self, *args)

    def enableBreak(self, *args):
        return _ODA_Drawings.OdDbTable_enableBreak(self, *args)

    def breakFlowDirection(self, *args):
        return _ODA_Drawings.OdDbTable_breakFlowDirection(self, *args)

    def setBreakFlowDirection(self, *args):
        return _ODA_Drawings.OdDbTable_setBreakFlowDirection(self, *args)

    def breakHeight(self, *args):
        return _ODA_Drawings.OdDbTable_breakHeight(self, *args)

    def setBreakHeight(self, *args):
        return _ODA_Drawings.OdDbTable_setBreakHeight(self, *args)

    def breakOffset(self, *args):
        return _ODA_Drawings.OdDbTable_breakOffset(self, *args)

    def setBreakOffset(self, *args):
        return _ODA_Drawings.OdDbTable_setBreakOffset(self, *args)

    def breakOption(self, *args):
        return _ODA_Drawings.OdDbTable_breakOption(self, *args)

    def setBreakOption(self, *args):
        return _ODA_Drawings.OdDbTable_setBreakOption(self, *args)

    def breakSpacing(self, *args):
        return _ODA_Drawings.OdDbTable_breakSpacing(self, *args)

    def setBreakSpacing(self, *args):
        return _ODA_Drawings.OdDbTable_setBreakSpacing(self, *args)

    def setSize(self, *args):
        return _ODA_Drawings.OdDbTable_setSize(self, *args)

    def canInsert(self, *args):
        return _ODA_Drawings.OdDbTable_canInsert(self, *args)

    def insertRowsAndInherit(self, *args):
        return _ODA_Drawings.OdDbTable_insertRowsAndInherit(self, *args)

    def insertColumnsAndInherit(self, *args):
        return _ODA_Drawings.OdDbTable_insertColumnsAndInherit(self, *args)

    def canDelete(self, *args):
        return _ODA_Drawings.OdDbTable_canDelete(self, *args)

    def isEmpty(self, *args):
        return _ODA_Drawings.OdDbTable_isEmpty(self, *args)

    def getMergeRange(self, *args):
        return _ODA_Drawings.OdDbTable_getMergeRange(self, *args)

    def isContentEditable(self, *args):
        return _ODA_Drawings.OdDbTable_isContentEditable(self, *args)

    def isFormatEditable(self, *args):
        return _ODA_Drawings.OdDbTable_isFormatEditable(self, *args)

    def cellState(self, *args):
        return _ODA_Drawings.OdDbTable_cellState(self, *args)

    def setCellState(self, *args):
        return _ODA_Drawings.OdDbTable_setCellState(self, *args)

    def numContents(self, *args):
        return _ODA_Drawings.OdDbTable_numContents(self, *args)

    def createContent(self, *args):
        return _ODA_Drawings.OdDbTable_createContent(self, *args)

    def moveContent(self, *args):
        return _ODA_Drawings.OdDbTable_moveContent(self, *args)

    def deleteContent(self, *args):
        return _ODA_Drawings.OdDbTable_deleteContent(self, *args)

    def contentType(self, *args):
        return _ODA_Drawings.OdDbTable_contentType(self, *args)

    def value(self, *args):
        return _ODA_Drawings.OdDbTable_value(self, *args)

    def setValue(self, *args):
        return _ODA_Drawings.OdDbTable_setValue(self, *args)

    def dataFormat(self, *args):
        return _ODA_Drawings.OdDbTable_dataFormat(self, *args)

    def setDataFormat(self, *args):
        return _ODA_Drawings.OdDbTable_setDataFormat(self, *args)

    def textString(self, *args):
        return _ODA_Drawings.OdDbTable_textString(self, *args)

    def setTextString(self, *args):
        return _ODA_Drawings.OdDbTable_setTextString(self, *args)

    def hasFormula(self, *args):
        return _ODA_Drawings.OdDbTable_hasFormula(self, *args)

    def getFormula(self, *args):
        return _ODA_Drawings.OdDbTable_getFormula(self, *args)

    def setFormula(self, *args):
        return _ODA_Drawings.OdDbTable_setFormula(self, *args)

    def fieldId(self, *args):
        return _ODA_Drawings.OdDbTable_fieldId(self, *args)

    def setFieldId(self, *args):
        return _ODA_Drawings.OdDbTable_setFieldId(self, *args)

    def blockTableRecordId(self, *args):
        return _ODA_Drawings.OdDbTable_blockTableRecordId(self, *args)

    def setBlockTableRecordId(self, *args):
        return _ODA_Drawings.OdDbTable_setBlockTableRecordId(self, *args)

    def getBlockAttributeValue(self, *args):
        return _ODA_Drawings.OdDbTable_getBlockAttributeValue(self, *args)

    def setBlockAttributeValue(self, *args):
        return _ODA_Drawings.OdDbTable_setBlockAttributeValue(self, *args)

    def getCustomData(self, *args):
        return _ODA_Drawings.OdDbTable_getCustomData(self, *args)

    def setCustomData(self, *args):
        return _ODA_Drawings.OdDbTable_setCustomData(self, *args)

    def cellStyle(self, *args):
        return _ODA_Drawings.OdDbTable_cellStyle(self, *args)

    def setCellStyle(self, *args):
        return _ODA_Drawings.OdDbTable_setCellStyle(self, *args)

    def margin(self, *args):
        return _ODA_Drawings.OdDbTable_margin(self, *args)

    def setMargin(self, *args):
        return _ODA_Drawings.OdDbTable_setMargin(self, *args)

    def attachmentPoint(self, *args):
        return _ODA_Drawings.OdDbTable_attachmentPoint(self, *args)

    def contentColor(self, *args):
        return _ODA_Drawings.OdDbTable_contentColor(self, *args)

    def setContentColor(self, *args):
        return _ODA_Drawings.OdDbTable_setContentColor(self, *args)

    def getDataType(self, *args):
        return _ODA_Drawings.OdDbTable_getDataType(self, *args)

    def setDataType(self, *args):
        return _ODA_Drawings.OdDbTable_setDataType(self, *args)

    def textStyle(self, *args):
        return _ODA_Drawings.OdDbTable_textStyle(self, *args)

    def setTextStyle(self, *args):
        return _ODA_Drawings.OdDbTable_setTextStyle(self, *args)

    def textHeight(self, *args):
        return _ODA_Drawings.OdDbTable_textHeight(self, *args)

    def setTextHeight(self, *args):
        return _ODA_Drawings.OdDbTable_setTextHeight(self, *args)

    def rotation(self, *args):
        return _ODA_Drawings.OdDbTable_rotation(self, *args)

    def setRotation(self, *args):
        return _ODA_Drawings.OdDbTable_setRotation(self, *args)

    def isAutoScale(self, *args):
        return _ODA_Drawings.OdDbTable_isAutoScale(self, *args)

    def setAutoScale(self, *args):
        return _ODA_Drawings.OdDbTable_setAutoScale(self, *args)

    def scale(self, *args):
        return _ODA_Drawings.OdDbTable_scale(self, *args)

    def setScale(self, *args):
        return _ODA_Drawings.OdDbTable_setScale(self, *args)

    def contentLayout(self, *args):
        return _ODA_Drawings.OdDbTable_contentLayout(self, *args)

    def setContentLayout(self, *args):
        return _ODA_Drawings.OdDbTable_setContentLayout(self, *args)

    def isMergeAllEnabled(self, *args):
        return _ODA_Drawings.OdDbTable_isMergeAllEnabled(self, *args)

    def enableMergeAll(self, *args):
        return _ODA_Drawings.OdDbTable_enableMergeAll(self, *args)

    def getOverride(self, *args):
        return _ODA_Drawings.OdDbTable_getOverride(self, *args)

    def setOverride(self, *args):
        return _ODA_Drawings.OdDbTable_setOverride(self, *args)

    def removeAllOverrides(self, *args):
        return _ODA_Drawings.OdDbTable_removeAllOverrides(self, *args)

    def gridLineStyle(self, *args):
        return _ODA_Drawings.OdDbTable_gridLineStyle(self, *args)

    def setGridLineStyle(self, *args):
        return _ODA_Drawings.OdDbTable_setGridLineStyle(self, *args)

    def gridLineWeight(self, *args):
        return _ODA_Drawings.OdDbTable_gridLineWeight(self, *args)

    def setGridLineWeight(self, *args):
        return _ODA_Drawings.OdDbTable_setGridLineWeight(self, *args)

    def gridLinetype(self, *args):
        return _ODA_Drawings.OdDbTable_gridLinetype(self, *args)

    def setGridLinetype(self, *args):
        return _ODA_Drawings.OdDbTable_setGridLinetype(self, *args)

    def gridColor(self, *args):
        return _ODA_Drawings.OdDbTable_gridColor(self, *args)

    def setGridColor(self, *args):
        return _ODA_Drawings.OdDbTable_setGridColor(self, *args)

    def gridVisibility(self, *args):
        return _ODA_Drawings.OdDbTable_gridVisibility(self, *args)

    def setGridVisibility(self, *args):
        return _ODA_Drawings.OdDbTable_setGridVisibility(self, *args)

    def gridDoubleLineSpacing(self, *args):
        return _ODA_Drawings.OdDbTable_gridDoubleLineSpacing(self, *args)

    def setGridDoubleLineSpacing(self, *args):
        return _ODA_Drawings.OdDbTable_setGridDoubleLineSpacing(self, *args)

    def getGridProperty(self, *args):
        return _ODA_Drawings.OdDbTable_getGridProperty(self, *args)

    def setGridProperty(self, *args):
        return _ODA_Drawings.OdDbTable_setGridProperty(self, *args)

    def isLinked(self, *args):
        return _ODA_Drawings.OdDbTable_isLinked(self, *args)

    def getDataLink(self, *args):
        return _ODA_Drawings.OdDbTable_getDataLink(self, *args)

    def setDataLink(self, *args):
        return _ODA_Drawings.OdDbTable_setDataLink(self, *args)

    def getDataLinkRange(self, *args):
        return _ODA_Drawings.OdDbTable_getDataLinkRange(self, *args)

    def removeDataLink(self, *args):
        return _ODA_Drawings.OdDbTable_removeDataLink(self, *args)

    def updateDataLink(self, *args):
        return _ODA_Drawings.OdDbTable_updateDataLink(self, *args)

    def getColumnName(self, *args):
        return _ODA_Drawings.OdDbTable_getColumnName(self, *args)

    def setColumnName(self, *args):
        return _ODA_Drawings.OdDbTable_setColumnName(self, *args)

    def getToolTip(self, *args):
        return _ODA_Drawings.OdDbTable_getToolTip(self, *args)

    def setToolTip(self, *args):
        return _ODA_Drawings.OdDbTable_setToolTip(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbTable_copyFrom(self, *args)

    def appendToOwner(self, *args):
        return _ODA_Drawings.OdDbTable_appendToOwner(self, *args)

    def isRegenerateTableSuppressed(self, *args):
        return _ODA_Drawings.OdDbTable_isRegenerateTableSuppressed(self, *args)

    def suppressRegenerateTable(self, *args):
        return _ODA_Drawings.OdDbTable_suppressRegenerateTable(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbTable_subExplode(self, *args)

    def createTemplate(self, *args):
        return _ODA_Drawings.OdDbTable_createTemplate(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbTable_subErase(self, *args)

    def subHighlight(self, *args):
        return _ODA_Drawings.OdDbTable_subHighlight(self, *args)

    def getSubTablesInfo(self, *args):
        return _ODA_Drawings.OdDbTable_getSubTablesInfo(self, *args)

    def getIterator(self, *args):
        return _ODA_Drawings.OdDbTable_getIterator(self, *args)

    def getIndicatorSize(self, *args):
        return _ODA_Drawings.OdDbTable_getIndicatorSize(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbTable

# Register OdDbTable in _ODA_Drawings:
_ODA_Drawings.OdDbTable_swigregister(OdDbTable)

def OdDbTable_cast(*args):
    return _ODA_Drawings.OdDbTable_cast(*args)

def OdDbTable_desc(*args):
    return _ODA_Drawings.OdDbTable_desc(*args)

def OdDbTable_createObject(*args):
    return _ODA_Drawings.OdDbTable_createObject(*args)


def odDbCreateDataLinkAndTable(*args):
    return _ODA_Drawings.odDbCreateDataLinkAndTable(*args)
OD_DBLEOD_H = _ODA_Drawings.OD_DBLEOD_H
class OdDbLeader(OdDbCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLeader_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLeader_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLeader_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLeader_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLeader_createObject(*args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbLeader_normal(self, *args)

    def numVertices(self, *args):
        return _ODA_Drawings.OdDbLeader_numVertices(self, *args)

    def appendVertex(self, *args):
        return _ODA_Drawings.OdDbLeader_appendVertex(self, *args)

    def removeLastVertex(self, *args):
        return _ODA_Drawings.OdDbLeader_removeLastVertex(self, *args)

    def firstVertex(self, *args):
        return _ODA_Drawings.OdDbLeader_firstVertex(self, *args)

    def lastVertex(self, *args):
        return _ODA_Drawings.OdDbLeader_lastVertex(self, *args)

    def vertexAt(self, *args):
        return _ODA_Drawings.OdDbLeader_vertexAt(self, *args)

    def setVertexAt(self, *args):
        return _ODA_Drawings.OdDbLeader_setVertexAt(self, *args)

    def isArrowHeadEnabled(self, *args):
        return _ODA_Drawings.OdDbLeader_isArrowHeadEnabled(self, *args)

    def hasArrowHead(self, *args):
        return _ODA_Drawings.OdDbLeader_hasArrowHead(self, *args)

    def enableArrowHead(self, *args):
        return _ODA_Drawings.OdDbLeader_enableArrowHead(self, *args)

    def disableArrowHead(self, *args):
        return _ODA_Drawings.OdDbLeader_disableArrowHead(self, *args)

    def hasHookLine(self, *args):
        return _ODA_Drawings.OdDbLeader_hasHookLine(self, *args)

    def isHookLineOnXDir(self, *args):
        return _ODA_Drawings.OdDbLeader_isHookLineOnXDir(self, *args)

    def setToSplineLeader(self, *args):
        return _ODA_Drawings.OdDbLeader_setToSplineLeader(self, *args)

    def setToStraightLeader(self, *args):
        return _ODA_Drawings.OdDbLeader_setToStraightLeader(self, *args)

    def isSplined(self, *args):
        return _ODA_Drawings.OdDbLeader_isSplined(self, *args)

    def dimensionStyle(self, *args):
        return _ODA_Drawings.OdDbLeader_dimensionStyle(self, *args)

    def setDimensionStyle(self, *args):
        return _ODA_Drawings.OdDbLeader_setDimensionStyle(self, *args)

    def attachAnnotation(self, *args):
        return _ODA_Drawings.OdDbLeader_attachAnnotation(self, *args)

    def detachAnnotation(self, *args):
        return _ODA_Drawings.OdDbLeader_detachAnnotation(self, *args)

    def annotationObjId(self, *args):
        return _ODA_Drawings.OdDbLeader_annotationObjId(self, *args)

    def annotationXDir(self, *args):
        return _ODA_Drawings.OdDbLeader_annotationXDir(self, *args)

    def annotationOffset(self, *args):
        return _ODA_Drawings.OdDbLeader_annotationOffset(self, *args)

    def setAnnotationOffset(self, *args):
        return _ODA_Drawings.OdDbLeader_setAnnotationOffset(self, *args)
    kMText = _ODA_Drawings.OdDbLeader_kMText
    kFcf = _ODA_Drawings.OdDbLeader_kFcf
    kBlockRef = _ODA_Drawings.OdDbLeader_kBlockRef
    kNoAnno = _ODA_Drawings.OdDbLeader_kNoAnno

    def annoType(self, *args):
        return _ODA_Drawings.OdDbLeader_annoType(self, *args)

    def annoHeight(self, *args):
        return _ODA_Drawings.OdDbLeader_annoHeight(self, *args)

    def annoWidth(self, *args):
        return _ODA_Drawings.OdDbLeader_annoWidth(self, *args)

    def dimasz(self, *args):
        return _ODA_Drawings.OdDbLeader_dimasz(self, *args)

    def dimclrd(self, *args):
        return _ODA_Drawings.OdDbLeader_dimclrd(self, *args)

    def dimgap(self, *args):
        return _ODA_Drawings.OdDbLeader_dimgap(self, *args)

    def dimlwd(self, *args):
        return _ODA_Drawings.OdDbLeader_dimlwd(self, *args)

    def dimldrblk(self, *args):
        return _ODA_Drawings.OdDbLeader_dimldrblk(self, *args)

    def dimsah(self, *args):
        return _ODA_Drawings.OdDbLeader_dimsah(self, *args)

    def dimscale(self, *args):
        return _ODA_Drawings.OdDbLeader_dimscale(self, *args)

    def dimtad(self, *args):
        return _ODA_Drawings.OdDbLeader_dimtad(self, *args)

    def dimtxsty(self, *args):
        return _ODA_Drawings.OdDbLeader_dimtxsty(self, *args)

    def dimtxt(self, *args):
        return _ODA_Drawings.OdDbLeader_dimtxt(self, *args)

    def setDimasz(self, *args):
        return _ODA_Drawings.OdDbLeader_setDimasz(self, *args)

    def setDimclrd(self, *args):
        return _ODA_Drawings.OdDbLeader_setDimclrd(self, *args)

    def setDimgap(self, *args):
        return _ODA_Drawings.OdDbLeader_setDimgap(self, *args)

    def setDimldrblk(self, *args):
        return _ODA_Drawings.OdDbLeader_setDimldrblk(self, *args)

    def setDimlwd(self, *args):
        return _ODA_Drawings.OdDbLeader_setDimlwd(self, *args)

    def setDimsah(self, *args):
        return _ODA_Drawings.OdDbLeader_setDimsah(self, *args)

    def setDimscale(self, *args):
        return _ODA_Drawings.OdDbLeader_setDimscale(self, *args)

    def setDimtad(self, *args):
        return _ODA_Drawings.OdDbLeader_setDimtad(self, *args)

    def setDimtxsty(self, *args):
        return _ODA_Drawings.OdDbLeader_setDimtxsty(self, *args)

    def setDimtxt(self, *args):
        return _ODA_Drawings.OdDbLeader_setDimtxt(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbLeader_subGetClassID(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbLeader_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbLeader_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbLeader_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbLeader_dxfOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbLeader_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbLeader_subViewportDraw(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbLeader_subExplode(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbLeader_subClose(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbLeader_subSetAttributes(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbLeader_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbLeader_getPlane(self, *args)

    def isClosed(self, *args):
        return _ODA_Drawings.OdDbLeader_isClosed(self, *args)

    def isPeriodic(self, *args):
        return _ODA_Drawings.OdDbLeader_isPeriodic(self, *args)

    def getStartParam(self, *args):
        return _ODA_Drawings.OdDbLeader_getStartParam(self, *args)

    def getEndParam(self, *args):
        return _ODA_Drawings.OdDbLeader_getEndParam(self, *args)

    def getStartPoint(self, *args):
        return _ODA_Drawings.OdDbLeader_getStartPoint(self, *args)

    def getEndPoint(self, *args):
        return _ODA_Drawings.OdDbLeader_getEndPoint(self, *args)

    def getPointAtParam(self, *args):
        return _ODA_Drawings.OdDbLeader_getPointAtParam(self, *args)

    def getParamAtPoint(self, *args):
        return _ODA_Drawings.OdDbLeader_getParamAtPoint(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbLeader_subTransformBy(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbLeader_subGetTransformedCopy(self, *args)

    def getDistAtParam(self, *args):
        return _ODA_Drawings.OdDbLeader_getDistAtParam(self, *args)

    def getParamAtDist(self, *args):
        return _ODA_Drawings.OdDbLeader_getParamAtDist(self, *args)

    def getFirstDeriv(self, *args):
        return _ODA_Drawings.OdDbLeader_getFirstDeriv(self, *args)

    def getSecondDeriv(self, *args):
        return _ODA_Drawings.OdDbLeader_getSecondDeriv(self, *args)

    def getArea(self, *args):
        return _ODA_Drawings.OdDbLeader_getArea(self, *args)

    def subSetDatabaseDefaults(self, *args):
        return _ODA_Drawings.OdDbLeader_subSetDatabaseDefaults(self, *args)

    def evaluateLeader(self, *args):
        return _ODA_Drawings.OdDbLeader_evaluateLeader(self, *args)

    def modifiedGraphics(self, *args):
        return _ODA_Drawings.OdDbLeader_modifiedGraphics(self, *args)

    def erased(self, *args):
        return _ODA_Drawings.OdDbLeader_erased(self, *args)

    def getDimstyleData(self, *args):
        return _ODA_Drawings.OdDbLeader_getDimstyleData(self, *args)

    def setDimstyleData(self, *args):
        return _ODA_Drawings.OdDbLeader_setDimstyleData(self, *args)

    def setPlane(self, *args):
        return _ODA_Drawings.OdDbLeader_setPlane(self, *args)

    def subGetSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDbLeader_subGetSubentPathsAtGsMarker(self, *args)

    def subGetGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbLeader_subGetGsMarkersAtSubentPath(self, *args)
    kArrowMark = _ODA_Drawings.OdDbLeader_kArrowMark
    kLeaderLineMark = _ODA_Drawings.OdDbLeader_kLeaderLineMark
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLeader

# Register OdDbLeader in _ODA_Drawings:
_ODA_Drawings.OdDbLeader_swigregister(OdDbLeader)

def OdDbLeader_cast(*args):
    return _ODA_Drawings.OdDbLeader_cast(*args)

def OdDbLeader_desc(*args):
    return _ODA_Drawings.OdDbLeader_desc(*args)

def OdDbLeader_createObject(*args):
    return _ODA_Drawings.OdDbLeader_createObject(*args)

class OdDb3dPolylineVertex(OdDbVertex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDb3dPolylineVertex_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDb3dPolylineVertex_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDb3dPolylineVertex_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDb3dPolylineVertex_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDb3dPolylineVertex_createObject(*args)

    def vertexType(self, *args):
        return _ODA_Drawings.OdDb3dPolylineVertex_vertexType(self, *args)

    def setVertexType(self, *args):
        return _ODA_Drawings.OdDb3dPolylineVertex_setVertexType(self, *args)

    def position(self, *args):
        return _ODA_Drawings.OdDb3dPolylineVertex_position(self, *args)

    def setPosition(self, *args):
        return _ODA_Drawings.OdDb3dPolylineVertex_setPosition(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDb3dPolylineVertex_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDb3dPolylineVertex_dwgOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDb3dPolylineVertex_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDb3dPolylineVertex_dxfOutFields_R12(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDb3dPolylineVertex

# Register OdDb3dPolylineVertex in _ODA_Drawings:
_ODA_Drawings.OdDb3dPolylineVertex_swigregister(OdDb3dPolylineVertex)

def OdDb3dPolylineVertex_cast(*args):
    return _ODA_Drawings.OdDb3dPolylineVertex_cast(*args)

def OdDb3dPolylineVertex_desc(*args):
    return _ODA_Drawings.OdDb3dPolylineVertex_desc(*args)

def OdDb3dPolylineVertex_createObject(*args):
    return _ODA_Drawings.OdDb3dPolylineVertex_createObject(*args)

k3dSimplePoly = _ODA_Drawings.k3dSimplePoly
k3dQuadSplinePoly = _ODA_Drawings.k3dQuadSplinePoly
k3dCubicSplinePoly = _ODA_Drawings.k3dCubicSplinePoly
class OdDb3dPolyline(OdDbCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDb3dPolyline_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDb3dPolyline_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDb3dPolyline_createObject(*args)

    def makeClosed(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_makeClosed(self, *args)

    def makeOpen(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_makeOpen(self, *args)

    def polyType(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_polyType(self, *args)

    def setPolyType(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_setPolyType(self, *args)

    def straighten(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_straighten(self, *args)

    def appendVertex(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_appendVertex(self, *args)

    def insertVertexAt(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_insertVertexAt(self, *args)

    def openVertex(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_openVertex(self, *args)

    def openSequenceEnd(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_openSequenceEnd(self, *args)

    def vertexIterator(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_vertexIterator(self, *args)

    def dxfOut(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_dxfOut(self, *args)

    def dxfIn(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_dxfIn(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_dxfOutFields_R12(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_subGetClassID(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_subClose(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_subExplode(self, *args)

    def explodeGeometry(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_explodeGeometry(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_subTransformBy(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_subWorldDraw(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_getPlane(self, *args)

    def isClosed(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_isClosed(self, *args)

    def isPeriodic(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_isPeriodic(self, *args)

    def getStartParam(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_getStartParam(self, *args)

    def getEndParam(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_getEndParam(self, *args)

    def getStartPoint(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_getStartPoint(self, *args)

    def getEndPoint(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_getEndPoint(self, *args)

    def getPointAtParam(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_getPointAtParam(self, *args)

    def getParamAtPoint(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_getParamAtPoint(self, *args)

    def getDistAtParam(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_getDistAtParam(self, *args)

    def getParamAtDist(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_getParamAtDist(self, *args)

    def getFirstDeriv(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_getFirstDeriv(self, *args)

    def getSecondDeriv(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_getSecondDeriv(self, *args)

    def getArea(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_getArea(self, *args)

    def convertToPolyType(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_convertToPolyType(self, *args)

    def splineFit(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_splineFit(self, *args)

    def subGetSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_subGetSubentPathsAtGsMarker(self, *args)

    def subGetGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_subGetGsMarkersAtSubentPath(self, *args)

    def subSubentPtr(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_subSubentPtr(self, *args)

    def getOdGeCurve(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_getOdGeCurve(self, *args)

    def setFromOdGeCurve(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_setFromOdGeCurve(self, *args)

    def reverseCurve(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_reverseCurve(self, *args)

    def findVertexIndex(self, *args):
        return _ODA_Drawings.OdDb3dPolyline_findVertexIndex(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDb3dPolyline

# Register OdDb3dPolyline in _ODA_Drawings:
_ODA_Drawings.OdDb3dPolyline_swigregister(OdDb3dPolyline)

def OdDb3dPolyline_cast(*args):
    return _ODA_Drawings.OdDb3dPolyline_cast(*args)

def OdDb3dPolyline_desc(*args):
    return _ODA_Drawings.OdDb3dPolyline_desc(*args)

def OdDb3dPolyline_createObject(*args):
    return _ODA_Drawings.OdDb3dPolyline_createObject(*args)

class OdDbTableContent(OdDbFormattedTableData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbTableContent_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbTableContent_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbTableContent_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbTableContent_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbTableContent_createObject(*args)

    def tableStyleId(self, *args):
        return _ODA_Drawings.OdDbTableContent_tableStyleId(self, *args)

    def setTableStyleId(self, *args):
        return _ODA_Drawings.OdDbTableContent_setTableStyleId(self, *args)

    def cellStyle(self, *args):
        return _ODA_Drawings.OdDbTableContent_cellStyle(self, *args)

    def setCellStyle(self, *args):
        return _ODA_Drawings.OdDbTableContent_setCellStyle(self, *args)

    def rowHeight(self, *args):
        return _ODA_Drawings.OdDbTableContent_rowHeight(self, *args)

    def setRowHeight(self, *args):
        return _ODA_Drawings.OdDbTableContent_setRowHeight(self, *args)

    def columnWidth(self, *args):
        return _ODA_Drawings.OdDbTableContent_columnWidth(self, *args)

    def setColumnWidth(self, *args):
        return _ODA_Drawings.OdDbTableContent_setColumnWidth(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbTableContent_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbTableContent_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbTableContent_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbTableContent_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbTableContent

# Register OdDbTableContent in _ODA_Drawings:
_ODA_Drawings.OdDbTableContent_swigregister(OdDbTableContent)

def OdDbTableContent_cast(*args):
    return _ODA_Drawings.OdDbTableContent_cast(*args)

def OdDbTableContent_desc(*args):
    return _ODA_Drawings.OdDbTableContent_desc(*args)

def OdDbTableContent_createObject(*args):
    return _ODA_Drawings.OdDbTableContent_createObject(*args)

class OdDbLight(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLight_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLight_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLight_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLight_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLight_createObject(*args)
    kPeakIntensity = _ODA_Drawings.OdDbLight_kPeakIntensity
    kFlux = _ODA_Drawings.OdDbLight_kFlux
    kIlluminance = _ODA_Drawings.OdDbLight_kIlluminance
    kKelvin = _ODA_Drawings.OdDbLight_kKelvin
    kPreset = _ODA_Drawings.OdDbLight_kPreset
    kD65White = _ODA_Drawings.OdDbLight_kD65White
    kFluorescent = _ODA_Drawings.OdDbLight_kFluorescent
    kCoolWhite = _ODA_Drawings.OdDbLight_kCoolWhite
    kWhiteFluorescent = _ODA_Drawings.OdDbLight_kWhiteFluorescent
    kDaylightFluorescent = _ODA_Drawings.OdDbLight_kDaylightFluorescent
    kIncandescent = _ODA_Drawings.OdDbLight_kIncandescent
    kXenon = _ODA_Drawings.OdDbLight_kXenon
    kHalogen = _ODA_Drawings.OdDbLight_kHalogen
    kQuartz = _ODA_Drawings.OdDbLight_kQuartz
    kMetalHalide = _ODA_Drawings.OdDbLight_kMetalHalide
    kMercury = _ODA_Drawings.OdDbLight_kMercury
    kPhosphorMercury = _ODA_Drawings.OdDbLight_kPhosphorMercury
    kHighPressureSodium = _ODA_Drawings.OdDbLight_kHighPressureSodium
    kLowPressureSodium = _ODA_Drawings.OdDbLight_kLowPressureSodium
    kCustom = _ODA_Drawings.OdDbLight_kCustom
    kGlyphDisplayAuto = _ODA_Drawings.OdDbLight_kGlyphDisplayAuto
    kGlyphDisplayOn = _ODA_Drawings.OdDbLight_kGlyphDisplayOn
    kGlyphDisplayOff = _ODA_Drawings.OdDbLight_kGlyphDisplayOff

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbLight_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbLight_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbLight_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbLight_dxfOutFields(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbLight_subTransformBy(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbLight_subErase(self, *args)

    def subHighlight(self, *args):
        return _ODA_Drawings.OdDbLight_subHighlight(self, *args)

    def drawableType(self, *args):
        return _ODA_Drawings.OdDbLight_drawableType(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbLight_subSetAttributes(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbLight_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbLight_subViewportDraw(self, *args)

    def name(self, *args):
        return _ODA_Drawings.OdDbLight_name(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbLight_setName(self, *args)

    def lightType(self, *args):
        return _ODA_Drawings.OdDbLight_lightType(self, *args)

    def setLightType(self, *args):
        return _ODA_Drawings.OdDbLight_setLightType(self, *args)

    def isOn(self, *args):
        return _ODA_Drawings.OdDbLight_isOn(self, *args)

    def setOn(self, *args):
        return _ODA_Drawings.OdDbLight_setOn(self, *args)

    def isPlottable(self, *args):
        return _ODA_Drawings.OdDbLight_isPlottable(self, *args)

    def setIsPlottable(self, *args):
        return _ODA_Drawings.OdDbLight_setIsPlottable(self, *args)

    def lightColor(self, *args):
        return _ODA_Drawings.OdDbLight_lightColor(self, *args)

    def setLightColor(self, *args):
        return _ODA_Drawings.OdDbLight_setLightColor(self, *args)

    def intensity(self, *args):
        return _ODA_Drawings.OdDbLight_intensity(self, *args)

    def setIntensity(self, *args):
        return _ODA_Drawings.OdDbLight_setIntensity(self, *args)

    def setShadowParameters(self, *args):
        return _ODA_Drawings.OdDbLight_setShadowParameters(self, *args)

    def shadowParameters(self, *args):
        return _ODA_Drawings.OdDbLight_shadowParameters(self, *args)

    def setLightAttenuation(self, *args):
        return _ODA_Drawings.OdDbLight_setLightAttenuation(self, *args)

    def lightAttenuation(self, *args):
        return _ODA_Drawings.OdDbLight_lightAttenuation(self, *args)

    def setPosition(self, *args):
        return _ODA_Drawings.OdDbLight_setPosition(self, *args)

    def position(self, *args):
        return _ODA_Drawings.OdDbLight_position(self, *args)

    def targetLocation(self, *args):
        return _ODA_Drawings.OdDbLight_targetLocation(self, *args)

    def setTargetLocation(self, *args):
        return _ODA_Drawings.OdDbLight_setTargetLocation(self, *args)

    def setHotspotAndFalloff(self, *args):
        return _ODA_Drawings.OdDbLight_setHotspotAndFalloff(self, *args)

    def hotspotAngle(self, *args):
        return _ODA_Drawings.OdDbLight_hotspotAngle(self, *args)

    def falloffAngle(self, *args):
        return _ODA_Drawings.OdDbLight_falloffAngle(self, *args)

    def lightDirection(self, *args):
        return _ODA_Drawings.OdDbLight_lightDirection(self, *args)

    def setLightDirection(self, *args):
        return _ODA_Drawings.OdDbLight_setLightDirection(self, *args)

    def physicalIntensityMethod(self, *args):
        return _ODA_Drawings.OdDbLight_physicalIntensityMethod(self, *args)

    def setPhysicalIntensityMethod(self, *args):
        return _ODA_Drawings.OdDbLight_setPhysicalIntensityMethod(self, *args)

    def physicalIntensity(self, *args):
        return _ODA_Drawings.OdDbLight_physicalIntensity(self, *args)

    def setPhysicalIntensity(self, *args):
        return _ODA_Drawings.OdDbLight_setPhysicalIntensity(self, *args)

    def illuminanceDistance(self, *args):
        return _ODA_Drawings.OdDbLight_illuminanceDistance(self, *args)

    def setIlluminanceDistance(self, *args):
        return _ODA_Drawings.OdDbLight_setIlluminanceDistance(self, *args)

    def lampColorType(self, *args):
        return _ODA_Drawings.OdDbLight_lampColorType(self, *args)

    def setLampColorType(self, *args):
        return _ODA_Drawings.OdDbLight_setLampColorType(self, *args)

    def lampColorTemp(self, *args):
        return _ODA_Drawings.OdDbLight_lampColorTemp(self, *args)

    def setLampColorTemp(self, *args):
        return _ODA_Drawings.OdDbLight_setLampColorTemp(self, *args)

    def lampColorPreset(self, *args):
        return _ODA_Drawings.OdDbLight_lampColorPreset(self, *args)

    def setLampColorPreset(self, *args):
        return _ODA_Drawings.OdDbLight_setLampColorPreset(self, *args)

    def lampColorRGB(self, *args):
        return _ODA_Drawings.OdDbLight_lampColorRGB(self, *args)

    def setLampColorRGB(self, *args):
        return _ODA_Drawings.OdDbLight_setLampColorRGB(self, *args)

    def resultingColor(self, *args):
        return _ODA_Drawings.OdDbLight_resultingColor(self, *args)

    def webFile(self, *args):
        return _ODA_Drawings.OdDbLight_webFile(self, *args)

    def setWebFile(self, *args):
        return _ODA_Drawings.OdDbLight_setWebFile(self, *args)

    def webRotation(self, *args):
        return _ODA_Drawings.OdDbLight_webRotation(self, *args)

    def setWebRotation(self, *args):
        return _ODA_Drawings.OdDbLight_setWebRotation(self, *args)

    def hasTarget(self, *args):
        return _ODA_Drawings.OdDbLight_hasTarget(self, *args)

    def setHasTarget(self, *args):
        return _ODA_Drawings.OdDbLight_setHasTarget(self, *args)

    def glyphDisplay(self, *args):
        return _ODA_Drawings.OdDbLight_glyphDisplay(self, *args)

    def setGlyphDisplay(self, *args):
        return _ODA_Drawings.OdDbLight_setGlyphDisplay(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbLight_subGetClassID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLight

# Register OdDbLight in _ODA_Drawings:
_ODA_Drawings.OdDbLight_swigregister(OdDbLight)

def OdDbLight_cast(*args):
    return _ODA_Drawings.OdDbLight_cast(*args)

def OdDbLight_desc(*args):
    return _ODA_Drawings.OdDbLight_desc(*args)

def OdDbLight_createObject(*args):
    return _ODA_Drawings.OdDbLight_createObject(*args)

class OdDbSection(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    kPlane = _ODA_Drawings.OdDbSection_kPlane
    kBoundary = _ODA_Drawings.OdDbSection_kBoundary
    kVolume = _ODA_Drawings.OdDbSection_kVolume
    kNone = _ODA_Drawings.OdDbSection_kNone
    kSectionLine = _ODA_Drawings.OdDbSection_kSectionLine
    kSectionLineTop = _ODA_Drawings.OdDbSection_kSectionLineTop
    kSectionLineBottom = _ODA_Drawings.OdDbSection_kSectionLineBottom
    kBackLine = _ODA_Drawings.OdDbSection_kBackLine
    kBackLineTop = _ODA_Drawings.OdDbSection_kBackLineTop
    kBackLineBottom = _ODA_Drawings.OdDbSection_kBackLineBottom
    kVerticalLineTop = _ODA_Drawings.OdDbSection_kVerticalLineTop
    kVerticalLineBottom = _ODA_Drawings.OdDbSection_kVerticalLineBottom
    kHeightAboveSectionLine = _ODA_Drawings.OdDbSection_kHeightAboveSectionLine
    kHeightBelowSectionLine = _ODA_Drawings.OdDbSection_kHeightBelowSectionLine

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSection_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSection_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSection_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSection_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSection_createObject(*args)

    def state(self, *args):
        return _ODA_Drawings.OdDbSection_state(self, *args)

    def setState(self, *args):
        return _ODA_Drawings.OdDbSection_setState(self, *args)

    def getName(self, *args):
        return _ODA_Drawings.OdDbSection_getName(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbSection_setName(self, *args)

    def viewingDirection(self, *args):
        return _ODA_Drawings.OdDbSection_viewingDirection(self, *args)

    def setViewingDirection(self, *args):
        return _ODA_Drawings.OdDbSection_setViewingDirection(self, *args)

    def verticalDirection(self, *args):
        return _ODA_Drawings.OdDbSection_verticalDirection(self, *args)

    def setVerticalDirection(self, *args):
        return _ODA_Drawings.OdDbSection_setVerticalDirection(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbSection_normal(self, *args)

    def plane(self, *args):
        return _ODA_Drawings.OdDbSection_plane(self, *args)

    def indicatorTransparency(self, *args):
        return _ODA_Drawings.OdDbSection_indicatorTransparency(self, *args)

    def setIndicatorTransparency(self, *args):
        return _ODA_Drawings.OdDbSection_setIndicatorTransparency(self, *args)

    def indicatorFillColor(self, *args):
        return _ODA_Drawings.OdDbSection_indicatorFillColor(self, *args)

    def setIndicatorFillColor(self, *args):
        return _ODA_Drawings.OdDbSection_setIndicatorFillColor(self, *args)

    def numVertices(self, *args):
        return _ODA_Drawings.OdDbSection_numVertices(self, *args)

    def getVertex(self, *args):
        return _ODA_Drawings.OdDbSection_getVertex(self, *args)

    def setVertex(self, *args):
        return _ODA_Drawings.OdDbSection_setVertex(self, *args)

    def addVertex(self, *args):
        return _ODA_Drawings.OdDbSection_addVertex(self, *args)

    def removeVertex(self, *args):
        return _ODA_Drawings.OdDbSection_removeVertex(self, *args)

    def getVertices(self, *args):
        return _ODA_Drawings.OdDbSection_getVertices(self, *args)

    def setVertices(self, *args):
        return _ODA_Drawings.OdDbSection_setVertices(self, *args)

    def height(self, *args):
        return _ODA_Drawings.OdDbSection_height(self, *args)

    def setHeight(self, *args):
        return _ODA_Drawings.OdDbSection_setHeight(self, *args)

    def createJog(self, *args):
        return _ODA_Drawings.OdDbSection_createJog(self, *args)

    def hasJogs(self, *args):
        return _ODA_Drawings.OdDbSection_hasJogs(self, *args)

    def getSettings(self, *args):
        return _ODA_Drawings.OdDbSection_getSettings(self, *args)

    def isLiveSectionEnabled(self, *args):
        return _ODA_Drawings.OdDbSection_isLiveSectionEnabled(self, *args)

    def enableLiveSection(self, *args):
        return _ODA_Drawings.OdDbSection_enableLiveSection(self, *args)

    def isSlice(self, *args):
        return _ODA_Drawings.OdDbSection_isSlice(self, *args)

    def setIsSlice(self, *args):
        return _ODA_Drawings.OdDbSection_setIsSlice(self, *args)

    def thicknessDepth(self, *args):
        return _ODA_Drawings.OdDbSection_thicknessDepth(self, *args)

    def setThicknessDepth(self, *args):
        return _ODA_Drawings.OdDbSection_setThicknessDepth(self, *args)

    def sectionPlaneOffset(self, *args):
        return _ODA_Drawings.OdDbSection_sectionPlaneOffset(self, *args)

    def setSectionPlaneOffset(self, *args):
        return _ODA_Drawings.OdDbSection_setSectionPlaneOffset(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbSection_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbSection_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbSection_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbSection_dxfOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbSection_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbSection_subViewportDraw(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbSection_subGetClassID(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbSection_subClose(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbSection_subTransformBy(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbSection_subGetTransformedCopy(self, *args)

    def generateSectionGeometry(self, *args):
        return _ODA_Drawings.OdDbSection_generateSectionGeometry(self, *args)

    def topPlane(self, *args):
        return _ODA_Drawings.OdDbSection_topPlane(self, *args)

    def setTopPlane(self, *args):
        return _ODA_Drawings.OdDbSection_setTopPlane(self, *args)

    def bottomPlane(self, *args):
        return _ODA_Drawings.OdDbSection_bottomPlane(self, *args)

    def setBottomPlane(self, *args):
        return _ODA_Drawings.OdDbSection_setBottomPlane(self, *args)

    def elevation(self, *args):
        return _ODA_Drawings.OdDbSection_elevation(self, *args)

    def setElevation(self, *args):
        return _ODA_Drawings.OdDbSection_setElevation(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSection

# Register OdDbSection in _ODA_Drawings:
_ODA_Drawings.OdDbSection_swigregister(OdDbSection)

def OdDbSection_cast(*args):
    return _ODA_Drawings.OdDbSection_cast(*args)

def OdDbSection_desc(*args):
    return _ODA_Drawings.OdDbSection_desc(*args)

def OdDbSection_createObject(*args):
    return _ODA_Drawings.OdDbSection_createObject(*args)

class OdDbSectionSettings(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    kLiveSection = _ODA_Drawings.OdDbSectionSettings_kLiveSection
    k2dSection = _ODA_Drawings.OdDbSectionSettings_k2dSection
    k3dSection = _ODA_Drawings.OdDbSectionSettings_k3dSection
    kIntersectionBoundary = _ODA_Drawings.OdDbSectionSettings_kIntersectionBoundary
    kIntersectionFill = _ODA_Drawings.OdDbSectionSettings_kIntersectionFill
    kBackgroundGeometry = _ODA_Drawings.OdDbSectionSettings_kBackgroundGeometry
    kForegroundGeometry = _ODA_Drawings.OdDbSectionSettings_kForegroundGeometry
    kCurveTangencyLines = _ODA_Drawings.OdDbSectionSettings_kCurveTangencyLines
    kSourceAllObjects = _ODA_Drawings.OdDbSectionSettings_kSourceAllObjects
    kSourceSelectedObjects = _ODA_Drawings.OdDbSectionSettings_kSourceSelectedObjects
    kDestinationNewBlock = _ODA_Drawings.OdDbSectionSettings_kDestinationNewBlock
    kDestinationReplaceBlock = _ODA_Drawings.OdDbSectionSettings_kDestinationReplaceBlock
    kDestinationFile = _ODA_Drawings.OdDbSectionSettings_kDestinationFile

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSectionSettings_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSectionSettings_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSectionSettings_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_subGetClassID(self, *args)

    def reset(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_reset(self, *args)

    def currentSectionType(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_currentSectionType(self, *args)

    def setCurrentSectionType(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setCurrentSectionType(self, *args)

    def generationOptions(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_generationOptions(self, *args)

    def setGenerationOptions(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setGenerationOptions(self, *args)

    def getSourceObjects(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_getSourceObjects(self, *args)

    def setSourceObjects(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setSourceObjects(self, *args)

    def destinationBlock(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_destinationBlock(self, *args)

    def setDestinationBlock(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setDestinationBlock(self, *args)

    def destinationFile(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_destinationFile(self, *args)

    def setDestinationFile(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setDestinationFile(self, *args)

    def visibility(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_visibility(self, *args)

    def setVisibility(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setVisibility(self, *args)

    def color(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_color(self, *args)

    def setColor(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setColor(self, *args)

    def layer(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_layer(self, *args)

    def setLayer(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setLayer(self, *args)

    def linetype(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_linetype(self, *args)

    def setLinetype(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setLinetype(self, *args)

    def linetypeScale(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_linetypeScale(self, *args)

    def setLinetypeScale(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setLinetypeScale(self, *args)

    def plotStyleName(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_plotStyleName(self, *args)

    def setPlotStyleName(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setPlotStyleName(self, *args)

    def lineWeight(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_lineWeight(self, *args)

    def setLineWeight(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setLineWeight(self, *args)

    def faceTransparency(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_faceTransparency(self, *args)

    def setFaceTransparency(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setFaceTransparency(self, *args)

    def edgeTransparency(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_edgeTransparency(self, *args)

    def setEdgeTransparency(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setEdgeTransparency(self, *args)

    def hatchVisibility(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_hatchVisibility(self, *args)

    def setHatchVisibility(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setHatchVisibility(self, *args)

    def getHatchPattern(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_getHatchPattern(self, *args)

    def setHatchPattern(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setHatchPattern(self, *args)

    def hatchAngle(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_hatchAngle(self, *args)

    def setHatchAngle(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setHatchAngle(self, *args)

    def hatchSpacing(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_hatchSpacing(self, *args)

    def setHatchSpacing(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setHatchSpacing(self, *args)

    def hatchScale(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_hatchScale(self, *args)

    def setHatchScale(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setHatchScale(self, *args)

    def hiddenLine(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_hiddenLine(self, *args)

    def setHiddenLine(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setHiddenLine(self, *args)

    def divisionLines(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_divisionLines(self, *args)

    def setDivisionLines(self, *args):
        return _ODA_Drawings.OdDbSectionSettings_setDivisionLines(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSectionSettings

# Register OdDbSectionSettings in _ODA_Drawings:
_ODA_Drawings.OdDbSectionSettings_swigregister(OdDbSectionSettings)

def OdDbSectionSettings_cast(*args):
    return _ODA_Drawings.OdDbSectionSettings_cast(*args)

def OdDbSectionSettings_desc(*args):
    return _ODA_Drawings.OdDbSectionSettings_desc(*args)

def OdDbSectionSettings_createObject(*args):
    return _ODA_Drawings.OdDbSectionSettings_createObject(*args)

class OdDbTransactionReactor(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbTransactionReactor_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbTransactionReactor_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbTransactionReactor_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbTransactionReactor_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbTransactionReactor_createObject(*args)

    def transactionAboutToStart(self, *args):
        return _ODA_Drawings.OdDbTransactionReactor_transactionAboutToStart(self, *args)

    def transactionStarted(self, *args):
        return _ODA_Drawings.OdDbTransactionReactor_transactionStarted(self, *args)

    def transactionAboutToEnd(self, *args):
        return _ODA_Drawings.OdDbTransactionReactor_transactionAboutToEnd(self, *args)

    def transactionEnded(self, *args):
        return _ODA_Drawings.OdDbTransactionReactor_transactionEnded(self, *args)

    def transactionAboutToAbort(self, *args):
        return _ODA_Drawings.OdDbTransactionReactor_transactionAboutToAbort(self, *args)

    def transactionAborted(self, *args):
        return _ODA_Drawings.OdDbTransactionReactor_transactionAborted(self, *args)

    def endCalledOnOutermostTransaction(self, *args):
        return _ODA_Drawings.OdDbTransactionReactor_endCalledOnOutermostTransaction(self, *args)

    def objectIdSwapped(self, *args):
        return _ODA_Drawings.OdDbTransactionReactor_objectIdSwapped(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbTransactionReactor

# Register OdDbTransactionReactor in _ODA_Drawings:
_ODA_Drawings.OdDbTransactionReactor_swigregister(OdDbTransactionReactor)

def OdDbTransactionReactor_cast(*args):
    return _ODA_Drawings.OdDbTransactionReactor_cast(*args)

def OdDbTransactionReactor_desc(*args):
    return _ODA_Drawings.OdDbTransactionReactor_desc(*args)

def OdDbTransactionReactor_createObject(*args):
    return _ODA_Drawings.OdDbTransactionReactor_createObject(*args)

class OdDbRevolveOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbRevolveOptions_swiginit(self, _ODA_Drawings.new_OdDbRevolveOptions(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRevolveOptions

    def draftAngle(self, *args):
        return _ODA_Drawings.OdDbRevolveOptions_draftAngle(self, *args)

    def setDraftAngle(self, *args):
        return _ODA_Drawings.OdDbRevolveOptions_setDraftAngle(self, *args)

    def twistAngle(self, *args):
        return _ODA_Drawings.OdDbRevolveOptions_twistAngle(self, *args)

    def setTwistAngle(self, *args):
        return _ODA_Drawings.OdDbRevolveOptions_setTwistAngle(self, *args)

    def closeToAxis(self, *args):
        return _ODA_Drawings.OdDbRevolveOptions_closeToAxis(self, *args)

    def setCloseToAxis(self, *args):
        return _ODA_Drawings.OdDbRevolveOptions_setCloseToAxis(self, *args)

    def checkRevolveCurve(self, *args):
        return _ODA_Drawings.OdDbRevolveOptions_checkRevolveCurve(self, *args)

# Register OdDbRevolveOptions in _ODA_Drawings:
_ODA_Drawings.OdDbRevolveOptions_swigregister(OdDbRevolveOptions)

class OdDbPointCloudCropping(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CT_INVALID = _ODA_Drawings.OdDbPointCloudCropping_CT_INVALID
    CT_RECTANGLE = _ODA_Drawings.OdDbPointCloudCropping_CT_RECTANGLE
    CT_POLYLINE = _ODA_Drawings.OdDbPointCloudCropping_CT_POLYLINE
    CT_CIRCULAR = _ODA_Drawings.OdDbPointCloudCropping_CT_CIRCULAR

    def __init__(self, *args):
        _ODA_Drawings.OdDbPointCloudCropping_swiginit(self, _ODA_Drawings.new_OdDbPointCloudCropping(*args))

    def __eq__(self, *args):
        return _ODA_Drawings.OdDbPointCloudCropping___eq__(self, *args)

    def isValid(self, *args):
        return _ODA_Drawings.OdDbPointCloudCropping_isValid(self, *args)

    def length(self, *args):
        return _ODA_Drawings.OdDbPointCloudCropping_length(self, *args)

    def type(self, *args):
        return _ODA_Drawings.OdDbPointCloudCropping_type(self, *args)

    def setCropType(self, *args):
        return _ODA_Drawings.OdDbPointCloudCropping_setCropType(self, *args)

    def setInverted(self, *args):
        return _ODA_Drawings.OdDbPointCloudCropping_setInverted(self, *args)

    def isInverted(self, *args):
        return _ODA_Drawings.OdDbPointCloudCropping_isInverted(self, *args)

    def get(self, *args):
        return _ODA_Drawings.OdDbPointCloudCropping_get(self, *args)

    def set(self, *args):
        return _ODA_Drawings.OdDbPointCloudCropping_set(self, *args)

    def getCropPlane(self, *args):
        return _ODA_Drawings.OdDbPointCloudCropping_getCropPlane(self, *args)

    def setCropPlane(self, *args):
        return _ODA_Drawings.OdDbPointCloudCropping_setCropPlane(self, *args)

    def setInside(self, *args):
        return _ODA_Drawings.OdDbPointCloudCropping_setInside(self, *args)

    def isInside(self, *args):
        return _ODA_Drawings.OdDbPointCloudCropping_isInside(self, *args)

    def clear(self, *args):
        return _ODA_Drawings.OdDbPointCloudCropping_clear(self, *args)

    def draw(self, *args):
        return _ODA_Drawings.OdDbPointCloudCropping_draw(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudCropping_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudCropping_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudCropping_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudCropping_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointCloudCropping

# Register OdDbPointCloudCropping in _ODA_Drawings:
_ODA_Drawings.OdDbPointCloudCropping_swigregister(OdDbPointCloudCropping)

class OdDbPointCloudIntensityStyle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbPointCloudIntensityStyle_swiginit(self, _ODA_Drawings.new_OdDbPointCloudIntensityStyle(*args))

    def intensityHighThreshold(self, *args):
        return _ODA_Drawings.OdDbPointCloudIntensityStyle_intensityHighThreshold(self, *args)

    def intensityLowThreshold(self, *args):
        return _ODA_Drawings.OdDbPointCloudIntensityStyle_intensityLowThreshold(self, *args)

    def maxIntensity(self, *args):
        return _ODA_Drawings.OdDbPointCloudIntensityStyle_maxIntensity(self, *args)

    def minIntensity(self, *args):
        return _ODA_Drawings.OdDbPointCloudIntensityStyle_minIntensity(self, *args)

    def setIntensityHighThreshold(self, *args):
        return _ODA_Drawings.OdDbPointCloudIntensityStyle_setIntensityHighThreshold(self, *args)

    def setIntensityLowThreshold(self, *args):
        return _ODA_Drawings.OdDbPointCloudIntensityStyle_setIntensityLowThreshold(self, *args)

    def setMaxIntensity(self, *args):
        return _ODA_Drawings.OdDbPointCloudIntensityStyle_setMaxIntensity(self, *args)

    def setMinIntensity(self, *args):
        return _ODA_Drawings.OdDbPointCloudIntensityStyle_setMinIntensity(self, *args)

    def setColorBottom(self, *args):
        return _ODA_Drawings.OdDbPointCloudIntensityStyle_setColorBottom(self, *args)

    def setColorTop(self, *args):
        return _ODA_Drawings.OdDbPointCloudIntensityStyle_setColorTop(self, *args)

    def intensityColor(self, *args):
        return _ODA_Drawings.OdDbPointCloudIntensityStyle_intensityColor(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudIntensityStyle_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudIntensityStyle_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudIntensityStyle_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudIntensityStyle_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointCloudIntensityStyle

# Register OdDbPointCloudIntensityStyle in _ODA_Drawings:
_ODA_Drawings.OdDbPointCloudIntensityStyle_swigregister(OdDbPointCloudIntensityStyle)

class OdDbPointCloudClipping(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CT_BOX = _ODA_Drawings.OdDbPointCloudClipping_CT_BOX
    CT_RECTANGLE = _ODA_Drawings.OdDbPointCloudClipping_CT_RECTANGLE
    CT_POLYLINE = _ODA_Drawings.OdDbPointCloudClipping_CT_POLYLINE

    def __init__(self, *args):
        _ODA_Drawings.OdDbPointCloudClipping_swiginit(self, _ODA_Drawings.new_OdDbPointCloudClipping(*args))

    def __eq__(self, *args):
        return _ODA_Drawings.OdDbPointCloudClipping___eq__(self, *args)

    def isValid(self, *args):
        return _ODA_Drawings.OdDbPointCloudClipping_isValid(self, *args)

    def length(self, *args):
        return _ODA_Drawings.OdDbPointCloudClipping_length(self, *args)

    def setBox(self, *args):
        return _ODA_Drawings.OdDbPointCloudClipping_setBox(self, *args)

    def setRectangle(self, *args):
        return _ODA_Drawings.OdDbPointCloudClipping_setRectangle(self, *args)

    def setBoundary(self, *args):
        return _ODA_Drawings.OdDbPointCloudClipping_setBoundary(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudClipping_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudClipping_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudClipping_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudClipping_dxfOutFields(self, *args)

    def type(self, *args):
        return _ODA_Drawings.OdDbPointCloudClipping_type(self, *args)

    def setZMax(self, *args):
        return _ODA_Drawings.OdDbPointCloudClipping_setZMax(self, *args)

    def setZMin(self, *args):
        return _ODA_Drawings.OdDbPointCloudClipping_setZMin(self, *args)

    def zMax(self, *args):
        return _ODA_Drawings.OdDbPointCloudClipping_zMax(self, *args)

    def zMin(self, *args):
        return _ODA_Drawings.OdDbPointCloudClipping_zMin(self, *args)

    def setInverted(self, *args):
        return _ODA_Drawings.OdDbPointCloudClipping_setInverted(self, *args)

    def isInverted(self, *args):
        return _ODA_Drawings.OdDbPointCloudClipping_isInverted(self, *args)

    def vertices(self, *args):
        return _ODA_Drawings.OdDbPointCloudClipping_vertices(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointCloudClipping

# Register OdDbPointCloudClipping in _ODA_Drawings:
_ODA_Drawings.OdDbPointCloudClipping_swigregister(OdDbPointCloudClipping)

SubentType_kUnknown = _ODA_Drawings.SubentType_kUnknown
SubentType_kFace = _ODA_Drawings.SubentType_kFace
SubentType_kEdge = _ODA_Drawings.SubentType_kEdge
SubentType_kFilletPart = _ODA_Drawings.SubentType_kFilletPart
SubentType_kFillet = _ODA_Drawings.SubentType_kFillet
class SubentDataBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Drawings.delete_SubentDataBase

    def init(self, *args):
        return _ODA_Drawings.SubentDataBase_init(self, *args)

# Register SubentDataBase in _ODA_Drawings:
_ODA_Drawings.SubentDataBase_swigregister(SubentDataBase)

class PerSubentData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.PerSubentData_swiginit(self, _ODA_Drawings.new_PerSubentData(*args))

    def set(self, *args):
        return _ODA_Drawings.PerSubentData_set(self, *args)

    def SubentDataArr(self, *args):
        return _ODA_Drawings.PerSubentData_SubentDataArr(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_PerSubentData

# Register PerSubentData in _ODA_Drawings:
_ODA_Drawings.PerSubentData_swigregister(PerSubentData)

class SubentRWData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_iType = property(_ODA_Drawings.SubentRWData_m_iType_get, _ODA_Drawings.SubentRWData_m_iType_set)
    m_iMark = property(_ODA_Drawings.SubentRWData_m_iMark_get, _ODA_Drawings.SubentRWData_m_iMark_set)
    m_arrIdFirst = property(_ODA_Drawings.SubentRWData_m_arrIdFirst_get, _ODA_Drawings.SubentRWData_m_arrIdFirst_set)
    m_arrIdSec = property(_ODA_Drawings.SubentRWData_m_arrIdSec_get, _ODA_Drawings.SubentRWData_m_arrIdSec_set)
    m_arrDouble = property(_ODA_Drawings.SubentRWData_m_arrDouble_get, _ODA_Drawings.SubentRWData_m_arrDouble_set)

    def __init__(self, *args):
        _ODA_Drawings.SubentRWData_swiginit(self, _ODA_Drawings.new_SubentRWData(*args))
    __swig_destroy__ = _ODA_Drawings.delete_SubentRWData

# Register SubentRWData in _ODA_Drawings:
_ODA_Drawings.SubentRWData_swigregister(SubentRWData)

class SubentData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_SubentType = property(_ODA_Drawings.SubentData_m_SubentType_get, _ODA_Drawings.SubentData_m_SubentType_set)
    m_arrMgrEntityId = property(_ODA_Drawings.SubentData_m_arrMgrEntityId_get, _ODA_Drawings.SubentData_m_arrMgrEntityId_set)
    m_pSubData = property(_ODA_Drawings.SubentData_m_pSubData_get, _ODA_Drawings.SubentData_m_pSubData_set)

    def __init__(self, *args):
        _ODA_Drawings.SubentData_swiginit(self, _ODA_Drawings.new_SubentData(*args))
    __swig_destroy__ = _ODA_Drawings.delete_SubentData

# Register SubentData in _ODA_Drawings:
_ODA_Drawings.SubentData_swigregister(SubentData)

class OdDbObjectContextData(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextData_createObject(*args)

    def dwgInContextData(self, *args):
        return _ODA_Drawings.OdDbObjectContextData_dwgInContextData(self, *args)

    def dwgOutContextData(self, *args):
        return _ODA_Drawings.OdDbObjectContextData_dwgOutContextData(self, *args)

    def context(self, *args):
        return _ODA_Drawings.OdDbObjectContextData_context(self, *args)

    def matchesContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextData_matchesContext(self, *args)

    def setContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextData_setContext(self, *args)

    def setContextToNull(self, *args):
        return _ODA_Drawings.OdDbObjectContextData_setContextToNull(self, *args)

    def fileToExtensionDictionary(self, *args):
        return _ODA_Drawings.OdDbObjectContextData_fileToExtensionDictionary(self, *args)

    def isDefaultContextData(self, *args):
        return _ODA_Drawings.OdDbObjectContextData_isDefaultContextData(self, *args)

    def isModified(self, *args):
        return _ODA_Drawings.OdDbObjectContextData_isModified(self, *args)

    def setFileToExtensionDictionary(self, *args):
        return _ODA_Drawings.OdDbObjectContextData_setFileToExtensionDictionary(self, *args)

    def setModified(self, *args):
        return _ODA_Drawings.OdDbObjectContextData_setModified(self, *args)

    def setIsDefault(self, *args):
        return _ODA_Drawings.OdDbObjectContextData_setIsDefault(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbObjectContextData_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbObjectContextData_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbObjectContextData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbObjectContextData_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextData

# Register OdDbObjectContextData in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextData_swigregister(OdDbObjectContextData)

def OdDbObjectContextData_cast(*args):
    return _ODA_Drawings.OdDbObjectContextData_cast(*args)

def OdDbObjectContextData_desc(*args):
    return _ODA_Drawings.OdDbObjectContextData_desc(*args)

def OdDbObjectContextData_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextData_createObject(*args)

class OdDbAnnotScaleObjectContextData(OdDbObjectContextData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAnnotScaleObjectContextData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAnnotScaleObjectContextData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAnnotScaleObjectContextData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAnnotScaleObjectContextData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAnnotScaleObjectContextData_createObject(*args)

    def context(self, *args):
        return _ODA_Drawings.OdDbAnnotScaleObjectContextData_context(self, *args)

    def setContext(self, *args):
        return _ODA_Drawings.OdDbAnnotScaleObjectContextData_setContext(self, *args)

    def getScale(self, *args):
        return _ODA_Drawings.OdDbAnnotScaleObjectContextData_getScale(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbAnnotScaleObjectContextData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbAnnotScaleObjectContextData_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAnnotScaleObjectContextData

# Register OdDbAnnotScaleObjectContextData in _ODA_Drawings:
_ODA_Drawings.OdDbAnnotScaleObjectContextData_swigregister(OdDbAnnotScaleObjectContextData)

def OdDbAnnotScaleObjectContextData_cast(*args):
    return _ODA_Drawings.OdDbAnnotScaleObjectContextData_cast(*args)

def OdDbAnnotScaleObjectContextData_desc(*args):
    return _ODA_Drawings.OdDbAnnotScaleObjectContextData_desc(*args)

def OdDbAnnotScaleObjectContextData_createObject(*args):
    return _ODA_Drawings.OdDbAnnotScaleObjectContextData_createObject(*args)

class OdDbMTextObjectContextData(OdDbAnnotScaleObjectContextData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbMTextObjectContextData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbMTextObjectContextData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbMTextObjectContextData_createObject(*args)

    def location(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_location(self, *args)

    def direction(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_direction(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_normal(self, *args)

    def actualHeight(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_actualHeight(self, *args)

    def actualWidth(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_actualWidth(self, *args)

    def definedHeight(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_definedHeight(self, *args)

    def definedWidth(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_definedWidth(self, *args)

    def attachment(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_attachment(self, *args)

    def horizontalMode(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_horizontalMode(self, *args)

    def verticalMode(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_verticalMode(self, *args)

    def columnType(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_columnType(self, *args)

    def columnCount(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_columnCount(self, *args)

    def columnGutter(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_columnGutter(self, *args)

    def columnHeight(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_columnHeight(self, *args)

    def columnWidth(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_columnWidth(self, *args)

    def columnAutoHeight(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_columnAutoHeight(self, *args)

    def columnFlowReversed(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_columnFlowReversed(self, *args)

    def setLocation(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_setLocation(self, *args)

    def setDirection(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_setDirection(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_setNormal(self, *args)

    def setActualHeight(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_setActualHeight(self, *args)

    def setActualWidth(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_setActualWidth(self, *args)

    def setDefinedHeight(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_setDefinedHeight(self, *args)

    def setDefinedWidth(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_setDefinedWidth(self, *args)

    def setAttachment(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_setAttachment(self, *args)

    def setHorizontalMode(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_setHorizontalMode(self, *args)

    def setVerticalMode(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_setVerticalMode(self, *args)

    def setColumnType(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_setColumnType(self, *args)

    def setColumnCount(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_setColumnCount(self, *args)

    def setColumnAutoHeight(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_setColumnAutoHeight(self, *args)

    def setColumnFlowReversed(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_setColumnFlowReversed(self, *args)

    def setColumnGutter(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_setColumnGutter(self, *args)

    def setColumnHeight(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_setColumnHeight(self, *args)

    def setColumnWidth(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_setColumnWidth(self, *args)

    @staticmethod
    def getMTextAnnoScaleDefaultContextData(*args):
        return _ODA_Drawings.OdDbMTextObjectContextData_getMTextAnnoScaleDefaultContextData(*args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_copyFrom(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbMTextObjectContextData_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbMTextObjectContextData

# Register OdDbMTextObjectContextData in _ODA_Drawings:
_ODA_Drawings.OdDbMTextObjectContextData_swigregister(OdDbMTextObjectContextData)

def OdDbMTextObjectContextData_cast(*args):
    return _ODA_Drawings.OdDbMTextObjectContextData_cast(*args)

def OdDbMTextObjectContextData_desc(*args):
    return _ODA_Drawings.OdDbMTextObjectContextData_desc(*args)

def OdDbMTextObjectContextData_createObject(*args):
    return _ODA_Drawings.OdDbMTextObjectContextData_createObject(*args)

def OdDbMTextObjectContextData_getMTextAnnoScaleDefaultContextData(*args):
    return _ODA_Drawings.OdDbMTextObjectContextData_getMTextAnnoScaleDefaultContextData(*args)

class OdDbTextObjectContextData(OdDbAnnotScaleObjectContextData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbTextObjectContextData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbTextObjectContextData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbTextObjectContextData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbTextObjectContextData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbTextObjectContextData_createObject(*args)

    def alignmentPointInEcs(self, *args):
        return _ODA_Drawings.OdDbTextObjectContextData_alignmentPointInEcs(self, *args)

    def horizontalMode(self, *args):
        return _ODA_Drawings.OdDbTextObjectContextData_horizontalMode(self, *args)

    def positionInEcs(self, *args):
        return _ODA_Drawings.OdDbTextObjectContextData_positionInEcs(self, *args)

    def rotation(self, *args):
        return _ODA_Drawings.OdDbTextObjectContextData_rotation(self, *args)

    def setAlignmentPointInEcs(self, *args):
        return _ODA_Drawings.OdDbTextObjectContextData_setAlignmentPointInEcs(self, *args)

    def setHorizontalMode(self, *args):
        return _ODA_Drawings.OdDbTextObjectContextData_setHorizontalMode(self, *args)

    def setPositionInEcs(self, *args):
        return _ODA_Drawings.OdDbTextObjectContextData_setPositionInEcs(self, *args)

    def setRotation(self, *args):
        return _ODA_Drawings.OdDbTextObjectContextData_setRotation(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbTextObjectContextData_copyFrom(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbTextObjectContextData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbTextObjectContextData_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbTextObjectContextData

# Register OdDbTextObjectContextData in _ODA_Drawings:
_ODA_Drawings.OdDbTextObjectContextData_swigregister(OdDbTextObjectContextData)

def OdDbTextObjectContextData_cast(*args):
    return _ODA_Drawings.OdDbTextObjectContextData_cast(*args)

def OdDbTextObjectContextData_desc(*args):
    return _ODA_Drawings.OdDbTextObjectContextData_desc(*args)

def OdDbTextObjectContextData_createObject(*args):
    return _ODA_Drawings.OdDbTextObjectContextData_createObject(*args)

class OdDbMTextAttributeObjectContextData(OdDbTextObjectContextData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbMTextAttributeObjectContextData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbMTextAttributeObjectContextData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbMTextAttributeObjectContextData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbMTextAttributeObjectContextData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbMTextAttributeObjectContextData_createObject(*args)

    def setContext(self, *args):
        return _ODA_Drawings.OdDbMTextAttributeObjectContextData_setContext(self, *args)

    def getMTextObjectContextData(self, *args):
        return _ODA_Drawings.OdDbMTextAttributeObjectContextData_getMTextObjectContextData(self, *args)

    def setMTextObjectContextData(self, *args):
        return _ODA_Drawings.OdDbMTextAttributeObjectContextData_setMTextObjectContextData(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbMTextAttributeObjectContextData_copyFrom(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbMTextAttributeObjectContextData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbMTextAttributeObjectContextData_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbMTextAttributeObjectContextData

# Register OdDbMTextAttributeObjectContextData in _ODA_Drawings:
_ODA_Drawings.OdDbMTextAttributeObjectContextData_swigregister(OdDbMTextAttributeObjectContextData)

def OdDbMTextAttributeObjectContextData_cast(*args):
    return _ODA_Drawings.OdDbMTextAttributeObjectContextData_cast(*args)

def OdDbMTextAttributeObjectContextData_desc(*args):
    return _ODA_Drawings.OdDbMTextAttributeObjectContextData_desc(*args)

def OdDbMTextAttributeObjectContextData_createObject(*args):
    return _ODA_Drawings.OdDbMTextAttributeObjectContextData_createObject(*args)

class OdDbBlkRefObjectContextData(OdDbAnnotScaleObjectContextData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlkRefObjectContextData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlkRefObjectContextData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlkRefObjectContextData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlkRefObjectContextData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlkRefObjectContextData_createObject(*args)

    def positionInEcs(self, *args):
        return _ODA_Drawings.OdDbBlkRefObjectContextData_positionInEcs(self, *args)

    def rotation(self, *args):
        return _ODA_Drawings.OdDbBlkRefObjectContextData_rotation(self, *args)

    def scaleFactors(self, *args):
        return _ODA_Drawings.OdDbBlkRefObjectContextData_scaleFactors(self, *args)

    def setPositionInEcs(self, *args):
        return _ODA_Drawings.OdDbBlkRefObjectContextData_setPositionInEcs(self, *args)

    def setRotation(self, *args):
        return _ODA_Drawings.OdDbBlkRefObjectContextData_setRotation(self, *args)

    def setScaleFactors(self, *args):
        return _ODA_Drawings.OdDbBlkRefObjectContextData_setScaleFactors(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbBlkRefObjectContextData_copyFrom(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlkRefObjectContextData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlkRefObjectContextData_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlkRefObjectContextData

# Register OdDbBlkRefObjectContextData in _ODA_Drawings:
_ODA_Drawings.OdDbBlkRefObjectContextData_swigregister(OdDbBlkRefObjectContextData)

def OdDbBlkRefObjectContextData_cast(*args):
    return _ODA_Drawings.OdDbBlkRefObjectContextData_cast(*args)

def OdDbBlkRefObjectContextData_desc(*args):
    return _ODA_Drawings.OdDbBlkRefObjectContextData_desc(*args)

def OdDbBlkRefObjectContextData_createObject(*args):
    return _ODA_Drawings.OdDbBlkRefObjectContextData_createObject(*args)

class OdDbDimensionObjectContextData(OdDbAnnotScaleObjectContextData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_createObject(*args)

    def blockIndex(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_blockIndex(self, *args)

    def setBlockIndex(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_setBlockIndex(self, *args)

    def setNDBRDimBlock(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_setNDBRDimBlock(self, *args)

    def getNDBRDimBlock(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_getNDBRDimBlock(self, *args)
    eDimtofl = _ODA_Drawings.OdDbDimensionObjectContextData_eDimtofl
    eDimsoxd = _ODA_Drawings.OdDbDimensionObjectContextData_eDimsoxd
    eDimatfit = _ODA_Drawings.OdDbDimensionObjectContextData_eDimatfit
    eDimtix = _ODA_Drawings.OdDbDimensionObjectContextData_eDimtix
    eDimtmove = _ODA_Drawings.OdDbDimensionObjectContextData_eDimtmove

    def hasOverride(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_hasOverride(self, *args)

    def setOverride(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_setOverride(self, *args)

    def dimatfit(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_dimatfit(self, *args)

    def dimsoxd(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_dimsoxd(self, *args)

    def dimtix(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_dimtix(self, *args)

    def dimtmove(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_dimtmove(self, *args)

    def dimtofl(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_dimtofl(self, *args)

    def setDimatfit(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_setDimatfit(self, *args)

    def setDimsoxd(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_setDimsoxd(self, *args)

    def setDimtix(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_setDimtix(self, *args)

    def setDimtmove(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_setDimtmove(self, *args)

    def setDimtofl(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_setDimtofl(self, *args)

    def defTextLocation(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_defTextLocation(self, *args)

    def textLocation(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_textLocation(self, *args)

    def textRotation(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_textRotation(self, *args)

    def getArrowFirstIsFlipped(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_getArrowFirstIsFlipped(self, *args)

    def getArrowSecondIsFlipped(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_getArrowSecondIsFlipped(self, *args)

    def setDefTextLocation(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_setDefTextLocation(self, *args)

    def setTextLocation(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_setTextLocation(self, *args)

    def setTextRotation(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_setTextRotation(self, *args)

    def setArrowFirstIsFlipped(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_setArrowFirstIsFlipped(self, *args)

    def setArrowSecondIsFlipped(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_setArrowSecondIsFlipped(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_copyFrom(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_dxfOutFields(self, *args)

    def transformBy(self, *args):
        return _ODA_Drawings.OdDbDimensionObjectContextData_transformBy(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDimensionObjectContextData

# Register OdDbDimensionObjectContextData in _ODA_Drawings:
_ODA_Drawings.OdDbDimensionObjectContextData_swigregister(OdDbDimensionObjectContextData)

def OdDbDimensionObjectContextData_cast(*args):
    return _ODA_Drawings.OdDbDimensionObjectContextData_cast(*args)

def OdDbDimensionObjectContextData_desc(*args):
    return _ODA_Drawings.OdDbDimensionObjectContextData_desc(*args)

def OdDbDimensionObjectContextData_createObject(*args):
    return _ODA_Drawings.OdDbDimensionObjectContextData_createObject(*args)

class OdDbAlignedDimensionObjectContextData(OdDbDimensionObjectContextData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAlignedDimensionObjectContextData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAlignedDimensionObjectContextData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAlignedDimensionObjectContextData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAlignedDimensionObjectContextData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAlignedDimensionObjectContextData_createObject(*args)

    def dimLinePoint(self, *args):
        return _ODA_Drawings.OdDbAlignedDimensionObjectContextData_dimLinePoint(self, *args)

    def setDimLinePoint(self, *args):
        return _ODA_Drawings.OdDbAlignedDimensionObjectContextData_setDimLinePoint(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbAlignedDimensionObjectContextData_copyFrom(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbAlignedDimensionObjectContextData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbAlignedDimensionObjectContextData_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAlignedDimensionObjectContextData

# Register OdDbAlignedDimensionObjectContextData in _ODA_Drawings:
_ODA_Drawings.OdDbAlignedDimensionObjectContextData_swigregister(OdDbAlignedDimensionObjectContextData)

def OdDbAlignedDimensionObjectContextData_cast(*args):
    return _ODA_Drawings.OdDbAlignedDimensionObjectContextData_cast(*args)

def OdDbAlignedDimensionObjectContextData_desc(*args):
    return _ODA_Drawings.OdDbAlignedDimensionObjectContextData_desc(*args)

def OdDbAlignedDimensionObjectContextData_createObject(*args):
    return _ODA_Drawings.OdDbAlignedDimensionObjectContextData_createObject(*args)

class OdDbAngularDimensionObjectContextData(OdDbDimensionObjectContextData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAngularDimensionObjectContextData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAngularDimensionObjectContextData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAngularDimensionObjectContextData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAngularDimensionObjectContextData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAngularDimensionObjectContextData_createObject(*args)

    def arcPoint(self, *args):
        return _ODA_Drawings.OdDbAngularDimensionObjectContextData_arcPoint(self, *args)

    def setArcPoint(self, *args):
        return _ODA_Drawings.OdDbAngularDimensionObjectContextData_setArcPoint(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbAngularDimensionObjectContextData_copyFrom(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbAngularDimensionObjectContextData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbAngularDimensionObjectContextData_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAngularDimensionObjectContextData

# Register OdDbAngularDimensionObjectContextData in _ODA_Drawings:
_ODA_Drawings.OdDbAngularDimensionObjectContextData_swigregister(OdDbAngularDimensionObjectContextData)

def OdDbAngularDimensionObjectContextData_cast(*args):
    return _ODA_Drawings.OdDbAngularDimensionObjectContextData_cast(*args)

def OdDbAngularDimensionObjectContextData_desc(*args):
    return _ODA_Drawings.OdDbAngularDimensionObjectContextData_desc(*args)

def OdDbAngularDimensionObjectContextData_createObject(*args):
    return _ODA_Drawings.OdDbAngularDimensionObjectContextData_createObject(*args)

class OdDbDiametricDimensionObjectContextData(OdDbDimensionObjectContextData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDiametricDimensionObjectContextData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDiametricDimensionObjectContextData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDiametricDimensionObjectContextData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDiametricDimensionObjectContextData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDiametricDimensionObjectContextData_createObject(*args)

    def chordPoint(self, *args):
        return _ODA_Drawings.OdDbDiametricDimensionObjectContextData_chordPoint(self, *args)

    def farChordPoint(self, *args):
        return _ODA_Drawings.OdDbDiametricDimensionObjectContextData_farChordPoint(self, *args)

    def setChordPoint(self, *args):
        return _ODA_Drawings.OdDbDiametricDimensionObjectContextData_setChordPoint(self, *args)

    def setFarChordPoint(self, *args):
        return _ODA_Drawings.OdDbDiametricDimensionObjectContextData_setFarChordPoint(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbDiametricDimensionObjectContextData_copyFrom(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbDiametricDimensionObjectContextData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbDiametricDimensionObjectContextData_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDiametricDimensionObjectContextData

# Register OdDbDiametricDimensionObjectContextData in _ODA_Drawings:
_ODA_Drawings.OdDbDiametricDimensionObjectContextData_swigregister(OdDbDiametricDimensionObjectContextData)

def OdDbDiametricDimensionObjectContextData_cast(*args):
    return _ODA_Drawings.OdDbDiametricDimensionObjectContextData_cast(*args)

def OdDbDiametricDimensionObjectContextData_desc(*args):
    return _ODA_Drawings.OdDbDiametricDimensionObjectContextData_desc(*args)

def OdDbDiametricDimensionObjectContextData_createObject(*args):
    return _ODA_Drawings.OdDbDiametricDimensionObjectContextData_createObject(*args)

class OdDbOrdinateDimensionObjectContextData(OdDbDimensionObjectContextData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbOrdinateDimensionObjectContextData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbOrdinateDimensionObjectContextData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimensionObjectContextData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimensionObjectContextData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbOrdinateDimensionObjectContextData_createObject(*args)

    def leaderEndPoint(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimensionObjectContextData_leaderEndPoint(self, *args)

    def origin(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimensionObjectContextData_origin(self, *args)

    def setLeaderEndPoint(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimensionObjectContextData_setLeaderEndPoint(self, *args)

    def setOrigin(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimensionObjectContextData_setOrigin(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimensionObjectContextData_copyFrom(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimensionObjectContextData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbOrdinateDimensionObjectContextData_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbOrdinateDimensionObjectContextData

# Register OdDbOrdinateDimensionObjectContextData in _ODA_Drawings:
_ODA_Drawings.OdDbOrdinateDimensionObjectContextData_swigregister(OdDbOrdinateDimensionObjectContextData)

def OdDbOrdinateDimensionObjectContextData_cast(*args):
    return _ODA_Drawings.OdDbOrdinateDimensionObjectContextData_cast(*args)

def OdDbOrdinateDimensionObjectContextData_desc(*args):
    return _ODA_Drawings.OdDbOrdinateDimensionObjectContextData_desc(*args)

def OdDbOrdinateDimensionObjectContextData_createObject(*args):
    return _ODA_Drawings.OdDbOrdinateDimensionObjectContextData_createObject(*args)

class OdDbRadialDimensionObjectContextData(OdDbDimensionObjectContextData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRadialDimensionObjectContextData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRadialDimensionObjectContextData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionObjectContextData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionObjectContextData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRadialDimensionObjectContextData_createObject(*args)

    def chordPoint(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionObjectContextData_chordPoint(self, *args)

    def setChordPoint(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionObjectContextData_setChordPoint(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionObjectContextData_copyFrom(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionObjectContextData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionObjectContextData_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRadialDimensionObjectContextData

# Register OdDbRadialDimensionObjectContextData in _ODA_Drawings:
_ODA_Drawings.OdDbRadialDimensionObjectContextData_swigregister(OdDbRadialDimensionObjectContextData)

def OdDbRadialDimensionObjectContextData_cast(*args):
    return _ODA_Drawings.OdDbRadialDimensionObjectContextData_cast(*args)

def OdDbRadialDimensionObjectContextData_desc(*args):
    return _ODA_Drawings.OdDbRadialDimensionObjectContextData_desc(*args)

def OdDbRadialDimensionObjectContextData_createObject(*args):
    return _ODA_Drawings.OdDbRadialDimensionObjectContextData_createObject(*args)

class OdDbRadialDimensionLargeObjectContextData(OdDbRadialDimensionObjectContextData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRadialDimensionLargeObjectContextData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRadialDimensionLargeObjectContextData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLargeObjectContextData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLargeObjectContextData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRadialDimensionLargeObjectContextData_createObject(*args)

    def jogPoint(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLargeObjectContextData_jogPoint(self, *args)

    def overrideCenter(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLargeObjectContextData_overrideCenter(self, *args)

    def setJogPoint(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLargeObjectContextData_setJogPoint(self, *args)

    def setOverrideCenter(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLargeObjectContextData_setOverrideCenter(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLargeObjectContextData_copyFrom(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLargeObjectContextData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLargeObjectContextData_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRadialDimensionLargeObjectContextData

# Register OdDbRadialDimensionLargeObjectContextData in _ODA_Drawings:
_ODA_Drawings.OdDbRadialDimensionLargeObjectContextData_swigregister(OdDbRadialDimensionLargeObjectContextData)

def OdDbRadialDimensionLargeObjectContextData_cast(*args):
    return _ODA_Drawings.OdDbRadialDimensionLargeObjectContextData_cast(*args)

def OdDbRadialDimensionLargeObjectContextData_desc(*args):
    return _ODA_Drawings.OdDbRadialDimensionLargeObjectContextData_desc(*args)

def OdDbRadialDimensionLargeObjectContextData_createObject(*args):
    return _ODA_Drawings.OdDbRadialDimensionLargeObjectContextData_createObject(*args)

class OdDbFcfObjectContextData(OdDbAnnotScaleObjectContextData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbFcfObjectContextData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbFcfObjectContextData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbFcfObjectContextData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbFcfObjectContextData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbFcfObjectContextData_createObject(*args)

    def horizontal(self, *args):
        return _ODA_Drawings.OdDbFcfObjectContextData_horizontal(self, *args)

    def location(self, *args):
        return _ODA_Drawings.OdDbFcfObjectContextData_location(self, *args)

    def setHorizontal(self, *args):
        return _ODA_Drawings.OdDbFcfObjectContextData_setHorizontal(self, *args)

    def setLocation(self, *args):
        return _ODA_Drawings.OdDbFcfObjectContextData_setLocation(self, *args)

    def transformBy(self, *args):
        return _ODA_Drawings.OdDbFcfObjectContextData_transformBy(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbFcfObjectContextData_copyFrom(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbFcfObjectContextData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbFcfObjectContextData_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbFcfObjectContextData

# Register OdDbFcfObjectContextData in _ODA_Drawings:
_ODA_Drawings.OdDbFcfObjectContextData_swigregister(OdDbFcfObjectContextData)

def OdDbFcfObjectContextData_cast(*args):
    return _ODA_Drawings.OdDbFcfObjectContextData_cast(*args)

def OdDbFcfObjectContextData_desc(*args):
    return _ODA_Drawings.OdDbFcfObjectContextData_desc(*args)

def OdDbFcfObjectContextData_createObject(*args):
    return _ODA_Drawings.OdDbFcfObjectContextData_createObject(*args)

class OdDbHatchScaleContextData(OdDbAnnotScaleObjectContextData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbHatchScaleContextData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbHatchScaleContextData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbHatchScaleContextData_createObject(*args)

    def appendLoop(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_appendLoop(self, *args)

    def getLoopAt(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_getLoopAt(self, *args)

    def insertLoopAt(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_insertLoopAt(self, *args)

    def loopTypeAt(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_loopTypeAt(self, *args)

    def numLoops(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_numLoops(self, *args)

    def removeLoopAt(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_removeLoopAt(self, *args)

    def setLoopAt(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_setLoopAt(self, *args)

    def setLoopTypeAt(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_setLoopTypeAt(self, *args)

    def setNumLoops(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_setNumLoops(self, *args)

    def hatchPattern(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_hatchPattern(self, *args)

    def setHatchPattern(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_setHatchPattern(self, *args)

    def patternBaseAngle(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_patternBaseAngle(self, *args)

    def patternScale(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_patternScale(self, *args)

    def setPatternBaseAngle(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_setPatternBaseAngle(self, *args)

    def setPatternScale(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_setPatternScale(self, *args)

    def getHatchLineDataAt(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_getHatchLineDataAt(self, *args)

    def getHatchLinesData(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_getHatchLinesData(self, *args)

    def setHatchLineDataAt(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_setHatchLineDataAt(self, *args)

    def setHatchLinesData(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_setHatchLinesData(self, *args)

    def isValidHatchLines(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_isValidHatchLines(self, *args)

    def setEvaluateHatch(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_setEvaluateHatch(self, *args)

    def numHatchLines(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_numHatchLines(self, *args)

    def transformBy(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_transformBy(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_copyFrom(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbHatchScaleContextData_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbHatchScaleContextData

# Register OdDbHatchScaleContextData in _ODA_Drawings:
_ODA_Drawings.OdDbHatchScaleContextData_swigregister(OdDbHatchScaleContextData)

def OdDbHatchScaleContextData_cast(*args):
    return _ODA_Drawings.OdDbHatchScaleContextData_cast(*args)

def OdDbHatchScaleContextData_desc(*args):
    return _ODA_Drawings.OdDbHatchScaleContextData_desc(*args)

def OdDbHatchScaleContextData_createObject(*args):
    return _ODA_Drawings.OdDbHatchScaleContextData_createObject(*args)

class OdDbHatchViewContextData(OdDbHatchScaleContextData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbHatchViewContextData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbHatchViewContextData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbHatchViewContextData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbHatchViewContextData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbHatchViewContextData_createObject(*args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbHatchViewContextData_copyFrom(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbHatchViewContextData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbHatchViewContextData_dxfOutFields(self, *args)

    def viewportId(self, *args):
        return _ODA_Drawings.OdDbHatchViewContextData_viewportId(self, *args)

    def setViewportId(self, *args):
        return _ODA_Drawings.OdDbHatchViewContextData_setViewportId(self, *args)

    def viewTarget(self, *args):
        return _ODA_Drawings.OdDbHatchViewContextData_viewTarget(self, *args)

    def setViewTarget(self, *args):
        return _ODA_Drawings.OdDbHatchViewContextData_setViewTarget(self, *args)

    def viewRotation(self, *args):
        return _ODA_Drawings.OdDbHatchViewContextData_viewRotation(self, *args)

    def setViewRotation(self, *args):
        return _ODA_Drawings.OdDbHatchViewContextData_setViewRotation(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbHatchViewContextData

# Register OdDbHatchViewContextData in _ODA_Drawings:
_ODA_Drawings.OdDbHatchViewContextData_swigregister(OdDbHatchViewContextData)

def OdDbHatchViewContextData_cast(*args):
    return _ODA_Drawings.OdDbHatchViewContextData_cast(*args)

def OdDbHatchViewContextData_desc(*args):
    return _ODA_Drawings.OdDbHatchViewContextData_desc(*args)

def OdDbHatchViewContextData_createObject(*args):
    return _ODA_Drawings.OdDbHatchViewContextData_createObject(*args)

class OdDbLeaderObjectContextData(OdDbAnnotScaleObjectContextData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_createObject(*args)

    def addLast(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_addLast(self, *args)

    def annotationOffset(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_annotationOffset(self, *args)

    def blockInsertOffset(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_blockInsertOffset(self, *args)

    def clearFurtherVertices(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_clearFurtherVertices(self, *args)

    def endPoint(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_endPoint(self, *args)

    def furtherVertices(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_furtherVertices(self, *args)

    def getVertex(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_getVertex(self, *args)

    def hookLineDirSameAsHorizon(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_hookLineDirSameAsHorizon(self, *args)

    def horizontal(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_horizontal(self, *args)

    def numFurtherVertices(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_numFurtherVertices(self, *args)

    def removeLastVertex(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_removeLastVertex(self, *args)

    def setAnnotationOffset(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_setAnnotationOffset(self, *args)

    def setBlockInsertOffset(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_setBlockInsertOffset(self, *args)

    def setFurtherVertices(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_setFurtherVertices(self, *args)

    def setHookLineDirSameAsHorizon(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_setHookLineDirSameAsHorizon(self, *args)

    def setHorizontal(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_setHorizontal(self, *args)

    def setVertex(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_setVertex(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_copyFrom(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbLeaderObjectContextData_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLeaderObjectContextData

# Register OdDbLeaderObjectContextData in _ODA_Drawings:
_ODA_Drawings.OdDbLeaderObjectContextData_swigregister(OdDbLeaderObjectContextData)

def OdDbLeaderObjectContextData_cast(*args):
    return _ODA_Drawings.OdDbLeaderObjectContextData_cast(*args)

def OdDbLeaderObjectContextData_desc(*args):
    return _ODA_Drawings.OdDbLeaderObjectContextData_desc(*args)

def OdDbLeaderObjectContextData_createObject(*args):
    return _ODA_Drawings.OdDbLeaderObjectContextData_createObject(*args)

class OdDbMLeaderObjectContextData(OdDbAnnotScaleObjectContextData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbMLeaderObjectContextData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbMLeaderObjectContextData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbMLeaderObjectContextData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbMLeaderObjectContextData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbMLeaderObjectContextData_createObject(*args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbMLeaderObjectContextData_copyFrom(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbMLeaderObjectContextData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbMLeaderObjectContextData_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbMLeaderObjectContextData

# Register OdDbMLeaderObjectContextData in _ODA_Drawings:
_ODA_Drawings.OdDbMLeaderObjectContextData_swigregister(OdDbMLeaderObjectContextData)

def OdDbMLeaderObjectContextData_cast(*args):
    return _ODA_Drawings.OdDbMLeaderObjectContextData_cast(*args)

def OdDbMLeaderObjectContextData_desc(*args):
    return _ODA_Drawings.OdDbMLeaderObjectContextData_desc(*args)

def OdDbMLeaderObjectContextData_createObject(*args):
    return _ODA_Drawings.OdDbMLeaderObjectContextData_createObject(*args)

class OdDbObjectContextCollection(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextCollection_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextCollection_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextCollection_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextCollection_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextCollection_createObject(*args)

    def name(self, *args):
        return _ODA_Drawings.OdDbObjectContextCollection_name(self, *args)

    def currentContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextCollection_currentContext(self, *args)

    def setCurrentContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextCollection_setCurrentContext(self, *args)

    def addContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextCollection_addContext(self, *args)

    def removeContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextCollection_removeContext(self, *args)

    def lockContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextCollection_lockContext(self, *args)

    def unlockContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextCollection_unlockContext(self, *args)

    def locked(self, *args):
        return _ODA_Drawings.OdDbObjectContextCollection_locked(self, *args)

    def getContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextCollection_getContext(self, *args)

    def hasContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextCollection_hasContext(self, *args)

    def newIterator(self, *args):
        return _ODA_Drawings.OdDbObjectContextCollection_newIterator(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextCollection

# Register OdDbObjectContextCollection in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextCollection_swigregister(OdDbObjectContextCollection)

def OdDbObjectContextCollection_cast(*args):
    return _ODA_Drawings.OdDbObjectContextCollection_cast(*args)

def OdDbObjectContextCollection_desc(*args):
    return _ODA_Drawings.OdDbObjectContextCollection_desc(*args)

def OdDbObjectContextCollection_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextCollection_createObject(*args)

class OdDbObjectContextCollectionIterator(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextCollectionIterator_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextCollectionIterator_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextCollectionIterator_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextCollectionIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextCollectionIterator_createObject(*args)

    def start(self, *args):
        return _ODA_Drawings.OdDbObjectContextCollectionIterator_start(self, *args)

    def next(self, *args):
        return _ODA_Drawings.OdDbObjectContextCollectionIterator_next(self, *args)

    def done(self, *args):
        return _ODA_Drawings.OdDbObjectContextCollectionIterator_done(self, *args)

    def getContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextCollectionIterator_getContext(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextCollectionIterator

# Register OdDbObjectContextCollectionIterator in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextCollectionIterator_swigregister(OdDbObjectContextCollectionIterator)

def OdDbObjectContextCollectionIterator_cast(*args):
    return _ODA_Drawings.OdDbObjectContextCollectionIterator_cast(*args)

def OdDbObjectContextCollectionIterator_desc(*args):
    return _ODA_Drawings.OdDbObjectContextCollectionIterator_desc(*args)

def OdDbObjectContextCollectionIterator_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextCollectionIterator_createObject(*args)

class OdDbObjectContextInterface(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextInterface_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextInterface_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextInterface_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextInterface_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextInterface_createObject(*args)

    def supportsCollection(self, *args):
        return _ODA_Drawings.OdDbObjectContextInterface_supportsCollection(self, *args)

    def hasContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextInterface_hasContext(self, *args)

    def addContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextInterface_addContext(self, *args)

    def removeContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextInterface_removeContext(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextInterface

# Register OdDbObjectContextInterface in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextInterface_swigregister(OdDbObjectContextInterface)

def OdDbObjectContextInterface_cast(*args):
    return _ODA_Drawings.OdDbObjectContextInterface_cast(*args)

def OdDbObjectContextInterface_desc(*args):
    return _ODA_Drawings.OdDbObjectContextInterface_desc(*args)

def OdDbObjectContextInterface_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextInterface_createObject(*args)

MAX_LEADER_NUMBER = _ODA_Drawings.MAX_LEADER_NUMBER
MAX_LEADERLINE_NUMBER = _ODA_Drawings.MAX_LEADERLINE_NUMBER
class OdDbMLeader(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    kMoveAllPoints = _ODA_Drawings.OdDbMLeader_kMoveAllPoints
    kMoveAllExceptArrowHeaderPoints = _ODA_Drawings.OdDbMLeader_kMoveAllExceptArrowHeaderPoints
    kMoveContentAndDoglegPoints = _ODA_Drawings.OdDbMLeader_kMoveContentAndDoglegPoints
    kNone = _ODA_Drawings.OdDbMLeader_kNone
    kArrowMark = _ODA_Drawings.OdDbMLeader_kArrowMark
    kLeaderLineMark = _ODA_Drawings.OdDbMLeader_kLeaderLineMark
    kDoglegMark = _ODA_Drawings.OdDbMLeader_kDoglegMark
    kMTextMark = _ODA_Drawings.OdDbMLeader_kMTextMark
    kMTextUnderLineMark = _ODA_Drawings.OdDbMLeader_kMTextUnderLineMark
    kToleranceMark = _ODA_Drawings.OdDbMLeader_kToleranceMark
    kBlockMark = _ODA_Drawings.OdDbMLeader_kBlockMark
    kBlockAttribute = _ODA_Drawings.OdDbMLeader_kBlockAttribute
    kLeaderLineType = _ODA_Drawings.OdDbMLeader_kLeaderLineType
    kLeaderLineColor = _ODA_Drawings.OdDbMLeader_kLeaderLineColor
    kLeaderLineTypeId = _ODA_Drawings.OdDbMLeader_kLeaderLineTypeId
    kLeaderLineWeight = _ODA_Drawings.OdDbMLeader_kLeaderLineWeight
    kEnableLanding = _ODA_Drawings.OdDbMLeader_kEnableLanding
    kLandingGap = _ODA_Drawings.OdDbMLeader_kLandingGap
    kEnableDogleg = _ODA_Drawings.OdDbMLeader_kEnableDogleg
    kDoglegLength = _ODA_Drawings.OdDbMLeader_kDoglegLength
    kArrowSymbolId = _ODA_Drawings.OdDbMLeader_kArrowSymbolId
    kArrowSize = _ODA_Drawings.OdDbMLeader_kArrowSize
    kContentType = _ODA_Drawings.OdDbMLeader_kContentType
    kTextStyleId = _ODA_Drawings.OdDbMLeader_kTextStyleId
    kTextLeftAttachmentType = _ODA_Drawings.OdDbMLeader_kTextLeftAttachmentType
    kTextAngleType = _ODA_Drawings.OdDbMLeader_kTextAngleType
    kTextAlignmentType = _ODA_Drawings.OdDbMLeader_kTextAlignmentType
    kTextColor = _ODA_Drawings.OdDbMLeader_kTextColor
    kTextHeight = _ODA_Drawings.OdDbMLeader_kTextHeight
    kEnableFrameText = _ODA_Drawings.OdDbMLeader_kEnableFrameText
    kDefaultMText = _ODA_Drawings.OdDbMLeader_kDefaultMText
    kBlockId = _ODA_Drawings.OdDbMLeader_kBlockId
    kBlockColor = _ODA_Drawings.OdDbMLeader_kBlockColor
    kBlockScale = _ODA_Drawings.OdDbMLeader_kBlockScale
    kBlockRotation = _ODA_Drawings.OdDbMLeader_kBlockRotation
    kBlockConnectionType = _ODA_Drawings.OdDbMLeader_kBlockConnectionType
    kScale = _ODA_Drawings.OdDbMLeader_kScale
    kTextRightAttachmentType = _ODA_Drawings.OdDbMLeader_kTextRightAttachmentType
    kTextSwitchAlignmentType = _ODA_Drawings.OdDbMLeader_kTextSwitchAlignmentType
    kTextAttachmentDirection = _ODA_Drawings.OdDbMLeader_kTextAttachmentDirection
    kTextTopAttachmentType = _ODA_Drawings.OdDbMLeader_kTextTopAttachmentType
    kTextBottomAttachmentType = _ODA_Drawings.OdDbMLeader_kTextBottomAttachmentType
    kExtendLeaderToText = _ODA_Drawings.OdDbMLeader_kExtendLeaderToText
    kSize = _ODA_Drawings.OdDbMLeader_kSize

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbMLeader_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbMLeader_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbMLeader_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbMLeader_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbMLeader_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbMLeader_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbMLeader_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbMLeader_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbMLeader_dxfOutFields(self, *args)

    def setOverride(self, *args):
        return _ODA_Drawings.OdDbMLeader_setOverride(self, *args)

    def setScale(self, *args):
        return _ODA_Drawings.OdDbMLeader_setScale(self, *args)

    def scale(self, *args):
        return _ODA_Drawings.OdDbMLeader_scale(self, *args)

    def getBlockAttributeValue(self, *args):
        return _ODA_Drawings.OdDbMLeader_getBlockAttributeValue(self, *args)

    def setBlockAttributeValue(self, *args):
        return _ODA_Drawings.OdDbMLeader_setBlockAttributeValue(self, *args)

    def plane(self, *args):
        return _ODA_Drawings.OdDbMLeader_plane(self, *args)

    def setPlane(self, *args):
        return _ODA_Drawings.OdDbMLeader_setPlane(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbMLeader_normal(self, *args)

    def moveMLeader(self, *args):
        return _ODA_Drawings.OdDbMLeader_moveMLeader(self, *args)

    def getContentGeomExtents(self, *args):
        return _ODA_Drawings.OdDbMLeader_getContentGeomExtents(self, *args)

    def numLeaders(self, *args):
        return _ODA_Drawings.OdDbMLeader_numLeaders(self, *args)

    def getLeaderIndexes(self, *args):
        return _ODA_Drawings.OdDbMLeader_getLeaderIndexes(self, *args)

    def addLeader(self, *args):
        return _ODA_Drawings.OdDbMLeader_addLeader(self, *args)

    def removeLeader(self, *args):
        return _ODA_Drawings.OdDbMLeader_removeLeader(self, *args)

    def numLeaderLines(self, *args):
        return _ODA_Drawings.OdDbMLeader_numLeaderLines(self, *args)

    def addLeaderLine(self, *args):
        return _ODA_Drawings.OdDbMLeader_addLeaderLine(self, *args)

    def removeLeaderLine(self, *args):
        return _ODA_Drawings.OdDbMLeader_removeLeaderLine(self, *args)

    def addFirstVertex(self, *args):
        return _ODA_Drawings.OdDbMLeader_addFirstVertex(self, *args)

    def removeFirstVertex(self, *args):
        return _ODA_Drawings.OdDbMLeader_removeFirstVertex(self, *args)

    def getFirstVertex(self, *args):
        return _ODA_Drawings.OdDbMLeader_getFirstVertex(self, *args)

    def setFirstVertex(self, *args):
        return _ODA_Drawings.OdDbMLeader_setFirstVertex(self, *args)

    def addLastVertex(self, *args):
        return _ODA_Drawings.OdDbMLeader_addLastVertex(self, *args)

    def removeLastVertex(self, *args):
        return _ODA_Drawings.OdDbMLeader_removeLastVertex(self, *args)

    def getLastVertex(self, *args):
        return _ODA_Drawings.OdDbMLeader_getLastVertex(self, *args)

    def setLastVertex(self, *args):
        return _ODA_Drawings.OdDbMLeader_setLastVertex(self, *args)

    def numVertices(self, *args):
        return _ODA_Drawings.OdDbMLeader_numVertices(self, *args)

    def setVertex(self, *args):
        return _ODA_Drawings.OdDbMLeader_setVertex(self, *args)

    def getVertex(self, *args):
        return _ODA_Drawings.OdDbMLeader_getVertex(self, *args)

    def getLeaderIndex(self, *args):
        return _ODA_Drawings.OdDbMLeader_getLeaderIndex(self, *args)

    def getLeaderLineIndexes(self, *args):
        return _ODA_Drawings.OdDbMLeader_getLeaderLineIndexes(self, *args)

    def setDoglegDirection(self, *args):
        return _ODA_Drawings.OdDbMLeader_setDoglegDirection(self, *args)

    def getDoglegDirection(self, *args):
        return _ODA_Drawings.OdDbMLeader_getDoglegDirection(self, *args)

    def setLandingGap(self, *args):
        return _ODA_Drawings.OdDbMLeader_setLandingGap(self, *args)

    def landingGap(self, *args):
        return _ODA_Drawings.OdDbMLeader_landingGap(self, *args)

    def setEnableLanding(self, *args):
        return _ODA_Drawings.OdDbMLeader_setEnableLanding(self, *args)

    def enableLanding(self, *args):
        return _ODA_Drawings.OdDbMLeader_enableLanding(self, *args)

    def setEnableDogleg(self, *args):
        return _ODA_Drawings.OdDbMLeader_setEnableDogleg(self, *args)

    def enableDogleg(self, *args):
        return _ODA_Drawings.OdDbMLeader_enableDogleg(self, *args)

    def setDoglegLength(self, *args):
        return _ODA_Drawings.OdDbMLeader_setDoglegLength(self, *args)

    def doglegLength(self, *args):
        return _ODA_Drawings.OdDbMLeader_doglegLength(self, *args)

    def setContentType(self, *args):
        return _ODA_Drawings.OdDbMLeader_setContentType(self, *args)

    def contentType(self, *args):
        return _ODA_Drawings.OdDbMLeader_contentType(self, *args)

    def setTextStyleId(self, *args):
        return _ODA_Drawings.OdDbMLeader_setTextStyleId(self, *args)

    def textStyleId(self, *args):
        return _ODA_Drawings.OdDbMLeader_textStyleId(self, *args)

    def setTextAttachmentType(self, *args):
        return _ODA_Drawings.OdDbMLeader_setTextAttachmentType(self, *args)

    def textAttachmentType(self, *args):
        return _ODA_Drawings.OdDbMLeader_textAttachmentType(self, *args)

    def setTextAngleType(self, *args):
        return _ODA_Drawings.OdDbMLeader_setTextAngleType(self, *args)

    def textAngleType(self, *args):
        return _ODA_Drawings.OdDbMLeader_textAngleType(self, *args)

    def setTextAlignmentType(self, *args):
        return _ODA_Drawings.OdDbMLeader_setTextAlignmentType(self, *args)

    def textAlignmentType(self, *args):
        return _ODA_Drawings.OdDbMLeader_textAlignmentType(self, *args)

    def setTextColor(self, *args):
        return _ODA_Drawings.OdDbMLeader_setTextColor(self, *args)

    def textColor(self, *args):
        return _ODA_Drawings.OdDbMLeader_textColor(self, *args)

    def setTextHeight(self, *args):
        return _ODA_Drawings.OdDbMLeader_setTextHeight(self, *args)

    def textHeight(self, *args):
        return _ODA_Drawings.OdDbMLeader_textHeight(self, *args)

    def setEnableFrameText(self, *args):
        return _ODA_Drawings.OdDbMLeader_setEnableFrameText(self, *args)

    def enableFrameText(self, *args):
        return _ODA_Drawings.OdDbMLeader_enableFrameText(self, *args)

    def setMText(self, *args):
        return _ODA_Drawings.OdDbMLeader_setMText(self, *args)

    def mtext(self, *args):
        return _ODA_Drawings.OdDbMLeader_mtext(self, *args)

    def setBlockContentId(self, *args):
        return _ODA_Drawings.OdDbMLeader_setBlockContentId(self, *args)

    def blockContentId(self, *args):
        return _ODA_Drawings.OdDbMLeader_blockContentId(self, *args)

    def setBlockColor(self, *args):
        return _ODA_Drawings.OdDbMLeader_setBlockColor(self, *args)

    def blockColor(self, *args):
        return _ODA_Drawings.OdDbMLeader_blockColor(self, *args)

    def setBlockScale(self, *args):
        return _ODA_Drawings.OdDbMLeader_setBlockScale(self, *args)

    def blockScale(self, *args):
        return _ODA_Drawings.OdDbMLeader_blockScale(self, *args)

    def setBlockRotation(self, *args):
        return _ODA_Drawings.OdDbMLeader_setBlockRotation(self, *args)

    def blockRotation(self, *args):
        return _ODA_Drawings.OdDbMLeader_blockRotation(self, *args)

    def setBlockConnectionType(self, *args):
        return _ODA_Drawings.OdDbMLeader_setBlockConnectionType(self, *args)

    def blockConnectionType(self, *args):
        return _ODA_Drawings.OdDbMLeader_blockConnectionType(self, *args)

    def setEnableAnnotationScale(self, *args):
        return _ODA_Drawings.OdDbMLeader_setEnableAnnotationScale(self, *args)

    def enableAnnotationScale(self, *args):
        return _ODA_Drawings.OdDbMLeader_enableAnnotationScale(self, *args)

    def setMLeaderStyle(self, *args):
        return _ODA_Drawings.OdDbMLeader_setMLeaderStyle(self, *args)

    def MLeaderStyle(self, *args):
        return _ODA_Drawings.OdDbMLeader_MLeaderStyle(self, *args)

    def getOverridedMLeaderStyle(self, *args):
        return _ODA_Drawings.OdDbMLeader_getOverridedMLeaderStyle(self, *args)

    def setContextDataManager(self, *args):
        return _ODA_Drawings.OdDbMLeader_setContextDataManager(self, *args)

    def getContextDataManager(self, *args):
        return _ODA_Drawings.OdDbMLeader_getContextDataManager(self, *args)

    def setBlockPosition(self, *args):
        return _ODA_Drawings.OdDbMLeader_setBlockPosition(self, *args)

    def getBlockPosition(self, *args):
        return _ODA_Drawings.OdDbMLeader_getBlockPosition(self, *args)

    def setTextLocation(self, *args):
        return _ODA_Drawings.OdDbMLeader_setTextLocation(self, *args)

    def getTextLocation(self, *args):
        return _ODA_Drawings.OdDbMLeader_getTextLocation(self, *args)

    def setToleranceLocation(self, *args):
        return _ODA_Drawings.OdDbMLeader_setToleranceLocation(self, *args)

    def getToleranceLocation(self, *args):
        return _ODA_Drawings.OdDbMLeader_getToleranceLocation(self, *args)

    def setArrowSymbolId(self, *args):
        return _ODA_Drawings.OdDbMLeader_setArrowSymbolId(self, *args)

    def arrowSymbolId(self, *args):
        return _ODA_Drawings.OdDbMLeader_arrowSymbolId(self, *args)

    def hasContent(self, *args):
        return _ODA_Drawings.OdDbMLeader_hasContent(self, *args)

    def connectionPoint(self, *args):
        return _ODA_Drawings.OdDbMLeader_connectionPoint(self, *args)

    def recomputeBreakPoints(self, *args):
        return _ODA_Drawings.OdDbMLeader_recomputeBreakPoints(self, *args)

    def postMLeaderToDb(self, *args):
        return _ODA_Drawings.OdDbMLeader_postMLeaderToDb(self, *args)

    def updateLeaderLinePosition(self, *args):
        return _ODA_Drawings.OdDbMLeader_updateLeaderLinePosition(self, *args)

    def removeLeaderLineRefAssoc(self, *args):
        return _ODA_Drawings.OdDbMLeader_removeLeaderLineRefAssoc(self, *args)

    def updateContentScale(self, *args):
        return _ODA_Drawings.OdDbMLeader_updateContentScale(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbMLeader_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbMLeader_getPlane(self, *args)

    def setTextAttachmentDirection(self, *args):
        return _ODA_Drawings.OdDbMLeader_setTextAttachmentDirection(self, *args)

    def textAttachmentDirection(self, *args):
        return _ODA_Drawings.OdDbMLeader_textAttachmentDirection(self, *args)
    kOverrideLeaderType = _ODA_Drawings.OdDbMLeader_kOverrideLeaderType
    kOverrideLineColor = _ODA_Drawings.OdDbMLeader_kOverrideLineColor
    kOverrideLineTypeId = _ODA_Drawings.OdDbMLeader_kOverrideLineTypeId
    kOverrideLineWeight = _ODA_Drawings.OdDbMLeader_kOverrideLineWeight
    kOverrideArrowSize = _ODA_Drawings.OdDbMLeader_kOverrideArrowSize
    kOverrideArrowSymbolId = _ODA_Drawings.OdDbMLeader_kOverrideArrowSymbolId

    def isOverride(self, *args):
        return _ODA_Drawings.OdDbMLeader_isOverride(self, *args)

    def setLeaderLineType(self, *args):
        return _ODA_Drawings.OdDbMLeader_setLeaderLineType(self, *args)

    def leaderLineType(self, *args):
        return _ODA_Drawings.OdDbMLeader_leaderLineType(self, *args)

    def setLeaderLineColor(self, *args):
        return _ODA_Drawings.OdDbMLeader_setLeaderLineColor(self, *args)

    def leaderLineColor(self, *args):
        return _ODA_Drawings.OdDbMLeader_leaderLineColor(self, *args)

    def setLeaderLineTypeId(self, *args):
        return _ODA_Drawings.OdDbMLeader_setLeaderLineTypeId(self, *args)

    def leaderLineTypeId(self, *args):
        return _ODA_Drawings.OdDbMLeader_leaderLineTypeId(self, *args)

    def setLeaderLineWeight(self, *args):
        return _ODA_Drawings.OdDbMLeader_setLeaderLineWeight(self, *args)

    def leaderLineWeight(self, *args):
        return _ODA_Drawings.OdDbMLeader_leaderLineWeight(self, *args)

    def setArrowSize(self, *args):
        return _ODA_Drawings.OdDbMLeader_setArrowSize(self, *args)

    def arrowSize(self, *args):
        return _ODA_Drawings.OdDbMLeader_arrowSize(self, *args)

    def setExtendLeaderToText(self, *args):
        return _ODA_Drawings.OdDbMLeader_setExtendLeaderToText(self, *args)

    def extendLeaderToText(self, *args):
        return _ODA_Drawings.OdDbMLeader_extendLeaderToText(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbMLeader_copyFrom(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbMLeader

# Register OdDbMLeader in _ODA_Drawings:
_ODA_Drawings.OdDbMLeader_swigregister(OdDbMLeader)

def OdDbMLeader_cast(*args):
    return _ODA_Drawings.OdDbMLeader_cast(*args)

def OdDbMLeader_desc(*args):
    return _ODA_Drawings.OdDbMLeader_desc(*args)

def OdDbMLeader_createObject(*args):
    return _ODA_Drawings.OdDbMLeader_createObject(*args)

class OdDbMLeaderRecomputePE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbMLeaderRecomputePE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbMLeaderRecomputePE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbMLeaderRecomputePE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbMLeaderRecomputePE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbMLeaderRecomputePE_createObject(*args)

    def recomputeBreakPoints(self, *args):
        return _ODA_Drawings.OdDbMLeaderRecomputePE_recomputeBreakPoints(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbMLeaderRecomputePE

# Register OdDbMLeaderRecomputePE in _ODA_Drawings:
_ODA_Drawings.OdDbMLeaderRecomputePE_swigregister(OdDbMLeaderRecomputePE)

def OdDbMLeaderRecomputePE_cast(*args):
    return _ODA_Drawings.OdDbMLeaderRecomputePE_cast(*args)

def OdDbMLeaderRecomputePE_desc(*args):
    return _ODA_Drawings.OdDbMLeaderRecomputePE_desc(*args)

def OdDbMLeaderRecomputePE_createObject(*args):
    return _ODA_Drawings.OdDbMLeaderRecomputePE_createObject(*args)


def OdDbMLeader_setRecomputeFlags(*args):
    return _ODA_Drawings.OdDbMLeader_setRecomputeFlags(*args)

def OdDbMLeader_setAcadBehaviour(*args):
    return _ODA_Drawings.OdDbMLeader_setAcadBehaviour(*args)

def OdDbMLeader_getPtInternal(*args):
    return _ODA_Drawings.OdDbMLeader_getPtInternal(*args)

def OdDbObject_clearDatabase(*args):
    return _ODA_Drawings.OdDbObject_clearDatabase(*args)

def OdDbObject_setWorkingDatabase(*args):
    return _ODA_Drawings.OdDbObject_setWorkingDatabase(*args)
class OdDbLoftOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbLoftOptions_swiginit(self, _ODA_Drawings.new_OdDbLoftOptions(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLoftOptions

    def __eq__(self, *args):
        return _ODA_Drawings.OdDbLoftOptions___eq__(self, *args)
    kNoNormal = _ODA_Drawings.OdDbLoftOptions_kNoNormal
    kFirstNormal = _ODA_Drawings.OdDbLoftOptions_kFirstNormal
    kLastNormal = _ODA_Drawings.OdDbLoftOptions_kLastNormal
    kEndsNormal = _ODA_Drawings.OdDbLoftOptions_kEndsNormal
    kAllNormal = _ODA_Drawings.OdDbLoftOptions_kAllNormal
    kUseDraftAngles = _ODA_Drawings.OdDbLoftOptions_kUseDraftAngles

    def draftStart(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_draftStart(self, *args)

    def setDraftStart(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_setDraftStart(self, *args)

    def draftEnd(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_draftEnd(self, *args)

    def setDraftEnd(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_setDraftEnd(self, *args)

    def draftStartMag(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_draftStartMag(self, *args)

    def setDraftStartMag(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_setDraftStartMag(self, *args)

    def draftEndMag(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_draftEndMag(self, *args)

    def setDraftEndMag(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_setDraftEndMag(self, *args)

    def arcLengthParam(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_arcLengthParam(self, *args)

    def setArcLengthParam(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_setArcLengthParam(self, *args)

    def noTwist(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_noTwist(self, *args)

    def setNoTwist(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_setNoTwist(self, *args)

    def alignDirection(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_alignDirection(self, *args)

    def setAlignDirection(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_setAlignDirection(self, *args)

    def simplify(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_simplify(self, *args)

    def setSimplify(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_setSimplify(self, *args)

    def closed(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_closed(self, *args)

    def setClosed(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_setClosed(self, *args)

    def ruled(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_ruled(self, *args)

    def setRuled(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_setRuled(self, *args)

    def virtualGuide(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_virtualGuide(self, *args)

    def setVirtualGuide(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_setVirtualGuide(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_normal(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_setNormal(self, *args)

    def setOptionsFromSysvars(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_setOptionsFromSysvars(self, *args)

    def setSysvarsFromOptions(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_setSysvarsFromOptions(self, *args)

    def checkOptions(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_checkOptions(self, *args)

    def checkLoftCurves(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_checkLoftCurves(self, *args)

    def checkCrossSectionCurves(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_checkCrossSectionCurves(self, *args)

    def checkGuideCurves(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_checkGuideCurves(self, *args)

    def checkPathCurve(self, *args):
        return _ODA_Drawings.OdDbLoftOptions_checkPathCurve(self, *args)

# Register OdDbLoftOptions in _ODA_Drawings:
_ODA_Drawings.OdDbLoftOptions_swigregister(OdDbLoftOptions)

class OdDbGeoData(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbGeoData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbGeoData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbGeoData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbGeoData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGeoData_createObject(*args)
    kCoordTypUnknown = _ODA_Drawings.OdDbGeoData_kCoordTypUnknown
    kCoordTypLocal = _ODA_Drawings.OdDbGeoData_kCoordTypLocal
    kCoordTypGrid = _ODA_Drawings.OdDbGeoData_kCoordTypGrid
    kCoordTypGeographic = _ODA_Drawings.OdDbGeoData_kCoordTypGeographic
    kScaleEstMethodUnity = _ODA_Drawings.OdDbGeoData_kScaleEstMethodUnity
    kScaleEstMethodUserDefined = _ODA_Drawings.OdDbGeoData_kScaleEstMethodUserDefined
    kScaleEstMethodReferencePoint = _ODA_Drawings.OdDbGeoData_kScaleEstMethodReferencePoint
    kScaleEstMethodPrismoidal = _ODA_Drawings.OdDbGeoData_kScaleEstMethodPrismoidal

    def blockTableRecordId(self, *args):
        return _ODA_Drawings.OdDbGeoData_blockTableRecordId(self, *args)

    def setBlockTableRecordId(self, *args):
        return _ODA_Drawings.OdDbGeoData_setBlockTableRecordId(self, *args)

    def postToDb(self, *args):
        return _ODA_Drawings.OdDbGeoData_postToDb(self, *args)

    def eraseFromDb(self, *args):
        return _ODA_Drawings.OdDbGeoData_eraseFromDb(self, *args)

    def coordinateType(self, *args):
        return _ODA_Drawings.OdDbGeoData_coordinateType(self, *args)

    def setCoordinateType(self, *args):
        return _ODA_Drawings.OdDbGeoData_setCoordinateType(self, *args)

    def designPoint(self, *args):
        return _ODA_Drawings.OdDbGeoData_designPoint(self, *args)

    def setDesignPoint(self, *args):
        return _ODA_Drawings.OdDbGeoData_setDesignPoint(self, *args)

    def referencePoint(self, *args):
        return _ODA_Drawings.OdDbGeoData_referencePoint(self, *args)

    def setReferencePoint(self, *args):
        return _ODA_Drawings.OdDbGeoData_setReferencePoint(self, *args)

    def horizontalUnitScale(self, *args):
        return _ODA_Drawings.OdDbGeoData_horizontalUnitScale(self, *args)

    def horizontalUnits(self, *args):
        return _ODA_Drawings.OdDbGeoData_horizontalUnits(self, *args)

    def setHorizontalUnitScale(self, *args):
        return _ODA_Drawings.OdDbGeoData_setHorizontalUnitScale(self, *args)

    def setHorizontalUnits(self, *args):
        return _ODA_Drawings.OdDbGeoData_setHorizontalUnits(self, *args)

    def verticalUnitScale(self, *args):
        return _ODA_Drawings.OdDbGeoData_verticalUnitScale(self, *args)

    def verticalUnits(self, *args):
        return _ODA_Drawings.OdDbGeoData_verticalUnits(self, *args)

    def setVerticalUnitScale(self, *args):
        return _ODA_Drawings.OdDbGeoData_setVerticalUnitScale(self, *args)

    def setVerticalUnits(self, *args):
        return _ODA_Drawings.OdDbGeoData_setVerticalUnits(self, *args)

    def upDirection(self, *args):
        return _ODA_Drawings.OdDbGeoData_upDirection(self, *args)

    def setUpDirection(self, *args):
        return _ODA_Drawings.OdDbGeoData_setUpDirection(self, *args)

    def northDirection(self, *args):
        return _ODA_Drawings.OdDbGeoData_northDirection(self, *args)

    def northDirectionVector(self, *args):
        return _ODA_Drawings.OdDbGeoData_northDirectionVector(self, *args)

    def setNorthDirectionVector(self, *args):
        return _ODA_Drawings.OdDbGeoData_setNorthDirectionVector(self, *args)

    def scaleEstimationMethod(self, *args):
        return _ODA_Drawings.OdDbGeoData_scaleEstimationMethod(self, *args)

    def setScaleEstimationMethod(self, *args):
        return _ODA_Drawings.OdDbGeoData_setScaleEstimationMethod(self, *args)

    def scaleFactor(self, *args):
        return _ODA_Drawings.OdDbGeoData_scaleFactor(self, *args)

    def setScaleFactor(self, *args):
        return _ODA_Drawings.OdDbGeoData_setScaleFactor(self, *args)

    def doSeaLevelCorrection(self, *args):
        return _ODA_Drawings.OdDbGeoData_doSeaLevelCorrection(self, *args)

    def setDoSeaLevelCorrection(self, *args):
        return _ODA_Drawings.OdDbGeoData_setDoSeaLevelCorrection(self, *args)

    def seaLevelElevation(self, *args):
        return _ODA_Drawings.OdDbGeoData_seaLevelElevation(self, *args)

    def setSeaLevelElevation(self, *args):
        return _ODA_Drawings.OdDbGeoData_setSeaLevelElevation(self, *args)

    def coordinateProjectionRadius(self, *args):
        return _ODA_Drawings.OdDbGeoData_coordinateProjectionRadius(self, *args)

    def setCoordinateProjectionRadius(self, *args):
        return _ODA_Drawings.OdDbGeoData_setCoordinateProjectionRadius(self, *args)

    def coordinateSystem(self, *args):
        return _ODA_Drawings.OdDbGeoData_coordinateSystem(self, *args)

    def setCoordinateSystem(self, *args):
        return _ODA_Drawings.OdDbGeoData_setCoordinateSystem(self, *args)

    def geoRSSTag(self, *args):
        return _ODA_Drawings.OdDbGeoData_geoRSSTag(self, *args)

    def setGeoRSSTag(self, *args):
        return _ODA_Drawings.OdDbGeoData_setGeoRSSTag(self, *args)

    def observationFrom(self, *args):
        return _ODA_Drawings.OdDbGeoData_observationFrom(self, *args)

    def setObservationFrom(self, *args):
        return _ODA_Drawings.OdDbGeoData_setObservationFrom(self, *args)

    def observationTo(self, *args):
        return _ODA_Drawings.OdDbGeoData_observationTo(self, *args)

    def setObservationTo(self, *args):
        return _ODA_Drawings.OdDbGeoData_setObservationTo(self, *args)

    def observationCoverage(self, *args):
        return _ODA_Drawings.OdDbGeoData_observationCoverage(self, *args)

    def setObservationCoverage(self, *args):
        return _ODA_Drawings.OdDbGeoData_setObservationCoverage(self, *args)

    def numMeshPoints(self, *args):
        return _ODA_Drawings.OdDbGeoData_numMeshPoints(self, *args)

    def getMeshPointMap(self, *args):
        return _ODA_Drawings.OdDbGeoData_getMeshPointMap(self, *args)

    def getMeshPointMaps(self, *args):
        return _ODA_Drawings.OdDbGeoData_getMeshPointMaps(self, *args)

    def addMeshPointMap(self, *args):
        return _ODA_Drawings.OdDbGeoData_addMeshPointMap(self, *args)

    def setMeshPointMaps(self, *args):
        return _ODA_Drawings.OdDbGeoData_setMeshPointMaps(self, *args)

    def resetMeshPointMaps(self, *args):
        return _ODA_Drawings.OdDbGeoData_resetMeshPointMaps(self, *args)

    def numMeshFaces(self, *args):
        return _ODA_Drawings.OdDbGeoData_numMeshFaces(self, *args)

    def getMeshFace(self, *args):
        return _ODA_Drawings.OdDbGeoData_getMeshFace(self, *args)

    def addMeshFace(self, *args):
        return _ODA_Drawings.OdDbGeoData_addMeshFace(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbGeoData_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbGeoData_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbGeoData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbGeoData_dxfOutFields(self, *args)

    def transformToLonLatAlt(self, *args):
        return _ODA_Drawings.OdDbGeoData_transformToLonLatAlt(self, *args)

    def transformFromLonLatAlt(self, *args):
        return _ODA_Drawings.OdDbGeoData_transformFromLonLatAlt(self, *args)

    def updateTransformationMatrix(self, *args):
        return _ODA_Drawings.OdDbGeoData_updateTransformationMatrix(self, *args)

    def getMatrixToLLA(self, *args):
        return _ODA_Drawings.OdDbGeoData_getMatrixToLLA(self, *args)

    def getMatrixFromLLA(self, *args):
        return _ODA_Drawings.OdDbGeoData_getMatrixFromLLA(self, *args)

    def getMatrixLocalToLLA(self, *args):
        return _ODA_Drawings.OdDbGeoData_getMatrixLocalToLLA(self, *args)

    def getMatrixLocalFromLLA(self, *args):
        return _ODA_Drawings.OdDbGeoData_getMatrixLocalFromLLA(self, *args)

    def meshTransformToLLA(self, *args):
        return _ODA_Drawings.OdDbGeoData_meshTransformToLLA(self, *args)

    def meshTransformFromLLA(self, *args):
        return _ODA_Drawings.OdDbGeoData_meshTransformFromLLA(self, *args)

    def getSimpleTransformerToLLA(self, *args):
        return _ODA_Drawings.OdDbGeoData_getSimpleTransformerToLLA(self, *args)

    def getSimpleTransformerFromLLA(self, *args):
        return _ODA_Drawings.OdDbGeoData_getSimpleTransformerFromLLA(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGeoData

# Register OdDbGeoData in _ODA_Drawings:
_ODA_Drawings.OdDbGeoData_swigregister(OdDbGeoData)

def OdDbGeoData_cast(*args):
    return _ODA_Drawings.OdDbGeoData_cast(*args)

def OdDbGeoData_desc(*args):
    return _ODA_Drawings.OdDbGeoData_desc(*args)

def OdDbGeoData_createObject(*args):
    return _ODA_Drawings.OdDbGeoData_createObject(*args)


def oddbGetGeoDataObjId(*args):
    return _ODA_Drawings.oddbGetGeoDataObjId(*args)

def oddbGetGeoDataTransform(*args):
    return _ODA_Drawings.oddbGetGeoDataTransform(*args)
class OdDbSweepOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSweepOptions

    def __init__(self, *args):
        _ODA_Drawings.OdDbSweepOptions_swiginit(self, _ODA_Drawings.new_OdDbSweepOptions(*args))

    def __eq__(self, *args):
        return _ODA_Drawings.OdDbSweepOptions___eq__(self, *args)
    kNoAlignment = _ODA_Drawings.OdDbSweepOptions_kNoAlignment
    kAlignSweepEntityToPath = _ODA_Drawings.OdDbSweepOptions_kAlignSweepEntityToPath
    kTranslateSweepEntityToPath = _ODA_Drawings.OdDbSweepOptions_kTranslateSweepEntityToPath
    kTranslatePathToSweepEntity = _ODA_Drawings.OdDbSweepOptions_kTranslatePathToSweepEntity
    kDefaultMiter = _ODA_Drawings.OdDbSweepOptions_kDefaultMiter
    kOldMiter = _ODA_Drawings.OdDbSweepOptions_kOldMiter
    kNewMiter = _ODA_Drawings.OdDbSweepOptions_kNewMiter
    kCrimpMiter = _ODA_Drawings.OdDbSweepOptions_kCrimpMiter
    kBendMiter = _ODA_Drawings.OdDbSweepOptions_kBendMiter

    def draftAngle(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_draftAngle(self, *args)

    def setDraftAngle(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_setDraftAngle(self, *args)

    def startDraftDist(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_startDraftDist(self, *args)

    def setStartDraftDist(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_setStartDraftDist(self, *args)

    def endDraftDist(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_endDraftDist(self, *args)

    def setEndDraftDist(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_setEndDraftDist(self, *args)

    def twistAngle(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_twistAngle(self, *args)

    def setTwistAngle(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_setTwistAngle(self, *args)

    def scaleFactor(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_scaleFactor(self, *args)

    def setScaleFactor(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_setScaleFactor(self, *args)

    def alignAngle(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_alignAngle(self, *args)

    def setAlignAngle(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_setAlignAngle(self, *args)

    def align(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_align(self, *args)

    def setAlign(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_setAlign(self, *args)

    def miterOption(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_miterOption(self, *args)

    def setMiterOption(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_setMiterOption(self, *args)

    def alignStart(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_alignStart(self, *args)

    def setAlignStart(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_setAlignStart(self, *args)

    def basePoint(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_basePoint(self, *args)

    def setBasePoint(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_setBasePoint(self, *args)

    def bank(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_bank(self, *args)

    def setBank(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_setBank(self, *args)

    def checkIntersections(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_checkIntersections(self, *args)

    def setCheckIntersections(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_setCheckIntersections(self, *args)

    def twistRefVec(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_twistRefVec(self, *args)

    def setTwistRefVec(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_setTwistRefVec(self, *args)

    def getSweepEntityTransform(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_getSweepEntityTransform(self, *args)

    def setSweepEntityTransform(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_setSweepEntityTransform(self, *args)

    def getPathEntityTransform(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_getPathEntityTransform(self, *args)

    def setPathEntityTransform(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_setPathEntityTransform(self, *args)

    def checkSweepCurve(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_checkSweepCurve(self, *args)

    def checkPathCurve(self, *args):
        return _ODA_Drawings.OdDbSweepOptions_checkPathCurve(self, *args)

# Register OdDbSweepOptions in _ODA_Drawings:
_ODA_Drawings.OdDbSweepOptions_swigregister(OdDbSweepOptions)

class OdDbLinetypeTableRecord(OdDbSymbolTableRecord):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_createObject(*args)

    def comments(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_comments(self, *args)

    def setComments(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_setComments(self, *args)

    def isScaledToFit(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_isScaledToFit(self, *args)

    def setIsScaledToFit(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_setIsScaledToFit(self, *args)

    def patternLength(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_patternLength(self, *args)

    def setPatternLength(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_setPatternLength(self, *args)

    def numDashes(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_numDashes(self, *args)

    def setNumDashes(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_setNumDashes(self, *args)

    def dashLengthAt(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_dashLengthAt(self, *args)

    def setDashLengthAt(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_setDashLengthAt(self, *args)

    def shapeStyleAt(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_shapeStyleAt(self, *args)

    def setShapeStyleAt(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_setShapeStyleAt(self, *args)

    def shapeNumberAt(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_shapeNumberAt(self, *args)

    def setShapeNumberAt(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_setShapeNumberAt(self, *args)

    def textAt(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_textAt(self, *args)

    def setTextAt(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_setTextAt(self, *args)

    def shapeOffsetAt(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_shapeOffsetAt(self, *args)

    def setShapeOffsetAt(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_setShapeOffsetAt(self, *args)

    def shapeScaleAt(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_shapeScaleAt(self, *args)

    def setShapeScaleAt(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_setShapeScaleAt(self, *args)

    def shapeRotationAt(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_shapeRotationAt(self, *args)

    def setShapeRotationAt(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_setShapeRotationAt(self, *args)

    def shapeIsUcsOrientedAt(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_shapeIsUcsOrientedAt(self, *args)

    def setShapeIsUcsOrientedAt(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_setShapeIsUcsOrientedAt(self, *args)

    def shapeIsUprightAt(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_shapeIsUprightAt(self, *args)

    def setShapeIsUprightAt(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_setShapeIsUprightAt(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_dxfOutFields_R12(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_subGetClassID(self, *args)

    def drawable(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_drawable(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_subSetAttributes(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbLinetypeTableRecord_subErase(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLinetypeTableRecord

# Register OdDbLinetypeTableRecord in _ODA_Drawings:
_ODA_Drawings.OdDbLinetypeTableRecord_swigregister(OdDbLinetypeTableRecord)

def OdDbLinetypeTableRecord_cast(*args):
    return _ODA_Drawings.OdDbLinetypeTableRecord_cast(*args)

def OdDbLinetypeTableRecord_desc(*args):
    return _ODA_Drawings.OdDbLinetypeTableRecord_desc(*args)

def OdDbLinetypeTableRecord_createObject(*args):
    return _ODA_Drawings.OdDbLinetypeTableRecord_createObject(*args)

class OdDbXrefFullSubentPath(OdDbFullSubentPath):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def xrefObjHandles(self, *args):
        return _ODA_Drawings.OdDbXrefFullSubentPath_xrefObjHandles(self, *args)

    def dwgIn(self, *args):
        return _ODA_Drawings.OdDbXrefFullSubentPath_dwgIn(self, *args)

    def dwgOut(self, *args):
        return _ODA_Drawings.OdDbXrefFullSubentPath_dwgOut(self, *args)

    def dxfOut(self, *args):
        return _ODA_Drawings.OdDbXrefFullSubentPath_dxfOut(self, *args)

    def __init__(self, *args):
        _ODA_Drawings.OdDbXrefFullSubentPath_swiginit(self, _ODA_Drawings.new_OdDbXrefFullSubentPath(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbXrefFullSubentPath

# Register OdDbXrefFullSubentPath in _ODA_Drawings:
_ODA_Drawings.OdDbXrefFullSubentPath_swigregister(OdDbXrefFullSubentPath)

class OdDbPointRef(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPointRef_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPointRef_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPointRef_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPointRef_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPointRef_createObject(*args)

    def evalPoint(self, *args):
        return _ODA_Drawings.OdDbPointRef_evalPoint(self, *args)

    def getEntities(self, *args):
        return _ODA_Drawings.OdDbPointRef_getEntities(self, *args)

    def isGeomErased(self, *args):
        return _ODA_Drawings.OdDbPointRef_isGeomErased(self, *args)

    def isXrefObj(self, *args):
        return _ODA_Drawings.OdDbPointRef_isXrefObj(self, *args)

    def updateXrefSubentPath(self, *args):
        return _ODA_Drawings.OdDbPointRef_updateXrefSubentPath(self, *args)

    def updateSubentPath(self, *args):
        return _ODA_Drawings.OdDbPointRef_updateSubentPath(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPointRef_dwgOutFields(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPointRef_dwgInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPointRef_dxfOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPointRef_dxfInFields(self, *args)

    def updateDueToMirror(self, *args):
        return _ODA_Drawings.OdDbPointRef_updateDueToMirror(self, *args)

    @staticmethod
    def calcTransform(*args):
        return _ODA_Drawings.OdDbPointRef_calcTransform(*args)

    @staticmethod
    def mswcsToPswcs(*args):
        return _ODA_Drawings.OdDbPointRef_mswcsToPswcs(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointRef

# Register OdDbPointRef in _ODA_Drawings:
_ODA_Drawings.OdDbPointRef_swigregister(OdDbPointRef)

def OdDbPointRef_cast(*args):
    return _ODA_Drawings.OdDbPointRef_cast(*args)

def OdDbPointRef_desc(*args):
    return _ODA_Drawings.OdDbPointRef_desc(*args)

def OdDbPointRef_createObject(*args):
    return _ODA_Drawings.OdDbPointRef_createObject(*args)

def OdDbPointRef_calcTransform(*args):
    return _ODA_Drawings.OdDbPointRef_calcTransform(*args)

def OdDbPointRef_mswcsToPswcs(*args):
    return _ODA_Drawings.OdDbPointRef_mswcsToPswcs(*args)

class OdDbOsnapPointRef(OdDbPointRef):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbOsnapPointRef_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbOsnapPointRef_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbOsnapPointRef_createObject(*args)

    def osnapType(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_osnapType(self, *args)

    def setOsnapType(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_setOsnapType(self, *args)

    def mainEntity(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_mainEntity(self, *args)

    def intersectEntity(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_intersectEntity(self, *args)

    def getIdPath(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_getIdPath(self, *args)

    def setIdPath(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_setIdPath(self, *args)

    def getIntIdPath(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_getIntIdPath(self, *args)

    def setIntIdPath(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_setIntIdPath(self, *args)

    def nearPointParam(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_nearPointParam(self, *args)

    def setNearPointParam(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_setNearPointParam(self, *args)

    def point(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_point(self, *args)

    def setPoint(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_setPoint(self, *args)

    def lastPointRef(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_lastPointRef(self, *args)

    def setLastPointRef(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_setLastPointRef(self, *args)

    def isGeomErased(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_isGeomErased(self, *args)

    def isXrefObj(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_isXrefObj(self, *args)

    def updateXrefSubentPath(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_updateXrefSubentPath(self, *args)

    def updateSubentPath(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_updateSubentPath(self, *args)

    def evalPoint(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_evalPoint(self, *args)

    def getEntities(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_getEntities(self, *args)

    def updateDueToMirror(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_updateDueToMirror(self, *args)

    def getXrefHandles(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_getXrefHandles(self, *args)

    def setXrefHandles(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_setXrefHandles(self, *args)

    def getXrefIntHandles(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_getXrefIntHandles(self, *args)

    def setXrefIntHandles(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_setXrefIntHandles(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_dwgOutFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_dxfOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbOsnapPointRef_dxfInFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbOsnapPointRef

# Register OdDbOsnapPointRef in _ODA_Drawings:
_ODA_Drawings.OdDbOsnapPointRef_swigregister(OdDbOsnapPointRef)

def OdDbOsnapPointRef_cast(*args):
    return _ODA_Drawings.OdDbOsnapPointRef_cast(*args)

def OdDbOsnapPointRef_desc(*args):
    return _ODA_Drawings.OdDbOsnapPointRef_desc(*args)

def OdDbOsnapPointRef_createObject(*args):
    return _ODA_Drawings.OdDbOsnapPointRef_createObject(*args)

class OdDbDimAssoc(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDimAssoc_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDimAssoc_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDimAssoc_createObject(*args)
    kMaxPointRefs = _ODA_Drawings.OdDbDimAssoc_kMaxPointRefs
    kXline1Point = _ODA_Drawings.OdDbDimAssoc_kXline1Point
    kXline2Point = _ODA_Drawings.OdDbDimAssoc_kXline2Point
    kOriginPoint = _ODA_Drawings.OdDbDimAssoc_kOriginPoint
    kDefiningPoint = _ODA_Drawings.OdDbDimAssoc_kDefiningPoint
    kXline1Start = _ODA_Drawings.OdDbDimAssoc_kXline1Start
    kXline1End = _ODA_Drawings.OdDbDimAssoc_kXline1End
    kXline2Start = _ODA_Drawings.OdDbDimAssoc_kXline2Start
    kXline2End = _ODA_Drawings.OdDbDimAssoc_kXline2End
    kVertexPoint = _ODA_Drawings.OdDbDimAssoc_kVertexPoint
    kChordPoint = _ODA_Drawings.OdDbDimAssoc_kChordPoint
    kCenterPoint = _ODA_Drawings.OdDbDimAssoc_kCenterPoint
    kFarChordPoint = _ODA_Drawings.OdDbDimAssoc_kFarChordPoint
    kOverrideCenterPoint = _ODA_Drawings.OdDbDimAssoc_kOverrideCenterPoint
    kAngLineStart = _ODA_Drawings.OdDbDimAssoc_kAngLineStart
    kJogPoint = _ODA_Drawings.OdDbDimAssoc_kJogPoint
    kAngLineEnd = _ODA_Drawings.OdDbDimAssoc_kAngLineEnd
    kLeaderPoint = _ODA_Drawings.OdDbDimAssoc_kLeaderPoint
    kUnknown = _ODA_Drawings.OdDbDimAssoc_kUnknown
    kParallel = _ODA_Drawings.OdDbDimAssoc_kParallel
    kPerpendicular = _ODA_Drawings.OdDbDimAssoc_kPerpendicular
    kFirstPointRef = _ODA_Drawings.OdDbDimAssoc_kFirstPointRef
    kSecondPointRef = _ODA_Drawings.OdDbDimAssoc_kSecondPointRef
    kThirdPointRef = _ODA_Drawings.OdDbDimAssoc_kThirdPointRef
    kFourthPointRef = _ODA_Drawings.OdDbDimAssoc_kFourthPointRef

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_dxfOutFields(self, *args)

    def dimObjId(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_dimObjId(self, *args)

    def setDimObjId(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_setDimObjId(self, *args)

    def assocFlag(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_assocFlag(self, *args)

    def setAssocFlag(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_setAssocFlag(self, *args)

    def pointRef(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_pointRef(self, *args)

    def setPointRef(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_setPointRef(self, *args)

    def rotatedDimType(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_rotatedDimType(self, *args)

    def setRotatedDimType(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_setRotatedDimType(self, *args)

    def addToPointRefReactor(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_addToPointRefReactor(self, *args)

    def addToDimensionReactor(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_addToDimensionReactor(self, *args)

    def removePointRef(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_removePointRef(self, *args)

    def updateDimension(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_updateDimension(self, *args)

    def removeAssociativity(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_removeAssociativity(self, *args)

    def isTransSpatial(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_isTransSpatial(self, *args)

    def setTransSpatial(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_setTransSpatial(self, *args)

    def post(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_post(self, *args)

    def getDimAssocGeomIds(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_getDimAssocGeomIds(self, *args)

    def isAllGeomErased(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_isAllGeomErased(self, *args)

    def modifiedGraphics(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_modifiedGraphics(self, *args)

    def copied(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_copied(self, *args)

    def erased(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_erased(self, *args)

    def openedForModify(self, *args):
        return _ODA_Drawings.OdDbDimAssoc_openedForModify(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDimAssoc

# Register OdDbDimAssoc in _ODA_Drawings:
_ODA_Drawings.OdDbDimAssoc_swigregister(OdDbDimAssoc)

def OdDbDimAssoc_cast(*args):
    return _ODA_Drawings.OdDbDimAssoc_cast(*args)

def OdDbDimAssoc_desc(*args):
    return _ODA_Drawings.OdDbDimAssoc_desc(*args)

def OdDbDimAssoc_createObject(*args):
    return _ODA_Drawings.OdDbDimAssoc_createObject(*args)

class OdDbAbstractViewportDataForAbstractViewTabRec(OdDbAbstractViewportData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_createObject(*args)

    def setView(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_setView(self, *args)

    def target(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_target(self, *args)

    def direction(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_direction(self, *args)

    def upVector(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_upVector(self, *args)

    def fieldWidth(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_fieldWidth(self, *args)

    def fieldHeight(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_fieldHeight(self, *args)

    def viewOffset(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_viewOffset(self, *args)

    def viewTwist(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_viewTwist(self, *args)

    def isPerspective(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_isPerspective(self, *args)

    def setLensLength(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_setLensLength(self, *args)

    def lensLength(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_lensLength(self, *args)

    def isFrontClipOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_isFrontClipOn(self, *args)

    def setFrontClipOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_setFrontClipOn(self, *args)

    def isBackClipOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_isBackClipOn(self, *args)

    def setBackClipOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_setBackClipOn(self, *args)

    def isFrontClipAtEyeOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_isFrontClipAtEyeOn(self, *args)

    def setFrontClipAtEyeOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_setFrontClipAtEyeOn(self, *args)

    def frontClipDistance(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_frontClipDistance(self, *args)

    def setFrontClipDistance(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_setFrontClipDistance(self, *args)

    def backClipDistance(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_backClipDistance(self, *args)

    def setBackClipDistance(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_setBackClipDistance(self, *args)

    def setRenderMode(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_setRenderMode(self, *args)

    def renderMode(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_renderMode(self, *args)

    def setVisualStyle(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_setVisualStyle(self, *args)

    def visualStyle(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_visualStyle(self, *args)

    def setBackground(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_setBackground(self, *args)

    def background(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_background(self, *args)

    def hasUcs(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_hasUcs(self, *args)

    def getUcs(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_getUcs(self, *args)

    def orthoUcs(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_orthoUcs(self, *args)

    def elevation(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_elevation(self, *args)

    def ucsName(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_ucsName(self, *args)

    def setUcs(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_setUcs(self, *args)

    def setElevation(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_setElevation(self, *args)

    def isDefaultLightingOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_isDefaultLightingOn(self, *args)

    def setDefaultLightingOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_setDefaultLightingOn(self, *args)

    def defaultLightingType(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_defaultLightingType(self, *args)

    def setDefaultLightingType(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_setDefaultLightingType(self, *args)

    def brightness(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_brightness(self, *args)

    def setBrightness(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_setBrightness(self, *args)

    def contrast(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_contrast(self, *args)

    def setContrast(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_setContrast(self, *args)

    def ambientLightColor(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_ambientLightColor(self, *args)

    def setAmbientLightColor(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_setAmbientLightColor(self, *args)

    def sunId(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_sunId(self, *args)

    def setSun(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_setSun(self, *args)

    def toneOperatorParameters(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_toneOperatorParameters(self, *args)

    def setToneOperatorParameters(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_setToneOperatorParameters(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAbstractViewportDataForAbstractViewTabRec

# Register OdDbAbstractViewportDataForAbstractViewTabRec in _ODA_Drawings:
_ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_swigregister(OdDbAbstractViewportDataForAbstractViewTabRec)

def OdDbAbstractViewportDataForAbstractViewTabRec_cast(*args):
    return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_cast(*args)

def OdDbAbstractViewportDataForAbstractViewTabRec_desc(*args):
    return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_desc(*args)

def OdDbAbstractViewportDataForAbstractViewTabRec_createObject(*args):
    return _ODA_Drawings.OdDbAbstractViewportDataForAbstractViewTabRec_createObject(*args)

class OdDbAbstractPlotData(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAbstractPlotData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAbstractPlotData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAbstractPlotData_createObject(*args)

    def setProps(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_setProps(self, *args)

    def useStandardScale(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_useStandardScale(self, *args)

    def customScale(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_customScale(self, *args)

    def setCustomScale(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_setCustomScale(self, *args)

    def standardScale(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_standardScale(self, *args)

    def setStandardScale(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_setStandardScale(self, *args)

    def styleSheet(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_styleSheet(self, *args)

    def setStyleSheet(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_setStyleSheet(self, *args)

    def shadePlot(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_shadePlot(self, *args)

    def shadePlotId(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_shadePlotId(self, *args)

    def setShadePlot(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_setShadePlot(self, *args)

    def plotHiddenLines(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_plotHiddenLines(self, *args)

    def setPlotHiddenLines(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_setPlotHiddenLines(self, *args)

    def plotWireframe(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_plotWireframe(self, *args)

    def plotAsRaster(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_plotAsRaster(self, *args)

    def plotTransparency(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_plotTransparency(self, *args)

    def setPlotTransparency(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_setPlotTransparency(self, *args)

    def modelType(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_modelType(self, *args)

    def setModelType(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotData_setModelType(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAbstractPlotData

# Register OdDbAbstractPlotData in _ODA_Drawings:
_ODA_Drawings.OdDbAbstractPlotData_swigregister(OdDbAbstractPlotData)

def OdDbAbstractPlotData_cast(*args):
    return _ODA_Drawings.OdDbAbstractPlotData_cast(*args)

def OdDbAbstractPlotData_desc(*args):
    return _ODA_Drawings.OdDbAbstractPlotData_desc(*args)

def OdDbAbstractPlotData_createObject(*args):
    return _ODA_Drawings.OdDbAbstractPlotData_createObject(*args)

class OdDbGeomRef(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbGeomRef_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbGeomRef_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbGeomRef_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbGeomRef_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGeomRef_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGeomRef

    def reset(self, *args):
        return _ODA_Drawings.OdDbGeomRef_reset(self, *args)

    def isValid(self, *args):
        return _ODA_Drawings.OdDbGeomRef_isValid(self, *args)

    def isEmpty(self, *args):
        return _ODA_Drawings.OdDbGeomRef_isEmpty(self, *args)

    def createEntity(self, *args):
        return _ODA_Drawings.OdDbGeomRef_createEntity(self, *args)

    def evaluateAndCacheGeometry(self, *args):
        return _ODA_Drawings.OdDbGeomRef_evaluateAndCacheGeometry(self, *args)

# Register OdDbGeomRef in _ODA_Drawings:
_ODA_Drawings.OdDbGeomRef_swigregister(OdDbGeomRef)

def OdDbGeomRef_cast(*args):
    return _ODA_Drawings.OdDbGeomRef_cast(*args)

def OdDbGeomRef_desc(*args):
    return _ODA_Drawings.OdDbGeomRef_desc(*args)

def OdDbGeomRef_createObject(*args):
    return _ODA_Drawings.OdDbGeomRef_createObject(*args)

class OdDbSubentRef(OdDbGeomRef):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSubentRef_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSubentRef_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSubentRef_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSubentRef_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSubentRef_createObject(*args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbSubentRef_copyFrom(self, *args)

    def reset(self, *args):
        return _ODA_Drawings.OdDbSubentRef_reset(self, *args)

    def isValid(self, *args):
        return _ODA_Drawings.OdDbSubentRef_isValid(self, *args)

    def isEmpty(self, *args):
        return _ODA_Drawings.OdDbSubentRef_isEmpty(self, *args)

    def entity(self, *args):
        return _ODA_Drawings.OdDbSubentRef_entity(self, *args)

    def subentId(self, *args):
        return _ODA_Drawings.OdDbSubentRef_subentId(self, *args)

    def createEntity(self, *args):
        return _ODA_Drawings.OdDbSubentRef_createEntity(self, *args)

    def evaluateAndCacheGeometry(self, *args):
        return _ODA_Drawings.OdDbSubentRef_evaluateAndCacheGeometry(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSubentRef

# Register OdDbSubentRef in _ODA_Drawings:
_ODA_Drawings.OdDbSubentRef_swigregister(OdDbSubentRef)

def OdDbSubentRef_cast(*args):
    return _ODA_Drawings.OdDbSubentRef_cast(*args)

def OdDbSubentRef_desc(*args):
    return _ODA_Drawings.OdDbSubentRef_desc(*args)

def OdDbSubentRef_createObject(*args):
    return _ODA_Drawings.OdDbSubentRef_createObject(*args)

class OdDbFaceRef(OdRxObjectImpl_OdDbSubentRef):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbFaceRef_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbFaceRef_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbFaceRef_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbFaceRef_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbFaceRef_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbFaceRef

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbFaceRef_copyFrom(self, *args)

    def reset(self, *args):
        return _ODA_Drawings.OdDbFaceRef_reset(self, *args)

    def isValid(self, *args):
        return _ODA_Drawings.OdDbFaceRef_isValid(self, *args)

    def isEmpty(self, *args):
        return _ODA_Drawings.OdDbFaceRef_isEmpty(self, *args)

    def asmBody(self, *args):
        return _ODA_Drawings.OdDbFaceRef_asmBody(self, *args)

    def createEntity(self, *args):
        return _ODA_Drawings.OdDbFaceRef_createEntity(self, *args)

    def evaluateAndCacheGeometry(self, *args):
        return _ODA_Drawings.OdDbFaceRef_evaluateAndCacheGeometry(self, *args)

# Register OdDbFaceRef in _ODA_Drawings:
_ODA_Drawings.OdDbFaceRef_swigregister(OdDbFaceRef)

def OdDbFaceRef_cast(*args):
    return _ODA_Drawings.OdDbFaceRef_cast(*args)

def OdDbFaceRef_desc(*args):
    return _ODA_Drawings.OdDbFaceRef_desc(*args)

def OdDbFaceRef_createObject(*args):
    return _ODA_Drawings.OdDbFaceRef_createObject(*args)

class OdDbEdgeRef(OdRxObjectImpl_OdDbSubentRef):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbEdgeRef_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbEdgeRef_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbEdgeRef_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbEdgeRef_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbEdgeRef_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbEdgeRef

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbEdgeRef_copyFrom(self, *args)

    def reset(self, *args):
        return _ODA_Drawings.OdDbEdgeRef_reset(self, *args)

    def isValid(self, *args):
        return _ODA_Drawings.OdDbEdgeRef_isValid(self, *args)

    def isEmpty(self, *args):
        return _ODA_Drawings.OdDbEdgeRef_isEmpty(self, *args)

    def setFaceSubentity(self, *args):
        return _ODA_Drawings.OdDbEdgeRef_setFaceSubentity(self, *args)

    def faceSubentId(self, *args):
        return _ODA_Drawings.OdDbEdgeRef_faceSubentId(self, *args)

    def curve(self, *args):
        return _ODA_Drawings.OdDbEdgeRef_curve(self, *args)

    def evaluateCurve(self, *args):
        return _ODA_Drawings.OdDbEdgeRef_evaluateCurve(self, *args)

    def createEntity(self, *args):
        return _ODA_Drawings.OdDbEdgeRef_createEntity(self, *args)

    def evaluateAndCacheGeometry(self, *args):
        return _ODA_Drawings.OdDbEdgeRef_evaluateAndCacheGeometry(self, *args)

    def setCurve(self, *args):
        return _ODA_Drawings.OdDbEdgeRef_setCurve(self, *args)

# Register OdDbEdgeRef in _ODA_Drawings:
_ODA_Drawings.OdDbEdgeRef_swigregister(OdDbEdgeRef)

def OdDbEdgeRef_cast(*args):
    return _ODA_Drawings.OdDbEdgeRef_cast(*args)

def OdDbEdgeRef_desc(*args):
    return _ODA_Drawings.OdDbEdgeRef_desc(*args)

def OdDbEdgeRef_createObject(*args):
    return _ODA_Drawings.OdDbEdgeRef_createObject(*args)

class OdDbVertexRef(OdRxObjectImpl_OdDbSubentRef):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbVertexRef_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbVertexRef_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbVertexRef_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbVertexRef_queryX(self, *args)
    kExplicitVertex = _ODA_Drawings.OdDbVertexRef_kExplicitVertex
    kUnknownType = _ODA_Drawings.OdDbVertexRef_kUnknownType
    kEdgeStart = _ODA_Drawings.OdDbVertexRef_kEdgeStart
    kEdgeEnd = _ODA_Drawings.OdDbVertexRef_kEdgeEnd
    kEdgeMid = _ODA_Drawings.OdDbVertexRef_kEdgeMid
    kEdgeCenter = _ODA_Drawings.OdDbVertexRef_kEdgeCenter
    kEdgeSplineControlPoint = _ODA_Drawings.OdDbVertexRef_kEdgeSplineControlPoint
    kEdgeSplineFitPoint = _ODA_Drawings.OdDbVertexRef_kEdgeSplineFitPoint

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbVertexRef_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbVertexRef

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbVertexRef_copyFrom(self, *args)

    def reset(self, *args):
        return _ODA_Drawings.OdDbVertexRef_reset(self, *args)

    def isValid(self, *args):
        return _ODA_Drawings.OdDbVertexRef_isValid(self, *args)

    def entity(self, *args):
        return _ODA_Drawings.OdDbVertexRef_entity(self, *args)

    def subentId(self, *args):
        return _ODA_Drawings.OdDbVertexRef_subentId(self, *args)

    def impliedType(self, *args):
        return _ODA_Drawings.OdDbVertexRef_impliedType(self, *args)

    def referencedRef(self, *args):
        return _ODA_Drawings.OdDbVertexRef_referencedRef(self, *args)

    def index(self, *args):
        return _ODA_Drawings.OdDbVertexRef_index(self, *args)

    def point(self, *args):
        return _ODA_Drawings.OdDbVertexRef_point(self, *args)

    def evaluatePoint(self, *args):
        return _ODA_Drawings.OdDbVertexRef_evaluatePoint(self, *args)

    def createEntity(self, *args):
        return _ODA_Drawings.OdDbVertexRef_createEntity(self, *args)

    def evaluateAndCacheGeometry(self, *args):
        return _ODA_Drawings.OdDbVertexRef_evaluateAndCacheGeometry(self, *args)

# Register OdDbVertexRef in _ODA_Drawings:
_ODA_Drawings.OdDbVertexRef_swigregister(OdDbVertexRef)

def OdDbVertexRef_cast(*args):
    return _ODA_Drawings.OdDbVertexRef_cast(*args)

def OdDbVertexRef_desc(*args):
    return _ODA_Drawings.OdDbVertexRef_desc(*args)

def OdDbVertexRef_createObject(*args):
    return _ODA_Drawings.OdDbVertexRef_createObject(*args)

class OdDbPathRef(OdRxObjectImpl_OdDbGeomRef):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPathRef_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPathRef_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPathRef_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPathRef_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPathRef_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPathRef

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbPathRef_copyFrom(self, *args)

    def reset(self, *args):
        return _ODA_Drawings.OdDbPathRef_reset(self, *args)

    def isValid(self, *args):
        return _ODA_Drawings.OdDbPathRef_isValid(self, *args)

    def isEmpty(self, *args):
        return _ODA_Drawings.OdDbPathRef_isEmpty(self, *args)

    def setEdgeRefs(self, *args):
        return _ODA_Drawings.OdDbPathRef_setEdgeRefs(self, *args)

    def getEntityArray(self, *args):
        return _ODA_Drawings.OdDbPathRef_getEntityArray(self, *args)

    def edgeRefs(self, *args):
        return _ODA_Drawings.OdDbPathRef_edgeRefs(self, *args)

    def isEqualTo(self, *args):
        return _ODA_Drawings.OdDbPathRef_isEqualTo(self, *args)

    def isReferencePath(self, *args):
        return _ODA_Drawings.OdDbPathRef_isReferencePath(self, *args)

    def createEntity(self, *args):
        return _ODA_Drawings.OdDbPathRef_createEntity(self, *args)

    def evaluateAndCacheGeometry(self, *args):
        return _ODA_Drawings.OdDbPathRef_evaluateAndCacheGeometry(self, *args)

# Register OdDbPathRef in _ODA_Drawings:
_ODA_Drawings.OdDbPathRef_swigregister(OdDbPathRef)

def OdDbPathRef_cast(*args):
    return _ODA_Drawings.OdDbPathRef_cast(*args)

def OdDbPathRef_desc(*args):
    return _ODA_Drawings.OdDbPathRef_desc(*args)

def OdDbPathRef_createObject(*args):
    return _ODA_Drawings.OdDbPathRef_createObject(*args)

class OdDbVectorRef(OdRxObjectImpl_OdDbGeomRef):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbVectorRef_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbVectorRef_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbVectorRef_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbVectorRef_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbVectorRef_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbVectorRef

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbVectorRef_copyFrom(self, *args)

    def reset(self, *args):
        return _ODA_Drawings.OdDbVectorRef_reset(self, *args)

    def isValid(self, *args):
        return _ODA_Drawings.OdDbVectorRef_isValid(self, *args)

    def isEmpty(self, *args):
        return _ODA_Drawings.OdDbVectorRef_isEmpty(self, *args)

    def vector(self, *args):
        return _ODA_Drawings.OdDbVectorRef_vector(self, *args)

    def set(self, *args):
        return _ODA_Drawings.OdDbVectorRef_set(self, *args)

    def createEntity(self, *args):
        return _ODA_Drawings.OdDbVectorRef_createEntity(self, *args)

    def evaluateAndCacheGeometry(self, *args):
        return _ODA_Drawings.OdDbVectorRef_evaluateAndCacheGeometry(self, *args)

# Register OdDbVectorRef in _ODA_Drawings:
_ODA_Drawings.OdDbVectorRef_swigregister(OdDbVectorRef)

def OdDbVectorRef_cast(*args):
    return _ODA_Drawings.OdDbVectorRef_cast(*args)

def OdDbVectorRef_desc(*args):
    return _ODA_Drawings.OdDbVectorRef_desc(*args)

def OdDbVectorRef_createObject(*args):
    return _ODA_Drawings.OdDbVectorRef_createObject(*args)

class OdDbCoordSystemRef(OdRxObjectImpl_OdDbGeomRef):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbCoordSystemRef_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbCoordSystemRef_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbCoordSystemRef_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbCoordSystemRef_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbCoordSystemRef_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbCoordSystemRef

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbCoordSystemRef_copyFrom(self, *args)

    def reset(self, *args):
        return _ODA_Drawings.OdDbCoordSystemRef_reset(self, *args)

    def isValid(self, *args):
        return _ODA_Drawings.OdDbCoordSystemRef_isValid(self, *args)

    def isEmpty(self, *args):
        return _ODA_Drawings.OdDbCoordSystemRef_isEmpty(self, *args)

    def coordSystem(self, *args):
        return _ODA_Drawings.OdDbCoordSystemRef_coordSystem(self, *args)

    def entityId(self, *args):
        return _ODA_Drawings.OdDbCoordSystemRef_entityId(self, *args)

    def subentRefs(self, *args):
        return _ODA_Drawings.OdDbCoordSystemRef_subentRefs(self, *args)

    def set(self, *args):
        return _ODA_Drawings.OdDbCoordSystemRef_set(self, *args)

    def createEntity(self, *args):
        return _ODA_Drawings.OdDbCoordSystemRef_createEntity(self, *args)

    def evaluateAndCacheGeometry(self, *args):
        return _ODA_Drawings.OdDbCoordSystemRef_evaluateAndCacheGeometry(self, *args)

# Register OdDbCoordSystemRef in _ODA_Drawings:
_ODA_Drawings.OdDbCoordSystemRef_swigregister(OdDbCoordSystemRef)

def OdDbCoordSystemRef_cast(*args):
    return _ODA_Drawings.OdDbCoordSystemRef_cast(*args)

def OdDbCoordSystemRef_desc(*args):
    return _ODA_Drawings.OdDbCoordSystemRef_desc(*args)

def OdDbCoordSystemRef_createObject(*args):
    return _ODA_Drawings.OdDbCoordSystemRef_createObject(*args)

class OdPdfImport(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    success = _ODA_Drawings.OdPdfImport_success
    fail = _ODA_Drawings.OdPdfImport_fail
    bad_password = _ODA_Drawings.OdPdfImport_bad_password
    bad_file = _ODA_Drawings.OdPdfImport_bad_file
    bad_database = _ODA_Drawings.OdPdfImport_bad_database
    encrypted_file = _ODA_Drawings.OdPdfImport_encrypted_file
    invalid_page_number = _ODA_Drawings.OdPdfImport_invalid_page_number
    image_file_error = _ODA_Drawings.OdPdfImport_image_file_error
    no_objects_imported = _ODA_Drawings.OdPdfImport_no_objects_imported
    font_file_error = _ODA_Drawings.OdPdfImport_font_file_error

    def _import(self, *args):
        return _ODA_Drawings.OdPdfImport__import(self, *args)

    def properties(self, *args):
        return _ODA_Drawings.OdPdfImport_properties(self, *args)

    def setPreferableFontCallback(self, *args):
        return _ODA_Drawings.OdPdfImport_setPreferableFontCallback(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdPdfImport

# Register OdPdfImport in _ODA_Drawings:
_ODA_Drawings.OdPdfImport_swigregister(OdPdfImport)

class OdPdfImportModule(ODA_Kernel.OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Drawings.delete_OdPdfImportModule

# Register OdPdfImportModule in _ODA_Drawings:
_ODA_Drawings.OdPdfImportModule_swigregister(OdPdfImportModule)


def createPdfImporter(*args):
    return _ODA_Drawings.createPdfImporter(*args)
class OdDbPlotSettingsValidatorPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorPE_createObject(*args)

    def getDeviceList(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorPE_getDeviceList(self, *args)

    def getMediaList(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorPE_getMediaList(self, *args)

    def getDefaultMedia(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorPE_getDefaultMedia(self, *args)

    def getMediaMargins(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorPE_getMediaMargins(self, *args)

    def getPlotStyleSheetList(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorPE_getPlotStyleSheetList(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPlotSettingsValidatorPE

# Register OdDbPlotSettingsValidatorPE in _ODA_Drawings:
_ODA_Drawings.OdDbPlotSettingsValidatorPE_swigregister(OdDbPlotSettingsValidatorPE)

def OdDbPlotSettingsValidatorPE_cast(*args):
    return _ODA_Drawings.OdDbPlotSettingsValidatorPE_cast(*args)

def OdDbPlotSettingsValidatorPE_desc(*args):
    return _ODA_Drawings.OdDbPlotSettingsValidatorPE_desc(*args)

def OdDbPlotSettingsValidatorPE_createObject(*args):
    return _ODA_Drawings.OdDbPlotSettingsValidatorPE_createObject(*args)

class psvPaperInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    canonicalName = property(_ODA_Drawings.psvPaperInfo_canonicalName_get, _ODA_Drawings.psvPaperInfo_canonicalName_set)
    localeName = property(_ODA_Drawings.psvPaperInfo_localeName_get, _ODA_Drawings.psvPaperInfo_localeName_set)
    w = property(_ODA_Drawings.psvPaperInfo_w_get, _ODA_Drawings.psvPaperInfo_w_set)
    h = property(_ODA_Drawings.psvPaperInfo_h_get, _ODA_Drawings.psvPaperInfo_h_set)
    left = property(_ODA_Drawings.psvPaperInfo_left_get, _ODA_Drawings.psvPaperInfo_left_set)
    top = property(_ODA_Drawings.psvPaperInfo_top_get, _ODA_Drawings.psvPaperInfo_top_set)
    right = property(_ODA_Drawings.psvPaperInfo_right_get, _ODA_Drawings.psvPaperInfo_right_set)
    bottom = property(_ODA_Drawings.psvPaperInfo_bottom_get, _ODA_Drawings.psvPaperInfo_bottom_set)
    units = property(_ODA_Drawings.psvPaperInfo_units_get, _ODA_Drawings.psvPaperInfo_units_set)

    def __init__(self, *args):
        _ODA_Drawings.psvPaperInfo_swiginit(self, _ODA_Drawings.new_psvPaperInfo(*args))

    def __eq__(self, *args):
        return _ODA_Drawings.psvPaperInfo___eq__(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_psvPaperInfo

# Register psvPaperInfo in _ODA_Drawings:
_ODA_Drawings.psvPaperInfo_swigregister(psvPaperInfo)

class OdDbUnderlayFile(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbUnderlayFile_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbUnderlayFile_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbUnderlayFile_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbUnderlayFile_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbUnderlayFile_createObject(*args)

    def getItemCount(self, *args):
        return _ODA_Drawings.OdDbUnderlayFile_getItemCount(self, *args)

    def getItem(self, *args):
        return _ODA_Drawings.OdDbUnderlayFile_getItem(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbUnderlayFile

# Register OdDbUnderlayFile in _ODA_Drawings:
_ODA_Drawings.OdDbUnderlayFile_swigregister(OdDbUnderlayFile)

def OdDbUnderlayFile_cast(*args):
    return _ODA_Drawings.OdDbUnderlayFile_cast(*args)

def OdDbUnderlayFile_desc(*args):
    return _ODA_Drawings.OdDbUnderlayFile_desc(*args)

def OdDbUnderlayFile_createObject(*args):
    return _ODA_Drawings.OdDbUnderlayFile_createObject(*args)

class OdDbUnderlayHostPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbUnderlayHostPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbUnderlayHostPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbUnderlayHostPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbUnderlayHostPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbUnderlayHostPE_createObject(*args)

    def load(self, *args):
        return _ODA_Drawings.OdDbUnderlayHostPE_load(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbUnderlayHostPE

# Register OdDbUnderlayHostPE in _ODA_Drawings:
_ODA_Drawings.OdDbUnderlayHostPE_swigregister(OdDbUnderlayHostPE)

def OdDbUnderlayHostPE_cast(*args):
    return _ODA_Drawings.OdDbUnderlayHostPE_cast(*args)

def OdDbUnderlayHostPE_desc(*args):
    return _ODA_Drawings.OdDbUnderlayHostPE_desc(*args)

def OdDbUnderlayHostPE_createObject(*args):
    return _ODA_Drawings.OdDbUnderlayHostPE_createObject(*args)


def oddbConvertRgbToHsl(*args):
    return _ODA_Drawings.oddbConvertRgbToHsl(*args)

def oddbConvertHslToRgb(*args):
    return _ODA_Drawings.oddbConvertHslToRgb(*args)

def oddbUnderlayHostGetAdjustedColor(*args):
    return _ODA_Drawings.oddbUnderlayHostGetAdjustedColor(*args)
class OdDbUnderlayReference(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbUnderlayReference_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbUnderlayReference_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbUnderlayReference_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_dxfOutFields(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_subSetAttributes(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_subViewportDraw(self, *args)

    def subGetOsnapPoints(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_subGetOsnapPoints(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_subTransformBy(self, *args)

    def position(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_position(self, *args)

    def setPosition(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_setPosition(self, *args)

    def scaleFactors(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_scaleFactors(self, *args)

    def setScaleFactors(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_setScaleFactors(self, *args)

    def rotation(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_rotation(self, *args)

    def setRotation(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_setRotation(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_normal(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_setNormal(self, *args)

    def transform(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_transform(self, *args)

    def setTransform(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_setTransform(self, *args)

    def definitionId(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_definitionId(self, *args)

    def setDefinitionId(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_setDefinitionId(self, *args)

    def clipBoundary(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_clipBoundary(self, *args)

    def setClipBoundary(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_setClipBoundary(self, *args)

    def isClipped(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_isClipped(self, *args)

    def setIsClipped(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_setIsClipped(self, *args)

    def contrast(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_contrast(self, *args)

    def setContrast(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_setContrast(self, *args)

    def fade(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_fade(self, *args)

    def setFade(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_setFade(self, *args)

    def isOn(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_isOn(self, *args)

    def setIsOn(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_setIsOn(self, *args)

    def isMonochrome(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_isMonochrome(self, *args)

    def setIsMonochrome(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_setIsMonochrome(self, *args)

    def isAdjustedForBackground(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_isAdjustedForBackground(self, *args)

    def setIsAdjustedForBackground(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_setIsAdjustedForBackground(self, *args)

    def isFrameVisible(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_isFrameVisible(self, *args)

    def isFramePlottable(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_isFramePlottable(self, *args)

    def underlayLayerCount(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_underlayLayerCount(self, *args)

    def getUnderlayLayer(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_getUnderlayLayer(self, *args)

    def setUnderlayLayer(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_setUnderlayLayer(self, *args)

    @staticmethod
    def contrastLowerLimit(*args):
        return _ODA_Drawings.OdDbUnderlayReference_contrastLowerLimit(*args)

    @staticmethod
    def contrastUpperLimit(*args):
        return _ODA_Drawings.OdDbUnderlayReference_contrastUpperLimit(*args)

    @staticmethod
    def contrastDefault(*args):
        return _ODA_Drawings.OdDbUnderlayReference_contrastDefault(*args)

    @staticmethod
    def fadeLowerLimit(*args):
        return _ODA_Drawings.OdDbUnderlayReference_fadeLowerLimit(*args)

    @staticmethod
    def fadeUpperLimit(*args):
        return _ODA_Drawings.OdDbUnderlayReference_fadeUpperLimit(*args)

    @staticmethod
    def fadeDefault(*args):
        return _ODA_Drawings.OdDbUnderlayReference_fadeDefault(*args)

    def isClipInverted(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_isClipInverted(self, *args)

    def setClipInverted(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_setClipInverted(self, *args)

    def generateClipBoundaryFromPline(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_generateClipBoundaryFromPline(self, *args)

    def getEcs(self, *args):
        return _ODA_Drawings.OdDbUnderlayReference_getEcs(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbUnderlayReference

# Register OdDbUnderlayReference in _ODA_Drawings:
_ODA_Drawings.OdDbUnderlayReference_swigregister(OdDbUnderlayReference)

def OdDbUnderlayReference_cast(*args):
    return _ODA_Drawings.OdDbUnderlayReference_cast(*args)

def OdDbUnderlayReference_desc(*args):
    return _ODA_Drawings.OdDbUnderlayReference_desc(*args)

def OdDbUnderlayReference_createObject(*args):
    return _ODA_Drawings.OdDbUnderlayReference_createObject(*args)

def OdDbUnderlayReference_contrastLowerLimit(*args):
    return _ODA_Drawings.OdDbUnderlayReference_contrastLowerLimit(*args)

def OdDbUnderlayReference_contrastUpperLimit(*args):
    return _ODA_Drawings.OdDbUnderlayReference_contrastUpperLimit(*args)

def OdDbUnderlayReference_contrastDefault(*args):
    return _ODA_Drawings.OdDbUnderlayReference_contrastDefault(*args)

def OdDbUnderlayReference_fadeLowerLimit(*args):
    return _ODA_Drawings.OdDbUnderlayReference_fadeLowerLimit(*args)

def OdDbUnderlayReference_fadeUpperLimit(*args):
    return _ODA_Drawings.OdDbUnderlayReference_fadeUpperLimit(*args)

def OdDbUnderlayReference_fadeDefault(*args):
    return _ODA_Drawings.OdDbUnderlayReference_fadeDefault(*args)

class OdDbDwfReference(OdDbUnderlayReference):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDwfReference_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDwfReference_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDwfReference_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDwfReference_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDwfReference_createObject(*args)

    def isFrameVisible(self, *args):
        return _ODA_Drawings.OdDbDwfReference_isFrameVisible(self, *args)

    def isFramePlottable(self, *args):
        return _ODA_Drawings.OdDbDwfReference_isFramePlottable(self, *args)

    def subIsContentSnappable(self, *args):
        return _ODA_Drawings.OdDbDwfReference_subIsContentSnappable(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbDwfReference_subGetClassID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDwfReference

# Register OdDbDwfReference in _ODA_Drawings:
_ODA_Drawings.OdDbDwfReference_swigregister(OdDbDwfReference)

def OdDbDwfReference_cast(*args):
    return _ODA_Drawings.OdDbDwfReference_cast(*args)

def OdDbDwfReference_desc(*args):
    return _ODA_Drawings.OdDbDwfReference_desc(*args)

def OdDbDwfReference_createObject(*args):
    return _ODA_Drawings.OdDbDwfReference_createObject(*args)

class OdDbDgnReference(OdDbUnderlayReference):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDgnReference_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDgnReference_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDgnReference_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDgnReference_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDgnReference_createObject(*args)

    def isFrameVisible(self, *args):
        return _ODA_Drawings.OdDbDgnReference_isFrameVisible(self, *args)

    def isFramePlottable(self, *args):
        return _ODA_Drawings.OdDbDgnReference_isFramePlottable(self, *args)

    def subIsContentSnappable(self, *args):
        return _ODA_Drawings.OdDbDgnReference_subIsContentSnappable(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbDgnReference_subGetClassID(self, *args)

    def setXrefDepth(self, *args):
        return _ODA_Drawings.OdDbDgnReference_setXrefDepth(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDgnReference

# Register OdDbDgnReference in _ODA_Drawings:
_ODA_Drawings.OdDbDgnReference_swigregister(OdDbDgnReference)

def OdDbDgnReference_cast(*args):
    return _ODA_Drawings.OdDbDgnReference_cast(*args)

def OdDbDgnReference_desc(*args):
    return _ODA_Drawings.OdDbDgnReference_desc(*args)

def OdDbDgnReference_createObject(*args):
    return _ODA_Drawings.OdDbDgnReference_createObject(*args)

class OdDbPdfReference(OdDbUnderlayReference):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPdfReference_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPdfReference_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPdfReference_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPdfReference_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPdfReference_createObject(*args)

    def isFrameVisible(self, *args):
        return _ODA_Drawings.OdDbPdfReference_isFrameVisible(self, *args)

    def isFramePlottable(self, *args):
        return _ODA_Drawings.OdDbPdfReference_isFramePlottable(self, *args)

    def subIsContentSnappable(self, *args):
        return _ODA_Drawings.OdDbPdfReference_subIsContentSnappable(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbPdfReference_subGetClassID(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbPdfReference_subSetAttributes(self, *args)

    @staticmethod
    def contrastDefault(*args):
        return _ODA_Drawings.OdDbPdfReference_contrastDefault(*args)

    @staticmethod
    def fadeDefault(*args):
        return _ODA_Drawings.OdDbPdfReference_fadeDefault(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPdfReference

# Register OdDbPdfReference in _ODA_Drawings:
_ODA_Drawings.OdDbPdfReference_swigregister(OdDbPdfReference)

def OdDbPdfReference_cast(*args):
    return _ODA_Drawings.OdDbPdfReference_cast(*args)

def OdDbPdfReference_desc(*args):
    return _ODA_Drawings.OdDbPdfReference_desc(*args)

def OdDbPdfReference_createObject(*args):
    return _ODA_Drawings.OdDbPdfReference_createObject(*args)

def OdDbPdfReference_contrastDefault(*args):
    return _ODA_Drawings.OdDbPdfReference_contrastDefault(*args)

def OdDbPdfReference_fadeDefault(*args):
    return _ODA_Drawings.OdDbPdfReference_fadeDefault(*args)

class OdDbNavisworksReference(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbNavisworksReference_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbNavisworksReference_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbNavisworksReference_createObject(*args)

    def getInsertionPoint(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_getInsertionPoint(self, *args)

    def setInsertionPoint(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_setInsertionPoint(self, *args)

    def getScale(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_getScale(self, *args)

    def setScale(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_setScale(self, *args)

    def getRotation(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_getRotation(self, *args)

    def setRotation(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_setRotation(self, *args)

    def getTransformation(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_getTransformation(self, *args)

    def setTransformation(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_setTransformation(self, *args)

    def getDefinitionId(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_getDefinitionId(self, *args)

    def setDefinitionId(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_setDefinitionId(self, *args)

    def getHostDwgVisibility(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_getHostDwgVisibility(self, *args)

    def setHostDwgVisibility(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_setHostDwgVisibility(self, *args)

    def getName(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_getName(self, *args)

    def getSavedPath(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_getSavedPath(self, *args)

    def getInsertionUnitScaleFactor(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_getInsertionUnitScaleFactor(self, *args)

    def setInsertionUnit(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_setInsertionUnit(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_subTransformBy(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_subSetAttributes(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_subWorldDraw(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbNavisworksReference_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbNavisworksReference

# Register OdDbNavisworksReference in _ODA_Drawings:
_ODA_Drawings.OdDbNavisworksReference_swigregister(OdDbNavisworksReference)

def OdDbNavisworksReference_cast(*args):
    return _ODA_Drawings.OdDbNavisworksReference_cast(*args)

def OdDbNavisworksReference_desc(*args):
    return _ODA_Drawings.OdDbNavisworksReference_desc(*args)

def OdDbNavisworksReference_createObject(*args):
    return _ODA_Drawings.OdDbNavisworksReference_createObject(*args)

class OdDbLine(OdDbCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLine_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLine_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLine_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLine_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLine_createObject(*args)

    def startPoint(self, *args):
        return _ODA_Drawings.OdDbLine_startPoint(self, *args)

    def setStartPoint(self, *args):
        return _ODA_Drawings.OdDbLine_setStartPoint(self, *args)

    def endPoint(self, *args):
        return _ODA_Drawings.OdDbLine_endPoint(self, *args)

    def setEndPoint(self, *args):
        return _ODA_Drawings.OdDbLine_setEndPoint(self, *args)

    def thickness(self, *args):
        return _ODA_Drawings.OdDbLine_thickness(self, *args)

    def setThickness(self, *args):
        return _ODA_Drawings.OdDbLine_setThickness(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbLine_normal(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDbLine_setNormal(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbLine_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbLine_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbLine_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbLine_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbLine_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbLine_dxfOutFields_R12(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbLine_subWorldDraw(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbLine_subGetGeomExtents(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbLine_subGetClassID(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbLine_subTransformBy(self, *args)

    def isClosed(self, *args):
        return _ODA_Drawings.OdDbLine_isClosed(self, *args)

    def isPeriodic(self, *args):
        return _ODA_Drawings.OdDbLine_isPeriodic(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbLine_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbLine_getPlane(self, *args)

    def getStartParam(self, *args):
        return _ODA_Drawings.OdDbLine_getStartParam(self, *args)

    def getEndParam(self, *args):
        return _ODA_Drawings.OdDbLine_getEndParam(self, *args)

    def getStartPoint(self, *args):
        return _ODA_Drawings.OdDbLine_getStartPoint(self, *args)

    def getEndPoint(self, *args):
        return _ODA_Drawings.OdDbLine_getEndPoint(self, *args)

    def getPointAtParam(self, *args):
        return _ODA_Drawings.OdDbLine_getPointAtParam(self, *args)

    def getParamAtPoint(self, *args):
        return _ODA_Drawings.OdDbLine_getParamAtPoint(self, *args)

    def getDistAtParam(self, *args):
        return _ODA_Drawings.OdDbLine_getDistAtParam(self, *args)

    def getParamAtDist(self, *args):
        return _ODA_Drawings.OdDbLine_getParamAtDist(self, *args)

    def getFirstDeriv(self, *args):
        return _ODA_Drawings.OdDbLine_getFirstDeriv(self, *args)

    def getSecondDeriv(self, *args):
        return _ODA_Drawings.OdDbLine_getSecondDeriv(self, *args)

    def getArea(self, *args):
        return _ODA_Drawings.OdDbLine_getArea(self, *args)

    def getEcs(self, *args):
        return _ODA_Drawings.OdDbLine_getEcs(self, *args)

    def getOdGeCurve(self, *args):
        return _ODA_Drawings.OdDbLine_getOdGeCurve(self, *args)

    def setFromOdGeCurve(self, *args):
        return _ODA_Drawings.OdDbLine_setFromOdGeCurve(self, *args)

    def reverseCurve(self, *args):
        return _ODA_Drawings.OdDbLine_reverseCurve(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLine

# Register OdDbLine in _ODA_Drawings:
_ODA_Drawings.OdDbLine_swigregister(OdDbLine)

def OdDbLine_cast(*args):
    return _ODA_Drawings.OdDbLine_cast(*args)

def OdDbLine_desc(*args):
    return _ODA_Drawings.OdDbLine_desc(*args)

def OdDbLine_createObject(*args):
    return _ODA_Drawings.OdDbLine_createObject(*args)

class OdDbEllipse(OdDbCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbEllipse_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbEllipse_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbEllipse_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbEllipse_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbEllipse_createObject(*args)

    def center(self, *args):
        return _ODA_Drawings.OdDbEllipse_center(self, *args)

    def setCenter(self, *args):
        return _ODA_Drawings.OdDbEllipse_setCenter(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbEllipse_normal(self, *args)

    def majorAxis(self, *args):
        return _ODA_Drawings.OdDbEllipse_majorAxis(self, *args)

    def minorAxis(self, *args):
        return _ODA_Drawings.OdDbEllipse_minorAxis(self, *args)

    def radiusRatio(self, *args):
        return _ODA_Drawings.OdDbEllipse_radiusRatio(self, *args)

    def setRadiusRatio(self, *args):
        return _ODA_Drawings.OdDbEllipse_setRadiusRatio(self, *args)

    def startAngle(self, *args):
        return _ODA_Drawings.OdDbEllipse_startAngle(self, *args)

    def setStartAngle(self, *args):
        return _ODA_Drawings.OdDbEllipse_setStartAngle(self, *args)

    def endAngle(self, *args):
        return _ODA_Drawings.OdDbEllipse_endAngle(self, *args)

    def setEndAngle(self, *args):
        return _ODA_Drawings.OdDbEllipse_setEndAngle(self, *args)

    def paramAtAngle(self, *args):
        return _ODA_Drawings.OdDbEllipse_paramAtAngle(self, *args)

    def angleAtParam(self, *args):
        return _ODA_Drawings.OdDbEllipse_angleAtParam(self, *args)

    def get(self, *args):
        return _ODA_Drawings.OdDbEllipse_get(self, *args)

    def set(self, *args):
        return _ODA_Drawings.OdDbEllipse_set(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbEllipse_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbEllipse_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbEllipse_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbEllipse_dxfOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbEllipse_subWorldDraw(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbEllipse_subGetClassID(self, *args)

    def isClosed(self, *args):
        return _ODA_Drawings.OdDbEllipse_isClosed(self, *args)

    def isPeriodic(self, *args):
        return _ODA_Drawings.OdDbEllipse_isPeriodic(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbEllipse_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbEllipse_getPlane(self, *args)

    def getStartParam(self, *args):
        return _ODA_Drawings.OdDbEllipse_getStartParam(self, *args)

    def setStartParam(self, *args):
        return _ODA_Drawings.OdDbEllipse_setStartParam(self, *args)

    def getEndParam(self, *args):
        return _ODA_Drawings.OdDbEllipse_getEndParam(self, *args)

    def setEndParam(self, *args):
        return _ODA_Drawings.OdDbEllipse_setEndParam(self, *args)

    def getStartPoint(self, *args):
        return _ODA_Drawings.OdDbEllipse_getStartPoint(self, *args)

    def getEndPoint(self, *args):
        return _ODA_Drawings.OdDbEllipse_getEndPoint(self, *args)

    def getPointAtParam(self, *args):
        return _ODA_Drawings.OdDbEllipse_getPointAtParam(self, *args)

    def getParamAtPoint(self, *args):
        return _ODA_Drawings.OdDbEllipse_getParamAtPoint(self, *args)

    def getDistAtParam(self, *args):
        return _ODA_Drawings.OdDbEllipse_getDistAtParam(self, *args)

    def getParamAtDist(self, *args):
        return _ODA_Drawings.OdDbEllipse_getParamAtDist(self, *args)

    def getFirstDeriv(self, *args):
        return _ODA_Drawings.OdDbEllipse_getFirstDeriv(self, *args)

    def getSecondDeriv(self, *args):
        return _ODA_Drawings.OdDbEllipse_getSecondDeriv(self, *args)

    def getArea(self, *args):
        return _ODA_Drawings.OdDbEllipse_getArea(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbEllipse_subTransformBy(self, *args)

    def getOdGeCurve(self, *args):
        return _ODA_Drawings.OdDbEllipse_getOdGeCurve(self, *args)

    def setFromOdGeCurve(self, *args):
        return _ODA_Drawings.OdDbEllipse_setFromOdGeCurve(self, *args)

    def reverseCurve(self, *args):
        return _ODA_Drawings.OdDbEllipse_reverseCurve(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbEllipse

# Register OdDbEllipse in _ODA_Drawings:
_ODA_Drawings.OdDbEllipse_swigregister(OdDbEllipse)

def OdDbEllipse_cast(*args):
    return _ODA_Drawings.OdDbEllipse_cast(*args)

def OdDbEllipse_desc(*args):
    return _ODA_Drawings.OdDbEllipse_desc(*args)

def OdDbEllipse_createObject(*args):
    return _ODA_Drawings.OdDbEllipse_createObject(*args)

class OdDbCircle(OdDbCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbCircle_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbCircle_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbCircle_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbCircle_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbCircle_createObject(*args)

    def center(self, *args):
        return _ODA_Drawings.OdDbCircle_center(self, *args)

    def setCenter(self, *args):
        return _ODA_Drawings.OdDbCircle_setCenter(self, *args)

    def radius(self, *args):
        return _ODA_Drawings.OdDbCircle_radius(self, *args)

    def setRadius(self, *args):
        return _ODA_Drawings.OdDbCircle_setRadius(self, *args)

    def thickness(self, *args):
        return _ODA_Drawings.OdDbCircle_thickness(self, *args)

    def setThickness(self, *args):
        return _ODA_Drawings.OdDbCircle_setThickness(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbCircle_normal(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDbCircle_setNormal(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbCircle_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbCircle_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbCircle_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbCircle_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbCircle_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbCircle_dxfOutFields_R12(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbCircle_subWorldDraw(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbCircle_subTransformBy(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbCircle_subGetTransformedCopy(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbCircle_subGetClassID(self, *args)

    def isClosed(self, *args):
        return _ODA_Drawings.OdDbCircle_isClosed(self, *args)

    def isPeriodic(self, *args):
        return _ODA_Drawings.OdDbCircle_isPeriodic(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbCircle_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbCircle_getPlane(self, *args)

    def getStartParam(self, *args):
        return _ODA_Drawings.OdDbCircle_getStartParam(self, *args)

    def getEndParam(self, *args):
        return _ODA_Drawings.OdDbCircle_getEndParam(self, *args)

    def getStartPoint(self, *args):
        return _ODA_Drawings.OdDbCircle_getStartPoint(self, *args)

    def getEndPoint(self, *args):
        return _ODA_Drawings.OdDbCircle_getEndPoint(self, *args)

    def getPointAtParam(self, *args):
        return _ODA_Drawings.OdDbCircle_getPointAtParam(self, *args)

    def getParamAtPoint(self, *args):
        return _ODA_Drawings.OdDbCircle_getParamAtPoint(self, *args)

    def getDistAtParam(self, *args):
        return _ODA_Drawings.OdDbCircle_getDistAtParam(self, *args)

    def getParamAtDist(self, *args):
        return _ODA_Drawings.OdDbCircle_getParamAtDist(self, *args)

    def getFirstDeriv(self, *args):
        return _ODA_Drawings.OdDbCircle_getFirstDeriv(self, *args)

    def getSecondDeriv(self, *args):
        return _ODA_Drawings.OdDbCircle_getSecondDeriv(self, *args)

    def getArea(self, *args):
        return _ODA_Drawings.OdDbCircle_getArea(self, *args)

    def getEcs(self, *args):
        return _ODA_Drawings.OdDbCircle_getEcs(self, *args)

    def getOdGeCurve(self, *args):
        return _ODA_Drawings.OdDbCircle_getOdGeCurve(self, *args)

    def setFromOdGeCurve(self, *args):
        return _ODA_Drawings.OdDbCircle_setFromOdGeCurve(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbCircle

# Register OdDbCircle in _ODA_Drawings:
_ODA_Drawings.OdDbCircle_swigregister(OdDbCircle)

def OdDbCircle_cast(*args):
    return _ODA_Drawings.OdDbCircle_cast(*args)

def OdDbCircle_desc(*args):
    return _ODA_Drawings.OdDbCircle_desc(*args)

def OdDbCircle_createObject(*args):
    return _ODA_Drawings.OdDbCircle_createObject(*args)

class OdDbArc(OdDbCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbArc_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbArc_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbArc_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbArc_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbArc_createObject(*args)

    def center(self, *args):
        return _ODA_Drawings.OdDbArc_center(self, *args)

    def setCenter(self, *args):
        return _ODA_Drawings.OdDbArc_setCenter(self, *args)

    def radius(self, *args):
        return _ODA_Drawings.OdDbArc_radius(self, *args)

    def setRadius(self, *args):
        return _ODA_Drawings.OdDbArc_setRadius(self, *args)

    def startAngle(self, *args):
        return _ODA_Drawings.OdDbArc_startAngle(self, *args)

    def setStartAngle(self, *args):
        return _ODA_Drawings.OdDbArc_setStartAngle(self, *args)

    def endAngle(self, *args):
        return _ODA_Drawings.OdDbArc_endAngle(self, *args)

    def setEndAngle(self, *args):
        return _ODA_Drawings.OdDbArc_setEndAngle(self, *args)

    def thickness(self, *args):
        return _ODA_Drawings.OdDbArc_thickness(self, *args)

    def setThickness(self, *args):
        return _ODA_Drawings.OdDbArc_setThickness(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbArc_normal(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDbArc_setNormal(self, *args)

    def getEcs(self, *args):
        return _ODA_Drawings.OdDbArc_getEcs(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbArc_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbArc_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbArc_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbArc_dxfOutFields(self, *args)

    def dxfInFields_R12(self, *args):
        return _ODA_Drawings.OdDbArc_dxfInFields_R12(self, *args)

    def dxfOutFields_R12(self, *args):
        return _ODA_Drawings.OdDbArc_dxfOutFields_R12(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbArc_subWorldDraw(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbArc_subTransformBy(self, *args)

    def subGetTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbArc_subGetTransformedCopy(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbArc_subGetClassID(self, *args)

    def isClosed(self, *args):
        return _ODA_Drawings.OdDbArc_isClosed(self, *args)

    def isPeriodic(self, *args):
        return _ODA_Drawings.OdDbArc_isPeriodic(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDbArc_isPlanar(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbArc_getPlane(self, *args)

    def getStartParam(self, *args):
        return _ODA_Drawings.OdDbArc_getStartParam(self, *args)

    def getEndParam(self, *args):
        return _ODA_Drawings.OdDbArc_getEndParam(self, *args)

    def getStartPoint(self, *args):
        return _ODA_Drawings.OdDbArc_getStartPoint(self, *args)

    def getEndPoint(self, *args):
        return _ODA_Drawings.OdDbArc_getEndPoint(self, *args)

    def getPointAtParam(self, *args):
        return _ODA_Drawings.OdDbArc_getPointAtParam(self, *args)

    def getParamAtPoint(self, *args):
        return _ODA_Drawings.OdDbArc_getParamAtPoint(self, *args)

    def getDistAtParam(self, *args):
        return _ODA_Drawings.OdDbArc_getDistAtParam(self, *args)

    def getParamAtDist(self, *args):
        return _ODA_Drawings.OdDbArc_getParamAtDist(self, *args)

    def getFirstDeriv(self, *args):
        return _ODA_Drawings.OdDbArc_getFirstDeriv(self, *args)

    def getSecondDeriv(self, *args):
        return _ODA_Drawings.OdDbArc_getSecondDeriv(self, *args)

    def getArea(self, *args):
        return _ODA_Drawings.OdDbArc_getArea(self, *args)

    def getOdGeCurve(self, *args):
        return _ODA_Drawings.OdDbArc_getOdGeCurve(self, *args)

    def setFromOdGeCurve(self, *args):
        return _ODA_Drawings.OdDbArc_setFromOdGeCurve(self, *args)

    def reverseCurve(self, *args):
        return _ODA_Drawings.OdDbArc_reverseCurve(self, *args)

    def subSubentPtr(self, *args):
        return _ODA_Drawings.OdDbArc_subSubentPtr(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbArc

# Register OdDbArc in _ODA_Drawings:
_ODA_Drawings.OdDbArc_swigregister(OdDbArc)

def OdDbArc_cast(*args):
    return _ODA_Drawings.OdDbArc_cast(*args)

def OdDbArc_desc(*args):
    return _ODA_Drawings.OdDbArc_desc(*args)

def OdDbArc_createObject(*args):
    return _ODA_Drawings.OdDbArc_createObject(*args)

class OdDbBlockTableRecord(OdDbSymbolTableRecord):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockTableRecord_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockTableRecord_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockTableRecord_createObject(*args)

    def appendOdDbEntity(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_appendOdDbEntity(self, *args)

    def newIterator(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_newIterator(self, *args)

    def comments(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_comments(self, *args)

    def setComments(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_setComments(self, *args)

    def pathName(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_pathName(self, *args)

    def setPathName(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_setPathName(self, *args)

    def origin(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_origin(self, *args)

    def setOrigin(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_setOrigin(self, *args)

    def openBlockBegin(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_openBlockBegin(self, *args)

    def openBlockEnd(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_openBlockEnd(self, *args)

    def hasAttributeDefinitions(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_hasAttributeDefinitions(self, *args)

    def isAnonymous(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_isAnonymous(self, *args)

    def isFromExternalReference(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_isFromExternalReference(self, *args)

    def isFromOverlayReference(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_isFromOverlayReference(self, *args)

    def setIsFromOverlayReference(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_setIsFromOverlayReference(self, *args)

    def isLayout(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_isLayout(self, *args)

    def getLayoutId(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_getLayoutId(self, *args)

    def setLayoutId(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_setLayoutId(self, *args)

    def getBlockReferenceIds(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_getBlockReferenceIds(self, *args)

    def getErasedBlockReferenceIds(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_getErasedBlockReferenceIds(self, *args)

    def isUnloaded(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_isUnloaded(self, *args)

    def setIsUnloaded(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_setIsUnloaded(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_subWorldDraw(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_subSetAttributes(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_dxfOutFields(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_subClose(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_subGetClassID(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_subErase(self, *args)

    def subHandOverTo(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_subHandOverTo(self, *args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_copyFrom(self, *args)

    def xrefDatabase(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_xrefDatabase(self, *args)

    def xrefStatus(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_xrefStatus(self, *args)

    def hasPreviewIcon(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_hasPreviewIcon(self, *args)

    def getPreviewIcon(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_getPreviewIcon(self, *args)

    def setPreviewIcon(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_setPreviewIcon(self, *args)

    def getSortentsTable(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_getSortentsTable(self, *args)

    def drawable(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_drawable(self, *args)

    def getGeomExtents(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_getGeomExtents(self, *args)

    def geomExtentsBestFit(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_geomExtentsBestFit(self, *args)

    def assumeOwnershipOf(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_assumeOwnershipOf(self, *args)
    kAny = _ODA_Drawings.OdDbBlockTableRecord_kAny
    kUniform = _ODA_Drawings.OdDbBlockTableRecord_kUniform

    def blockScaling(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_blockScaling(self, *args)

    def setBlockScaling(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_setBlockScaling(self, *args)

    def setExplodable(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_setExplodable(self, *args)

    def explodable(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_explodable(self, *args)

    def setBlockInsertUnits(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_setBlockInsertUnits(self, *args)

    def blockInsertUnits(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_blockInsertUnits(self, *args)

    def applyPartialUndo(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_applyPartialUndo(self, *args)

    def postProcessAnnotativeBTR(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_postProcessAnnotativeBTR(self, *args)

    def addAnnoScalestoBlkRefs(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecord_addAnnoScalestoBlkRefs(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockTableRecord

# Register OdDbBlockTableRecord in _ODA_Drawings:
_ODA_Drawings.OdDbBlockTableRecord_swigregister(OdDbBlockTableRecord)

def OdDbBlockTableRecord_cast(*args):
    return _ODA_Drawings.OdDbBlockTableRecord_cast(*args)

def OdDbBlockTableRecord_desc(*args):
    return _ODA_Drawings.OdDbBlockTableRecord_desc(*args)

def OdDbBlockTableRecord_createObject(*args):
    return _ODA_Drawings.OdDbBlockTableRecord_createObject(*args)

class OdDbDatabaseReactor(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDatabaseReactor_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDatabaseReactor_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDatabaseReactor_createObject(*args)

    def objectAppended(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_objectAppended(self, *args)

    def objectUnAppended(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_objectUnAppended(self, *args)

    def objectReAppended(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_objectReAppended(self, *args)

    def objectOpenedForModify(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_objectOpenedForModify(self, *args)

    def objectModified(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_objectModified(self, *args)

    def objectErased(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_objectErased(self, *args)

    def headerSysVarWillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVarWillChange(self, *args)

    def headerSysVarChanged(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVarChanged(self, *args)

    def proxyResurrectionCompleted(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_proxyResurrectionCompleted(self, *args)

    def goodbye(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_goodbye(self, *args)

    def headerSysVar_ANGBASE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_ANGBASE_WillChange(self, *args)

    def headerSysVar_ANGDIR_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_ANGDIR_WillChange(self, *args)

    def headerSysVar_ORTHOMODE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_ORTHOMODE_WillChange(self, *args)

    def headerSysVar_REGENMODE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_REGENMODE_WillChange(self, *args)

    def headerSysVar_FILLMODE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_FILLMODE_WillChange(self, *args)

    def headerSysVar_QTEXTMODE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_QTEXTMODE_WillChange(self, *args)

    def headerSysVar_MIRRTEXT_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_MIRRTEXT_WillChange(self, *args)

    def headerSysVar_LTSCALE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LTSCALE_WillChange(self, *args)

    def headerSysVar_ATTMODE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_ATTMODE_WillChange(self, *args)

    def headerSysVar_TRACEWID_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TRACEWID_WillChange(self, *args)

    def headerSysVar_CLAYER_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CLAYER_WillChange(self, *args)

    def headerSysVar_CELTYPE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CELTYPE_WillChange(self, *args)

    def headerSysVar_CECOLOR_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CECOLOR_WillChange(self, *args)

    def headerSysVar_CELTSCALE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CELTSCALE_WillChange(self, *args)

    def headerSysVar_CHAMFERA_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CHAMFERA_WillChange(self, *args)

    def headerSysVar_CHAMFERB_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CHAMFERB_WillChange(self, *args)

    def headerSysVar_CHAMFERC_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CHAMFERC_WillChange(self, *args)

    def headerSysVar_CHAMFERD_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CHAMFERD_WillChange(self, *args)

    def headerSysVar_DISPSILH_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DISPSILH_WillChange(self, *args)

    def headerSysVar_DIMSTYLE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DIMSTYLE_WillChange(self, *args)

    def headerSysVar_DIMASO_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DIMASO_WillChange(self, *args)

    def headerSysVar_DIMSHO_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DIMSHO_WillChange(self, *args)

    def headerSysVar_LUNITS_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LUNITS_WillChange(self, *args)

    def headerSysVar_LUPREC_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LUPREC_WillChange(self, *args)

    def headerSysVar_SKETCHINC_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SKETCHINC_WillChange(self, *args)

    def headerSysVar_FILLETRAD_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_FILLETRAD_WillChange(self, *args)

    def headerSysVar_AUNITS_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_AUNITS_WillChange(self, *args)

    def headerSysVar_AUPREC_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_AUPREC_WillChange(self, *args)

    def headerSysVar_THICKNESS_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_THICKNESS_WillChange(self, *args)

    def headerSysVar_SKPOLY_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SKPOLY_WillChange(self, *args)

    def headerSysVar_PDMODE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PDMODE_WillChange(self, *args)

    def headerSysVar_PDSIZE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PDSIZE_WillChange(self, *args)

    def headerSysVar_PLINEWID_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PLINEWID_WillChange(self, *args)

    def headerSysVar_SPLFRAME_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SPLFRAME_WillChange(self, *args)

    def headerSysVar_SPLINETYPE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SPLINETYPE_WillChange(self, *args)

    def headerSysVar_SPLINESEGS_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SPLINESEGS_WillChange(self, *args)

    def headerSysVar_SURFTAB1_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SURFTAB1_WillChange(self, *args)

    def headerSysVar_SURFTAB2_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SURFTAB2_WillChange(self, *args)

    def headerSysVar_SURFTYPE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SURFTYPE_WillChange(self, *args)

    def headerSysVar_SURFU_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SURFU_WillChange(self, *args)

    def headerSysVar_SURFV_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SURFV_WillChange(self, *args)

    def headerSysVar_USERI1_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERI1_WillChange(self, *args)

    def headerSysVar_USERI2_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERI2_WillChange(self, *args)

    def headerSysVar_USERI3_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERI3_WillChange(self, *args)

    def headerSysVar_USERI4_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERI4_WillChange(self, *args)

    def headerSysVar_USERI5_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERI5_WillChange(self, *args)

    def headerSysVar_USERR1_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERR1_WillChange(self, *args)

    def headerSysVar_USERR2_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERR2_WillChange(self, *args)

    def headerSysVar_USERR3_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERR3_WillChange(self, *args)

    def headerSysVar_USERR4_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERR4_WillChange(self, *args)

    def headerSysVar_PDFUNDERLAYSHADEDMODE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PDFUNDERLAYSHADEDMODE_WillChange(self, *args)

    def headerSysVar_USERR5_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERR5_WillChange(self, *args)

    def headerSysVar_WORLDVIEW_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_WORLDVIEW_WillChange(self, *args)

    def headerSysVar_SHADEDGE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SHADEDGE_WillChange(self, *args)

    def headerSysVar_SHADEDIF_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SHADEDIF_WillChange(self, *args)

    def headerSysVar_MAXACTVP_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_MAXACTVP_WillChange(self, *args)

    def headerSysVar_UNITMODE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UNITMODE_WillChange(self, *args)

    def headerSysVar_VISRETAIN_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VISRETAIN_WillChange(self, *args)

    def headerSysVar_PLINEGEN_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PLINEGEN_WillChange(self, *args)

    def headerSysVar_PSLTSCALE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PSLTSCALE_WillChange(self, *args)

    def headerSysVar_TREEDEPTH_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TREEDEPTH_WillChange(self, *args)

    def headerSysVar_CMLSTYLE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CMLSTYLE_WillChange(self, *args)

    def headerSysVar_CMLJUST_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CMLJUST_WillChange(self, *args)

    def headerSysVar_CMLSCALE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CMLSCALE_WillChange(self, *args)

    def headerSysVar_PROXYGRAPHICS_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PROXYGRAPHICS_WillChange(self, *args)

    def headerSysVar_MEASUREMENT_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_MEASUREMENT_WillChange(self, *args)

    def headerSysVar_CELWEIGHT_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CELWEIGHT_WillChange(self, *args)

    def headerSysVar_LWDISPLAY_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LWDISPLAY_WillChange(self, *args)

    def headerSysVar_INSUNITS_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_INSUNITS_WillChange(self, *args)

    def headerSysVar_TSTACKALIGN_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TSTACKALIGN_WillChange(self, *args)

    def headerSysVar_TSTACKSIZE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TSTACKSIZE_WillChange(self, *args)

    def headerSysVar_HYPERLINKBASE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_HYPERLINKBASE_WillChange(self, *args)

    def headerSysVar_XEDIT_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_XEDIT_WillChange(self, *args)

    def headerSysVar_EXTNAMES_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_EXTNAMES_WillChange(self, *args)

    def headerSysVar_PSVPSCALE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PSVPSCALE_WillChange(self, *args)

    def headerSysVar_OLESTARTUP_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_OLESTARTUP_WillChange(self, *args)

    def headerSysVar_PELLIPSE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PELLIPSE_WillChange(self, *args)

    def headerSysVar_ISOLINES_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_ISOLINES_WillChange(self, *args)

    def headerSysVar_TEXTQLTY_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TEXTQLTY_WillChange(self, *args)

    def headerSysVar_FACETRES_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_FACETRES_WillChange(self, *args)

    def headerSysVar_PUCSBASE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSBASE_WillChange(self, *args)

    def headerSysVar_UCSBASE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSBASE_WillChange(self, *args)

    def headerSysVar_SOLIDHIST_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SOLIDHIST_WillChange(self, *args)

    def headerSysVar_SHOWHIST_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SHOWHIST_WillChange(self, *args)

    def headerSysVar_LOFTPARAM_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LOFTPARAM_WillChange(self, *args)

    def headerSysVar_LOFTNORMALS_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LOFTNORMALS_WillChange(self, *args)

    def headerSysVar_LOFTANG1_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LOFTANG1_WillChange(self, *args)

    def headerSysVar_LOFTANG2_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LOFTANG2_WillChange(self, *args)

    def headerSysVar_LOFTMAG1_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LOFTMAG1_WillChange(self, *args)

    def headerSysVar_LOFTMAG2_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LOFTMAG2_WillChange(self, *args)

    def headerSysVar_LATITUDE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LATITUDE_WillChange(self, *args)

    def headerSysVar_LONGITUDE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LONGITUDE_WillChange(self, *args)

    def headerSysVar_NORTHDIRECTION_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_NORTHDIRECTION_WillChange(self, *args)

    def headerSysVar_TIMEZONE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TIMEZONE_WillChange(self, *args)

    def headerSysVar_LIGHTGLYPHDISPLAY_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LIGHTGLYPHDISPLAY_WillChange(self, *args)

    def headerSysVar_TILEMODELIGHTSYNCH_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TILEMODELIGHTSYNCH_WillChange(self, *args)

    def headerSysVar_INTERFERECOLOR_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_INTERFERECOLOR_WillChange(self, *args)

    def headerSysVar_INTERFEREOBJVS_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_INTERFEREOBJVS_WillChange(self, *args)

    def headerSysVar_INTERFEREVPVS_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_INTERFEREVPVS_WillChange(self, *args)

    def headerSysVar_DRAGVS_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DRAGVS_WillChange(self, *args)

    def headerSysVar_CSHADOW_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CSHADOW_WillChange(self, *args)

    def headerSysVar_SHADOWPLANELOCATION_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SHADOWPLANELOCATION_WillChange(self, *args)

    def headerSysVar_CAMERADISPLAY_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CAMERADISPLAY_WillChange(self, *args)

    def headerSysVar_LENSLENGTH_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LENSLENGTH_WillChange(self, *args)

    def headerSysVar_CAMERAHEIGHT_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CAMERAHEIGHT_WillChange(self, *args)

    def headerSysVar_STEPSPERSEC_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_STEPSPERSEC_WillChange(self, *args)

    def headerSysVar_STEPSIZE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_STEPSIZE_WillChange(self, *args)

    def headerSysVar_3DDWFPREC_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_3DDWFPREC_WillChange(self, *args)

    def headerSysVar_CMATERIAL_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CMATERIAL_WillChange(self, *args)

    def headerSysVar_REALWORLDSCALE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_REALWORLDSCALE_WillChange(self, *args)

    def headerSysVar_DYNCONSTRAINTDISPLAY_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DYNCONSTRAINTDISPLAY_WillChange(self, *args)

    def headerSysVar_INSBASE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_INSBASE_WillChange(self, *args)

    def headerSysVar_EXTMIN_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_EXTMIN_WillChange(self, *args)

    def headerSysVar_EXTMAX_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_EXTMAX_WillChange(self, *args)

    def headerSysVar_LIMMIN_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LIMMIN_WillChange(self, *args)

    def headerSysVar_LIMMAX_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LIMMAX_WillChange(self, *args)

    def headerSysVar_MENUNAME_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_MENUNAME_WillChange(self, *args)

    def headerSysVar_ELEVATION_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_ELEVATION_WillChange(self, *args)

    def headerSysVar_PELEVATION_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PELEVATION_WillChange(self, *args)

    def headerSysVar_LIMCHECK_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LIMCHECK_WillChange(self, *args)

    def headerSysVar_USRTIMER_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USRTIMER_WillChange(self, *args)

    def headerSysVar_PINSBASE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PINSBASE_WillChange(self, *args)

    def headerSysVar_PLIMCHECK_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PLIMCHECK_WillChange(self, *args)

    def headerSysVar_PEXTMIN_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PEXTMIN_WillChange(self, *args)

    def headerSysVar_PEXTMAX_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PEXTMAX_WillChange(self, *args)

    def headerSysVar_PLIMMIN_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PLIMMIN_WillChange(self, *args)

    def headerSysVar_PLIMMAX_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PLIMMAX_WillChange(self, *args)

    def headerSysVar_UCSNAME_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSNAME_WillChange(self, *args)

    def headerSysVar_PUCSNAME_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSNAME_WillChange(self, *args)

    def headerSysVar_ENDCAPS_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_ENDCAPS_WillChange(self, *args)

    def headerSysVar_JOINSTYLE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_JOINSTYLE_WillChange(self, *args)

    def headerSysVar_STYLESHEET_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_STYLESHEET_WillChange(self, *args)

    def headerSysVar_CEPSNTYPE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CEPSNTYPE_WillChange(self, *args)

    def headerSysVar_CEPSNID_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CEPSNID_WillChange(self, *args)

    def headerSysVar_FINGERPRINTGUID_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_FINGERPRINTGUID_WillChange(self, *args)

    def headerSysVar_VERSIONGUID_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VERSIONGUID_WillChange(self, *args)

    def headerSysVar_PUCSORTHOVIEW_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSORTHOVIEW_WillChange(self, *args)

    def headerSysVar_PUCSORGTOP_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSORGTOP_WillChange(self, *args)

    def headerSysVar_PUCSORGBOTTOM_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSORGBOTTOM_WillChange(self, *args)

    def headerSysVar_PUCSORGLEFT_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSORGLEFT_WillChange(self, *args)

    def headerSysVar_PUCSORGRIGHT_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSORGRIGHT_WillChange(self, *args)

    def headerSysVar_PUCSORGFRONT_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSORGFRONT_WillChange(self, *args)

    def headerSysVar_PUCSORGBACK_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSORGBACK_WillChange(self, *args)

    def headerSysVar_UCSORTHOVIEW_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSORTHOVIEW_WillChange(self, *args)

    def headerSysVar_UCSORGTOP_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSORGTOP_WillChange(self, *args)

    def headerSysVar_UCSORGBOTTOM_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSORGBOTTOM_WillChange(self, *args)

    def headerSysVar_UCSORGLEFT_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSORGLEFT_WillChange(self, *args)

    def headerSysVar_UCSORGRIGHT_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSORGRIGHT_WillChange(self, *args)

    def headerSysVar_UCSORGFRONT_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSORGFRONT_WillChange(self, *args)

    def headerSysVar_UCSORGBACK_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSORGBACK_WillChange(self, *args)

    def headerSysVar_DGNFRAME_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DGNFRAME_WillChange(self, *args)

    def headerSysVar_DBCSTATE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DBCSTATE_WillChange(self, *args)

    def headerSysVar_INTERSECTIONCOLOR_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_INTERSECTIONCOLOR_WillChange(self, *args)

    def headerSysVar_INTERSECTIONDISPLAY_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_INTERSECTIONDISPLAY_WillChange(self, *args)

    def headerSysVar_HALOGAP_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_HALOGAP_WillChange(self, *args)

    def headerSysVar_OBSCUREDCOLOR_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_OBSCUREDCOLOR_WillChange(self, *args)

    def headerSysVar_OBSCUREDLTYPE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_OBSCUREDLTYPE_WillChange(self, *args)

    def headerSysVar_INDEXCTL_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_INDEXCTL_WillChange(self, *args)

    def headerSysVar_PROJECTNAME_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PROJECTNAME_WillChange(self, *args)

    def headerSysVar_SORTENTS_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SORTENTS_WillChange(self, *args)

    def headerSysVar_DIMASSOC_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DIMASSOC_WillChange(self, *args)

    def headerSysVar_HIDETEXT_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_HIDETEXT_WillChange(self, *args)

    def headerSysVar_PSOLWIDTH_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PSOLWIDTH_WillChange(self, *args)

    def headerSysVar_PSOLHEIGHT_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PSOLHEIGHT_WillChange(self, *args)

    def headerSysVar_CTABLESTYLE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CTABLESTYLE_WillChange(self, *args)

    def headerSysVar_ANNOALLVISIBLE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_ANNOALLVISIBLE_WillChange(self, *args)

    def headerSysVar_ANNOTATIVEDWG_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_ANNOTATIVEDWG_WillChange(self, *args)

    def headerSysVar_MSLTSCALE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_MSLTSCALE_WillChange(self, *args)

    def headerSysVar_LAYEREVAL_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LAYEREVAL_WillChange(self, *args)

    def headerSysVar_LAYERNOTIFY_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LAYERNOTIFY_WillChange(self, *args)

    def headerSysVar_LIGHTINGUNITS_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LIGHTINGUNITS_WillChange(self, *args)

    def headerSysVar_LIGHTSINBLOCKS_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LIGHTSINBLOCKS_WillChange(self, *args)

    def headerSysVar_DRAWORDERCTL_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DRAWORDERCTL_WillChange(self, *args)

    def headerSysVar_HPINHERIT_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_HPINHERIT_WillChange(self, *args)

    def headerSysVar_HPORIGIN_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_HPORIGIN_WillChange(self, *args)

    def headerSysVar_FIELDEVAL_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_FIELDEVAL_WillChange(self, *args)

    def headerSysVar_MSOLESCALE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_MSOLESCALE_WillChange(self, *args)

    def headerSysVar_UPDATETHUMBNAIL_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UPDATETHUMBNAIL_WillChange(self, *args)

    def headerSysVar_DXEVAL_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DXEVAL_WillChange(self, *args)

    def headerSysVar_GEOLATLONGFORMAT_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_GEOLATLONGFORMAT_WillChange(self, *args)

    def headerSysVar_GEOMARKERVISIBILITY_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_GEOMARKERVISIBILITY_WillChange(self, *args)

    def headerSysVar_PREVIEWTYPE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PREVIEWTYPE_WillChange(self, *args)

    def headerSysVar_EXPORTMODELSPACE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_EXPORTMODELSPACE_WillChange(self, *args)

    def headerSysVar_EXPORTPAPERSPACE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_EXPORTPAPERSPACE_WillChange(self, *args)

    def headerSysVar_EXPORTPAGESETUP_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_EXPORTPAGESETUP_WillChange(self, *args)

    def headerSysVar_MESHTYPE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_MESHTYPE_WillChange(self, *args)

    def headerSysVar_SKYSTATUS_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SKYSTATUS_WillChange(self, *args)

    def headerSysVar_VSACURVATUREHIGH_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSACURVATUREHIGH_WillChange(self, *args)

    def headerSysVar_VSACURVATURELOW_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSACURVATURELOW_WillChange(self, *args)

    def headerSysVar_VSACURVATURETYPE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSACURVATURETYPE_WillChange(self, *args)

    def headerSysVar_VSADRAFTANGLEHIGH_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSADRAFTANGLEHIGH_WillChange(self, *args)

    def headerSysVar_VSADRAFTANGLELOW_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSADRAFTANGLELOW_WillChange(self, *args)

    def headerSysVar_VSAZEBRACOLOR1_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSAZEBRACOLOR1_WillChange(self, *args)

    def headerSysVar_VSAZEBRACOLOR2_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSAZEBRACOLOR2_WillChange(self, *args)

    def headerSysVar_VSAZEBRADIRECTION_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSAZEBRADIRECTION_WillChange(self, *args)

    def headerSysVar_VSAZEBRASIZE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSAZEBRASIZE_WillChange(self, *args)

    def headerSysVar_VSAZEBRATYPE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSAZEBRATYPE_WillChange(self, *args)

    def headerSysVar_HPLAYER_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_HPLAYER_WillChange(self, *args)

    def headerSysVar_MIRRHATCH_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_MIRRHATCH_WillChange(self, *args)

    def headerSysVar_HPTRANSPARENCY_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_HPTRANSPARENCY_WillChange(self, *args)

    def headerSysVar_HPCOLOR_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_HPCOLOR_WillChange(self, *args)

    def headerSysVar_HPBACKGROUNDCOLOR_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_HPBACKGROUNDCOLOR_WillChange(self, *args)

    def headerSysVar_CETRANSPARENCY_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CETRANSPARENCY_WillChange(self, *args)

    def headerSysVar_CVIEWDETAILSTYLE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CVIEWDETAILSTYLE_WillChange(self, *args)

    def headerSysVar_CVIEWSECTIONSTYLE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CVIEWSECTIONSTYLE_WillChange(self, *args)

    def headerSysVar_WIPEOUTFRAME_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_WIPEOUTFRAME_WillChange(self, *args)

    def headerSysVar_POINTCLOUDCLIPFRAME_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_POINTCLOUDCLIPFRAME_WillChange(self, *args)

    def headerSysVar_MLEADERSCALE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_MLEADERSCALE_WillChange(self, *args)

    def headerSysVar_VIEWUPDATEAUTO_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VIEWUPDATEAUTO_WillChange(self, *args)

    def headerSysVar_GEOMARKPOSITIONSIZE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_GEOMARKPOSITIONSIZE_WillChange(self, *args)

    def headerSysVar_POINTCLOUDPOINTSIZE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_POINTCLOUDPOINTSIZE_WillChange(self, *args)

    def headerSysVar_DIMLAYER_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DIMLAYER_WillChange(self, *args)

    def headerSysVar_SECTIONOFFSETINC_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SECTIONOFFSETINC_WillChange(self, *args)

    def headerSysVar_SECTIONTHICKNESSINC_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SECTIONTHICKNESSINC_WillChange(self, *args)

    def headerSysVar_XREFOVERRIDE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_XREFOVERRIDE_WillChange(self, *args)

    def headerSysVar_CENTERCROSSGAP_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CENTERCROSSGAP_WillChange(self, *args)

    def headerSysVar_CENTERCROSSSIZE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CENTERCROSSSIZE_WillChange(self, *args)

    def headerSysVar_CENTEREXE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CENTEREXE_WillChange(self, *args)

    def headerSysVar_CENTERLAYER_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CENTERLAYER_WillChange(self, *args)

    def headerSysVar_CENTERLTSCALE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CENTERLTSCALE_WillChange(self, *args)

    def headerSysVar_CENTERLTYPE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CENTERLTYPE_WillChange(self, *args)

    def headerSysVar_CENTERLTYPEFILE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CENTERLTYPEFILE_WillChange(self, *args)

    def headerSysVar_CENTERMARKEXE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CENTERMARKEXE_WillChange(self, *args)

    def headerSysVar_CANNOSCALE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CANNOSCALE_WillChange(self, *args)

    def headerSysVar_CMLEADERSTYLE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CMLEADERSTYLE_WillChange(self, *args)

    def headerSysVar_TEXTSIZE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TEXTSIZE_WillChange(self, *args)

    def headerSysVar_TEXTSTYLE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TEXTSTYLE_WillChange(self, *args)

    def headerSysVar_TILEMODE_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TILEMODE_WillChange(self, *args)

    def headerSysVar_DWFFRAME_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DWFFRAME_WillChange(self, *args)

    def headerSysVar_FRAME_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_FRAME_WillChange(self, *args)

    def headerSysVar_PDFFRAME_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PDFFRAME_WillChange(self, *args)

    def headerSysVar_XCLIPFRAME_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_XCLIPFRAME_WillChange(self, *args)

    def headerSysVar_ANGBASE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_ANGBASE_Changed(self, *args)

    def headerSysVar_ANGDIR_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_ANGDIR_Changed(self, *args)

    def headerSysVar_ORTHOMODE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_ORTHOMODE_Changed(self, *args)

    def headerSysVar_REGENMODE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_REGENMODE_Changed(self, *args)

    def headerSysVar_FILLMODE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_FILLMODE_Changed(self, *args)

    def headerSysVar_QTEXTMODE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_QTEXTMODE_Changed(self, *args)

    def headerSysVar_MIRRTEXT_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_MIRRTEXT_Changed(self, *args)

    def headerSysVar_LTSCALE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LTSCALE_Changed(self, *args)

    def headerSysVar_ATTMODE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_ATTMODE_Changed(self, *args)

    def headerSysVar_TRACEWID_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TRACEWID_Changed(self, *args)

    def headerSysVar_CLAYER_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CLAYER_Changed(self, *args)

    def headerSysVar_CELTYPE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CELTYPE_Changed(self, *args)

    def headerSysVar_CECOLOR_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CECOLOR_Changed(self, *args)

    def headerSysVar_CELTSCALE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CELTSCALE_Changed(self, *args)

    def headerSysVar_CHAMFERA_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CHAMFERA_Changed(self, *args)

    def headerSysVar_CHAMFERB_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CHAMFERB_Changed(self, *args)

    def headerSysVar_CHAMFERC_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CHAMFERC_Changed(self, *args)

    def headerSysVar_CHAMFERD_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CHAMFERD_Changed(self, *args)

    def headerSysVar_DISPSILH_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DISPSILH_Changed(self, *args)

    def headerSysVar_DIMSTYLE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DIMSTYLE_Changed(self, *args)

    def headerSysVar_DIMASO_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DIMASO_Changed(self, *args)

    def headerSysVar_DIMSHO_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DIMSHO_Changed(self, *args)

    def headerSysVar_LUNITS_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LUNITS_Changed(self, *args)

    def headerSysVar_LUPREC_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LUPREC_Changed(self, *args)

    def headerSysVar_SKETCHINC_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SKETCHINC_Changed(self, *args)

    def headerSysVar_FILLETRAD_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_FILLETRAD_Changed(self, *args)

    def headerSysVar_AUNITS_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_AUNITS_Changed(self, *args)

    def headerSysVar_AUPREC_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_AUPREC_Changed(self, *args)

    def headerSysVar_THICKNESS_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_THICKNESS_Changed(self, *args)

    def headerSysVar_SKPOLY_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SKPOLY_Changed(self, *args)

    def headerSysVar_PDMODE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PDMODE_Changed(self, *args)

    def headerSysVar_PDSIZE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PDSIZE_Changed(self, *args)

    def headerSysVar_PLINEWID_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PLINEWID_Changed(self, *args)

    def headerSysVar_SPLFRAME_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SPLFRAME_Changed(self, *args)

    def headerSysVar_SPLINETYPE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SPLINETYPE_Changed(self, *args)

    def headerSysVar_SPLINESEGS_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SPLINESEGS_Changed(self, *args)

    def headerSysVar_SURFTAB1_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SURFTAB1_Changed(self, *args)

    def headerSysVar_SURFTAB2_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SURFTAB2_Changed(self, *args)

    def headerSysVar_SURFTYPE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SURFTYPE_Changed(self, *args)

    def headerSysVar_SURFU_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SURFU_Changed(self, *args)

    def headerSysVar_SURFV_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SURFV_Changed(self, *args)

    def headerSysVar_USERI1_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERI1_Changed(self, *args)

    def headerSysVar_USERI2_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERI2_Changed(self, *args)

    def headerSysVar_USERI3_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERI3_Changed(self, *args)

    def headerSysVar_USERI4_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERI4_Changed(self, *args)

    def headerSysVar_USERI5_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERI5_Changed(self, *args)

    def headerSysVar_USERR1_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERR1_Changed(self, *args)

    def headerSysVar_USERR2_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERR2_Changed(self, *args)

    def headerSysVar_USERR3_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERR3_Changed(self, *args)

    def headerSysVar_USERR4_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERR4_Changed(self, *args)

    def headerSysVar_PDFUNDERLAYSHADEDMODE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PDFUNDERLAYSHADEDMODE_Changed(self, *args)

    def headerSysVar_USERR5_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USERR5_Changed(self, *args)

    def headerSysVar_WORLDVIEW_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_WORLDVIEW_Changed(self, *args)

    def headerSysVar_SHADEDGE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SHADEDGE_Changed(self, *args)

    def headerSysVar_SHADEDIF_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SHADEDIF_Changed(self, *args)

    def headerSysVar_MAXACTVP_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_MAXACTVP_Changed(self, *args)

    def headerSysVar_UNITMODE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UNITMODE_Changed(self, *args)

    def headerSysVar_VISRETAIN_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VISRETAIN_Changed(self, *args)

    def headerSysVar_PLINEGEN_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PLINEGEN_Changed(self, *args)

    def headerSysVar_PSLTSCALE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PSLTSCALE_Changed(self, *args)

    def headerSysVar_TREEDEPTH_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TREEDEPTH_Changed(self, *args)

    def headerSysVar_CMLSTYLE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CMLSTYLE_Changed(self, *args)

    def headerSysVar_CMLJUST_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CMLJUST_Changed(self, *args)

    def headerSysVar_CMLSCALE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CMLSCALE_Changed(self, *args)

    def headerSysVar_PROXYGRAPHICS_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PROXYGRAPHICS_Changed(self, *args)

    def headerSysVar_MEASUREMENT_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_MEASUREMENT_Changed(self, *args)

    def headerSysVar_CELWEIGHT_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CELWEIGHT_Changed(self, *args)

    def headerSysVar_LWDISPLAY_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LWDISPLAY_Changed(self, *args)

    def headerSysVar_INSUNITS_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_INSUNITS_Changed(self, *args)

    def headerSysVar_TSTACKALIGN_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TSTACKALIGN_Changed(self, *args)

    def headerSysVar_TSTACKSIZE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TSTACKSIZE_Changed(self, *args)

    def headerSysVar_HYPERLINKBASE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_HYPERLINKBASE_Changed(self, *args)

    def headerSysVar_XEDIT_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_XEDIT_Changed(self, *args)

    def headerSysVar_EXTNAMES_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_EXTNAMES_Changed(self, *args)

    def headerSysVar_PSVPSCALE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PSVPSCALE_Changed(self, *args)

    def headerSysVar_OLESTARTUP_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_OLESTARTUP_Changed(self, *args)

    def headerSysVar_PELLIPSE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PELLIPSE_Changed(self, *args)

    def headerSysVar_ISOLINES_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_ISOLINES_Changed(self, *args)

    def headerSysVar_TEXTQLTY_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TEXTQLTY_Changed(self, *args)

    def headerSysVar_FACETRES_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_FACETRES_Changed(self, *args)

    def headerSysVar_PUCSBASE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSBASE_Changed(self, *args)

    def headerSysVar_UCSBASE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSBASE_Changed(self, *args)

    def headerSysVar_SOLIDHIST_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SOLIDHIST_Changed(self, *args)

    def headerSysVar_SHOWHIST_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SHOWHIST_Changed(self, *args)

    def headerSysVar_LOFTPARAM_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LOFTPARAM_Changed(self, *args)

    def headerSysVar_LOFTNORMALS_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LOFTNORMALS_Changed(self, *args)

    def headerSysVar_LOFTANG1_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LOFTANG1_Changed(self, *args)

    def headerSysVar_LOFTANG2_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LOFTANG2_Changed(self, *args)

    def headerSysVar_LOFTMAG1_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LOFTMAG1_Changed(self, *args)

    def headerSysVar_LOFTMAG2_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LOFTMAG2_Changed(self, *args)

    def headerSysVar_LATITUDE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LATITUDE_Changed(self, *args)

    def headerSysVar_LONGITUDE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LONGITUDE_Changed(self, *args)

    def headerSysVar_NORTHDIRECTION_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_NORTHDIRECTION_Changed(self, *args)

    def headerSysVar_TIMEZONE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TIMEZONE_Changed(self, *args)

    def headerSysVar_LIGHTGLYPHDISPLAY_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LIGHTGLYPHDISPLAY_Changed(self, *args)

    def headerSysVar_TILEMODELIGHTSYNCH_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TILEMODELIGHTSYNCH_Changed(self, *args)

    def headerSysVar_INTERFERECOLOR_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_INTERFERECOLOR_Changed(self, *args)

    def headerSysVar_INTERFEREOBJVS_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_INTERFEREOBJVS_Changed(self, *args)

    def headerSysVar_INTERFEREVPVS_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_INTERFEREVPVS_Changed(self, *args)

    def headerSysVar_DRAGVS_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DRAGVS_Changed(self, *args)

    def headerSysVar_CSHADOW_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CSHADOW_Changed(self, *args)

    def headerSysVar_SHADOWPLANELOCATION_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SHADOWPLANELOCATION_Changed(self, *args)

    def headerSysVar_CAMERADISPLAY_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CAMERADISPLAY_Changed(self, *args)

    def headerSysVar_LENSLENGTH_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LENSLENGTH_Changed(self, *args)

    def headerSysVar_CAMERAHEIGHT_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CAMERAHEIGHT_Changed(self, *args)

    def headerSysVar_STEPSPERSEC_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_STEPSPERSEC_Changed(self, *args)

    def headerSysVar_STEPSIZE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_STEPSIZE_Changed(self, *args)

    def headerSysVar_3DDWFPREC_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_3DDWFPREC_Changed(self, *args)

    def headerSysVar_CMATERIAL_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CMATERIAL_Changed(self, *args)

    def headerSysVar_REALWORLDSCALE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_REALWORLDSCALE_Changed(self, *args)

    def headerSysVar_DYNCONSTRAINTDISPLAY_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DYNCONSTRAINTDISPLAY_Changed(self, *args)

    def headerSysVar_TDUCREATE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TDUCREATE_Changed(self, *args)

    def headerSysVar_TDUUPDATE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TDUUPDATE_Changed(self, *args)

    def headerSysVar_TDINDWG_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TDINDWG_Changed(self, *args)

    def headerSysVar_TDUSRTIMER_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TDUSRTIMER_Changed(self, *args)

    def headerSysVar_PSTYLEMODE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PSTYLEMODE_Changed(self, *args)

    def headerSysVar_DWGCODEPAGE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DWGCODEPAGE_Changed(self, *args)

    def headerSysVar_REQUIREDVERSIONS_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_REQUIREDVERSIONS_Changed(self, *args)

    def headerSysVar_UCSORG_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSORG_Changed(self, *args)

    def headerSysVar_UCSXDIR_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSXDIR_Changed(self, *args)

    def headerSysVar_UCSYDIR_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSYDIR_Changed(self, *args)

    def headerSysVar_PUCSORG_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSORG_Changed(self, *args)

    def headerSysVar_PUCSXDIR_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSXDIR_Changed(self, *args)

    def headerSysVar_PUCSYDIR_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSYDIR_Changed(self, *args)

    def headerSysVar_INSBASE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_INSBASE_Changed(self, *args)

    def headerSysVar_EXTMIN_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_EXTMIN_Changed(self, *args)

    def headerSysVar_EXTMAX_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_EXTMAX_Changed(self, *args)

    def headerSysVar_LIMMIN_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LIMMIN_Changed(self, *args)

    def headerSysVar_LIMMAX_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LIMMAX_Changed(self, *args)

    def headerSysVar_MENUNAME_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_MENUNAME_Changed(self, *args)

    def headerSysVar_ELEVATION_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_ELEVATION_Changed(self, *args)

    def headerSysVar_PELEVATION_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PELEVATION_Changed(self, *args)

    def headerSysVar_LIMCHECK_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LIMCHECK_Changed(self, *args)

    def headerSysVar_USRTIMER_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_USRTIMER_Changed(self, *args)

    def headerSysVar_PINSBASE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PINSBASE_Changed(self, *args)

    def headerSysVar_PLIMCHECK_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PLIMCHECK_Changed(self, *args)

    def headerSysVar_PEXTMIN_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PEXTMIN_Changed(self, *args)

    def headerSysVar_PEXTMAX_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PEXTMAX_Changed(self, *args)

    def headerSysVar_PLIMMIN_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PLIMMIN_Changed(self, *args)

    def headerSysVar_PLIMMAX_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PLIMMAX_Changed(self, *args)

    def headerSysVar_UCSNAME_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSNAME_Changed(self, *args)

    def headerSysVar_PUCSNAME_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSNAME_Changed(self, *args)

    def headerSysVar_ENDCAPS_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_ENDCAPS_Changed(self, *args)

    def headerSysVar_JOINSTYLE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_JOINSTYLE_Changed(self, *args)

    def headerSysVar_STYLESHEET_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_STYLESHEET_Changed(self, *args)

    def headerSysVar_CEPSNTYPE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CEPSNTYPE_Changed(self, *args)

    def headerSysVar_CEPSNID_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CEPSNID_Changed(self, *args)

    def headerSysVar_FINGERPRINTGUID_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_FINGERPRINTGUID_Changed(self, *args)

    def headerSysVar_VERSIONGUID_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VERSIONGUID_Changed(self, *args)

    def headerSysVar_PUCSORTHOVIEW_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSORTHOVIEW_Changed(self, *args)

    def headerSysVar_PUCSORGTOP_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSORGTOP_Changed(self, *args)

    def headerSysVar_PUCSORGBOTTOM_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSORGBOTTOM_Changed(self, *args)

    def headerSysVar_PUCSORGLEFT_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSORGLEFT_Changed(self, *args)

    def headerSysVar_PUCSORGRIGHT_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSORGRIGHT_Changed(self, *args)

    def headerSysVar_PUCSORGFRONT_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSORGFRONT_Changed(self, *args)

    def headerSysVar_PUCSORGBACK_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PUCSORGBACK_Changed(self, *args)

    def headerSysVar_UCSORTHOVIEW_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSORTHOVIEW_Changed(self, *args)

    def headerSysVar_UCSORGTOP_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSORGTOP_Changed(self, *args)

    def headerSysVar_UCSORGBOTTOM_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSORGBOTTOM_Changed(self, *args)

    def headerSysVar_UCSORGLEFT_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSORGLEFT_Changed(self, *args)

    def headerSysVar_UCSORGRIGHT_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSORGRIGHT_Changed(self, *args)

    def headerSysVar_UCSORGFRONT_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSORGFRONT_Changed(self, *args)

    def headerSysVar_UCSORGBACK_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UCSORGBACK_Changed(self, *args)

    def headerSysVar_DGNFRAME_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DGNFRAME_Changed(self, *args)

    def headerSysVar_DBCSTATE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DBCSTATE_Changed(self, *args)

    def headerSysVar_INTERSECTIONCOLOR_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_INTERSECTIONCOLOR_Changed(self, *args)

    def headerSysVar_INTERSECTIONDISPLAY_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_INTERSECTIONDISPLAY_Changed(self, *args)

    def headerSysVar_HALOGAP_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_HALOGAP_Changed(self, *args)

    def headerSysVar_OBSCUREDCOLOR_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_OBSCUREDCOLOR_Changed(self, *args)

    def headerSysVar_OBSCUREDLTYPE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_OBSCUREDLTYPE_Changed(self, *args)

    def headerSysVar_INDEXCTL_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_INDEXCTL_Changed(self, *args)

    def headerSysVar_PROJECTNAME_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PROJECTNAME_Changed(self, *args)

    def headerSysVar_SORTENTS_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SORTENTS_Changed(self, *args)

    def headerSysVar_DIMASSOC_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DIMASSOC_Changed(self, *args)

    def headerSysVar_HIDETEXT_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_HIDETEXT_Changed(self, *args)

    def headerSysVar_PSOLWIDTH_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PSOLWIDTH_Changed(self, *args)

    def headerSysVar_PSOLHEIGHT_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PSOLHEIGHT_Changed(self, *args)

    def headerSysVar_CTABLESTYLE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CTABLESTYLE_Changed(self, *args)

    def headerSysVar_ANNOALLVISIBLE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_ANNOALLVISIBLE_Changed(self, *args)

    def headerSysVar_ANNOTATIVEDWG_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_ANNOTATIVEDWG_Changed(self, *args)

    def headerSysVar_MSLTSCALE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_MSLTSCALE_Changed(self, *args)

    def headerSysVar_LAYEREVAL_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LAYEREVAL_Changed(self, *args)

    def headerSysVar_LAYERNOTIFY_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LAYERNOTIFY_Changed(self, *args)

    def headerSysVar_LIGHTINGUNITS_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LIGHTINGUNITS_Changed(self, *args)

    def headerSysVar_LIGHTSINBLOCKS_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_LIGHTSINBLOCKS_Changed(self, *args)

    def headerSysVar_DRAWORDERCTL_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DRAWORDERCTL_Changed(self, *args)

    def headerSysVar_HPINHERIT_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_HPINHERIT_Changed(self, *args)

    def headerSysVar_HPORIGIN_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_HPORIGIN_Changed(self, *args)

    def headerSysVar_FIELDEVAL_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_FIELDEVAL_Changed(self, *args)

    def headerSysVar_MSOLESCALE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_MSOLESCALE_Changed(self, *args)

    def headerSysVar_UPDATETHUMBNAIL_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_UPDATETHUMBNAIL_Changed(self, *args)

    def headerSysVar_DXEVAL_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DXEVAL_Changed(self, *args)

    def headerSysVar_GEOLATLONGFORMAT_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_GEOLATLONGFORMAT_Changed(self, *args)

    def headerSysVar_GEOMARKERVISIBILITY_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_GEOMARKERVISIBILITY_Changed(self, *args)

    def headerSysVar_PREVIEWTYPE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PREVIEWTYPE_Changed(self, *args)

    def headerSysVar_EXPORTMODELSPACE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_EXPORTMODELSPACE_Changed(self, *args)

    def headerSysVar_EXPORTPAPERSPACE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_EXPORTPAPERSPACE_Changed(self, *args)

    def headerSysVar_EXPORTPAGESETUP_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_EXPORTPAGESETUP_Changed(self, *args)

    def headerSysVar_MESHTYPE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_MESHTYPE_Changed(self, *args)

    def headerSysVar_SKYSTATUS_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SKYSTATUS_Changed(self, *args)

    def headerSysVar_VSACURVATUREHIGH_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSACURVATUREHIGH_Changed(self, *args)

    def headerSysVar_VSACURVATURELOW_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSACURVATURELOW_Changed(self, *args)

    def headerSysVar_VSACURVATURETYPE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSACURVATURETYPE_Changed(self, *args)

    def headerSysVar_VSADRAFTANGLEHIGH_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSADRAFTANGLEHIGH_Changed(self, *args)

    def headerSysVar_VSADRAFTANGLELOW_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSADRAFTANGLELOW_Changed(self, *args)

    def headerSysVar_VSAZEBRACOLOR1_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSAZEBRACOLOR1_Changed(self, *args)

    def headerSysVar_VSAZEBRACOLOR2_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSAZEBRACOLOR2_Changed(self, *args)

    def headerSysVar_VSAZEBRADIRECTION_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSAZEBRADIRECTION_Changed(self, *args)

    def headerSysVar_VSAZEBRASIZE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSAZEBRASIZE_Changed(self, *args)

    def headerSysVar_VSAZEBRATYPE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VSAZEBRATYPE_Changed(self, *args)

    def headerSysVar_HPLAYER_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_HPLAYER_Changed(self, *args)

    def headerSysVar_MIRRHATCH_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_MIRRHATCH_Changed(self, *args)

    def headerSysVar_HPTRANSPARENCY_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_HPTRANSPARENCY_Changed(self, *args)

    def headerSysVar_HPCOLOR_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_HPCOLOR_Changed(self, *args)

    def headerSysVar_HPBACKGROUNDCOLOR_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_HPBACKGROUNDCOLOR_Changed(self, *args)

    def headerSysVar_CETRANSPARENCY_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CETRANSPARENCY_Changed(self, *args)

    def headerSysVar_CVIEWDETAILSTYLE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CVIEWDETAILSTYLE_Changed(self, *args)

    def headerSysVar_CVIEWSECTIONSTYLE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CVIEWSECTIONSTYLE_Changed(self, *args)

    def headerSysVar_WIPEOUTFRAME_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_WIPEOUTFRAME_Changed(self, *args)

    def headerSysVar_POINTCLOUDCLIPFRAME_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_POINTCLOUDCLIPFRAME_Changed(self, *args)

    def headerSysVar_MLEADERSCALE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_MLEADERSCALE_Changed(self, *args)

    def headerSysVar_VIEWUPDATEAUTO_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_VIEWUPDATEAUTO_Changed(self, *args)

    def headerSysVar_GEOMARKPOSITIONSIZE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_GEOMARKPOSITIONSIZE_Changed(self, *args)

    def headerSysVar_POINTCLOUDPOINTSIZE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_POINTCLOUDPOINTSIZE_Changed(self, *args)

    def headerSysVar_DIMLAYER_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DIMLAYER_Changed(self, *args)

    def headerSysVar_SECTIONOFFSETINC_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SECTIONOFFSETINC_Changed(self, *args)

    def headerSysVar_SECTIONTHICKNESSINC_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_SECTIONTHICKNESSINC_Changed(self, *args)

    def headerSysVar_XREFOVERRIDE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_XREFOVERRIDE_Changed(self, *args)

    def headerSysVar_CENTERCROSSGAP_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CENTERCROSSGAP_Changed(self, *args)

    def headerSysVar_CENTERCROSSSIZE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CENTERCROSSSIZE_Changed(self, *args)

    def headerSysVar_CENTEREXE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CENTEREXE_Changed(self, *args)

    def headerSysVar_CENTERLAYER_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CENTERLAYER_Changed(self, *args)

    def headerSysVar_CENTERLTSCALE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CENTERLTSCALE_Changed(self, *args)

    def headerSysVar_CENTERLTYPE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CENTERLTYPE_Changed(self, *args)

    def headerSysVar_CENTERLTYPEFILE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CENTERLTYPEFILE_Changed(self, *args)

    def headerSysVar_CENTERMARKEXE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CENTERMARKEXE_Changed(self, *args)

    def headerSysVar_CANNOSCALE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CANNOSCALE_Changed(self, *args)

    def headerSysVar_CMLEADERSTYLE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_CMLEADERSTYLE_Changed(self, *args)

    def headerSysVar_TEXTSIZE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TEXTSIZE_Changed(self, *args)

    def headerSysVar_TEXTSTYLE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TEXTSTYLE_Changed(self, *args)

    def headerSysVar_TILEMODE_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_TILEMODE_Changed(self, *args)

    def headerSysVar_DWFFRAME_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_DWFFRAME_Changed(self, *args)

    def headerSysVar_FRAME_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_FRAME_Changed(self, *args)

    def headerSysVar_PDFFRAME_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_PDFFRAME_Changed(self, *args)

    def headerSysVar_XCLIPFRAME_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_XCLIPFRAME_Changed(self, *args)

    def headerSysVar_dimadec_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimadec_WillChange(self, *args)

    def headerSysVar_dimalt_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimalt_WillChange(self, *args)

    def headerSysVar_dimaltd_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimaltd_WillChange(self, *args)

    def headerSysVar_dimaltf_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimaltf_WillChange(self, *args)

    def headerSysVar_dimaltrnd_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimaltrnd_WillChange(self, *args)

    def headerSysVar_dimalttd_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimalttd_WillChange(self, *args)

    def headerSysVar_dimalttz_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimalttz_WillChange(self, *args)

    def headerSysVar_dimaltu_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimaltu_WillChange(self, *args)

    def headerSysVar_dimaltz_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimaltz_WillChange(self, *args)

    def headerSysVar_dimapost_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimapost_WillChange(self, *args)

    def headerSysVar_dimasz_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimasz_WillChange(self, *args)

    def headerSysVar_dimaunit_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimaunit_WillChange(self, *args)

    def headerSysVar_dimazin_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimazin_WillChange(self, *args)

    def headerSysVar_dimcen_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimcen_WillChange(self, *args)

    def headerSysVar_dimclrd_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimclrd_WillChange(self, *args)

    def headerSysVar_dimclre_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimclre_WillChange(self, *args)

    def headerSysVar_dimclrt_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimclrt_WillChange(self, *args)

    def headerSysVar_dimdec_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimdec_WillChange(self, *args)

    def headerSysVar_dimdle_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimdle_WillChange(self, *args)

    def headerSysVar_dimdli_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimdli_WillChange(self, *args)

    def headerSysVar_dimdsep_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimdsep_WillChange(self, *args)

    def headerSysVar_dimexe_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimexe_WillChange(self, *args)

    def headerSysVar_dimexo_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimexo_WillChange(self, *args)

    def headerSysVar_dimfrac_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimfrac_WillChange(self, *args)

    def headerSysVar_dimgap_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimgap_WillChange(self, *args)

    def headerSysVar_dimjust_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimjust_WillChange(self, *args)

    def headerSysVar_dimldrblk_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimldrblk_WillChange(self, *args)

    def headerSysVar_dimlfac_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimlfac_WillChange(self, *args)

    def headerSysVar_dimlim_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimlim_WillChange(self, *args)

    def headerSysVar_dimlunit_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimlunit_WillChange(self, *args)

    def headerSysVar_dimlwd_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimlwd_WillChange(self, *args)

    def headerSysVar_dimlwe_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimlwe_WillChange(self, *args)

    def headerSysVar_dimpost_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimpost_WillChange(self, *args)

    def headerSysVar_dimrnd_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimrnd_WillChange(self, *args)

    def headerSysVar_dimsah_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimsah_WillChange(self, *args)

    def headerSysVar_dimscale_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimscale_WillChange(self, *args)

    def headerSysVar_dimsd1_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimsd1_WillChange(self, *args)

    def headerSysVar_dimsd2_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimsd2_WillChange(self, *args)

    def headerSysVar_dimse1_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimse1_WillChange(self, *args)

    def headerSysVar_dimse2_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimse2_WillChange(self, *args)

    def headerSysVar_dimtad_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtad_WillChange(self, *args)

    def headerSysVar_dimtdec_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtdec_WillChange(self, *args)

    def headerSysVar_dimtfac_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtfac_WillChange(self, *args)

    def headerSysVar_dimtih_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtih_WillChange(self, *args)

    def headerSysVar_dimtm_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtm_WillChange(self, *args)

    def headerSysVar_dimtoh_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtoh_WillChange(self, *args)

    def headerSysVar_dimtol_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtol_WillChange(self, *args)

    def headerSysVar_dimtolj_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtolj_WillChange(self, *args)

    def headerSysVar_dimtp_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtp_WillChange(self, *args)

    def headerSysVar_dimtsz_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtsz_WillChange(self, *args)

    def headerSysVar_dimtvp_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtvp_WillChange(self, *args)

    def headerSysVar_dimtxsty_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtxsty_WillChange(self, *args)

    def headerSysVar_dimtxt_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtxt_WillChange(self, *args)

    def headerSysVar_dimtzin_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtzin_WillChange(self, *args)

    def headerSysVar_dimupt_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimupt_WillChange(self, *args)

    def headerSysVar_dimzin_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimzin_WillChange(self, *args)

    def headerSysVar_dimfxl_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimfxl_WillChange(self, *args)

    def headerSysVar_dimfxlon_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimfxlon_WillChange(self, *args)

    def headerSysVar_dimjogang_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimjogang_WillChange(self, *args)

    def headerSysVar_dimtfill_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtfill_WillChange(self, *args)

    def headerSysVar_dimtfillclr_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtfillclr_WillChange(self, *args)

    def headerSysVar_dimarcsym_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimarcsym_WillChange(self, *args)

    def headerSysVar_dimltype_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimltype_WillChange(self, *args)

    def headerSysVar_dimltex1_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimltex1_WillChange(self, *args)

    def headerSysVar_dimltex2_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimltex2_WillChange(self, *args)

    def headerSysVar_dimtxtdirection_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtxtdirection_WillChange(self, *args)

    def headerSysVar_dimmzf_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimmzf_WillChange(self, *args)

    def headerSysVar_dimmzs_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimmzs_WillChange(self, *args)

    def headerSysVar_dimaltmzf_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimaltmzf_WillChange(self, *args)

    def headerSysVar_dimaltmzs_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimaltmzs_WillChange(self, *args)

    def headerSysVar_dimblk_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimblk_WillChange(self, *args)

    def headerSysVar_dimblk1_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimblk1_WillChange(self, *args)

    def headerSysVar_dimblk2_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimblk2_WillChange(self, *args)

    def headerSysVar_dimatfit_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimatfit_WillChange(self, *args)

    def headerSysVar_dimsoxd_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimsoxd_WillChange(self, *args)

    def headerSysVar_dimtix_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtix_WillChange(self, *args)

    def headerSysVar_dimtmove_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtmove_WillChange(self, *args)

    def headerSysVar_dimtofl_WillChange(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtofl_WillChange(self, *args)

    def headerSysVar_dimadec_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimadec_Changed(self, *args)

    def headerSysVar_dimalt_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimalt_Changed(self, *args)

    def headerSysVar_dimaltd_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimaltd_Changed(self, *args)

    def headerSysVar_dimaltf_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimaltf_Changed(self, *args)

    def headerSysVar_dimaltrnd_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimaltrnd_Changed(self, *args)

    def headerSysVar_dimalttd_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimalttd_Changed(self, *args)

    def headerSysVar_dimalttz_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimalttz_Changed(self, *args)

    def headerSysVar_dimaltu_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimaltu_Changed(self, *args)

    def headerSysVar_dimaltz_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimaltz_Changed(self, *args)

    def headerSysVar_dimapost_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimapost_Changed(self, *args)

    def headerSysVar_dimasz_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimasz_Changed(self, *args)

    def headerSysVar_dimaunit_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimaunit_Changed(self, *args)

    def headerSysVar_dimazin_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimazin_Changed(self, *args)

    def headerSysVar_dimcen_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimcen_Changed(self, *args)

    def headerSysVar_dimclrd_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimclrd_Changed(self, *args)

    def headerSysVar_dimclre_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimclre_Changed(self, *args)

    def headerSysVar_dimclrt_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimclrt_Changed(self, *args)

    def headerSysVar_dimdec_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimdec_Changed(self, *args)

    def headerSysVar_dimdle_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimdle_Changed(self, *args)

    def headerSysVar_dimdli_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimdli_Changed(self, *args)

    def headerSysVar_dimdsep_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimdsep_Changed(self, *args)

    def headerSysVar_dimexe_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimexe_Changed(self, *args)

    def headerSysVar_dimexo_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimexo_Changed(self, *args)

    def headerSysVar_dimfrac_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimfrac_Changed(self, *args)

    def headerSysVar_dimgap_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimgap_Changed(self, *args)

    def headerSysVar_dimjust_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimjust_Changed(self, *args)

    def headerSysVar_dimldrblk_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimldrblk_Changed(self, *args)

    def headerSysVar_dimlfac_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimlfac_Changed(self, *args)

    def headerSysVar_dimlim_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimlim_Changed(self, *args)

    def headerSysVar_dimlunit_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimlunit_Changed(self, *args)

    def headerSysVar_dimlwd_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimlwd_Changed(self, *args)

    def headerSysVar_dimlwe_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimlwe_Changed(self, *args)

    def headerSysVar_dimpost_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimpost_Changed(self, *args)

    def headerSysVar_dimrnd_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimrnd_Changed(self, *args)

    def headerSysVar_dimsah_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimsah_Changed(self, *args)

    def headerSysVar_dimscale_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimscale_Changed(self, *args)

    def headerSysVar_dimsd1_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimsd1_Changed(self, *args)

    def headerSysVar_dimsd2_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimsd2_Changed(self, *args)

    def headerSysVar_dimse1_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimse1_Changed(self, *args)

    def headerSysVar_dimse2_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimse2_Changed(self, *args)

    def headerSysVar_dimtad_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtad_Changed(self, *args)

    def headerSysVar_dimtdec_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtdec_Changed(self, *args)

    def headerSysVar_dimtfac_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtfac_Changed(self, *args)

    def headerSysVar_dimtih_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtih_Changed(self, *args)

    def headerSysVar_dimtm_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtm_Changed(self, *args)

    def headerSysVar_dimtoh_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtoh_Changed(self, *args)

    def headerSysVar_dimtol_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtol_Changed(self, *args)

    def headerSysVar_dimtolj_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtolj_Changed(self, *args)

    def headerSysVar_dimtp_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtp_Changed(self, *args)

    def headerSysVar_dimtsz_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtsz_Changed(self, *args)

    def headerSysVar_dimtvp_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtvp_Changed(self, *args)

    def headerSysVar_dimtxsty_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtxsty_Changed(self, *args)

    def headerSysVar_dimtxt_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtxt_Changed(self, *args)

    def headerSysVar_dimtzin_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtzin_Changed(self, *args)

    def headerSysVar_dimupt_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimupt_Changed(self, *args)

    def headerSysVar_dimzin_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimzin_Changed(self, *args)

    def headerSysVar_dimfxl_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimfxl_Changed(self, *args)

    def headerSysVar_dimfxlon_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimfxlon_Changed(self, *args)

    def headerSysVar_dimjogang_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimjogang_Changed(self, *args)

    def headerSysVar_dimtfill_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtfill_Changed(self, *args)

    def headerSysVar_dimtfillclr_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtfillclr_Changed(self, *args)

    def headerSysVar_dimarcsym_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimarcsym_Changed(self, *args)

    def headerSysVar_dimltype_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimltype_Changed(self, *args)

    def headerSysVar_dimltex1_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimltex1_Changed(self, *args)

    def headerSysVar_dimltex2_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimltex2_Changed(self, *args)

    def headerSysVar_dimtxtdirection_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtxtdirection_Changed(self, *args)

    def headerSysVar_dimmzf_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimmzf_Changed(self, *args)

    def headerSysVar_dimmzs_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimmzs_Changed(self, *args)

    def headerSysVar_dimaltmzf_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimaltmzf_Changed(self, *args)

    def headerSysVar_dimaltmzs_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimaltmzs_Changed(self, *args)

    def headerSysVar_dimblk_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimblk_Changed(self, *args)

    def headerSysVar_dimblk1_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimblk1_Changed(self, *args)

    def headerSysVar_dimblk2_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimblk2_Changed(self, *args)

    def headerSysVar_dimatfit_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimatfit_Changed(self, *args)

    def headerSysVar_dimsoxd_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimsoxd_Changed(self, *args)

    def headerSysVar_dimtix_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtix_Changed(self, *args)

    def headerSysVar_dimtmove_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtmove_Changed(self, *args)

    def headerSysVar_dimtofl_Changed(self, *args):
        return _ODA_Drawings.OdDbDatabaseReactor_headerSysVar_dimtofl_Changed(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDatabaseReactor

# Register OdDbDatabaseReactor in _ODA_Drawings:
_ODA_Drawings.OdDbDatabaseReactor_swigregister(OdDbDatabaseReactor)

def OdDbDatabaseReactor_cast(*args):
    return _ODA_Drawings.OdDbDatabaseReactor_cast(*args)

def OdDbDatabaseReactor_desc(*args):
    return _ODA_Drawings.OdDbDatabaseReactor_desc(*args)

def OdDbDatabaseReactor_createObject(*args):
    return _ODA_Drawings.OdDbDatabaseReactor_createObject(*args)

class OdHatchPatternManager(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdHatchPatternManager_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdHatchPatternManager_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdHatchPatternManager_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdHatchPatternManager_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdHatchPatternManager_createObject(*args)

    def setApplicationService(self, *args):
        return _ODA_Drawings.OdHatchPatternManager_setApplicationService(self, *args)

    def retrievePattern(self, *args):
        return _ODA_Drawings.OdHatchPatternManager_retrievePattern(self, *args)

    def appendPattern(self, *args):
        return _ODA_Drawings.OdHatchPatternManager_appendPattern(self, *args)

    def retrievePatternList(self, *args):
        return _ODA_Drawings.OdHatchPatternManager_retrievePatternList(self, *args)

    def reset(self, *args):
        return _ODA_Drawings.OdHatchPatternManager_reset(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdHatchPatternManager

# Register OdHatchPatternManager in _ODA_Drawings:
_ODA_Drawings.OdHatchPatternManager_swigregister(OdHatchPatternManager)

def OdHatchPatternManager_cast(*args):
    return _ODA_Drawings.OdHatchPatternManager_cast(*args)

def OdHatchPatternManager_desc(*args):
    return _ODA_Drawings.OdHatchPatternManager_desc(*args)

def OdHatchPatternManager_createObject(*args):
    return _ODA_Drawings.OdHatchPatternManager_createObject(*args)

class OdDbBody(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBody_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBody_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBody_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBody_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBody_createObject(*args)

    def isNull(self, *args):
        return _ODA_Drawings.OdDbBody_isNull(self, *args)

    @staticmethod
    def acisOut(*args):
        return _ODA_Drawings.OdDbBody_acisOut(*args)

    @staticmethod
    def acisIn(*args):
        return _ODA_Drawings.OdDbBody_acisIn(*args)

    def brep(self, *args):
        return _ODA_Drawings.OdDbBody_brep(self, *args)

    def getFaceMesh(self, *args):
        return _ODA_Drawings.OdDbBody_getFaceMesh(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBody_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBody_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBody_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBody_dxfOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbBody_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbBody_subViewportDraw(self, *args)

    def decomposeForSave(self, *args):
        return _ODA_Drawings.OdDbBody_decomposeForSave(self, *args)

    def setBody(self, *args):
        return _ODA_Drawings.OdDbBody_setBody(self, *args)

    def body(self, *args):
        return _ODA_Drawings.OdDbBody_body(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbBody_subExplode(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbBody_subTransformBy(self, *args)

    def saveAs(self, *args):
        return _ODA_Drawings.OdDbBody_saveAs(self, *args)

    def subSubentPtr(self, *args):
        return _ODA_Drawings.OdDbBody_subSubentPtr(self, *args)

    def subGetGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbBody_subGetGsMarkersAtSubentPath(self, *args)

    def subGetSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDbBody_subGetSubentPathsAtGsMarker(self, *args)

    def numChanges(self, *args):
        return _ODA_Drawings.OdDbBody_numChanges(self, *args)

    def internalSubentId(self, *args):
        return _ODA_Drawings.OdDbBody_internalSubentId(self, *args)

    def internalSubentPtr(self, *args):
        return _ODA_Drawings.OdDbBody_internalSubentPtr(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbBody_subSetAttributes(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbBody_subGetGeomExtents(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbBody_subClose(self, *args)

    @staticmethod
    def setSubentPath(*args):
        return _ODA_Drawings.OdDbBody_setSubentPath(*args)

    @staticmethod
    def generateMesh(*args):
        return _ODA_Drawings.OdDbBody_generateMesh(*args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDbBody_copyFrom(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBody

# Register OdDbBody in _ODA_Drawings:
_ODA_Drawings.OdDbBody_swigregister(OdDbBody)

def OdDbBody_cast(*args):
    return _ODA_Drawings.OdDbBody_cast(*args)

def OdDbBody_desc(*args):
    return _ODA_Drawings.OdDbBody_desc(*args)

def OdDbBody_createObject(*args):
    return _ODA_Drawings.OdDbBody_createObject(*args)

def OdDbBody_acisOut(*args):
    return _ODA_Drawings.OdDbBody_acisOut(*args)

def OdDbBody_acisIn(*args):
    return _ODA_Drawings.OdDbBody_acisIn(*args)

def OdDbBody_setSubentPath(*args):
    return _ODA_Drawings.OdDbBody_setSubentPath(*args)

def OdDbBody_generateMesh(*args):
    return _ODA_Drawings.OdDbBody_generateMesh(*args)

class OdAsSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kAsSurfUndefined = _ODA_Drawings.OdAsSurface_kAsSurfUndefined
    kAsSurfCylinder = _ODA_Drawings.OdAsSurface_kAsSurfCylinder
    kAsSurfCone = _ODA_Drawings.OdAsSurface_kAsSurfCone
    kAsSurfSphere = _ODA_Drawings.OdAsSurface_kAsSurfSphere
    kAsSurfTorus = _ODA_Drawings.OdAsSurface_kAsSurfTorus
    kAsSurfRevolve = _ODA_Drawings.OdAsSurface_kAsSurfRevolve

    def getType(self, *args):
        return _ODA_Drawings.OdAsSurface_getType(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdAsSurface_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdAsSurface_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdAsSurface_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdAsSurface_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdAsSurface

# Register OdAsSurface in _ODA_Drawings:
_ODA_Drawings.OdAsSurface_swigregister(OdAsSurface)

class OdAsUndefined(OdAsSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_GripsCountU = property(_ODA_Drawings.OdAsUndefined_m_GripsCountU_get, _ODA_Drawings.OdAsUndefined_m_GripsCountU_set)
    m_GripsCountV = property(_ODA_Drawings.OdAsUndefined_m_GripsCountV_get, _ODA_Drawings.OdAsUndefined_m_GripsCountV_set)
    m_dSpan = property(_ODA_Drawings.OdAsUndefined_m_dSpan_get, _ODA_Drawings.OdAsUndefined_m_dSpan_set)

    def __init__(self, *args):
        _ODA_Drawings.OdAsUndefined_swiginit(self, _ODA_Drawings.new_OdAsUndefined(*args))

    def getType(self, *args):
        return _ODA_Drawings.OdAsUndefined_getType(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdAsUndefined_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdAsUndefined_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdAsUndefined_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdAsUndefined_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdAsUndefined

# Register OdAsUndefined in _ODA_Drawings:
_ODA_Drawings.OdAsUndefined_swigregister(OdAsUndefined)

class OdAsCylinder(OdAsSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_basePoint3d = property(_ODA_Drawings.OdAsCylinder_m_basePoint3d_get, _ODA_Drawings.OdAsCylinder_m_basePoint3d_set)
    m_axisOfSymmetry = property(_ODA_Drawings.OdAsCylinder_m_axisOfSymmetry_get, _ODA_Drawings.OdAsCylinder_m_axisOfSymmetry_set)
    m_refAxis = property(_ODA_Drawings.OdAsCylinder_m_refAxis_get, _ODA_Drawings.OdAsCylinder_m_refAxis_set)
    m_dStartAngle = property(_ODA_Drawings.OdAsCylinder_m_dStartAngle_get, _ODA_Drawings.OdAsCylinder_m_dStartAngle_set)
    m_dIncludedAngle = property(_ODA_Drawings.OdAsCylinder_m_dIncludedAngle_get, _ODA_Drawings.OdAsCylinder_m_dIncludedAngle_set)
    m_dRadius = property(_ODA_Drawings.OdAsCylinder_m_dRadius_get, _ODA_Drawings.OdAsCylinder_m_dRadius_set)
    m_dHeight = property(_ODA_Drawings.OdAsCylinder_m_dHeight_get, _ODA_Drawings.OdAsCylinder_m_dHeight_set)

    def __init__(self, *args):
        _ODA_Drawings.OdAsCylinder_swiginit(self, _ODA_Drawings.new_OdAsCylinder(*args))

    def getType(self, *args):
        return _ODA_Drawings.OdAsCylinder_getType(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdAsCylinder_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdAsCylinder_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdAsCylinder_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdAsCylinder_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdAsCylinder

# Register OdAsCylinder in _ODA_Drawings:
_ODA_Drawings.OdAsCylinder_swigregister(OdAsCylinder)

class OdAsCone(OdAsSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_basePoint3d = property(_ODA_Drawings.OdAsCone_m_basePoint3d_get, _ODA_Drawings.OdAsCone_m_basePoint3d_set)
    m_axisOfSymmetry = property(_ODA_Drawings.OdAsCone_m_axisOfSymmetry_get, _ODA_Drawings.OdAsCone_m_axisOfSymmetry_set)
    m_refAxis = property(_ODA_Drawings.OdAsCone_m_refAxis_get, _ODA_Drawings.OdAsCone_m_refAxis_set)
    m_dStartAngle = property(_ODA_Drawings.OdAsCone_m_dStartAngle_get, _ODA_Drawings.OdAsCone_m_dStartAngle_set)
    m_dIncludedAngle = property(_ODA_Drawings.OdAsCone_m_dIncludedAngle_get, _ODA_Drawings.OdAsCone_m_dIncludedAngle_set)
    m_dBaseRadius = property(_ODA_Drawings.OdAsCone_m_dBaseRadius_get, _ODA_Drawings.OdAsCone_m_dBaseRadius_set)
    m_dTopRadius = property(_ODA_Drawings.OdAsCone_m_dTopRadius_get, _ODA_Drawings.OdAsCone_m_dTopRadius_set)
    m_dHeight = property(_ODA_Drawings.OdAsCone_m_dHeight_get, _ODA_Drawings.OdAsCone_m_dHeight_set)

    def __init__(self, *args):
        _ODA_Drawings.OdAsCone_swiginit(self, _ODA_Drawings.new_OdAsCone(*args))

    def getType(self, *args):
        return _ODA_Drawings.OdAsCone_getType(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdAsCone_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdAsCone_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdAsCone_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdAsCone_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdAsCone

# Register OdAsCone in _ODA_Drawings:
_ODA_Drawings.OdAsCone_swigregister(OdAsCone)

class OdAsSphere(OdAsSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_Center3d = property(_ODA_Drawings.OdAsSphere_m_Center3d_get, _ODA_Drawings.OdAsSphere_m_Center3d_set)
    m_northAxis = property(_ODA_Drawings.OdAsSphere_m_northAxis_get, _ODA_Drawings.OdAsSphere_m_northAxis_set)
    m_refAxis = property(_ODA_Drawings.OdAsSphere_m_refAxis_get, _ODA_Drawings.OdAsSphere_m_refAxis_set)
    m_dStartAngle = property(_ODA_Drawings.OdAsSphere_m_dStartAngle_get, _ODA_Drawings.OdAsSphere_m_dStartAngle_set)
    m_dIncludedAngle = property(_ODA_Drawings.OdAsSphere_m_dIncludedAngle_get, _ODA_Drawings.OdAsSphere_m_dIncludedAngle_set)
    m_dRadius = property(_ODA_Drawings.OdAsSphere_m_dRadius_get, _ODA_Drawings.OdAsSphere_m_dRadius_set)

    def __init__(self, *args):
        _ODA_Drawings.OdAsSphere_swiginit(self, _ODA_Drawings.new_OdAsSphere(*args))

    def getType(self, *args):
        return _ODA_Drawings.OdAsSphere_getType(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdAsSphere_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdAsSphere_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdAsSphere_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdAsSphere_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdAsSphere

# Register OdAsSphere in _ODA_Drawings:
_ODA_Drawings.OdAsSphere_swigregister(OdAsSphere)

class OdAsTorus(OdAsSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_Origin3d = property(_ODA_Drawings.OdAsTorus_m_Origin3d_get, _ODA_Drawings.OdAsTorus_m_Origin3d_set)
    m_axisOfSymmetry = property(_ODA_Drawings.OdAsTorus_m_axisOfSymmetry_get, _ODA_Drawings.OdAsTorus_m_axisOfSymmetry_set)
    m_refAxis = property(_ODA_Drawings.OdAsTorus_m_refAxis_get, _ODA_Drawings.OdAsTorus_m_refAxis_set)
    m_dStartAngle = property(_ODA_Drawings.OdAsTorus_m_dStartAngle_get, _ODA_Drawings.OdAsTorus_m_dStartAngle_set)
    m_dIncludedAngle = property(_ODA_Drawings.OdAsTorus_m_dIncludedAngle_get, _ODA_Drawings.OdAsTorus_m_dIncludedAngle_set)
    m_dRadius = property(_ODA_Drawings.OdAsTorus_m_dRadius_get, _ODA_Drawings.OdAsTorus_m_dRadius_set)
    m_dTubeRadius = property(_ODA_Drawings.OdAsTorus_m_dTubeRadius_get, _ODA_Drawings.OdAsTorus_m_dTubeRadius_set)

    def __init__(self, *args):
        _ODA_Drawings.OdAsTorus_swiginit(self, _ODA_Drawings.new_OdAsTorus(*args))

    def getType(self, *args):
        return _ODA_Drawings.OdAsTorus_getType(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdAsTorus_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdAsTorus_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdAsTorus_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdAsTorus_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdAsTorus

# Register OdAsTorus in _ODA_Drawings:
_ODA_Drawings.OdAsTorus_swigregister(OdAsTorus)

class OdAsRevolve(OdAsSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_AxisStartPoint = property(_ODA_Drawings.OdAsRevolve_m_AxisStartPoint_get, _ODA_Drawings.OdAsRevolve_m_AxisStartPoint_set)
    m_AxisDirection = property(_ODA_Drawings.OdAsRevolve_m_AxisDirection_get, _ODA_Drawings.OdAsRevolve_m_AxisDirection_set)
    m_dStartAngle = property(_ODA_Drawings.OdAsRevolve_m_dStartAngle_get, _ODA_Drawings.OdAsRevolve_m_dStartAngle_set)
    m_dIncludedAngle = property(_ODA_Drawings.OdAsRevolve_m_dIncludedAngle_get, _ODA_Drawings.OdAsRevolve_m_dIncludedAngle_set)
    m_Unknown = property(_ODA_Drawings.OdAsRevolve_m_Unknown_get, _ODA_Drawings.OdAsRevolve_m_Unknown_set)
    m_Knots = property(_ODA_Drawings.OdAsRevolve_m_Knots_get, _ODA_Drawings.OdAsRevolve_m_Knots_set)
    m_CtrlPoints = property(_ODA_Drawings.OdAsRevolve_m_CtrlPoints_get, _ODA_Drawings.OdAsRevolve_m_CtrlPoints_set)
    m_Weights = property(_ODA_Drawings.OdAsRevolve_m_Weights_get, _ODA_Drawings.OdAsRevolve_m_Weights_set)

    def __init__(self, *args):
        _ODA_Drawings.OdAsRevolve_swiginit(self, _ODA_Drawings.new_OdAsRevolve(*args))

    def getType(self, *args):
        return _ODA_Drawings.OdAsRevolve_getType(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdAsRevolve_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdAsRevolve_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdAsRevolve_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdAsRevolve_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdAsRevolve

# Register OdAsRevolve in _ODA_Drawings:
_ODA_Drawings.OdAsRevolve_swigregister(OdAsRevolve)

class OdDgTextNodeImportData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_bUnderlineText = property(_ODA_Drawings.OdDgTextNodeImportData_m_bUnderlineText_get, _ODA_Drawings.OdDgTextNodeImportData_m_bUnderlineText_set)
    m_bOverlineText = property(_ODA_Drawings.OdDgTextNodeImportData_m_bOverlineText_get, _ODA_Drawings.OdDgTextNodeImportData_m_bOverlineText_set)
    m_bUseRGBColor = property(_ODA_Drawings.OdDgTextNodeImportData_m_bUseRGBColor_get, _ODA_Drawings.OdDgTextNodeImportData_m_bUseRGBColor_set)
    m_bUseBold = property(_ODA_Drawings.OdDgTextNodeImportData_m_bUseBold_get, _ODA_Drawings.OdDgTextNodeImportData_m_bUseBold_set)
    m_bUseItalic = property(_ODA_Drawings.OdDgTextNodeImportData_m_bUseItalic_get, _ODA_Drawings.OdDgTextNodeImportData_m_bUseItalic_set)
    m_uColorIndex = property(_ODA_Drawings.OdDgTextNodeImportData_m_uColorIndex_get, _ODA_Drawings.OdDgTextNodeImportData_m_uColorIndex_set)
    m_uRGBColor = property(_ODA_Drawings.OdDgTextNodeImportData_m_uRGBColor_get, _ODA_Drawings.OdDgTextNodeImportData_m_uRGBColor_set)
    m_strFontName = property(_ODA_Drawings.OdDgTextNodeImportData_m_strFontName_get, _ODA_Drawings.OdDgTextNodeImportData_m_strFontName_set)
    m_dTextSize = property(_ODA_Drawings.OdDgTextNodeImportData_m_dTextSize_get, _ODA_Drawings.OdDgTextNodeImportData_m_dTextSize_set)
    m_dCharSpacing = property(_ODA_Drawings.OdDgTextNodeImportData_m_dCharSpacing_get, _ODA_Drawings.OdDgTextNodeImportData_m_dCharSpacing_set)
    m_dWidthFactor = property(_ODA_Drawings.OdDgTextNodeImportData_m_dWidthFactor_get, _ODA_Drawings.OdDgTextNodeImportData_m_dWidthFactor_set)
    m_dSlantAngle = property(_ODA_Drawings.OdDgTextNodeImportData_m_dSlantAngle_get, _ODA_Drawings.OdDgTextNodeImportData_m_dSlantAngle_set)

    def __init__(self, *args):
        _ODA_Drawings.OdDgTextNodeImportData_swiginit(self, _ODA_Drawings.new_OdDgTextNodeImportData(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDgTextNodeImportData

# Register OdDgTextNodeImportData in _ODA_Drawings:
_ODA_Drawings.OdDgTextNodeImportData_swigregister(OdDgTextNodeImportData)

class OdDgnImport(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    success = _ODA_Drawings.OdDgnImport_success
    fail = _ODA_Drawings.OdDgnImport_fail
    bad_password = _ODA_Drawings.OdDgnImport_bad_password
    bad_file = _ODA_Drawings.OdDgnImport_bad_file
    bad_database = _ODA_Drawings.OdDgnImport_bad_database
    encrypted_file = _ODA_Drawings.OdDgnImport_encrypted_file

    def _import(self, *args):
        return _ODA_Drawings.OdDgnImport__import(self, *args)

    def properties(self, *args):
        return _ODA_Drawings.OdDgnImport_properties(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDgnImport

# Register OdDgnImport in _ODA_Drawings:
_ODA_Drawings.OdDgnImport_swigregister(OdDgnImport)

class OdDgnImportModule(ODA_Kernel.OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def create(self, *args):
        return _ODA_Drawings.OdDgnImportModule_create(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDgnImportModule

# Register OdDgnImportModule in _ODA_Drawings:
_ODA_Drawings.OdDgnImportModule_swigregister(OdDgnImportModule)


def createDgnImporter(*args):
    return _ODA_Drawings.createDgnImporter(*args)
class OdDgnImportLineWeightsMap(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setLineWeightForDgnIndex(self, *args):
        return _ODA_Drawings.OdDgnImportLineWeightsMap_setLineWeightForDgnIndex(self, *args)

    def copyLineWeightsMap(self, *args):
        return _ODA_Drawings.OdDgnImportLineWeightsMap_copyLineWeightsMap(self, *args)

    def getLineWeightByDgnIndex(self, *args):
        return _ODA_Drawings.OdDgnImportLineWeightsMap_getLineWeightByDgnIndex(self, *args)

    def resetToDefaults(self, *args):
        return _ODA_Drawings.OdDgnImportLineWeightsMap_resetToDefaults(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDgnImportLineWeightsMap

# Register OdDgnImportLineWeightsMap in _ODA_Drawings:
_ODA_Drawings.OdDgnImportLineWeightsMap_swigregister(OdDgnImportLineWeightsMap)

class OdDbXRefMan(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def load(*args):
        return _ODA_Drawings.OdDbXRefMan_load(*args)

    @staticmethod
    def loadAll(*args):
        return _ODA_Drawings.OdDbXRefMan_loadAll(*args)

    @staticmethod
    def unload(*args):
        return _ODA_Drawings.OdDbXRefMan_unload(*args)

    @staticmethod
    def unloadAll(*args):
        return _ODA_Drawings.OdDbXRefMan_unloadAll(*args)

    @staticmethod
    def bind(*args):
        return _ODA_Drawings.OdDbXRefMan_bind(*args)

    @staticmethod
    def detach(*args):
        return _ODA_Drawings.OdDbXRefMan_detach(*args)

    @staticmethod
    def setOverlaid(*args):
        return _ODA_Drawings.OdDbXRefMan_setOverlaid(*args)

    def __init__(self, *args):
        _ODA_Drawings.OdDbXRefMan_swiginit(self, _ODA_Drawings.new_OdDbXRefMan(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbXRefMan

# Register OdDbXRefMan in _ODA_Drawings:
_ODA_Drawings.OdDbXRefMan_swigregister(OdDbXRefMan)

def OdDbXRefMan_load(*args):
    return _ODA_Drawings.OdDbXRefMan_load(*args)

def OdDbXRefMan_loadAll(*args):
    return _ODA_Drawings.OdDbXRefMan_loadAll(*args)

def OdDbXRefMan_unload(*args):
    return _ODA_Drawings.OdDbXRefMan_unload(*args)

def OdDbXRefMan_unloadAll(*args):
    return _ODA_Drawings.OdDbXRefMan_unloadAll(*args)

def OdDbXRefMan_bind(*args):
    return _ODA_Drawings.OdDbXRefMan_bind(*args)

def OdDbXRefMan_detach(*args):
    return _ODA_Drawings.OdDbXRefMan_detach(*args)

def OdDbXRefMan_setOverlaid(*args):
    return _ODA_Drawings.OdDbXRefMan_setOverlaid(*args)

class OdDbXRefManExt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def addNewXRefDefBlock(*args):
        return _ODA_Drawings.OdDbXRefManExt_addNewXRefDefBlock(*args)

    @staticmethod
    def addNewXRefDependentLayer(*args):
        return _ODA_Drawings.OdDbXRefManExt_addNewXRefDependentLayer(*args)

    @staticmethod
    def addNewXRefDependentLinetype(*args):
        return _ODA_Drawings.OdDbXRefManExt_addNewXRefDependentLinetype(*args)

    @staticmethod
    def addNewXRefDependentTextStyle(*args):
        return _ODA_Drawings.OdDbXRefManExt_addNewXRefDependentTextStyle(*args)

    @staticmethod
    def addNestedXRefId(*args):
        return _ODA_Drawings.OdDbXRefManExt_addNestedXRefId(*args)

    @staticmethod
    def getNestedXRefIds(*args):
        return _ODA_Drawings.OdDbXRefManExt_getNestedXRefIds(*args)

    @staticmethod
    def getSymbolTableRecordXrefBlockId(*args):
        return _ODA_Drawings.OdDbXRefManExt_getSymbolTableRecordXrefBlockId(*args)

    def __init__(self, *args):
        _ODA_Drawings.OdDbXRefManExt_swiginit(self, _ODA_Drawings.new_OdDbXRefManExt(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbXRefManExt

# Register OdDbXRefManExt in _ODA_Drawings:
_ODA_Drawings.OdDbXRefManExt_swigregister(OdDbXRefManExt)

def OdDbXRefManExt_addNewXRefDefBlock(*args):
    return _ODA_Drawings.OdDbXRefManExt_addNewXRefDefBlock(*args)

def OdDbXRefManExt_addNewXRefDependentLayer(*args):
    return _ODA_Drawings.OdDbXRefManExt_addNewXRefDependentLayer(*args)

def OdDbXRefManExt_addNewXRefDependentLinetype(*args):
    return _ODA_Drawings.OdDbXRefManExt_addNewXRefDependentLinetype(*args)

def OdDbXRefManExt_addNewXRefDependentTextStyle(*args):
    return _ODA_Drawings.OdDbXRefManExt_addNewXRefDependentTextStyle(*args)

def OdDbXRefManExt_addNestedXRefId(*args):
    return _ODA_Drawings.OdDbXRefManExt_addNestedXRefId(*args)

def OdDbXRefManExt_getNestedXRefIds(*args):
    return _ODA_Drawings.OdDbXRefManExt_getNestedXRefIds(*args)

def OdDbXRefManExt_getSymbolTableRecordXrefBlockId(*args):
    return _ODA_Drawings.OdDbXRefManExt_getSymbolTableRecordXrefBlockId(*args)

class OdVLObject(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdVLObject_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdVLObject_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdVLObject_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdVLObject_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdVLObject_createObject(*args)

    def getData(self, *args):
        return _ODA_Drawings.OdVLObject_getData(self, *args)

    def setData(self, *args):
        return _ODA_Drawings.OdVLObject_setData(self, *args)

    def getValues(self, *args):
        return _ODA_Drawings.OdVLObject_getValues(self, *args)

    def setValues(self, *args):
        return _ODA_Drawings.OdVLObject_setValues(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdVLObject_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdVLObject_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdVLObject_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdVLObject_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdVLObject

# Register OdVLObject in _ODA_Drawings:
_ODA_Drawings.OdVLObject_swigregister(OdVLObject)

def OdVLObject_cast(*args):
    return _ODA_Drawings.OdVLObject_cast(*args)

def OdVLObject_desc(*args):
    return _ODA_Drawings.OdVLObject_desc(*args)

def OdVLObject_createObject(*args):
    return _ODA_Drawings.OdVLObject_createObject(*args)

class OdAveScene(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdAveScene_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdAveScene_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdAveScene_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdAveScene_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdAveScene_createObject(*args)

    @staticmethod
    def getScene(*args):
        return _ODA_Drawings.OdAveScene_getScene(*args)

    @staticmethod
    def getSceneName(*args):
        return _ODA_Drawings.OdAveScene_getSceneName(*args)

    def writeScene(self, *args):
        return _ODA_Drawings.OdAveScene_writeScene(self, *args)

    def name(self, *args):
        return _ODA_Drawings.OdAveScene_name(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdAveScene_setName(self, *args)

    def view(self, *args):
        return _ODA_Drawings.OdAveScene_view(self, *args)

    def setView(self, *args):
        return _ODA_Drawings.OdAveScene_setView(self, *args)

    def lights(self, *args):
        return _ODA_Drawings.OdAveScene_lights(self, *args)

    def setLights(self, *args):
        return _ODA_Drawings.OdAveScene_setLights(self, *args)

    def addLight(self, *args):
        return _ODA_Drawings.OdAveScene_addLight(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdAveScene

# Register OdAveScene in _ODA_Drawings:
_ODA_Drawings.OdAveScene_swigregister(OdAveScene)

def OdAveScene_cast(*args):
    return _ODA_Drawings.OdAveScene_cast(*args)

def OdAveScene_desc(*args):
    return _ODA_Drawings.OdAveScene_desc(*args)

def OdAveScene_createObject(*args):
    return _ODA_Drawings.OdAveScene_createObject(*args)

def OdAveScene_getScene(*args):
    return _ODA_Drawings.OdAveScene_getScene(*args)

def OdAveScene_getSceneName(*args):
    return _ODA_Drawings.OdAveScene_getSceneName(*args)


def oddbGetScenes(*args):
    return _ODA_Drawings.oddbGetScenes(*args)
class OdAvePref(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdAvePref_swiginit(self, _ODA_Drawings.new_OdAvePref(*args))
    m_RenderType = property(_ODA_Drawings.OdAvePref_m_RenderType_get, _ODA_Drawings.OdAvePref_m_RenderType_set)
    m_Destination = property(_ODA_Drawings.OdAvePref_m_Destination_get, _ODA_Drawings.OdAvePref_m_Destination_set)
    m_Scene = property(_ODA_Drawings.OdAvePref_m_Scene_get, _ODA_Drawings.OdAvePref_m_Scene_set)
    m_nSubSampling = property(_ODA_Drawings.OdAvePref_m_nSubSampling_get, _ODA_Drawings.OdAvePref_m_nSubSampling_set)
    m_dLightIconScale = property(_ODA_Drawings.OdAvePref_m_dLightIconScale_get, _ODA_Drawings.OdAvePref_m_dLightIconScale_set)
    m_dSmoothingAngle = property(_ODA_Drawings.OdAvePref_m_dSmoothingAngle_get, _ODA_Drawings.OdAvePref_m_dSmoothingAngle_set)
    m_dPreviewObjectSize = property(_ODA_Drawings.OdAvePref_m_dPreviewObjectSize_get, _ODA_Drawings.OdAvePref_m_dPreviewObjectSize_set)
    m_bSmoothShade = property(_ODA_Drawings.OdAvePref_m_bSmoothShade_get, _ODA_Drawings.OdAvePref_m_bSmoothShade_set)
    m_bShadows = property(_ODA_Drawings.OdAvePref_m_bShadows_get, _ODA_Drawings.OdAvePref_m_bShadows_set)
    m_bApplyMaterials = property(_ODA_Drawings.OdAvePref_m_bApplyMaterials_get, _ODA_Drawings.OdAvePref_m_bApplyMaterials_set)
    m_bCropWindow = property(_ODA_Drawings.OdAvePref_m_bCropWindow_get, _ODA_Drawings.OdAvePref_m_bCropWindow_set)
    m_bRenderCache = property(_ODA_Drawings.OdAvePref_m_bRenderCache_get, _ODA_Drawings.OdAvePref_m_bRenderCache_set)
    m_bQueryForSelections = property(_ODA_Drawings.OdAvePref_m_bQueryForSelections_get, _ODA_Drawings.OdAvePref_m_bQueryForSelections_set)
    m_bSkipRenderDlg = property(_ODA_Drawings.OdAvePref_m_bSkipRenderDlg_get, _ODA_Drawings.OdAvePref_m_bSkipRenderDlg_set)
    m_dLightIntensity = property(_ODA_Drawings.OdAvePref_m_dLightIntensity_get, _ODA_Drawings.OdAvePref_m_dLightIntensity_set)
    m_nLightColor = property(_ODA_Drawings.OdAvePref_m_nLightColor_get, _ODA_Drawings.OdAvePref_m_nLightColor_set)
    m_NorthUcsName = property(_ODA_Drawings.OdAvePref_m_NorthUcsName_get, _ODA_Drawings.OdAvePref_m_NorthUcsName_set)
    m_dNorthAngle = property(_ODA_Drawings.OdAvePref_m_dNorthAngle_get, _ODA_Drawings.OdAvePref_m_dNorthAngle_set)
    m_dAmbientFactor = property(_ODA_Drawings.OdAvePref_m_dAmbientFactor_get, _ODA_Drawings.OdAvePref_m_dAmbientFactor_set)
    m_dDiffuseFactor = property(_ODA_Drawings.OdAvePref_m_dDiffuseFactor_get, _ODA_Drawings.OdAvePref_m_dDiffuseFactor_set)
    m_dSpecularFactor = property(_ODA_Drawings.OdAvePref_m_dSpecularFactor_get, _ODA_Drawings.OdAvePref_m_dSpecularFactor_set)
    m_dRoughness = property(_ODA_Drawings.OdAvePref_m_dRoughness_get, _ODA_Drawings.OdAvePref_m_dRoughness_set)
    m_nDiffuseColor = property(_ODA_Drawings.OdAvePref_m_nDiffuseColor_get, _ODA_Drawings.OdAvePref_m_nDiffuseColor_set)
    m_bCurrentDiffuseColor = property(_ODA_Drawings.OdAvePref_m_bCurrentDiffuseColor_get, _ODA_Drawings.OdAvePref_m_bCurrentDiffuseColor_set)
    __swig_destroy__ = _ODA_Drawings.delete_OdAvePref

# Register OdAvePref in _ODA_Drawings:
_ODA_Drawings.OdAvePref_swigregister(OdAvePref)

class OdAveFullOpt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdAveFullOpt_swiginit(self, _ODA_Drawings.new_OdAveFullOpt(*args))
    m_RenderQuality = property(_ODA_Drawings.OdAveFullOpt_m_RenderQuality_get, _ODA_Drawings.OdAveFullOpt_m_RenderQuality_set)
    m_bDiscardBackFaces = property(_ODA_Drawings.OdAveFullOpt_m_bDiscardBackFaces_get, _ODA_Drawings.OdAveFullOpt_m_bDiscardBackFaces_set)
    m_bNegativeNormal = property(_ODA_Drawings.OdAveFullOpt_m_bNegativeNormal_get, _ODA_Drawings.OdAveFullOpt_m_bNegativeNormal_set)
    __swig_destroy__ = _ODA_Drawings.delete_OdAveFullOpt

# Register OdAveFullOpt in _ODA_Drawings:
_ODA_Drawings.OdAveFullOpt_swigregister(OdAveFullOpt)

class OdAveScanlOpt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdAveScanlOpt_swiginit(self, _ODA_Drawings.new_OdAveScanlOpt(*args))
    m_AntiAliasing = property(_ODA_Drawings.OdAveScanlOpt_m_AntiAliasing_get, _ODA_Drawings.OdAveScanlOpt_m_AntiAliasing_set)
    m_TextureMapSampling = property(_ODA_Drawings.OdAveScanlOpt_m_TextureMapSampling_get, _ODA_Drawings.OdAveScanlOpt_m_TextureMapSampling_set)
    m_dShadowDepthMinBias = property(_ODA_Drawings.OdAveScanlOpt_m_dShadowDepthMinBias_get, _ODA_Drawings.OdAveScanlOpt_m_dShadowDepthMinBias_set)
    m_dShadowDepthMaxBias = property(_ODA_Drawings.OdAveScanlOpt_m_dShadowDepthMaxBias_get, _ODA_Drawings.OdAveScanlOpt_m_dShadowDepthMaxBias_set)
    m_dAdaptSamplThreshold = property(_ODA_Drawings.OdAveScanlOpt_m_dAdaptSamplThreshold_get, _ODA_Drawings.OdAveScanlOpt_m_dAdaptSamplThreshold_set)
    m_bAdaptSampl = property(_ODA_Drawings.OdAveScanlOpt_m_bAdaptSampl_get, _ODA_Drawings.OdAveScanlOpt_m_bAdaptSampl_set)
    m_bDiscardBackFaces = property(_ODA_Drawings.OdAveScanlOpt_m_bDiscardBackFaces_get, _ODA_Drawings.OdAveScanlOpt_m_bDiscardBackFaces_set)
    m_bNegativeNormal = property(_ODA_Drawings.OdAveScanlOpt_m_bNegativeNormal_get, _ODA_Drawings.OdAveScanlOpt_m_bNegativeNormal_set)
    __swig_destroy__ = _ODA_Drawings.delete_OdAveScanlOpt

# Register OdAveScanlOpt in _ODA_Drawings:
_ODA_Drawings.OdAveScanlOpt_swigregister(OdAveScanlOpt)

class OdAveRaytrOpt(OdAveScanlOpt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdAveRaytrOpt_swiginit(self, _ODA_Drawings.new_OdAveRaytrOpt(*args))
    m_nRayTreeMaxDepth = property(_ODA_Drawings.OdAveRaytrOpt_m_nRayTreeMaxDepth_get, _ODA_Drawings.OdAveRaytrOpt_m_nRayTreeMaxDepth_set)
    m_dRayTreeCutoffThreshold = property(_ODA_Drawings.OdAveRaytrOpt_m_dRayTreeCutoffThreshold_get, _ODA_Drawings.OdAveRaytrOpt_m_dRayTreeCutoffThreshold_set)
    __swig_destroy__ = _ODA_Drawings.delete_OdAveRaytrOpt

# Register OdAveRaytrOpt in _ODA_Drawings:
_ODA_Drawings.OdAveRaytrOpt_swigregister(OdAveRaytrOpt)

class OdAveRFileOpt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdAveRFileOpt_swiginit(self, _ODA_Drawings.new_OdAveRFileOpt(*args))
    m_nFileType = property(_ODA_Drawings.OdAveRFileOpt_m_nFileType_get, _ODA_Drawings.OdAveRFileOpt_m_nFileType_set)
    m_nX = property(_ODA_Drawings.OdAveRFileOpt_m_nX_get, _ODA_Drawings.OdAveRFileOpt_m_nX_set)
    m_nY = property(_ODA_Drawings.OdAveRFileOpt_m_nY_get, _ODA_Drawings.OdAveRFileOpt_m_nY_set)
    m_nAspectRatio = property(_ODA_Drawings.OdAveRFileOpt_m_nAspectRatio_get, _ODA_Drawings.OdAveRFileOpt_m_nAspectRatio_set)
    m_nColorBits1 = property(_ODA_Drawings.OdAveRFileOpt_m_nColorBits1_get, _ODA_Drawings.OdAveRFileOpt_m_nColorBits1_set)
    m_nColorBits2 = property(_ODA_Drawings.OdAveRFileOpt_m_nColorBits2_get, _ODA_Drawings.OdAveRFileOpt_m_nColorBits2_set)
    m_bGrayscale = property(_ODA_Drawings.OdAveRFileOpt_m_bGrayscale_get, _ODA_Drawings.OdAveRFileOpt_m_bGrayscale_set)
    m_bCompressed = property(_ODA_Drawings.OdAveRFileOpt_m_bCompressed_get, _ODA_Drawings.OdAveRFileOpt_m_bCompressed_set)
    m_nOrientation = property(_ODA_Drawings.OdAveRFileOpt_m_nOrientation_get, _ODA_Drawings.OdAveRFileOpt_m_nOrientation_set)
    m_nInterlace = property(_ODA_Drawings.OdAveRFileOpt_m_nInterlace_get, _ODA_Drawings.OdAveRFileOpt_m_nInterlace_set)
    m_nPostScriptImgSize = property(_ODA_Drawings.OdAveRFileOpt_m_nPostScriptImgSize_get, _ODA_Drawings.OdAveRFileOpt_m_nPostScriptImgSize_set)
    __swig_destroy__ = _ODA_Drawings.delete_OdAveRFileOpt

# Register OdAveRFileOpt in _ODA_Drawings:
_ODA_Drawings.OdAveRFileOpt_swigregister(OdAveRFileOpt)

class OdAveFogOpt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdAveFogOpt_swiginit(self, _ODA_Drawings.new_OdAveFogOpt(*args))
    m_bFogEnabled = property(_ODA_Drawings.OdAveFogOpt_m_bFogEnabled_get, _ODA_Drawings.OdAveFogOpt_m_bFogEnabled_set)
    m_bFogBackground = property(_ODA_Drawings.OdAveFogOpt_m_bFogBackground_get, _ODA_Drawings.OdAveFogOpt_m_bFogBackground_set)
    m_dNearDistance = property(_ODA_Drawings.OdAveFogOpt_m_dNearDistance_get, _ODA_Drawings.OdAveFogOpt_m_dNearDistance_set)
    m_dFarDistance = property(_ODA_Drawings.OdAveFogOpt_m_dFarDistance_get, _ODA_Drawings.OdAveFogOpt_m_dFarDistance_set)
    m_dNearPercentage = property(_ODA_Drawings.OdAveFogOpt_m_dNearPercentage_get, _ODA_Drawings.OdAveFogOpt_m_dNearPercentage_set)
    m_dFarPercentage = property(_ODA_Drawings.OdAveFogOpt_m_dFarPercentage_get, _ODA_Drawings.OdAveFogOpt_m_dFarPercentage_set)
    m_Color = property(_ODA_Drawings.OdAveFogOpt_m_Color_get, _ODA_Drawings.OdAveFogOpt_m_Color_set)
    __swig_destroy__ = _ODA_Drawings.delete_OdAveFogOpt

# Register OdAveFogOpt in _ODA_Drawings:
_ODA_Drawings.OdAveFogOpt_swigregister(OdAveFogOpt)

class OdAveBGOpt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdAveBGOpt_swiginit(self, _ODA_Drawings.new_OdAveBGOpt(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdAveBGOpt
    m_BgType = property(_ODA_Drawings.OdAveBGOpt_m_BgType_get, _ODA_Drawings.OdAveBGOpt_m_BgType_set)
    m_pImage = property(_ODA_Drawings.OdAveBGOpt_m_pImage_get, _ODA_Drawings.OdAveBGOpt_m_pImage_set)
    m_bDefaultBackground = property(_ODA_Drawings.OdAveBGOpt_m_bDefaultBackground_get, _ODA_Drawings.OdAveBGOpt_m_bDefaultBackground_set)
    m_SolidColor = property(_ODA_Drawings.OdAveBGOpt_m_SolidColor_get, _ODA_Drawings.OdAveBGOpt_m_SolidColor_set)
    m_GrColor1 = property(_ODA_Drawings.OdAveBGOpt_m_GrColor1_get, _ODA_Drawings.OdAveBGOpt_m_GrColor1_set)
    m_GrColor2 = property(_ODA_Drawings.OdAveBGOpt_m_GrColor2_get, _ODA_Drawings.OdAveBGOpt_m_GrColor2_set)
    m_GrColor3 = property(_ODA_Drawings.OdAveBGOpt_m_GrColor3_get, _ODA_Drawings.OdAveBGOpt_m_GrColor3_set)
    m_dGrHorizon = property(_ODA_Drawings.OdAveBGOpt_m_dGrHorizon_get, _ODA_Drawings.OdAveBGOpt_m_dGrHorizon_set)
    m_dGrHeight = property(_ODA_Drawings.OdAveBGOpt_m_dGrHeight_get, _ODA_Drawings.OdAveBGOpt_m_dGrHeight_set)
    m_dGrRotation = property(_ODA_Drawings.OdAveBGOpt_m_dGrRotation_get, _ODA_Drawings.OdAveBGOpt_m_dGrRotation_set)
    m_bEnvBackground = property(_ODA_Drawings.OdAveBGOpt_m_bEnvBackground_get, _ODA_Drawings.OdAveBGOpt_m_bEnvBackground_set)
    m_EnvImageName = property(_ODA_Drawings.OdAveBGOpt_m_EnvImageName_get, _ODA_Drawings.OdAveBGOpt_m_EnvImageName_set)

# Register OdAveBGOpt in _ODA_Drawings:
_ODA_Drawings.OdAveBGOpt_swigregister(OdAveBGOpt)

class OdAveRenderOption(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getRenderOption(self, *args):
        return _ODA_Drawings.OdAveRenderOption_getRenderOption(self, *args)

    def writeRenderOption(self, *args):
        return _ODA_Drawings.OdAveRenderOption_writeRenderOption(self, *args)
    m_Pref = property(_ODA_Drawings.OdAveRenderOption_m_Pref_get, _ODA_Drawings.OdAveRenderOption_m_Pref_set)
    m_FullOpt = property(_ODA_Drawings.OdAveRenderOption_m_FullOpt_get, _ODA_Drawings.OdAveRenderOption_m_FullOpt_set)
    m_ScanlOpt = property(_ODA_Drawings.OdAveRenderOption_m_ScanlOpt_get, _ODA_Drawings.OdAveRenderOption_m_ScanlOpt_set)
    m_RaytrOpt = property(_ODA_Drawings.OdAveRenderOption_m_RaytrOpt_get, _ODA_Drawings.OdAveRenderOption_m_RaytrOpt_set)
    m_RFileOpt = property(_ODA_Drawings.OdAveRenderOption_m_RFileOpt_get, _ODA_Drawings.OdAveRenderOption_m_RFileOpt_set)
    m_FogOpt = property(_ODA_Drawings.OdAveRenderOption_m_FogOpt_get, _ODA_Drawings.OdAveRenderOption_m_FogOpt_set)
    m_BGOpt = property(_ODA_Drawings.OdAveRenderOption_m_BGOpt_get, _ODA_Drawings.OdAveRenderOption_m_BGOpt_set)

    def __init__(self, *args):
        _ODA_Drawings.OdAveRenderOption_swiginit(self, _ODA_Drawings.new_OdAveRenderOption(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdAveRenderOption

# Register OdAveRenderOption in _ODA_Drawings:
_ODA_Drawings.OdAveRenderOption_swigregister(OdAveRenderOption)

class OdAveMaterial(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdAveMaterial_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdAveMaterial_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdAveMaterial_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdAveMaterial_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdAveMaterial_createObject(*args)

    @staticmethod
    def getMaterial(*args):
        return _ODA_Drawings.OdAveMaterial_getMaterial(*args)

    @staticmethod
    def getMaterialName(*args):
        return _ODA_Drawings.OdAveMaterial_getMaterialName(*args)

    def writeMaterial(self, *args):
        return _ODA_Drawings.OdAveMaterial_writeMaterial(self, *args)

    def attachToObject(self, *args):
        return _ODA_Drawings.OdAveMaterial_attachToObject(self, *args)

    def attachToLayer(self, *args):
        return _ODA_Drawings.OdAveMaterial_attachToLayer(self, *args)

    def attachToACI(self, *args):
        return _ODA_Drawings.OdAveMaterial_attachToACI(self, *args)

    @staticmethod
    def detachFromObject(*args):
        return _ODA_Drawings.OdAveMaterial_detachFromObject(*args)

    @staticmethod
    def detachFromLayer(*args):
        return _ODA_Drawings.OdAveMaterial_detachFromLayer(*args)

    @staticmethod
    def detachFromACI(*args):
        return _ODA_Drawings.OdAveMaterial_detachFromACI(*args)

    @staticmethod
    def getAttachedMaterial(*args):
        return _ODA_Drawings.OdAveMaterial_getAttachedMaterial(*args)

    @staticmethod
    def getAciMaterialMap(*args):
        return _ODA_Drawings.OdAveMaterial_getAciMaterialMap(*args)

    def type(self, *args):
        return _ODA_Drawings.OdAveMaterial_type(self, *args)

    def isAttribUsed(self, *args):
        return _ODA_Drawings.OdAveMaterial_isAttribUsed(self, *args)

    def name(self, *args):
        return _ODA_Drawings.OdAveMaterial_name(self, *args)

    def description(self, *args):
        return _ODA_Drawings.OdAveMaterial_description(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdAveMaterial_setName(self, *args)

    def setDescription(self, *args):
        return _ODA_Drawings.OdAveMaterial_setDescription(self, *args)

    def ambientFactor(self, *args):
        return _ODA_Drawings.OdAveMaterial_ambientFactor(self, *args)

    def ambientColor(self, *args):
        return _ODA_Drawings.OdAveMaterial_ambientColor(self, *args)

    def ambientColorCurrent(self, *args):
        return _ODA_Drawings.OdAveMaterial_ambientColorCurrent(self, *args)

    def ambientLock(self, *args):
        return _ODA_Drawings.OdAveMaterial_ambientLock(self, *args)

    def setAmbientFactor(self, *args):
        return _ODA_Drawings.OdAveMaterial_setAmbientFactor(self, *args)

    def setAmbientColor(self, *args):
        return _ODA_Drawings.OdAveMaterial_setAmbientColor(self, *args)

    def setAmbientColorCurrent(self, *args):
        return _ODA_Drawings.OdAveMaterial_setAmbientColorCurrent(self, *args)

    def setAmbientLock(self, *args):
        return _ODA_Drawings.OdAveMaterial_setAmbientLock(self, *args)

    def diffuseFactor(self, *args):
        return _ODA_Drawings.OdAveMaterial_diffuseFactor(self, *args)

    def diffuseColor(self, *args):
        return _ODA_Drawings.OdAveMaterial_diffuseColor(self, *args)

    def diffuseColorCurrent(self, *args):
        return _ODA_Drawings.OdAveMaterial_diffuseColorCurrent(self, *args)

    def diffuseBitmap(self, *args):
        return _ODA_Drawings.OdAveMaterial_diffuseBitmap(self, *args)

    def setDiffuseFactor(self, *args):
        return _ODA_Drawings.OdAveMaterial_setDiffuseFactor(self, *args)

    def setDiffuseColor(self, *args):
        return _ODA_Drawings.OdAveMaterial_setDiffuseColor(self, *args)

    def setDiffuseColorCurrent(self, *args):
        return _ODA_Drawings.OdAveMaterial_setDiffuseColorCurrent(self, *args)

    def specularFactor(self, *args):
        return _ODA_Drawings.OdAveMaterial_specularFactor(self, *args)

    def specularColor(self, *args):
        return _ODA_Drawings.OdAveMaterial_specularColor(self, *args)

    def specularColorCurrent(self, *args):
        return _ODA_Drawings.OdAveMaterial_specularColorCurrent(self, *args)

    def specularMirror(self, *args):
        return _ODA_Drawings.OdAveMaterial_specularMirror(self, *args)

    def specularLock(self, *args):
        return _ODA_Drawings.OdAveMaterial_specularLock(self, *args)

    def specularBitmap(self, *args):
        return _ODA_Drawings.OdAveMaterial_specularBitmap(self, *args)

    def setSpecularFactor(self, *args):
        return _ODA_Drawings.OdAveMaterial_setSpecularFactor(self, *args)

    def setSpecularColor(self, *args):
        return _ODA_Drawings.OdAveMaterial_setSpecularColor(self, *args)

    def setSpecularMirror(self, *args):
        return _ODA_Drawings.OdAveMaterial_setSpecularMirror(self, *args)

    def setSpecularLock(self, *args):
        return _ODA_Drawings.OdAveMaterial_setSpecularLock(self, *args)

    def roughness(self, *args):
        return _ODA_Drawings.OdAveMaterial_roughness(self, *args)

    def setRoughness(self, *args):
        return _ODA_Drawings.OdAveMaterial_setRoughness(self, *args)

    def transparency(self, *args):
        return _ODA_Drawings.OdAveMaterial_transparency(self, *args)

    def transparencyBitmap(self, *args):
        return _ODA_Drawings.OdAveMaterial_transparencyBitmap(self, *args)

    def setTransparency(self, *args):
        return _ODA_Drawings.OdAveMaterial_setTransparency(self, *args)

    def refraction(self, *args):
        return _ODA_Drawings.OdAveMaterial_refraction(self, *args)

    def setRefraction(self, *args):
        return _ODA_Drawings.OdAveMaterial_setRefraction(self, *args)

    def bumpMap(self, *args):
        return _ODA_Drawings.OdAveMaterial_bumpMap(self, *args)

    def holderId(self, *args):
        return _ODA_Drawings.OdAveMaterial_holderId(self, *args)

    def handleDbMaterial(self, *args):
        return _ODA_Drawings.OdAveMaterial_handleDbMaterial(self, *args)

    def setHandleDbMaterial(self, *args):
        return _ODA_Drawings.OdAveMaterial_setHandleDbMaterial(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdAveMaterial

# Register OdAveMaterial in _ODA_Drawings:
_ODA_Drawings.OdAveMaterial_swigregister(OdAveMaterial)

def OdAveMaterial_cast(*args):
    return _ODA_Drawings.OdAveMaterial_cast(*args)

def OdAveMaterial_desc(*args):
    return _ODA_Drawings.OdAveMaterial_desc(*args)

def OdAveMaterial_createObject(*args):
    return _ODA_Drawings.OdAveMaterial_createObject(*args)

def OdAveMaterial_getMaterial(*args):
    return _ODA_Drawings.OdAveMaterial_getMaterial(*args)

def OdAveMaterial_getMaterialName(*args):
    return _ODA_Drawings.OdAveMaterial_getMaterialName(*args)

def OdAveMaterial_detachFromObject(*args):
    return _ODA_Drawings.OdAveMaterial_detachFromObject(*args)

def OdAveMaterial_detachFromLayer(*args):
    return _ODA_Drawings.OdAveMaterial_detachFromLayer(*args)

def OdAveMaterial_detachFromACI(*args):
    return _ODA_Drawings.OdAveMaterial_detachFromACI(*args)

def OdAveMaterial_getAttachedMaterial(*args):
    return _ODA_Drawings.OdAveMaterial_getAttachedMaterial(*args)

def OdAveMaterial_getAciMaterialMap(*args):
    return _ODA_Drawings.OdAveMaterial_getAciMaterialMap(*args)

class OdAveGraniteMaterial(OdAveMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdAveGraniteMaterial_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdAveGraniteMaterial_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdAveGraniteMaterial_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdAveGraniteMaterial_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdAveGraniteMaterial_createObject(*args)
    kFirst = _ODA_Drawings.OdAveGraniteMaterial_kFirst
    kSecond = _ODA_Drawings.OdAveGraniteMaterial_kSecond
    kThird = _ODA_Drawings.OdAveGraniteMaterial_kThird
    kFourth = _ODA_Drawings.OdAveGraniteMaterial_kFourth

    def type(self, *args):
        return _ODA_Drawings.OdAveGraniteMaterial_type(self, *args)

    def colorFactor(self, *args):
        return _ODA_Drawings.OdAveGraniteMaterial_colorFactor(self, *args)

    def color(self, *args):
        return _ODA_Drawings.OdAveGraniteMaterial_color(self, *args)

    def setColorFactor(self, *args):
        return _ODA_Drawings.OdAveGraniteMaterial_setColorFactor(self, *args)

    def setColor(self, *args):
        return _ODA_Drawings.OdAveGraniteMaterial_setColor(self, *args)

    def sharpness(self, *args):
        return _ODA_Drawings.OdAveGraniteMaterial_sharpness(self, *args)

    def setSharpness(self, *args):
        return _ODA_Drawings.OdAveGraniteMaterial_setSharpness(self, *args)

    def scale(self, *args):
        return _ODA_Drawings.OdAveGraniteMaterial_scale(self, *args)

    def setScale(self, *args):
        return _ODA_Drawings.OdAveGraniteMaterial_setScale(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdAveGraniteMaterial

# Register OdAveGraniteMaterial in _ODA_Drawings:
_ODA_Drawings.OdAveGraniteMaterial_swigregister(OdAveGraniteMaterial)

def OdAveGraniteMaterial_cast(*args):
    return _ODA_Drawings.OdAveGraniteMaterial_cast(*args)

def OdAveGraniteMaterial_desc(*args):
    return _ODA_Drawings.OdAveGraniteMaterial_desc(*args)

def OdAveGraniteMaterial_createObject(*args):
    return _ODA_Drawings.OdAveGraniteMaterial_createObject(*args)

class OdAveMarbleMaterial(OdAveMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdAveMarbleMaterial_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdAveMarbleMaterial_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdAveMarbleMaterial_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdAveMarbleMaterial_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdAveMarbleMaterial_createObject(*args)

    def type(self, *args):
        return _ODA_Drawings.OdAveMarbleMaterial_type(self, *args)

    def stoneColor(self, *args):
        return _ODA_Drawings.OdAveMarbleMaterial_stoneColor(self, *args)

    def veinColor(self, *args):
        return _ODA_Drawings.OdAveMarbleMaterial_veinColor(self, *args)

    def turbulence(self, *args):
        return _ODA_Drawings.OdAveMarbleMaterial_turbulence(self, *args)

    def setTurbulence(self, *args):
        return _ODA_Drawings.OdAveMarbleMaterial_setTurbulence(self, *args)

    def sharpness(self, *args):
        return _ODA_Drawings.OdAveMarbleMaterial_sharpness(self, *args)

    def setSharpness(self, *args):
        return _ODA_Drawings.OdAveMarbleMaterial_setSharpness(self, *args)

    def scale(self, *args):
        return _ODA_Drawings.OdAveMarbleMaterial_scale(self, *args)

    def setScale(self, *args):
        return _ODA_Drawings.OdAveMarbleMaterial_setScale(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdAveMarbleMaterial

# Register OdAveMarbleMaterial in _ODA_Drawings:
_ODA_Drawings.OdAveMarbleMaterial_swigregister(OdAveMarbleMaterial)

def OdAveMarbleMaterial_cast(*args):
    return _ODA_Drawings.OdAveMarbleMaterial_cast(*args)

def OdAveMarbleMaterial_desc(*args):
    return _ODA_Drawings.OdAveMarbleMaterial_desc(*args)

def OdAveMarbleMaterial_createObject(*args):
    return _ODA_Drawings.OdAveMarbleMaterial_createObject(*args)

class OdAveWoodMaterial(OdAveMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdAveWoodMaterial_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdAveWoodMaterial_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdAveWoodMaterial_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdAveWoodMaterial_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdAveWoodMaterial_createObject(*args)

    def type(self, *args):
        return _ODA_Drawings.OdAveWoodMaterial_type(self, *args)

    def lightColor(self, *args):
        return _ODA_Drawings.OdAveWoodMaterial_lightColor(self, *args)

    def darkColor(self, *args):
        return _ODA_Drawings.OdAveWoodMaterial_darkColor(self, *args)

    def setLightColor(self, *args):
        return _ODA_Drawings.OdAveWoodMaterial_setLightColor(self, *args)

    def setDarkColor(self, *args):
        return _ODA_Drawings.OdAveWoodMaterial_setDarkColor(self, *args)

    def lightDark(self, *args):
        return _ODA_Drawings.OdAveWoodMaterial_lightDark(self, *args)

    def setLightDark(self, *args):
        return _ODA_Drawings.OdAveWoodMaterial_setLightDark(self, *args)

    def ringDensity(self, *args):
        return _ODA_Drawings.OdAveWoodMaterial_ringDensity(self, *args)

    def setRingDensity(self, *args):
        return _ODA_Drawings.OdAveWoodMaterial_setRingDensity(self, *args)

    def ringWidth(self, *args):
        return _ODA_Drawings.OdAveWoodMaterial_ringWidth(self, *args)

    def setRingWidth(self, *args):
        return _ODA_Drawings.OdAveWoodMaterial_setRingWidth(self, *args)

    def ringShape(self, *args):
        return _ODA_Drawings.OdAveWoodMaterial_ringShape(self, *args)

    def setRingShape(self, *args):
        return _ODA_Drawings.OdAveWoodMaterial_setRingShape(self, *args)

    def scale(self, *args):
        return _ODA_Drawings.OdAveWoodMaterial_scale(self, *args)

    def setScale(self, *args):
        return _ODA_Drawings.OdAveWoodMaterial_setScale(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdAveWoodMaterial

# Register OdAveWoodMaterial in _ODA_Drawings:
_ODA_Drawings.OdAveWoodMaterial_swigregister(OdAveWoodMaterial)

def OdAveWoodMaterial_cast(*args):
    return _ODA_Drawings.OdAveWoodMaterial_cast(*args)

def OdAveWoodMaterial_desc(*args):
    return _ODA_Drawings.OdAveWoodMaterial_desc(*args)

def OdAveWoodMaterial_createObject(*args):
    return _ODA_Drawings.OdAveWoodMaterial_createObject(*args)


def oddbGetMaterialIds(*args):
    return _ODA_Drawings.oddbGetMaterialIds(*args)

def oddbGetMaterials(*args):
    return _ODA_Drawings.oddbGetMaterials(*args)
class OdAveMapping(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdAveMapping_swiginit(self, _ODA_Drawings.new_OdAveMapping(*args))

    def getMapping(self, *args):
        return _ODA_Drawings.OdAveMapping_getMapping(self, *args)

    def setMapping(self, *args):
        return _ODA_Drawings.OdAveMapping_setMapping(self, *args)

    @staticmethod
    def clearMapping(*args):
        return _ODA_Drawings.OdAveMapping_clearMapping(*args)
    m_MappingType = property(_ODA_Drawings.OdAveMapping_m_MappingType_get, _ODA_Drawings.OdAveMapping_m_MappingType_set)
    m_Pt1 = property(_ODA_Drawings.OdAveMapping_m_Pt1_get, _ODA_Drawings.OdAveMapping_m_Pt1_set)
    m_Pt2 = property(_ODA_Drawings.OdAveMapping_m_Pt2_get, _ODA_Drawings.OdAveMapping_m_Pt2_set)
    m_Pt3 = property(_ODA_Drawings.OdAveMapping_m_Pt3_get, _ODA_Drawings.OdAveMapping_m_Pt3_set)
    m_Pt4 = property(_ODA_Drawings.OdAveMapping_m_Pt4_get, _ODA_Drawings.OdAveMapping_m_Pt4_set)
    m_Tile = property(_ODA_Drawings.OdAveMapping_m_Tile_get, _ODA_Drawings.OdAveMapping_m_Tile_set)
    m_Scale = property(_ODA_Drawings.OdAveMapping_m_Scale_get, _ODA_Drawings.OdAveMapping_m_Scale_set)
    m_Offset = property(_ODA_Drawings.OdAveMapping_m_Offset_get, _ODA_Drawings.OdAveMapping_m_Offset_set)
    m_Transform = property(_ODA_Drawings.OdAveMapping_m_Transform_get, _ODA_Drawings.OdAveMapping_m_Transform_set)
    __swig_destroy__ = _ODA_Drawings.delete_OdAveMapping

# Register OdAveMapping in _ODA_Drawings:
_ODA_Drawings.OdAveMapping_swigregister(OdAveMapping)

def OdAveMapping_clearMapping(*args):
    return _ODA_Drawings.OdAveMapping_clearMapping(*args)

class OdAveLight(ODA_Kernel.OdGsLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdAveLight_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdAveLight_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdAveLight_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdAveLight_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdAveLight_createObject(*args)

    @staticmethod
    def getLight(*args):
        return _ODA_Drawings.OdAveLight_getLight(*args)

    @staticmethod
    def getLightName(*args):
        return _ODA_Drawings.OdAveLight_getLightName(*args)

    def writeLight(self, *args):
        return _ODA_Drawings.OdAveLight_writeLight(self, *args)

    def type(self, *args):
        return _ODA_Drawings.OdAveLight_type(self, *args)

    def setType(self, *args):
        return _ODA_Drawings.OdAveLight_setType(self, *args)

    def name(self, *args):
        return _ODA_Drawings.OdAveLight_name(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdAveLight_setName(self, *args)

    def intensity(self, *args):
        return _ODA_Drawings.OdAveLight_intensity(self, *args)

    def setIntensity(self, *args):
        return _ODA_Drawings.OdAveLight_setIntensity(self, *args)

    def color(self, *args):
        return _ODA_Drawings.OdAveLight_color(self, *args)

    def setColor(self, *args):
        return _ODA_Drawings.OdAveLight_setColor(self, *args)

    def position(self, *args):
        return _ODA_Drawings.OdAveLight_position(self, *args)

    def target(self, *args):
        return _ODA_Drawings.OdAveLight_target(self, *args)

    def direction(self, *args):
        return _ODA_Drawings.OdAveLight_direction(self, *args)

    def setPosition(self, *args):
        return _ODA_Drawings.OdAveLight_setPosition(self, *args)

    def setTarget(self, *args):
        return _ODA_Drawings.OdAveLight_setTarget(self, *args)

    def setDirection(self, *args):
        return _ODA_Drawings.OdAveLight_setDirection(self, *args)

    def attenuation(self, *args):
        return _ODA_Drawings.OdAveLight_attenuation(self, *args)

    def setAttenuation(self, *args):
        return _ODA_Drawings.OdAveLight_setAttenuation(self, *args)

    def innerConeAngle(self, *args):
        return _ODA_Drawings.OdAveLight_innerConeAngle(self, *args)

    def outerConeAngle(self, *args):
        return _ODA_Drawings.OdAveLight_outerConeAngle(self, *args)

    def setConeAngle(self, *args):
        return _ODA_Drawings.OdAveLight_setConeAngle(self, *args)

    def isShadowOn(self, *args):
        return _ODA_Drawings.OdAveLight_isShadowOn(self, *args)

    def setShadowOn(self, *args):
        return _ODA_Drawings.OdAveLight_setShadowOn(self, *args)

    def isShadowVolumes(self, *args):
        return _ODA_Drawings.OdAveLight_isShadowVolumes(self, *args)

    def setShadowVolumes(self, *args):
        return _ODA_Drawings.OdAveLight_setShadowVolumes(self, *args)

    def shadowMapSize(self, *args):
        return _ODA_Drawings.OdAveLight_shadowMapSize(self, *args)

    def shadowSoftness(self, *args):
        return _ODA_Drawings.OdAveLight_shadowSoftness(self, *args)

    def setShadowSoftness(self, *args):
        return _ODA_Drawings.OdAveLight_setShadowSoftness(self, *args)

    def shadowBoundingObjects(self, *args):
        return _ODA_Drawings.OdAveLight_shadowBoundingObjects(self, *args)

    def setShadowBoundingObjects(self, *args):
        return _ODA_Drawings.OdAveLight_setShadowBoundingObjects(self, *args)

    def addShadowBoundingObject(self, *args):
        return _ODA_Drawings.OdAveLight_addShadowBoundingObject(self, *args)

    def holderId(self, *args):
        return _ODA_Drawings.OdAveLight_holderId(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdAveLight

# Register OdAveLight in _ODA_Drawings:
_ODA_Drawings.OdAveLight_swigregister(OdAveLight)

def OdAveLight_cast(*args):
    return _ODA_Drawings.OdAveLight_cast(*args)

def OdAveLight_desc(*args):
    return _ODA_Drawings.OdAveLight_desc(*args)

def OdAveLight_createObject(*args):
    return _ODA_Drawings.OdAveLight_createObject(*args)

def OdAveLight_getLight(*args):
    return _ODA_Drawings.OdAveLight_getLight(*args)

def OdAveLight_getLightName(*args):
    return _ODA_Drawings.OdAveLight_getLightName(*args)


def oddbGetLights(*args):
    return _ODA_Drawings.oddbGetLights(*args)
class OdTfDigest(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_ODA_Drawings.OdTfDigest_data_get, _ODA_Drawings.OdTfDigest_data_set)

    def write(self, *args):
        return _ODA_Drawings.OdTfDigest_write(self, *args)

    def read(self, *args):
        return _ODA_Drawings.OdTfDigest_read(self, *args)

    def __lt__(self, *args):
        return _ODA_Drawings.OdTfDigest___lt__(self, *args)

    def __eq__(self, *args):
        return _ODA_Drawings.OdTfDigest___eq__(self, *args)

    def __ne__(self, *args):
        return _ODA_Drawings.OdTfDigest___ne__(self, *args)

    @staticmethod
    def kNull(*args):
        return _ODA_Drawings.OdTfDigest_kNull(*args)

    def isNull(self, *args):
        return _ODA_Drawings.OdTfDigest_isNull(self, *args)

    def __init__(self, *args):
        _ODA_Drawings.OdTfDigest_swiginit(self, _ODA_Drawings.new_OdTfDigest(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdTfDigest

# Register OdTfDigest in _ODA_Drawings:
_ODA_Drawings.OdTfDigest_swigregister(OdTfDigest)

def OdTfDigest_kNull(*args):
    return _ODA_Drawings.OdTfDigest_kNull(*args)

kObjectUnmodified = _ODA_Drawings.kObjectUnmodified
kObjectAdded = _ODA_Drawings.kObjectAdded
kObjectDeleted = _ODA_Drawings.kObjectDeleted
kObjectModified = _ODA_Drawings.kObjectModified
kMergeFlagBase = _ODA_Drawings.kMergeFlagBase
kMergeFlagMine = _ODA_Drawings.kMergeFlagMine
kMergeFlagTheirs = _ODA_Drawings.kMergeFlagTheirs
kMergeFlagFull = _ODA_Drawings.kMergeFlagFull
kMergeMaskMineTheirs = _ODA_Drawings.kMergeMaskMineTheirs
kMergeMaskResolution = _ODA_Drawings.kMergeMaskResolution
kMergeRevertFull = _ODA_Drawings.kMergeRevertFull
kMergeMineConflict = _ODA_Drawings.kMergeMineConflict
kMergeMineFull = _ODA_Drawings.kMergeMineFull
kMergeTheirsConflict = _ODA_Drawings.kMergeTheirsConflict
kMergeTheirsFull = _ODA_Drawings.kMergeTheirsFull
kMergePostpone = _ODA_Drawings.kMergePostpone
kMergeNoResolution = _ODA_Drawings.kMergeNoResolution

def isConflict(*args):
    return _ODA_Drawings.isConflict(*args)
class OdTfCommitAnnotation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    author = property(_ODA_Drawings.OdTfCommitAnnotation_author_get, _ODA_Drawings.OdTfCommitAnnotation_author_set)
    message = property(_ODA_Drawings.OdTfCommitAnnotation_message_get, _ODA_Drawings.OdTfCommitAnnotation_message_set)
    date = property(_ODA_Drawings.OdTfCommitAnnotation_date_get, _ODA_Drawings.OdTfCommitAnnotation_date_set)
    userData = property(_ODA_Drawings.OdTfCommitAnnotation_userData_get, _ODA_Drawings.OdTfCommitAnnotation_userData_set)

    def __init__(self, *args):
        _ODA_Drawings.OdTfCommitAnnotation_swiginit(self, _ODA_Drawings.new_OdTfCommitAnnotation(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdTfCommitAnnotation

# Register OdTfCommitAnnotation in _ODA_Drawings:
_ODA_Drawings.OdTfCommitAnnotation_swigregister(OdTfCommitAnnotation)

class OdTfCommitInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    hash = property(_ODA_Drawings.OdTfCommitInfo_hash_get, _ODA_Drawings.OdTfCommitInfo_hash_set)
    parents = property(_ODA_Drawings.OdTfCommitInfo_parents_get, _ODA_Drawings.OdTfCommitInfo_parents_set)
    revision = property(_ODA_Drawings.OdTfCommitInfo_revision_get, _ODA_Drawings.OdTfCommitInfo_revision_set)
    annotation = property(_ODA_Drawings.OdTfCommitInfo_annotation_get, _ODA_Drawings.OdTfCommitInfo_annotation_set)

    def __init__(self, *args):
        _ODA_Drawings.OdTfCommitInfo_swiginit(self, _ODA_Drawings.new_OdTfCommitInfo(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdTfCommitInfo

# Register OdTfCommitInfo in _ODA_Drawings:
_ODA_Drawings.OdTfCommitInfo_swigregister(OdTfCommitInfo)

class OdTfMergeHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def __call__(self, *args):
        return _ODA_Drawings.OdTfMergeHandler___call__(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdTfMergeHandler

# Register OdTfMergeHandler in _ODA_Drawings:
_ODA_Drawings.OdTfMergeHandler_swigregister(OdTfMergeHandler)

class OdTfPostponeMergeHandler(OdTfMergeHandler):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def conflicts(self, *args):
        return _ODA_Drawings.OdTfPostponeMergeHandler_conflicts(self, *args)

    def __call__(self, *args):
        return _ODA_Drawings.OdTfPostponeMergeHandler___call__(self, *args)

    def __init__(self, *args):
        _ODA_Drawings.OdTfPostponeMergeHandler_swiginit(self, _ODA_Drawings.new_OdTfPostponeMergeHandler(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdTfPostponeMergeHandler

# Register OdTfPostponeMergeHandler in _ODA_Drawings:
_ODA_Drawings.OdTfPostponeMergeHandler_swigregister(OdTfPostponeMergeHandler)

class Conflict(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    handle = property(_ODA_Drawings.Conflict_handle_get, _ODA_Drawings.Conflict_handle_set)
    myChange = property(_ODA_Drawings.Conflict_myChange_get, _ODA_Drawings.Conflict_myChange_set)
    theirChange = property(_ODA_Drawings.Conflict_theirChange_get, _ODA_Drawings.Conflict_theirChange_set)

    def __init__(self, *args):
        _ODA_Drawings.Conflict_swiginit(self, _ODA_Drawings.new_Conflict(*args))
    __swig_destroy__ = _ODA_Drawings.delete_Conflict

# Register Conflict in _ODA_Drawings:
_ODA_Drawings.Conflict_swigregister(Conflict)


def getRepository(*args):
    return _ODA_Drawings.getRepository(*args)

def detachRepository(*args):
    return _ODA_Drawings.detachRepository(*args)

def commit(*args):
    return _ODA_Drawings.commit(*args)

def merge(*args):
    return _ODA_Drawings.merge(*args)

def getLocalBranch(*args):
    return _ODA_Drawings.getLocalBranch(*args)

def switchBranch(*args):
    return _ODA_Drawings.switchBranch(*args)

def getLocalChanges(*args):
    return _ODA_Drawings.getLocalChanges(*args)

def compressData(*args):
    return _ODA_Drawings.compressData(*args)

def loadObjects(*args):
    return _ODA_Drawings.loadObjects(*args)

def beginPartialImport(*args):
    return _ODA_Drawings.beginPartialImport(*args)

def writeObjectPartial(*args):
    return _ODA_Drawings.writeObjectPartial(*args)

def endPartialImport(*args):
    return _ODA_Drawings.endPartialImport(*args)

def getRevisionDifference(*args):
    return _ODA_Drawings.getRevisionDifference(*args)

def getCommonAncestor(*args):
    return _ODA_Drawings.getCommonAncestor(*args)
class OdTfStorage(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Drawings.delete_OdTfStorage

    def store(self, *args):
        return _ODA_Drawings.OdTfStorage_store(self, *args)

    def retrieve(self, *args):
        return _ODA_Drawings.OdTfStorage_retrieve(self, *args)

    def isSchemePresent(self, *args):
        return _ODA_Drawings.OdTfStorage_isSchemePresent(self, *args)

    def makeSchemePatch(self, *args):
        return _ODA_Drawings.OdTfStorage_makeSchemePatch(self, *args)

    def applySchemePatch(self, *args):
        return _ODA_Drawings.OdTfStorage_applySchemePatch(self, *args)

    def dryMerge(self, *args):
        return _ODA_Drawings.OdTfStorage_dryMerge(self, *args)

    def merge(self, *args):
        return _ODA_Drawings.OdTfStorage_merge(self, *args)

    def makePatch(self, *args):
        return _ODA_Drawings.OdTfStorage_makePatch(self, *args)

    def applyPatch(self, *args):
        return _ODA_Drawings.OdTfStorage_applyPatch(self, *args)

    def getRevisionDifference(self, *args):
        return _ODA_Drawings.OdTfStorage_getRevisionDifference(self, *args)

    def getStorageStream(self, *args):
        return _ODA_Drawings.OdTfStorage_getStorageStream(self, *args)

    def setReference(self, *args):
        return _ODA_Drawings.OdTfStorage_setReference(self, *args)

    def getReference(self, *args):
        return _ODA_Drawings.OdTfStorage_getReference(self, *args)

    def getReferences(self, *args):
        return _ODA_Drawings.OdTfStorage_getReferences(self, *args)

# Register OdTfStorage in _ODA_Drawings:
_ODA_Drawings.OdTfStorage_swigregister(OdTfStorage)

class OdTfRepository(OdTfStorage):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdTfRepository_createObject(*args)

    def init(self, *args):
        return _ODA_Drawings.OdTfRepository_init(self, *args)

    def commit(self, *args):
        return _ODA_Drawings.OdTfRepository_commit(self, *args)

    def _import(self, *args):
        return _ODA_Drawings.OdTfRepository__import(self, *args)

    def checkout(self, *args):
        return _ODA_Drawings.OdTfRepository_checkout(self, *args)

    def makePatch(self, *args):
        return _ODA_Drawings.OdTfRepository_makePatch(self, *args)

    def getCommitInfo(self, *args):
        return _ODA_Drawings.OdTfRepository_getCommitInfo(self, *args)

    def writeCommitInfo(self, *args):
        return _ODA_Drawings.OdTfRepository_writeCommitInfo(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdTfRepository

# Register OdTfRepository in _ODA_Drawings:
_ODA_Drawings.OdTfRepository_swigregister(OdTfRepository)

def OdTfRepository_createObject(*args):
    return _ODA_Drawings.OdTfRepository_createObject(*args)

class OdDbObjectSchemaIterator(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectSchemaIterator_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectSchemaIterator_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectSchemaIterator_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectSchemaIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectSchemaIterator_createObject(*args)

    def seekClass(self, *args):
        return _ODA_Drawings.OdDbObjectSchemaIterator_seekClass(self, *args)

    def currentType(self, *args):
        return _ODA_Drawings.OdDbObjectSchemaIterator_currentType(self, *args)

    def step(self, *args):
        return _ODA_Drawings.OdDbObjectSchemaIterator_step(self, *args)

    def skipDefDouble(self, *args):
        return _ODA_Drawings.OdDbObjectSchemaIterator_skipDefDouble(self, *args)

    def currentSubClass(self, *args):
        return _ODA_Drawings.OdDbObjectSchemaIterator_currentSubClass(self, *args)

    def currentSubObject(self, *args):
        return _ODA_Drawings.OdDbObjectSchemaIterator_currentSubObject(self, *args)

    def currentSubObjectName(self, *args):
        return _ODA_Drawings.OdDbObjectSchemaIterator_currentSubObjectName(self, *args)

    def seekFieldGetName(self, *args):
        return _ODA_Drawings.OdDbObjectSchemaIterator_seekFieldGetName(self, *args)

    def seekFieldGetName_onBinaryChunk(self, *args):
        return _ODA_Drawings.OdDbObjectSchemaIterator_seekFieldGetName_onBinaryChunk(self, *args)

    def done(self, *args):
        return _ODA_Drawings.OdDbObjectSchemaIterator_done(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectSchemaIterator

# Register OdDbObjectSchemaIterator in _ODA_Drawings:
_ODA_Drawings.OdDbObjectSchemaIterator_swigregister(OdDbObjectSchemaIterator)

def OdDbObjectSchemaIterator_cast(*args):
    return _ODA_Drawings.OdDbObjectSchemaIterator_cast(*args)

def OdDbObjectSchemaIterator_desc(*args):
    return _ODA_Drawings.OdDbObjectSchemaIterator_desc(*args)

def OdDbObjectSchemaIterator_createObject(*args):
    return _ODA_Drawings.OdDbObjectSchemaIterator_createObject(*args)

class OdSysVarInfo(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kToAcadType = _ODA_Drawings.OdSysVarInfo_kToAcadType
    kToDDType = _ODA_Drawings.OdSysVarInfo_kToDDType
    m_getFn = property(_ODA_Drawings.OdSysVarInfo_m_getFn_get, _ODA_Drawings.OdSysVarInfo_m_getFn_set)
    m_setFn = property(_ODA_Drawings.OdSysVarInfo_m_setFn_get, _ODA_Drawings.OdSysVarInfo_m_setFn_set)
    m_mapTypeFn = property(_ODA_Drawings.OdSysVarInfo_m_mapTypeFn_get, _ODA_Drawings.OdSysVarInfo_m_mapTypeFn_set)
    __swig_destroy__ = _ODA_Drawings.delete_OdSysVarInfo

# Register OdSysVarInfo in _ODA_Drawings:
_ODA_Drawings.OdSysVarInfo_swigregister(OdSysVarInfo)

class OdSetVarInfo(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    m_formatFn = property(_ODA_Drawings.OdSetVarInfo_m_formatFn_get, _ODA_Drawings.OdSetVarInfo_m_formatFn_set)
    m_promptFn = property(_ODA_Drawings.OdSetVarInfo_m_promptFn_get, _ODA_Drawings.OdSetVarInfo_m_promptFn_set)
    __swig_destroy__ = _ODA_Drawings.delete_OdSetVarInfo

# Register OdSetVarInfo in _ODA_Drawings:
_ODA_Drawings.OdSetVarInfo_swigregister(OdSetVarInfo)

class OdDbDatabaseSummaryInfo(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_createObject(*args)

    def getTitle(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_getTitle(self, *args)

    def setTitle(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_setTitle(self, *args)

    def getSubject(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_getSubject(self, *args)

    def setSubject(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_setSubject(self, *args)

    def getAuthor(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_getAuthor(self, *args)

    def setAuthor(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_setAuthor(self, *args)

    def getKeywords(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_getKeywords(self, *args)

    def setKeywords(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_setKeywords(self, *args)

    def getComments(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_getComments(self, *args)

    def setComments(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_setComments(self, *args)

    def getLastSavedBy(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_getLastSavedBy(self, *args)

    def setLastSavedBy(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_setLastSavedBy(self, *args)

    def getRevisionNumber(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_getRevisionNumber(self, *args)

    def setRevisionNumber(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_setRevisionNumber(self, *args)

    def getHyperlinkBase(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_getHyperlinkBase(self, *args)

    def setHyperlinkBase(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_setHyperlinkBase(self, *args)

    def numCustomInfo(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_numCustomInfo(self, *args)

    def addCustomSummaryInfo(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_addCustomSummaryInfo(self, *args)

    def deleteCustomSummaryInfo(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_deleteCustomSummaryInfo(self, *args)

    def getCustomSummaryInfo(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_getCustomSummaryInfo(self, *args)

    def setCustomSummaryInfo(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_setCustomSummaryInfo(self, *args)

    def database(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_database(self, *args)

    def setDatabase(self, *args):
        return _ODA_Drawings.OdDbDatabaseSummaryInfo_setDatabase(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDatabaseSummaryInfo

# Register OdDbDatabaseSummaryInfo in _ODA_Drawings:
_ODA_Drawings.OdDbDatabaseSummaryInfo_swigregister(OdDbDatabaseSummaryInfo)

def OdDbDatabaseSummaryInfo_cast(*args):
    return _ODA_Drawings.OdDbDatabaseSummaryInfo_cast(*args)

def OdDbDatabaseSummaryInfo_desc(*args):
    return _ODA_Drawings.OdDbDatabaseSummaryInfo_desc(*args)

def OdDbDatabaseSummaryInfo_createObject(*args):
    return _ODA_Drawings.OdDbDatabaseSummaryInfo_createObject(*args)


def oddbGetLibraryInfo(*args):
    return _ODA_Drawings.oddbGetLibraryInfo(*args)

def oddbGetSummaryInfo(*args):
    return _ODA_Drawings.oddbGetSummaryInfo(*args)

def oddbPutSummaryInfo(*args):
    return _ODA_Drawings.oddbPutSummaryInfo(*args)
class SPAParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SPA_ADJUST_NONE = _ODA_Drawings.SPAParameters_SPA_ADJUST_NONE
    SPA_ADJUST_NON_GRID = _ODA_Drawings.SPAParameters_SPA_ADJUST_NON_GRID
    SPA_ADJUST_ALL = _ODA_Drawings.SPAParameters_SPA_ADJUST_ALL
    adjust_mode = property(_ODA_Drawings.SPAParameters_adjust_mode_get, _ODA_Drawings.SPAParameters_adjust_mode_set)
    SPA_GRID_NONE = _ODA_Drawings.SPAParameters_SPA_GRID_NONE
    SPA_GRID_INTERIOR = _ODA_Drawings.SPAParameters_SPA_GRID_INTERIOR
    SPA_GRID_TO_EDGES = _ODA_Drawings.SPAParameters_SPA_GRID_TO_EDGES
    SPA_GRID_ONE_DIR = _ODA_Drawings.SPAParameters_SPA_GRID_ONE_DIR
    grid_mode = property(_ODA_Drawings.SPAParameters_grid_mode_get, _ODA_Drawings.SPAParameters_grid_mode_set)
    SPA_TRIANG_NONE = _ODA_Drawings.SPAParameters_SPA_TRIANG_NONE
    SPA_TRIANG_ALL = _ODA_Drawings.SPAParameters_SPA_TRIANG_ALL
    SPA_TRIANG_FRINGE_1 = _ODA_Drawings.SPAParameters_SPA_TRIANG_FRINGE_1
    SPA_TRIANG_FRINGE_2 = _ODA_Drawings.SPAParameters_SPA_TRIANG_FRINGE_2
    SPA_TRIANG_FRINGE_3 = _ODA_Drawings.SPAParameters_SPA_TRIANG_FRINGE_3
    SPA_TRIANG_FRINGE_4 = _ODA_Drawings.SPAParameters_SPA_TRIANG_FRINGE_4
    triang_mode = property(_ODA_Drawings.SPAParameters_triang_mode_get, _ODA_Drawings.SPAParameters_triang_mode_set)
    surface_tol = property(_ODA_Drawings.SPAParameters_surface_tol_get, _ODA_Drawings.SPAParameters_surface_tol_set)
    normal_tol = property(_ODA_Drawings.SPAParameters_normal_tol_get, _ODA_Drawings.SPAParameters_normal_tol_set)
    max_edge_length = property(_ODA_Drawings.SPAParameters_max_edge_length_get, _ODA_Drawings.SPAParameters_max_edge_length_set)
    grid_aspect_ratio = property(_ODA_Drawings.SPAParameters_grid_aspect_ratio_get, _ODA_Drawings.SPAParameters_grid_aspect_ratio_set)
    max_grid_lines = property(_ODA_Drawings.SPAParameters_max_grid_lines_get, _ODA_Drawings.SPAParameters_max_grid_lines_set)
    min_u_grid_lines = property(_ODA_Drawings.SPAParameters_min_u_grid_lines_get, _ODA_Drawings.SPAParameters_min_u_grid_lines_set)
    min_v_grid_lines = property(_ODA_Drawings.SPAParameters_min_v_grid_lines_get, _ODA_Drawings.SPAParameters_min_v_grid_lines_set)
    bUseFacetRES = property(_ODA_Drawings.SPAParameters_bUseFacetRES_get, _ODA_Drawings.SPAParameters_bUseFacetRES_set)
    check_level = property(_ODA_Drawings.SPAParameters_check_level_get, _ODA_Drawings.SPAParameters_check_level_set)
    mass_props_req_rel_accy = property(_ODA_Drawings.SPAParameters_mass_props_req_rel_accy_get, _ODA_Drawings.SPAParameters_mass_props_req_rel_accy_set)

    def __init__(self, *args):
        _ODA_Drawings.SPAParameters_swiginit(self, _ODA_Drawings.new_SPAParameters(*args))

    def __eq__(self, *args):
        return _ODA_Drawings.SPAParameters___eq__(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_SPAParameters

# Register SPAParameters in _ODA_Drawings:
_ODA_Drawings.SPAParameters_swigregister(SPAParameters)

class SpaModeler(ODA_Kernel.OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setSPAParameters(self, *args):
        return _ODA_Drawings.SpaModeler_setSPAParameters(self, *args)

    def getSPAParameters(self, *args):
        return _ODA_Drawings.SpaModeler_getSPAParameters(self, *args)

    def setSPAtolerances(self, *args):
        return _ODA_Drawings.SpaModeler_setSPAtolerances(self, *args)

    def getSPAtolerances(self, *args):
        return _ODA_Drawings.SpaModeler_getSPAtolerances(self, *args)

    def getSPAresnor(self, *args):
        return _ODA_Drawings.SpaModeler_getSPAresnor(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_SpaModeler

# Register SpaModeler in _ODA_Drawings:
_ODA_Drawings.SpaModeler_swigregister(SpaModeler)

class OdSmViewCategories(OdSmComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmViewCategories_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmViewCategories_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmViewCategories_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmViewCategories_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmViewCategories_createObject(*args)

    def getEnumerator(self, *args):
        return _ODA_Drawings.OdSmViewCategories_getEnumerator(self, *args)

    def createViewCategory(self, *args):
        return _ODA_Drawings.OdSmViewCategories_createViewCategory(self, *args)

    def insertViewCategory(self, *args):
        return _ODA_Drawings.OdSmViewCategories_insertViewCategory(self, *args)

    def insertViewCategoryAfter(self, *args):
        return _ODA_Drawings.OdSmViewCategories_insertViewCategoryAfter(self, *args)

    def removeViewCategory(self, *args):
        return _ODA_Drawings.OdSmViewCategories_removeViewCategory(self, *args)

    def getDefaultViewCategory(self, *args):
        return _ODA_Drawings.OdSmViewCategories_getDefaultViewCategory(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmViewCategories

# Register OdSmViewCategories in _ODA_Drawings:
_ODA_Drawings.OdSmViewCategories_swigregister(OdSmViewCategories)

def OdSmViewCategories_cast(*args):
    return _ODA_Drawings.OdSmViewCategories_cast(*args)

def OdSmViewCategories_desc(*args):
    return _ODA_Drawings.OdSmViewCategories_desc(*args)

def OdSmViewCategories_createObject(*args):
    return _ODA_Drawings.OdSmViewCategories_createObject(*args)

class OdSmSheetViews(OdSmComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmSheetViews_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmSheetViews_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmSheetViews_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmSheetViews_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmSheetViews_createObject(*args)

    def getEnumerator(self, *args):
        return _ODA_Drawings.OdSmSheetViews_getEnumerator(self, *args)

    def clear(self, *args):
        return _ODA_Drawings.OdSmSheetViews_clear(self, *args)

    def addView(self, *args):
        return _ODA_Drawings.OdSmSheetViews_addView(self, *args)

    def removeView(self, *args):
        return _ODA_Drawings.OdSmSheetViews_removeView(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmSheetViews

# Register OdSmSheetViews in _ODA_Drawings:
_ODA_Drawings.OdSmSheetViews_swigregister(OdSmSheetViews)

def OdSmSheetViews_cast(*args):
    return _ODA_Drawings.OdSmSheetViews_cast(*args)

def OdSmSheetViews_desc(*args):
    return _ODA_Drawings.OdSmSheetViews_desc(*args)

def OdSmSheetViews_createObject(*args):
    return _ODA_Drawings.OdSmSheetViews_createObject(*args)

class OdSmSheetSetMgr(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmSheetSetMgr_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmSheetSetMgr_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmSheetSetMgr_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmSheetSetMgr_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmSheetSetMgr_createObject(*args)

    def createDatabase(self, *args):
        return _ODA_Drawings.OdSmSheetSetMgr_createDatabase(self, *args)

    def openDatabase(self, *args):
        return _ODA_Drawings.OdSmSheetSetMgr_openDatabase(self, *args)

    def findOpenDatabase(self, *args):
        return _ODA_Drawings.OdSmSheetSetMgr_findOpenDatabase(self, *args)

    def closeAll(self, *args):
        return _ODA_Drawings.OdSmSheetSetMgr_closeAll(self, *args)

    def close(self, *args):
        return _ODA_Drawings.OdSmSheetSetMgr_close(self, *args)

    def subscribe(self, *args):
        return _ODA_Drawings.OdSmSheetSetMgr_subscribe(self, *args)

    def unSubscribe(self, *args):
        return _ODA_Drawings.OdSmSheetSetMgr_unSubscribe(self, *args)

    def getParentSheetSet(self, *args):
        return _ODA_Drawings.OdSmSheetSetMgr_getParentSheetSet(self, *args)

    def getSheetFromLayout(self, *args):
        return _ODA_Drawings.OdSmSheetSetMgr_getSheetFromLayout(self, *args)

    def getDatabaseEnumerator(self, *args):
        return _ODA_Drawings.OdSmSheetSetMgr_getDatabaseEnumerator(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmSheetSetMgr

# Register OdSmSheetSetMgr in _ODA_Drawings:
_ODA_Drawings.OdSmSheetSetMgr_swigregister(OdSmSheetSetMgr)

def OdSmSheetSetMgr_cast(*args):
    return _ODA_Drawings.OdSmSheetSetMgr_cast(*args)

def OdSmSheetSetMgr_desc(*args):
    return _ODA_Drawings.OdSmSheetSetMgr_desc(*args)

def OdSmSheetSetMgr_createObject(*args):
    return _ODA_Drawings.OdSmSheetSetMgr_createObject(*args)

class OdSmSheetSelSets(OdSmComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmSheetSelSets_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmSheetSelSets_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmSheetSelSets_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmSheetSelSets_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmSheetSelSets_createObject(*args)

    def add(self, *args):
        return _ODA_Drawings.OdSmSheetSelSets_add(self, *args)

    def remove(self, *args):
        return _ODA_Drawings.OdSmSheetSelSets_remove(self, *args)

    def getEnumerator(self, *args):
        return _ODA_Drawings.OdSmSheetSelSets_getEnumerator(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmSheetSelSets

# Register OdSmSheetSelSets in _ODA_Drawings:
_ODA_Drawings.OdSmSheetSelSets_swigregister(OdSmSheetSelSets)

def OdSmSheetSelSets_cast(*args):
    return _ODA_Drawings.OdSmSheetSelSets_cast(*args)

def OdSmSheetSelSets_desc(*args):
    return _ODA_Drawings.OdSmSheetSelSets_desc(*args)

def OdSmSheetSelSets_createObject(*args):
    return _ODA_Drawings.OdSmSheetSelSets_createObject(*args)

class OdSmResources(OdSmComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmResources_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmResources_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmResources_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmResources_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmResources_createObject(*args)

    def add(self, *args):
        return _ODA_Drawings.OdSmResources_add(self, *args)

    def remove(self, *args):
        return _ODA_Drawings.OdSmResources_remove(self, *args)

    def getEnumerator(self, *args):
        return _ODA_Drawings.OdSmResources_getEnumerator(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmResources

# Register OdSmResources in _ODA_Drawings:
_ODA_Drawings.OdSmResources_swigregister(OdSmResources)

def OdSmResources_cast(*args):
    return _ODA_Drawings.OdSmResources_cast(*args)

def OdSmResources_desc(*args):
    return _ODA_Drawings.OdSmResources_desc(*args)

def OdSmResources_createObject(*args):
    return _ODA_Drawings.OdSmResources_createObject(*args)

class OdSmPublishOptions(OdSmPersist):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmPublishOptions_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmPublishOptions_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmPublishOptions_createObject(*args)

    def getDefaultOutputdir(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_getDefaultOutputdir(self, *args)

    def setDefaultOutputdir(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_setDefaultOutputdir(self, *args)

    def getDwfType(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_getDwfType(self, *args)

    def setDwfType(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_setDwfType(self, *args)

    def getPromptForName(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_getPromptForName(self, *args)

    def setPromptForName(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_setPromptForName(self, *args)

    def getUsePassword(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_getUsePassword(self, *args)

    def setUsePassword(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_setUsePassword(self, *args)

    def getPromptForPassword(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_getPromptForPassword(self, *args)

    def setPromptForPassword(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_setPromptForPassword(self, *args)

    def getLayerInfo(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_getLayerInfo(self, *args)

    def setLayerInfo(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_setLayerInfo(self, *args)

    def getUnrecognizedData(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_getUnrecognizedData(self, *args)

    def setUnrecognizedData(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_setUnrecognizedData(self, *args)

    def getUnrecognizedSections(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_getUnrecognizedSections(self, *args)

    def setUnrecognizedSections(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_setUnrecognizedSections(self, *args)

    def getIncludeSheetSetData(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_getIncludeSheetSetData(self, *args)

    def setIncludeSheetSetData(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_setIncludeSheetSetData(self, *args)

    def getIncludeSheetData(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_getIncludeSheetData(self, *args)

    def setIncludeSheetData(self, *args):
        return _ODA_Drawings.OdSmPublishOptions_setIncludeSheetData(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmPublishOptions

# Register OdSmPublishOptions in _ODA_Drawings:
_ODA_Drawings.OdSmPublishOptions_swigregister(OdSmPublishOptions)

def OdSmPublishOptions_cast(*args):
    return _ODA_Drawings.OdSmPublishOptions_cast(*args)

def OdSmPublishOptions_desc(*args):
    return _ODA_Drawings.OdSmPublishOptions_desc(*args)

def OdSmPublishOptions_createObject(*args):
    return _ODA_Drawings.OdSmPublishOptions_createObject(*args)

class OdSmFiler(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def init(self, *args):
        return _ODA_Drawings.OdSmFiler_init(self, *args)

    def close(self, *args):
        return _ODA_Drawings.OdSmFiler_close(self, *args)

    def getDatabase(self, *args):
        return _ODA_Drawings.OdSmFiler_getDatabase(self, *args)

    def pushCurrentReadObject(self, *args):
        return _ODA_Drawings.OdSmFiler_pushCurrentReadObject(self, *args)

    def popCurrentReadObject(self, *args):
        return _ODA_Drawings.OdSmFiler_popCurrentReadObject(self, *args)

    def getCurrentObject(self, *args):
        return _ODA_Drawings.OdSmFiler_getCurrentObject(self, *args)

    def readObject(self, *args):
        return _ODA_Drawings.OdSmFiler_readObject(self, *args)

    def readProperty(self, *args):
        return _ODA_Drawings.OdSmFiler_readProperty(self, *args)

    def readRawData(self, *args):
        return _ODA_Drawings.OdSmFiler_readRawData(self, *args)

    def writeObject(self, *args):
        return _ODA_Drawings.OdSmFiler_writeObject(self, *args)

    def writeProperty(self, *args):
        return _ODA_Drawings.OdSmFiler_writeProperty(self, *args)

    def writeRawData(self, *args):
        return _ODA_Drawings.OdSmFiler_writeRawData(self, *args)

    def readGuid(self, *args):
        return _ODA_Drawings.OdSmFiler_readGuid(self, *args)

    def readInt(self, *args):
        return _ODA_Drawings.OdSmFiler_readInt(self, *args)

    def readDouble(self, *args):
        return _ODA_Drawings.OdSmFiler_readDouble(self, *args)

    def readString(self, *args):
        return _ODA_Drawings.OdSmFiler_readString(self, *args)

    def writeGuid(self, *args):
        return _ODA_Drawings.OdSmFiler_writeGuid(self, *args)

    def writeInt(self, *args):
        return _ODA_Drawings.OdSmFiler_writeInt(self, *args)

    def writeDouble(self, *args):
        return _ODA_Drawings.OdSmFiler_writeDouble(self, *args)

    def writeString(self, *args):
        return _ODA_Drawings.OdSmFiler_writeString(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmFiler

# Register OdSmFiler in _ODA_Drawings:
_ODA_Drawings.OdSmFiler_swigregister(OdSmFiler)

class OdSmDatabase(OdSmComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdSmDatabase_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdSmDatabase_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdSmDatabase_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdSmDatabase_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdSmDatabase_createObject(*args)

    def loadFromFile(self, *args):
        return _ODA_Drawings.OdSmDatabase_loadFromFile(self, *args)

    def loadFromStream(self, *args):
        return _ODA_Drawings.OdSmDatabase_loadFromStream(self, *args)

    def save(self, *args):
        return _ODA_Drawings.OdSmDatabase_save(self, *args)

    def fileName(self, *args):
        return _ODA_Drawings.OdSmDatabase_fileName(self, *args)

    def setFileName(self, *args):
        return _ODA_Drawings.OdSmDatabase_setFileName(self, *args)

    def templateDstFileName(self, *args):
        return _ODA_Drawings.OdSmDatabase_templateDstFileName(self, *args)

    def sheetSet(self, *args):
        return _ODA_Drawings.OdSmDatabase_sheetSet(self, *args)

    def enumerator(self, *args):
        return _ODA_Drawings.OdSmDatabase_enumerator(self, *args)

    def subscribe(self, *args):
        return _ODA_Drawings.OdSmDatabase_subscribe(self, *args)

    def unSubscribe(self, *args):
        return _ODA_Drawings.OdSmDatabase_unSubscribe(self, *args)

    def notifyRegisteredEventHandlers(self, *args):
        return _ODA_Drawings.OdSmDatabase_notifyRegisteredEventHandlers(self, *args)

    def findObject(self, *args):
        return _ODA_Drawings.OdSmDatabase_findObject(self, *args)

    def findAcDbObjectReferences(self, *args):
        return _ODA_Drawings.OdSmDatabase_findAcDbObjectReferences(self, *args)

    def updateInMemoryDwgHints(self, *args):
        return _ODA_Drawings.OdSmDatabase_updateInMemoryDwgHints(self, *args)

    def isTemporary(self, *args):
        return _ODA_Drawings.OdSmDatabase_isTemporary(self, *args)

    def setIsTemporary(self, *args):
        return _ODA_Drawings.OdSmDatabase_setIsTemporary(self, *args)

    def registerNewObject(self, *args):
        return _ODA_Drawings.OdSmDatabase_registerNewObject(self, *args)

    def version(self, *args):
        return _ODA_Drawings.OdSmDatabase_version(self, *args)

    def getRevision(self, *args):
        return _ODA_Drawings.OdSmDatabase_getRevision(self, *args)

    def getFingerPrint(self, *args):
        return _ODA_Drawings.OdSmDatabase_getFingerPrint(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdSmDatabase

# Register OdSmDatabase in _ODA_Drawings:
_ODA_Drawings.OdSmDatabase_swigregister(OdSmDatabase)

def OdSmDatabase_cast(*args):
    return _ODA_Drawings.OdSmDatabase_cast(*args)

def OdSmDatabase_desc(*args):
    return _ODA_Drawings.OdSmDatabase_desc(*args)

def OdSmDatabase_createObject(*args):
    return _ODA_Drawings.OdSmDatabase_createObject(*args)

class OdDbShWedge(OdDbShPrimitive):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShWedge_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShWedge_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShWedge_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShWedge_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShWedge_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShWedge_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShWedge_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShWedge_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShWedge_dxfOutFields(self, *args)

    def length(self, *args):
        return _ODA_Drawings.OdDbShWedge_length(self, *args)

    def width(self, *args):
        return _ODA_Drawings.OdDbShWedge_width(self, *args)

    def height(self, *args):
        return _ODA_Drawings.OdDbShWedge_height(self, *args)

    def setLength(self, *args):
        return _ODA_Drawings.OdDbShWedge_setLength(self, *args)

    def setWidth(self, *args):
        return _ODA_Drawings.OdDbShWedge_setWidth(self, *args)

    def setHeight(self, *args):
        return _ODA_Drawings.OdDbShWedge_setHeight(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShWedge

# Register OdDbShWedge in _ODA_Drawings:
_ODA_Drawings.OdDbShWedge_swigregister(OdDbShWedge)

def OdDbShWedge_cast(*args):
    return _ODA_Drawings.OdDbShWedge_cast(*args)

def OdDbShWedge_desc(*args):
    return _ODA_Drawings.OdDbShWedge_desc(*args)

def OdDbShWedge_createObject(*args):
    return _ODA_Drawings.OdDbShWedge_createObject(*args)

class OdDbShTorus(OdDbShPrimitive):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShTorus_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShTorus_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShTorus_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShTorus_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShTorus_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShTorus_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShTorus_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShTorus_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShTorus_dxfOutFields(self, *args)

    def majorRadius(self, *args):
        return _ODA_Drawings.OdDbShTorus_majorRadius(self, *args)

    def minorRadius(self, *args):
        return _ODA_Drawings.OdDbShTorus_minorRadius(self, *args)

    def setMajorRadius(self, *args):
        return _ODA_Drawings.OdDbShTorus_setMajorRadius(self, *args)

    def setMinorRadius(self, *args):
        return _ODA_Drawings.OdDbShTorus_setMinorRadius(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShTorus

# Register OdDbShTorus in _ODA_Drawings:
_ODA_Drawings.OdDbShTorus_swigregister(OdDbShTorus)

def OdDbShTorus_cast(*args):
    return _ODA_Drawings.OdDbShTorus_cast(*args)

def OdDbShTorus_desc(*args):
    return _ODA_Drawings.OdDbShTorus_desc(*args)

def OdDbShTorus_createObject(*args):
    return _ODA_Drawings.OdDbShTorus_createObject(*args)

class OdDbShSweep(OdDbShPrimitive):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShSweep_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShSweep_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShSweep_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShSweep_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShSweep_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShSweep_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShSweep_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShSweep_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShSweep_dxfOutFields(self, *args)

    def direction(self, *args):
        return _ODA_Drawings.OdDbShSweep_direction(self, *args)

    def setDirection(self, *args):
        return _ODA_Drawings.OdDbShSweep_setDirection(self, *args)

    def getSweepOptions(self, *args):
        return _ODA_Drawings.OdDbShSweep_getSweepOptions(self, *args)

    def setSweepOptions(self, *args):
        return _ODA_Drawings.OdDbShSweep_setSweepOptions(self, *args)

    def sweepEntity(self, *args):
        return _ODA_Drawings.OdDbShSweep_sweepEntity(self, *args)

    def pathEntity(self, *args):
        return _ODA_Drawings.OdDbShSweep_pathEntity(self, *args)

    def getPathLength(self, *args):
        return _ODA_Drawings.OdDbShSweep_getPathLength(self, *args)

    def setPathEntity(self, *args):
        return _ODA_Drawings.OdDbShSweep_setPathEntity(self, *args)

    def setSweepEntity(self, *args):
        return _ODA_Drawings.OdDbShSweep_setSweepEntity(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShSweep

# Register OdDbShSweep in _ODA_Drawings:
_ODA_Drawings.OdDbShSweep_swigregister(OdDbShSweep)

def OdDbShSweep_cast(*args):
    return _ODA_Drawings.OdDbShSweep_cast(*args)

def OdDbShSweep_desc(*args):
    return _ODA_Drawings.OdDbShSweep_desc(*args)

def OdDbShSweep_createObject(*args):
    return _ODA_Drawings.OdDbShSweep_createObject(*args)

class OdDbShSubentMaterial(OdDbShHistoryNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShSubentMaterial_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShSubentMaterial_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShSubentMaterial_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShSubentMaterial_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShSubentMaterial_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShSubentMaterial_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShSubentMaterial_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShSubentMaterial_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShSubentMaterial_dxfOutFields(self, *args)

    def materialId(self, *args):
        return _ODA_Drawings.OdDbShSubentMaterial_materialId(self, *args)

    def setMaterial(self, *args):
        return _ODA_Drawings.OdDbShSubentMaterial_setMaterial(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShSubentMaterial

# Register OdDbShSubentMaterial in _ODA_Drawings:
_ODA_Drawings.OdDbShSubentMaterial_swigregister(OdDbShSubentMaterial)

def OdDbShSubentMaterial_cast(*args):
    return _ODA_Drawings.OdDbShSubentMaterial_cast(*args)

def OdDbShSubentMaterial_desc(*args):
    return _ODA_Drawings.OdDbShSubentMaterial_desc(*args)

def OdDbShSubentMaterial_createObject(*args):
    return _ODA_Drawings.OdDbShSubentMaterial_createObject(*args)

class OdDbShSubentColor(OdDbShHistoryNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShSubentColor_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShSubentColor_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShSubentColor_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShSubentColor_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShSubentColor_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShSubentColor_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShSubentColor_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShSubentColor_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShSubentColor_dxfOutFields(self, *args)

    def colorValue(self, *args):
        return _ODA_Drawings.OdDbShSubentColor_colorValue(self, *args)

    def setColorValue(self, *args):
        return _ODA_Drawings.OdDbShSubentColor_setColorValue(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShSubentColor

# Register OdDbShSubentColor in _ODA_Drawings:
_ODA_Drawings.OdDbShSubentColor_swigregister(OdDbShSubentColor)

def OdDbShSubentColor_cast(*args):
    return _ODA_Drawings.OdDbShSubentColor_cast(*args)

def OdDbShSubentColor_desc(*args):
    return _ODA_Drawings.OdDbShSubentColor_desc(*args)

def OdDbShSubentColor_createObject(*args):
    return _ODA_Drawings.OdDbShSubentColor_createObject(*args)

class OdDbShSphere(OdDbShPrimitive):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShSphere_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShSphere_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShSphere_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShSphere_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShSphere_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShSphere_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShSphere_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShSphere_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShSphere_dxfOutFields(self, *args)

    def radius(self, *args):
        return _ODA_Drawings.OdDbShSphere_radius(self, *args)

    def setRadius(self, *args):
        return _ODA_Drawings.OdDbShSphere_setRadius(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShSphere

# Register OdDbShSphere in _ODA_Drawings:
_ODA_Drawings.OdDbShSphere_swigregister(OdDbShSphere)

def OdDbShSphere_cast(*args):
    return _ODA_Drawings.OdDbShSphere_cast(*args)

def OdDbShSphere_desc(*args):
    return _ODA_Drawings.OdDbShSphere_desc(*args)

def OdDbShSphere_createObject(*args):
    return _ODA_Drawings.OdDbShSphere_createObject(*args)

class OdDbShRevolve(OdDbShPrimitive):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShRevolve_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShRevolve_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShRevolve_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShRevolve_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShRevolve_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShRevolve_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShRevolve_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShRevolve_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShRevolve_dxfOutFields(self, *args)

    def axisPoint(self, *args):
        return _ODA_Drawings.OdDbShRevolve_axisPoint(self, *args)

    def direction(self, *args):
        return _ODA_Drawings.OdDbShRevolve_direction(self, *args)

    def getRevolveOptions(self, *args):
        return _ODA_Drawings.OdDbShRevolve_getRevolveOptions(self, *args)

    def revolveAngle(self, *args):
        return _ODA_Drawings.OdDbShRevolve_revolveAngle(self, *args)

    def setAxisPoint(self, *args):
        return _ODA_Drawings.OdDbShRevolve_setAxisPoint(self, *args)

    def setDirection(self, *args):
        return _ODA_Drawings.OdDbShRevolve_setDirection(self, *args)

    def setRevolve(self, *args):
        return _ODA_Drawings.OdDbShRevolve_setRevolve(self, *args)

    def setRevolveAngle(self, *args):
        return _ODA_Drawings.OdDbShRevolve_setRevolveAngle(self, *args)

    def setRevolveOptions(self, *args):
        return _ODA_Drawings.OdDbShRevolve_setRevolveOptions(self, *args)

    def setStartAngle(self, *args):
        return _ODA_Drawings.OdDbShRevolve_setStartAngle(self, *args)

    def startAngle(self, *args):
        return _ODA_Drawings.OdDbShRevolve_startAngle(self, *args)

    def sweepEntity(self, *args):
        return _ODA_Drawings.OdDbShRevolve_sweepEntity(self, *args)

    def setSweepEntity(self, *args):
        return _ODA_Drawings.OdDbShRevolve_setSweepEntity(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShRevolve

# Register OdDbShRevolve in _ODA_Drawings:
_ODA_Drawings.OdDbShRevolve_swigregister(OdDbShRevolve)

def OdDbShRevolve_cast(*args):
    return _ODA_Drawings.OdDbShRevolve_cast(*args)

def OdDbShRevolve_desc(*args):
    return _ODA_Drawings.OdDbShRevolve_desc(*args)

def OdDbShRevolve_createObject(*args):
    return _ODA_Drawings.OdDbShRevolve_createObject(*args)

class OdDbShPyramid(OdDbShPrimitive):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShPyramid_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShPyramid_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShPyramid_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShPyramid_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShPyramid_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShPyramid_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShPyramid_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShPyramid_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShPyramid_dxfOutFields(self, *args)

    def height(self, *args):
        return _ODA_Drawings.OdDbShPyramid_height(self, *args)

    def radius(self, *args):
        return _ODA_Drawings.OdDbShPyramid_radius(self, *args)

    def sides(self, *args):
        return _ODA_Drawings.OdDbShPyramid_sides(self, *args)

    def topRadius(self, *args):
        return _ODA_Drawings.OdDbShPyramid_topRadius(self, *args)

    def setSides(self, *args):
        return _ODA_Drawings.OdDbShPyramid_setSides(self, *args)

    def setHeight(self, *args):
        return _ODA_Drawings.OdDbShPyramid_setHeight(self, *args)

    def setTopRadius(self, *args):
        return _ODA_Drawings.OdDbShPyramid_setTopRadius(self, *args)

    def setRadius(self, *args):
        return _ODA_Drawings.OdDbShPyramid_setRadius(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShPyramid

# Register OdDbShPyramid in _ODA_Drawings:
_ODA_Drawings.OdDbShPyramid_swigregister(OdDbShPyramid)

def OdDbShPyramid_cast(*args):
    return _ODA_Drawings.OdDbShPyramid_cast(*args)

def OdDbShPyramid_desc(*args):
    return _ODA_Drawings.OdDbShPyramid_desc(*args)

def OdDbShPyramid_createObject(*args):
    return _ODA_Drawings.OdDbShPyramid_createObject(*args)

class OdDbShLoft(OdDbShPrimitive):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShLoft_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShLoft_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShLoft_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShLoft_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShLoft_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShLoft_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShLoft_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShLoft_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShLoft_dxfOutFields(self, *args)

    def getLoftOptions(self, *args):
        return _ODA_Drawings.OdDbShLoft_getLoftOptions(self, *args)

    def setLoftOptions(self, *args):
        return _ODA_Drawings.OdDbShLoft_setLoftOptions(self, *args)

    def numCrossSections(self, *args):
        return _ODA_Drawings.OdDbShLoft_numCrossSections(self, *args)

    def numGuideCurves(self, *args):
        return _ODA_Drawings.OdDbShLoft_numGuideCurves(self, *args)

    def getCrossSection(self, *args):
        return _ODA_Drawings.OdDbShLoft_getCrossSection(self, *args)

    def getGuideCurve(self, *args):
        return _ODA_Drawings.OdDbShLoft_getGuideCurve(self, *args)

    def getPathCurve(self, *args):
        return _ODA_Drawings.OdDbShLoft_getPathCurve(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShLoft

# Register OdDbShLoft in _ODA_Drawings:
_ODA_Drawings.OdDbShLoft_swigregister(OdDbShLoft)

def OdDbShLoft_cast(*args):
    return _ODA_Drawings.OdDbShLoft_cast(*args)

def OdDbShLoft_desc(*args):
    return _ODA_Drawings.OdDbShLoft_desc(*args)

def OdDbShLoft_createObject(*args):
    return _ODA_Drawings.OdDbShLoft_createObject(*args)

class OdDbShHistory(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShHistory_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShHistory_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShHistory_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShHistory_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShHistory_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShHistory

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShHistory_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShHistory_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShHistory_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShHistory_dxfOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbShHistory_subWorldDraw(self, *args)

    def setShowHistory(self, *args):
        return _ODA_Drawings.OdDbShHistory_setShowHistory(self, *args)

    def showHistory(self, *args):
        return _ODA_Drawings.OdDbShHistory_showHistory(self, *args)

    def numNodes(self, *args):
        return _ODA_Drawings.OdDbShHistory_numNodes(self, *args)

    def setRecordHistory(self, *args):
        return _ODA_Drawings.OdDbShHistory_setRecordHistory(self, *args)

    def recordHistory(self, *args):
        return _ODA_Drawings.OdDbShHistory_recordHistory(self, *args)

    def clearHistory(self, *args):
        return _ODA_Drawings.OdDbShHistory_clearHistory(self, *args)

    def purgeGraph(self, *args):
        return _ODA_Drawings.OdDbShHistory_purgeGraph(self, *args)

    def getGraph(self, *args):
        return _ODA_Drawings.OdDbShHistory_getGraph(self, *args)

    def createBox(self, *args):
        return _ODA_Drawings.OdDbShHistory_createBox(self, *args)

    def createFrustum(self, *args):
        return _ODA_Drawings.OdDbShHistory_createFrustum(self, *args)

    def createSphere(self, *args):
        return _ODA_Drawings.OdDbShHistory_createSphere(self, *args)

    def createTorus(self, *args):
        return _ODA_Drawings.OdDbShHistory_createTorus(self, *args)

    def createWedge(self, *args):
        return _ODA_Drawings.OdDbShHistory_createWedge(self, *args)

    def createPyramid(self, *args):
        return _ODA_Drawings.OdDbShHistory_createPyramid(self, *args)

    def setSubentColor(self, *args):
        return _ODA_Drawings.OdDbShHistory_setSubentColor(self, *args)

    def setSubentMaterial(self, *args):
        return _ODA_Drawings.OdDbShHistory_setSubentMaterial(self, *args)

    def createLoftedSolid(self, *args):
        return _ODA_Drawings.OdDbShHistory_createLoftedSolid(self, *args)

    def createRevolvedSolid(self, *args):
        return _ODA_Drawings.OdDbShHistory_createRevolvedSolid(self, *args)

    def createSweptSolid(self, *args):
        return _ODA_Drawings.OdDbShHistory_createSweptSolid(self, *args)

    def booleanOper(self, *args):
        return _ODA_Drawings.OdDbShHistory_booleanOper(self, *args)

    def postInDatabase(self, *args):
        return _ODA_Drawings.OdDbShHistory_postInDatabase(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbShHistory_subTransformBy(self, *args)

    def filletEdges(self, *args):
        return _ODA_Drawings.OdDbShHistory_filletEdges(self, *args)

    def chamferEdges(self, *args):
        return _ODA_Drawings.OdDbShHistory_chamferEdges(self, *args)

# Register OdDbShHistory in _ODA_Drawings:
_ODA_Drawings.OdDbShHistory_swigregister(OdDbShHistory)

def OdDbShHistory_cast(*args):
    return _ODA_Drawings.OdDbShHistory_cast(*args)

def OdDbShHistory_desc(*args):
    return _ODA_Drawings.OdDbShHistory_desc(*args)

def OdDbShHistory_createObject(*args):
    return _ODA_Drawings.OdDbShHistory_createObject(*args)

class OdDbShFillet(OdDbShHistoryNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShFillet_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShFillet_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShFillet_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShFillet_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShFillet_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShFillet_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShFillet_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShFillet_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShFillet_dxfOutFields(self, *args)

    def numEdges(self, *args):
        return _ODA_Drawings.OdDbShFillet_numEdges(self, *args)

    def getStartSetbacks(self, *args):
        return _ODA_Drawings.OdDbShFillet_getStartSetbacks(self, *args)

    def getEndSetbacks(self, *args):
        return _ODA_Drawings.OdDbShFillet_getEndSetbacks(self, *args)

    def getRadiuses(self, *args):
        return _ODA_Drawings.OdDbShFillet_getRadiuses(self, *args)

    def setStartSetbacks(self, *args):
        return _ODA_Drawings.OdDbShFillet_setStartSetbacks(self, *args)

    def setEndSetbacks(self, *args):
        return _ODA_Drawings.OdDbShFillet_setEndSetbacks(self, *args)

    def setRadiuses(self, *args):
        return _ODA_Drawings.OdDbShFillet_setRadiuses(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShFillet

# Register OdDbShFillet in _ODA_Drawings:
_ODA_Drawings.OdDbShFillet_swigregister(OdDbShFillet)

def OdDbShFillet_cast(*args):
    return _ODA_Drawings.OdDbShFillet_cast(*args)

def OdDbShFillet_desc(*args):
    return _ODA_Drawings.OdDbShFillet_desc(*args)

def OdDbShFillet_createObject(*args):
    return _ODA_Drawings.OdDbShFillet_createObject(*args)

class OdDbShExtrusion(OdDbShPrimitive):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShExtrusion_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShExtrusion_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShExtrusion_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShExtrusion_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShExtrusion_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShExtrusion_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShExtrusion_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShExtrusion_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShExtrusion_dxfOutFields(self, *args)

    def direction(self, *args):
        return _ODA_Drawings.OdDbShExtrusion_direction(self, *args)

    def setDirection(self, *args):
        return _ODA_Drawings.OdDbShExtrusion_setDirection(self, *args)

    def getSweepOptions(self, *args):
        return _ODA_Drawings.OdDbShExtrusion_getSweepOptions(self, *args)

    def setSweepOptions(self, *args):
        return _ODA_Drawings.OdDbShExtrusion_setSweepOptions(self, *args)

    def setExtrude(self, *args):
        return _ODA_Drawings.OdDbShExtrusion_setExtrude(self, *args)

    def height(self, *args):
        return _ODA_Drawings.OdDbShExtrusion_height(self, *args)

    def setHeight(self, *args):
        return _ODA_Drawings.OdDbShExtrusion_setHeight(self, *args)

    def sweepEntity(self, *args):
        return _ODA_Drawings.OdDbShExtrusion_sweepEntity(self, *args)

    def pathEntity(self, *args):
        return _ODA_Drawings.OdDbShExtrusion_pathEntity(self, *args)

    def setPathEntity(self, *args):
        return _ODA_Drawings.OdDbShExtrusion_setPathEntity(self, *args)

    def setSweepEntity(self, *args):
        return _ODA_Drawings.OdDbShExtrusion_setSweepEntity(self, *args)

    def getPathLength(self, *args):
        return _ODA_Drawings.OdDbShExtrusion_getPathLength(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShExtrusion

# Register OdDbShExtrusion in _ODA_Drawings:
_ODA_Drawings.OdDbShExtrusion_swigregister(OdDbShExtrusion)

def OdDbShExtrusion_cast(*args):
    return _ODA_Drawings.OdDbShExtrusion_cast(*args)

def OdDbShExtrusion_desc(*args):
    return _ODA_Drawings.OdDbShExtrusion_desc(*args)

def OdDbShExtrusion_createObject(*args):
    return _ODA_Drawings.OdDbShExtrusion_createObject(*args)

class OdDbShCylinder(OdDbShPrimitive):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShCylinder_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShCylinder_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShCylinder_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShCylinder_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShCylinder_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShCylinder_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShCylinder_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShCylinder_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShCylinder_dxfOutFields(self, *args)

    def height(self, *args):
        return _ODA_Drawings.OdDbShCylinder_height(self, *args)

    def xRadius(self, *args):
        return _ODA_Drawings.OdDbShCylinder_xRadius(self, *args)

    def yRadius(self, *args):
        return _ODA_Drawings.OdDbShCylinder_yRadius(self, *args)

    def majorRadius(self, *args):
        return _ODA_Drawings.OdDbShCylinder_majorRadius(self, *args)

    def minorRadius(self, *args):
        return _ODA_Drawings.OdDbShCylinder_minorRadius(self, *args)

    def setHeight(self, *args):
        return _ODA_Drawings.OdDbShCylinder_setHeight(self, *args)

    def setXRadius(self, *args):
        return _ODA_Drawings.OdDbShCylinder_setXRadius(self, *args)

    def setYRadius(self, *args):
        return _ODA_Drawings.OdDbShCylinder_setYRadius(self, *args)

    def setMajorRadius(self, *args):
        return _ODA_Drawings.OdDbShCylinder_setMajorRadius(self, *args)

    def setMinorRadius(self, *args):
        return _ODA_Drawings.OdDbShCylinder_setMinorRadius(self, *args)

    def isCylindrical(self, *args):
        return _ODA_Drawings.OdDbShCylinder_isCylindrical(self, *args)

    def isElliptical(self, *args):
        return _ODA_Drawings.OdDbShCylinder_isElliptical(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShCylinder

# Register OdDbShCylinder in _ODA_Drawings:
_ODA_Drawings.OdDbShCylinder_swigregister(OdDbShCylinder)

def OdDbShCylinder_cast(*args):
    return _ODA_Drawings.OdDbShCylinder_cast(*args)

def OdDbShCylinder_desc(*args):
    return _ODA_Drawings.OdDbShCylinder_desc(*args)

def OdDbShCylinder_createObject(*args):
    return _ODA_Drawings.OdDbShCylinder_createObject(*args)

class OdDbShCone(OdDbShPrimitive):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShCone_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShCone_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShCone_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShCone_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShCone_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShCone_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShCone_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShCone_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShCone_dxfOutFields(self, *args)

    def baseRadius(self, *args):
        return _ODA_Drawings.OdDbShCone_baseRadius(self, *args)

    def topMinorRadius(self, *args):
        return _ODA_Drawings.OdDbShCone_topMinorRadius(self, *args)

    def topMajorRadius(self, *args):
        return _ODA_Drawings.OdDbShCone_topMajorRadius(self, *args)

    def topXRadius(self, *args):
        return _ODA_Drawings.OdDbShCone_topXRadius(self, *args)

    def setBaseRadius(self, *args):
        return _ODA_Drawings.OdDbShCone_setBaseRadius(self, *args)

    def setTopMinorRadius(self, *args):
        return _ODA_Drawings.OdDbShCone_setTopMinorRadius(self, *args)

    def setTopMajorRadius(self, *args):
        return _ODA_Drawings.OdDbShCone_setTopMajorRadius(self, *args)

    def setTopXRadius(self, *args):
        return _ODA_Drawings.OdDbShCone_setTopXRadius(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShCone

# Register OdDbShCone in _ODA_Drawings:
_ODA_Drawings.OdDbShCone_swigregister(OdDbShCone)

def OdDbShCone_cast(*args):
    return _ODA_Drawings.OdDbShCone_cast(*args)

def OdDbShCone_desc(*args):
    return _ODA_Drawings.OdDbShCone_desc(*args)

def OdDbShCone_createObject(*args):
    return _ODA_Drawings.OdDbShCone_createObject(*args)

class OdDbShChamfer(OdDbShHistoryNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShChamfer_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShChamfer_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShChamfer_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShChamfer_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShChamfer_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShChamfer_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShChamfer_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShChamfer_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShChamfer_dxfOutFields(self, *args)

    def numEdges(self, *args):
        return _ODA_Drawings.OdDbShChamfer_numEdges(self, *args)

    def setBaseDistance(self, *args):
        return _ODA_Drawings.OdDbShChamfer_setBaseDistance(self, *args)

    def getBaseDistance(self, *args):
        return _ODA_Drawings.OdDbShChamfer_getBaseDistance(self, *args)

    def getOtherDistance(self, *args):
        return _ODA_Drawings.OdDbShChamfer_getOtherDistance(self, *args)

    def setOtherDistance(self, *args):
        return _ODA_Drawings.OdDbShChamfer_setOtherDistance(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShChamfer

# Register OdDbShChamfer in _ODA_Drawings:
_ODA_Drawings.OdDbShChamfer_swigregister(OdDbShChamfer)

def OdDbShChamfer_cast(*args):
    return _ODA_Drawings.OdDbShChamfer_cast(*args)

def OdDbShChamfer_desc(*args):
    return _ODA_Drawings.OdDbShChamfer_desc(*args)

def OdDbShChamfer_createObject(*args):
    return _ODA_Drawings.OdDbShChamfer_createObject(*args)

class OdDbShBrep(OdDbShPrimitive):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShBrep_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShBrep_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShBrep_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShBrep_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShBrep_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShBrep_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShBrep_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShBrep_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShBrep_dxfOutFields(self, *args)

    def setBody(self, *args):
        return _ODA_Drawings.OdDbShBrep_setBody(self, *args)

    def getBody(self, *args):
        return _ODA_Drawings.OdDbShBrep_getBody(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShBrep

# Register OdDbShBrep in _ODA_Drawings:
_ODA_Drawings.OdDbShBrep_swigregister(OdDbShBrep)

def OdDbShBrep_cast(*args):
    return _ODA_Drawings.OdDbShBrep_cast(*args)

def OdDbShBrep_desc(*args):
    return _ODA_Drawings.OdDbShBrep_desc(*args)

def OdDbShBrep_createObject(*args):
    return _ODA_Drawings.OdDbShBrep_createObject(*args)

class OdDbShBox(OdDbShPrimitive):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShBox_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShBox_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShBox_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShBox_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShBox_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShBox_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShBox_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShBox_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShBox_dxfOutFields(self, *args)

    def length(self, *args):
        return _ODA_Drawings.OdDbShBox_length(self, *args)

    def width(self, *args):
        return _ODA_Drawings.OdDbShBox_width(self, *args)

    def height(self, *args):
        return _ODA_Drawings.OdDbShBox_height(self, *args)

    def setLength(self, *args):
        return _ODA_Drawings.OdDbShBox_setLength(self, *args)

    def setWidth(self, *args):
        return _ODA_Drawings.OdDbShBox_setWidth(self, *args)

    def setHeight(self, *args):
        return _ODA_Drawings.OdDbShBox_setHeight(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShBox

# Register OdDbShBox in _ODA_Drawings:
_ODA_Drawings.OdDbShBox_swigregister(OdDbShBox)

def OdDbShBox_cast(*args):
    return _ODA_Drawings.OdDbShBox_cast(*args)

def OdDbShBox_desc(*args):
    return _ODA_Drawings.OdDbShBox_desc(*args)

def OdDbShBox_createObject(*args):
    return _ODA_Drawings.OdDbShBox_createObject(*args)

class OdDbShBoolean(OdDbShHistoryNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShBoolean_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShBoolean_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShBoolean_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShBoolean_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShBoolean_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbShBoolean_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbShBoolean_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbShBoolean_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbShBoolean_dxfOutFields(self, *args)

    def operation(self, *args):
        return _ODA_Drawings.OdDbShBoolean_operation(self, *args)

    def setOperation(self, *args):
        return _ODA_Drawings.OdDbShBoolean_setOperation(self, *args)

    def connectOperands(self, *args):
        return _ODA_Drawings.OdDbShBoolean_connectOperands(self, *args)

    def getOperand1(self, *args):
        return _ODA_Drawings.OdDbShBoolean_getOperand1(self, *args)

    def getOperand2(self, *args):
        return _ODA_Drawings.OdDbShBoolean_getOperand2(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShBoolean

# Register OdDbShBoolean in _ODA_Drawings:
_ODA_Drawings.OdDbShBoolean_swigregister(OdDbShBoolean)

def OdDbShBoolean_cast(*args):
    return _ODA_Drawings.OdDbShBoolean_cast(*args)

def OdDbShBoolean_desc(*args):
    return _ODA_Drawings.OdDbShBoolean_desc(*args)

def OdDbShBoolean_createObject(*args):
    return _ODA_Drawings.OdDbShBoolean_createObject(*args)

class OdDbAssocPersSubentManager(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAssocPersSubentManager_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAssocPersSubentManager_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAssocPersSubentManager_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAssocPersSubentManager_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAssocPersSubentManager_createObject(*args)

    def __init__(self, *args):
        _ODA_Drawings.OdDbAssocPersSubentManager_swiginit(self, _ODA_Drawings.new_OdDbAssocPersSubentManager(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAssocPersSubentManager

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbAssocPersSubentManager_dwgOutFields(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbAssocPersSubentManager_dwgInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbAssocPersSubentManager_dxfOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbAssocPersSubentManager_dxfInFields(self, *args)

    def parseSubentData(self, *args):
        return _ODA_Drawings.OdDbAssocPersSubentManager_parseSubentData(self, *args)

    def lastStepId(self, *args):
        return _ODA_Drawings.OdDbAssocPersSubentManager_lastStepId(self, *args)

    def infoAcisDataIndexes(self, *args):
        return _ODA_Drawings.OdDbAssocPersSubentManager_infoAcisDataIndexes(self, *args)

    @staticmethod
    def getInstanceFromDatabase(*args):
        return _ODA_Drawings.OdDbAssocPersSubentManager_getInstanceFromDatabase(*args)

    @staticmethod
    def createIfItDoesNotExist(*args):
        return _ODA_Drawings.OdDbAssocPersSubentManager_createIfItDoesNotExist(*args)

    def addSubentRWData(self, *args):
        return _ODA_Drawings.OdDbAssocPersSubentManager_addSubentRWData(self, *args)

    def maxSubentIdIndex(self, *args):
        return _ODA_Drawings.OdDbAssocPersSubentManager_maxSubentIdIndex(self, *args)

    def createNewStep(self, *args):
        return _ODA_Drawings.OdDbAssocPersSubentManager_createNewStep(self, *args)

# Register OdDbAssocPersSubentManager in _ODA_Drawings:
_ODA_Drawings.OdDbAssocPersSubentManager_swigregister(OdDbAssocPersSubentManager)

def OdDbAssocPersSubentManager_cast(*args):
    return _ODA_Drawings.OdDbAssocPersSubentManager_cast(*args)

def OdDbAssocPersSubentManager_desc(*args):
    return _ODA_Drawings.OdDbAssocPersSubentManager_desc(*args)

def OdDbAssocPersSubentManager_createObject(*args):
    return _ODA_Drawings.OdDbAssocPersSubentManager_createObject(*args)

def OdDbAssocPersSubentManager_getInstanceFromDatabase(*args):
    return _ODA_Drawings.OdDbAssocPersSubentManager_getInstanceFromDatabase(*args)

def OdDbAssocPersSubentManager_createIfItDoesNotExist(*args):
    return _ODA_Drawings.OdDbAssocPersSubentManager_createIfItDoesNotExist(*args)


def oddbBeginProxyGraphics(*args):
    return _ODA_Drawings.oddbBeginProxyGraphics(*args)

def oddbEndProxyGraphics(*args):
    return _ODA_Drawings.oddbEndProxyGraphics(*args)
class OdRemoteGeomProxy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kGraphics = _ODA_Drawings.OdRemoteGeomProxy_kGraphics
    kStringToExecute = _ODA_Drawings.OdRemoteGeomProxy_kStringToExecute

    def __init__(self, *args):
        _ODA_Drawings.OdRemoteGeomProxy_swiginit(self, _ODA_Drawings.new_OdRemoteGeomProxy(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdRemoteGeomProxy

    def setDatabase(self, *args):
        return _ODA_Drawings.OdRemoteGeomProxy_setDatabase(self, *args)

    def begin(self, *args):
        return _ODA_Drawings.OdRemoteGeomProxy_begin(self, *args)

    def wDraw(self, *args):
        return _ODA_Drawings.OdRemoteGeomProxy_wDraw(self, *args)

    def wGeom(self, *args):
        return _ODA_Drawings.OdRemoteGeomProxy_wGeom(self, *args)

    def traits(self, *args):
        return _ODA_Drawings.OdRemoteGeomProxy_traits(self, *args)

    def end(self, *args):
        return _ODA_Drawings.OdRemoteGeomProxy_end(self, *args)

    def sendStringToExecute(self, *args):
        return _ODA_Drawings.OdRemoteGeomProxy_sendStringToExecute(self, *args)

# Register OdRemoteGeomProxy in _ODA_Drawings:
_ODA_Drawings.OdRemoteGeomProxy_swigregister(OdRemoteGeomProxy)

class OdRemoteGeomProxyAutoBlock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdRemoteGeomProxyAutoBlock_swiginit(self, _ODA_Drawings.new_OdRemoteGeomProxyAutoBlock(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdRemoteGeomProxyAutoBlock

# Register OdRemoteGeomProxyAutoBlock in _ODA_Drawings:
_ODA_Drawings.OdRemoteGeomProxyAutoBlock_swigregister(OdRemoteGeomProxyAutoBlock)
g_strGeomBlockBegin = cvar.g_strGeomBlockBegin
g_strGeomBlockEnd = cvar.g_strGeomBlockEnd

class OdOxOleLinkManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetIUnknown(self, *args):
        return _ODA_Drawings.OdOxOleLinkManager_GetIUnknown(self, *args)

    def SetIUnknown(self, *args):
        return _ODA_Drawings.OdOxOleLinkManager_SetIUnknown(self, *args)

    def GetDocIDispatch(self, *args):
        return _ODA_Drawings.OdOxOleLinkManager_GetDocIDispatch(self, *args)

    def SetDocIDispatch(self, *args):
        return _ODA_Drawings.OdOxOleLinkManager_SetDocIDispatch(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdOxOleLinkManager

# Register OdOxOleLinkManager in _ODA_Drawings:
_ODA_Drawings.OdOxOleLinkManager_swigregister(OdOxOleLinkManager)


def OdOxGetOleLinkManager(*args):
    return _ODA_Drawings.OdOxGetOleLinkManager(*args)
class OdFileDependencyInfo(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdFileDependencyInfo_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdFileDependencyInfo_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdFileDependencyInfo_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdFileDependencyInfo_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdFileDependencyInfo_createObject(*args)

    def copyFrom(self, *args):
        return _ODA_Drawings.OdFileDependencyInfo_copyFrom(self, *args)
    m_FullFileName = property(_ODA_Drawings.OdFileDependencyInfo_m_FullFileName_get, _ODA_Drawings.OdFileDependencyInfo_m_FullFileName_set)
    m_FileName = property(_ODA_Drawings.OdFileDependencyInfo_m_FileName_get, _ODA_Drawings.OdFileDependencyInfo_m_FileName_set)
    m_FoundPath = property(_ODA_Drawings.OdFileDependencyInfo_m_FoundPath_get, _ODA_Drawings.OdFileDependencyInfo_m_FoundPath_set)
    m_FingerprintGuid = property(_ODA_Drawings.OdFileDependencyInfo_m_FingerprintGuid_get, _ODA_Drawings.OdFileDependencyInfo_m_FingerprintGuid_set)
    m_VersionGuid = property(_ODA_Drawings.OdFileDependencyInfo_m_VersionGuid_get, _ODA_Drawings.OdFileDependencyInfo_m_VersionGuid_set)
    m_Feature = property(_ODA_Drawings.OdFileDependencyInfo_m_Feature_get, _ODA_Drawings.OdFileDependencyInfo_m_Feature_set)
    m_bIsModified = property(_ODA_Drawings.OdFileDependencyInfo_m_bIsModified_get, _ODA_Drawings.OdFileDependencyInfo_m_bIsModified_set)
    m_bAffectsGraphics = property(_ODA_Drawings.OdFileDependencyInfo_m_bAffectsGraphics_get, _ODA_Drawings.OdFileDependencyInfo_m_bAffectsGraphics_set)
    m_nIndex = property(_ODA_Drawings.OdFileDependencyInfo_m_nIndex_get, _ODA_Drawings.OdFileDependencyInfo_m_nIndex_set)
    m_nTimeStamp = property(_ODA_Drawings.OdFileDependencyInfo_m_nTimeStamp_get, _ODA_Drawings.OdFileDependencyInfo_m_nTimeStamp_set)
    m_nFileSize = property(_ODA_Drawings.OdFileDependencyInfo_m_nFileSize_get, _ODA_Drawings.OdFileDependencyInfo_m_nFileSize_set)
    m_nReferenceCount = property(_ODA_Drawings.OdFileDependencyInfo_m_nReferenceCount_get, _ODA_Drawings.OdFileDependencyInfo_m_nReferenceCount_set)
    __swig_destroy__ = _ODA_Drawings.delete_OdFileDependencyInfo

# Register OdFileDependencyInfo in _ODA_Drawings:
_ODA_Drawings.OdFileDependencyInfo_swigregister(OdFileDependencyInfo)

def OdFileDependencyInfo_cast(*args):
    return _ODA_Drawings.OdFileDependencyInfo_cast(*args)

def OdFileDependencyInfo_desc(*args):
    return _ODA_Drawings.OdFileDependencyInfo_desc(*args)

def OdFileDependencyInfo_createObject(*args):
    return _ODA_Drawings.OdFileDependencyInfo_createObject(*args)

class OdFileDependencyManager(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdFileDependencyManager_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdFileDependencyManager_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdFileDependencyManager_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdFileDependencyManager_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdFileDependencyManager_createObject(*args)

    def createEntry(self, *args):
        return _ODA_Drawings.OdFileDependencyManager_createEntry(self, *args)

    def getEntry(self, *args):
        return _ODA_Drawings.OdFileDependencyManager_getEntry(self, *args)

    def updateEntry(self, *args):
        return _ODA_Drawings.OdFileDependencyManager_updateEntry(self, *args)

    def eraseEntry(self, *args):
        return _ODA_Drawings.OdFileDependencyManager_eraseEntry(self, *args)

    def countEntries(self, *args):
        return _ODA_Drawings.OdFileDependencyManager_countEntries(self, *args)

    def iteratorInitialize(self, *args):
        return _ODA_Drawings.OdFileDependencyManager_iteratorInitialize(self, *args)

    def iteratorNext(self, *args):
        return _ODA_Drawings.OdFileDependencyManager_iteratorNext(self, *args)

    def getFeatures(self, *args):
        return _ODA_Drawings.OdFileDependencyManager_getFeatures(self, *args)

    def clearXRefEntries(self, *args):
        return _ODA_Drawings.OdFileDependencyManager_clearXRefEntries(self, *args)

    def iteratorUnInitialize(self, *args):
        return _ODA_Drawings.OdFileDependencyManager_iteratorUnInitialize(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdFileDependencyManager

# Register OdFileDependencyManager in _ODA_Drawings:
_ODA_Drawings.OdFileDependencyManager_swigregister(OdFileDependencyManager)

def OdFileDependencyManager_cast(*args):
    return _ODA_Drawings.OdFileDependencyManager_cast(*args)

def OdFileDependencyManager_desc(*args):
    return _ODA_Drawings.OdFileDependencyManager_desc(*args)

def OdFileDependencyManager_createObject(*args):
    return _ODA_Drawings.OdFileDependencyManager_createObject(*args)

class OdDbGeoDataMarker(ODA_Kernel.OdGiDrawable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setGsNode(self, *args):
        return _ODA_Drawings.OdDbGeoDataMarker_setGsNode(self, *args)

    def gsNode(self, *args):
        return _ODA_Drawings.OdDbGeoDataMarker_gsNode(self, *args)

    def isPersistent(self, *args):
        return _ODA_Drawings.OdDbGeoDataMarker_isPersistent(self, *args)

    def id(self, *args):
        return _ODA_Drawings.OdDbGeoDataMarker_id(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbGeoDataMarker_subSetAttributes(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbGeoDataMarker_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbGeoDataMarker_subViewportDraw(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGeoDataMarker

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGeoDataMarker_createObject(*args)

    def setView(self, *args):
        return _ODA_Drawings.OdDbGeoDataMarker_setView(self, *args)

    def clearView(self, *args):
        return _ODA_Drawings.OdDbGeoDataMarker_clearView(self, *args)

    def getView(self, *args):
        return _ODA_Drawings.OdDbGeoDataMarker_getView(self, *args)

# Register OdDbGeoDataMarker in _ODA_Drawings:
_ODA_Drawings.OdDbGeoDataMarker_swigregister(OdDbGeoDataMarker)

def OdDbGeoDataMarker_createObject(*args):
    return _ODA_Drawings.OdDbGeoDataMarker_createObject(*args)

class OdDbGeoDataChunksPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbGeoDataChunksPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbGeoDataChunksPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbGeoDataChunksPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbGeoDataChunksPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGeoDataChunksPE_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGeoDataChunksPE

    def drawGeoDataChunks(self, *args):
        return _ODA_Drawings.OdDbGeoDataChunksPE_drawGeoDataChunks(self, *args)

    def drawGeoDataProvidersString(self, *args):
        return _ODA_Drawings.OdDbGeoDataChunksPE_drawGeoDataProvidersString(self, *args)

    def setMode(self, *args):
        return _ODA_Drawings.OdDbGeoDataChunksPE_setMode(self, *args)

    def getMode(self, *args):
        return _ODA_Drawings.OdDbGeoDataChunksPE_getMode(self, *args)

# Register OdDbGeoDataChunksPE in _ODA_Drawings:
_ODA_Drawings.OdDbGeoDataChunksPE_swigregister(OdDbGeoDataChunksPE)

def OdDbGeoDataChunksPE_cast(*args):
    return _ODA_Drawings.OdDbGeoDataChunksPE_cast(*args)

def OdDbGeoDataChunksPE_desc(*args):
    return _ODA_Drawings.OdDbGeoDataChunksPE_desc(*args)

def OdDbGeoDataChunksPE_createObject(*args):
    return _ODA_Drawings.OdDbGeoDataChunksPE_createObject(*args)

class OdDbGeoDataChunks(ODA_Kernel.OdGiDrawable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setGsNode(self, *args):
        return _ODA_Drawings.OdDbGeoDataChunks_setGsNode(self, *args)

    def gsNode(self, *args):
        return _ODA_Drawings.OdDbGeoDataChunks_gsNode(self, *args)

    def isPersistent(self, *args):
        return _ODA_Drawings.OdDbGeoDataChunks_isPersistent(self, *args)

    def id(self, *args):
        return _ODA_Drawings.OdDbGeoDataChunks_id(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbGeoDataChunks_subSetAttributes(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbGeoDataChunks_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbGeoDataChunks_subViewportDraw(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGeoDataChunks

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGeoDataChunks_createObject(*args)

# Register OdDbGeoDataChunks in _ODA_Drawings:
_ODA_Drawings.OdDbGeoDataChunks_swigregister(OdDbGeoDataChunks)

def OdDbGeoDataChunks_createObject(*args):
    return _ODA_Drawings.OdDbGeoDataChunks_createObject(*args)

class OdDbGeoDataProvidersString(ODA_Kernel.OdGiDrawable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setGsNode(self, *args):
        return _ODA_Drawings.OdDbGeoDataProvidersString_setGsNode(self, *args)

    def gsNode(self, *args):
        return _ODA_Drawings.OdDbGeoDataProvidersString_gsNode(self, *args)

    def isPersistent(self, *args):
        return _ODA_Drawings.OdDbGeoDataProvidersString_isPersistent(self, *args)

    def id(self, *args):
        return _ODA_Drawings.OdDbGeoDataProvidersString_id(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbGeoDataProvidersString_subSetAttributes(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbGeoDataProvidersString_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbGeoDataProvidersString_subViewportDraw(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGeoDataProvidersString

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGeoDataProvidersString_createObject(*args)

# Register OdDbGeoDataProvidersString in _ODA_Drawings:
_ODA_Drawings.OdDbGeoDataProvidersString_swigregister(OdDbGeoDataProvidersString)

def OdDbGeoDataProvidersString_createObject(*args):
    return _ODA_Drawings.OdDbGeoDataProvidersString_createObject(*args)

class OdDbGeoCoordinateSystemCategoryPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemCategoryPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemCategoryPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemCategoryPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemCategoryPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemCategoryPE_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGeoCoordinateSystemCategoryPE

    def createAll(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemCategoryPE_createAll(self, *args)

# Register OdDbGeoCoordinateSystemCategoryPE in _ODA_Drawings:
_ODA_Drawings.OdDbGeoCoordinateSystemCategoryPE_swigregister(OdDbGeoCoordinateSystemCategoryPE)

def OdDbGeoCoordinateSystemCategoryPE_cast(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystemCategoryPE_cast(*args)

def OdDbGeoCoordinateSystemCategoryPE_desc(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystemCategoryPE_desc(*args)

def OdDbGeoCoordinateSystemCategoryPE_createObject(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystemCategoryPE_createObject(*args)

class OdDbGeoCoordinateSystemPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemPE_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGeoCoordinateSystemPE

    def create(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemPE_create(self, *args)

    def createAll(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemPE_createAll(self, *args)

# Register OdDbGeoCoordinateSystemPE in _ODA_Drawings:
_ODA_Drawings.OdDbGeoCoordinateSystemPE_swigregister(OdDbGeoCoordinateSystemPE)

def OdDbGeoCoordinateSystemPE_cast(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystemPE_cast(*args)

def OdDbGeoCoordinateSystemPE_desc(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystemPE_desc(*args)

def OdDbGeoCoordinateSystemPE_createObject(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystemPE_createObject(*args)

class OdDbGeoCoordinateSystemTransformerPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemTransformerPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemTransformerPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemTransformerPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemTransformerPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemTransformerPE_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGeoCoordinateSystemTransformerPE

    def transformPoint(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemTransformerPE_transformPoint(self, *args)

    def transformPoints(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemTransformerPE_transformPoints(self, *args)

    def create(self, *args):
        return _ODA_Drawings.OdDbGeoCoordinateSystemTransformerPE_create(self, *args)

# Register OdDbGeoCoordinateSystemTransformerPE in _ODA_Drawings:
_ODA_Drawings.OdDbGeoCoordinateSystemTransformerPE_swigregister(OdDbGeoCoordinateSystemTransformerPE)

def OdDbGeoCoordinateSystemTransformerPE_cast(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystemTransformerPE_cast(*args)

def OdDbGeoCoordinateSystemTransformerPE_desc(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystemTransformerPE_desc(*args)

def OdDbGeoCoordinateSystemTransformerPE_createObject(*args):
    return _ODA_Drawings.OdDbGeoCoordinateSystemTransformerPE_createObject(*args)

class OdModelerTools(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdModelerTools_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdModelerTools_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdModelerTools_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdModelerTools_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdModelerTools_createObject(*args)

    def deleteModelerBulletins(self, *args):
        return _ODA_Drawings.OdModelerTools_deleteModelerBulletins(self, *args)

    def beginThreadSafetyMode(self, *args):
        return _ODA_Drawings.OdModelerTools_beginThreadSafetyMode(self, *args)

    def endThreadSafetyMode(self, *args):
        return _ODA_Drawings.OdModelerTools_endThreadSafetyMode(self, *args)

    def startThread(self, *args):
        return _ODA_Drawings.OdModelerTools_startThread(self, *args)

    def stopThread(self, *args):
        return _ODA_Drawings.OdModelerTools_stopThread(self, *args)

    def isThreadStarted(self, *args):
        return _ODA_Drawings.OdModelerTools_isThreadStarted(self, *args)

    def check3dSolid(self, *args):
        return _ODA_Drawings.OdModelerTools_check3dSolid(self, *args)

    def executeInMainHistoryStream(self, *args):
        return _ODA_Drawings.OdModelerTools_executeInMainHistoryStream(self, *args)

    def createHatchFromModelerGeometry(self, *args):
        return _ODA_Drawings.OdModelerTools_createHatchFromModelerGeometry(self, *args)

    def getAdeskTrueCol(self, *args):
        return _ODA_Drawings.OdModelerTools_getAdeskTrueCol(self, *args)

    def getAdeskCol(self, *args):
        return _ODA_Drawings.OdModelerTools_getAdeskCol(self, *args)

    def setTestMode(self, *args):
        return _ODA_Drawings.OdModelerTools_setTestMode(self, *args)

    def getClosestPoints(self, *args):
        return _ODA_Drawings.OdModelerTools_getClosestPoints(self, *args)

    def cloneAndXform(self, *args):
        return _ODA_Drawings.OdModelerTools_cloneAndXform(self, *args)

    def getMaxPoint(self, *args):
        return _ODA_Drawings.OdModelerTools_getMaxPoint(self, *args)

    def getExtremePoints(self, *args):
        return _ODA_Drawings.OdModelerTools_getExtremePoints(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdModelerTools

# Register OdModelerTools in _ODA_Drawings:
_ODA_Drawings.OdModelerTools_swigregister(OdModelerTools)

def OdModelerTools_cast(*args):
    return _ODA_Drawings.OdModelerTools_cast(*args)

def OdModelerTools_desc(*args):
    return _ODA_Drawings.OdModelerTools_desc(*args)

def OdModelerTools_createObject(*args):
    return _ODA_Drawings.OdModelerTools_createObject(*args)

class OdDbShModelerHistory(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbShModelerHistory_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbShModelerHistory_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbShModelerHistory_createObject(*args)

    def createShHistory(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_createShHistory(self, *args)

    def getHistoryVariables(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_getHistoryVariables(self, *args)

    def setShowHistory(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_setShowHistory(self, *args)

    def setRecordHistory(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_setRecordHistory(self, *args)

    def clearHistory(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_clearHistory(self, *args)

    def createBox(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_createBox(self, *args)

    def createFrustum(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_createFrustum(self, *args)

    def createWedge(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_createWedge(self, *args)

    def createPyramid(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_createPyramid(self, *args)

    def createSphere(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_createSphere(self, *args)

    def createTorus(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_createTorus(self, *args)

    def setSubentColor(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_setSubentColor(self, *args)

    def setSubentMaterial(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_setSubentMaterial(self, *args)

    def createLoftedSolid(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_createLoftedSolid(self, *args)

    def createRevolvedSolid(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_createRevolvedSolid(self, *args)

    def createSweptSolid(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_createSweptSolid(self, *args)

    def booleanOper(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_booleanOper(self, *args)

    def postInDatabase(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_postInDatabase(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_subTransformBy(self, *args)

    def filletEdges(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_filletEdges(self, *args)

    def chamferEdges(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_chamferEdges(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbShModelerHistory_subWorldDraw(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbShModelerHistory

# Register OdDbShModelerHistory in _ODA_Drawings:
_ODA_Drawings.OdDbShModelerHistory_swigregister(OdDbShModelerHistory)

def OdDbShModelerHistory_cast(*args):
    return _ODA_Drawings.OdDbShModelerHistory_cast(*args)

def OdDbShModelerHistory_desc(*args):
    return _ODA_Drawings.OdDbShModelerHistory_desc(*args)

def OdDbShModelerHistory_createObject(*args):
    return _ODA_Drawings.OdDbShModelerHistory_createObject(*args)

class ModelerModule(ODA_Kernel.OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setTriangulationParams(self, *args):
        return _ODA_Drawings.ModelerModule_setTriangulationParams(self, *args)

    def getTriangulationParams(self, *args):
        return _ODA_Drawings.ModelerModule_getTriangulationParams(self, *args)

    def dummy(self, *args):
        return _ODA_Drawings.ModelerModule_dummy(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_ModelerModule

# Register ModelerModule in _ODA_Drawings:
_ODA_Drawings.ModelerModule_swigregister(ModelerModule)

class OdRxSketchManager(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdRxSketchManager_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdRxSketchManager_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdRxSketchManager_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdRxSketchManager_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdRxSketchManager_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdRxSketchManager

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdRxSketchManager_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdRxSketchManager_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdRxSketchManager_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdRxSketchManager_dxfOutFields(self, *args)

    def clearSketchObjects(self, *args):
        return _ODA_Drawings.OdRxSketchManager_clearSketchObjects(self, *args)

    def constructionLineType(self, *args):
        return _ODA_Drawings.OdRxSketchManager_constructionLineType(self, *args)

    def deleteSketch(self, *args):
        return _ODA_Drawings.OdRxSketchManager_deleteSketch(self, *args)

    def enterSketchMode(self, *args):
        return _ODA_Drawings.OdRxSketchManager_enterSketchMode(self, *args)

    def exitSketchMode(self, *args):
        return _ODA_Drawings.OdRxSketchManager_exitSketchMode(self, *args)

    def getActiveSketch(self, *args):
        return _ODA_Drawings.OdRxSketchManager_getActiveSketch(self, *args)

    def getSketchFromTag(self, *args):
        return _ODA_Drawings.OdRxSketchManager_getSketchFromTag(self, *args)

    def getSymbolSketchFromSymbol(self, *args):
        return _ODA_Drawings.OdRxSketchManager_getSymbolSketchFromSymbol(self, *args)

    def getSymbolSketchFromViewRep(self, *args):
        return _ODA_Drawings.OdRxSketchManager_getSymbolSketchFromViewRep(self, *args)

    def hasSketchObjects(self, *args):
        return _ODA_Drawings.OdRxSketchManager_hasSketchObjects(self, *args)

    def isDirty(self, *args):
        return _ODA_Drawings.OdRxSketchManager_isDirty(self, *args)

    def isInSketchMode(self, *args):
        return _ODA_Drawings.OdRxSketchManager_isInSketchMode(self, *args)

    def owningViewRep(self, *args):
        return _ODA_Drawings.OdRxSketchManager_owningViewRep(self, *args)

    def setIsDirty(self, *args):
        return _ODA_Drawings.OdRxSketchManager_setIsDirty(self, *args)

    def sketchBlockReference(self, *args):
        return _ODA_Drawings.OdRxSketchManager_sketchBlockReference(self, *args)

    def transformSketches(self, *args):
        return _ODA_Drawings.OdRxSketchManager_transformSketches(self, *args)

    def updateConstraintGroupWorkPlanes(self, *args):
        return _ODA_Drawings.OdRxSketchManager_updateConstraintGroupWorkPlanes(self, *args)

# Register OdRxSketchManager in _ODA_Drawings:
_ODA_Drawings.OdRxSketchManager_swigregister(OdRxSketchManager)

def OdRxSketchManager_cast(*args):
    return _ODA_Drawings.OdRxSketchManager_cast(*args)

def OdRxSketchManager_desc(*args):
    return _ODA_Drawings.OdRxSketchManager_desc(*args)

def OdRxSketchManager_createObject(*args):
    return _ODA_Drawings.OdRxSketchManager_createObject(*args)

class OdDbViewRepStandard(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewRepStandard_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewRepStandard_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewRepStandard_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewRepStandard_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewRepStandard_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewRepStandard

# Register OdDbViewRepStandard in _ODA_Drawings:
_ODA_Drawings.OdDbViewRepStandard_swigregister(OdDbViewRepStandard)

def OdDbViewRepStandard_cast(*args):
    return _ODA_Drawings.OdDbViewRepStandard_cast(*args)

def OdDbViewRepStandard_desc(*args):
    return _ODA_Drawings.OdDbViewRepStandard_desc(*args)

def OdDbViewRepStandard_createObject(*args):
    return _ODA_Drawings.OdDbViewRepStandard_createObject(*args)

class OdDbViewRepSourceMgr(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewRepSourceMgr_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewRepSourceMgr_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewRepSourceMgr_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewRepSourceMgr_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewRepSourceMgr_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewRepSourceMgr

    def removeInventorSourceId(self, *args):
        return _ODA_Drawings.OdDbViewRepSourceMgr_removeInventorSourceId(self, *args)

    def addInventorSourceId(self, *args):
        return _ODA_Drawings.OdDbViewRepSourceMgr_addInventorSourceId(self, *args)

    def setModelSpaceSourceId(self, *args):
        return _ODA_Drawings.OdDbViewRepSourceMgr_setModelSpaceSourceId(self, *args)

    def modelSpaceSourceId(self, *args):
        return _ODA_Drawings.OdDbViewRepSourceMgr_modelSpaceSourceId(self, *args)

# Register OdDbViewRepSourceMgr in _ODA_Drawings:
_ODA_Drawings.OdDbViewRepSourceMgr_swigregister(OdDbViewRepSourceMgr)

def OdDbViewRepSourceMgr_cast(*args):
    return _ODA_Drawings.OdDbViewRepSourceMgr_cast(*args)

def OdDbViewRepSourceMgr_desc(*args):
    return _ODA_Drawings.OdDbViewRepSourceMgr_desc(*args)

def OdDbViewRepSourceMgr_createObject(*args):
    return _ODA_Drawings.OdDbViewRepSourceMgr_createObject(*args)

class OdDbViewRepSectionDefinition(OdDbViewRepCutDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewRepSectionDefinition_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewRepSectionDefinition_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewRepSectionDefinition_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewRepSectionDefinition_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewRepSectionDefinition_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewRepSectionDefinition

    def setDepth(self, *args):
        return _ODA_Drawings.OdDbViewRepSectionDefinition_setDepth(self, *args)

    def depth(self, *args):
        return _ODA_Drawings.OdDbViewRepSectionDefinition_depth(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbViewRepSectionDefinition_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbViewRepSectionDefinition_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbViewRepSectionDefinition_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbViewRepSectionDefinition_dxfOutFields(self, *args)

# Register OdDbViewRepSectionDefinition in _ODA_Drawings:
_ODA_Drawings.OdDbViewRepSectionDefinition_swigregister(OdDbViewRepSectionDefinition)

def OdDbViewRepSectionDefinition_cast(*args):
    return _ODA_Drawings.OdDbViewRepSectionDefinition_cast(*args)

def OdDbViewRepSectionDefinition_desc(*args):
    return _ODA_Drawings.OdDbViewRepSectionDefinition_desc(*args)

def OdDbViewRepSectionDefinition_createObject(*args):
    return _ODA_Drawings.OdDbViewRepSectionDefinition_createObject(*args)

class OdDbViewRepProjectionDef(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewRepProjectionDef_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewRepProjectionDef_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewRepProjectionDef_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewRepProjectionDef_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewRepProjectionDef_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewRepProjectionDef

# Register OdDbViewRepProjectionDef in _ODA_Drawings:
_ODA_Drawings.OdDbViewRepProjectionDef_swigregister(OdDbViewRepProjectionDef)

def OdDbViewRepProjectionDef_cast(*args):
    return _ODA_Drawings.OdDbViewRepProjectionDef_cast(*args)

def OdDbViewRepProjectionDef_desc(*args):
    return _ODA_Drawings.OdDbViewRepProjectionDef_desc(*args)

def OdDbViewRepProjectionDef_createObject(*args):
    return _ODA_Drawings.OdDbViewRepProjectionDef_createObject(*args)

class OdDbViewRepOrientation(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewRepOrientation_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewRepOrientation_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewRepOrientation_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewRepOrientation_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewRepOrientation_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewRepOrientation

    def upVector(self, *args):
        return _ODA_Drawings.OdDbViewRepOrientation_upVector(self, *args)

    def setUpVector(self, *args):
        return _ODA_Drawings.OdDbViewRepOrientation_setUpVector(self, *args)

    def eye(self, *args):
        return _ODA_Drawings.OdDbViewRepOrientation_eye(self, *args)

    def setEye(self, *args):
        return _ODA_Drawings.OdDbViewRepOrientation_setEye(self, *args)

    def target(self, *args):
        return _ODA_Drawings.OdDbViewRepOrientation_target(self, *args)

    def setTarget(self, *args):
        return _ODA_Drawings.OdDbViewRepOrientation_setTarget(self, *args)

# Register OdDbViewRepOrientation in _ODA_Drawings:
_ODA_Drawings.OdDbViewRepOrientation_swigregister(OdDbViewRepOrientation)

def OdDbViewRepOrientation_cast(*args):
    return _ODA_Drawings.OdDbViewRepOrientation_cast(*args)

def OdDbViewRepOrientation_desc(*args):
    return _ODA_Drawings.OdDbViewRepOrientation_desc(*args)

def OdDbViewRepOrientation_createObject(*args):
    return _ODA_Drawings.OdDbViewRepOrientation_createObject(*args)

class OdDbViewRepModelSpaceViewSelSet(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewRepModelSpaceViewSelSet_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewRepModelSpaceViewSelSet_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewRepModelSpaceViewSelSet_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewRepModelSpaceViewSelSet_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewRepModelSpaceViewSelSet_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewRepModelSpaceViewSelSet

    @staticmethod
    def getSelectedObjIdsForView(*args):
        return _ODA_Drawings.OdDbViewRepModelSpaceViewSelSet_getSelectedObjIdsForView(*args)

    def setSelectedObjIds(self, *args):
        return _ODA_Drawings.OdDbViewRepModelSpaceViewSelSet_setSelectedObjIds(self, *args)

    def selectedObjIds(self, *args):
        return _ODA_Drawings.OdDbViewRepModelSpaceViewSelSet_selectedObjIds(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbViewRepModelSpaceViewSelSet_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbViewRepModelSpaceViewSelSet_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbViewRepModelSpaceViewSelSet_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbViewRepModelSpaceViewSelSet_dxfOutFields(self, *args)

# Register OdDbViewRepModelSpaceViewSelSet in _ODA_Drawings:
_ODA_Drawings.OdDbViewRepModelSpaceViewSelSet_swigregister(OdDbViewRepModelSpaceViewSelSet)

def OdDbViewRepModelSpaceViewSelSet_cast(*args):
    return _ODA_Drawings.OdDbViewRepModelSpaceViewSelSet_cast(*args)

def OdDbViewRepModelSpaceViewSelSet_desc(*args):
    return _ODA_Drawings.OdDbViewRepModelSpaceViewSelSet_desc(*args)

def OdDbViewRepModelSpaceViewSelSet_createObject(*args):
    return _ODA_Drawings.OdDbViewRepModelSpaceViewSelSet_createObject(*args)

def OdDbViewRepModelSpaceViewSelSet_getSelectedObjIdsForView(*args):
    return _ODA_Drawings.OdDbViewRepModelSpaceViewSelSet_getSelectedObjIdsForView(*args)

class OdDbViewRepModelSpaceSource(OdDbViewRepSource):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewRepModelSpaceSource_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewRepModelSpaceSource_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewRepModelSpaceSource_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewRepModelSpaceSource_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewRepModelSpaceSource_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewRepModelSpaceSource

    def type(self, *args):
        return _ODA_Drawings.OdDbViewRepModelSpaceSource_type(self, *args)

# Register OdDbViewRepModelSpaceSource in _ODA_Drawings:
_ODA_Drawings.OdDbViewRepModelSpaceSource_swigregister(OdDbViewRepModelSpaceSource)

def OdDbViewRepModelSpaceSource_cast(*args):
    return _ODA_Drawings.OdDbViewRepModelSpaceSource_cast(*args)

def OdDbViewRepModelSpaceSource_desc(*args):
    return _ODA_Drawings.OdDbViewRepModelSpaceSource_desc(*args)

def OdDbViewRepModelSpaceSource_createObject(*args):
    return _ODA_Drawings.OdDbViewRepModelSpaceSource_createObject(*args)

class OdDbViewRepModelPlaneDef(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewRepModelPlaneDef_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewRepModelPlaneDef_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewRepModelPlaneDef_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewRepModelPlaneDef_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewRepModelPlaneDef_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewRepModelPlaneDef

# Register OdDbViewRepModelPlaneDef in _ODA_Drawings:
_ODA_Drawings.OdDbViewRepModelPlaneDef_swigregister(OdDbViewRepModelPlaneDef)

def OdDbViewRepModelPlaneDef_cast(*args):
    return _ODA_Drawings.OdDbViewRepModelPlaneDef_cast(*args)

def OdDbViewRepModelPlaneDef_desc(*args):
    return _ODA_Drawings.OdDbViewRepModelPlaneDef_desc(*args)

def OdDbViewRepModelPlaneDef_createObject(*args):
    return _ODA_Drawings.OdDbViewRepModelPlaneDef_createObject(*args)

class OdDbViewRepInventorSource(OdDbViewRepSource):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewRepInventorSource_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewRepInventorSource_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewRepInventorSource_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewRepInventorSource_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewRepInventorSource_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewRepInventorSource

    def path(self, *args):
        return _ODA_Drawings.OdDbViewRepInventorSource_path(self, *args)

    def type(self, *args):
        return _ODA_Drawings.OdDbViewRepInventorSource_type(self, *args)

# Register OdDbViewRepInventorSource in _ODA_Drawings:
_ODA_Drawings.OdDbViewRepInventorSource_swigregister(OdDbViewRepInventorSource)

def OdDbViewRepInventorSource_cast(*args):
    return _ODA_Drawings.OdDbViewRepInventorSource_cast(*args)

def OdDbViewRepInventorSource_desc(*args):
    return _ODA_Drawings.OdDbViewRepInventorSource_desc(*args)

def OdDbViewRepInventorSource_createObject(*args):
    return _ODA_Drawings.OdDbViewRepInventorSource_createObject(*args)

class OdDbViewRepImage(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewRepImage_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewRepImage_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewRepImage_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewRepImage_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewRepImage_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewRepImage

    def centerPoint(self, *args):
        return _ODA_Drawings.OdDbViewRepImage_centerPoint(self, *args)

    def setCenterPoint(self, *args):
        return _ODA_Drawings.OdDbViewRepImage_setCenterPoint(self, *args)

    def getHeight(self, *args):
        return _ODA_Drawings.OdDbViewRepImage_getHeight(self, *args)

    def setHeight(self, *args):
        return _ODA_Drawings.OdDbViewRepImage_setHeight(self, *args)

    def getWidth(self, *args):
        return _ODA_Drawings.OdDbViewRepImage_getWidth(self, *args)

    def setWidth(self, *args):
        return _ODA_Drawings.OdDbViewRepImage_setWidth(self, *args)

    def ownerViewportId(self, *args):
        return _ODA_Drawings.OdDbViewRepImage_ownerViewportId(self, *args)

    def setOwnerViewportId(self, *args):
        return _ODA_Drawings.OdDbViewRepImage_setOwnerViewportId(self, *args)

# Register OdDbViewRepImage in _ODA_Drawings:
_ODA_Drawings.OdDbViewRepImage_swigregister(OdDbViewRepImage)

def OdDbViewRepImage_cast(*args):
    return _ODA_Drawings.OdDbViewRepImage_cast(*args)

def OdDbViewRepImage_desc(*args):
    return _ODA_Drawings.OdDbViewRepImage_desc(*args)

def OdDbViewRepImage_createObject(*args):
    return _ODA_Drawings.OdDbViewRepImage_createObject(*args)

class OdDbViewRepDetailDefinition(OdDbViewRepCutDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewRepDetailDefinition_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewRepDetailDefinition_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewRepDetailDefinition_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewRepDetailDefinition_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewRepDetailDefinition_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewRepDetailDefinition
    FT_RECTANGULAR = _ODA_Drawings.OdDbViewRepDetailDefinition_FT_RECTANGULAR
    FT_CIRCULAR = _ODA_Drawings.OdDbViewRepDetailDefinition_FT_CIRCULAR
    ET_SMOOTH = _ODA_Drawings.OdDbViewRepDetailDefinition_ET_SMOOTH
    ET_JAGGED = _ODA_Drawings.OdDbViewRepDetailDefinition_ET_JAGGED
    ET_SMOOTH_WITH_BORDER = _ODA_Drawings.OdDbViewRepDetailDefinition_ET_SMOOTH_WITH_BORDER
    ET_SMOOTH_WITH_CONNECTION_LINE = _ODA_Drawings.OdDbViewRepDetailDefinition_ET_SMOOTH_WITH_CONNECTION_LINE

    def setDisplayConnectLine(self, *args):
        return _ODA_Drawings.OdDbViewRepDetailDefinition_setDisplayConnectLine(self, *args)

    def displayConnectLine(self, *args):
        return _ODA_Drawings.OdDbViewRepDetailDefinition_displayConnectLine(self, *args)

    def setDisplayFullBoundary(self, *args):
        return _ODA_Drawings.OdDbViewRepDetailDefinition_setDisplayFullBoundary(self, *args)

    def displayFullBoundary(self, *args):
        return _ODA_Drawings.OdDbViewRepDetailDefinition_displayFullBoundary(self, *args)

    def setJagged(self, *args):
        return _ODA_Drawings.OdDbViewRepDetailDefinition_setJagged(self, *args)

    def jagged(self, *args):
        return _ODA_Drawings.OdDbViewRepDetailDefinition_jagged(self, *args)

    def setEdgeType(self, *args):
        return _ODA_Drawings.OdDbViewRepDetailDefinition_setEdgeType(self, *args)

    def edgeType(self, *args):
        return _ODA_Drawings.OdDbViewRepDetailDefinition_edgeType(self, *args)

    def setBoundaryType(self, *args):
        return _ODA_Drawings.OdDbViewRepDetailDefinition_setBoundaryType(self, *args)

    def boundaryType(self, *args):
        return _ODA_Drawings.OdDbViewRepDetailDefinition_boundaryType(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbViewRepDetailDefinition_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbViewRepDetailDefinition_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbViewRepDetailDefinition_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbViewRepDetailDefinition_dxfOutFields(self, *args)

# Register OdDbViewRepDetailDefinition in _ODA_Drawings:
_ODA_Drawings.OdDbViewRepDetailDefinition_swigregister(OdDbViewRepDetailDefinition)

def OdDbViewRepDetailDefinition_cast(*args):
    return _ODA_Drawings.OdDbViewRepDetailDefinition_cast(*args)

def OdDbViewRepDetailDefinition_desc(*args):
    return _ODA_Drawings.OdDbViewRepDetailDefinition_desc(*args)

def OdDbViewRepDetailDefinition_createObject(*args):
    return _ODA_Drawings.OdDbViewRepDetailDefinition_createObject(*args)

class OdDbViewRepBlockReference(OdDbBlockReference):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewRepBlockReference_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewRepBlockReference_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewRepBlockReference_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewRepBlockReference_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewRepBlockReference_createObject(*args)

    def setOwnerViewportId(self, *args):
        return _ODA_Drawings.OdDbViewRepBlockReference_setOwnerViewportId(self, *args)

    def ownerViewportId(self, *args):
        return _ODA_Drawings.OdDbViewRepBlockReference_ownerViewportId(self, *args)

    def position(self, *args):
        return _ODA_Drawings.OdDbViewRepBlockReference_position(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbViewRepBlockReference_subGetGeomExtents(self, *args)

    def subGetGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbViewRepBlockReference_subGetGsMarkersAtSubentPath(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbViewRepBlockReference_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbViewRepBlockReference_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbViewRepBlockReference_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbViewRepBlockReference_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewRepBlockReference

# Register OdDbViewRepBlockReference in _ODA_Drawings:
_ODA_Drawings.OdDbViewRepBlockReference_swigregister(OdDbViewRepBlockReference)

def OdDbViewRepBlockReference_cast(*args):
    return _ODA_Drawings.OdDbViewRepBlockReference_cast(*args)

def OdDbViewRepBlockReference_desc(*args):
    return _ODA_Drawings.OdDbViewRepBlockReference_desc(*args)

def OdDbViewRepBlockReference_createObject(*args):
    return _ODA_Drawings.OdDbViewRepBlockReference_createObject(*args)

class OdDbViewBorder(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbViewBorder_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbViewBorder_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbViewBorder_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbViewBorder_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbViewBorder_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbViewBorder
    kFromBase = _ODA_Drawings.OdDbViewBorder_kFromBase
    kWireframeVisibleEdges = _ODA_Drawings.OdDbViewBorder_kWireframeVisibleEdges
    kWireframeHiddenEdges = _ODA_Drawings.OdDbViewBorder_kWireframeHiddenEdges
    kShadedVisibleEdges = _ODA_Drawings.OdDbViewBorder_kShadedVisibleEdges
    kShadedHiddenEdges = _ODA_Drawings.OdDbViewBorder_kShadedHiddenEdges
    kSourceNotDefined = _ODA_Drawings.OdDbViewBorder_kSourceNotDefined
    kInventorSource = _ODA_Drawings.OdDbViewBorder_kInventorSource
    kFusionSource = _ODA_Drawings.OdDbViewBorder_kFusionSource
    kModelSpaceSource = _ODA_Drawings.OdDbViewBorder_kModelSpaceSource

    def insertionPoint(self, *args):
        return _ODA_Drawings.OdDbViewBorder_insertionPoint(self, *args)

    def height(self, *args):
        return _ODA_Drawings.OdDbViewBorder_height(self, *args)

    def width(self, *args):
        return _ODA_Drawings.OdDbViewBorder_width(self, *args)

    def sourceType(self, *args):
        return _ODA_Drawings.OdDbViewBorder_sourceType(self, *args)

    def inventorFileReference(self, *args):
        return _ODA_Drawings.OdDbViewBorder_inventorFileReference(self, *args)

    def isFirstAngleProjection(self, *args):
        return _ODA_Drawings.OdDbViewBorder_isFirstAngleProjection(self, *args)

    def rotationAngle(self, *args):
        return _ODA_Drawings.OdDbViewBorder_rotationAngle(self, *args)

    def viewStyleType(self, *args):
        return _ODA_Drawings.OdDbViewBorder_viewStyleType(self, *args)

    def scale(self, *args):
        return _ODA_Drawings.OdDbViewBorder_scale(self, *args)

    def shadedDPI(self, *args):
        return _ODA_Drawings.OdDbViewBorder_shadedDPI(self, *args)

    def viewportId(self, *args):
        return _ODA_Drawings.OdDbViewBorder_viewportId(self, *args)

    def setViewportId(self, *args):
        return _ODA_Drawings.OdDbViewBorder_setViewportId(self, *args)

    def lookupViewRepId(self, *args):
        return _ODA_Drawings.OdDbViewBorder_lookupViewRepId(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbViewBorder_subTransformBy(self, *args)

    def centerPoint(self, *args):
        return _ODA_Drawings.OdDbViewBorder_centerPoint(self, *args)

    def centerPoint3d(self, *args):
        return _ODA_Drawings.OdDbViewBorder_centerPoint3d(self, *args)

    def getSize(self, *args):
        return _ODA_Drawings.OdDbViewBorder_getSize(self, *args)

    def setSize(self, *args):
        return _ODA_Drawings.OdDbViewBorder_setSize(self, *args)

    def setScale(self, *args):
        return _ODA_Drawings.OdDbViewBorder_setScale(self, *args)

# Register OdDbViewBorder in _ODA_Drawings:
_ODA_Drawings.OdDbViewBorder_swigregister(OdDbViewBorder)

def OdDbViewBorder_cast(*args):
    return _ODA_Drawings.OdDbViewBorder_cast(*args)

def OdDbViewBorder_desc(*args):
    return _ODA_Drawings.OdDbViewBorder_desc(*args)

def OdDbViewBorder_createObject(*args):
    return _ODA_Drawings.OdDbViewBorder_createObject(*args)

class OdDbSynergyMappings(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSynergyMappings_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSynergyMappings_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSynergyMappings_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSynergyMappings_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSynergyMappings_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSynergyMappings

# Register OdDbSynergyMappings in _ODA_Drawings:
_ODA_Drawings.OdDbSynergyMappings_swigregister(OdDbSynergyMappings)

def OdDbSynergyMappings_cast(*args):
    return _ODA_Drawings.OdDbSynergyMappings_cast(*args)

def OdDbSynergyMappings_desc(*args):
    return _ODA_Drawings.OdDbSynergyMappings_desc(*args)

def OdDbSynergyMappings_createObject(*args):
    return _ODA_Drawings.OdDbSynergyMappings_createObject(*args)

class OdDbSectionSymbol(OdDbViewSymbol):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSectionSymbol_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSectionSymbol_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSectionSymbol_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSectionSymbol_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSectionSymbol_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSectionSymbol

    def sectionPointsCount(self, *args):
        return _ODA_Drawings.OdDbSectionSymbol_sectionPointsCount(self, *args)

    def getSectionPoints(self, *args):
        return _ODA_Drawings.OdDbSectionSymbol_getSectionPoints(self, *args)

    def getLabelOffsets(self, *args):
        return _ODA_Drawings.OdDbSectionSymbol_getLabelOffsets(self, *args)

    def getSectionPointAt(self, *args):
        return _ODA_Drawings.OdDbSectionSymbol_getSectionPointAt(self, *args)

    def getBulgeAt(self, *args):
        return _ODA_Drawings.OdDbSectionSymbol_getBulgeAt(self, *args)

    def getLabelNameAt(self, *args):
        return _ODA_Drawings.OdDbSectionSymbol_getLabelNameAt(self, *args)

    def getLabelOffsetAt(self, *args):
        return _ODA_Drawings.OdDbSectionSymbol_getLabelOffsetAt(self, *args)

    def isViewDirectionLeft(self, *args):
        return _ODA_Drawings.OdDbSectionSymbol_isViewDirectionLeft(self, *args)

    def setViewDirectionLeft(self, *args):
        return _ODA_Drawings.OdDbSectionSymbol_setViewDirectionLeft(self, *args)

    def isHalfSection(self, *args):
        return _ODA_Drawings.OdDbSectionSymbol_isHalfSection(self, *args)

    def setIsHalfSection(self, *args):
        return _ODA_Drawings.OdDbSectionSymbol_setIsHalfSection(self, *args)

    def addSectionPoint(self, *args):
        return _ODA_Drawings.OdDbSectionSymbol_addSectionPoint(self, *args)

    def setSectionPointAt(self, *args):
        return _ODA_Drawings.OdDbSectionSymbol_setSectionPointAt(self, *args)

    def setLabelNameAt(self, *args):
        return _ODA_Drawings.OdDbSectionSymbol_setLabelNameAt(self, *args)

    def setLabelOffsetAt(self, *args):
        return _ODA_Drawings.OdDbSectionSymbol_setLabelOffsetAt(self, *args)

# Register OdDbSectionSymbol in _ODA_Drawings:
_ODA_Drawings.OdDbSectionSymbol_swigregister(OdDbSectionSymbol)

def OdDbSectionSymbol_cast(*args):
    return _ODA_Drawings.OdDbSectionSymbol_cast(*args)

def OdDbSectionSymbol_desc(*args):
    return _ODA_Drawings.OdDbSectionSymbol_desc(*args)

def OdDbSectionSymbol_createObject(*args):
    return _ODA_Drawings.OdDbSectionSymbol_createObject(*args)

class OdDbDetailSymbol(OdDbViewSymbol):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDetailSymbol_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDetailSymbol_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDetailSymbol_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDetailSymbol
    kCircularBoundary = _ODA_Drawings.OdDbDetailSymbol_kCircularBoundary
    kRectangularBoundary = _ODA_Drawings.OdDbDetailSymbol_kRectangularBoundary
    kCustomBoundary = _ODA_Drawings.OdDbDetailSymbol_kCustomBoundary
    kNone = _ODA_Drawings.OdDbDetailSymbol_kNone
    kModelEdge = _ODA_Drawings.OdDbDetailSymbol_kModelEdge
    kIdentifierPosition = _ODA_Drawings.OdDbDetailSymbol_kIdentifierPosition

    def boundaryType(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_boundaryType(self, *args)

    def modelEdgeType(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_modelEdgeType(self, *args)

    def isOverriddenProperty(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_isOverriddenProperty(self, *args)

    def displayIdentifier(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_displayIdentifier(self, *args)

    def origin(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_origin(self, *args)

    def direction(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_direction(self, *args)

    def boundarySize(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_boundarySize(self, *args)

    def modelEdgeOrigin(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_modelEdgeOrigin(self, *args)

    def owningViewScale(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_owningViewScale(self, *args)

    def detailViewScale(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_detailViewScale(self, *args)

    def modelEdgeDirection(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_modelEdgeDirection(self, *args)

    def identifierPosition(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_identifierPosition(self, *args)

    def setIdentifierPosition(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_setIdentifierPosition(self, *args)

    def setDetailViewScale(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_setDetailViewScale(self, *args)

    def setOwningViewScale(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_setOwningViewScale(self, *args)

    def setBoundaryType(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_setBoundaryType(self, *args)

    def setModelEdgeType(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_setModelEdgeType(self, *args)

    def setModelEdgeOrigin(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_setModelEdgeOrigin(self, *args)

    def setModelEdgeDirection(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_setModelEdgeDirection(self, *args)

    def setDisplayIdentifier(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_setDisplayIdentifier(self, *args)

    def setOrigin(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_setOrigin(self, *args)

    def setBoundarySize(self, *args):
        return _ODA_Drawings.OdDbDetailSymbol_setBoundarySize(self, *args)

# Register OdDbDetailSymbol in _ODA_Drawings:
_ODA_Drawings.OdDbDetailSymbol_swigregister(OdDbDetailSymbol)

def OdDbDetailSymbol_cast(*args):
    return _ODA_Drawings.OdDbDetailSymbol_cast(*args)

def OdDbDetailSymbol_desc(*args):
    return _ODA_Drawings.OdDbDetailSymbol_desc(*args)

def OdDbDetailSymbol_createObject(*args):
    return _ODA_Drawings.OdDbDetailSymbol_createObject(*args)

class OdDbAssocProjectedEntityPersSubentIdHolder(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAssocProjectedEntityPersSubentIdHolder_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAssocProjectedEntityPersSubentIdHolder_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAssocProjectedEntityPersSubentIdHolder_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAssocProjectedEntityPersSubentIdHolder_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAssocProjectedEntityPersSubentIdHolder_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAssocProjectedEntityPersSubentIdHolder

# Register OdDbAssocProjectedEntityPersSubentIdHolder in _ODA_Drawings:
_ODA_Drawings.OdDbAssocProjectedEntityPersSubentIdHolder_swigregister(OdDbAssocProjectedEntityPersSubentIdHolder)

def OdDbAssocProjectedEntityPersSubentIdHolder_cast(*args):
    return _ODA_Drawings.OdDbAssocProjectedEntityPersSubentIdHolder_cast(*args)

def OdDbAssocProjectedEntityPersSubentIdHolder_desc(*args):
    return _ODA_Drawings.OdDbAssocProjectedEntityPersSubentIdHolder_desc(*args)

def OdDbAssocProjectedEntityPersSubentIdHolder_createObject(*args):
    return _ODA_Drawings.OdDbAssocProjectedEntityPersSubentIdHolder_createObject(*args)

class OdLyRelExpr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Drawings.delete_OdLyRelExpr

    def getConstant(self, *args):
        return _ODA_Drawings.OdLyRelExpr_getConstant(self, *args)

    def getVariable(self, *args):
        return _ODA_Drawings.OdLyRelExpr_getVariable(self, *args)

# Register OdLyRelExpr in _ODA_Drawings:
_ODA_Drawings.OdLyRelExpr_swigregister(OdLyRelExpr)

class OdLyAndExpr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Drawings.delete_OdLyAndExpr

    def getRelExprs(self, *args):
        return _ODA_Drawings.OdLyAndExpr_getRelExprs(self, *args)

# Register OdLyAndExpr in _ODA_Drawings:
_ODA_Drawings.OdLyAndExpr_swigregister(OdLyAndExpr)

class OdLyBoolExpr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Drawings.delete_OdLyBoolExpr

    def getAndExprs(self, *args):
        return _ODA_Drawings.OdLyBoolExpr_getAndExprs(self, *args)

# Register OdLyBoolExpr in _ODA_Drawings:
_ODA_Drawings.OdLyBoolExpr_swigregister(OdLyBoolExpr)

class OdLyLayerFilter(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdLyLayerFilter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdLyLayerFilter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdLyLayerFilter_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdLyLayerFilter

    def name(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_name(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_setName(self, *args)

    def allowRename(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_allowRename(self, *args)

    def parent(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_parent(self, *args)

    def getNestedFilters(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_getNestedFilters(self, *args)

    def addNested(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_addNested(self, *args)

    def removeNested(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_removeNested(self, *args)

    def generateNested(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_generateNested(self, *args)

    def dynamicallyGenerated(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_dynamicallyGenerated(self, *args)

    def allowNested(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_allowNested(self, *args)

    def allowDelete(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_allowDelete(self, *args)

    def isProxy(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_isProxy(self, *args)

    def isIdFilter(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_isIdFilter(self, *args)

    def filter(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_filter(self, *args)

    def filterExpression(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_filterExpression(self, *args)

    def filterExpressionTree(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_filterExpressionTree(self, *args)

    def setFilterExpression(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_setFilterExpression(self, *args)

    def compareTo(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_compareTo(self, *args)

    def readFrom(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_readFrom(self, *args)

    def writeTo(self, *args):
        return _ODA_Drawings.OdLyLayerFilter_writeTo(self, *args)

# Register OdLyLayerFilter in _ODA_Drawings:
_ODA_Drawings.OdLyLayerFilter_swigregister(OdLyLayerFilter)

def OdLyLayerFilter_cast(*args):
    return _ODA_Drawings.OdLyLayerFilter_cast(*args)

def OdLyLayerFilter_desc(*args):
    return _ODA_Drawings.OdLyLayerFilter_desc(*args)

def OdLyLayerFilter_createObject(*args):
    return _ODA_Drawings.OdLyLayerFilter_createObject(*args)

class OdLyLayerGroup(OdLyLayerFilter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdLyLayerGroup_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdLyLayerGroup_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdLyLayerGroup_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdLyLayerGroup_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdLyLayerGroup_createObject(*args)

    def addLayerId(self, *args):
        return _ODA_Drawings.OdLyLayerGroup_addLayerId(self, *args)

    def removeLayerId(self, *args):
        return _ODA_Drawings.OdLyLayerGroup_removeLayerId(self, *args)

    def layerIds(self, *args):
        return _ODA_Drawings.OdLyLayerGroup_layerIds(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdLyLayerGroup

# Register OdLyLayerGroup in _ODA_Drawings:
_ODA_Drawings.OdLyLayerGroup_swigregister(OdLyLayerGroup)

def OdLyLayerGroup_cast(*args):
    return _ODA_Drawings.OdLyLayerGroup_cast(*args)

def OdLyLayerGroup_desc(*args):
    return _ODA_Drawings.OdLyLayerGroup_desc(*args)

def OdLyLayerGroup_createObject(*args):
    return _ODA_Drawings.OdLyLayerGroup_createObject(*args)


def odlyGetLayerFilterManager(*args):
    return _ODA_Drawings.odlyGetLayerFilterManager(*args)
ODA_IDREAD_PAGESIZE = _ODA_Drawings.ODA_IDREAD_PAGESIZE
class HardPointer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def read(*args):
        return _ODA_Drawings.HardPointer_read(*args)

    @staticmethod
    def write(*args):
        return _ODA_Drawings.HardPointer_write(*args)

    def __init__(self, *args):
        _ODA_Drawings.HardPointer_swiginit(self, _ODA_Drawings.new_HardPointer(*args))
    __swig_destroy__ = _ODA_Drawings.delete_HardPointer

# Register HardPointer in _ODA_Drawings:
_ODA_Drawings.HardPointer_swigregister(HardPointer)

def HardPointer_read(*args):
    return _ODA_Drawings.HardPointer_read(*args)

def HardPointer_write(*args):
    return _ODA_Drawings.HardPointer_write(*args)

class SoftPointer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def read(*args):
        return _ODA_Drawings.SoftPointer_read(*args)

    @staticmethod
    def write(*args):
        return _ODA_Drawings.SoftPointer_write(*args)

    def __init__(self, *args):
        _ODA_Drawings.SoftPointer_swiginit(self, _ODA_Drawings.new_SoftPointer(*args))
    __swig_destroy__ = _ODA_Drawings.delete_SoftPointer

# Register SoftPointer in _ODA_Drawings:
_ODA_Drawings.SoftPointer_swigregister(SoftPointer)

def SoftPointer_read(*args):
    return _ODA_Drawings.SoftPointer_read(*args)

def SoftPointer_write(*args):
    return _ODA_Drawings.SoftPointer_write(*args)

class HardOwner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def read(*args):
        return _ODA_Drawings.HardOwner_read(*args)

    @staticmethod
    def write(*args):
        return _ODA_Drawings.HardOwner_write(*args)

    def __init__(self, *args):
        _ODA_Drawings.HardOwner_swiginit(self, _ODA_Drawings.new_HardOwner(*args))
    __swig_destroy__ = _ODA_Drawings.delete_HardOwner

# Register HardOwner in _ODA_Drawings:
_ODA_Drawings.HardOwner_swigregister(HardOwner)

def HardOwner_read(*args):
    return _ODA_Drawings.HardOwner_read(*args)

def HardOwner_write(*args):
    return _ODA_Drawings.HardOwner_write(*args)

class SoftOwner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def read(*args):
        return _ODA_Drawings.SoftOwner_read(*args)

    @staticmethod
    def write(*args):
        return _ODA_Drawings.SoftOwner_write(*args)

    def __init__(self, *args):
        _ODA_Drawings.SoftOwner_swiginit(self, _ODA_Drawings.new_SoftOwner(*args))
    __swig_destroy__ = _ODA_Drawings.delete_SoftOwner

# Register SoftOwner in _ODA_Drawings:
_ODA_Drawings.SoftOwner_swigregister(SoftOwner)

def SoftOwner_read(*args):
    return _ODA_Drawings.SoftOwner_read(*args)

def SoftOwner_write(*args):
    return _ODA_Drawings.SoftOwner_write(*args)

class OdGiContextForDbDatabase(ODA_Kernel.OdGiDefaultContext):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdGiContextForDbDatabase_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdGiContextForDbDatabase_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdGiContextForDbDatabase_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdGiContextForDbDatabase

    def database(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_database(self, *args)

    def openDrawable(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_openDrawable(self, *args)

    def numberOfIsolines(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_numberOfIsolines(self, *args)

    def commonLinetypeScale(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_commonLinetypeScale(self, *args)

    def defaultLineWeight(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_defaultLineWeight(self, *args)

    def quickTextMode(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_quickTextMode(self, *args)

    def textQuality(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_textQuality(self, *args)

    def useTtfTriangleCache(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_useTtfTriangleCache(self, *args)

    def imageQuality(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_imageQuality(self, *args)

    def imageSelectionBehavior(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_imageSelectionBehavior(self, *args)

    def fadingIntensityPercentage(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_fadingIntensityPercentage(self, *args)

    def ttfPolyDraw(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_ttfPolyDraw(self, *args)

    def displaySilhouettes(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_displaySilhouettes(self, *args)

    def setDatabase(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_setDatabase(self, *args)

    def getDatabase(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_getDatabase(self, *args)

    def fillGsClientViewInfo(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_fillGsClientViewInfo(self, *args)

    def getStubByID(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_getStubByID(self, *args)

    def getStubByMatName(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_getStubByMatName(self, *args)

    def getStubByMaterialId(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_getStubByMaterialId(self, *args)

    def getDefaultTextStyle(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_getDefaultTextStyle(self, *args)

    def circleZoomPercent(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_circleZoomPercent(self, *args)

    def drawableFilterFunctionId(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_drawableFilterFunctionId(self, *args)

    def drawableFilterFunction(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_drawableFilterFunction(self, *args)

    def selectionStyle(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_selectionStyle(self, *args)

    def customViewportGeometryCS(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_customViewportGeometryCS(self, *args)

    def setViewportGeomCSCompatibility(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_setViewportGeomCSCompatibility(self, *args)

    def useGsModel(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_useGsModel(self, *args)

    def enableGsModel(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_enableGsModel(self, *args)

    def isPlotGeneration(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_isPlotGeneration(self, *args)

    def setPlotGeneration(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_setPlotGeneration(self, *args)

    def isZeroTextNormals(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_isZeroTextNormals(self, *args)

    def setZeroTextNormals(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_setZeroTextNormals(self, *args)

    def isLayoutHelperLinkReactorsDisabled(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_isLayoutHelperLinkReactorsDisabled(self, *args)

    def disableLayoutHelperLinkReactors(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_disableLayoutHelperLinkReactors(self, *args)

    def isContextualColorsManagementEnabled(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_isContextualColorsManagementEnabled(self, *args)

    def enableContextualColorsManagement(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_enableContextualColorsManagement(self, *args)

    def updateContextualColors(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_updateContextualColors(self, *args)

    def fillContextualColors(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_fillContextualColors(self, *args)

    def setTtfPolyDrawMode(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_setTtfPolyDrawMode(self, *args)

    def setUseTtfTriangleCache(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_setUseTtfTriangleCache(self, *args)

    def isKeepPSLayoutHelperViewEnabled(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_isKeepPSLayoutHelperViewEnabled(self, *args)

    def enableKeepPSLayoutHelperView(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_enableKeepPSLayoutHelperView(self, *args)

    def erasePSLayoutHelperView(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_erasePSLayoutHelperView(self, *args)

    def setErasePSLayoutHelperView(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_setErasePSLayoutHelperView(self, *args)

    def isConstantModelSpaceLineweightsEnabled(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_isConstantModelSpaceLineweightsEnabled(self, *args)

    def enableConstantModelSpaceLineweights(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_enableConstantModelSpaceLineweights(self, *args)

    def isForceDisplaySilhouettesEnabled(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_isForceDisplaySilhouettesEnabled(self, *args)

    def setForceDisplaySilhouettes(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_setForceDisplaySilhouettes(self, *args)

    def fillTtf(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_fillTtf(self, *args)

    def fillMode(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_fillMode(self, *args)

    def paletteBackground(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_paletteBackground(self, *args)

    def setPaletteBackground(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_setPaletteBackground(self, *args)

    def loadPlotStyleTable(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_loadPlotStyleTable(self, *args)

    def plotStyleType(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_plotStyleType(self, *args)

    def plotStyle(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_plotStyle(self, *args)

    def antiAliasingMode(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_antiAliasingMode(self, *args)

    def xrefPropertiesOverride(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_xrefPropertiesOverride(self, *args)

    def hatchAsPolygon(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_hatchAsPolygon(self, *args)

    def setHatchAsPolygon(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_setHatchAsPolygon(self, *args)

    def forceSortents(self, *args):
        return _ODA_Drawings.OdGiContextForDbDatabase_forceSortents(self, *args)

# Register OdGiContextForDbDatabase in _ODA_Drawings:
_ODA_Drawings.OdGiContextForDbDatabase_swigregister(OdGiContextForDbDatabase)

def OdGiContextForDbDatabase_cast(*args):
    return _ODA_Drawings.OdGiContextForDbDatabase_cast(*args)

def OdGiContextForDbDatabase_desc(*args):
    return _ODA_Drawings.OdGiContextForDbDatabase_desc(*args)

def OdGiContextForDbDatabase_createObject(*args):
    return _ODA_Drawings.OdGiContextForDbDatabase_createObject(*args)


def odGetSatFromProxy(*args):
    return _ODA_Drawings.odGetSatFromProxy(*args)

def odEntityToProxy(*args):
    return _ODA_Drawings.odEntityToProxy(*args)

def odObjectToProxy(*args):
    return _ODA_Drawings.odObjectToProxy(*args)
class OdGeDxfIO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def outFields(*args):
        return _ODA_Drawings.OdGeDxfIO_outFields(*args)

    @staticmethod
    def inFields(*args):
        return _ODA_Drawings.OdGeDxfIO_inFields(*args)

    def __init__(self, *args):
        _ODA_Drawings.OdGeDxfIO_swiginit(self, _ODA_Drawings.new_OdGeDxfIO(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdGeDxfIO

# Register OdGeDxfIO in _ODA_Drawings:
_ODA_Drawings.OdGeDxfIO_swigregister(OdGeDxfIO)

def OdGeDxfIO_outFields(*args):
    return _ODA_Drawings.OdGeDxfIO_outFields(*args)

def OdGeDxfIO_inFields(*args):
    return _ODA_Drawings.OdGeDxfIO_inFields(*args)

class OdGeDwgIO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def inFields(*args):
        return _ODA_Drawings.OdGeDwgIO_inFields(*args)

    @staticmethod
    def outFields(*args):
        return _ODA_Drawings.OdGeDwgIO_outFields(*args)

    def __init__(self, *args):
        _ODA_Drawings.OdGeDwgIO_swiginit(self, _ODA_Drawings.new_OdGeDwgIO(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdGeDwgIO

# Register OdGeDwgIO in _ODA_Drawings:
_ODA_Drawings.OdGeDwgIO_swigregister(OdGeDwgIO)

def OdGeDwgIO_inFields(*args):
    return _ODA_Drawings.OdGeDwgIO_inFields(*args)

def OdGeDwgIO_outFields(*args):
    return _ODA_Drawings.OdGeDwgIO_outFields(*args)

class OdFdFieldEvaluator(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdFdFieldEvaluator_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdFdFieldEvaluator_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdFdFieldEvaluator_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdFdFieldEvaluator_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdFdFieldEvaluator_createObject(*args)

    def evaluatorId(self, *args):
        return _ODA_Drawings.OdFdFieldEvaluator_evaluatorId(self, *args)

    def initialize(self, *args):
        return _ODA_Drawings.OdFdFieldEvaluator_initialize(self, *args)

    def compile(self, *args):
        return _ODA_Drawings.OdFdFieldEvaluator_compile(self, *args)

    def evaluate(self, *args):
        return _ODA_Drawings.OdFdFieldEvaluator_evaluate(self, *args)

    def format(self, *args):
        return _ODA_Drawings.OdFdFieldEvaluator_format(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdFdFieldEvaluator

# Register OdFdFieldEvaluator in _ODA_Drawings:
_ODA_Drawings.OdFdFieldEvaluator_swigregister(OdFdFieldEvaluator)

def OdFdFieldEvaluator_cast(*args):
    return _ODA_Drawings.OdFdFieldEvaluator_cast(*args)

def OdFdFieldEvaluator_desc(*args):
    return _ODA_Drawings.OdFdFieldEvaluator_desc(*args)

def OdFdFieldEvaluator_createObject(*args):
    return _ODA_Drawings.OdFdFieldEvaluator_createObject(*args)

class OdFdFieldEvaluatorLoader(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdFdFieldEvaluatorLoader_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdFdFieldEvaluatorLoader_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdFdFieldEvaluatorLoader_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdFdFieldEvaluatorLoader_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdFdFieldEvaluatorLoader_createObject(*args)

    def getEvaluator(self, *args):
        return _ODA_Drawings.OdFdFieldEvaluatorLoader_getEvaluator(self, *args)

    def findEvaluator(self, *args):
        return _ODA_Drawings.OdFdFieldEvaluatorLoader_findEvaluator(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdFdFieldEvaluatorLoader

# Register OdFdFieldEvaluatorLoader in _ODA_Drawings:
_ODA_Drawings.OdFdFieldEvaluatorLoader_swigregister(OdFdFieldEvaluatorLoader)

def OdFdFieldEvaluatorLoader_cast(*args):
    return _ODA_Drawings.OdFdFieldEvaluatorLoader_cast(*args)

def OdFdFieldEvaluatorLoader_desc(*args):
    return _ODA_Drawings.OdFdFieldEvaluatorLoader_desc(*args)

def OdFdFieldEvaluatorLoader_createObject(*args):
    return _ODA_Drawings.OdFdFieldEvaluatorLoader_createObject(*args)

class OdFdFieldReactor(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdFdFieldReactor_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdFdFieldReactor_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdFdFieldReactor_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdFdFieldReactor_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdFdFieldReactor_createObject(*args)

    def beginEvaluateFields(self, *args):
        return _ODA_Drawings.OdFdFieldReactor_beginEvaluateFields(self, *args)

    def endEvaluateFields(self, *args):
        return _ODA_Drawings.OdFdFieldReactor_endEvaluateFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdFdFieldReactor

# Register OdFdFieldReactor in _ODA_Drawings:
_ODA_Drawings.OdFdFieldReactor_swigregister(OdFdFieldReactor)

def OdFdFieldReactor_cast(*args):
    return _ODA_Drawings.OdFdFieldReactor_cast(*args)

def OdFdFieldReactor_desc(*args):
    return _ODA_Drawings.OdFdFieldReactor_desc(*args)

def OdFdFieldReactor_createObject(*args):
    return _ODA_Drawings.OdFdFieldReactor_createObject(*args)

class OdFdFieldEngine(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdFdFieldEngine_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdFdFieldEngine_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdFdFieldEngine_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdFdFieldEngine_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdFdFieldEngine_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdFdFieldEngine

    def registerEvaluatorLoader(self, *args):
        return _ODA_Drawings.OdFdFieldEngine_registerEvaluatorLoader(self, *args)

    def unregisterEvaluatorLoader(self, *args):
        return _ODA_Drawings.OdFdFieldEngine_unregisterEvaluatorLoader(self, *args)

    def evaluatorLoaderCount(self, *args):
        return _ODA_Drawings.OdFdFieldEngine_evaluatorLoaderCount(self, *args)

    def getEvaluatorLoader(self, *args):
        return _ODA_Drawings.OdFdFieldEngine_getEvaluatorLoader(self, *args)

    def getEvaluator(self, *args):
        return _ODA_Drawings.OdFdFieldEngine_getEvaluator(self, *args)

    def findEvaluator(self, *args):
        return _ODA_Drawings.OdFdFieldEngine_findEvaluator(self, *args)

    def addFieldReactor(self, *args):
        return _ODA_Drawings.OdFdFieldEngine_addFieldReactor(self, *args)

    def removeFieldReactor(self, *args):
        return _ODA_Drawings.OdFdFieldEngine_removeFieldReactor(self, *args)

# Register OdFdFieldEngine in _ODA_Drawings:
_ODA_Drawings.OdFdFieldEngine_swigregister(OdFdFieldEngine)

def OdFdFieldEngine_cast(*args):
    return _ODA_Drawings.OdFdFieldEngine_cast(*args)

def OdFdFieldEngine_desc(*args):
    return _ODA_Drawings.OdFdFieldEngine_desc(*args)

def OdFdFieldEngine_createObject(*args):
    return _ODA_Drawings.OdFdFieldEngine_createObject(*args)


def oddbGetFieldEngine(*args):
    return _ODA_Drawings.oddbGetFieldEngine(*args)

def oddbGetFieldEngineValueByError(*args):
    return _ODA_Drawings.oddbGetFieldEngineValueByError(*args)

def oddbSetFieldEngineValueFormatByError(*args):
    return _ODA_Drawings.oddbSetFieldEngineValueFormatByError(*args)
class OdFdFieldResult(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdFdFieldResult_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdFdFieldResult_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdFdFieldResult_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdFdFieldResult_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdFdFieldResult_createObject(*args)

    def setFieldValue(self, *args):
        return _ODA_Drawings.OdFdFieldResult_setFieldValue(self, *args)

    def setEvaluationStatus(self, *args):
        return _ODA_Drawings.OdFdFieldResult_setEvaluationStatus(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdFdFieldResult

# Register OdFdFieldResult in _ODA_Drawings:
_ODA_Drawings.OdFdFieldResult_swigregister(OdFdFieldResult)

def OdFdFieldResult_cast(*args):
    return _ODA_Drawings.OdFdFieldResult_cast(*args)

def OdFdFieldResult_desc(*args):
    return _ODA_Drawings.OdFdFieldResult_desc(*args)

def OdFdFieldResult_createObject(*args):
    return _ODA_Drawings.OdFdFieldResult_createObject(*args)

class OdFdFieldEnginePE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdFdFieldEnginePE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdFdFieldEnginePE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdFdFieldEnginePE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdFdFieldEnginePE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdFdFieldEnginePE_createObject(*args)

    def getSheetSetProperty(self, *args):
        return _ODA_Drawings.OdFdFieldEnginePE_getSheetSetProperty(self, *args)

    def parseObjProp(self, *args):
        return _ODA_Drawings.OdFdFieldEnginePE_parseObjProp(self, *args)

    def getObjPropValue(self, *args):
        return _ODA_Drawings.OdFdFieldEnginePE_getObjPropValue(self, *args)

    def getCurrentDb(self, *args):
        return _ODA_Drawings.OdFdFieldEnginePE_getCurrentDb(self, *args)

    def getFileName(self, *args):
        return _ODA_Drawings.OdFdFieldEnginePE_getFileName(self, *args)

    def getLispVariable(self, *args):
        return _ODA_Drawings.OdFdFieldEnginePE_getLispVariable(self, *args)

    def getOwnerTable(self, *args):
        return _ODA_Drawings.OdFdFieldEnginePE_getOwnerTable(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdFdFieldEnginePE

# Register OdFdFieldEnginePE in _ODA_Drawings:
_ODA_Drawings.OdFdFieldEnginePE_swigregister(OdFdFieldEnginePE)

def OdFdFieldEnginePE_cast(*args):
    return _ODA_Drawings.OdFdFieldEnginePE_cast(*args)

def OdFdFieldEnginePE_desc(*args):
    return _ODA_Drawings.OdFdFieldEnginePE_desc(*args)

def OdFdFieldEnginePE_createObject(*args):
    return _ODA_Drawings.OdFdFieldEnginePE_createObject(*args)


def oddbEvaluateFields(*args):
    return _ODA_Drawings.oddbEvaluateFields(*args)

def odfdGetSubStrings(*args):
    return _ODA_Drawings.odfdGetSubStrings(*args)

def odfdGetAcVarData(*args):
    return _ODA_Drawings.odfdGetAcVarData(*args)
class OdDbEmbeddedASMEntPropsPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbEmbeddedASMEntPropsPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbEmbeddedASMEntPropsPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbEmbeddedASMEntPropsPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbEmbeddedASMEntPropsPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbEmbeddedASMEntPropsPE_createObject(*args)

    def setIsEmbeddedEnt(self, *args):
        return _ODA_Drawings.OdDbEmbeddedASMEntPropsPE_setIsEmbeddedEnt(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbEmbeddedASMEntPropsPE

# Register OdDbEmbeddedASMEntPropsPE in _ODA_Drawings:
_ODA_Drawings.OdDbEmbeddedASMEntPropsPE_swigregister(OdDbEmbeddedASMEntPropsPE)

def OdDbEmbeddedASMEntPropsPE_cast(*args):
    return _ODA_Drawings.OdDbEmbeddedASMEntPropsPE_cast(*args)

def OdDbEmbeddedASMEntPropsPE_desc(*args):
    return _ODA_Drawings.OdDbEmbeddedASMEntPropsPE_desc(*args)

def OdDbEmbeddedASMEntPropsPE_createObject(*args):
    return _ODA_Drawings.OdDbEmbeddedASMEntPropsPE_createObject(*args)

class OdRxEventImpl(OdEditor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdRxEventImpl_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdRxEventImpl_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdRxEventImpl_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdRxEventImpl_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdRxEventImpl_createObject(*args)

    def addReactor(self, *args):
        return _ODA_Drawings.OdRxEventImpl_addReactor(self, *args)

    def removeReactor(self, *args):
        return _ODA_Drawings.OdRxEventImpl_removeReactor(self, *args)

    def fire_dwgFileOpened(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_dwgFileOpened(self, *args)

    def fire_initialDwgFileOpenComplete(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_initialDwgFileOpenComplete(self, *args)

    def fire_databaseConstructed(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_databaseConstructed(self, *args)

    def fire_databaseToBeDestroyed(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_databaseToBeDestroyed(self, *args)

    def fire_beginSave(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_beginSave(self, *args)

    def fire_saveComplete(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_saveComplete(self, *args)

    def fire_abortSave(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_abortSave(self, *args)

    def fire_beginDxfIn(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_beginDxfIn(self, *args)

    def fire_abortDxfIn(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_abortDxfIn(self, *args)

    def fire_dxfInComplete(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_dxfInComplete(self, *args)

    def fire_beginDxfOut(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_beginDxfOut(self, *args)

    def fire_abortDxfOut(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_abortDxfOut(self, *args)

    def fire_dxfOutComplete(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_dxfOutComplete(self, *args)

    def fire_beginInsert(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_beginInsert(self, *args)

    def fire_otherInsert(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_otherInsert(self, *args)

    def fire_abortInsert(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_abortInsert(self, *args)

    def fire_endInsert(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_endInsert(self, *args)

    def fire_wblockNotice(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_wblockNotice(self, *args)

    def fire_beginWblock(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_beginWblock(self, *args)

    def fire_otherWblock(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_otherWblock(self, *args)

    def fire_abortWblock(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_abortWblock(self, *args)

    def fire_endWblock(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_endWblock(self, *args)

    def fire_beginWblockObjects(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_beginWblockObjects(self, *args)

    def fire_beginDeepClone(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_beginDeepClone(self, *args)

    def fire_beginDeepCloneXlation(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_beginDeepCloneXlation(self, *args)

    def fire_abortDeepClone(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_abortDeepClone(self, *args)

    def fire_endDeepClone(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_endDeepClone(self, *args)

    def fire_partialOpenNotice(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_partialOpenNotice(self, *args)

    def fire_xrefSubCommandEnd(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_xrefSubCommandEnd(self, *args)

    def fire_xrefSubCommandAborted(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_xrefSubCommandAborted(self, *args)

    def fire_beginDwgOpen(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_beginDwgOpen(self, *args)

    def fire_endDwgOpen(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_endDwgOpen(self, *args)

    def fire_beginClose(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_beginClose(self, *args)

    def fire_beginAttach(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_beginAttach(self, *args)

    def fire_otherAttach(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_otherAttach(self, *args)

    def fire_abortAttach(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_abortAttach(self, *args)

    def fire_endAttach(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_endAttach(self, *args)

    def fire_redirected(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_redirected(self, *args)

    def fire_comandeered(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_comandeered(self, *args)

    def fire_beginRestore(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_beginRestore(self, *args)

    def fire_abortRestore(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_abortRestore(self, *args)

    def fire_endRestore(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_endRestore(self, *args)

    def fire_xrefSubCommandStart(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_xrefSubCommandStart(self, *args)

    def fire_xrefSubcommandBindItem(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_xrefSubcommandBindItem(self, *args)

    def fire_xrefSubcommandAttachItem(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_xrefSubcommandAttachItem(self, *args)

    def fire_xrefSubcommandOverlayItem(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_xrefSubcommandOverlayItem(self, *args)

    def fire_xrefSubcommandDetachItem(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_xrefSubcommandDetachItem(self, *args)

    def fire_xrefSubcommandPathItem(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_xrefSubcommandPathItem(self, *args)

    def fire_xrefSubcommandReloadItem(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_xrefSubcommandReloadItem(self, *args)

    def fire_xrefSubcommandUnloadItem(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_xrefSubcommandUnloadItem(self, *args)

    def fire_undoSubcommandAuto(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_undoSubcommandAuto(self, *args)

    def fire_undoSubcommandControl(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_undoSubcommandControl(self, *args)

    def fire_undoSubcommandBegin(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_undoSubcommandBegin(self, *args)

    def fire_undoSubcommandEnd(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_undoSubcommandEnd(self, *args)

    def fire_undoSubcommandMark(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_undoSubcommandMark(self, *args)

    def fire_undoSubcommandBack(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_undoSubcommandBack(self, *args)

    def fire_undoSubcommandNumber(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_undoSubcommandNumber(self, *args)

    def fire_pickfirstModified(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_pickfirstModified(self, *args)

    def fire_layoutSwitched(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_layoutSwitched(self, *args)

    def fire_docFrameMovedOrResized(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_docFrameMovedOrResized(self, *args)

    def fire_mainFrameMovedOrResized(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_mainFrameMovedOrResized(self, *args)

    def fire_beginDoubleClick(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_beginDoubleClick(self, *args)

    def fire_beginRightClick(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_beginRightClick(self, *args)

    def fire_toolbarBitmapSizeWillChange(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_toolbarBitmapSizeWillChange(self, *args)

    def fire_toolbarBitmapSizeChanged(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_toolbarBitmapSizeChanged(self, *args)

    def fire_objectsLazyLoaded(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_objectsLazyLoaded(self, *args)

    def fire_beginQuit(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_beginQuit(self, *args)

    def fire_quitAborted(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_quitAborted(self, *args)

    def fire_quitWillStart(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_quitWillStart(self, *args)

    def fire_modelessOperationWillStart(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_modelessOperationWillStart(self, *args)

    def fire_modelessOperationEnded(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_modelessOperationEnded(self, *args)

    def fire_sysVarChanged(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_sysVarChanged(self, *args)

    def fire_sysVarWillChange(self, *args):
        return _ODA_Drawings.OdRxEventImpl_fire_sysVarWillChange(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdRxEventImpl

# Register OdRxEventImpl in _ODA_Drawings:
_ODA_Drawings.OdRxEventImpl_swigregister(OdRxEventImpl)

def OdRxEventImpl_cast(*args):
    return _ODA_Drawings.OdRxEventImpl_cast(*args)

def OdRxEventImpl_desc(*args):
    return _ODA_Drawings.OdRxEventImpl_desc(*args)

def OdRxEventImpl_createObject(*args):
    return _ODA_Drawings.OdRxEventImpl_createObject(*args)

class OdEditorImpl(OdRxEventImpl):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdEditorImpl_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdEditorImpl_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdEditorImpl_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdEditorImpl_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdEditorImpl_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdEditorImpl

# Register OdEditorImpl in _ODA_Drawings:
_ODA_Drawings.OdEditorImpl_swigregister(OdEditorImpl)

def OdEditorImpl_cast(*args):
    return _ODA_Drawings.OdEditorImpl_cast(*args)

def OdEditorImpl_desc(*args):
    return _ODA_Drawings.OdEditorImpl_desc(*args)

def OdEditorImpl_createObject(*args):
    return _ODA_Drawings.OdEditorImpl_createObject(*args)

class OdDbDynamicBlockPurgePreventer(OdDbBlockRepresentationData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDynamicBlockPurgePreventer_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDynamicBlockPurgePreventer_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDynamicBlockPurgePreventer_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDynamicBlockPurgePreventer_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDynamicBlockPurgePreventer_createObject(*args)

    @staticmethod
    def safeCreateByClassName(*args):
        return _ODA_Drawings.OdDbDynamicBlockPurgePreventer_safeCreateByClassName(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbDynamicBlockPurgePreventer_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbDynamicBlockPurgePreventer_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbDynamicBlockPurgePreventer_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbDynamicBlockPurgePreventer_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDynamicBlockPurgePreventer

# Register OdDbDynamicBlockPurgePreventer in _ODA_Drawings:
_ODA_Drawings.OdDbDynamicBlockPurgePreventer_swigregister(OdDbDynamicBlockPurgePreventer)

def OdDbDynamicBlockPurgePreventer_cast(*args):
    return _ODA_Drawings.OdDbDynamicBlockPurgePreventer_cast(*args)

def OdDbDynamicBlockPurgePreventer_desc(*args):
    return _ODA_Drawings.OdDbDynamicBlockPurgePreventer_desc(*args)

def OdDbDynamicBlockPurgePreventer_createObject(*args):
    return _ODA_Drawings.OdDbDynamicBlockPurgePreventer_createObject(*args)

def OdDbDynamicBlockPurgePreventer_safeCreateByClassName(*args):
    return _ODA_Drawings.OdDbDynamicBlockPurgePreventer_safeCreateByClassName(*args)

class OdDbDynamicBlockProxyNode(OdDbEvalExpr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDynamicBlockProxyNode_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDynamicBlockProxyNode_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDynamicBlockProxyNode_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDynamicBlockProxyNode_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDynamicBlockProxyNode_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDynamicBlockProxyNode

# Register OdDbDynamicBlockProxyNode in _ODA_Drawings:
_ODA_Drawings.OdDbDynamicBlockProxyNode_swigregister(OdDbDynamicBlockProxyNode)

def OdDbDynamicBlockProxyNode_cast(*args):
    return _ODA_Drawings.OdDbDynamicBlockProxyNode_cast(*args)

def OdDbDynamicBlockProxyNode_desc(*args):
    return _ODA_Drawings.OdDbDynamicBlockProxyNode_desc(*args)

def OdDbDynamicBlockProxyNode_createObject(*args):
    return _ODA_Drawings.OdDbDynamicBlockProxyNode_createObject(*args)

class OdDbConstraintsInterfacePE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbConstraintsInterfacePE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbConstraintsInterfacePE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbConstraintsInterfacePE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbConstraintsInterfacePE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbConstraintsInterfacePE_createObject(*args)

    def getAssocVariableName(self, *args):
        return _ODA_Drawings.OdDbConstraintsInterfacePE_getAssocVariableName(self, *args)

    def getAssocVariableValue(self, *args):
        return _ODA_Drawings.OdDbConstraintsInterfacePE_getAssocVariableValue(self, *args)

    def setAssocVariableValue(self, *args):
        return _ODA_Drawings.OdDbConstraintsInterfacePE_setAssocVariableValue(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbConstraintsInterfacePE

# Register OdDbConstraintsInterfacePE in _ODA_Drawings:
_ODA_Drawings.OdDbConstraintsInterfacePE_swigregister(OdDbConstraintsInterfacePE)

def OdDbConstraintsInterfacePE_cast(*args):
    return _ODA_Drawings.OdDbConstraintsInterfacePE_cast(*args)

def OdDbConstraintsInterfacePE_desc(*args):
    return _ODA_Drawings.OdDbConstraintsInterfacePE_desc(*args)

def OdDbConstraintsInterfacePE_createObject(*args):
    return _ODA_Drawings.OdDbConstraintsInterfacePE_createObject(*args)

class OdDbBlockXYParameter(OdDbBlock2PtParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockXYParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockXYParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockXYParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockXYParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockXYParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockXYParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockXYParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockXYParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockXYParameter_dxfOutFields(self, *args)

    def horzDescription(self, *args):
        return _ODA_Drawings.OdDbBlockXYParameter_horzDescription(self, *args)

    def horzName(self, *args):
        return _ODA_Drawings.OdDbBlockXYParameter_horzName(self, *args)

    def setHorzDescription(self, *args):
        return _ODA_Drawings.OdDbBlockXYParameter_setHorzDescription(self, *args)

    def setHorzName(self, *args):
        return _ODA_Drawings.OdDbBlockXYParameter_setHorzName(self, *args)

    def setVertDescription(self, *args):
        return _ODA_Drawings.OdDbBlockXYParameter_setVertDescription(self, *args)

    def setVertName(self, *args):
        return _ODA_Drawings.OdDbBlockXYParameter_setVertName(self, *args)

    def setXOffset(self, *args):
        return _ODA_Drawings.OdDbBlockXYParameter_setXOffset(self, *args)

    def setYOffset(self, *args):
        return _ODA_Drawings.OdDbBlockXYParameter_setYOffset(self, *args)

    def vertDescription(self, *args):
        return _ODA_Drawings.OdDbBlockXYParameter_vertDescription(self, *args)

    def vertName(self, *args):
        return _ODA_Drawings.OdDbBlockXYParameter_vertName(self, *args)

    def XOffset(self, *args):
        return _ODA_Drawings.OdDbBlockXYParameter_XOffset(self, *args)

    def YOffset(self, *args):
        return _ODA_Drawings.OdDbBlockXYParameter_YOffset(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockXYParameter

# Register OdDbBlockXYParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlockXYParameter_swigregister(OdDbBlockXYParameter)

def OdDbBlockXYParameter_cast(*args):
    return _ODA_Drawings.OdDbBlockXYParameter_cast(*args)

def OdDbBlockXYParameter_desc(*args):
    return _ODA_Drawings.OdDbBlockXYParameter_desc(*args)

def OdDbBlockXYParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlockXYParameter_createObject(*args)

class OdDbBlockVisibilityParameter(OdDbBlock1PtParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_dxfOutFields(self, *args)

    def isInitialized(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_isInitialized(self, *args)

    def setInitiaized(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_setInitiaized(self, *args)

    def currentVisibilityState(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_currentVisibilityState(self, *args)

    def setCurrentVisibilityState(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_setCurrentVisibilityState(self, *args)

    def clearListOfVisibilityStates(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_clearListOfVisibilityStates(self, *args)

    def visibilityName(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_visibilityName(self, *args)

    def setVisibilityName(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_setVisibilityName(self, *args)

    def visibilityDescription(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_visibilityDescription(self, *args)

    def setVisibilityDescription(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_setVisibilityDescription(self, *args)

    def blockEntityList(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_blockEntityList(self, *args)

    def setBlockEntityList(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_setBlockEntityList(self, *args)

    def numberOfVisibilityStates(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_numberOfVisibilityStates(self, *args)

    def visibilityState(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_visibilityState(self, *args)

    def setVisibilityState(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_setVisibilityState(self, *args)

    def getPropertyDescription(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_getPropertyDescription(self, *args)

    def listVisibleEntities(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_listVisibleEntities(self, *args)

    def setMemberOfCurrentVisibilitySet(self, *args):
        return _ODA_Drawings.OdDbBlockVisibilityParameter_setMemberOfCurrentVisibilitySet(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockVisibilityParameter

# Register OdDbBlockVisibilityParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlockVisibilityParameter_swigregister(OdDbBlockVisibilityParameter)

def OdDbBlockVisibilityParameter_cast(*args):
    return _ODA_Drawings.OdDbBlockVisibilityParameter_cast(*args)

def OdDbBlockVisibilityParameter_desc(*args):
    return _ODA_Drawings.OdDbBlockVisibilityParameter_desc(*args)

def OdDbBlockVisibilityParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlockVisibilityParameter_createObject(*args)

class OdDbBlockRotationParameter(OdDbBlock2PtParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockRotationParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockRotationParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockRotationParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_dxfOutFields(self, *args)

    def angleDescription(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_angleDescription(self, *args)

    def setAngleDescription(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_setAngleDescription(self, *args)

    def angleName(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_angleName(self, *args)

    def setAngleName(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_setAngleName(self, *args)

    def baseAngle(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_baseAngle(self, *args)

    def baseAnglePoint(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_baseAnglePoint(self, *args)

    def definitionBaseAngle(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_definitionBaseAngle(self, *args)

    def definitionBaseAnglePoint(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_definitionBaseAnglePoint(self, *args)

    def getAssociatedRotationGrip(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_getAssociatedRotationGrip(self, *args)

    def offset(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_offset(self, *args)

    def setDefinitionBaseAnglePoint(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_setDefinitionBaseAnglePoint(self, *args)

    def setOffset(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_setOffset(self, *args)

    def setUpdatedAngle(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_setUpdatedAngle(self, *args)

    def setValueSet(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_setValueSet(self, *args)

    def valueSet(self, *args):
        return _ODA_Drawings.OdDbBlockRotationParameter_valueSet(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockRotationParameter

# Register OdDbBlockRotationParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlockRotationParameter_swigregister(OdDbBlockRotationParameter)

def OdDbBlockRotationParameter_cast(*args):
    return _ODA_Drawings.OdDbBlockRotationParameter_cast(*args)

def OdDbBlockRotationParameter_desc(*args):
    return _ODA_Drawings.OdDbBlockRotationParameter_desc(*args)

def OdDbBlockRotationParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlockRotationParameter_createObject(*args)

class OdDbBlockRepresentationContext(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockRepresentationContext

    def init(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_init(self, *args)

    def loadInstanceData(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_loadInstanceData(self, *args)

    def compactRepresentation(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_compactRepresentation(self, *args)

    def originalPathToRepresentationPath(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_originalPathToRepresentationPath(self, *args)

    def representationPathToOriginalPath(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_representationPathToOriginalPath(self, *args)

    @staticmethod
    def tagBlockRecord(*args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_tagBlockRecord(*args)

    @staticmethod
    def clearRepBlock(*args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_clearRepBlock(*args)

    def createRepresentation(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_createRepresentation(self, *args)

    def addHistoryRecord(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_addHistoryRecord(self, *args)

    def getHistoryRecord(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_getHistoryRecord(self, *args)

    def applyHistory(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_applyHistory(self, *args)

    def updateRepresentation(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_updateRepresentation(self, *args)

    def getRepresentation(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_getRepresentation(self, *args)

    def getOriginal(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_getOriginal(self, *args)

    def getRepresentationNode(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_getRepresentationNode(self, *args)

    def getReference(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_getReference(self, *args)

    def getGraph(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_getGraph(self, *args)

    def getBlock(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_getBlock(self, *args)

    def writeUndo(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_writeUndo(self, *args)

    def readUndo(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_readUndo(self, *args)

    @staticmethod
    def getRepresentationContext(*args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_getRepresentationContext(*args)

    def getAttribute(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_getAttribute(self, *args)

    def getRelativeMatrix(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_getRelativeMatrix(self, *args)

    def getRelativeOffset(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_getRelativeOffset(self, *args)

    def getBlockData(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_getBlockData(self, *args)

    def setBlockUpdateMode(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_setBlockUpdateMode(self, *args)

    def blockUpdateMode(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_blockUpdateMode(self, *args)

    def getBlockHData(self, *args):
        return _ODA_Drawings.OdDbBlockRepresentationContext_getBlockHData(self, *args)

# Register OdDbBlockRepresentationContext in _ODA_Drawings:
_ODA_Drawings.OdDbBlockRepresentationContext_swigregister(OdDbBlockRepresentationContext)

def OdDbBlockRepresentationContext_tagBlockRecord(*args):
    return _ODA_Drawings.OdDbBlockRepresentationContext_tagBlockRecord(*args)

def OdDbBlockRepresentationContext_clearRepBlock(*args):
    return _ODA_Drawings.OdDbBlockRepresentationContext_clearRepBlock(*args)

def OdDbBlockRepresentationContext_getRepresentationContext(*args):
    return _ODA_Drawings.OdDbBlockRepresentationContext_getRepresentationContext(*args)

class OdDbBlockUserParameter(OdDbBlock1PtParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockUserParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockUserParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockUserParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockUserParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockUserParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockUserParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockUserParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockUserParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockUserParameter_dxfOutFields(self, *args)
    kDistance = _ODA_Drawings.OdDbBlockUserParameter_kDistance
    kArea = _ODA_Drawings.OdDbBlockUserParameter_kArea
    kVolume = _ODA_Drawings.OdDbBlockUserParameter_kVolume
    kReal = _ODA_Drawings.OdDbBlockUserParameter_kReal
    kAngle = _ODA_Drawings.OdDbBlockUserParameter_kAngle
    kString = _ODA_Drawings.OdDbBlockUserParameter_kString

    def assocVarId(self, *args):
        return _ODA_Drawings.OdDbBlockUserParameter_assocVarId(self, *args)

    def setAssocVarId(self, *args):
        return _ODA_Drawings.OdDbBlockUserParameter_setAssocVarId(self, *args)

    def userVarName(self, *args):
        return _ODA_Drawings.OdDbBlockUserParameter_userVarName(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockUserParameter

# Register OdDbBlockUserParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlockUserParameter_swigregister(OdDbBlockUserParameter)

def OdDbBlockUserParameter_cast(*args):
    return _ODA_Drawings.OdDbBlockUserParameter_cast(*args)

def OdDbBlockUserParameter_desc(*args):
    return _ODA_Drawings.OdDbBlockUserParameter_desc(*args)

def OdDbBlockUserParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlockUserParameter_createObject(*args)

class OdDbBPTAuditError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    empty = _ODA_Drawings.OdDbBPTAuditError_empty
    noMatchingRow = _ODA_Drawings.OdDbBPTAuditError_noMatchingRow
    invalidCell = _ODA_Drawings.OdDbBPTAuditError_invalidCell
    notInValueSet = _ODA_Drawings.OdDbBPTAuditError_notInValueSet
    nonConstAttDef = _ODA_Drawings.OdDbBPTAuditError_nonConstAttDef
    invalidUnmatchedValue = _ODA_Drawings.OdDbBPTAuditError_invalidUnmatchedValue
    duplicateRows = _ODA_Drawings.OdDbBPTAuditError_duplicateRows
    exprExternRef = _ODA_Drawings.OdDbBPTAuditError_exprExternRef
    cellEvalError = _ODA_Drawings.OdDbBPTAuditError_cellEvalError

    def errorType(self, *args):
        return _ODA_Drawings.OdDbBPTAuditError_errorType(self, *args)

    def getCellIndex(self, *args):
        return _ODA_Drawings.OdDbBPTAuditError_getCellIndex(self, *args)

    def getColumnIndex(self, *args):
        return _ODA_Drawings.OdDbBPTAuditError_getColumnIndex(self, *args)

    def getRowIndex(self, *args):
        return _ODA_Drawings.OdDbBPTAuditError_getRowIndex(self, *args)

    def getUnmatchedValueIndex(self, *args):
        return _ODA_Drawings.OdDbBPTAuditError_getUnmatchedValueIndex(self, *args)

    def __init__(self, *args):
        _ODA_Drawings.OdDbBPTAuditError_swiginit(self, _ODA_Drawings.new_OdDbBPTAuditError(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBPTAuditError

# Register OdDbBPTAuditError in _ODA_Drawings:
_ODA_Drawings.OdDbBPTAuditError_swigregister(OdDbBPTAuditError)

class OdDbBlockPropertiesTable(OdDbBlock1PtParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_dxfOutFields(self, *args)

    def numberOfColumns(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_numberOfColumns(self, *args)

    def numberOfRows(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_numberOfRows(self, *args)

    def getCellValue(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_getCellValue(self, *args)

    def setCellValue(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_setCellValue(self, *args)

    def getCellValueString(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_getCellValueString(self, *args)

    def constant(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_constant(self, *args)

    def setConstant(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_setConstant(self, *args)

    def editable(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_editable(self, *args)

    def setEditable(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_setEditable(self, *args)

    def removable(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_removable(self, *args)

    def setRemovable(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_setRemovable(self, *args)

    def isAngular(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_isAngular(self, *args)

    def isAttribute(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_isAttribute(self, *args)

    def customProperties(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_customProperties(self, *args)

    def setCustomProperties(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_setCustomProperties(self, *args)

    def defaultValue(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_defaultValue(self, *args)

    def setDefaultValue(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_setDefaultValue(self, *args)

    def format(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_format(self, *args)

    def setFormat(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_setFormat(self, *args)

    def mustMatch(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_mustMatch(self, *args)

    def setMustMatch(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_setMustMatch(self, *args)

    def setUnmatchedValue(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_setUnmatchedValue(self, *args)

    def unmatchedValue(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_unmatchedValue(self, *args)

    def getColumnName(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_getColumnName(self, *args)

    def tableDescription(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_tableDescription(self, *args)

    def setTableDescription(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_setTableDescription(self, *args)

    def tableName(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_tableName(self, *args)

    def setTableName(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_setTableName(self, *args)

    def idOfRow(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_idOfRow(self, *args)

    def indexOfRow(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_indexOfRow(self, *args)

    def insertColumn(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_insertColumn(self, *args)

    def insertRow(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_insertRow(self, *args)

    def removeColumn(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_removeColumn(self, *args)

    def removeRow(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_removeRow(self, *args)

    def appendColumn(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_appendColumn(self, *args)

    def appendRow(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_appendRow(self, *args)

    def moveColumn(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_moveColumn(self, *args)

    def moveRow(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_moveRow(self, *args)

    @staticmethod
    def bptNodeId(*args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_bptNodeId(*args)

    def addedToGraph(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_addedToGraph(self, *args)

    def erased(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_erased(self, *args)

    def removedFromGraph(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_removedFromGraph(self, *args)

    def getDefaultActiveRow(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_getDefaultActiveRow(self, *args)

    def setDefaultActiveRow(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_setDefaultActiveRow(self, *args)

    def columnValuesAreUnique(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_columnValuesAreUnique(self, *args)

    def disabledInDrawingEditor(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_disabledInDrawingEditor(self, *args)

    def runtimeParametersOnly(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_runtimeParametersOnly(self, *args)

    def setRuntimeParametersOnly(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_setRuntimeParametersOnly(self, *args)

    def tableAudit(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_tableAudit(self, *args)

    def sortRows(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTable_sortRows(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockPropertiesTable

# Register OdDbBlockPropertiesTable in _ODA_Drawings:
_ODA_Drawings.OdDbBlockPropertiesTable_swigregister(OdDbBlockPropertiesTable)

def OdDbBlockPropertiesTable_cast(*args):
    return _ODA_Drawings.OdDbBlockPropertiesTable_cast(*args)

def OdDbBlockPropertiesTable_desc(*args):
    return _ODA_Drawings.OdDbBlockPropertiesTable_desc(*args)

def OdDbBlockPropertiesTable_createObject(*args):
    return _ODA_Drawings.OdDbBlockPropertiesTable_createObject(*args)

def OdDbBlockPropertiesTable_bptNodeId(*args):
    return _ODA_Drawings.OdDbBlockPropertiesTable_bptNodeId(*args)

class OdDbBlockPropertiesTableGrip(OdDbBlockGrip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockPropertiesTableGrip_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockPropertiesTableGrip_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTableGrip_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockPropertiesTableGrip_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockPropertiesTableGrip_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockPropertiesTableGrip

# Register OdDbBlockPropertiesTableGrip in _ODA_Drawings:
_ODA_Drawings.OdDbBlockPropertiesTableGrip_swigregister(OdDbBlockPropertiesTableGrip)

def OdDbBlockPropertiesTableGrip_cast(*args):
    return _ODA_Drawings.OdDbBlockPropertiesTableGrip_cast(*args)

def OdDbBlockPropertiesTableGrip_desc(*args):
    return _ODA_Drawings.OdDbBlockPropertiesTableGrip_desc(*args)

def OdDbBlockPropertiesTableGrip_createObject(*args):
    return _ODA_Drawings.OdDbBlockPropertiesTableGrip_createObject(*args)

class OdDbBlockPolarParameter(OdDbBlock2PtParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockPolarParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockPolarParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockPolarParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockPolarParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockPolarParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockPolarParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockPolarParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockPolarParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockPolarParameter_dxfOutFields(self, *args)

    def angleDescription(self, *args):
        return _ODA_Drawings.OdDbBlockPolarParameter_angleDescription(self, *args)

    def angleName(self, *args):
        return _ODA_Drawings.OdDbBlockPolarParameter_angleName(self, *args)

    def distanceDescription(self, *args):
        return _ODA_Drawings.OdDbBlockPolarParameter_distanceDescription(self, *args)

    def distanceName(self, *args):
        return _ODA_Drawings.OdDbBlockPolarParameter_distanceName(self, *args)

    def offset(self, *args):
        return _ODA_Drawings.OdDbBlockPolarParameter_offset(self, *args)

    def setAngleDescription(self, *args):
        return _ODA_Drawings.OdDbBlockPolarParameter_setAngleDescription(self, *args)

    def setAngleName(self, *args):
        return _ODA_Drawings.OdDbBlockPolarParameter_setAngleName(self, *args)

    def setDistanceDescription(self, *args):
        return _ODA_Drawings.OdDbBlockPolarParameter_setDistanceDescription(self, *args)

    def setDistanceName(self, *args):
        return _ODA_Drawings.OdDbBlockPolarParameter_setDistanceName(self, *args)

    def setOffset(self, *args):
        return _ODA_Drawings.OdDbBlockPolarParameter_setOffset(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockPolarParameter

# Register OdDbBlockPolarParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlockPolarParameter_swigregister(OdDbBlockPolarParameter)

def OdDbBlockPolarParameter_cast(*args):
    return _ODA_Drawings.OdDbBlockPolarParameter_cast(*args)

def OdDbBlockPolarParameter_desc(*args):
    return _ODA_Drawings.OdDbBlockPolarParameter_desc(*args)

def OdDbBlockPolarParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlockPolarParameter_createObject(*args)

class OdDbBlockPointParameter(OdDbBlock1PtParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockPointParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockPointParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockPointParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockPointParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockPointParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockPointParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockPointParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockPointParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockPointParameter_dxfOutFields(self, *args)

    def positionName(self, *args):
        return _ODA_Drawings.OdDbBlockPointParameter_positionName(self, *args)

    def setPositionName(self, *args):
        return _ODA_Drawings.OdDbBlockPointParameter_setPositionName(self, *args)

    def positionDescription(self, *args):
        return _ODA_Drawings.OdDbBlockPointParameter_positionDescription(self, *args)

    def setPositionDescription(self, *args):
        return _ODA_Drawings.OdDbBlockPointParameter_setPositionDescription(self, *args)

    def definitionLabelPoint(self, *args):
        return _ODA_Drawings.OdDbBlockPointParameter_definitionLabelPoint(self, *args)

    def setDefinitionLabelPoint(self, *args):
        return _ODA_Drawings.OdDbBlockPointParameter_setDefinitionLabelPoint(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockPointParameter

# Register OdDbBlockPointParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlockPointParameter_swigregister(OdDbBlockPointParameter)

def OdDbBlockPointParameter_cast(*args):
    return _ODA_Drawings.OdDbBlockPointParameter_cast(*args)

def OdDbBlockPointParameter_desc(*args):
    return _ODA_Drawings.OdDbBlockPointParameter_desc(*args)

def OdDbBlockPointParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlockPointParameter_createObject(*args)

class OdDbBlockLinearParameter(OdDbBlock2PtParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockLinearParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockLinearParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockLinearParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockLinearParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockLinearParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockLinearParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockLinearParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockLinearParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockLinearParameter_dxfOutFields(self, *args)

    def distanceDescription(self, *args):
        return _ODA_Drawings.OdDbBlockLinearParameter_distanceDescription(self, *args)

    def distanceName(self, *args):
        return _ODA_Drawings.OdDbBlockLinearParameter_distanceName(self, *args)

    def offset(self, *args):
        return _ODA_Drawings.OdDbBlockLinearParameter_offset(self, *args)

    def setDistanceDescription(self, *args):
        return _ODA_Drawings.OdDbBlockLinearParameter_setDistanceDescription(self, *args)

    def setDistanceName(self, *args):
        return _ODA_Drawings.OdDbBlockLinearParameter_setDistanceName(self, *args)

    def setOffset(self, *args):
        return _ODA_Drawings.OdDbBlockLinearParameter_setOffset(self, *args)

    def setValueSet(self, *args):
        return _ODA_Drawings.OdDbBlockLinearParameter_setValueSet(self, *args)

    def valueSet(self, *args):
        return _ODA_Drawings.OdDbBlockLinearParameter_valueSet(self, *args)

    def stretch(self, *args):
        return _ODA_Drawings.OdDbBlockLinearParameter_stretch(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockLinearParameter

# Register OdDbBlockLinearParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlockLinearParameter_swigregister(OdDbBlockLinearParameter)

def OdDbBlockLinearParameter_cast(*args):
    return _ODA_Drawings.OdDbBlockLinearParameter_cast(*args)

def OdDbBlockLinearParameter_desc(*args):
    return _ODA_Drawings.OdDbBlockLinearParameter_desc(*args)

def OdDbBlockLinearParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlockLinearParameter_createObject(*args)

class OdDbBlockConstraintParameter(OdDbBlock2PtParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockConstraintParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockConstraintParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockConstraintParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockConstraintParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockConstraintParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockConstraintParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockConstraintParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockConstraintParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockConstraintParameter_dxfOutFields(self, *args)

    def dependency(self, *args):
        return _ODA_Drawings.OdDbBlockConstraintParameter_dependency(self, *args)

    def setDependency(self, *args):
        return _ODA_Drawings.OdDbBlockConstraintParameter_setDependency(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockConstraintParameter

# Register OdDbBlockConstraintParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlockConstraintParameter_swigregister(OdDbBlockConstraintParameter)

def OdDbBlockConstraintParameter_cast(*args):
    return _ODA_Drawings.OdDbBlockConstraintParameter_cast(*args)

def OdDbBlockConstraintParameter_desc(*args):
    return _ODA_Drawings.OdDbBlockConstraintParameter_desc(*args)

def OdDbBlockConstraintParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlockConstraintParameter_createObject(*args)

class OdDbBlockLinearConstraintParameter(OdDbBlockConstraintParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockLinearConstraintParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockLinearConstraintParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockLinearConstraintParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockLinearConstraintParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockLinearConstraintParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockLinearConstraintParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockLinearConstraintParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockLinearConstraintParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockLinearConstraintParameter_dxfOutFields(self, *args)

    def description(self, *args):
        return _ODA_Drawings.OdDbBlockLinearConstraintParameter_description(self, *args)

    def setDescription(self, *args):
        return _ODA_Drawings.OdDbBlockLinearConstraintParameter_setDescription(self, *args)

    def value(self, *args):
        return _ODA_Drawings.OdDbBlockLinearConstraintParameter_value(self, *args)

    def setValue(self, *args):
        return _ODA_Drawings.OdDbBlockLinearConstraintParameter_setValue(self, *args)

    def valueSet(self, *args):
        return _ODA_Drawings.OdDbBlockLinearConstraintParameter_valueSet(self, *args)

    def setValueSet(self, *args):
        return _ODA_Drawings.OdDbBlockLinearConstraintParameter_setValueSet(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockLinearConstraintParameter

# Register OdDbBlockLinearConstraintParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlockLinearConstraintParameter_swigregister(OdDbBlockLinearConstraintParameter)

def OdDbBlockLinearConstraintParameter_cast(*args):
    return _ODA_Drawings.OdDbBlockLinearConstraintParameter_cast(*args)

def OdDbBlockLinearConstraintParameter_desc(*args):
    return _ODA_Drawings.OdDbBlockLinearConstraintParameter_desc(*args)

def OdDbBlockLinearConstraintParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlockLinearConstraintParameter_createObject(*args)

class OdDbBlockHorizontalConstraintParameter(OdDbBlockLinearConstraintParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockHorizontalConstraintParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockHorizontalConstraintParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockHorizontalConstraintParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockHorizontalConstraintParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockHorizontalConstraintParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockHorizontalConstraintParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockHorizontalConstraintParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockHorizontalConstraintParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockHorizontalConstraintParameter_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockHorizontalConstraintParameter

# Register OdDbBlockHorizontalConstraintParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlockHorizontalConstraintParameter_swigregister(OdDbBlockHorizontalConstraintParameter)

def OdDbBlockHorizontalConstraintParameter_cast(*args):
    return _ODA_Drawings.OdDbBlockHorizontalConstraintParameter_cast(*args)

def OdDbBlockHorizontalConstraintParameter_desc(*args):
    return _ODA_Drawings.OdDbBlockHorizontalConstraintParameter_desc(*args)

def OdDbBlockHorizontalConstraintParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlockHorizontalConstraintParameter_createObject(*args)

class OdDbBlockVerticalConstraintParameter(OdDbBlockLinearConstraintParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockVerticalConstraintParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockVerticalConstraintParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockVerticalConstraintParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockVerticalConstraintParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockVerticalConstraintParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockVerticalConstraintParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockVerticalConstraintParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockVerticalConstraintParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockVerticalConstraintParameter_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockVerticalConstraintParameter

# Register OdDbBlockVerticalConstraintParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlockVerticalConstraintParameter_swigregister(OdDbBlockVerticalConstraintParameter)

def OdDbBlockVerticalConstraintParameter_cast(*args):
    return _ODA_Drawings.OdDbBlockVerticalConstraintParameter_cast(*args)

def OdDbBlockVerticalConstraintParameter_desc(*args):
    return _ODA_Drawings.OdDbBlockVerticalConstraintParameter_desc(*args)

def OdDbBlockVerticalConstraintParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlockVerticalConstraintParameter_createObject(*args)

class OdDbBlockAlignedConstraintParameter(OdDbBlockLinearConstraintParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockAlignedConstraintParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockAlignedConstraintParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockAlignedConstraintParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockAlignedConstraintParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockAlignedConstraintParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockAlignedConstraintParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockAlignedConstraintParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockAlignedConstraintParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockAlignedConstraintParameter_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockAlignedConstraintParameter

# Register OdDbBlockAlignedConstraintParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlockAlignedConstraintParameter_swigregister(OdDbBlockAlignedConstraintParameter)

def OdDbBlockAlignedConstraintParameter_cast(*args):
    return _ODA_Drawings.OdDbBlockAlignedConstraintParameter_cast(*args)

def OdDbBlockAlignedConstraintParameter_desc(*args):
    return _ODA_Drawings.OdDbBlockAlignedConstraintParameter_desc(*args)

def OdDbBlockAlignedConstraintParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlockAlignedConstraintParameter_createObject(*args)

class OdDbBlockAngularConstraintParameter(OdDbBlockConstraintParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockAngularConstraintParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockAngularConstraintParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockAngularConstraintParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockAngularConstraintParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockAngularConstraintParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockAngularConstraintParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockAngularConstraintParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockAngularConstraintParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockAngularConstraintParameter_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockAngularConstraintParameter

# Register OdDbBlockAngularConstraintParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlockAngularConstraintParameter_swigregister(OdDbBlockAngularConstraintParameter)

def OdDbBlockAngularConstraintParameter_cast(*args):
    return _ODA_Drawings.OdDbBlockAngularConstraintParameter_cast(*args)

def OdDbBlockAngularConstraintParameter_desc(*args):
    return _ODA_Drawings.OdDbBlockAngularConstraintParameter_desc(*args)

def OdDbBlockAngularConstraintParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlockAngularConstraintParameter_createObject(*args)

class OdDbBlockDiametricConstraintParameter(OdDbBlockConstraintParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockDiametricConstraintParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockDiametricConstraintParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockDiametricConstraintParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockDiametricConstraintParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockDiametricConstraintParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockDiametricConstraintParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockDiametricConstraintParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockDiametricConstraintParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockDiametricConstraintParameter_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockDiametricConstraintParameter

# Register OdDbBlockDiametricConstraintParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlockDiametricConstraintParameter_swigregister(OdDbBlockDiametricConstraintParameter)

def OdDbBlockDiametricConstraintParameter_cast(*args):
    return _ODA_Drawings.OdDbBlockDiametricConstraintParameter_cast(*args)

def OdDbBlockDiametricConstraintParameter_desc(*args):
    return _ODA_Drawings.OdDbBlockDiametricConstraintParameter_desc(*args)

def OdDbBlockDiametricConstraintParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlockDiametricConstraintParameter_createObject(*args)

class OdDbBlockRadialConstraintParameter(OdDbBlockConstraintParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockRadialConstraintParameter_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockRadialConstraintParameter_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockRadialConstraintParameter_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockRadialConstraintParameter_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockRadialConstraintParameter_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockRadialConstraintParameter_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockRadialConstraintParameter_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockRadialConstraintParameter_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockRadialConstraintParameter_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockRadialConstraintParameter

# Register OdDbBlockRadialConstraintParameter in _ODA_Drawings:
_ODA_Drawings.OdDbBlockRadialConstraintParameter_swigregister(OdDbBlockRadialConstraintParameter)

def OdDbBlockRadialConstraintParameter_cast(*args):
    return _ODA_Drawings.OdDbBlockRadialConstraintParameter_cast(*args)

def OdDbBlockRadialConstraintParameter_desc(*args):
    return _ODA_Drawings.OdDbBlockRadialConstraintParameter_desc(*args)

def OdDbBlockRadialConstraintParameter_createObject(*args):
    return _ODA_Drawings.OdDbBlockRadialConstraintParameter_createObject(*args)

class OdDbBlockAction(OdDbBlockElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    XY = _ODA_Drawings.OdDbBlockAction_XY
    X = _ODA_Drawings.OdDbBlockAction_X
    Y = _ODA_Drawings.OdDbBlockAction_Y

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockAction_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockAction_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockAction_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockAction_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockAction_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockAction_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockAction_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockAction_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockAction_dxfOutFields(self, *args)

    def displayLocation(self, *args):
        return _ODA_Drawings.OdDbBlockAction_displayLocation(self, *args)

    def setDisplayLocation(self, *args):
        return _ODA_Drawings.OdDbBlockAction_setDisplayLocation(self, *args)

    def drivingParameterNodeId(self, *args):
        return _ODA_Drawings.OdDbBlockAction_drivingParameterNodeId(self, *args)

    def elementSelectionSet(self, *args):
        return _ODA_Drawings.OdDbBlockAction_elementSelectionSet(self, *args)

    def selectionSet(self, *args):
        return _ODA_Drawings.OdDbBlockAction_selectionSet(self, *args)

    def getAssociatedParameter(self, *args):
        return _ODA_Drawings.OdDbBlockAction_getAssociatedParameter(self, *args)

    def setSelectionSet(self, *args):
        return _ODA_Drawings.OdDbBlockAction_setSelectionSet(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockAction

# Register OdDbBlockAction in _ODA_Drawings:
_ODA_Drawings.OdDbBlockAction_swigregister(OdDbBlockAction)

def OdDbBlockAction_cast(*args):
    return _ODA_Drawings.OdDbBlockAction_cast(*args)

def OdDbBlockAction_desc(*args):
    return _ODA_Drawings.OdDbBlockAction_desc(*args)

def OdDbBlockAction_createObject(*args):
    return _ODA_Drawings.OdDbBlockAction_createObject(*args)

class OdDbBlockMoveAction(OdDbBlockAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockMoveAction_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockMoveAction_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockMoveAction_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockMoveAction_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockMoveAction_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockMoveAction_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockMoveAction_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockMoveAction_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockMoveAction_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockMoveAction

# Register OdDbBlockMoveAction in _ODA_Drawings:
_ODA_Drawings.OdDbBlockMoveAction_swigregister(OdDbBlockMoveAction)

def OdDbBlockMoveAction_cast(*args):
    return _ODA_Drawings.OdDbBlockMoveAction_cast(*args)

def OdDbBlockMoveAction_desc(*args):
    return _ODA_Drawings.OdDbBlockMoveAction_desc(*args)

def OdDbBlockMoveAction_createObject(*args):
    return _ODA_Drawings.OdDbBlockMoveAction_createObject(*args)

class OdDbBlockStretchAction(OdDbBlockAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockStretchAction_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockStretchAction_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockStretchAction_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockStretchAction_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockStretchAction_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockStretchAction_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockStretchAction_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockStretchAction_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockStretchAction_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockStretchAction

# Register OdDbBlockStretchAction in _ODA_Drawings:
_ODA_Drawings.OdDbBlockStretchAction_swigregister(OdDbBlockStretchAction)

def OdDbBlockStretchAction_cast(*args):
    return _ODA_Drawings.OdDbBlockStretchAction_cast(*args)

def OdDbBlockStretchAction_desc(*args):
    return _ODA_Drawings.OdDbBlockStretchAction_desc(*args)

def OdDbBlockStretchAction_createObject(*args):
    return _ODA_Drawings.OdDbBlockStretchAction_createObject(*args)

class OdDbBlockActionWithBasePt(OdDbBlockAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockActionWithBasePt_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockActionWithBasePt_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockActionWithBasePt_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockActionWithBasePt_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockActionWithBasePt_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockActionWithBasePt_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockActionWithBasePt_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockActionWithBasePt_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockActionWithBasePt_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockActionWithBasePt

# Register OdDbBlockActionWithBasePt in _ODA_Drawings:
_ODA_Drawings.OdDbBlockActionWithBasePt_swigregister(OdDbBlockActionWithBasePt)

def OdDbBlockActionWithBasePt_cast(*args):
    return _ODA_Drawings.OdDbBlockActionWithBasePt_cast(*args)

def OdDbBlockActionWithBasePt_desc(*args):
    return _ODA_Drawings.OdDbBlockActionWithBasePt_desc(*args)

def OdDbBlockActionWithBasePt_createObject(*args):
    return _ODA_Drawings.OdDbBlockActionWithBasePt_createObject(*args)

class OdDbBlockScaleAction(OdDbBlockActionWithBasePt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockScaleAction_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockScaleAction_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockScaleAction_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockScaleAction_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockScaleAction_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockScaleAction_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockScaleAction_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockScaleAction_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockScaleAction_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockScaleAction

# Register OdDbBlockScaleAction in _ODA_Drawings:
_ODA_Drawings.OdDbBlockScaleAction_swigregister(OdDbBlockScaleAction)

def OdDbBlockScaleAction_cast(*args):
    return _ODA_Drawings.OdDbBlockScaleAction_cast(*args)

def OdDbBlockScaleAction_desc(*args):
    return _ODA_Drawings.OdDbBlockScaleAction_desc(*args)

def OdDbBlockScaleAction_createObject(*args):
    return _ODA_Drawings.OdDbBlockScaleAction_createObject(*args)

class OdDbBlockRotateAction(OdDbBlockActionWithBasePt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockRotateAction_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockRotateAction_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockRotateAction_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockRotateAction_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockRotateAction_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockRotateAction_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockRotateAction_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockRotateAction_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockRotateAction_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockRotateAction

# Register OdDbBlockRotateAction in _ODA_Drawings:
_ODA_Drawings.OdDbBlockRotateAction_swigregister(OdDbBlockRotateAction)

def OdDbBlockRotateAction_cast(*args):
    return _ODA_Drawings.OdDbBlockRotateAction_cast(*args)

def OdDbBlockRotateAction_desc(*args):
    return _ODA_Drawings.OdDbBlockRotateAction_desc(*args)

def OdDbBlockRotateAction_createObject(*args):
    return _ODA_Drawings.OdDbBlockRotateAction_createObject(*args)

class OdDbBlockFlipAction(OdDbBlockAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockFlipAction_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockFlipAction_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockFlipAction_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockFlipAction_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockFlipAction_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockFlipAction_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockFlipAction_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockFlipAction_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockFlipAction_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockFlipAction

# Register OdDbBlockFlipAction in _ODA_Drawings:
_ODA_Drawings.OdDbBlockFlipAction_swigregister(OdDbBlockFlipAction)

def OdDbBlockFlipAction_cast(*args):
    return _ODA_Drawings.OdDbBlockFlipAction_cast(*args)

def OdDbBlockFlipAction_desc(*args):
    return _ODA_Drawings.OdDbBlockFlipAction_desc(*args)

def OdDbBlockFlipAction_createObject(*args):
    return _ODA_Drawings.OdDbBlockFlipAction_createObject(*args)

class OdDbBlockArrayAction(OdDbBlockAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockArrayAction_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockArrayAction_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockArrayAction_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockArrayAction_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockArrayAction_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockArrayAction_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockArrayAction_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockArrayAction_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockArrayAction_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockArrayAction

# Register OdDbBlockArrayAction in _ODA_Drawings:
_ODA_Drawings.OdDbBlockArrayAction_swigregister(OdDbBlockArrayAction)

def OdDbBlockArrayAction_cast(*args):
    return _ODA_Drawings.OdDbBlockArrayAction_cast(*args)

def OdDbBlockArrayAction_desc(*args):
    return _ODA_Drawings.OdDbBlockArrayAction_desc(*args)

def OdDbBlockArrayAction_createObject(*args):
    return _ODA_Drawings.OdDbBlockArrayAction_createObject(*args)

class OdDbBlockLookupAction(OdDbBlockAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockLookupAction_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockLookupAction_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockLookupAction_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockLookupAction_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockLookupAction_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockLookupAction_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockLookupAction_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockLookupAction_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockLookupAction_dxfOutFields(self, *args)

    def getLookupTable(self, *args):
        return _ODA_Drawings.OdDbBlockLookupAction_getLookupTable(self, *args)

    def numberOfInputColumns(self, *args):
        return _ODA_Drawings.OdDbBlockLookupAction_numberOfInputColumns(self, *args)

    def numberOfOutputColumns(self, *args):
        return _ODA_Drawings.OdDbBlockLookupAction_numberOfOutputColumns(self, *args)

    def numberOfColumns(self, *args):
        return _ODA_Drawings.OdDbBlockLookupAction_numberOfColumns(self, *args)

    def numberOfRows(self, *args):
        return _ODA_Drawings.OdDbBlockLookupAction_numberOfRows(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockLookupAction

# Register OdDbBlockLookupAction in _ODA_Drawings:
_ODA_Drawings.OdDbBlockLookupAction_swigregister(OdDbBlockLookupAction)

def OdDbBlockLookupAction_cast(*args):
    return _ODA_Drawings.OdDbBlockLookupAction_cast(*args)

def OdDbBlockLookupAction_desc(*args):
    return _ODA_Drawings.OdDbBlockLookupAction_desc(*args)

def OdDbBlockLookupAction_createObject(*args):
    return _ODA_Drawings.OdDbBlockLookupAction_createObject(*args)

class OdDbBlockPolarStretchAction(OdDbBlockAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBlockPolarStretchAction_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBlockPolarStretchAction_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockPolarStretchAction_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockPolarStretchAction_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBlockPolarStretchAction_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBlockPolarStretchAction_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockPolarStretchAction_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBlockPolarStretchAction_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBlockPolarStretchAction_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockPolarStretchAction

# Register OdDbBlockPolarStretchAction in _ODA_Drawings:
_ODA_Drawings.OdDbBlockPolarStretchAction_swigregister(OdDbBlockPolarStretchAction)

def OdDbBlockPolarStretchAction_cast(*args):
    return _ODA_Drawings.OdDbBlockPolarStretchAction_cast(*args)

def OdDbBlockPolarStretchAction_desc(*args):
    return _ODA_Drawings.OdDbBlockPolarStretchAction_desc(*args)

def OdDbBlockPolarStretchAction_createObject(*args):
    return _ODA_Drawings.OdDbBlockPolarStretchAction_createObject(*args)


def oddbDgnLSGetEntityXDataName(*args):
    return _ODA_Drawings.oddbDgnLSGetEntityXDataName(*args)

def oddbDgnLSCheckEntityXData(*args):
    return _ODA_Drawings.oddbDgnLSCheckEntityXData(*args)

def oddbDgnLSReadEntityXData(*args):
    return _ODA_Drawings.oddbDgnLSReadEntityXData(*args)

def oddbDgnLSDrawEntityXData(*args):
    return _ODA_Drawings.oddbDgnLSDrawEntityXData(*args)

def oddbDgnLSWriteEntityXData(*args):
    return _ODA_Drawings.oddbDgnLSWriteEntityXData(*args)

def oddbDgnLSRemoveEntityXData(*args):
    return _ODA_Drawings.oddbDgnLSRemoveEntityXData(*args)
class OdDbLSSymbolComponent(OdDbLSComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLSSymbolComponent_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLSSymbolComponent_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLSSymbolComponent_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLSSymbolComponent_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLSSymbolComponent_createObject(*args)

    def blockTableRecord(self, *args):
        return _ODA_Drawings.OdDbLSSymbolComponent_blockTableRecord(self, *args)

    def setBlockTableRecord(self, *args):
        return _ODA_Drawings.OdDbLSSymbolComponent_setBlockTableRecord(self, *args)

    def getGeomExtents(self, *args):
        return _ODA_Drawings.OdDbLSSymbolComponent_getGeomExtents(self, *args)

    def hasUnitScale(self, *args):
        return _ODA_Drawings.OdDbLSSymbolComponent_hasUnitScale(self, *args)

    def setHasUnitScale(self, *args):
        return _ODA_Drawings.OdDbLSSymbolComponent_setHasUnitScale(self, *args)

    def Is3d(self, *args):
        return _ODA_Drawings.OdDbLSSymbolComponent_Is3d(self, *args)

    def setIs3d(self, *args):
        return _ODA_Drawings.OdDbLSSymbolComponent_setIs3d(self, *args)

    def storedUnitScale(self, *args):
        return _ODA_Drawings.OdDbLSSymbolComponent_storedUnitScale(self, *args)

    def setStoredUnitScale(self, *args):
        return _ODA_Drawings.OdDbLSSymbolComponent_setStoredUnitScale(self, *args)

    def unitScale(self, *args):
        return _ODA_Drawings.OdDbLSSymbolComponent_unitScale(self, *args)

    def setUnitScale(self, *args):
        return _ODA_Drawings.OdDbLSSymbolComponent_setUnitScale(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLSSymbolComponent

# Register OdDbLSSymbolComponent in _ODA_Drawings:
_ODA_Drawings.OdDbLSSymbolComponent_swigregister(OdDbLSSymbolComponent)

def OdDbLSSymbolComponent_cast(*args):
    return _ODA_Drawings.OdDbLSSymbolComponent_cast(*args)

def OdDbLSSymbolComponent_desc(*args):
    return _ODA_Drawings.OdDbLSSymbolComponent_desc(*args)

def OdDbLSSymbolComponent_createObject(*args):
    return _ODA_Drawings.OdDbLSSymbolComponent_createObject(*args)

class OdDbLSPointComponent(OdDbLSComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLSPointComponent_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLSPointComponent_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLSPointComponent_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLSPointComponent_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLSPointComponent_createObject(*args)

    def insertSymbolForStroke(self, *args):
        return _ODA_Drawings.OdDbLSPointComponent_insertSymbolForStroke(self, *args)

    def insertSymbolForVertex(self, *args):
        return _ODA_Drawings.OdDbLSPointComponent_insertSymbolForVertex(self, *args)

    def deleteSymbolForStroke(self, *args):
        return _ODA_Drawings.OdDbLSPointComponent_deleteSymbolForStroke(self, *args)

    def deleteSymbolForVertex(self, *args):
        return _ODA_Drawings.OdDbLSPointComponent_deleteSymbolForVertex(self, *args)

    def numberSymbols(self, *args):
        return _ODA_Drawings.OdDbLSPointComponent_numberSymbols(self, *args)

    def strokeComponent(self, *args):
        return _ODA_Drawings.OdDbLSPointComponent_strokeComponent(self, *args)

    def setStrokeComponent(self, *args):
        return _ODA_Drawings.OdDbLSPointComponent_setStrokeComponent(self, *args)

    def symbol(self, *args):
        return _ODA_Drawings.OdDbLSPointComponent_symbol(self, *args)

    def symbolForStroke(self, *args):
        return _ODA_Drawings.OdDbLSPointComponent_symbolForStroke(self, *args)

    def symbolForVertex(self, *args):
        return _ODA_Drawings.OdDbLSPointComponent_symbolForVertex(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLSPointComponent

# Register OdDbLSPointComponent in _ODA_Drawings:
_ODA_Drawings.OdDbLSPointComponent_swigregister(OdDbLSPointComponent)

def OdDbLSPointComponent_cast(*args):
    return _ODA_Drawings.OdDbLSPointComponent_cast(*args)

def OdDbLSPointComponent_desc(*args):
    return _ODA_Drawings.OdDbLSPointComponent_desc(*args)

def OdDbLSPointComponent_createObject(*args):
    return _ODA_Drawings.OdDbLSPointComponent_createObject(*args)


def oddbDgnLSGetComponentsDictionaryName(*args):
    return _ODA_Drawings.oddbDgnLSGetComponentsDictionaryName(*args)

def oddbDgnLSGetDefinitionKeyName(*args):
    return _ODA_Drawings.oddbDgnLSGetDefinitionKeyName(*args)

def oddbDgnLSGetComponentsDictionaryId(*args):
    return _ODA_Drawings.oddbDgnLSGetComponentsDictionaryId(*args)

def oddbDgnLSGetComponentsDictionary(*args):
    return _ODA_Drawings.oddbDgnLSGetComponentsDictionary(*args)

def oddbDgnLSInitializeImportUID(*args):
    return _ODA_Drawings.oddbDgnLSInitializeImportUID(*args)

def oddbDgnLSIncrementUID(*args):
    return _ODA_Drawings.oddbDgnLSIncrementUID(*args)
class OdDbLSInternalComponent(OdDbLSStrokePatternComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLSInternalComponent_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLSInternalComponent_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLSInternalComponent_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLSInternalComponent_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLSInternalComponent_createObject(*args)

    def hardwareStyle(self, *args):
        return _ODA_Drawings.OdDbLSInternalComponent_hardwareStyle(self, *args)

    def setHardwareStyle(self, *args):
        return _ODA_Drawings.OdDbLSInternalComponent_setHardwareStyle(self, *args)

    def isHardwareStyle(self, *args):
        return _ODA_Drawings.OdDbLSInternalComponent_isHardwareStyle(self, *args)

    def setIsHardwareStyle(self, *args):
        return _ODA_Drawings.OdDbLSInternalComponent_setIsHardwareStyle(self, *args)

    def lineCode(self, *args):
        return _ODA_Drawings.OdDbLSInternalComponent_lineCode(self, *args)

    def setLineCode(self, *args):
        return _ODA_Drawings.OdDbLSInternalComponent_setLineCode(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLSInternalComponent

# Register OdDbLSInternalComponent in _ODA_Drawings:
_ODA_Drawings.OdDbLSInternalComponent_swigregister(OdDbLSInternalComponent)

def OdDbLSInternalComponent_cast(*args):
    return _ODA_Drawings.OdDbLSInternalComponent_cast(*args)

def OdDbLSInternalComponent_desc(*args):
    return _ODA_Drawings.OdDbLSInternalComponent_desc(*args)

def OdDbLSInternalComponent_createObject(*args):
    return _ODA_Drawings.OdDbLSInternalComponent_createObject(*args)

kMSLSMasterUnits = _ODA_Drawings.kMSLSMasterUnits
kMSLSUORS = _ODA_Drawings.kMSLSUORS
kMSLSDeviceUnits = _ODA_Drawings.kMSLSDeviceUnits
class OdDbLSDefinition(OdDbLSObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLSDefinition_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLSDefinition_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLSDefinition_createObject(*args)

    def component(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_component(self, *args)

    def setComponent(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_setComponent(self, *args)

    def componentUID(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_componentUID(self, *args)

    def isContinuous(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_isContinuous(self, *args)

    def setIsContinuous(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_setIsContinuous(self, *args)

    def isElement(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_isElement(self, *args)

    def setIsElement(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_setIsElement(self, *args)

    def isPhysical(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_isPhysical(self, *args)

    def setIsPhysical(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_setIsPhysical(self, *args)

    def isSCScaleIndependent(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_isSCScaleIndependent(self, *args)

    def setIsSCScaleIndependent(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_setIsSCScaleIndependent(self, *args)

    def isSnappable(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_isSnappable(self, *args)

    def setIsSnappable(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_setIsSnappable(self, *args)

    def name(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_name(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_setName(self, *args)

    def styleNumber(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_styleNumber(self, *args)

    def setStyleNumber(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_setStyleNumber(self, *args)

    def unitDef(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_unitDef(self, *args)

    def setUnitDef(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_setUnitDef(self, *args)

    def unitScale(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_unitScale(self, *args)

    def setUnitScale(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_setUnitScale(self, *args)

    def unitsType(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_unitsType(self, *args)

    def setUnitsType(self, *args):
        return _ODA_Drawings.OdDbLSDefinition_setUnitsType(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLSDefinition

# Register OdDbLSDefinition in _ODA_Drawings:
_ODA_Drawings.OdDbLSDefinition_swigregister(OdDbLSDefinition)

def OdDbLSDefinition_cast(*args):
    return _ODA_Drawings.OdDbLSDefinition_cast(*args)

def OdDbLSDefinition_desc(*args):
    return _ODA_Drawings.OdDbLSDefinition_desc(*args)

def OdDbLSDefinition_createObject(*args):
    return _ODA_Drawings.OdDbLSDefinition_createObject(*args)

class OdDbLSCompoundComponent(OdDbLSComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLSCompoundComponent_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLSCompoundComponent_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLSCompoundComponent_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLSCompoundComponent_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLSCompoundComponent_createObject(*args)

    def appendComponent(self, *args):
        return _ODA_Drawings.OdDbLSCompoundComponent_appendComponent(self, *args)

    def deleteComponent(self, *args):
        return _ODA_Drawings.OdDbLSCompoundComponent_deleteComponent(self, *args)

    def numberComponents(self, *args):
        return _ODA_Drawings.OdDbLSCompoundComponent_numberComponents(self, *args)

    def component(self, *args):
        return _ODA_Drawings.OdDbLSCompoundComponent_component(self, *args)

    def offsetToComponent(self, *args):
        return _ODA_Drawings.OdDbLSCompoundComponent_offsetToComponent(self, *args)

    def setOffsetToComponent(self, *args):
        return _ODA_Drawings.OdDbLSCompoundComponent_setOffsetToComponent(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLSCompoundComponent

# Register OdDbLSCompoundComponent in _ODA_Drawings:
_ODA_Drawings.OdDbLSCompoundComponent_swigregister(OdDbLSCompoundComponent)

def OdDbLSCompoundComponent_cast(*args):
    return _ODA_Drawings.OdDbLSCompoundComponent_cast(*args)

def OdDbLSCompoundComponent_desc(*args):
    return _ODA_Drawings.OdDbLSCompoundComponent_desc(*args)

def OdDbLSCompoundComponent_createObject(*args):
    return _ODA_Drawings.OdDbLSCompoundComponent_createObject(*args)

class OdDbVisualStyle(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbVisualStyle_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbVisualStyle_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbVisualStyle_createObject(*args)

    def setDescription(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_setDescription(self, *args)

    def description(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_description(self, *args)

    def setType(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_setType(self, *args)

    def type(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_type(self, *args)

    def setFaceStyle(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_setFaceStyle(self, *args)

    def faceStyle(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_faceStyle(self, *args)

    def setEdgeStyle(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_setEdgeStyle(self, *args)

    def edgeStyle(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_edgeStyle(self, *args)

    def setDisplayStyle(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_setDisplayStyle(self, *args)

    def displayStyle(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_displayStyle(self, *args)

    def isInternalUseOnly(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_isInternalUseOnly(self, *args)

    def setInternalUseOnly(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_setInternalUseOnly(self, *args)

    @staticmethod
    def createFaceStyle(*args):
        return _ODA_Drawings.OdDbVisualStyle_createFaceStyle(*args)

    @staticmethod
    def createEdgeStyle(*args):
        return _ODA_Drawings.OdDbVisualStyle_createEdgeStyle(*args)

    @staticmethod
    def createDisplayStyle(*args):
        return _ODA_Drawings.OdDbVisualStyle_createDisplayStyle(*args)

    @staticmethod
    def createVisualStyle(*args):
        return _ODA_Drawings.OdDbVisualStyle_createVisualStyle(*args)

    def setTrait(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_setTrait(self, *args)

    def trait(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_trait(self, *args)

    def setTraitFlag(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_setTraitFlag(self, *args)

    def traitFlag(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_traitFlag(self, *args)

    def name(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_name(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_dxfOutFields(self, *args)

    def drawable(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_drawable(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbVisualStyle_subSetAttributes(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbVisualStyle

# Register OdDbVisualStyle in _ODA_Drawings:
_ODA_Drawings.OdDbVisualStyle_swigregister(OdDbVisualStyle)
kszVSShadesOfGray = cvar.kszVSShadesOfGray
kszVSSketchy = cvar.kszVSSketchy
kszVSXRay = cvar.kszVSXRay
kszVSShadedWithEdges = cvar.kszVSShadedWithEdges
kszVSShaded = cvar.kszVSShaded
kszVSJitterOff = cvar.kszVSJitterOff
kszVSOverhangOff = cvar.kszVSOverhangOff
kszVSEdgeColorOff = cvar.kszVSEdgeColorOff

def OdDbVisualStyle_cast(*args):
    return _ODA_Drawings.OdDbVisualStyle_cast(*args)

def OdDbVisualStyle_desc(*args):
    return _ODA_Drawings.OdDbVisualStyle_desc(*args)

def OdDbVisualStyle_createObject(*args):
    return _ODA_Drawings.OdDbVisualStyle_createObject(*args)

def OdDbVisualStyle_createFaceStyle(*args):
    return _ODA_Drawings.OdDbVisualStyle_createFaceStyle(*args)

def OdDbVisualStyle_createEdgeStyle(*args):
    return _ODA_Drawings.OdDbVisualStyle_createEdgeStyle(*args)

def OdDbVisualStyle_createDisplayStyle(*args):
    return _ODA_Drawings.OdDbVisualStyle_createDisplayStyle(*args)

def OdDbVisualStyle_createVisualStyle(*args):
    return _ODA_Drawings.OdDbVisualStyle_createVisualStyle(*args)

class OdDbBlockTableRecordId(OdDbObjectId):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbBlockTableRecordId_swiginit(self, _ODA_Drawings.new_OdDbBlockTableRecordId(*args))

    def __ne__(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecordId___ne__(self, *args)

    def __eq__(self, *args):
        return _ODA_Drawings.OdDbBlockTableRecordId___eq__(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockTableRecordId

# Register OdDbBlockTableRecordId in _ODA_Drawings:
_ODA_Drawings.OdDbBlockTableRecordId_swigregister(OdDbBlockTableRecordId)

class OdDbUndoDisablerAuto(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbUndoDisablerAuto_swiginit(self, _ODA_Drawings.new_OdDbUndoDisablerAuto(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbUndoDisablerAuto

# Register OdDbUndoDisablerAuto in _ODA_Drawings:
_ODA_Drawings.OdDbUndoDisablerAuto_swigregister(OdDbUndoDisablerAuto)

class OdDbUnderlayDefinition(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbUnderlayDefinition_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbUnderlayDefinition_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbUnderlayDefinition_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbUnderlayDefinition_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbUnderlayDefinition_createObject(*args)

    def setSourceFileName(self, *args):
        return _ODA_Drawings.OdDbUnderlayDefinition_setSourceFileName(self, *args)

    def getSourceFileName(self, *args):
        return _ODA_Drawings.OdDbUnderlayDefinition_getSourceFileName(self, *args)

    def getActiveFileName(self, *args):
        return _ODA_Drawings.OdDbUnderlayDefinition_getActiveFileName(self, *args)

    def setItemName(self, *args):
        return _ODA_Drawings.OdDbUnderlayDefinition_setItemName(self, *args)

    def getItemName(self, *args):
        return _ODA_Drawings.OdDbUnderlayDefinition_getItemName(self, *args)

    def setUnderlayItem(self, *args):
        return _ODA_Drawings.OdDbUnderlayDefinition_setUnderlayItem(self, *args)

    def getUnderlayItem(self, *args):
        return _ODA_Drawings.OdDbUnderlayDefinition_getUnderlayItem(self, *args)

    def load(self, *args):
        return _ODA_Drawings.OdDbUnderlayDefinition_load(self, *args)

    def unload(self, *args):
        return _ODA_Drawings.OdDbUnderlayDefinition_unload(self, *args)

    def isLoaded(self, *args):
        return _ODA_Drawings.OdDbUnderlayDefinition_isLoaded(self, *args)

    @staticmethod
    def dictionaryKey(*args):
        return _ODA_Drawings.OdDbUnderlayDefinition_dictionaryKey(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbUnderlayDefinition_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbUnderlayDefinition_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbUnderlayDefinition_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbUnderlayDefinition_dxfOutFields(self, *args)

    def postDefinitionToDb(self, *args):
        return _ODA_Drawings.OdDbUnderlayDefinition_postDefinitionToDb(self, *args)

    def applyPartialUndo(self, *args):
        return _ODA_Drawings.OdDbUnderlayDefinition_applyPartialUndo(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbUnderlayDefinition

# Register OdDbUnderlayDefinition in _ODA_Drawings:
_ODA_Drawings.OdDbUnderlayDefinition_swigregister(OdDbUnderlayDefinition)

def OdDbUnderlayDefinition_cast(*args):
    return _ODA_Drawings.OdDbUnderlayDefinition_cast(*args)

def OdDbUnderlayDefinition_desc(*args):
    return _ODA_Drawings.OdDbUnderlayDefinition_desc(*args)

def OdDbUnderlayDefinition_createObject(*args):
    return _ODA_Drawings.OdDbUnderlayDefinition_createObject(*args)

def OdDbUnderlayDefinition_dictionaryKey(*args):
    return _ODA_Drawings.OdDbUnderlayDefinition_dictionaryKey(*args)

class OdDbDwfDefinition(OdDbUnderlayDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDwfDefinition_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDwfDefinition_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDwfDefinition_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDwfDefinition_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDwfDefinition_createObject(*args)

    def isDWFx(self, *args):
        return _ODA_Drawings.OdDbDwfDefinition_isDWFx(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDwfDefinition

# Register OdDbDwfDefinition in _ODA_Drawings:
_ODA_Drawings.OdDbDwfDefinition_swigregister(OdDbDwfDefinition)

def OdDbDwfDefinition_cast(*args):
    return _ODA_Drawings.OdDbDwfDefinition_cast(*args)

def OdDbDwfDefinition_desc(*args):
    return _ODA_Drawings.OdDbDwfDefinition_desc(*args)

def OdDbDwfDefinition_createObject(*args):
    return _ODA_Drawings.OdDbDwfDefinition_createObject(*args)

class OdDbDgnDefinition(OdDbUnderlayDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDgnDefinition_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDgnDefinition_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDgnDefinition_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDgnDefinition_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDgnDefinition_createObject(*args)

    def useMasterUnits(self, *args):
        return _ODA_Drawings.OdDbDgnDefinition_useMasterUnits(self, *args)

    def setUseMasterUnits(self, *args):
        return _ODA_Drawings.OdDbDgnDefinition_setUseMasterUnits(self, *args)

    def xrefDepth(self, *args):
        return _ODA_Drawings.OdDbDgnDefinition_xrefDepth(self, *args)

    def setXrefDepth(self, *args):
        return _ODA_Drawings.OdDbDgnDefinition_setXrefDepth(self, *args)

    def showRasterRef(self, *args):
        return _ODA_Drawings.OdDbDgnDefinition_showRasterRef(self, *args)

    def setShowRasterRef(self, *args):
        return _ODA_Drawings.OdDbDgnDefinition_setShowRasterRef(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDgnDefinition

# Register OdDbDgnDefinition in _ODA_Drawings:
_ODA_Drawings.OdDbDgnDefinition_swigregister(OdDbDgnDefinition)

def OdDbDgnDefinition_cast(*args):
    return _ODA_Drawings.OdDbDgnDefinition_cast(*args)

def OdDbDgnDefinition_desc(*args):
    return _ODA_Drawings.OdDbDgnDefinition_desc(*args)

def OdDbDgnDefinition_createObject(*args):
    return _ODA_Drawings.OdDbDgnDefinition_createObject(*args)

class OdDbPdfDefinition(OdDbUnderlayDefinition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPdfDefinition_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPdfDefinition_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPdfDefinition_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPdfDefinition_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPdfDefinition_createObject(*args)

    @staticmethod
    def loadPdfUnderlayModule(*args):
        return _ODA_Drawings.OdDbPdfDefinition_loadPdfUnderlayModule(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPdfDefinition

# Register OdDbPdfDefinition in _ODA_Drawings:
_ODA_Drawings.OdDbPdfDefinition_swigregister(OdDbPdfDefinition)

def OdDbPdfDefinition_cast(*args):
    return _ODA_Drawings.OdDbPdfDefinition_cast(*args)

def OdDbPdfDefinition_desc(*args):
    return _ODA_Drawings.OdDbPdfDefinition_desc(*args)

def OdDbPdfDefinition_createObject(*args):
    return _ODA_Drawings.OdDbPdfDefinition_createObject(*args)

def OdDbPdfDefinition_loadPdfUnderlayModule(*args):
    return _ODA_Drawings.OdDbPdfDefinition_loadPdfUnderlayModule(*args)

class OdDbNavisworksDefinition(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbNavisworksDefinition_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbNavisworksDefinition_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbNavisworksDefinition_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbNavisworksDefinition_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbNavisworksDefinition_createObject(*args)

    def setSourceFileName(self, *args):
        return _ODA_Drawings.OdDbNavisworksDefinition_setSourceFileName(self, *args)

    def sourceFileName(self, *args):
        return _ODA_Drawings.OdDbNavisworksDefinition_sourceFileName(self, *args)

    def activeFileName(self, *args):
        return _ODA_Drawings.OdDbNavisworksDefinition_activeFileName(self, *args)

    def setActiveFileName(self, *args):
        return _ODA_Drawings.OdDbNavisworksDefinition_setActiveFileName(self, *args)

    def getDWGModelItemVisible(self, *args):
        return _ODA_Drawings.OdDbNavisworksDefinition_getDWGModelItemVisible(self, *args)

    def setDWGModelItemVisible(self, *args):
        return _ODA_Drawings.OdDbNavisworksDefinition_setDWGModelItemVisible(self, *args)

    def getExtents(self, *args):
        return _ODA_Drawings.OdDbNavisworksDefinition_getExtents(self, *args)

    def load(self, *args):
        return _ODA_Drawings.OdDbNavisworksDefinition_load(self, *args)

    def unload(self, *args):
        return _ODA_Drawings.OdDbNavisworksDefinition_unload(self, *args)

    def isLoaded(self, *args):
        return _ODA_Drawings.OdDbNavisworksDefinition_isLoaded(self, *args)

    def fileType(self, *args):
        return _ODA_Drawings.OdDbNavisworksDefinition_fileType(self, *args)

    def entityCount(self, *args):
        return _ODA_Drawings.OdDbNavisworksDefinition_entityCount(self, *args)

    def fileFound(self, *args):
        return _ODA_Drawings.OdDbNavisworksDefinition_fileFound(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbNavisworksDefinition_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbNavisworksDefinition_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbNavisworksDefinition_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbNavisworksDefinition_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbNavisworksDefinition

# Register OdDbNavisworksDefinition in _ODA_Drawings:
_ODA_Drawings.OdDbNavisworksDefinition_swigregister(OdDbNavisworksDefinition)

def OdDbNavisworksDefinition_cast(*args):
    return _ODA_Drawings.OdDbNavisworksDefinition_cast(*args)

def OdDbNavisworksDefinition_desc(*args):
    return _ODA_Drawings.OdDbNavisworksDefinition_desc(*args)

def OdDbNavisworksDefinition_createObject(*args):
    return _ODA_Drawings.OdDbNavisworksDefinition_createObject(*args)

class OdDbTextIterator(ODA_Kernel.OdBaseTextIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbTextIterator_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbTextIterator

# Register OdDbTextIterator in _ODA_Drawings:
_ODA_Drawings.OdDbTextIterator_swigregister(OdDbTextIterator)

def OdDbTextIterator_createObject(*args):
    return _ODA_Drawings.OdDbTextIterator_createObject(*args)

class OdDbTableTemplate(OdDbTableContent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbTableTemplate_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbTableTemplate_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbTableTemplate_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbTableTemplate_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbTableTemplate_createObject(*args)

    def capture(self, *args):
        return _ODA_Drawings.OdDbTableTemplate_capture(self, *args)

    def createTable(self, *args):
        return _ODA_Drawings.OdDbTableTemplate_createTable(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbTableTemplate_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbTableTemplate_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbTableTemplate_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbTableTemplate_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbTableTemplate

# Register OdDbTableTemplate in _ODA_Drawings:
_ODA_Drawings.OdDbTableTemplate_swigregister(OdDbTableTemplate)

def OdDbTableTemplate_cast(*args):
    return _ODA_Drawings.OdDbTableTemplate_cast(*args)

def OdDbTableTemplate_desc(*args):
    return _ODA_Drawings.OdDbTableTemplate_desc(*args)

def OdDbTableTemplate_createObject(*args):
    return _ODA_Drawings.OdDbTableTemplate_createObject(*args)

class OdDbSweptSurface(OdDbSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSweptSurface_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSweptSurface_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSweptSurface_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSweptSurface_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSweptSurface_createObject(*args)

    def createSweptSurface(self, *args):
        return _ODA_Drawings.OdDbSweptSurface_createSweptSurface(self, *args)

    def getSweepEntity(self, *args):
        return _ODA_Drawings.OdDbSweptSurface_getSweepEntity(self, *args)

    def getPathEntity(self, *args):
        return _ODA_Drawings.OdDbSweptSurface_getPathEntity(self, *args)

    def getSweepOptions(self, *args):
        return _ODA_Drawings.OdDbSweptSurface_getSweepOptions(self, *args)

    def setSweepOptions(self, *args):
        return _ODA_Drawings.OdDbSweptSurface_setSweepOptions(self, *args)

    def getPathLength(self, *args):
        return _ODA_Drawings.OdDbSweptSurface_getPathLength(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbSweptSurface_subTransformBy(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbSweptSurface_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbSweptSurface_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbSweptSurface_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbSweptSurface_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbSweptSurface_subGetClassID(self, *args)

    def isDependent(self, *args):
        return _ODA_Drawings.OdDbSweptSurface_isDependent(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSweptSurface

# Register OdDbSweptSurface in _ODA_Drawings:
_ODA_Drawings.OdDbSweptSurface_swigregister(OdDbSweptSurface)

def OdDbSweptSurface_cast(*args):
    return _ODA_Drawings.OdDbSweptSurface_cast(*args)

def OdDbSweptSurface_desc(*args):
    return _ODA_Drawings.OdDbSweptSurface_desc(*args)

def OdDbSweptSurface_createObject(*args):
    return _ODA_Drawings.OdDbSweptSurface_createObject(*args)

class OdDbSun(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSun_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSun_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSun_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSun_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSun_createObject(*args)

    def drawableType(self, *args):
        return _ODA_Drawings.OdDbSun_drawableType(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbSun_subSetAttributes(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbSun_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbSun_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbSun_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbSun_dxfOutFields(self, *args)

    def drawable(self, *args):
        return _ODA_Drawings.OdDbSun_drawable(self, *args)

    def isOn(self, *args):
        return _ODA_Drawings.OdDbSun_isOn(self, *args)

    def setOn(self, *args):
        return _ODA_Drawings.OdDbSun_setOn(self, *args)

    def intensity(self, *args):
        return _ODA_Drawings.OdDbSun_intensity(self, *args)

    def setIntensity(self, *args):
        return _ODA_Drawings.OdDbSun_setIntensity(self, *args)

    def sunColor(self, *args):
        return _ODA_Drawings.OdDbSun_sunColor(self, *args)

    def setSunColor(self, *args):
        return _ODA_Drawings.OdDbSun_setSunColor(self, *args)

    def shadowParameters(self, *args):
        return _ODA_Drawings.OdDbSun_shadowParameters(self, *args)

    def setShadowParameters(self, *args):
        return _ODA_Drawings.OdDbSun_setShadowParameters(self, *args)

    def setDateTime(self, *args):
        return _ODA_Drawings.OdDbSun_setDateTime(self, *args)

    def dateTime(self, *args):
        return _ODA_Drawings.OdDbSun_dateTime(self, *args)

    def setDayLightSavingsOn(self, *args):
        return _ODA_Drawings.OdDbSun_setDayLightSavingsOn(self, *args)

    def isDayLightSavingsOn(self, *args):
        return _ODA_Drawings.OdDbSun_isDayLightSavingsOn(self, *args)

    def setAzimuth(self, *args):
        return _ODA_Drawings.OdDbSun_setAzimuth(self, *args)

    def azimuth(self, *args):
        return _ODA_Drawings.OdDbSun_azimuth(self, *args)

    def setAltitude(self, *args):
        return _ODA_Drawings.OdDbSun_setAltitude(self, *args)

    def altitude(self, *args):
        return _ODA_Drawings.OdDbSun_altitude(self, *args)

    def sunDirection(self, *args):
        return _ODA_Drawings.OdDbSun_sunDirection(self, *args)

    def setSunDirection(self, *args):
        return _ODA_Drawings.OdDbSun_setSunDirection(self, *args)

    def setSkyParameters(self, *args):
        return _ODA_Drawings.OdDbSun_setSkyParameters(self, *args)

    def skyParameters(self, *args):
        return _ODA_Drawings.OdDbSun_skyParameters(self, *args)

    @staticmethod
    def castByClassName(*args):
        return _ODA_Drawings.OdDbSun_castByClassName(*args)

    @staticmethod
    def safeCastByClassName(*args):
        return _ODA_Drawings.OdDbSun_safeCastByClassName(*args)

    @staticmethod
    def safeCreateByClassName(*args):
        return _ODA_Drawings.OdDbSun_safeCreateByClassName(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSun

# Register OdDbSun in _ODA_Drawings:
_ODA_Drawings.OdDbSun_swigregister(OdDbSun)

def OdDbSun_cast(*args):
    return _ODA_Drawings.OdDbSun_cast(*args)

def OdDbSun_desc(*args):
    return _ODA_Drawings.OdDbSun_desc(*args)

def OdDbSun_createObject(*args):
    return _ODA_Drawings.OdDbSun_createObject(*args)

def OdDbSun_castByClassName(*args):
    return _ODA_Drawings.OdDbSun_castByClassName(*args)

def OdDbSun_safeCastByClassName(*args):
    return _ODA_Drawings.OdDbSun_safeCastByClassName(*args)

def OdDbSun_safeCreateByClassName(*args):
    return _ODA_Drawings.OdDbSun_safeCreateByClassName(*args)

class OdDbSetPlotSettingsPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_createObject(*args)

    def setPlotCfgName(self, *args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_setPlotCfgName(self, *args)

    def setPlotLayoutFlags(self, *args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_setPlotLayoutFlags(self, *args)

    def setMargins(self, *args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_setMargins(self, *args)

    def setPlotPaperSize(self, *args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_setPlotPaperSize(self, *args)

    def setMediaName(self, *args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_setMediaName(self, *args)

    def setOrigin(self, *args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_setOrigin(self, *args)

    def setPlotPaperUnits(self, *args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_setPlotPaperUnits(self, *args)

    def setPlotRotation(self, *args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_setPlotRotation(self, *args)

    def setPlotType(self, *args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_setPlotType(self, *args)

    def setPlotWindowArea(self, *args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_setPlotWindowArea(self, *args)

    def setPlotView(self, *args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_setPlotView(self, *args)

    def setPrintScale(self, *args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_setPrintScale(self, *args)

    def setStyleSheet(self, *args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_setStyleSheet(self, *args)

    def setScaleType(self, *args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_setScaleType(self, *args)

    def setScaleFactor(self, *args):
        return _ODA_Drawings.OdDbSetPlotSettingsPE_setScaleFactor(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSetPlotSettingsPE

# Register OdDbSetPlotSettingsPE in _ODA_Drawings:
_ODA_Drawings.OdDbSetPlotSettingsPE_swigregister(OdDbSetPlotSettingsPE)

def OdDbSetPlotSettingsPE_cast(*args):
    return _ODA_Drawings.OdDbSetPlotSettingsPE_cast(*args)

def OdDbSetPlotSettingsPE_desc(*args):
    return _ODA_Drawings.OdDbSetPlotSettingsPE_desc(*args)

def OdDbSetPlotSettingsPE_createObject(*args):
    return _ODA_Drawings.OdDbSetPlotSettingsPE_createObject(*args)

class OdDbSectionViewStyle(OdDbModelDocViewStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSectionViewStyle_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSectionViewStyle_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSectionViewStyle_createObject(*args)
    kEndCuttingPlane = _ODA_Drawings.OdDbSectionViewStyle_kEndCuttingPlane
    kAboveDirectionArrowLine = _ODA_Drawings.OdDbSectionViewStyle_kAboveDirectionArrowLine
    kAboveDirectionArrowSymbol = _ODA_Drawings.OdDbSectionViewStyle_kAboveDirectionArrowSymbol
    kStartDirectionArrow = _ODA_Drawings.OdDbSectionViewStyle_kStartDirectionArrow
    kEndDirectionArrow = _ODA_Drawings.OdDbSectionViewStyle_kEndDirectionArrow
    kTowardsCuttingPlane = _ODA_Drawings.OdDbSectionViewStyle_kTowardsCuttingPlane
    kAwayFromCuttingPlane = _ODA_Drawings.OdDbSectionViewStyle_kAwayFromCuttingPlane
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSectionViewStyle

    def identifierStyleId(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_identifierStyleId(self, *args)

    def setIdentifierStyleId(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setIdentifierStyleId(self, *args)

    def identifierColor(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_identifierColor(self, *args)

    def setIdentifierColor(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setIdentifierColor(self, *args)

    def identifierHeight(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_identifierHeight(self, *args)

    def setIdentifierHeight(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setIdentifierHeight(self, *args)

    def identifierExcludeCharacters(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_identifierExcludeCharacters(self, *args)

    def setIdentifierExcludeCharacters(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setIdentifierExcludeCharacters(self, *args)

    def arrowStartSymbolId(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_arrowStartSymbolId(self, *args)

    def setArrowStartSymbolId(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setArrowStartSymbolId(self, *args)

    def arrowEndSymbolId(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_arrowEndSymbolId(self, *args)

    def setArrowEndSymbolId(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setArrowEndSymbolId(self, *args)

    def arrowSymbolColor(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_arrowSymbolColor(self, *args)

    def setArrowSymbolColor(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setArrowSymbolColor(self, *args)

    def arrowSymbolSize(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_arrowSymbolSize(self, *args)

    def setArrowSymbolSize(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setArrowSymbolSize(self, *args)

    def arrowSymbolExtensionLength(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_arrowSymbolExtensionLength(self, *args)

    def setArrowSymbolExtensionLength(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setArrowSymbolExtensionLength(self, *args)

    def planeLineWeight(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_planeLineWeight(self, *args)

    def setPlaneLineWeight(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setPlaneLineWeight(self, *args)

    def planeLineColor(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_planeLineColor(self, *args)

    def setPlaneLineColor(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setPlaneLineColor(self, *args)

    def planeLineTypeId(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_planeLineTypeId(self, *args)

    def setPlaneLineTypeId(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setPlaneLineTypeId(self, *args)

    def bendLineColor(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_bendLineColor(self, *args)

    def setBendLineColor(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setBendLineColor(self, *args)

    def bendLineWeight(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_bendLineWeight(self, *args)

    def setBendLineWeight(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setBendLineWeight(self, *args)

    def bendLineTypeId(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_bendLineTypeId(self, *args)

    def setBendLineTypeId(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setBendLineTypeId(self, *args)

    def bendLineLength(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_bendLineLength(self, *args)

    def setBendLineLength(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setBendLineLength(self, *args)

    def endLineLength(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_endLineLength(self, *args)

    def setEndLineLength(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setEndLineLength(self, *args)

    def viewLabelTextStyleId(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_viewLabelTextStyleId(self, *args)

    def setViewLabelTextStyleId(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setViewLabelTextStyleId(self, *args)

    def viewLabelTextColor(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_viewLabelTextColor(self, *args)

    def setViewLabelTextColor(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setViewLabelTextColor(self, *args)

    def viewLabelTextHeight(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_viewLabelTextHeight(self, *args)

    def setViewLabelTextHeight(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setViewLabelTextHeight(self, *args)

    def viewLabelOffset(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_viewLabelOffset(self, *args)

    def setViewLabelOffset(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setViewLabelOffset(self, *args)

    def viewLabelAttachment(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_viewLabelAttachment(self, *args)

    def setViewLabelAttachment(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setViewLabelAttachment(self, *args)

    def viewLabelAlignment(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_viewLabelAlignment(self, *args)

    def setViewLabelAlignment(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setViewLabelAlignment(self, *args)

    def viewLabelPattern(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_viewLabelPattern(self, *args)

    def getViewLabelPattern(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_getViewLabelPattern(self, *args)

    def setViewLabelPattern(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setViewLabelPattern(self, *args)

    def hatchPattern(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_hatchPattern(self, *args)

    def setHatchPattern(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setHatchPattern(self, *args)

    def hatchColor(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_hatchColor(self, *args)

    def setHatchColor(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setHatchColor(self, *args)

    def hatchBackgroundColor(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_hatchBackgroundColor(self, *args)

    def setHatchBackgroundColor(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setHatchBackgroundColor(self, *args)

    def hatchScale(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_hatchScale(self, *args)

    def setHatchScale(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setHatchScale(self, *args)

    def hatchAngles(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_hatchAngles(self, *args)

    def setHatchAngles(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setHatchAngles(self, *args)

    def setHatchTransparency(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setHatchTransparency(self, *args)

    def hatchTransparency(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_hatchTransparency(self, *args)

    def isContinuousLabeling(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_isContinuousLabeling(self, *args)

    def setContinuousLabeling(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setContinuousLabeling(self, *args)

    def showArrowheads(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_showArrowheads(self, *args)

    def setShowArrowheads(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setShowArrowheads(self, *args)

    def showViewLabel(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_showViewLabel(self, *args)

    def setShowViewLabel(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setShowViewLabel(self, *args)

    def showAllPlaneLines(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_showAllPlaneLines(self, *args)

    def setShowAllPlaneLines(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setShowAllPlaneLines(self, *args)

    def showAllBendIndentifiers(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_showAllBendIndentifiers(self, *args)

    def setShowAllBendIndentifiers(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setShowAllBendIndentifiers(self, *args)

    def showEndAndBendLines(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_showEndAndBendLines(self, *args)

    def setShowEndAndBendLines(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setShowEndAndBendLines(self, *args)

    def showHatching(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_showHatching(self, *args)

    def setShowHatching(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setShowHatching(self, *args)

    def viewIdentifierPosition(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_viewIdentifierPosition(self, *args)

    def setViewIdentifierPosition(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setViewIdentifierPosition(self, *args)

    def viewIdentifierOffset(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_viewIdentifierOffset(self, *args)

    def setViewIdentifierOffset(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setViewIdentifierOffset(self, *args)

    def arrowPosition(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_arrowPosition(self, *args)

    def setArrowPosition(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setArrowPosition(self, *args)

    def endLineOvershoot(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_endLineOvershoot(self, *args)

    def setEndLineOvershoot(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_setEndLineOvershoot(self, *args)

    def postViewStyleToDb(self, *args):
        return _ODA_Drawings.OdDbSectionViewStyle_postViewStyleToDb(self, *args)

# Register OdDbSectionViewStyle in _ODA_Drawings:
_ODA_Drawings.OdDbSectionViewStyle_swigregister(OdDbSectionViewStyle)

def OdDbSectionViewStyle_cast(*args):
    return _ODA_Drawings.OdDbSectionViewStyle_cast(*args)

def OdDbSectionViewStyle_desc(*args):
    return _ODA_Drawings.OdDbSectionViewStyle_desc(*args)

def OdDbSectionViewStyle_createObject(*args):
    return _ODA_Drawings.OdDbSectionViewStyle_createObject(*args)

class OdDbSectionManager(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSectionManager_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSectionManager_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSectionManager_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSectionManager_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSectionManager_createObject(*args)

    def getSection(self, *args):
        return _ODA_Drawings.OdDbSectionManager_getSection(self, *args)

    def getLiveSection(self, *args):
        return _ODA_Drawings.OdDbSectionManager_getLiveSection(self, *args)

    def numSections(self, *args):
        return _ODA_Drawings.OdDbSectionManager_numSections(self, *args)

    def newIterator(self, *args):
        return _ODA_Drawings.OdDbSectionManager_newIterator(self, *args)

    def getUniqueSectionName(self, *args):
        return _ODA_Drawings.OdDbSectionManager_getUniqueSectionName(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbSectionManager_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbSectionManager_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbSectionManager_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbSectionManager_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbSectionManager_subGetClassID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSectionManager

# Register OdDbSectionManager in _ODA_Drawings:
_ODA_Drawings.OdDbSectionManager_swigregister(OdDbSectionManager)

def OdDbSectionManager_cast(*args):
    return _ODA_Drawings.OdDbSectionManager_cast(*args)

def OdDbSectionManager_desc(*args):
    return _ODA_Drawings.OdDbSectionManager_desc(*args)

def OdDbSectionManager_createObject(*args):
    return _ODA_Drawings.OdDbSectionManager_createObject(*args)

class OdDbSectionManagerIterator(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSectionManagerIterator_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSectionManagerIterator_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSectionManagerIterator_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSectionManagerIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSectionManagerIterator_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSectionManagerIterator

    def start(self, *args):
        return _ODA_Drawings.OdDbSectionManagerIterator_start(self, *args)

    def step(self, *args):
        return _ODA_Drawings.OdDbSectionManagerIterator_step(self, *args)

    def done(self, *args):
        return _ODA_Drawings.OdDbSectionManagerIterator_done(self, *args)

    def getSection(self, *args):
        return _ODA_Drawings.OdDbSectionManagerIterator_getSection(self, *args)

# Register OdDbSectionManagerIterator in _ODA_Drawings:
_ODA_Drawings.OdDbSectionManagerIterator_swigregister(OdDbSectionManagerIterator)

def OdDbSectionManagerIterator_cast(*args):
    return _ODA_Drawings.OdDbSectionManagerIterator_cast(*args)

def OdDbSectionManagerIterator_desc(*args):
    return _ODA_Drawings.OdDbSectionManagerIterator_desc(*args)

def OdDbSectionManagerIterator_createObject(*args):
    return _ODA_Drawings.OdDbSectionManagerIterator_createObject(*args)

class OdDbScale(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbScale_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbScale_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbScale_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbScale_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbScale_createObject(*args)

    def scaleName(self, *args):
        return _ODA_Drawings.OdDbScale_scaleName(self, *args)

    def setScaleName(self, *args):
        return _ODA_Drawings.OdDbScale_setScaleName(self, *args)

    def scale(self, *args):
        return _ODA_Drawings.OdDbScale_scale(self, *args)

    def drawingUnits(self, *args):
        return _ODA_Drawings.OdDbScale_drawingUnits(self, *args)

    def setDrawingUnits(self, *args):
        return _ODA_Drawings.OdDbScale_setDrawingUnits(self, *args)

    def paperUnits(self, *args):
        return _ODA_Drawings.OdDbScale_paperUnits(self, *args)

    def setPaperUnits(self, *args):
        return _ODA_Drawings.OdDbScale_setPaperUnits(self, *args)

    def isTemporaryScale(self, *args):
        return _ODA_Drawings.OdDbScale_isTemporaryScale(self, *args)

    def setIsTemporaryScale(self, *args):
        return _ODA_Drawings.OdDbScale_setIsTemporaryScale(self, *args)

    def isUnitScale(self, *args):
        return _ODA_Drawings.OdDbScale_isUnitScale(self, *args)

    def setIsUnitScale(self, *args):
        return _ODA_Drawings.OdDbScale_setIsUnitScale(self, *args)

    def getXRefMangledName(self, *args):
        return _ODA_Drawings.OdDbScale_getXRefMangledName(self, *args)

    @staticmethod
    def nameExists(*args):
        return _ODA_Drawings.OdDbScale_nameExists(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbScale_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbScale_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbScale_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbScale_dxfOutFields(self, *args)

    def appendToOwner(self, *args):
        return _ODA_Drawings.OdDbScale_appendToOwner(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbScale_subErase(self, *args)

    def applyPartialUndo(self, *args):
        return _ODA_Drawings.OdDbScale_applyPartialUndo(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbScale

# Register OdDbScale in _ODA_Drawings:
_ODA_Drawings.OdDbScale_swigregister(OdDbScale)

def OdDbScale_cast(*args):
    return _ODA_Drawings.OdDbScale_cast(*args)

def OdDbScale_desc(*args):
    return _ODA_Drawings.OdDbScale_desc(*args)

def OdDbScale_createObject(*args):
    return _ODA_Drawings.OdDbScale_createObject(*args)

def OdDbScale_nameExists(*args):
    return _ODA_Drawings.OdDbScale_nameExists(*args)

class OdDbRevolvedSurface(OdDbSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRevolvedSurface_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRevolvedSurface_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRevolvedSurface_createObject(*args)

    def createRevolvedSurface(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_createRevolvedSurface(self, *args)

    def getRevolveEntity(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_getRevolveEntity(self, *args)

    def getAxisPnt(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_getAxisPnt(self, *args)

    def setAxisPnt(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_setAxisPnt(self, *args)

    def getAxisVec(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_getAxisVec(self, *args)

    def setAxisVec(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_setAxisVec(self, *args)

    def getRevolveAngle(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_getRevolveAngle(self, *args)

    def setRevolveAngle(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_setRevolveAngle(self, *args)

    def getStartAngle(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_getStartAngle(self, *args)

    def setStartAngle(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_setStartAngle(self, *args)

    def getRevolveOptions(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_getRevolveOptions(self, *args)

    def setRevolveOptions(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_setRevolveOptions(self, *args)

    def setRevolve(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_setRevolve(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_subTransformBy(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_subGetClassID(self, *args)

    def isDependent(self, *args):
        return _ODA_Drawings.OdDbRevolvedSurface_isDependent(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRevolvedSurface

# Register OdDbRevolvedSurface in _ODA_Drawings:
_ODA_Drawings.OdDbRevolvedSurface_swigregister(OdDbRevolvedSurface)

def OdDbRevolvedSurface_cast(*args):
    return _ODA_Drawings.OdDbRevolvedSurface_cast(*args)

def OdDbRevolvedSurface_desc(*args):
    return _ODA_Drawings.OdDbRevolvedSurface_desc(*args)

def OdDbRevolvedSurface_createObject(*args):
    return _ODA_Drawings.OdDbRevolvedSurface_createObject(*args)

class OdDbRadialDimensionLarge(OdDbDimension):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_createObject(*args)

    def center(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_center(self, *args)

    def setCenter(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_setCenter(self, *args)

    def chordPoint(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_chordPoint(self, *args)

    def setChordPoint(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_setChordPoint(self, *args)

    def overrideCenter(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_overrideCenter(self, *args)

    def setOverrideCenter(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_setOverrideCenter(self, *args)

    def jogPoint(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_jogPoint(self, *args)

    def setJogPoint(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_setJogPoint(self, *args)

    def jogAngle(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_jogAngle(self, *args)

    def setJogAngle(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_setJogAngle(self, *args)

    def extArcOn(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_extArcOn(self, *args)

    def extArcStartAngle(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_extArcStartAngle(self, *args)

    def setExtArcStartAngle(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_setExtArcStartAngle(self, *args)

    def extArcEndAngle(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_extArcEndAngle(self, *args)

    def setExtArcEndAngle(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_setExtArcEndAngle(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbRadialDimensionLarge_subGetClassID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbRadialDimensionLarge

# Register OdDbRadialDimensionLarge in _ODA_Drawings:
_ODA_Drawings.OdDbRadialDimensionLarge_swigregister(OdDbRadialDimensionLarge)

def OdDbRadialDimensionLarge_cast(*args):
    return _ODA_Drawings.OdDbRadialDimensionLarge_cast(*args)

def OdDbRadialDimensionLarge_desc(*args):
    return _ODA_Drawings.OdDbRadialDimensionLarge_desc(*args)

def OdDbRadialDimensionLarge_createObject(*args):
    return _ODA_Drawings.OdDbRadialDimensionLarge_createObject(*args)

class OdDbProxyExt(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbProxyExt_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbProxyExt_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbProxyExt_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbProxyExt_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbProxyExt_createObject(*args)

    def proxyFlags(self, *args):
        return _ODA_Drawings.OdDbProxyExt_proxyFlags(self, *args)

    def originalClassName(self, *args):
        return _ODA_Drawings.OdDbProxyExt_originalClassName(self, *args)

    def originalDxfName(self, *args):
        return _ODA_Drawings.OdDbProxyExt_originalDxfName(self, *args)

    def applicationDescription(self, *args):
        return _ODA_Drawings.OdDbProxyExt_applicationDescription(self, *args)

    def getReferences(self, *args):
        return _ODA_Drawings.OdDbProxyExt_getReferences(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbProxyExt

# Register OdDbProxyExt in _ODA_Drawings:
_ODA_Drawings.OdDbProxyExt_swigregister(OdDbProxyExt)

def OdDbProxyExt_cast(*args):
    return _ODA_Drawings.OdDbProxyExt_cast(*args)

def OdDbProxyExt_desc(*args):
    return _ODA_Drawings.OdDbProxyExt_desc(*args)

def OdDbProxyExt_createObject(*args):
    return _ODA_Drawings.OdDbProxyExt_createObject(*args)

class DbPointCloudObjModule(ODA_Kernel.OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Drawings.delete_DbPointCloudObjModule

# Register DbPointCloudObjModule in _ODA_Drawings:
_ODA_Drawings.DbPointCloudObjModule_swigregister(DbPointCloudObjModule)

class OdDbPointCloudItem(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPointCloudItem_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPointCloudItem_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPointCloudItem_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPointCloudItem_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPointCloudItem_createObject(*args)

    def extents(self, *args):
        return _ODA_Drawings.OdDbPointCloudItem_extents(self, *args)

    def pointsCount(self, *args):
        return _ODA_Drawings.OdDbPointCloudItem_pointsCount(self, *args)

    def worldDrawPoints(self, *args):
        return _ODA_Drawings.OdDbPointCloudItem_worldDrawPoints(self, *args)

    def viewportDrawPoints(self, *args):
        return _ODA_Drawings.OdDbPointCloudItem_viewportDrawPoints(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointCloudItem

# Register OdDbPointCloudItem in _ODA_Drawings:
_ODA_Drawings.OdDbPointCloudItem_swigregister(OdDbPointCloudItem)

def OdDbPointCloudItem_cast(*args):
    return _ODA_Drawings.OdDbPointCloudItem_cast(*args)

def OdDbPointCloudItem_desc(*args):
    return _ODA_Drawings.OdDbPointCloudItem_desc(*args)

def OdDbPointCloudItem_createObject(*args):
    return _ODA_Drawings.OdDbPointCloudItem_createObject(*args)

class OdDbPointCloudExItem(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPointCloudExItem_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPointCloudExItem_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPointCloudExItem_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPointCloudExItem_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPointCloudExItem_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointCloudExItem

    def extents(self, *args):
        return _ODA_Drawings.OdDbPointCloudExItem_extents(self, *args)

    def pointsCount(self, *args):
        return _ODA_Drawings.OdDbPointCloudExItem_pointsCount(self, *args)

    def worldDrawPoints(self, *args):
        return _ODA_Drawings.OdDbPointCloudExItem_worldDrawPoints(self, *args)

    def viewportDrawPoints(self, *args):
        return _ODA_Drawings.OdDbPointCloudExItem_viewportDrawPoints(self, *args)

# Register OdDbPointCloudExItem in _ODA_Drawings:
_ODA_Drawings.OdDbPointCloudExItem_swigregister(OdDbPointCloudExItem)

def OdDbPointCloudExItem_cast(*args):
    return _ODA_Drawings.OdDbPointCloudExItem_cast(*args)

def OdDbPointCloudExItem_desc(*args):
    return _ODA_Drawings.OdDbPointCloudExItem_desc(*args)

def OdDbPointCloudExItem_createObject(*args):
    return _ODA_Drawings.OdDbPointCloudExItem_createObject(*args)

class OdDbPointCloudExScanItem(OdDbPointCloudExItem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPointCloudExScanItem_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPointCloudExScanItem_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPointCloudExScanItem_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPointCloudExScanItem_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPointCloudExScanItem_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointCloudExScanItem

    def hasRGB(self, *args):
        return _ODA_Drawings.OdDbPointCloudExScanItem_hasRGB(self, *args)

    def hasNormals(self, *args):
        return _ODA_Drawings.OdDbPointCloudExScanItem_hasNormals(self, *args)

    def hasIntensity(self, *args):
        return _ODA_Drawings.OdDbPointCloudExScanItem_hasIntensity(self, *args)

    def getScanId(self, *args):
        return _ODA_Drawings.OdDbPointCloudExScanItem_getScanId(self, *args)

# Register OdDbPointCloudExScanItem in _ODA_Drawings:
_ODA_Drawings.OdDbPointCloudExScanItem_swigregister(OdDbPointCloudExScanItem)

def OdDbPointCloudExScanItem_cast(*args):
    return _ODA_Drawings.OdDbPointCloudExScanItem_cast(*args)

def OdDbPointCloudExScanItem_desc(*args):
    return _ODA_Drawings.OdDbPointCloudExScanItem_desc(*args)

def OdDbPointCloudExScanItem_createObject(*args):
    return _ODA_Drawings.OdDbPointCloudExScanItem_createObject(*args)

class OdDbPointCloudExProjItem(OdDbPointCloudExItem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPointCloudExProjItem_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPointCloudExProjItem_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPointCloudExProjItem_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPointCloudExProjItem_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPointCloudExProjItem_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointCloudExProjItem

    def getAllRcsFilePaths(self, *args):
        return _ODA_Drawings.OdDbPointCloudExProjItem_getAllRcsFilePaths(self, *args)

    def getAllRcsRelativeFilePaths(self, *args):
        return _ODA_Drawings.OdDbPointCloudExProjItem_getAllRcsRelativeFilePaths(self, *args)

    def getTotalAmountOfScanItems(self, *args):
        return _ODA_Drawings.OdDbPointCloudExProjItem_getTotalAmountOfScanItems(self, *args)

    def getTotalRegionsCount(self, *args):
        return _ODA_Drawings.OdDbPointCloudExProjItem_getTotalRegionsCount(self, *args)

    def getTotalScansCount(self, *args):
        return _ODA_Drawings.OdDbPointCloudExProjItem_getTotalScansCount(self, *args)

    def getCoordinateSystemName(self, *args):
        return _ODA_Drawings.OdDbPointCloudExProjItem_getCoordinateSystemName(self, *args)

    def hasRGB(self, *args):
        return _ODA_Drawings.OdDbPointCloudExProjItem_hasRGB(self, *args)

    def hasNormals(self, *args):
        return _ODA_Drawings.OdDbPointCloudExProjItem_hasNormals(self, *args)

    def hasIntensity(self, *args):
        return _ODA_Drawings.OdDbPointCloudExProjItem_hasIntensity(self, *args)

    def getRcsFilePath(self, *args):
        return _ODA_Drawings.OdDbPointCloudExProjItem_getRcsFilePath(self, *args)

    def getRcsRelativeFilePath(self, *args):
        return _ODA_Drawings.OdDbPointCloudExProjItem_getRcsRelativeFilePath(self, *args)

# Register OdDbPointCloudExProjItem in _ODA_Drawings:
_ODA_Drawings.OdDbPointCloudExProjItem_swigregister(OdDbPointCloudExProjItem)

def OdDbPointCloudExProjItem_cast(*args):
    return _ODA_Drawings.OdDbPointCloudExProjItem_cast(*args)

def OdDbPointCloudExProjItem_desc(*args):
    return _ODA_Drawings.OdDbPointCloudExProjItem_desc(*args)

def OdDbPointCloudExProjItem_createObject(*args):
    return _ODA_Drawings.OdDbPointCloudExProjItem_createObject(*args)

class OdDbPointCloudHostPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPointCloudHostPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPointCloudHostPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPointCloudHostPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPointCloudHostPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPointCloudHostPE_createObject(*args)

    def load(self, *args):
        return _ODA_Drawings.OdDbPointCloudHostPE_load(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointCloudHostPE

# Register OdDbPointCloudHostPE in _ODA_Drawings:
_ODA_Drawings.OdDbPointCloudHostPE_swigregister(OdDbPointCloudHostPE)

def OdDbPointCloudHostPE_cast(*args):
    return _ODA_Drawings.OdDbPointCloudHostPE_cast(*args)

def OdDbPointCloudHostPE_desc(*args):
    return _ODA_Drawings.OdDbPointCloudHostPE_desc(*args)

def OdDbPointCloudHostPE_createObject(*args):
    return _ODA_Drawings.OdDbPointCloudHostPE_createObject(*args)

class OdDbPointCloudExHostPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPointCloudExHostPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPointCloudExHostPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPointCloudExHostPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPointCloudExHostPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPointCloudExHostPE_createObject(*args)

    def loadRcs(self, *args):
        return _ODA_Drawings.OdDbPointCloudExHostPE_loadRcs(self, *args)

    def loadRcp(self, *args):
        return _ODA_Drawings.OdDbPointCloudExHostPE_loadRcp(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointCloudExHostPE

# Register OdDbPointCloudExHostPE in _ODA_Drawings:
_ODA_Drawings.OdDbPointCloudExHostPE_swigregister(OdDbPointCloudExHostPE)

def OdDbPointCloudExHostPE_cast(*args):
    return _ODA_Drawings.OdDbPointCloudExHostPE_cast(*args)

def OdDbPointCloudExHostPE_desc(*args):
    return _ODA_Drawings.OdDbPointCloudExHostPE_desc(*args)

def OdDbPointCloudExHostPE_createObject(*args):
    return _ODA_Drawings.OdDbPointCloudExHostPE_createObject(*args)

class OdDbPointCloudEx(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPointCloudEx_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPointCloudEx_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPointCloudEx_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointCloudEx

    def pointCloudDefExId(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_pointCloudDefExId(self, *args)

    def setPointCloudDefExId(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setPointCloudDefExId(self, *args)

    def reactorId(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_reactorId(self, *args)

    def setReactorId(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setReactorId(self, *args)

    def locked(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_locked(self, *args)

    def setLocked(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setLocked(self, *args)

    def scale(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_scale(self, *args)

    def setScale(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setScale(self, *args)

    def rotation(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_rotation(self, *args)

    def setRotation(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setRotation(self, *args)

    def location(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_location(self, *args)

    def setLocation(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setLocation(self, *args)

    def getNativeCloudExtent(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_getNativeCloudExtent(self, *args)

    def getActiveFileName(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_getActiveFileName(self, *args)

    def setActiveFileName(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setActiveFileName(self, *args)

    def getPointCloudName(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_getPointCloudName(self, *args)

    def setPointCloudName(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setPointCloudName(self, *args)

    def getConstPointCloudCropping(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_getConstPointCloudCropping(self, *args)

    def addCroppingBoundary(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_addCroppingBoundary(self, *args)

    def clearCropping(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_clearCropping(self, *args)

    def removeLastCropping(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_removeLastCropping(self, *args)

    def getCroppingCount(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_getCroppingCount(self, *args)

    def getCroppingInvert(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_getCroppingInvert(self, *args)

    def setCroppingInvert(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setCroppingInvert(self, *args)

    def setInCreatingCroppingMode(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setInCreatingCroppingMode(self, *args)

    def showCropping(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_showCropping(self, *args)

    def setShowCropping(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setShowCropping(self, *args)
    kTrueColor = _ODA_Drawings.OdDbPointCloudEx_kTrueColor
    kSingleColor = _ODA_Drawings.OdDbPointCloudEx_kSingleColor
    kNormalRamp = _ODA_Drawings.OdDbPointCloudEx_kNormalRamp
    kHeightRamp = _ODA_Drawings.OdDbPointCloudEx_kHeightRamp
    kIntensityRamp = _ODA_Drawings.OdDbPointCloudEx_kIntensityRamp
    kClassificationRamp = _ODA_Drawings.OdDbPointCloudEx_kClassificationRamp

    def stylizationType(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_stylizationType(self, *args)

    def setStylizationType(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setStylizationType(self, *args)

    def getCurrentColorScheme(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_getCurrentColorScheme(self, *args)

    def setCurrentColorScheme(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setCurrentColorScheme(self, *args)

    def getColorSchemeForStylization(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_getColorSchemeForStylization(self, *args)

    def setColorSchemeForStylization(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setColorSchemeForStylization(self, *args)
    kUseMinMaxColors = _ODA_Drawings.OdDbPointCloudEx_kUseMinMaxColors
    kUseRGBScanColors = _ODA_Drawings.OdDbPointCloudEx_kUseRGBScanColors
    kHidePoints = _ODA_Drawings.OdDbPointCloudEx_kHidePoints

    def showIntensityAsGradient(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_showIntensityAsGradient(self, *args)

    def setShowIntensityAsGradient(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setShowIntensityAsGradient(self, *args)

    def minIntensity(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_minIntensity(self, *args)

    def maxIntensity(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_maxIntensity(self, *args)

    def setMinMaxIntensity(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setMinMaxIntensity(self, *args)

    def intensityOutOfRangeBehavior(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_intensityOutOfRangeBehavior(self, *args)

    def setIntensityOutOfRangeBehavior(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setIntensityOutOfRangeBehavior(self, *args)

    def showElevationAsGradient(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_showElevationAsGradient(self, *args)

    def setShowElevationAsGradient(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setShowElevationAsGradient(self, *args)

    def minElevation(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_minElevation(self, *args)

    def maxElevation(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_maxElevation(self, *args)

    def setMinMaxElevation(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setMinMaxElevation(self, *args)

    def elevationApplyToFixedRange(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_elevationApplyToFixedRange(self, *args)

    def setElevationApplyToFixedRange(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setElevationApplyToFixedRange(self, *args)

    def elevationOutOfRangeBehavior(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_elevationOutOfRangeBehavior(self, *args)

    def setElevationOutOfRangeBehavior(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_setElevationOutOfRangeBehavior(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_subTransformBy(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_subViewportDraw(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_subGetGeomExtents(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_dxfOutFields(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbPointCloudEx_subClose(self, *args)

# Register OdDbPointCloudEx in _ODA_Drawings:
_ODA_Drawings.OdDbPointCloudEx_swigregister(OdDbPointCloudEx)

def OdDbPointCloudEx_cast(*args):
    return _ODA_Drawings.OdDbPointCloudEx_cast(*args)

def OdDbPointCloudEx_desc(*args):
    return _ODA_Drawings.OdDbPointCloudEx_desc(*args)

def OdDbPointCloudEx_createObject(*args):
    return _ODA_Drawings.OdDbPointCloudEx_createObject(*args)


def oddbCreatePointCloudExEntity(*args):
    return _ODA_Drawings.oddbCreatePointCloudExEntity(*args)
class OdDbPointCloudDefEx(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPointCloudDefEx_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPointCloudDefEx_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPointCloudDefEx_createObject(*args)
    kNone = _ODA_Drawings.OdDbPointCloudDefEx_kNone
    kSome = _ODA_Drawings.OdDbPointCloudDefEx_kSome
    kAll = _ODA_Drawings.OdDbPointCloudDefEx_kAll
    kColor = _ODA_Drawings.OdDbPointCloudDefEx_kColor
    kIntensity = _ODA_Drawings.OdDbPointCloudDefEx_kIntensity
    kClassification = _ODA_Drawings.OdDbPointCloudDefEx_kClassification
    kNormal = _ODA_Drawings.OdDbPointCloudDefEx_kNormal
    kSegmentation = _ODA_Drawings.OdDbPointCloudDefEx_kSegmentation
    kGeoGraphic = _ODA_Drawings.OdDbPointCloudDefEx_kGeoGraphic

    def sourceFileName(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_sourceFileName(self, *args)

    def setSourceFileName(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_setSourceFileName(self, *args)

    def activeFileName(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_activeFileName(self, *args)

    def setActiveFileName(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_setActiveFileName(self, *args)

    def fileType(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_fileType(self, *args)

    @staticmethod
    def createPointCloudExDictionary(*args):
        return _ODA_Drawings.OdDbPointCloudDefEx_createPointCloudExDictionary(*args)

    @staticmethod
    def pointCloudExDictionary(*args):
        return _ODA_Drawings.OdDbPointCloudDefEx_pointCloudExDictionary(*args)

    @staticmethod
    def getPointCloudExDictionary(*args):
        return _ODA_Drawings.OdDbPointCloudDefEx_getPointCloudExDictionary(*args)

    def isLoaded(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_isLoaded(self, *args)

    def load(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_load(self, *args)

    def unload(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_unload(self, *args)

    def entityCount(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_entityCount(self, *args)

    def totalPointsCount(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_totalPointsCount(self, *args)

    def defaultHeight(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_defaultHeight(self, *args)

    def defaultLength(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_defaultLength(self, *args)

    def defaultWidth(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_defaultWidth(self, *args)

    def extents(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_extents(self, *args)

    def totalRegionsCount(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_totalRegionsCount(self, *args)

    def totalScansCount(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_totalScansCount(self, *args)

    def coordinateSystemName(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_coordinateSystemName(self, *args)

    def getRcsFilePath(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_getRcsFilePath(self, *args)

    def getAllRcsFilePaths(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_getAllRcsFilePaths(self, *args)

    def hasProperty(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_hasProperty(self, *args)

    def createThumbnailBitmap(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_createThumbnailBitmap(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefEx_dxfOutFields(self, *args)

    @staticmethod
    def classVersion(*args):
        return _ODA_Drawings.OdDbPointCloudDefEx_classVersion(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointCloudDefEx

# Register OdDbPointCloudDefEx in _ODA_Drawings:
_ODA_Drawings.OdDbPointCloudDefEx_swigregister(OdDbPointCloudDefEx)

def OdDbPointCloudDefEx_cast(*args):
    return _ODA_Drawings.OdDbPointCloudDefEx_cast(*args)

def OdDbPointCloudDefEx_desc(*args):
    return _ODA_Drawings.OdDbPointCloudDefEx_desc(*args)

def OdDbPointCloudDefEx_createObject(*args):
    return _ODA_Drawings.OdDbPointCloudDefEx_createObject(*args)

def OdDbPointCloudDefEx_createPointCloudExDictionary(*args):
    return _ODA_Drawings.OdDbPointCloudDefEx_createPointCloudExDictionary(*args)

def OdDbPointCloudDefEx_pointCloudExDictionary(*args):
    return _ODA_Drawings.OdDbPointCloudDefEx_pointCloudExDictionary(*args)

def OdDbPointCloudDefEx_getPointCloudExDictionary(*args):
    return _ODA_Drawings.OdDbPointCloudDefEx_getPointCloudExDictionary(*args)

def OdDbPointCloudDefEx_classVersion(*args):
    return _ODA_Drawings.OdDbPointCloudDefEx_classVersion(*args)

class OdDbPointCloudDefReactorEx(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPointCloudDefReactorEx_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPointCloudDefReactorEx_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefReactorEx_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefReactorEx_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPointCloudDefReactorEx_createObject(*args)

    @staticmethod
    def classVersion(*args):
        return _ODA_Drawings.OdDbPointCloudDefReactorEx_classVersion(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefReactorEx_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefReactorEx_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefReactorEx_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefReactorEx_dxfOutFields(self, *args)

    def erased(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefReactorEx_erased(self, *args)

    def modified(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefReactorEx_modified(self, *args)

    @staticmethod
    def isEnabled(*args):
        return _ODA_Drawings.OdDbPointCloudDefReactorEx_isEnabled(*args)

    @staticmethod
    def setEnable(*args):
        return _ODA_Drawings.OdDbPointCloudDefReactorEx_setEnable(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointCloudDefReactorEx

# Register OdDbPointCloudDefReactorEx in _ODA_Drawings:
_ODA_Drawings.OdDbPointCloudDefReactorEx_swigregister(OdDbPointCloudDefReactorEx)

def OdDbPointCloudDefReactorEx_cast(*args):
    return _ODA_Drawings.OdDbPointCloudDefReactorEx_cast(*args)

def OdDbPointCloudDefReactorEx_desc(*args):
    return _ODA_Drawings.OdDbPointCloudDefReactorEx_desc(*args)

def OdDbPointCloudDefReactorEx_createObject(*args):
    return _ODA_Drawings.OdDbPointCloudDefReactorEx_createObject(*args)

def OdDbPointCloudDefReactorEx_classVersion(*args):
    return _ODA_Drawings.OdDbPointCloudDefReactorEx_classVersion(*args)

def OdDbPointCloudDefReactorEx_isEnabled(*args):
    return _ODA_Drawings.OdDbPointCloudDefReactorEx_isEnabled(*args)

def OdDbPointCloudDefReactorEx_setEnable(*args):
    return _ODA_Drawings.OdDbPointCloudDefReactorEx_setEnable(*args)

class OdDbPointCloudDef(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPointCloudDef_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPointCloudDef_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPointCloudDef_createObject(*args)

    def sourceFileName(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_sourceFileName(self, *args)

    def setSourceFileName(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_setSourceFileName(self, *args)

    def fileType(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_fileType(self, *args)

    def activeFileName(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_activeFileName(self, *args)

    def setActiveFileName(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_setActiveFileName(self, *args)

    def isLoaded(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_isLoaded(self, *args)

    def load(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_load(self, *args)

    def unload(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_unload(self, *args)

    def entityCount(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_entityCount(self, *args)

    def totalPointsCount(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_totalPointsCount(self, *args)

    def defaultHeight(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_defaultHeight(self, *args)

    def defaultLength(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_defaultLength(self, *args)

    def defaultWidth(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_defaultWidth(self, *args)

    def getNativeCloudExtent(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_getNativeCloudExtent(self, *args)

    def setExtents(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_setExtents(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_dxfOutFields(self, *args)

    @staticmethod
    def classVersion(*args):
        return _ODA_Drawings.OdDbPointCloudDef_classVersion(*args)

    @staticmethod
    def createPointCloudDictionary(*args):
        return _ODA_Drawings.OdDbPointCloudDef_createPointCloudDictionary(*args)

    @staticmethod
    def pointCloudDictionary(*args):
        return _ODA_Drawings.OdDbPointCloudDef_pointCloudDictionary(*args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_subErase(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_subClose(self, *args)

    def subHandOverTo(self, *args):
        return _ODA_Drawings.OdDbPointCloudDef_subHandOverTo(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointCloudDef

# Register OdDbPointCloudDef in _ODA_Drawings:
_ODA_Drawings.OdDbPointCloudDef_swigregister(OdDbPointCloudDef)

def OdDbPointCloudDef_cast(*args):
    return _ODA_Drawings.OdDbPointCloudDef_cast(*args)

def OdDbPointCloudDef_desc(*args):
    return _ODA_Drawings.OdDbPointCloudDef_desc(*args)

def OdDbPointCloudDef_createObject(*args):
    return _ODA_Drawings.OdDbPointCloudDef_createObject(*args)

def OdDbPointCloudDef_classVersion(*args):
    return _ODA_Drawings.OdDbPointCloudDef_classVersion(*args)

def OdDbPointCloudDef_createPointCloudDictionary(*args):
    return _ODA_Drawings.OdDbPointCloudDef_createPointCloudDictionary(*args)

def OdDbPointCloudDef_pointCloudDictionary(*args):
    return _ODA_Drawings.OdDbPointCloudDef_pointCloudDictionary(*args)

class OdDbPointCloudDefReactor(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPointCloudDefReactor_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPointCloudDefReactor_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefReactor_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefReactor_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPointCloudDefReactor_createObject(*args)

    @staticmethod
    def classVersion(*args):
        return _ODA_Drawings.OdDbPointCloudDefReactor_classVersion(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefReactor_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefReactor_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefReactor_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefReactor_dxfOutFields(self, *args)

    def erased(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefReactor_erased(self, *args)

    def modified(self, *args):
        return _ODA_Drawings.OdDbPointCloudDefReactor_modified(self, *args)

    @staticmethod
    def isEnabled(*args):
        return _ODA_Drawings.OdDbPointCloudDefReactor_isEnabled(*args)

    @staticmethod
    def setEnable(*args):
        return _ODA_Drawings.OdDbPointCloudDefReactor_setEnable(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointCloudDefReactor

# Register OdDbPointCloudDefReactor in _ODA_Drawings:
_ODA_Drawings.OdDbPointCloudDefReactor_swigregister(OdDbPointCloudDefReactor)

def OdDbPointCloudDefReactor_cast(*args):
    return _ODA_Drawings.OdDbPointCloudDefReactor_cast(*args)

def OdDbPointCloudDefReactor_desc(*args):
    return _ODA_Drawings.OdDbPointCloudDefReactor_desc(*args)

def OdDbPointCloudDefReactor_createObject(*args):
    return _ODA_Drawings.OdDbPointCloudDefReactor_createObject(*args)

def OdDbPointCloudDefReactor_classVersion(*args):
    return _ODA_Drawings.OdDbPointCloudDefReactor_classVersion(*args)

def OdDbPointCloudDefReactor_isEnabled(*args):
    return _ODA_Drawings.OdDbPointCloudDefReactor_isEnabled(*args)

def OdDbPointCloudDefReactor_setEnable(*args):
    return _ODA_Drawings.OdDbPointCloudDefReactor_setEnable(*args)

class OdPoinCloudColorSchemeCollectionReactor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def PoinCloudColorSchemeCollectionChanged(self, *args):
        return _ODA_Drawings.OdPoinCloudColorSchemeCollectionReactor_PoinCloudColorSchemeCollectionChanged(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdPoinCloudColorSchemeCollectionReactor

# Register OdPoinCloudColorSchemeCollectionReactor in _ODA_Drawings:
_ODA_Drawings.OdPoinCloudColorSchemeCollectionReactor_swigregister(OdPoinCloudColorSchemeCollectionReactor)

class OdDbPointCloudColorRamp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbPointCloudColorRamp_swiginit(self, _ODA_Drawings.new_OdDbPointCloudColorRamp(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointCloudColorRamp

    def numColors(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorRamp_numColors(self, *args)

    def setNumColors(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorRamp_setNumColors(self, *args)

    def color(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorRamp_color(self, *args)

    def setColor(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorRamp_setColor(self, *args)

    def visibility(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorRamp_visibility(self, *args)

    def setVisibility(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorRamp_setVisibility(self, *args)

    def setFrom(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorRamp_setFrom(self, *args)

    def name(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorRamp_name(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorRamp_setName(self, *args)

# Register OdDbPointCloudColorRamp in _ODA_Drawings:
_ODA_Drawings.OdDbPointCloudColorRamp_swigregister(OdDbPointCloudColorRamp)

class OdDbPointCloudClassificationColorRamp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbPointCloudClassificationColorRamp_swiginit(self, _ODA_Drawings.new_OdDbPointCloudClassificationColorRamp(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointCloudClassificationColorRamp

    def numColors(self, *args):
        return _ODA_Drawings.OdDbPointCloudClassificationColorRamp_numColors(self, *args)

    def setNumColors(self, *args):
        return _ODA_Drawings.OdDbPointCloudClassificationColorRamp_setNumColors(self, *args)

    def color(self, *args):
        return _ODA_Drawings.OdDbPointCloudClassificationColorRamp_color(self, *args)

    def setColor(self, *args):
        return _ODA_Drawings.OdDbPointCloudClassificationColorRamp_setColor(self, *args)

    def visibility(self, *args):
        return _ODA_Drawings.OdDbPointCloudClassificationColorRamp_visibility(self, *args)

    def setVisibility(self, *args):
        return _ODA_Drawings.OdDbPointCloudClassificationColorRamp_setVisibility(self, *args)

    def setFrom(self, *args):
        return _ODA_Drawings.OdDbPointCloudClassificationColorRamp_setFrom(self, *args)

    def name(self, *args):
        return _ODA_Drawings.OdDbPointCloudClassificationColorRamp_name(self, *args)

    def setName(self, *args):
        return _ODA_Drawings.OdDbPointCloudClassificationColorRamp_setName(self, *args)

# Register OdDbPointCloudClassificationColorRamp in _ODA_Drawings:
_ODA_Drawings.OdDbPointCloudClassificationColorRamp_swigregister(OdDbPointCloudClassificationColorRamp)

class OdDbPointCloudColorMap(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPointCloudColorMap_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPointCloudColorMap_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPointCloudColorMap_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointCloudColorMap

    @staticmethod
    def getColorMap(*args):
        return _ODA_Drawings.OdDbPointCloudColorMap_getColorMap(*args)

    def addColorSchemeCollectionReactor(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_addColorSchemeCollectionReactor(self, *args)

    def removeColorSchemeCollectionReactor(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_removeColorSchemeCollectionReactor(self, *args)

    def notifyColorSchemeCollectionReactor(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_notifyColorSchemeCollectionReactor(self, *args)

    def defaultIntensityColorScheme(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_defaultIntensityColorScheme(self, *args)

    def setDefaultIntensityColorScheme(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_setDefaultIntensityColorScheme(self, *args)

    def defaultElevationColorScheme(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_defaultElevationColorScheme(self, *args)

    def setDefaultElevationColorScheme(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_setDefaultElevationColorScheme(self, *args)

    def defaultClassificationColorScheme(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_defaultClassificationColorScheme(self, *args)

    def setDefaultClassificationColorScheme(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_setDefaultClassificationColorScheme(self, *args)

    def colorSchemeGUIDs(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_colorSchemeGUIDs(self, *args)

    def colorScheme(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_colorScheme(self, *args)

    def hasColorScheme(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_hasColorScheme(self, *args)

    def setColorScheme(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_setColorScheme(self, *args)

    def deleteColorScheme(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_deleteColorScheme(self, *args)

    def classificationSchemeGUIDs(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_classificationSchemeGUIDs(self, *args)

    def classificationScheme(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_classificationScheme(self, *args)

    def hasClassificationScheme(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_hasClassificationScheme(self, *args)

    def setClassificationScheme(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_setClassificationScheme(self, *args)

    def deleteClassificationScheme(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_deleteClassificationScheme(self, *args)

    def getColorSchemeInUse(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_getColorSchemeInUse(self, *args)

    def getClassificationColorSchemeInUse(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_getClassificationColorSchemeInUse(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloudColorMap_dxfOutFields(self, *args)

# Register OdDbPointCloudColorMap in _ODA_Drawings:
_ODA_Drawings.OdDbPointCloudColorMap_swigregister(OdDbPointCloudColorMap)

def OdDbPointCloudColorMap_cast(*args):
    return _ODA_Drawings.OdDbPointCloudColorMap_cast(*args)

def OdDbPointCloudColorMap_desc(*args):
    return _ODA_Drawings.OdDbPointCloudColorMap_desc(*args)

def OdDbPointCloudColorMap_createObject(*args):
    return _ODA_Drawings.OdDbPointCloudColorMap_createObject(*args)

def OdDbPointCloudColorMap_getColorMap(*args):
    return _ODA_Drawings.OdDbPointCloudColorMap_getColorMap(*args)

class OdDbPointCloud(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPointCloud_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPointCloud_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPointCloud_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPointCloud_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPointCloud_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointCloud

    def transformation(self, *args):
        return _ODA_Drawings.OdDbPointCloud_transformation(self, *args)

    def setTransformation(self, *args):
        return _ODA_Drawings.OdDbPointCloud_setTransformation(self, *args)

    def getSavedFileName(self, *args):
        return _ODA_Drawings.OdDbPointCloud_getSavedFileName(self, *args)

    def setSavedFileName(self, *args):
        return _ODA_Drawings.OdDbPointCloud_setSavedFileName(self, *args)

    def getIndexFile(self, *args):
        return _ODA_Drawings.OdDbPointCloud_getIndexFile(self, *args)

    def setIndexFile(self, *args):
        return _ODA_Drawings.OdDbPointCloud_setIndexFile(self, *args)

    def getSourceFileCount(self, *args):
        return _ODA_Drawings.OdDbPointCloud_getSourceFileCount(self, *args)

    def getSourceFile(self, *args):
        return _ODA_Drawings.OdDbPointCloud_getSourceFile(self, *args)

    def clearSourceFiles(self, *args):
        return _ODA_Drawings.OdDbPointCloud_clearSourceFiles(self, *args)

    def addSourceFile(self, *args):
        return _ODA_Drawings.OdDbPointCloud_addSourceFile(self, *args)

    def getCoordSys(self, *args):
        return _ODA_Drawings.OdDbPointCloud_getCoordSys(self, *args)

    def setCoordSys(self, *args):
        return _ODA_Drawings.OdDbPointCloud_setCoordSys(self, *args)

    def locked(self, *args):
        return _ODA_Drawings.OdDbPointCloud_locked(self, *args)

    def setLocked(self, *args):
        return _ODA_Drawings.OdDbPointCloud_setLocked(self, *args)

    def useEntityColor(self, *args):
        return _ODA_Drawings.OdDbPointCloud_useEntityColor(self, *args)

    def setUseEntityColor(self, *args):
        return _ODA_Drawings.OdDbPointCloud_setUseEntityColor(self, *args)

    def pointCloudDefId(self, *args):
        return _ODA_Drawings.OdDbPointCloud_pointCloudDefId(self, *args)

    def setPointCloudDefId(self, *args):
        return _ODA_Drawings.OdDbPointCloud_setPointCloudDefId(self, *args)

    def reactorId(self, *args):
        return _ODA_Drawings.OdDbPointCloud_reactorId(self, *args)

    def setReactorId(self, *args):
        return _ODA_Drawings.OdDbPointCloud_setReactorId(self, *args)

    def getPointCount(self, *args):
        return _ODA_Drawings.OdDbPointCloud_getPointCount(self, *args)

    def setPointCount(self, *args):
        return _ODA_Drawings.OdDbPointCloud_setPointCount(self, *args)

    def extents(self, *args):
        return _ODA_Drawings.OdDbPointCloud_extents(self, *args)

    def setExtents(self, *args):
        return _ODA_Drawings.OdDbPointCloud_setExtents(self, *args)

    def showIntensity(self, *args):
        return _ODA_Drawings.OdDbPointCloud_showIntensity(self, *args)

    def setShowIntensity(self, *args):
        return _ODA_Drawings.OdDbPointCloud_setShowIntensity(self, *args)

    def getIntensityScheme(self, *args):
        return _ODA_Drawings.OdDbPointCloud_getIntensityScheme(self, *args)

    def setIntensityScheme(self, *args):
        return _ODA_Drawings.OdDbPointCloud_setIntensityScheme(self, *args)

    def intensityStyle(self, *args):
        return _ODA_Drawings.OdDbPointCloud_intensityStyle(self, *args)

    def pIntensityStyle(self, *args):
        return _ODA_Drawings.OdDbPointCloud_pIntensityStyle(self, *args)

    def showClipping(self, *args):
        return _ODA_Drawings.OdDbPointCloud_showClipping(self, *args)

    def setShowClipping(self, *args):
        return _ODA_Drawings.OdDbPointCloud_setShowClipping(self, *args)

    def clippingCount(self, *args):
        return _ODA_Drawings.OdDbPointCloud_clippingCount(self, *args)

    def addClippingBoundary(self, *args):
        return _ODA_Drawings.OdDbPointCloud_addClippingBoundary(self, *args)

    def removeClippingBoundary(self, *args):
        return _ODA_Drawings.OdDbPointCloud_removeClippingBoundary(self, *args)

    def resetClippingBoundary(self, *args):
        return _ODA_Drawings.OdDbPointCloud_resetClippingBoundary(self, *args)

    def getConstPointCloudClipping(self, *args):
        return _ODA_Drawings.OdDbPointCloud_getConstPointCloudClipping(self, *args)

    def getPointCloudClipping(self, *args):
        return _ODA_Drawings.OdDbPointCloud_getPointCloudClipping(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloud_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloud_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPointCloud_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPointCloud_dxfOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbPointCloud_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdDbPointCloud_subViewportDraw(self, *args)

    def subGetGeomExtents(self, *args):
        return _ODA_Drawings.OdDbPointCloud_subGetGeomExtents(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbPointCloud_subTransformBy(self, *args)

# Register OdDbPointCloud in _ODA_Drawings:
_ODA_Drawings.OdDbPointCloud_swigregister(OdDbPointCloud)

def OdDbPointCloud_cast(*args):
    return _ODA_Drawings.OdDbPointCloud_cast(*args)

def OdDbPointCloud_desc(*args):
    return _ODA_Drawings.OdDbPointCloud_desc(*args)

def OdDbPointCloud_createObject(*args):
    return _ODA_Drawings.OdDbPointCloud_createObject(*args)


def oddbCreatePointCloudEntity(*args):
    return _ODA_Drawings.oddbCreatePointCloudEntity(*args)
class OdDbPlaneSurface(OdDbSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPlaneSurface_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPlaneSurface_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPlaneSurface_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPlaneSurface_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPlaneSurface_createObject(*args)

    def createFromRegion(self, *args):
        return _ODA_Drawings.OdDbPlaneSurface_createFromRegion(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPlaneSurface_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPlaneSurface_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPlaneSurface_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPlaneSurface_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbPlaneSurface_subGetClassID(self, *args)

    def isDependent(self, *args):
        return _ODA_Drawings.OdDbPlaneSurface_isDependent(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbPlaneSurface_subExplode(self, *args)

    def getPlane(self, *args):
        return _ODA_Drawings.OdDbPlaneSurface_getPlane(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPlaneSurface

# Register OdDbPlaneSurface in _ODA_Drawings:
_ODA_Drawings.OdDbPlaneSurface_swigregister(OdDbPlaneSurface)

def OdDbPlaneSurface_cast(*args):
    return _ODA_Drawings.OdDbPlaneSurface_cast(*args)

def OdDbPlaneSurface_desc(*args):
    return _ODA_Drawings.OdDbPlaneSurface_desc(*args)

def OdDbPlaneSurface_createObject(*args):
    return _ODA_Drawings.OdDbPlaneSurface_createObject(*args)

class OdDbPersSubentManager(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPersSubentManager_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPersSubentManager_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPersSubentManager_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPersSubentManager_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPersSubentManager_createObject(*args)

    def __init__(self, *args):
        _ODA_Drawings.OdDbPersSubentManager_swiginit(self, _ODA_Drawings.new_OdDbPersSubentManager(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPersSubentManager

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPersSubentManager_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPersSubentManager_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPersSubentManager_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPersSubentManager_dxfOutFields(self, *args)

    def parseSubentData(self, *args):
        return _ODA_Drawings.OdDbPersSubentManager_parseSubentData(self, *args)

    def lastStepId(self, *args):
        return _ODA_Drawings.OdDbPersSubentManager_lastStepId(self, *args)

    @staticmethod
    def getInstanceFromDatabase(*args):
        return _ODA_Drawings.OdDbPersSubentManager_getInstanceFromDatabase(*args)

    @staticmethod
    def createIfItDoesNotExist(*args):
        return _ODA_Drawings.OdDbPersSubentManager_createIfItDoesNotExist(*args)

# Register OdDbPersSubentManager in _ODA_Drawings:
_ODA_Drawings.OdDbPersSubentManager_swigregister(OdDbPersSubentManager)

def OdDbPersSubentManager_cast(*args):
    return _ODA_Drawings.OdDbPersSubentManager_cast(*args)

def OdDbPersSubentManager_desc(*args):
    return _ODA_Drawings.OdDbPersSubentManager_desc(*args)

def OdDbPersSubentManager_createObject(*args):
    return _ODA_Drawings.OdDbPersSubentManager_createObject(*args)

def OdDbPersSubentManager_getInstanceFromDatabase(*args):
    return _ODA_Drawings.OdDbPersSubentManager_getInstanceFromDatabase(*args)

def OdDbPersSubentManager_createIfItDoesNotExist(*args):
    return _ODA_Drawings.OdDbPersSubentManager_createIfItDoesNotExist(*args)

kUnload = _ODA_Drawings.kUnload
kPage = _ODA_Drawings.kPage
kDoNotEnqueuePagingOnClose = _ODA_Drawings.kDoNotEnqueuePagingOnClose
class OdDbPageController(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def pagingType(self, *args):
        return _ODA_Drawings.OdDbPageController_pagingType(self, *args)

    def read(self, *args):
        return _ODA_Drawings.OdDbPageController_read(self, *args)

    def write(self, *args):
        return _ODA_Drawings.OdDbPageController_write(self, *args)

    def setDatabase(self, *args):
        return _ODA_Drawings.OdDbPageController_setDatabase(self, *args)

    def database(self, *args):
        return _ODA_Drawings.OdDbPageController_database(self, *args)

    def subPage(self, *args):
        return _ODA_Drawings.OdDbPageController_subPage(self, *args)

    @staticmethod
    def __new(*args):
        return _ODA_Drawings.OdDbPageController___new(*args)

    def __init__(self):
        this = _ODA_Drawings.OdDbPageController___new(self)
        try:
          self.this.append(this)
        except:
          self.this = this

    __swig_destroy__ = _ODA_Drawings.delete_OdDbPageController
    def __disown__(self):
        self.this.disown()
        _ODA_Drawings.disown_OdDbPageController(self)
        return weakref.proxy(self)

# Register OdDbPageController in _ODA_Drawings:
_ODA_Drawings.OdDbPageController_swigregister(OdDbPageController)

def OdDbPageController___new(*args):
    return _ODA_Drawings.OdDbPageController___new(*args)


def odDbPageObjects(*args):
    return _ODA_Drawings.odDbPageObjects(*args)
class OdDbObjectOverrule(ODA_Kernel.OdRxOverrule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectOverrule_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectOverrule_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectOverrule_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectOverrule_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectOverrule_createObject(*args)

    def open(self, *args):
        return _ODA_Drawings.OdDbObjectOverrule_open(self, *args)

    def close(self, *args):
        return _ODA_Drawings.OdDbObjectOverrule_close(self, *args)

    def erase(self, *args):
        return _ODA_Drawings.OdDbObjectOverrule_erase(self, *args)

    def deepClone(self, *args):
        return _ODA_Drawings.OdDbObjectOverrule_deepClone(self, *args)

    def wblockClone(self, *args):
        return _ODA_Drawings.OdDbObjectOverrule_wblockClone(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectOverrule

# Register OdDbObjectOverrule in _ODA_Drawings:
_ODA_Drawings.OdDbObjectOverrule_swigregister(OdDbObjectOverrule)

def OdDbObjectOverrule_cast(*args):
    return _ODA_Drawings.OdDbObjectOverrule_cast(*args)

def OdDbObjectOverrule_desc(*args):
    return _ODA_Drawings.OdDbObjectOverrule_desc(*args)

def OdDbObjectOverrule_createObject(*args):
    return _ODA_Drawings.OdDbObjectOverrule_createObject(*args)

class OdDbPropertiesOverrule(ODA_Kernel.OdRxOverrule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPropertiesOverrule_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPropertiesOverrule_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPropertiesOverrule_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPropertiesOverrule_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPropertiesOverrule_createObject(*args)

    def getClassID(self, *args):
        return _ODA_Drawings.OdDbPropertiesOverrule_getClassID(self, *args)

    def list(self, *args):
        return _ODA_Drawings.OdDbPropertiesOverrule_list(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPropertiesOverrule

# Register OdDbPropertiesOverrule in _ODA_Drawings:
_ODA_Drawings.OdDbPropertiesOverrule_swigregister(OdDbPropertiesOverrule)

def OdDbPropertiesOverrule_cast(*args):
    return _ODA_Drawings.OdDbPropertiesOverrule_cast(*args)

def OdDbPropertiesOverrule_desc(*args):
    return _ODA_Drawings.OdDbPropertiesOverrule_desc(*args)

def OdDbPropertiesOverrule_createObject(*args):
    return _ODA_Drawings.OdDbPropertiesOverrule_createObject(*args)

class OdDbObjectIdGraphNode(OdDbGraphNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectIdGraphNode_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectIdGraphNode_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectIdGraphNode_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectIdGraphNode_queryX(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectIdGraphNode

    def id(self, *args):
        return _ODA_Drawings.OdDbObjectIdGraphNode_id(self, *args)

    def setId(self, *args):
        return _ODA_Drawings.OdDbObjectIdGraphNode_setId(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectIdGraphNode_createObject(*args)

# Register OdDbObjectIdGraphNode in _ODA_Drawings:
_ODA_Drawings.OdDbObjectIdGraphNode_swigregister(OdDbObjectIdGraphNode)

def OdDbObjectIdGraphNode_cast(*args):
    return _ODA_Drawings.OdDbObjectIdGraphNode_cast(*args)

def OdDbObjectIdGraphNode_desc(*args):
    return _ODA_Drawings.OdDbObjectIdGraphNode_desc(*args)

def OdDbObjectIdGraphNode_createObject(*args):
    return _ODA_Drawings.OdDbObjectIdGraphNode_createObject(*args)

class OdDbObjectIdGraph(OdDbGraph):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbObjectIdGraph_swiginit(self, _ODA_Drawings.new_OdDbObjectIdGraph(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectIdGraph

    def findNode(self, *args):
        return _ODA_Drawings.OdDbObjectIdGraph_findNode(self, *args)

    def idNode(self, *args):
        return _ODA_Drawings.OdDbObjectIdGraph_idNode(self, *args)

# Register OdDbObjectIdGraph in _ODA_Drawings:
_ODA_Drawings.OdDbObjectIdGraph_swigregister(OdDbObjectIdGraph)

class OdDbObjectContextDefaultPE(OdDbObjectContextInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextDefaultPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextDefaultPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextDefaultPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextDefaultPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextDefaultPE_createObject(*args)

    def addContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextDefaultPE_addContext(self, *args)

    def hasContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextDefaultPE_hasContext(self, *args)

    def removeContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextDefaultPE_removeContext(self, *args)

    def supportsCollection(self, *args):
        return _ODA_Drawings.OdDbObjectContextDefaultPE_supportsCollection(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextDefaultPE

# Register OdDbObjectContextDefaultPE in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextDefaultPE_swigregister(OdDbObjectContextDefaultPE)

def OdDbObjectContextDefaultPE_cast(*args):
    return _ODA_Drawings.OdDbObjectContextDefaultPE_cast(*args)

def OdDbObjectContextDefaultPE_desc(*args):
    return _ODA_Drawings.OdDbObjectContextDefaultPE_desc(*args)

def OdDbObjectContextDefaultPE_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextDefaultPE_createObject(*args)

class OdDbObjectContextPE(OdDbObjectContextInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextPE_createObject(*args)

    def setDefaultContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextPE_setDefaultContext(self, *args)

    def getDefaultContextData(self, *args):
        return _ODA_Drawings.OdDbObjectContextPE_getDefaultContextData(self, *args)

    def addContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextPE_addContext(self, *args)

    def createContextData(self, *args):
        return _ODA_Drawings.OdDbObjectContextPE_createContextData(self, *args)

    def hasContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextPE_hasContext(self, *args)

    def removeContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextPE_removeContext(self, *args)

    def supportsCollection(self, *args):
        return _ODA_Drawings.OdDbObjectContextPE_supportsCollection(self, *args)

    def getContextData(self, *args):
        return _ODA_Drawings.OdDbObjectContextPE_getContextData(self, *args)

    def compose(self, *args):
        return _ODA_Drawings.OdDbObjectContextPE_compose(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextPE

# Register OdDbObjectContextPE in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextPE_swigregister(OdDbObjectContextPE)

def OdDbObjectContextPE_cast(*args):
    return _ODA_Drawings.OdDbObjectContextPE_cast(*args)

def OdDbObjectContextPE_desc(*args):
    return _ODA_Drawings.OdDbObjectContextPE_desc(*args)

def OdDbObjectContextPE_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextPE_createObject(*args)

class OdDbObjectContextHatchPE(OdDbObjectContextPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextHatchPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextHatchPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextHatchPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextHatchPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextHatchPE_createObject(*args)

    def createContextData(self, *args):
        return _ODA_Drawings.OdDbObjectContextHatchPE_createContextData(self, *args)

    def addContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextHatchPE_addContext(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextHatchPE

# Register OdDbObjectContextHatchPE in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextHatchPE_swigregister(OdDbObjectContextHatchPE)

def OdDbObjectContextHatchPE_cast(*args):
    return _ODA_Drawings.OdDbObjectContextHatchPE_cast(*args)

def OdDbObjectContextHatchPE_desc(*args):
    return _ODA_Drawings.OdDbObjectContextHatchPE_desc(*args)

def OdDbObjectContextHatchPE_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextHatchPE_createObject(*args)

class OdDbObjectContextMTextPE(OdDbObjectContextPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextMTextPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextMTextPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextMTextPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextMTextPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextMTextPE_createObject(*args)

    def createContextData(self, *args):
        return _ODA_Drawings.OdDbObjectContextMTextPE_createContextData(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextMTextPE

# Register OdDbObjectContextMTextPE in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextMTextPE_swigregister(OdDbObjectContextMTextPE)

def OdDbObjectContextMTextPE_cast(*args):
    return _ODA_Drawings.OdDbObjectContextMTextPE_cast(*args)

def OdDbObjectContextMTextPE_desc(*args):
    return _ODA_Drawings.OdDbObjectContextMTextPE_desc(*args)

def OdDbObjectContextMTextPE_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextMTextPE_createObject(*args)

class OdDbObjectContextTextPE(OdDbObjectContextPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextTextPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextTextPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextTextPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextTextPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextTextPE_createObject(*args)

    def createContextData(self, *args):
        return _ODA_Drawings.OdDbObjectContextTextPE_createContextData(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextTextPE

# Register OdDbObjectContextTextPE in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextTextPE_swigregister(OdDbObjectContextTextPE)

def OdDbObjectContextTextPE_cast(*args):
    return _ODA_Drawings.OdDbObjectContextTextPE_cast(*args)

def OdDbObjectContextTextPE_desc(*args):
    return _ODA_Drawings.OdDbObjectContextTextPE_desc(*args)

def OdDbObjectContextTextPE_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextTextPE_createObject(*args)

class OdDbObjectContextAttributePE(OdDbObjectContextTextPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextAttributePE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextAttributePE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextAttributePE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextAttributePE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextAttributePE_createObject(*args)

    def addContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextAttributePE_addContext(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextAttributePE

# Register OdDbObjectContextAttributePE in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextAttributePE_swigregister(OdDbObjectContextAttributePE)

def OdDbObjectContextAttributePE_cast(*args):
    return _ODA_Drawings.OdDbObjectContextAttributePE_cast(*args)

def OdDbObjectContextAttributePE_desc(*args):
    return _ODA_Drawings.OdDbObjectContextAttributePE_desc(*args)

def OdDbObjectContextAttributePE_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextAttributePE_createObject(*args)

class OdDbObjectContextLeaderPE(OdDbObjectContextPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextLeaderPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextLeaderPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextLeaderPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextLeaderPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextLeaderPE_createObject(*args)

    def createContextData(self, *args):
        return _ODA_Drawings.OdDbObjectContextLeaderPE_createContextData(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextLeaderPE

# Register OdDbObjectContextLeaderPE in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextLeaderPE_swigregister(OdDbObjectContextLeaderPE)

def OdDbObjectContextLeaderPE_cast(*args):
    return _ODA_Drawings.OdDbObjectContextLeaderPE_cast(*args)

def OdDbObjectContextLeaderPE_desc(*args):
    return _ODA_Drawings.OdDbObjectContextLeaderPE_desc(*args)

def OdDbObjectContextLeaderPE_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextLeaderPE_createObject(*args)

class OdDbObjectContextMLeaderPE(OdDbObjectContextPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextMLeaderPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextMLeaderPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextMLeaderPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextMLeaderPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextMLeaderPE_createObject(*args)

    def createContextData(self, *args):
        return _ODA_Drawings.OdDbObjectContextMLeaderPE_createContextData(self, *args)

    def addContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextMLeaderPE_addContext(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextMLeaderPE

# Register OdDbObjectContextMLeaderPE in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextMLeaderPE_swigregister(OdDbObjectContextMLeaderPE)

def OdDbObjectContextMLeaderPE_cast(*args):
    return _ODA_Drawings.OdDbObjectContextMLeaderPE_cast(*args)

def OdDbObjectContextMLeaderPE_desc(*args):
    return _ODA_Drawings.OdDbObjectContextMLeaderPE_desc(*args)

def OdDbObjectContextMLeaderPE_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextMLeaderPE_createObject(*args)

class OdDbObjectContextFcfPE(OdDbObjectContextPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextFcfPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextFcfPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextFcfPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextFcfPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextFcfPE_createObject(*args)

    def createContextData(self, *args):
        return _ODA_Drawings.OdDbObjectContextFcfPE_createContextData(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextFcfPE

# Register OdDbObjectContextFcfPE in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextFcfPE_swigregister(OdDbObjectContextFcfPE)

def OdDbObjectContextFcfPE_cast(*args):
    return _ODA_Drawings.OdDbObjectContextFcfPE_cast(*args)

def OdDbObjectContextFcfPE_desc(*args):
    return _ODA_Drawings.OdDbObjectContextFcfPE_desc(*args)

def OdDbObjectContextFcfPE_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextFcfPE_createObject(*args)

class OdDbObjectContextBlkRefPE(OdDbObjectContextPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextBlkRefPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextBlkRefPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextBlkRefPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextBlkRefPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextBlkRefPE_createObject(*args)

    def createContextData(self, *args):
        return _ODA_Drawings.OdDbObjectContextBlkRefPE_createContextData(self, *args)

    def setDefaultContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextBlkRefPE_setDefaultContext(self, *args)

    def addContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextBlkRefPE_addContext(self, *args)

    def removeContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextBlkRefPE_removeContext(self, *args)

    def compose(self, *args):
        return _ODA_Drawings.OdDbObjectContextBlkRefPE_compose(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextBlkRefPE

# Register OdDbObjectContextBlkRefPE in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextBlkRefPE_swigregister(OdDbObjectContextBlkRefPE)

def OdDbObjectContextBlkRefPE_cast(*args):
    return _ODA_Drawings.OdDbObjectContextBlkRefPE_cast(*args)

def OdDbObjectContextBlkRefPE_desc(*args):
    return _ODA_Drawings.OdDbObjectContextBlkRefPE_desc(*args)

def OdDbObjectContextBlkRefPE_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextBlkRefPE_createObject(*args)

class OdDbObjectContextDimPE(OdDbObjectContextPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextDimPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextDimPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextDimPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextDimPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextDimPE_createObject(*args)

    def addContext(self, *args):
        return _ODA_Drawings.OdDbObjectContextDimPE_addContext(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextDimPE

# Register OdDbObjectContextDimPE in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextDimPE_swigregister(OdDbObjectContextDimPE)

def OdDbObjectContextDimPE_cast(*args):
    return _ODA_Drawings.OdDbObjectContextDimPE_cast(*args)

def OdDbObjectContextDimPE_desc(*args):
    return _ODA_Drawings.OdDbObjectContextDimPE_desc(*args)

def OdDbObjectContextDimPE_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextDimPE_createObject(*args)

class OdDbObjectContextAlDimPE(OdDbObjectContextDimPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextAlDimPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextAlDimPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextAlDimPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextAlDimPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextAlDimPE_createObject(*args)

    def createContextData(self, *args):
        return _ODA_Drawings.OdDbObjectContextAlDimPE_createContextData(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextAlDimPE

# Register OdDbObjectContextAlDimPE in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextAlDimPE_swigregister(OdDbObjectContextAlDimPE)

def OdDbObjectContextAlDimPE_cast(*args):
    return _ODA_Drawings.OdDbObjectContextAlDimPE_cast(*args)

def OdDbObjectContextAlDimPE_desc(*args):
    return _ODA_Drawings.OdDbObjectContextAlDimPE_desc(*args)

def OdDbObjectContextAlDimPE_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextAlDimPE_createObject(*args)

class OdDbObjectContextAngDimPE(OdDbObjectContextDimPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextAngDimPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextAngDimPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextAngDimPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextAngDimPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextAngDimPE_createObject(*args)

    def createContextData(self, *args):
        return _ODA_Drawings.OdDbObjectContextAngDimPE_createContextData(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextAngDimPE

# Register OdDbObjectContextAngDimPE in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextAngDimPE_swigregister(OdDbObjectContextAngDimPE)

def OdDbObjectContextAngDimPE_cast(*args):
    return _ODA_Drawings.OdDbObjectContextAngDimPE_cast(*args)

def OdDbObjectContextAngDimPE_desc(*args):
    return _ODA_Drawings.OdDbObjectContextAngDimPE_desc(*args)

def OdDbObjectContextAngDimPE_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextAngDimPE_createObject(*args)

class OdDbObjectContextDmDimPE(OdDbObjectContextDimPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextDmDimPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextDmDimPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextDmDimPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextDmDimPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextDmDimPE_createObject(*args)

    def createContextData(self, *args):
        return _ODA_Drawings.OdDbObjectContextDmDimPE_createContextData(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextDmDimPE

# Register OdDbObjectContextDmDimPE in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextDmDimPE_swigregister(OdDbObjectContextDmDimPE)

def OdDbObjectContextDmDimPE_cast(*args):
    return _ODA_Drawings.OdDbObjectContextDmDimPE_cast(*args)

def OdDbObjectContextDmDimPE_desc(*args):
    return _ODA_Drawings.OdDbObjectContextDmDimPE_desc(*args)

def OdDbObjectContextDmDimPE_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextDmDimPE_createObject(*args)

class OdDbObjectContextOrdDimPE(OdDbObjectContextDimPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextOrdDimPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextOrdDimPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextOrdDimPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextOrdDimPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextOrdDimPE_createObject(*args)

    def createContextData(self, *args):
        return _ODA_Drawings.OdDbObjectContextOrdDimPE_createContextData(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextOrdDimPE

# Register OdDbObjectContextOrdDimPE in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextOrdDimPE_swigregister(OdDbObjectContextOrdDimPE)

def OdDbObjectContextOrdDimPE_cast(*args):
    return _ODA_Drawings.OdDbObjectContextOrdDimPE_cast(*args)

def OdDbObjectContextOrdDimPE_desc(*args):
    return _ODA_Drawings.OdDbObjectContextOrdDimPE_desc(*args)

def OdDbObjectContextOrdDimPE_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextOrdDimPE_createObject(*args)

class OdDbObjectContextRaDimPE(OdDbObjectContextDimPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextRaDimPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextRaDimPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextRaDimPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextRaDimPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextRaDimPE_createObject(*args)

    def createContextData(self, *args):
        return _ODA_Drawings.OdDbObjectContextRaDimPE_createContextData(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextRaDimPE

# Register OdDbObjectContextRaDimPE in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextRaDimPE_swigregister(OdDbObjectContextRaDimPE)

def OdDbObjectContextRaDimPE_cast(*args):
    return _ODA_Drawings.OdDbObjectContextRaDimPE_cast(*args)

def OdDbObjectContextRaDimPE_desc(*args):
    return _ODA_Drawings.OdDbObjectContextRaDimPE_desc(*args)

def OdDbObjectContextRaDimPE_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextRaDimPE_createObject(*args)

class OdDbObjectContextRaDimLrgPE(OdDbObjectContextRaDimPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextRaDimLrgPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextRaDimLrgPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextRaDimLrgPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextRaDimLrgPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextRaDimLrgPE_createObject(*args)

    def createContextData(self, *args):
        return _ODA_Drawings.OdDbObjectContextRaDimLrgPE_createContextData(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextRaDimLrgPE

# Register OdDbObjectContextRaDimLrgPE in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextRaDimLrgPE_swigregister(OdDbObjectContextRaDimLrgPE)

def OdDbObjectContextRaDimLrgPE_cast(*args):
    return _ODA_Drawings.OdDbObjectContextRaDimLrgPE_cast(*args)

def OdDbObjectContextRaDimLrgPE_desc(*args):
    return _ODA_Drawings.OdDbObjectContextRaDimLrgPE_desc(*args)

def OdDbObjectContextRaDimLrgPE_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextRaDimLrgPE_createObject(*args)


def oddbGetContextDataAndScale(*args):
    return _ODA_Drawings.oddbGetContextDataAndScale(*args)
class OdDbObjectContextManager(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbObjectContextManager_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbObjectContextManager_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbObjectContextManager_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbObjectContextManager_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbObjectContextManager_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbObjectContextManager

    def registerContextCollection(self, *args):
        return _ODA_Drawings.OdDbObjectContextManager_registerContextCollection(self, *args)

    def unregisterContextCollection(self, *args):
        return _ODA_Drawings.OdDbObjectContextManager_unregisterContextCollection(self, *args)

    def contextCollection(self, *args):
        return _ODA_Drawings.OdDbObjectContextManager_contextCollection(self, *args)

# Register OdDbObjectContextManager in _ODA_Drawings:
_ODA_Drawings.OdDbObjectContextManager_swigregister(OdDbObjectContextManager)

def OdDbObjectContextManager_cast(*args):
    return _ODA_Drawings.OdDbObjectContextManager_cast(*args)

def OdDbObjectContextManager_desc(*args):
    return _ODA_Drawings.OdDbObjectContextManager_desc(*args)

def OdDbObjectContextManager_createObject(*args):
    return _ODA_Drawings.OdDbObjectContextManager_createObject(*args)

class OdDbNamedPath(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbNamedPath_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbNamedPath_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbNamedPath_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbNamedPath_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbNamedPath_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbNamedPath

    def getGeometry(self, *args):
        return _ODA_Drawings.OdDbNamedPath_getGeometry(self, *args)

# Register OdDbNamedPath in _ODA_Drawings:
_ODA_Drawings.OdDbNamedPath_swigregister(OdDbNamedPath)

def OdDbNamedPath_cast(*args):
    return _ODA_Drawings.OdDbNamedPath_cast(*args)

def OdDbNamedPath_desc(*args):
    return _ODA_Drawings.OdDbNamedPath_desc(*args)

def OdDbNamedPath_createObject(*args):
    return _ODA_Drawings.OdDbNamedPath_createObject(*args)

class OdDbCurvePath(OdDbNamedPath):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbCurvePath_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbCurvePath_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbCurvePath_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbCurvePath_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbCurvePath_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbCurvePath

    def getGeometry(self, *args):
        return _ODA_Drawings.OdDbCurvePath_getGeometry(self, *args)

    def setGeometry(self, *args):
        return _ODA_Drawings.OdDbCurvePath_setGeometry(self, *args)

    def entityId(self, *args):
        return _ODA_Drawings.OdDbCurvePath_entityId(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbCurvePath_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbCurvePath_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbCurvePath_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbCurvePath_dxfOutFields(self, *args)

# Register OdDbCurvePath in _ODA_Drawings:
_ODA_Drawings.OdDbCurvePath_swigregister(OdDbCurvePath)

def OdDbCurvePath_cast(*args):
    return _ODA_Drawings.OdDbCurvePath_cast(*args)

def OdDbCurvePath_desc(*args):
    return _ODA_Drawings.OdDbCurvePath_desc(*args)

def OdDbCurvePath_createObject(*args):
    return _ODA_Drawings.OdDbCurvePath_createObject(*args)

class OdDbPointPath(OdDbNamedPath):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPointPath_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPointPath_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPointPath_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPointPath_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPointPath_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPointPath

    def getGeometry(self, *args):
        return _ODA_Drawings.OdDbPointPath_getGeometry(self, *args)

    def setGeometry(self, *args):
        return _ODA_Drawings.OdDbPointPath_setGeometry(self, *args)

    def point(self, *args):
        return _ODA_Drawings.OdDbPointPath_point(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbPointPath_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbPointPath_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbPointPath_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbPointPath_dxfOutFields(self, *args)

# Register OdDbPointPath in _ODA_Drawings:
_ODA_Drawings.OdDbPointPath_swigregister(OdDbPointPath)

def OdDbPointPath_cast(*args):
    return _ODA_Drawings.OdDbPointPath_cast(*args)

def OdDbPointPath_desc(*args):
    return _ODA_Drawings.OdDbPointPath_desc(*args)

def OdDbPointPath_createObject(*args):
    return _ODA_Drawings.OdDbPointPath_createObject(*args)


def oddbGetNamedPathDictionaryId(*args):
    return _ODA_Drawings.oddbGetNamedPathDictionaryId(*args)

def oddbGetNamedPathDictionary(*args):
    return _ODA_Drawings.oddbGetNamedPathDictionary(*args)
class OdDbMPolygon(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Drawings.delete_OdDbMPolygon

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbMPolygon_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbMPolygon_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbMPolygon_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbMPolygon_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbMPolygon_createObject(*args)

    def hatch(self, *args):
        return _ODA_Drawings.OdDbMPolygon_hatch(self, *args)

    def elevation(self, *args):
        return _ODA_Drawings.OdDbMPolygon_elevation(self, *args)

    def setElevation(self, *args):
        return _ODA_Drawings.OdDbMPolygon_setElevation(self, *args)

    def normal(self, *args):
        return _ODA_Drawings.OdDbMPolygon_normal(self, *args)

    def setNormal(self, *args):
        return _ODA_Drawings.OdDbMPolygon_setNormal(self, *args)

    def evaluateHatch(self, *args):
        return _ODA_Drawings.OdDbMPolygon_evaluateHatch(self, *args)

    def patternType(self, *args):
        return _ODA_Drawings.OdDbMPolygon_patternType(self, *args)

    def patternName(self, *args):
        return _ODA_Drawings.OdDbMPolygon_patternName(self, *args)

    def setPattern(self, *args):
        return _ODA_Drawings.OdDbMPolygon_setPattern(self, *args)

    def patternAngle(self, *args):
        return _ODA_Drawings.OdDbMPolygon_patternAngle(self, *args)

    def setPatternAngle(self, *args):
        return _ODA_Drawings.OdDbMPolygon_setPatternAngle(self, *args)

    def patternSpace(self, *args):
        return _ODA_Drawings.OdDbMPolygon_patternSpace(self, *args)

    def setPatternSpace(self, *args):
        return _ODA_Drawings.OdDbMPolygon_setPatternSpace(self, *args)

    def patternScale(self, *args):
        return _ODA_Drawings.OdDbMPolygon_patternScale(self, *args)

    def setPatternScale(self, *args):
        return _ODA_Drawings.OdDbMPolygon_setPatternScale(self, *args)

    def patternDouble(self, *args):
        return _ODA_Drawings.OdDbMPolygon_patternDouble(self, *args)

    def setPatternDouble(self, *args):
        return _ODA_Drawings.OdDbMPolygon_setPatternDouble(self, *args)

    def numPatternDefinitions(self, *args):
        return _ODA_Drawings.OdDbMPolygon_numPatternDefinitions(self, *args)

    def getPatternDefinitionAt(self, *args):
        return _ODA_Drawings.OdDbMPolygon_getPatternDefinitionAt(self, *args)

    def setGradientAngle(self, *args):
        return _ODA_Drawings.OdDbMPolygon_setGradientAngle(self, *args)

    def setGradientShift(self, *args):
        return _ODA_Drawings.OdDbMPolygon_setGradientShift(self, *args)

    def setGradientOneColorMode(self, *args):
        return _ODA_Drawings.OdDbMPolygon_setGradientOneColorMode(self, *args)

    def setGradientColors(self, *args):
        return _ODA_Drawings.OdDbMPolygon_setGradientColors(self, *args)

    def setGradient(self, *args):
        return _ODA_Drawings.OdDbMPolygon_setGradient(self, *args)

    def patternColor(self, *args):
        return _ODA_Drawings.OdDbMPolygon_patternColor(self, *args)

    def setPatternColor(self, *args):
        return _ODA_Drawings.OdDbMPolygon_setPatternColor(self, *args)

    def getArea(self, *args):
        return _ODA_Drawings.OdDbMPolygon_getArea(self, *args)

    def getOffsetVector(self, *args):
        return _ODA_Drawings.OdDbMPolygon_getOffsetVector(self, *args)

    def appendLoopFromBoundary(self, *args):
        return _ODA_Drawings.OdDbMPolygon_appendLoopFromBoundary(self, *args)

    def numMPolygonLoops(self, *args):
        return _ODA_Drawings.OdDbMPolygon_numMPolygonLoops(self, *args)

    def getMPolygonLoopAt(self, *args):
        return _ODA_Drawings.OdDbMPolygon_getMPolygonLoopAt(self, *args)

    def appendMPolygonLoop(self, *args):
        return _ODA_Drawings.OdDbMPolygon_appendMPolygonLoop(self, *args)

    def insertMPolygonLoopAt(self, *args):
        return _ODA_Drawings.OdDbMPolygon_insertMPolygonLoopAt(self, *args)

    def replaceMPolygonLoopAt(self, *args):
        return _ODA_Drawings.OdDbMPolygon_replaceMPolygonLoopAt(self, *args)

    def removeMPolygonLoopAt(self, *args):
        return _ODA_Drawings.OdDbMPolygon_removeMPolygonLoopAt(self, *args)
    kExterior = _ODA_Drawings.OdDbMPolygon_kExterior
    kInterior = _ODA_Drawings.OdDbMPolygon_kInterior
    kAnnotation = _ODA_Drawings.OdDbMPolygon_kAnnotation

    def getLoopDirection(self, *args):
        return _ODA_Drawings.OdDbMPolygon_getLoopDirection(self, *args)

    def setLoopDirection(self, *args):
        return _ODA_Drawings.OdDbMPolygon_setLoopDirection(self, *args)

    def isPointOnLoopBoundary(self, *args):
        return _ODA_Drawings.OdDbMPolygon_isPointOnLoopBoundary(self, *args)

    def isPointInsideMPolygon(self, *args):
        return _ODA_Drawings.OdDbMPolygon_isPointInsideMPolygon(self, *args)

    def getParentLoop(self, *args):
        return _ODA_Drawings.OdDbMPolygon_getParentLoop(self, *args)

    def getMPolygonTree(self, *args):
        return _ODA_Drawings.OdDbMPolygon_getMPolygonTree(self, *args)

    def deleteMPolygonTree(self, *args):
        return _ODA_Drawings.OdDbMPolygon_deleteMPolygonTree(self, *args)

    def getClosestLoopTo(self, *args):
        return _ODA_Drawings.OdDbMPolygon_getClosestLoopTo(self, *args)

    def getPerimeter(self, *args):
        return _ODA_Drawings.OdDbMPolygon_getPerimeter(self, *args)

    def balanceTree(self, *args):
        return _ODA_Drawings.OdDbMPolygon_balanceTree(self, *args)

    def isBalanced(self, *args):
        return _ODA_Drawings.OdDbMPolygon_isBalanced(self, *args)

    def balanceDisplay(self, *args):
        return _ODA_Drawings.OdDbMPolygon_balanceDisplay(self, *args)

    def createLoopsFromBoundaries(self, *args):
        return _ODA_Drawings.OdDbMPolygon_createLoopsFromBoundaries(self, *args)

    def createLoops(self, *args):
        return _ODA_Drawings.OdDbMPolygon_createLoops(self, *args)

    def getChildLoops(self, *args):
        return _ODA_Drawings.OdDbMPolygon_getChildLoops(self, *args)

    def subSubentPtr(self, *args):
        return _ODA_Drawings.OdDbMPolygon_subSubentPtr(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdDbMPolygon_subExplode(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbMPolygon_subTransformBy(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbMPolygon_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbMPolygon_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbMPolygon_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbMPolygon_dxfOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdDbMPolygon_subWorldDraw(self, *args)

    def subSetDatabaseDefaults(self, *args):
        return _ODA_Drawings.OdDbMPolygon_subSetDatabaseDefaults(self, *args)

    def saveAs(self, *args):
        return _ODA_Drawings.OdDbMPolygon_saveAs(self, *args)

# Register OdDbMPolygon in _ODA_Drawings:
_ODA_Drawings.OdDbMPolygon_swigregister(OdDbMPolygon)
OdDbMPolygonCrossingFuzz = cvar.OdDbMPolygonCrossingFuzz

def OdDbMPolygon_cast(*args):
    return _ODA_Drawings.OdDbMPolygon_cast(*args)

def OdDbMPolygon_desc(*args):
    return _ODA_Drawings.OdDbMPolygon_desc(*args)

def OdDbMPolygon_createObject(*args):
    return _ODA_Drawings.OdDbMPolygon_createObject(*args)

class OdDbMPolygonNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbMPolygonNode_swiginit(self, _ODA_Drawings.new_OdDbMPolygonNode(*args))
    mParent = property(_ODA_Drawings.OdDbMPolygonNode_mParent_get, _ODA_Drawings.OdDbMPolygonNode_mParent_set)
    mChildren = property(_ODA_Drawings.OdDbMPolygonNode_mChildren_get, _ODA_Drawings.OdDbMPolygonNode_mChildren_set)
    mLoopIndex = property(_ODA_Drawings.OdDbMPolygonNode_mLoopIndex_get, _ODA_Drawings.OdDbMPolygonNode_mLoopIndex_set)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbMPolygonNode

# Register OdDbMPolygonNode in _ODA_Drawings:
_ODA_Drawings.OdDbMPolygonNode_swigregister(OdDbMPolygonNode)

class OdDbMotionPath(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbMotionPath_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbMotionPath_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbMotionPath_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbMotionPath_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbMotionPath_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbMotionPath

    def setCameraPath(self, *args):
        return _ODA_Drawings.OdDbMotionPath_setCameraPath(self, *args)

    def cameraPath(self, *args):
        return _ODA_Drawings.OdDbMotionPath_cameraPath(self, *args)

    def setTargetPath(self, *args):
        return _ODA_Drawings.OdDbMotionPath_setTargetPath(self, *args)

    def targetPath(self, *args):
        return _ODA_Drawings.OdDbMotionPath_targetPath(self, *args)

    def setViewTableRecordId(self, *args):
        return _ODA_Drawings.OdDbMotionPath_setViewTableRecordId(self, *args)

    def viewTableRecordId(self, *args):
        return _ODA_Drawings.OdDbMotionPath_viewTableRecordId(self, *args)

    def setFrames(self, *args):
        return _ODA_Drawings.OdDbMotionPath_setFrames(self, *args)

    def frames(self, *args):
        return _ODA_Drawings.OdDbMotionPath_frames(self, *args)

    def setFrameRate(self, *args):
        return _ODA_Drawings.OdDbMotionPath_setFrameRate(self, *args)

    def frameRate(self, *args):
        return _ODA_Drawings.OdDbMotionPath_frameRate(self, *args)

    def setCornerDecel(self, *args):
        return _ODA_Drawings.OdDbMotionPath_setCornerDecel(self, *args)

    def cornerDecel(self, *args):
        return _ODA_Drawings.OdDbMotionPath_cornerDecel(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbMotionPath_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbMotionPath_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbMotionPath_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbMotionPath_dxfOutFields(self, *args)

# Register OdDbMotionPath in _ODA_Drawings:
_ODA_Drawings.OdDbMotionPath_swigregister(OdDbMotionPath)

def OdDbMotionPath_cast(*args):
    return _ODA_Drawings.OdDbMotionPath_cast(*args)

def OdDbMotionPath_desc(*args):
    return _ODA_Drawings.OdDbMotionPath_desc(*args)

def OdDbMotionPath_createObject(*args):
    return _ODA_Drawings.OdDbMotionPath_createObject(*args)


def oddbGetMotionPathDictionaryId(*args):
    return _ODA_Drawings.oddbGetMotionPathDictionaryId(*args)

def oddbGetMotionPathDictionary(*args):
    return _ODA_Drawings.oddbGetMotionPathDictionary(*args)
class OdDbMLeaderBreaks(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getBreaks(*args):
        return _ODA_Drawings.OdDbMLeaderBreaks_getBreaks(*args)

    @staticmethod
    def setBreaks(*args):
        return _ODA_Drawings.OdDbMLeaderBreaks_setBreaks(*args)

    @staticmethod
    def getDoglegBreaks(*args):
        return _ODA_Drawings.OdDbMLeaderBreaks_getDoglegBreaks(*args)

    @staticmethod
    def setDoglegBreaks(*args):
        return _ODA_Drawings.OdDbMLeaderBreaks_setDoglegBreaks(*args)

    def __init__(self, *args):
        _ODA_Drawings.OdDbMLeaderBreaks_swiginit(self, _ODA_Drawings.new_OdDbMLeaderBreaks(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbMLeaderBreaks

# Register OdDbMLeaderBreaks in _ODA_Drawings:
_ODA_Drawings.OdDbMLeaderBreaks_swigregister(OdDbMLeaderBreaks)

def OdDbMLeaderBreaks_getBreaks(*args):
    return _ODA_Drawings.OdDbMLeaderBreaks_getBreaks(*args)

def OdDbMLeaderBreaks_setBreaks(*args):
    return _ODA_Drawings.OdDbMLeaderBreaks_setBreaks(*args)

def OdDbMLeaderBreaks_getDoglegBreaks(*args):
    return _ODA_Drawings.OdDbMLeaderBreaks_getDoglegBreaks(*args)

def OdDbMLeaderBreaks_setDoglegBreaks(*args):
    return _ODA_Drawings.OdDbMLeaderBreaks_setDoglegBreaks(*args)

class BreakInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_nSegment = property(_ODA_Drawings.BreakInfo_m_nSegment_get, _ODA_Drawings.BreakInfo_m_nSegment_set)
    m_StartPoints = property(_ODA_Drawings.BreakInfo_m_StartPoints_get, _ODA_Drawings.BreakInfo_m_StartPoints_set)
    m_EndPoints = property(_ODA_Drawings.BreakInfo_m_EndPoints_get, _ODA_Drawings.BreakInfo_m_EndPoints_set)

    def __init__(self, *args):
        _ODA_Drawings.BreakInfo_swiginit(self, _ODA_Drawings.new_BreakInfo(*args))
    __swig_destroy__ = _ODA_Drawings.delete_BreakInfo

# Register BreakInfo in _ODA_Drawings:
_ODA_Drawings.BreakInfo_swigregister(BreakInfo)

class OdDbMatchProperties(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kColorFlag = _ODA_Drawings.OdDbMatchProperties_kColorFlag
    kLayerFlag = _ODA_Drawings.OdDbMatchProperties_kLayerFlag
    kLtypeFlag = _ODA_Drawings.OdDbMatchProperties_kLtypeFlag
    kThicknessFlag = _ODA_Drawings.OdDbMatchProperties_kThicknessFlag
    kLtscaleFlag = _ODA_Drawings.OdDbMatchProperties_kLtscaleFlag
    kTextFlag = _ODA_Drawings.OdDbMatchProperties_kTextFlag
    kDimensionFlag = _ODA_Drawings.OdDbMatchProperties_kDimensionFlag
    kHatchFlag = _ODA_Drawings.OdDbMatchProperties_kHatchFlag
    kLweightFlag = _ODA_Drawings.OdDbMatchProperties_kLweightFlag
    kPlotstylenameFlag = _ODA_Drawings.OdDbMatchProperties_kPlotstylenameFlag
    kPolylineFlag = _ODA_Drawings.OdDbMatchProperties_kPolylineFlag
    kViewportFlag = _ODA_Drawings.OdDbMatchProperties_kViewportFlag
    kTableFlag = _ODA_Drawings.OdDbMatchProperties_kTableFlag
    kMaterialFlag = _ODA_Drawings.OdDbMatchProperties_kMaterialFlag
    kShadowDisplayFlag = _ODA_Drawings.OdDbMatchProperties_kShadowDisplayFlag
    kMultileaderFlag = _ODA_Drawings.OdDbMatchProperties_kMultileaderFlag
    kTransparencyFlag = _ODA_Drawings.OdDbMatchProperties_kTransparencyFlag
    kSetAllFlagsOn = _ODA_Drawings.OdDbMatchProperties_kSetAllFlagsOn

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbMatchProperties_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbMatchProperties_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbMatchProperties_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbMatchProperties_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbMatchProperties_createObject(*args)

    def copyProperties(self, *args):
        return _ODA_Drawings.OdDbMatchProperties_copyProperties(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbMatchProperties

# Register OdDbMatchProperties in _ODA_Drawings:
_ODA_Drawings.OdDbMatchProperties_swigregister(OdDbMatchProperties)

def OdDbMatchProperties_cast(*args):
    return _ODA_Drawings.OdDbMatchProperties_cast(*args)

def OdDbMatchProperties_desc(*args):
    return _ODA_Drawings.OdDbMatchProperties_desc(*args)

def OdDbMatchProperties_createObject(*args):
    return _ODA_Drawings.OdDbMatchProperties_createObject(*args)

class OdDbLongTransWorkSetIterator(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLongTransWorkSetIterator_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLongTransWorkSetIterator_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLongTransWorkSetIterator_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLongTransWorkSetIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLongTransWorkSetIterator_createObject(*args)

    def start(self, *args):
        return _ODA_Drawings.OdDbLongTransWorkSetIterator_start(self, *args)

    def done(self, *args):
        return _ODA_Drawings.OdDbLongTransWorkSetIterator_done(self, *args)

    def step(self, *args):
        return _ODA_Drawings.OdDbLongTransWorkSetIterator_step(self, *args)

    def objectId(self, *args):
        return _ODA_Drawings.OdDbLongTransWorkSetIterator_objectId(self, *args)

    def curObjectIsErased(self, *args):
        return _ODA_Drawings.OdDbLongTransWorkSetIterator_curObjectIsErased(self, *args)

    def curObjectIsRemoved(self, *args):
        return _ODA_Drawings.OdDbLongTransWorkSetIterator_curObjectIsRemoved(self, *args)

    def curObjectIsPrimary(self, *args):
        return _ODA_Drawings.OdDbLongTransWorkSetIterator_curObjectIsPrimary(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLongTransWorkSetIterator

# Register OdDbLongTransWorkSetIterator in _ODA_Drawings:
_ODA_Drawings.OdDbLongTransWorkSetIterator_swigregister(OdDbLongTransWorkSetIterator)

def OdDbLongTransWorkSetIterator_cast(*args):
    return _ODA_Drawings.OdDbLongTransWorkSetIterator_cast(*args)

def OdDbLongTransWorkSetIterator_desc(*args):
    return _ODA_Drawings.OdDbLongTransWorkSetIterator_desc(*args)

def OdDbLongTransWorkSetIterator_createObject(*args):
    return _ODA_Drawings.OdDbLongTransWorkSetIterator_createObject(*args)

class OdDbLongTransaction(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLongTransaction_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLongTransaction_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLongTransaction_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLongTransaction_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLongTransaction_createObject(*args)
    kSameDb = _ODA_Drawings.OdDbLongTransaction_kSameDb
    kXrefDb = _ODA_Drawings.OdDbLongTransaction_kXrefDb
    kUnrelatedDb = _ODA_Drawings.OdDbLongTransaction_kUnrelatedDb

    def type(self, *args):
        return _ODA_Drawings.OdDbLongTransaction_type(self, *args)

    def originBlock(self, *args):
        return _ODA_Drawings.OdDbLongTransaction_originBlock(self, *args)

    def destinationBlock(self, *args):
        return _ODA_Drawings.OdDbLongTransaction_destinationBlock(self, *args)

    def getLongTransactionName(self, *args):
        return _ODA_Drawings.OdDbLongTransaction_getLongTransactionName(self, *args)

    def addToWorkSet(self, *args):
        return _ODA_Drawings.OdDbLongTransaction_addToWorkSet(self, *args)

    def removeFromWorkSet(self, *args):
        return _ODA_Drawings.OdDbLongTransaction_removeFromWorkSet(self, *args)

    def syncWorkSet(self, *args):
        return _ODA_Drawings.OdDbLongTransaction_syncWorkSet(self, *args)

    def newWorkSetIterator(self, *args):
        return _ODA_Drawings.OdDbLongTransaction_newWorkSetIterator(self, *args)

    def originObject(self, *args):
        return _ODA_Drawings.OdDbLongTransaction_originObject(self, *args)

    def workSetHas(self, *args):
        return _ODA_Drawings.OdDbLongTransaction_workSetHas(self, *args)

    def activeIdMap(self, *args):
        return _ODA_Drawings.OdDbLongTransaction_activeIdMap(self, *args)

    def applyPartialUndo(self, *args):
        return _ODA_Drawings.OdDbLongTransaction_applyPartialUndo(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbLongTransaction_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbLongTransaction_dwgOutFields(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbLongTransaction_subErase(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLongTransaction

# Register OdDbLongTransaction in _ODA_Drawings:
_ODA_Drawings.OdDbLongTransaction_swigregister(OdDbLongTransaction)

def OdDbLongTransaction_cast(*args):
    return _ODA_Drawings.OdDbLongTransaction_cast(*args)

def OdDbLongTransaction_desc(*args):
    return _ODA_Drawings.OdDbLongTransaction_desc(*args)

def OdDbLongTransaction_createObject(*args):
    return _ODA_Drawings.OdDbLongTransaction_createObject(*args)

class OdDbLoftedSurface(OdDbSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLoftedSurface_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLoftedSurface_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLoftedSurface_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLoftedSurface_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLoftedSurface_createObject(*args)

    def createLoftedSurface(self, *args):
        return _ODA_Drawings.OdDbLoftedSurface_createLoftedSurface(self, *args)

    def createBlendSurface(self, *args):
        return _ODA_Drawings.OdDbLoftedSurface_createBlendSurface(self, *args)

    def numCrossSections(self, *args):
        return _ODA_Drawings.OdDbLoftedSurface_numCrossSections(self, *args)

    def getCrossSection(self, *args):
        return _ODA_Drawings.OdDbLoftedSurface_getCrossSection(self, *args)

    def numGuideCurves(self, *args):
        return _ODA_Drawings.OdDbLoftedSurface_numGuideCurves(self, *args)

    def getGuideCurve(self, *args):
        return _ODA_Drawings.OdDbLoftedSurface_getGuideCurve(self, *args)

    def getPathEntity(self, *args):
        return _ODA_Drawings.OdDbLoftedSurface_getPathEntity(self, *args)

    def getLoftOptions(self, *args):
        return _ODA_Drawings.OdDbLoftedSurface_getLoftOptions(self, *args)

    def setLoftOptions(self, *args):
        return _ODA_Drawings.OdDbLoftedSurface_setLoftOptions(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbLoftedSurface_subTransformBy(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbLoftedSurface_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbLoftedSurface_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbLoftedSurface_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbLoftedSurface_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbLoftedSurface_subGetClassID(self, *args)

    def isDependent(self, *args):
        return _ODA_Drawings.OdDbLoftedSurface_isDependent(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLoftedSurface

# Register OdDbLoftedSurface in _ODA_Drawings:
_ODA_Drawings.OdDbLoftedSurface_swigregister(OdDbLoftedSurface)

def OdDbLoftedSurface_cast(*args):
    return _ODA_Drawings.OdDbLoftedSurface_cast(*args)

def OdDbLoftedSurface_desc(*args):
    return _ODA_Drawings.OdDbLoftedSurface_desc(*args)

def OdDbLoftedSurface_createObject(*args):
    return _ODA_Drawings.OdDbLoftedSurface_createObject(*args)

class OdDbLayoutPaperPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLayoutPaperPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLayoutPaperPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLayoutPaperPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLayoutPaperPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLayoutPaperPE_createObject(*args)

    def drawPaper(self, *args):
        return _ODA_Drawings.OdDbLayoutPaperPE_drawPaper(self, *args)

    def drawBorder(self, *args):
        return _ODA_Drawings.OdDbLayoutPaperPE_drawBorder(self, *args)

    def drawMargins(self, *args):
        return _ODA_Drawings.OdDbLayoutPaperPE_drawMargins(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLayoutPaperPE

# Register OdDbLayoutPaperPE in _ODA_Drawings:
_ODA_Drawings.OdDbLayoutPaperPE_swigregister(OdDbLayoutPaperPE)

def OdDbLayoutPaperPE_cast(*args):
    return _ODA_Drawings.OdDbLayoutPaperPE_cast(*args)

def OdDbLayoutPaperPE_desc(*args):
    return _ODA_Drawings.OdDbLayoutPaperPE_desc(*args)

def OdDbLayoutPaperPE_createObject(*args):
    return _ODA_Drawings.OdDbLayoutPaperPE_createObject(*args)

class OdDbLayerStateManager(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLayerStateManager_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLayerStateManager_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLayerStateManager_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLayerStateManager
    kNone = _ODA_Drawings.OdDbLayerStateManager_kNone
    kOn = _ODA_Drawings.OdDbLayerStateManager_kOn
    kFrozen = _ODA_Drawings.OdDbLayerStateManager_kFrozen
    kLocked = _ODA_Drawings.OdDbLayerStateManager_kLocked
    kPlot = _ODA_Drawings.OdDbLayerStateManager_kPlot
    kNewViewport = _ODA_Drawings.OdDbLayerStateManager_kNewViewport
    kColor = _ODA_Drawings.OdDbLayerStateManager_kColor
    kLineType = _ODA_Drawings.OdDbLayerStateManager_kLineType
    kLineWeight = _ODA_Drawings.OdDbLayerStateManager_kLineWeight
    kPlotStyle = _ODA_Drawings.OdDbLayerStateManager_kPlotStyle
    kCurrentViewport = _ODA_Drawings.OdDbLayerStateManager_kCurrentViewport
    kTransparency = _ODA_Drawings.OdDbLayerStateManager_kTransparency
    kAll = _ODA_Drawings.OdDbLayerStateManager_kAll
    kStateIsHidden = _ODA_Drawings.OdDbLayerStateManager_kStateIsHidden
    kLastRestored = _ODA_Drawings.OdDbLayerStateManager_kLastRestored
    kDecomposition = _ODA_Drawings.OdDbLayerStateManager_kDecomposition
    kUndefDoNothing = _ODA_Drawings.OdDbLayerStateManager_kUndefDoNothing
    kUndefTurnOff = _ODA_Drawings.OdDbLayerStateManager_kUndefTurnOff
    kUndefFreeze = _ODA_Drawings.OdDbLayerStateManager_kUndefFreeze
    kRestoreAsOverrides = _ODA_Drawings.OdDbLayerStateManager_kRestoreAsOverrides

    def addReactor(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_addReactor(self, *args)

    def removeReactor(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_removeReactor(self, *args)

    def layerStatesDictionaryId(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_layerStatesDictionaryId(self, *args)

    def hasLayerState(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_hasLayerState(self, *args)

    def setLayerStateMask(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_setLayerStateMask(self, *args)

    def getLayerStateMask(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_getLayerStateMask(self, *args)

    def deleteLayerState(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_deleteLayerState(self, *args)

    def renameLayerState(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_renameLayerState(self, *args)

    def importLayerState(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_importLayerState(self, *args)

    def exportLayerState(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_exportLayerState(self, *args)

    def saveLayerState(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_saveLayerState(self, *args)

    def restoreLayerState(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_restoreLayerState(self, *args)

    def setLayerStateDescription(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_setLayerStateDescription(self, *args)

    def getLayerStateDescription(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_getLayerStateDescription(self, *args)

    def layerStateHasViewportData(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_layerStateHasViewportData(self, *args)

    def importLayerStateFromDb(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_importLayerStateFromDb(self, *args)

    def getLayerStateNames(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_getLayerStateNames(self, *args)

    def getLastRestoredLayerState(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_getLastRestoredLayerState(self, *args)

    def getLayerStateLayers(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_getLayerStateLayers(self, *args)

    def compareLayerStateToDb(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_compareLayerStateToDb(self, *args)

    def addLayerStateLayers(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_addLayerStateLayers(self, *args)

    def removeLayerStateLayers(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_removeLayerStateLayers(self, *args)

    def isDependentLayerState(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_isDependentLayerState(self, *args)

    def getDatabase(self, *args):
        return _ODA_Drawings.OdDbLayerStateManager_getDatabase(self, *args)

# Register OdDbLayerStateManager in _ODA_Drawings:
_ODA_Drawings.OdDbLayerStateManager_swigregister(OdDbLayerStateManager)

def OdDbLayerStateManager_cast(*args):
    return _ODA_Drawings.OdDbLayerStateManager_cast(*args)

def OdDbLayerStateManager_desc(*args):
    return _ODA_Drawings.OdDbLayerStateManager_desc(*args)

def OdDbLayerStateManager_createObject(*args):
    return _ODA_Drawings.OdDbLayerStateManager_createObject(*args)

class OdDbLayerStateManagerReactor(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbLayerStateManagerReactor_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbLayerStateManagerReactor_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbLayerStateManagerReactor_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbLayerStateManagerReactor_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbLayerStateManagerReactor_createObject(*args)

    def layerStateCreated(self, *args):
        return _ODA_Drawings.OdDbLayerStateManagerReactor_layerStateCreated(self, *args)

    def layerStateCompareFailed(self, *args):
        return _ODA_Drawings.OdDbLayerStateManagerReactor_layerStateCompareFailed(self, *args)

    def layerStateToBeRestored(self, *args):
        return _ODA_Drawings.OdDbLayerStateManagerReactor_layerStateToBeRestored(self, *args)

    def layerStateRestored(self, *args):
        return _ODA_Drawings.OdDbLayerStateManagerReactor_layerStateRestored(self, *args)

    def abortLayerStateRestore(self, *args):
        return _ODA_Drawings.OdDbLayerStateManagerReactor_abortLayerStateRestore(self, *args)

    def layerStateToBeDeleted(self, *args):
        return _ODA_Drawings.OdDbLayerStateManagerReactor_layerStateToBeDeleted(self, *args)

    def layerStateDeleted(self, *args):
        return _ODA_Drawings.OdDbLayerStateManagerReactor_layerStateDeleted(self, *args)

    def abortLayerStateDelete(self, *args):
        return _ODA_Drawings.OdDbLayerStateManagerReactor_abortLayerStateDelete(self, *args)

    def layerStateToBeRenamed(self, *args):
        return _ODA_Drawings.OdDbLayerStateManagerReactor_layerStateToBeRenamed(self, *args)

    def layerStateRenamed(self, *args):
        return _ODA_Drawings.OdDbLayerStateManagerReactor_layerStateRenamed(self, *args)

    def abortLayerStateRename(self, *args):
        return _ODA_Drawings.OdDbLayerStateManagerReactor_abortLayerStateRename(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLayerStateManagerReactor

# Register OdDbLayerStateManagerReactor in _ODA_Drawings:
_ODA_Drawings.OdDbLayerStateManagerReactor_swigregister(OdDbLayerStateManagerReactor)

def OdDbLayerStateManagerReactor_cast(*args):
    return _ODA_Drawings.OdDbLayerStateManagerReactor_cast(*args)

def OdDbLayerStateManagerReactor_desc(*args):
    return _ODA_Drawings.OdDbLayerStateManagerReactor_desc(*args)

def OdDbLayerStateManagerReactor_createObject(*args):
    return _ODA_Drawings.OdDbLayerStateManagerReactor_createObject(*args)

class OdDbLayerState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def dictionaryId(*args):
        return _ODA_Drawings.OdDbLayerState_dictionaryId(*args)

    @staticmethod
    def has(*args):
        return _ODA_Drawings.OdDbLayerState_has(*args)

    @staticmethod
    def save(*args):
        return _ODA_Drawings.OdDbLayerState_save(*args)

    @staticmethod
    def restore(*args):
        return _ODA_Drawings.OdDbLayerState_restore(*args)

    @staticmethod
    def setMask(*args):
        return _ODA_Drawings.OdDbLayerState_setMask(*args)

    @staticmethod
    def mask(*args):
        return _ODA_Drawings.OdDbLayerState_mask(*args)

    @staticmethod
    def remove(*args):
        return _ODA_Drawings.OdDbLayerState_remove(*args)

    @staticmethod
    def rename(*args):
        return _ODA_Drawings.OdDbLayerState_rename(*args)
    kImported = _ODA_Drawings.OdDbLayerState_kImported
    kAlreadyExists = _ODA_Drawings.OdDbLayerState_kAlreadyExists

    @staticmethod
    def importData(*args):
        return _ODA_Drawings.OdDbLayerState_importData(*args)

    @staticmethod
    def exportData(*args):
        return _ODA_Drawings.OdDbLayerState_exportData(*args)

    @staticmethod
    def setDescription(*args):
        return _ODA_Drawings.OdDbLayerState_setDescription(*args)

    @staticmethod
    def description(*args):
        return _ODA_Drawings.OdDbLayerState_description(*args)

    @staticmethod
    def hasViewportData(*args):
        return _ODA_Drawings.OdDbLayerState_hasViewportData(*args)

    @staticmethod
    def addLayerStateLayers(*args):
        return _ODA_Drawings.OdDbLayerState_addLayerStateLayers(*args)

    @staticmethod
    def removeLayerStateLayers(*args):
        return _ODA_Drawings.OdDbLayerState_removeLayerStateLayers(*args)

    @staticmethod
    def saveGroup(*args):
        return _ODA_Drawings.OdDbLayerState_saveGroup(*args)

    def __init__(self, *args):
        _ODA_Drawings.OdDbLayerState_swiginit(self, _ODA_Drawings.new_OdDbLayerState(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLayerState

# Register OdDbLayerState in _ODA_Drawings:
_ODA_Drawings.OdDbLayerState_swigregister(OdDbLayerState)

def OdDbLayerState_dictionaryId(*args):
    return _ODA_Drawings.OdDbLayerState_dictionaryId(*args)

def OdDbLayerState_has(*args):
    return _ODA_Drawings.OdDbLayerState_has(*args)

def OdDbLayerState_save(*args):
    return _ODA_Drawings.OdDbLayerState_save(*args)

def OdDbLayerState_restore(*args):
    return _ODA_Drawings.OdDbLayerState_restore(*args)

def OdDbLayerState_setMask(*args):
    return _ODA_Drawings.OdDbLayerState_setMask(*args)

def OdDbLayerState_mask(*args):
    return _ODA_Drawings.OdDbLayerState_mask(*args)

def OdDbLayerState_remove(*args):
    return _ODA_Drawings.OdDbLayerState_remove(*args)

def OdDbLayerState_rename(*args):
    return _ODA_Drawings.OdDbLayerState_rename(*args)

def OdDbLayerState_importData(*args):
    return _ODA_Drawings.OdDbLayerState_importData(*args)

def OdDbLayerState_exportData(*args):
    return _ODA_Drawings.OdDbLayerState_exportData(*args)

def OdDbLayerState_setDescription(*args):
    return _ODA_Drawings.OdDbLayerState_setDescription(*args)

def OdDbLayerState_description(*args):
    return _ODA_Drawings.OdDbLayerState_description(*args)

def OdDbLayerState_hasViewportData(*args):
    return _ODA_Drawings.OdDbLayerState_hasViewportData(*args)

def OdDbLayerState_addLayerStateLayers(*args):
    return _ODA_Drawings.OdDbLayerState_addLayerStateLayers(*args)

def OdDbLayerState_removeLayerStateLayers(*args):
    return _ODA_Drawings.OdDbLayerState_removeLayerStateLayers(*args)

def OdDbLayerState_saveGroup(*args):
    return _ODA_Drawings.OdDbLayerState_saveGroup(*args)

class OdDbJoinEntityPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbJoinEntityPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbJoinEntityPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbJoinEntityPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbJoinEntityPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbJoinEntityPE_createObject(*args)

    def joinEntities(self, *args):
        return _ODA_Drawings.OdDbJoinEntityPE_joinEntities(self, *args)

    def joinEntity(self, *args):
        return _ODA_Drawings.OdDbJoinEntityPE_joinEntity(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbJoinEntityPE

# Register OdDbJoinEntityPE in _ODA_Drawings:
_ODA_Drawings.OdDbJoinEntityPE_swigregister(OdDbJoinEntityPE)

def OdDbJoinEntityPE_cast(*args):
    return _ODA_Drawings.OdDbJoinEntityPE_cast(*args)

def OdDbJoinEntityPE_desc(*args):
    return _ODA_Drawings.OdDbJoinEntityPE_desc(*args)

def OdDbJoinEntityPE_createObject(*args):
    return _ODA_Drawings.OdDbJoinEntityPE_createObject(*args)

class OdGsLayoutHelper(ODA_Kernel.OdGsDevice):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdGsLayoutHelper_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdGsLayoutHelper_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdGsLayoutHelper_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdGsLayoutHelper_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdGsLayoutHelper_createObject(*args)

    def layoutId(self, *args):
        return _ODA_Drawings.OdGsLayoutHelper_layoutId(self, *args)

    def activeView(self, *args):
        return _ODA_Drawings.OdGsLayoutHelper_activeView(self, *args)

    def makeViewActive(self, *args):
        return _ODA_Drawings.OdGsLayoutHelper_makeViewActive(self, *args)

    def gsModel(self, *args):
        return _ODA_Drawings.OdGsLayoutHelper_gsModel(self, *args)

    def underlyingDevice(self, *args):
        return _ODA_Drawings.OdGsLayoutHelper_underlyingDevice(self, *args)

    def setActiveViewport(self, *args):
        return _ODA_Drawings.OdGsLayoutHelper_setActiveViewport(self, *args)

    def restoreGsViewDbLinkState(self, *args):
        return _ODA_Drawings.OdGsLayoutHelper_restoreGsViewDbLinkState(self, *args)

    def supportLayoutGsStateSaving(self, *args):
        return _ODA_Drawings.OdGsLayoutHelper_supportLayoutGsStateSaving(self, *args)

    def storeLayoutGsState(self, *args):
        return _ODA_Drawings.OdGsLayoutHelper_storeLayoutGsState(self, *args)

    @staticmethod
    def extractLayoutIdForGsState(*args):
        return _ODA_Drawings.OdGsLayoutHelper_extractLayoutIdForGsState(*args)

    def restoreLayoutGsState(self, *args):
        return _ODA_Drawings.OdGsLayoutHelper_restoreLayoutGsState(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdGsLayoutHelper

# Register OdGsLayoutHelper in _ODA_Drawings:
_ODA_Drawings.OdGsLayoutHelper_swigregister(OdGsLayoutHelper)

def OdGsLayoutHelper_cast(*args):
    return _ODA_Drawings.OdGsLayoutHelper_cast(*args)

def OdGsLayoutHelper_desc(*args):
    return _ODA_Drawings.OdGsLayoutHelper_desc(*args)

def OdGsLayoutHelper_createObject(*args):
    return _ODA_Drawings.OdGsLayoutHelper_createObject(*args)

def OdGsLayoutHelper_extractLayoutIdForGsState(*args):
    return _ODA_Drawings.OdGsLayoutHelper_extractLayoutIdForGsState(*args)

class OdGsPaperLayoutHelper(OdGsLayoutHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdGsPaperLayoutHelper_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdGsPaperLayoutHelper_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdGsPaperLayoutHelper_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdGsPaperLayoutHelper_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdGsPaperLayoutHelper_createObject(*args)

    def overallView(self, *args):
        return _ODA_Drawings.OdGsPaperLayoutHelper_overallView(self, *args)

    def makeViewOverall(self, *args):
        return _ODA_Drawings.OdGsPaperLayoutHelper_makeViewOverall(self, *args)

    def initGsView(self, *args):
        return _ODA_Drawings.OdGsPaperLayoutHelper_initGsView(self, *args)

    def addViewport(self, *args):
        return _ODA_Drawings.OdGsPaperLayoutHelper_addViewport(self, *args)

    def insertViewport(self, *args):
        return _ODA_Drawings.OdGsPaperLayoutHelper_insertViewport(self, *args)
    kVpScreenFilter = _ODA_Drawings.OdGsPaperLayoutHelper_kVpScreenFilter
    kVpSizeFilter = _ODA_Drawings.OdGsPaperLayoutHelper_kVpSizeFilter
    kVpMaxActFilter = _ODA_Drawings.OdGsPaperLayoutHelper_kVpMaxActFilter
    kVpBrDefault = _ODA_Drawings.OdGsPaperLayoutHelper_kVpBrDefault
    kVpBrPlot = _ODA_Drawings.OdGsPaperLayoutHelper_kVpBrPlot
    kVpBrAll = _ODA_Drawings.OdGsPaperLayoutHelper_kVpBrAll
    kVpFilterVisible = _ODA_Drawings.OdGsPaperLayoutHelper_kVpFilterVisible
    kVpFilterInvisible = _ODA_Drawings.OdGsPaperLayoutHelper_kVpFilterInvisible
    kVpFilterDisable = _ODA_Drawings.OdGsPaperLayoutHelper_kVpFilterDisable

    def setViewportFilter(self, *args):
        return _ODA_Drawings.OdGsPaperLayoutHelper_setViewportFilter(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdGsPaperLayoutHelper

# Register OdGsPaperLayoutHelper in _ODA_Drawings:
_ODA_Drawings.OdGsPaperLayoutHelper_swigregister(OdGsPaperLayoutHelper)

def OdGsPaperLayoutHelper_cast(*args):
    return _ODA_Drawings.OdGsPaperLayoutHelper_cast(*args)

def OdGsPaperLayoutHelper_desc(*args):
    return _ODA_Drawings.OdGsPaperLayoutHelper_desc(*args)

def OdGsPaperLayoutHelper_createObject(*args):
    return _ODA_Drawings.OdGsPaperLayoutHelper_createObject(*args)

class OdGsModelLayoutHelper(OdGsLayoutHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdGsModelLayoutHelper_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdGsModelLayoutHelper_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdGsModelLayoutHelper_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdGsModelLayoutHelper_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdGsModelLayoutHelper_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdGsModelLayoutHelper

# Register OdGsModelLayoutHelper in _ODA_Drawings:
_ODA_Drawings.OdGsModelLayoutHelper_swigregister(OdGsModelLayoutHelper)

def OdGsModelLayoutHelper_cast(*args):
    return _ODA_Drawings.OdGsModelLayoutHelper_cast(*args)

def OdGsModelLayoutHelper_desc(*args):
    return _ODA_Drawings.OdGsModelLayoutHelper_desc(*args)

def OdGsModelLayoutHelper_createObject(*args):
    return _ODA_Drawings.OdGsModelLayoutHelper_createObject(*args)


def setupActiveLayoutViews(*args):
    return _ODA_Drawings.setupActiveLayoutViews(*args)

def setupLayoutViews(*args):
    return _ODA_Drawings.setupLayoutViews(*args)

def setupPalette(*args):
    return _ODA_Drawings.setupPalette(*args)
class OdDbGripPointsPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbGripPointsPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbGripPointsPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbGripPointsPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbGripPointsPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGripPointsPE_createObject(*args)

    def getGripPoints(self, *args):
        return _ODA_Drawings.OdDbGripPointsPE_getGripPoints(self, *args)

    def moveGripPointsAt(self, *args):
        return _ODA_Drawings.OdDbGripPointsPE_moveGripPointsAt(self, *args)

    def getStretchPoints(self, *args):
        return _ODA_Drawings.OdDbGripPointsPE_getStretchPoints(self, *args)

    def moveStretchPointsAt(self, *args):
        return _ODA_Drawings.OdDbGripPointsPE_moveStretchPointsAt(self, *args)

    def getOsnapPoints(self, *args):
        return _ODA_Drawings.OdDbGripPointsPE_getOsnapPoints(self, *args)

    def getGripPointsAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbGripPointsPE_getGripPointsAtSubentPath(self, *args)

    def moveGripPointsAtSubentPaths(self, *args):
        return _ODA_Drawings.OdDbGripPointsPE_moveGripPointsAtSubentPaths(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGripPointsPE

# Register OdDbGripPointsPE in _ODA_Drawings:
_ODA_Drawings.OdDbGripPointsPE_swigregister(OdDbGripPointsPE)

def OdDbGripPointsPE_cast(*args):
    return _ODA_Drawings.OdDbGripPointsPE_cast(*args)

def OdDbGripPointsPE_desc(*args):
    return _ODA_Drawings.OdDbGripPointsPE_desc(*args)

def OdDbGripPointsPE_createObject(*args):
    return _ODA_Drawings.OdDbGripPointsPE_createObject(*args)

class OdDbGeoDataPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbGeoDataPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbGeoDataPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbGeoDataPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbGeoDataPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGeoDataPE_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGeoDataPE

    def transformFromLonLatAlt(self, *args):
        return _ODA_Drawings.OdDbGeoDataPE_transformFromLonLatAlt(self, *args)

    def transformToLonLatAlt(self, *args):
        return _ODA_Drawings.OdDbGeoDataPE_transformToLonLatAlt(self, *args)

    def validateCs(self, *args):
        return _ODA_Drawings.OdDbGeoDataPE_validateCs(self, *args)

    def parseCsName(self, *args):
        return _ODA_Drawings.OdDbGeoDataPE_parseCsName(self, *args)

    def geoCoordinateSystemWillChange(self, *args):
        return _ODA_Drawings.OdDbGeoDataPE_geoCoordinateSystemWillChange(self, *args)

    def geoCoordinateSystemChanged(self, *args):
        return _ODA_Drawings.OdDbGeoDataPE_geoCoordinateSystemChanged(self, *args)

    def parseIdFromXml(self, *args):
        return _ODA_Drawings.OdDbGeoDataPE_parseIdFromXml(self, *args)

# Register OdDbGeoDataPE in _ODA_Drawings:
_ODA_Drawings.OdDbGeoDataPE_swigregister(OdDbGeoDataPE)

def OdDbGeoDataPE_cast(*args):
    return _ODA_Drawings.OdDbGeoDataPE_cast(*args)

def OdDbGeoDataPE_desc(*args):
    return _ODA_Drawings.OdDbGeoDataPE_desc(*args)

def OdDbGeoDataPE_createObject(*args):
    return _ODA_Drawings.OdDbGeoDataPE_createObject(*args)

class OdDbGeEdgesDxfIO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def outFields(*args):
        return _ODA_Drawings.OdDbGeEdgesDxfIO_outFields(*args)

    @staticmethod
    def inFields(*args):
        return _ODA_Drawings.OdDbGeEdgesDxfIO_inFields(*args)

    def __init__(self, *args):
        _ODA_Drawings.OdDbGeEdgesDxfIO_swiginit(self, _ODA_Drawings.new_OdDbGeEdgesDxfIO(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGeEdgesDxfIO

# Register OdDbGeEdgesDxfIO in _ODA_Drawings:
_ODA_Drawings.OdDbGeEdgesDxfIO_swigregister(OdDbGeEdgesDxfIO)

def OdDbGeEdgesDxfIO_outFields(*args):
    return _ODA_Drawings.OdDbGeEdgesDxfIO_outFields(*args)

def OdDbGeEdgesDxfIO_inFields(*args):
    return _ODA_Drawings.OdDbGeEdgesDxfIO_inFields(*args)

class OdDbExtrudedSurface(OdDbSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbExtrudedSurface_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbExtrudedSurface_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbExtrudedSurface_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbExtrudedSurface_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbExtrudedSurface_createObject(*args)

    def createExtrudedSurface(self, *args):
        return _ODA_Drawings.OdDbExtrudedSurface_createExtrudedSurface(self, *args)

    def getSweepEntity(self, *args):
        return _ODA_Drawings.OdDbExtrudedSurface_getSweepEntity(self, *args)

    def getSweepVec(self, *args):
        return _ODA_Drawings.OdDbExtrudedSurface_getSweepVec(self, *args)

    def setSweepVec(self, *args):
        return _ODA_Drawings.OdDbExtrudedSurface_setSweepVec(self, *args)

    def getHeight(self, *args):
        return _ODA_Drawings.OdDbExtrudedSurface_getHeight(self, *args)

    def setHeight(self, *args):
        return _ODA_Drawings.OdDbExtrudedSurface_setHeight(self, *args)

    def getSweepOptions(self, *args):
        return _ODA_Drawings.OdDbExtrudedSurface_getSweepOptions(self, *args)

    def setSweepOptions(self, *args):
        return _ODA_Drawings.OdDbExtrudedSurface_setSweepOptions(self, *args)

    def setExtrude(self, *args):
        return _ODA_Drawings.OdDbExtrudedSurface_setExtrude(self, *args)

    def subTransformBy(self, *args):
        return _ODA_Drawings.OdDbExtrudedSurface_subTransformBy(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbExtrudedSurface_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbExtrudedSurface_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbExtrudedSurface_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbExtrudedSurface_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbExtrudedSurface_subGetClassID(self, *args)

    def isDependent(self, *args):
        return _ODA_Drawings.OdDbExtrudedSurface_isDependent(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbExtrudedSurface

# Register OdDbExtrudedSurface in _ODA_Drawings:
_ODA_Drawings.OdDbExtrudedSurface_swigregister(OdDbExtrudedSurface)

def OdDbExtrudedSurface_cast(*args):
    return _ODA_Drawings.OdDbExtrudedSurface_cast(*args)

def OdDbExtrudedSurface_desc(*args):
    return _ODA_Drawings.OdDbExtrudedSurface_desc(*args)

def OdDbExtrudedSurface_createObject(*args):
    return _ODA_Drawings.OdDbExtrudedSurface_createObject(*args)

class OdDbEvalWatcherPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbEvalWatcherPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbEvalWatcherPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbEvalWatcherPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbEvalWatcherPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbEvalWatcherPE_createObject(*args)

    def modified(self, *args):
        return _ODA_Drawings.OdDbEvalWatcherPE_modified(self, *args)

    def openedForModify(self, *args):
        return _ODA_Drawings.OdDbEvalWatcherPE_openedForModify(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbEvalWatcherPE

# Register OdDbEvalWatcherPE in _ODA_Drawings:
_ODA_Drawings.OdDbEvalWatcherPE_swigregister(OdDbEvalWatcherPE)

def OdDbEvalWatcherPE_cast(*args):
    return _ODA_Drawings.OdDbEvalWatcherPE_cast(*args)

def OdDbEvalWatcherPE_desc(*args):
    return _ODA_Drawings.OdDbEvalWatcherPE_desc(*args)

def OdDbEvalWatcherPE_createObject(*args):
    return _ODA_Drawings.OdDbEvalWatcherPE_createObject(*args)

class OdDbHatchWatcherPE(OdDbEvalWatcherPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def modified(self, *args):
        return _ODA_Drawings.OdDbHatchWatcherPE_modified(self, *args)

    def modifiedItself(self, *args):
        return _ODA_Drawings.OdDbHatchWatcherPE_modifiedItself(self, *args)

    def evaluate(self, *args):
        return _ODA_Drawings.OdDbHatchWatcherPE_evaluate(self, *args)

    def getLoopFromIds(self, *args):
        return _ODA_Drawings.OdDbHatchWatcherPE_getLoopFromIds(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbHatchWatcherPE

# Register OdDbHatchWatcherPE in _ODA_Drawings:
_ODA_Drawings.OdDbHatchWatcherPE_swigregister(OdDbHatchWatcherPE)

class OdDbLeaderWatcherPE(OdDbEvalWatcherPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def modified(self, *args):
        return _ODA_Drawings.OdDbLeaderWatcherPE_modified(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbLeaderWatcherPE

# Register OdDbLeaderWatcherPE in _ODA_Drawings:
_ODA_Drawings.OdDbLeaderWatcherPE_swigregister(OdDbLeaderWatcherPE)

class OdDbDimensionWatcherPE(OdDbEvalWatcherPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def modified(self, *args):
        return _ODA_Drawings.OdDbDimensionWatcherPE_modified(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDimensionWatcherPE

# Register OdDbDimensionWatcherPE in _ODA_Drawings:
_ODA_Drawings.OdDbDimensionWatcherPE_swigregister(OdDbDimensionWatcherPE)

class OdDbBreakDataWatcherPE(OdDbEvalWatcherPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def modified(self, *args):
        return _ODA_Drawings.OdDbBreakDataWatcherPE_modified(self, *args)

    def erased(self, *args):
        return _ODA_Drawings.OdDbBreakDataWatcherPE_erased(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBreakDataWatcherPE

# Register OdDbBreakDataWatcherPE in _ODA_Drawings:
_ODA_Drawings.OdDbBreakDataWatcherPE_swigregister(OdDbBreakDataWatcherPE)

class OdDbFcfWatcherPE(OdDbEvalWatcherPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def modified(self, *args):
        return _ODA_Drawings.OdDbFcfWatcherPE_modified(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbFcfWatcherPE

# Register OdDbFcfWatcherPE in _ODA_Drawings:
_ODA_Drawings.OdDbFcfWatcherPE_swigregister(OdDbFcfWatcherPE)

class OdDbDimAssocWatcherPE(OdDbEvalWatcherPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def copied(self, *args):
        return _ODA_Drawings.OdDbDimAssocWatcherPE_copied(self, *args)

    def erased(self, *args):
        return _ODA_Drawings.OdDbDimAssocWatcherPE_erased(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDimAssocWatcherPE

# Register OdDbDimAssocWatcherPE in _ODA_Drawings:
_ODA_Drawings.OdDbDimAssocWatcherPE_swigregister(OdDbDimAssocWatcherPE)

class OdDbTableWatcherPE(OdDbEvalWatcherPE):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def modified(self, *args):
        return _ODA_Drawings.OdDbTableWatcherPE_modified(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbTableWatcherPE

# Register OdDbTableWatcherPE in _ODA_Drawings:
_ODA_Drawings.OdDbTableWatcherPE_swigregister(OdDbTableWatcherPE)

class OdError_InvalidSysvarValue(ODA_Kernel.OdError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdError_InvalidSysvarValue_swiginit(self, _ODA_Drawings.new_OdError_InvalidSysvarValue(*args))

    def limmin(self, *args):
        return _ODA_Drawings.OdError_InvalidSysvarValue_limmin(self, *args)

    def limmax(self, *args):
        return _ODA_Drawings.OdError_InvalidSysvarValue_limmax(self, *args)

    def name(self, *args):
        return _ODA_Drawings.OdError_InvalidSysvarValue_name(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdError_InvalidSysvarValue

# Register OdError_InvalidSysvarValue in _ODA_Drawings:
_ODA_Drawings.OdError_InvalidSysvarValue_swigregister(OdError_InvalidSysvarValue)

class OdError_UnknownSysvar(ODA_Kernel.OdError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdError_UnknownSysvar_swiginit(self, _ODA_Drawings.new_OdError_UnknownSysvar(*args))

    def name(self, *args):
        return _ODA_Drawings.OdError_UnknownSysvar_name(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdError_UnknownSysvar

# Register OdError_UnknownSysvar in _ODA_Drawings:
_ODA_Drawings.OdError_UnknownSysvar_swigregister(OdError_UnknownSysvar)

class OdError_ModelSpaceSysvar(ODA_Kernel.OdError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdError_ModelSpaceSysvar_swiginit(self, _ODA_Drawings.new_OdError_ModelSpaceSysvar(*args))

    def name(self, *args):
        return _ODA_Drawings.OdError_ModelSpaceSysvar_name(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdError_ModelSpaceSysvar

# Register OdError_ModelSpaceSysvar in _ODA_Drawings:
_ODA_Drawings.OdError_ModelSpaceSysvar_swigregister(OdError_ModelSpaceSysvar)

class OdDbEntityWithGrDataPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbEntityWithGrDataPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbEntityWithGrDataPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbEntityWithGrDataPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbEntityWithGrDataPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbEntityWithGrDataPE_createObject(*args)

    def worldDraw(self, *args):
        return _ODA_Drawings.OdDbEntityWithGrDataPE_worldDraw(self, *args)

    @staticmethod
    def addX_to(*args):
        return _ODA_Drawings.OdDbEntityWithGrDataPE_addX_to(*args)

    @staticmethod
    def delX_from(*args):
        return _ODA_Drawings.OdDbEntityWithGrDataPE_delX_from(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbEntityWithGrDataPE

# Register OdDbEntityWithGrDataPE in _ODA_Drawings:
_ODA_Drawings.OdDbEntityWithGrDataPE_swigregister(OdDbEntityWithGrDataPE)

def OdDbEntityWithGrDataPE_cast(*args):
    return _ODA_Drawings.OdDbEntityWithGrDataPE_cast(*args)

def OdDbEntityWithGrDataPE_desc(*args):
    return _ODA_Drawings.OdDbEntityWithGrDataPE_desc(*args)

def OdDbEntityWithGrDataPE_createObject(*args):
    return _ODA_Drawings.OdDbEntityWithGrDataPE_createObject(*args)

def OdDbEntityWithGrDataPE_addX_to(*args):
    return _ODA_Drawings.OdDbEntityWithGrDataPE_addX_to(*args)

def OdDbEntityWithGrDataPE_delX_from(*args):
    return _ODA_Drawings.OdDbEntityWithGrDataPE_delX_from(*args)

class OdDbOsnapOverrule(ODA_Kernel.OdRxOverrule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbOsnapOverrule_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbOsnapOverrule_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbOsnapOverrule_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbOsnapOverrule_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbOsnapOverrule_createObject(*args)

    def getOsnapPoints(self, *args):
        return _ODA_Drawings.OdDbOsnapOverrule_getOsnapPoints(self, *args)

    def isContentSnappable(self, *args):
        return _ODA_Drawings.OdDbOsnapOverrule_isContentSnappable(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbOsnapOverrule

# Register OdDbOsnapOverrule in _ODA_Drawings:
_ODA_Drawings.OdDbOsnapOverrule_swigregister(OdDbOsnapOverrule)

def OdDbOsnapOverrule_cast(*args):
    return _ODA_Drawings.OdDbOsnapOverrule_cast(*args)

def OdDbOsnapOverrule_desc(*args):
    return _ODA_Drawings.OdDbOsnapOverrule_desc(*args)

def OdDbOsnapOverrule_createObject(*args):
    return _ODA_Drawings.OdDbOsnapOverrule_createObject(*args)

class OdDbTransformOverrule(ODA_Kernel.OdRxOverrule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbTransformOverrule_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbTransformOverrule_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbTransformOverrule_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbTransformOverrule_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbTransformOverrule_createObject(*args)

    def transformBy(self, *args):
        return _ODA_Drawings.OdDbTransformOverrule_transformBy(self, *args)

    def getTransformedCopy(self, *args):
        return _ODA_Drawings.OdDbTransformOverrule_getTransformedCopy(self, *args)

    def explode(self, *args):
        return _ODA_Drawings.OdDbTransformOverrule_explode(self, *args)

    def cloneMeForDragging(self, *args):
        return _ODA_Drawings.OdDbTransformOverrule_cloneMeForDragging(self, *args)

    def hideMeForDragging(self, *args):
        return _ODA_Drawings.OdDbTransformOverrule_hideMeForDragging(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbTransformOverrule

# Register OdDbTransformOverrule in _ODA_Drawings:
_ODA_Drawings.OdDbTransformOverrule_swigregister(OdDbTransformOverrule)

def OdDbTransformOverrule_cast(*args):
    return _ODA_Drawings.OdDbTransformOverrule_cast(*args)

def OdDbTransformOverrule_desc(*args):
    return _ODA_Drawings.OdDbTransformOverrule_desc(*args)

def OdDbTransformOverrule_createObject(*args):
    return _ODA_Drawings.OdDbTransformOverrule_createObject(*args)

class OdDbGripOverrule(ODA_Kernel.OdRxOverrule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbGripOverrule_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbGripOverrule_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbGripOverrule_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbGripOverrule_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGripOverrule_createObject(*args)

    def getGripPoints(self, *args):
        return _ODA_Drawings.OdDbGripOverrule_getGripPoints(self, *args)

    def moveGripPointsAt(self, *args):
        return _ODA_Drawings.OdDbGripOverrule_moveGripPointsAt(self, *args)

    def getStretchPoints(self, *args):
        return _ODA_Drawings.OdDbGripOverrule_getStretchPoints(self, *args)

    def moveStretchPointsAt(self, *args):
        return _ODA_Drawings.OdDbGripOverrule_moveStretchPointsAt(self, *args)

    def gripStatus(self, *args):
        return _ODA_Drawings.OdDbGripOverrule_gripStatus(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGripOverrule

# Register OdDbGripOverrule in _ODA_Drawings:
_ODA_Drawings.OdDbGripOverrule_swigregister(OdDbGripOverrule)

def OdDbGripOverrule_cast(*args):
    return _ODA_Drawings.OdDbGripOverrule_cast(*args)

def OdDbGripOverrule_desc(*args):
    return _ODA_Drawings.OdDbGripOverrule_desc(*args)

def OdDbGripOverrule_createObject(*args):
    return _ODA_Drawings.OdDbGripOverrule_createObject(*args)

class OdDbSubentityOverrule(ODA_Kernel.OdRxOverrule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSubentityOverrule_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSubentityOverrule_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSubentityOverrule_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSubentityOverrule_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSubentityOverrule_createObject(*args)

    def deleteSubentPaths(self, *args):
        return _ODA_Drawings.OdDbSubentityOverrule_deleteSubentPaths(self, *args)

    def addSubentPaths(self, *args):
        return _ODA_Drawings.OdDbSubentityOverrule_addSubentPaths(self, *args)

    def transformSubentPathsBy(self, *args):
        return _ODA_Drawings.OdDbSubentityOverrule_transformSubentPathsBy(self, *args)

    def getGripPointsAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbSubentityOverrule_getGripPointsAtSubentPath(self, *args)

    def moveGripPointsAtSubentPaths(self, *args):
        return _ODA_Drawings.OdDbSubentityOverrule_moveGripPointsAtSubentPaths(self, *args)

    def getSubentPathsAtGsMarker(self, *args):
        return _ODA_Drawings.OdDbSubentityOverrule_getSubentPathsAtGsMarker(self, *args)

    def getGsMarkersAtSubentPath(self, *args):
        return _ODA_Drawings.OdDbSubentityOverrule_getGsMarkersAtSubentPath(self, *args)

    def subentPtr(self, *args):
        return _ODA_Drawings.OdDbSubentityOverrule_subentPtr(self, *args)

    def getCompoundObjectTransform(self, *args):
        return _ODA_Drawings.OdDbSubentityOverrule_getCompoundObjectTransform(self, *args)

    def getSubentPathGeomExtents(self, *args):
        return _ODA_Drawings.OdDbSubentityOverrule_getSubentPathGeomExtents(self, *args)

    def subentGripStatus(self, *args):
        return _ODA_Drawings.OdDbSubentityOverrule_subentGripStatus(self, *args)

    def getSubentClassId(self, *args):
        return _ODA_Drawings.OdDbSubentityOverrule_getSubentClassId(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSubentityOverrule

# Register OdDbSubentityOverrule in _ODA_Drawings:
_ODA_Drawings.OdDbSubentityOverrule_swigregister(OdDbSubentityOverrule)

def OdDbSubentityOverrule_cast(*args):
    return _ODA_Drawings.OdDbSubentityOverrule_cast(*args)

def OdDbSubentityOverrule_desc(*args):
    return _ODA_Drawings.OdDbSubentityOverrule_desc(*args)

def OdDbSubentityOverrule_createObject(*args):
    return _ODA_Drawings.OdDbSubentityOverrule_createObject(*args)

class OdDbHighlightOverrule(ODA_Kernel.OdRxOverrule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbHighlightOverrule_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbHighlightOverrule_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbHighlightOverrule_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbHighlightOverrule_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbHighlightOverrule_createObject(*args)

    def highlight(self, *args):
        return _ODA_Drawings.OdDbHighlightOverrule_highlight(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbHighlightOverrule

# Register OdDbHighlightOverrule in _ODA_Drawings:
_ODA_Drawings.OdDbHighlightOverrule_swigregister(OdDbHighlightOverrule)

def OdDbHighlightOverrule_cast(*args):
    return _ODA_Drawings.OdDbHighlightOverrule_cast(*args)

def OdDbHighlightOverrule_desc(*args):
    return _ODA_Drawings.OdDbHighlightOverrule_desc(*args)

def OdDbHighlightOverrule_createObject(*args):
    return _ODA_Drawings.OdDbHighlightOverrule_createObject(*args)

class OdDbVisibilityOverrule(ODA_Kernel.OdRxOverrule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbVisibilityOverrule_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbVisibilityOverrule_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbVisibilityOverrule_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbVisibilityOverrule_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbVisibilityOverrule_createObject(*args)

    def visibility(self, *args):
        return _ODA_Drawings.OdDbVisibilityOverrule_visibility(self, *args)

    def setVisibility(self, *args):
        return _ODA_Drawings.OdDbVisibilityOverrule_setVisibility(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbVisibilityOverrule

# Register OdDbVisibilityOverrule in _ODA_Drawings:
_ODA_Drawings.OdDbVisibilityOverrule_swigregister(OdDbVisibilityOverrule)

def OdDbVisibilityOverrule_cast(*args):
    return _ODA_Drawings.OdDbVisibilityOverrule_cast(*args)

def OdDbVisibilityOverrule_desc(*args):
    return _ODA_Drawings.OdDbVisibilityOverrule_desc(*args)

def OdDbVisibilityOverrule_createObject(*args):
    return _ODA_Drawings.OdDbVisibilityOverrule_createObject(*args)

class OdDbGeometryOverrule(ODA_Kernel.OdRxOverrule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbGeometryOverrule_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbGeometryOverrule_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbGeometryOverrule_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbGeometryOverrule_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGeometryOverrule_createObject(*args)

    def intersectWith(self, *args):
        return _ODA_Drawings.OdDbGeometryOverrule_intersectWith(self, *args)

    def getGeomExtents(self, *args):
        return _ODA_Drawings.OdDbGeometryOverrule_getGeomExtents(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGeometryOverrule

# Register OdDbGeometryOverrule in _ODA_Drawings:
_ODA_Drawings.OdDbGeometryOverrule_swigregister(OdDbGeometryOverrule)

def OdDbGeometryOverrule_cast(*args):
    return _ODA_Drawings.OdDbGeometryOverrule_cast(*args)

def OdDbGeometryOverrule_desc(*args):
    return _ODA_Drawings.OdDbGeometryOverrule_desc(*args)

def OdDbGeometryOverrule_createObject(*args):
    return _ODA_Drawings.OdDbGeometryOverrule_createObject(*args)

class OdDbEntityIntersectionPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbEntityIntersectionPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbEntityIntersectionPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbEntityIntersectionPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbEntityIntersectionPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbEntityIntersectionPE_createObject(*args)

    def intersectWith(self, *args):
        return _ODA_Drawings.OdDbEntityIntersectionPE_intersectWith(self, *args)

    def boundingBoxIntersectWith(self, *args):
        return _ODA_Drawings.OdDbEntityIntersectionPE_boundingBoxIntersectWith(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbEntityIntersectionPE

# Register OdDbEntityIntersectionPE in _ODA_Drawings:
_ODA_Drawings.OdDbEntityIntersectionPE_swigregister(OdDbEntityIntersectionPE)

def OdDbEntityIntersectionPE_cast(*args):
    return _ODA_Drawings.OdDbEntityIntersectionPE_cast(*args)

def OdDbEntityIntersectionPE_desc(*args):
    return _ODA_Drawings.OdDbEntityIntersectionPE_desc(*args)

def OdDbEntityIntersectionPE_createObject(*args):
    return _ODA_Drawings.OdDbEntityIntersectionPE_createObject(*args)

class OdDbDimData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kDimEditable = _ODA_Drawings.OdDbDimData_kDimEditable
    kDimInvisible = _ODA_Drawings.OdDbDimData_kDimInvisible
    kDimFocal = _ODA_Drawings.OdDbDimData_kDimFocal
    kDimHideIfValueIsZero = _ODA_Drawings.OdDbDimData_kDimHideIfValueIsZero
    kDimEmptyData = _ODA_Drawings.OdDbDimData_kDimEmptyData
    kDimResultantLength = _ODA_Drawings.OdDbDimData_kDimResultantLength
    kDimDeltaLength = _ODA_Drawings.OdDbDimData_kDimDeltaLength
    kDimResultantAngle = _ODA_Drawings.OdDbDimData_kDimResultantAngle
    kDimDeltaAngle = _ODA_Drawings.OdDbDimData_kDimDeltaAngle
    kDimRadius = _ODA_Drawings.OdDbDimData_kDimRadius
    kDimCustomValue = _ODA_Drawings.OdDbDimData_kDimCustomValue
    kDimConstrained = _ODA_Drawings.OdDbDimData_kDimConstrained
    kDimCustomString = _ODA_Drawings.OdDbDimData_kDimCustomString
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDimData

    def __init__(self, *args):
        _ODA_Drawings.OdDbDimData_swiginit(self, _ODA_Drawings.new_OdDbDimData(*args))

    def dimension(self, *args):
        return _ODA_Drawings.OdDbDimData_dimension(self, *args)

    def setDimension(self, *args):
        return _ODA_Drawings.OdDbDimData_setDimension(self, *args)

    def ownerId(self, *args):
        return _ODA_Drawings.OdDbDimData_ownerId(self, *args)

    def setOwnerId(self, *args):
        return _ODA_Drawings.OdDbDimData_setOwnerId(self, *args)

    def bitFlags(self, *args):
        return _ODA_Drawings.OdDbDimData_bitFlags(self, *args)

    def setBitFlags(self, *args):
        return _ODA_Drawings.OdDbDimData_setBitFlags(self, *args)

    def isDimFocal(self, *args):
        return _ODA_Drawings.OdDbDimData_isDimFocal(self, *args)

    def setDimFocal(self, *args):
        return _ODA_Drawings.OdDbDimData_setDimFocal(self, *args)

    def isDimEditable(self, *args):
        return _ODA_Drawings.OdDbDimData_isDimEditable(self, *args)

    def setDimEditable(self, *args):
        return _ODA_Drawings.OdDbDimData_setDimEditable(self, *args)

    def isDimInvisible(self, *args):
        return _ODA_Drawings.OdDbDimData_isDimInvisible(self, *args)

    def setDimInvisible(self, *args):
        return _ODA_Drawings.OdDbDimData_setDimInvisible(self, *args)

    def isDimHideIfValueIsZero(self, *args):
        return _ODA_Drawings.OdDbDimData_isDimHideIfValueIsZero(self, *args)

    def setDimHideIfValueIsZero(self, *args):
        return _ODA_Drawings.OdDbDimData_setDimHideIfValueIsZero(self, *args)

    def appData(self, *args):
        return _ODA_Drawings.OdDbDimData_appData(self, *args)

    def setAppData(self, *args):
        return _ODA_Drawings.OdDbDimData_setAppData(self, *args)

    def dimValueFunc(self, *args):
        return _ODA_Drawings.OdDbDimData_dimValueFunc(self, *args)

    def setDimValueFunc(self, *args):
        return _ODA_Drawings.OdDbDimData_setDimValueFunc(self, *args)

    def customStringFunc(self, *args):
        return _ODA_Drawings.OdDbDimData_customStringFunc(self, *args)

    def setCustomStringFunc(self, *args):
        return _ODA_Drawings.OdDbDimData_setCustomStringFunc(self, *args)

    def isDimResultantLength(self, *args):
        return _ODA_Drawings.OdDbDimData_isDimResultantLength(self, *args)

    def setDimResultantLength(self, *args):
        return _ODA_Drawings.OdDbDimData_setDimResultantLength(self, *args)

    def isDimDeltaLength(self, *args):
        return _ODA_Drawings.OdDbDimData_isDimDeltaLength(self, *args)

    def setDimDeltaLength(self, *args):
        return _ODA_Drawings.OdDbDimData_setDimDeltaLength(self, *args)

    def isDimResultantAngle(self, *args):
        return _ODA_Drawings.OdDbDimData_isDimResultantAngle(self, *args)

    def setDimResultantAngle(self, *args):
        return _ODA_Drawings.OdDbDimData_setDimResultantAngle(self, *args)

    def isDimDeltaAngle(self, *args):
        return _ODA_Drawings.OdDbDimData_isDimDeltaAngle(self, *args)

    def setDimDeltaAngle(self, *args):
        return _ODA_Drawings.OdDbDimData_setDimDeltaAngle(self, *args)

    def isDimRadius(self, *args):
        return _ODA_Drawings.OdDbDimData_isDimRadius(self, *args)

    def setDimRadius(self, *args):
        return _ODA_Drawings.OdDbDimData_setDimRadius(self, *args)

    def isCustomDimValue(self, *args):
        return _ODA_Drawings.OdDbDimData_isCustomDimValue(self, *args)

    def setCustomDimValue(self, *args):
        return _ODA_Drawings.OdDbDimData_setCustomDimValue(self, *args)

    def isConstrained(self, *args):
        return _ODA_Drawings.OdDbDimData_isConstrained(self, *args)

    def setConstrain(self, *args):
        return _ODA_Drawings.OdDbDimData_setConstrain(self, *args)

    def isCustomString(self, *args):
        return _ODA_Drawings.OdDbDimData_isCustomString(self, *args)

    def setCustomString(self, *args):
        return _ODA_Drawings.OdDbDimData_setCustomString(self, *args)

# Register OdDbDimData in _ODA_Drawings:
_ODA_Drawings.OdDbDimData_swigregister(OdDbDimData)

class OdDieselService(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getSystemVariable(self, *args):
        return _ODA_Drawings.OdDieselService_getSystemVariable(self, *args)

    def getUnits(self, *args):
        return _ODA_Drawings.OdDieselService_getUnits(self, *args)

    def getEnvironmentVariable(self, *args):
        return _ODA_Drawings.OdDieselService_getEnvironmentVariable(self, *args)

    def getDrawingProperty(self, *args):
        return _ODA_Drawings.OdDieselService_getDrawingProperty(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDieselService

# Register OdDieselService in _ODA_Drawings:
_ODA_Drawings.OdDieselService_swigregister(OdDieselService)


def OdDieselEvaluate(*args):
    return _ODA_Drawings.OdDieselEvaluate(*args)
class OdDbDgnLSPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDgnLSPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDgnLSPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDgnLSPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDgnLSPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDgnLSPE_createObject(*args)
    kDgnLSProcessed = _ODA_Drawings.OdDbDgnLSPE_kDgnLSProcessed

    def hasDgnLSData(self, *args):
        return _ODA_Drawings.OdDbDgnLSPE_hasDgnLSData(self, *args)

    def setupDgnLSData(self, *args):
        return _ODA_Drawings.OdDbDgnLSPE_setupDgnLSData(self, *args)

    def prepareDgnLSCache(self, *args):
        return _ODA_Drawings.OdDbDgnLSPE_prepareDgnLSCache(self, *args)

    def setupDgnLSCache(self, *args):
        return _ODA_Drawings.OdDbDgnLSPE_setupDgnLSCache(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDgnLSPE

# Register OdDbDgnLSPE in _ODA_Drawings:
_ODA_Drawings.OdDbDgnLSPE_swigregister(OdDbDgnLSPE)

def OdDbDgnLSPE_cast(*args):
    return _ODA_Drawings.OdDbDgnLSPE_cast(*args)

def OdDbDgnLSPE_desc(*args):
    return _ODA_Drawings.OdDbDgnLSPE_desc(*args)

def OdDbDgnLSPE_createObject(*args):
    return _ODA_Drawings.OdDbDgnLSPE_createObject(*args)

class OdDbDgnLSModifiersPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDgnLSModifiersPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDgnLSModifiersPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDgnLSModifiersPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDgnLSModifiersPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDgnLSModifiersPE_createObject(*args)

    def hasDgnLSModifiersXData(self, *args):
        return _ODA_Drawings.OdDbDgnLSModifiersPE_hasDgnLSModifiersXData(self, *args)

    def readDgnLSModifiersXData(self, *args):
        return _ODA_Drawings.OdDbDgnLSModifiersPE_readDgnLSModifiersXData(self, *args)

    def writeDgnLSModifiersXData(self, *args):
        return _ODA_Drawings.OdDbDgnLSModifiersPE_writeDgnLSModifiersXData(self, *args)

    def removeDgnLSModifiersXData(self, *args):
        return _ODA_Drawings.OdDbDgnLSModifiersPE_removeDgnLSModifiersXData(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDgnLSModifiersPE

# Register OdDbDgnLSModifiersPE in _ODA_Drawings:
_ODA_Drawings.OdDbDgnLSModifiersPE_swigregister(OdDbDgnLSModifiersPE)

def OdDbDgnLSModifiersPE_cast(*args):
    return _ODA_Drawings.OdDbDgnLSModifiersPE_cast(*args)

def OdDbDgnLSModifiersPE_desc(*args):
    return _ODA_Drawings.OdDbDgnLSModifiersPE_desc(*args)

def OdDbDgnLSModifiersPE_createObject(*args):
    return _ODA_Drawings.OdDbDgnLSModifiersPE_createObject(*args)

class OdDbDataCell(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kUnknown = _ODA_Drawings.OdDbDataCell_kUnknown
    kInteger = _ODA_Drawings.OdDbDataCell_kInteger
    kDouble = _ODA_Drawings.OdDbDataCell_kDouble
    kCharPtr = _ODA_Drawings.OdDbDataCell_kCharPtr
    kPoint = _ODA_Drawings.OdDbDataCell_kPoint
    kObjectId = _ODA_Drawings.OdDbDataCell_kObjectId
    kHardOwnerId = _ODA_Drawings.OdDbDataCell_kHardOwnerId
    kSoftOwnerId = _ODA_Drawings.OdDbDataCell_kSoftOwnerId
    kHardPtrId = _ODA_Drawings.OdDbDataCell_kHardPtrId
    kSoftPtrId = _ODA_Drawings.OdDbDataCell_kSoftPtrId
    kBool = _ODA_Drawings.OdDbDataCell_kBool
    kVector = _ODA_Drawings.OdDbDataCell_kVector

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDataCell_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDataCell_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDataCell_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDataCell_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDataCell_createObject(*args)

    def init(self, *args):
        return _ODA_Drawings.OdDbDataCell_init(self, *args)

    def set(self, *args):
        return _ODA_Drawings.OdDbDataCell_set(self, *args)

    def get(self, *args):
        return _ODA_Drawings.OdDbDataCell_get(self, *args)

    def type(self, *args):
        return _ODA_Drawings.OdDbDataCell_type(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDataCell

# Register OdDbDataCell in _ODA_Drawings:
_ODA_Drawings.OdDbDataCell_swigregister(OdDbDataCell)

def OdDbDataCell_cast(*args):
    return _ODA_Drawings.OdDbDataCell_cast(*args)

def OdDbDataCell_desc(*args):
    return _ODA_Drawings.OdDbDataCell_desc(*args)

def OdDbDataCell_createObject(*args):
    return _ODA_Drawings.OdDbDataCell_createObject(*args)

class OdDbDataColumn(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDataColumn_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDataColumn_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDataColumn_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDataColumn_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDataColumn_createObject(*args)

    def physicalLength(self, *args):
        return _ODA_Drawings.OdDbDataColumn_physicalLength(self, *args)

    def growLength(self, *args):
        return _ODA_Drawings.OdDbDataColumn_growLength(self, *args)

    def setPhysicalLength(self, *args):
        return _ODA_Drawings.OdDbDataColumn_setPhysicalLength(self, *args)

    def setGrowLength(self, *args):
        return _ODA_Drawings.OdDbDataColumn_setGrowLength(self, *args)

    def setColumnType(self, *args):
        return _ODA_Drawings.OdDbDataColumn_setColumnType(self, *args)

    def columnType(self, *args):
        return _ODA_Drawings.OdDbDataColumn_columnType(self, *args)

    def setColumnName(self, *args):
        return _ODA_Drawings.OdDbDataColumn_setColumnName(self, *args)

    def columnName(self, *args):
        return _ODA_Drawings.OdDbDataColumn_columnName(self, *args)

    def getCellAt(self, *args):
        return _ODA_Drawings.OdDbDataColumn_getCellAt(self, *args)

    def setCellAt(self, *args):
        return _ODA_Drawings.OdDbDataColumn_setCellAt(self, *args)

    def appendCell(self, *args):
        return _ODA_Drawings.OdDbDataColumn_appendCell(self, *args)

    def insertCellAt(self, *args):
        return _ODA_Drawings.OdDbDataColumn_insertCellAt(self, *args)

    def removeCellAt(self, *args):
        return _ODA_Drawings.OdDbDataColumn_removeCellAt(self, *args)

    def getIndexAtCell(self, *args):
        return _ODA_Drawings.OdDbDataColumn_getIndexAtCell(self, *args)

    def numCells(self, *args):
        return _ODA_Drawings.OdDbDataColumn_numCells(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDataColumn

# Register OdDbDataColumn in _ODA_Drawings:
_ODA_Drawings.OdDbDataColumn_swigregister(OdDbDataColumn)

def OdDbDataColumn_cast(*args):
    return _ODA_Drawings.OdDbDataColumn_cast(*args)

def OdDbDataColumn_desc(*args):
    return _ODA_Drawings.OdDbDataColumn_desc(*args)

def OdDbDataColumn_createObject(*args):
    return _ODA_Drawings.OdDbDataColumn_createObject(*args)

class OdDbDataTable(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDataTable_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDataTable_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDataTable_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDataTable_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDataTable_createObject(*args)

    def numColumns(self, *args):
        return _ODA_Drawings.OdDbDataTable_numColumns(self, *args)

    def numRows(self, *args):
        return _ODA_Drawings.OdDbDataTable_numRows(self, *args)

    def setNumRowsPhysicalSize(self, *args):
        return _ODA_Drawings.OdDbDataTable_setNumRowsPhysicalSize(self, *args)

    def setNumRowsGrowSize(self, *args):
        return _ODA_Drawings.OdDbDataTable_setNumRowsGrowSize(self, *args)

    def numRowsPhysicalSize(self, *args):
        return _ODA_Drawings.OdDbDataTable_numRowsPhysicalSize(self, *args)

    def numRowsGrowSize(self, *args):
        return _ODA_Drawings.OdDbDataTable_numRowsGrowSize(self, *args)

    def setNumColsPhysicalSize(self, *args):
        return _ODA_Drawings.OdDbDataTable_setNumColsPhysicalSize(self, *args)

    def setNumColsGrowSize(self, *args):
        return _ODA_Drawings.OdDbDataTable_setNumColsGrowSize(self, *args)

    def numColsPhysicalSize(self, *args):
        return _ODA_Drawings.OdDbDataTable_numColsPhysicalSize(self, *args)

    def numColsGrowSize(self, *args):
        return _ODA_Drawings.OdDbDataTable_numColsGrowSize(self, *args)

    def tableName(self, *args):
        return _ODA_Drawings.OdDbDataTable_tableName(self, *args)

    def setTableName(self, *args):
        return _ODA_Drawings.OdDbDataTable_setTableName(self, *args)

    def getColumnAt(self, *args):
        return _ODA_Drawings.OdDbDataTable_getColumnAt(self, *args)

    def columnNameAt(self, *args):
        return _ODA_Drawings.OdDbDataTable_columnNameAt(self, *args)

    def columnTypeAt(self, *args):
        return _ODA_Drawings.OdDbDataTable_columnTypeAt(self, *args)

    def columnIndexAtName(self, *args):
        return _ODA_Drawings.OdDbDataTable_columnIndexAtName(self, *args)

    def appendColumn(self, *args):
        return _ODA_Drawings.OdDbDataTable_appendColumn(self, *args)

    def insertColumnAt(self, *args):
        return _ODA_Drawings.OdDbDataTable_insertColumnAt(self, *args)

    def removeColumnAt(self, *args):
        return _ODA_Drawings.OdDbDataTable_removeColumnAt(self, *args)

    def getRowAt(self, *args):
        return _ODA_Drawings.OdDbDataTable_getRowAt(self, *args)

    def setRowAt(self, *args):
        return _ODA_Drawings.OdDbDataTable_setRowAt(self, *args)

    def appendRow(self, *args):
        return _ODA_Drawings.OdDbDataTable_appendRow(self, *args)

    def insertRowAt(self, *args):
        return _ODA_Drawings.OdDbDataTable_insertRowAt(self, *args)

    def removeRowAt(self, *args):
        return _ODA_Drawings.OdDbDataTable_removeRowAt(self, *args)

    def getCellAt(self, *args):
        return _ODA_Drawings.OdDbDataTable_getCellAt(self, *args)

    def setCellAt(self, *args):
        return _ODA_Drawings.OdDbDataTable_setCellAt(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbDataTable_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbDataTable_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbDataTable_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbDataTable_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDataTable

# Register OdDbDataTable in _ODA_Drawings:
_ODA_Drawings.OdDbDataTable_swigregister(OdDbDataTable)

def OdDbDataTable_cast(*args):
    return _ODA_Drawings.OdDbDataTable_cast(*args)

def OdDbDataTable_desc(*args):
    return _ODA_Drawings.OdDbDataTable_desc(*args)

def OdDbDataTable_createObject(*args):
    return _ODA_Drawings.OdDbDataTable_createObject(*args)

class OdDbDatabaseCollection(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDatabaseCollection_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDatabaseCollection_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDatabaseCollection_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDatabaseCollection_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDatabaseCollection_createObject(*args)

    def newIterator(self, *args):
        return _ODA_Drawings.OdDbDatabaseCollection_newIterator(self, *args)

    def count(self, *args):
        return _ODA_Drawings.OdDbDatabaseCollection_count(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDatabaseCollection

# Register OdDbDatabaseCollection in _ODA_Drawings:
_ODA_Drawings.OdDbDatabaseCollection_swigregister(OdDbDatabaseCollection)

def OdDbDatabaseCollection_cast(*args):
    return _ODA_Drawings.OdDbDatabaseCollection_cast(*args)

def OdDbDatabaseCollection_desc(*args):
    return _ODA_Drawings.OdDbDatabaseCollection_desc(*args)

def OdDbDatabaseCollection_createObject(*args):
    return _ODA_Drawings.OdDbDatabaseCollection_createObject(*args)


def oddbDatabaseCollection(*args):
    return _ODA_Drawings.oddbDatabaseCollection(*args)
class OdDbCurvePE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbCurvePE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbCurvePE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbCurvePE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbCurvePE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbCurvePE_createObject(*args)

    def getOrthoProjectedCurve(self, *args):
        return _ODA_Drawings.OdDbCurvePE_getOrthoProjectedCurve(self, *args)

    def getProjectedCurve(self, *args):
        return _ODA_Drawings.OdDbCurvePE_getProjectedCurve(self, *args)

    def getOffsetCurves(self, *args):
        return _ODA_Drawings.OdDbCurvePE_getOffsetCurves(self, *args)

    def getOffsetCurvesGivenPlaneNormal(self, *args):
        return _ODA_Drawings.OdDbCurvePE_getOffsetCurvesGivenPlaneNormal(self, *args)

    def getSplitCurves(self, *args):
        return _ODA_Drawings.OdDbCurvePE_getSplitCurves(self, *args)

    def extend(self, *args):
        return _ODA_Drawings.OdDbCurvePE_extend(self, *args)

    def getSpline(self, *args):
        return _ODA_Drawings.OdDbCurvePE_getSpline(self, *args)

    def getClosestPointTo(self, *args):
        return _ODA_Drawings.OdDbCurvePE_getClosestPointTo(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbCurvePE

# Register OdDbCurvePE in _ODA_Drawings:
_ODA_Drawings.OdDbCurvePE_swigregister(OdDbCurvePE)

def OdDbCurvePE_cast(*args):
    return _ODA_Drawings.OdDbCurvePE_cast(*args)

def OdDbCurvePE_desc(*args):
    return _ODA_Drawings.OdDbCurvePE_desc(*args)

def OdDbCurvePE_createObject(*args):
    return _ODA_Drawings.OdDbCurvePE_createObject(*args)

class OdDbCamera(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbCamera_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbCamera_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbCamera_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbCamera_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbCamera_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbCamera_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbCamera_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbCamera_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbCamera_dxfOutFields(self, *args)

    def subErase(self, *args):
        return _ODA_Drawings.OdDbCamera_subErase(self, *args)

    def subClose(self, *args):
        return _ODA_Drawings.OdDbCamera_subClose(self, *args)

    def view(self, *args):
        return _ODA_Drawings.OdDbCamera_view(self, *args)

    def setView(self, *args):
        return _ODA_Drawings.OdDbCamera_setView(self, *args)

    def openView(self, *args):
        return _ODA_Drawings.OdDbCamera_openView(self, *args)

    def updateView(self, *args):
        return _ODA_Drawings.OdDbCamera_updateView(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbCamera

# Register OdDbCamera in _ODA_Drawings:
_ODA_Drawings.OdDbCamera_swigregister(OdDbCamera)

def OdDbCamera_cast(*args):
    return _ODA_Drawings.OdDbCamera_cast(*args)

def OdDbCamera_desc(*args):
    return _ODA_Drawings.OdDbCamera_desc(*args)

def OdDbCamera_createObject(*args):
    return _ODA_Drawings.OdDbCamera_createObject(*args)

class CameraModule(ODA_Kernel.OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def UpdateViewTableRecordCamera(self, *args):
        return _ODA_Drawings.CameraModule_UpdateViewTableRecordCamera(self, *args)

    def InitialUpdateViewTableRecordCameras(self, *args):
        return _ODA_Drawings.CameraModule_InitialUpdateViewTableRecordCameras(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_CameraModule

# Register CameraModule in _ODA_Drawings:
_ODA_Drawings.CameraModule_swigregister(CameraModule)


def oddbUpdateViewTableRecordCamera(*args):
    return _ODA_Drawings.oddbUpdateViewTableRecordCamera(*args)

def oddbInitialUpdateViewTableRecordCameras(*args):
    return _ODA_Drawings.oddbInitialUpdateViewTableRecordCameras(*args)
class OdDbBreakData(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBreakData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBreakData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBreakData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBreakData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBreakData_createObject(*args)

    def dimObjId(self, *args):
        return _ODA_Drawings.OdDbBreakData_dimObjId(self, *args)

    def setDimObjId(self, *args):
        return _ODA_Drawings.OdDbBreakData_setDimObjId(self, *args)

    def addBreakPointRef(self, *args):
        return _ODA_Drawings.OdDbBreakData_addBreakPointRef(self, *args)

    def getBreakPointRef(self, *args):
        return _ODA_Drawings.OdDbBreakData_getBreakPointRef(self, *args)

    def deleteAllBreakPointRefs(self, *args):
        return _ODA_Drawings.OdDbBreakData_deleteAllBreakPointRefs(self, *args)

    def removeAssociativity(self, *args):
        return _ODA_Drawings.OdDbBreakData_removeAssociativity(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBreakData_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBreakData_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBreakData_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBreakData_dxfOutFields(self, *args)

    def modifiedGraphics(self, *args):
        return _ODA_Drawings.OdDbBreakData_modifiedGraphics(self, *args)

    def erased(self, *args):
        return _ODA_Drawings.OdDbBreakData_erased(self, *args)

    def modified(self, *args):
        return _ODA_Drawings.OdDbBreakData_modified(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBreakData

# Register OdDbBreakData in _ODA_Drawings:
_ODA_Drawings.OdDbBreakData_swigregister(OdDbBreakData)

def OdDbBreakData_cast(*args):
    return _ODA_Drawings.OdDbBreakData_cast(*args)

def OdDbBreakData_desc(*args):
    return _ODA_Drawings.OdDbBreakData_desc(*args)

def OdDbBreakData_createObject(*args):
    return _ODA_Drawings.OdDbBreakData_createObject(*args)

class OdDbBreakPointRef(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBreakPointRef_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBreakPointRef_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBreakPointRef_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBreakPointRef_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBreakPointRef_createObject(*args)
    kDynamic = _ODA_Drawings.OdDbBreakPointRef_kDynamic
    kStatic = _ODA_Drawings.OdDbBreakPointRef_kStatic
    kStatic2Point = _ODA_Drawings.OdDbBreakPointRef_kStatic2Point

    def pointType(self, *args):
        return _ODA_Drawings.OdDbBreakPointRef_pointType(self, *args)

    def setPointType(self, *args):
        return _ODA_Drawings.OdDbBreakPointRef_setPointType(self, *args)

    def lineIndex(self, *args):
        return _ODA_Drawings.OdDbBreakPointRef_lineIndex(self, *args)

    def setLineIndex(self, *args):
        return _ODA_Drawings.OdDbBreakPointRef_setLineIndex(self, *args)

    def breakPoint(self, *args):
        return _ODA_Drawings.OdDbBreakPointRef_breakPoint(self, *args)

    def setBreakPoint(self, *args):
        return _ODA_Drawings.OdDbBreakPointRef_setBreakPoint(self, *args)

    def breakPoint2(self, *args):
        return _ODA_Drawings.OdDbBreakPointRef_breakPoint2(self, *args)

    def setBreakPoint2(self, *args):
        return _ODA_Drawings.OdDbBreakPointRef_setBreakPoint2(self, *args)

    def getBreakPointId(self, *args):
        return _ODA_Drawings.OdDbBreakPointRef_getBreakPointId(self, *args)

    def setBreakPointId(self, *args):
        return _ODA_Drawings.OdDbBreakPointRef_setBreakPointId(self, *args)

    def subentPtr(self, *args):
        return _ODA_Drawings.OdDbBreakPointRef_subentPtr(self, *args)

    def intersectWith(self, *args):
        return _ODA_Drawings.OdDbBreakPointRef_intersectWith(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbBreakPointRef_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbBreakPointRef_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbBreakPointRef_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbBreakPointRef_dxfOutFields(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBreakPointRef

# Register OdDbBreakPointRef in _ODA_Drawings:
_ODA_Drawings.OdDbBreakPointRef_swigregister(OdDbBreakPointRef)

def OdDbBreakPointRef_cast(*args):
    return _ODA_Drawings.OdDbBreakPointRef_cast(*args)

def OdDbBreakPointRef_desc(*args):
    return _ODA_Drawings.OdDbBreakPointRef_desc(*args)

def OdDbBreakPointRef_createObject(*args):
    return _ODA_Drawings.OdDbBreakPointRef_createObject(*args)

class OdDbBlendOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.OdDbBlendOptions_swiginit(self, _ODA_Drawings.new_OdDbBlendOptions(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlendOptions
    kDriveModeFirst = _ODA_Drawings.OdDbBlendOptions_kDriveModeFirst
    kDriveModeSecond = _ODA_Drawings.OdDbBlendOptions_kDriveModeSecond
    kDriveModeBoth = _ODA_Drawings.OdDbBlendOptions_kDriveModeBoth

    def simplify(self, *args):
        return _ODA_Drawings.OdDbBlendOptions_simplify(self, *args)

    def setSimplify(self, *args):
        return _ODA_Drawings.OdDbBlendOptions_setSimplify(self, *args)

    def solid(self, *args):
        return _ODA_Drawings.OdDbBlendOptions_solid(self, *args)

    def setSolid(self, *args):
        return _ODA_Drawings.OdDbBlendOptions_setSolid(self, *args)

    def quality(self, *args):
        return _ODA_Drawings.OdDbBlendOptions_quality(self, *args)

    def setQuality(self, *args):
        return _ODA_Drawings.OdDbBlendOptions_setQuality(self, *args)

    def coplanarPoint(self, *args):
        return _ODA_Drawings.OdDbBlendOptions_coplanarPoint(self, *args)

    def setCoplanarPoint(self, *args):
        return _ODA_Drawings.OdDbBlendOptions_setCoplanarPoint(self, *args)

    def coplanarDirection(self, *args):
        return _ODA_Drawings.OdDbBlendOptions_coplanarDirection(self, *args)

    def setCoplanarDirection(self, *args):
        return _ODA_Drawings.OdDbBlendOptions_setCoplanarDirection(self, *args)

    def driveMode(self, *args):
        return _ODA_Drawings.OdDbBlendOptions_driveMode(self, *args)

    def setDriveMode(self, *args):
        return _ODA_Drawings.OdDbBlendOptions_setDriveMode(self, *args)

# Register OdDbBlendOptions in _ODA_Drawings:
_ODA_Drawings.OdDbBlendOptions_swigregister(OdDbBlendOptions)

class OdDbBackground(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbBackground_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbBackground_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbBackground_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBackground_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbBackground_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBackground

    def drawable(self, *args):
        return _ODA_Drawings.OdDbBackground_drawable(self, *args)

# Register OdDbBackground in _ODA_Drawings:
_ODA_Drawings.OdDbBackground_swigregister(OdDbBackground)

def OdDbBackground_cast(*args):
    return _ODA_Drawings.OdDbBackground_cast(*args)

def OdDbBackground_desc(*args):
    return _ODA_Drawings.OdDbBackground_desc(*args)

def OdDbBackground_createObject(*args):
    return _ODA_Drawings.OdDbBackground_createObject(*args)

class OdDbSolidBackground(OdDbBackground):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSolidBackground_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSolidBackground_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSolidBackground_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSolidBackground_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSolidBackground_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSolidBackground

    def setColorSolid(self, *args):
        return _ODA_Drawings.OdDbSolidBackground_setColorSolid(self, *args)

    def colorSolid(self, *args):
        return _ODA_Drawings.OdDbSolidBackground_colorSolid(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbSolidBackground_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbSolidBackground_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbSolidBackground_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbSolidBackground_dxfOutFields(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbSolidBackground_subSetAttributes(self, *args)

    def drawableType(self, *args):
        return _ODA_Drawings.OdDbSolidBackground_drawableType(self, *args)

# Register OdDbSolidBackground in _ODA_Drawings:
_ODA_Drawings.OdDbSolidBackground_swigregister(OdDbSolidBackground)

def OdDbSolidBackground_cast(*args):
    return _ODA_Drawings.OdDbSolidBackground_cast(*args)

def OdDbSolidBackground_desc(*args):
    return _ODA_Drawings.OdDbSolidBackground_desc(*args)

def OdDbSolidBackground_createObject(*args):
    return _ODA_Drawings.OdDbSolidBackground_createObject(*args)

class OdDbGradientBackground(OdDbBackground):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbGradientBackground_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbGradientBackground_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGradientBackground_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGradientBackground

    def setColorTop(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_setColorTop(self, *args)

    def colorTop(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_colorTop(self, *args)

    def setColorMiddle(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_setColorMiddle(self, *args)

    def colorMiddle(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_colorMiddle(self, *args)

    def setColorBottom(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_setColorBottom(self, *args)

    def colorBottom(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_colorBottom(self, *args)

    def setHorizon(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_setHorizon(self, *args)

    def horizon(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_horizon(self, *args)

    def setHeight(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_setHeight(self, *args)

    def height(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_height(self, *args)

    def setRotation(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_setRotation(self, *args)

    def rotation(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_rotation(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_dxfOutFields(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_subSetAttributes(self, *args)

    def drawableType(self, *args):
        return _ODA_Drawings.OdDbGradientBackground_drawableType(self, *args)

# Register OdDbGradientBackground in _ODA_Drawings:
_ODA_Drawings.OdDbGradientBackground_swigregister(OdDbGradientBackground)

def OdDbGradientBackground_cast(*args):
    return _ODA_Drawings.OdDbGradientBackground_cast(*args)

def OdDbGradientBackground_desc(*args):
    return _ODA_Drawings.OdDbGradientBackground_desc(*args)

def OdDbGradientBackground_createObject(*args):
    return _ODA_Drawings.OdDbGradientBackground_createObject(*args)

class OdDbImageBackground(OdDbBackground):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbImageBackground_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbImageBackground_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbImageBackground_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbImageBackground_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbImageBackground_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbImageBackground

    def setImageFilename(self, *args):
        return _ODA_Drawings.OdDbImageBackground_setImageFilename(self, *args)

    def imageFilename(self, *args):
        return _ODA_Drawings.OdDbImageBackground_imageFilename(self, *args)

    def setFitToScreen(self, *args):
        return _ODA_Drawings.OdDbImageBackground_setFitToScreen(self, *args)

    def fitToScreen(self, *args):
        return _ODA_Drawings.OdDbImageBackground_fitToScreen(self, *args)

    def setMaintainAspectRatio(self, *args):
        return _ODA_Drawings.OdDbImageBackground_setMaintainAspectRatio(self, *args)

    def maintainAspectRatio(self, *args):
        return _ODA_Drawings.OdDbImageBackground_maintainAspectRatio(self, *args)

    def setUseTiling(self, *args):
        return _ODA_Drawings.OdDbImageBackground_setUseTiling(self, *args)

    def useTiling(self, *args):
        return _ODA_Drawings.OdDbImageBackground_useTiling(self, *args)

    def setXOffset(self, *args):
        return _ODA_Drawings.OdDbImageBackground_setXOffset(self, *args)

    def xOffset(self, *args):
        return _ODA_Drawings.OdDbImageBackground_xOffset(self, *args)

    def setYOffset(self, *args):
        return _ODA_Drawings.OdDbImageBackground_setYOffset(self, *args)

    def yOffset(self, *args):
        return _ODA_Drawings.OdDbImageBackground_yOffset(self, *args)

    def setXScale(self, *args):
        return _ODA_Drawings.OdDbImageBackground_setXScale(self, *args)

    def xScale(self, *args):
        return _ODA_Drawings.OdDbImageBackground_xScale(self, *args)

    def setYScale(self, *args):
        return _ODA_Drawings.OdDbImageBackground_setYScale(self, *args)

    def yScale(self, *args):
        return _ODA_Drawings.OdDbImageBackground_yScale(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbImageBackground_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbImageBackground_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbImageBackground_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbImageBackground_dxfOutFields(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbImageBackground_subSetAttributes(self, *args)

    def drawableType(self, *args):
        return _ODA_Drawings.OdDbImageBackground_drawableType(self, *args)

# Register OdDbImageBackground in _ODA_Drawings:
_ODA_Drawings.OdDbImageBackground_swigregister(OdDbImageBackground)

def OdDbImageBackground_cast(*args):
    return _ODA_Drawings.OdDbImageBackground_cast(*args)

def OdDbImageBackground_desc(*args):
    return _ODA_Drawings.OdDbImageBackground_desc(*args)

def OdDbImageBackground_createObject(*args):
    return _ODA_Drawings.OdDbImageBackground_createObject(*args)

class OdDbGroundPlaneBackground(OdDbBackground):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbGroundPlaneBackground

    def setColorSkyZenith(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_setColorSkyZenith(self, *args)

    def colorSkyZenith(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_colorSkyZenith(self, *args)

    def setColorSkyHorizon(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_setColorSkyHorizon(self, *args)

    def colorSkyHorizon(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_colorSkyHorizon(self, *args)

    def setColorUndergroundHorizon(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_setColorUndergroundHorizon(self, *args)

    def colorUndergroundHorizon(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_colorUndergroundHorizon(self, *args)

    def setColorUndergroundAzimuth(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_setColorUndergroundAzimuth(self, *args)

    def colorUndergroundAzimuth(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_colorUndergroundAzimuth(self, *args)

    def setColorGroundPlaneNear(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_setColorGroundPlaneNear(self, *args)

    def colorGroundPlaneNear(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_colorGroundPlaneNear(self, *args)

    def setColorGroundPlaneFar(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_setColorGroundPlaneFar(self, *args)

    def colorGroundPlaneFar(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_colorGroundPlaneFar(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_dxfOutFields(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_subSetAttributes(self, *args)

    def drawableType(self, *args):
        return _ODA_Drawings.OdDbGroundPlaneBackground_drawableType(self, *args)

# Register OdDbGroundPlaneBackground in _ODA_Drawings:
_ODA_Drawings.OdDbGroundPlaneBackground_swigregister(OdDbGroundPlaneBackground)

def OdDbGroundPlaneBackground_cast(*args):
    return _ODA_Drawings.OdDbGroundPlaneBackground_cast(*args)

def OdDbGroundPlaneBackground_desc(*args):
    return _ODA_Drawings.OdDbGroundPlaneBackground_desc(*args)

def OdDbGroundPlaneBackground_createObject(*args):
    return _ODA_Drawings.OdDbGroundPlaneBackground_createObject(*args)

class OdDbSkyBackground(OdDbBackground):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbSkyBackground_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbSkyBackground_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbSkyBackground_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbSkyBackground_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbSkyBackground_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbSkyBackground

    def setSunId(self, *args):
        return _ODA_Drawings.OdDbSkyBackground_setSunId(self, *args)

    def sunId(self, *args):
        return _ODA_Drawings.OdDbSkyBackground_sunId(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbSkyBackground_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbSkyBackground_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbSkyBackground_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbSkyBackground_dxfOutFields(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbSkyBackground_subSetAttributes(self, *args)

    def drawableType(self, *args):
        return _ODA_Drawings.OdDbSkyBackground_drawableType(self, *args)

# Register OdDbSkyBackground in _ODA_Drawings:
_ODA_Drawings.OdDbSkyBackground_swigregister(OdDbSkyBackground)

def OdDbSkyBackground_cast(*args):
    return _ODA_Drawings.OdDbSkyBackground_cast(*args)

def OdDbSkyBackground_desc(*args):
    return _ODA_Drawings.OdDbSkyBackground_desc(*args)

def OdDbSkyBackground_createObject(*args):
    return _ODA_Drawings.OdDbSkyBackground_createObject(*args)

class OdDbIBLBackground(OdDbBackground):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbIBLBackground_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbIBLBackground_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbIBLBackground_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbIBLBackground_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbIBLBackground_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbIBLBackground

    def setEnable(self, *args):
        return _ODA_Drawings.OdDbIBLBackground_setEnable(self, *args)

    def enable(self, *args):
        return _ODA_Drawings.OdDbIBLBackground_enable(self, *args)

    def setIBLImageName(self, *args):
        return _ODA_Drawings.OdDbIBLBackground_setIBLImageName(self, *args)

    def IBLImageName(self, *args):
        return _ODA_Drawings.OdDbIBLBackground_IBLImageName(self, *args)

    def setRotation(self, *args):
        return _ODA_Drawings.OdDbIBLBackground_setRotation(self, *args)

    def rotation(self, *args):
        return _ODA_Drawings.OdDbIBLBackground_rotation(self, *args)

    def setDisplayImage(self, *args):
        return _ODA_Drawings.OdDbIBLBackground_setDisplayImage(self, *args)

    def displayImage(self, *args):
        return _ODA_Drawings.OdDbIBLBackground_displayImage(self, *args)

    def setSecondaryBackground(self, *args):
        return _ODA_Drawings.OdDbIBLBackground_setSecondaryBackground(self, *args)

    def secondaryBackground(self, *args):
        return _ODA_Drawings.OdDbIBLBackground_secondaryBackground(self, *args)

    def setDataFrom(self, *args):
        return _ODA_Drawings.OdDbIBLBackground_setDataFrom(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbIBLBackground_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbIBLBackground_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbIBLBackground_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbIBLBackground_dxfOutFields(self, *args)

    def subSetAttributes(self, *args):
        return _ODA_Drawings.OdDbIBLBackground_subSetAttributes(self, *args)

    def drawableType(self, *args):
        return _ODA_Drawings.OdDbIBLBackground_drawableType(self, *args)

# Register OdDbIBLBackground in _ODA_Drawings:
_ODA_Drawings.OdDbIBLBackground_swigregister(OdDbIBLBackground)

def OdDbIBLBackground_cast(*args):
    return _ODA_Drawings.OdDbIBLBackground_cast(*args)

def OdDbIBLBackground_desc(*args):
    return _ODA_Drawings.OdDbIBLBackground_desc(*args)

def OdDbIBLBackground_createObject(*args):
    return _ODA_Drawings.OdDbIBLBackground_createObject(*args)


def oddbGetBackgroundDictionaryId(*args):
    return _ODA_Drawings.oddbGetBackgroundDictionaryId(*args)

def oddbGetBackgroundDictionary(*args):
    return _ODA_Drawings.oddbGetBackgroundDictionary(*args)

def odDbGetObjectName(*args):
    return _ODA_Drawings.odDbGetObjectName(*args)

def odDbGetObjectIdName(*args):
    return _ODA_Drawings.odDbGetObjectIdName(*args)

def odDbGetHandleName(*args):
    return _ODA_Drawings.odDbGetHandleName(*args)

def odDbGenerateName(*args):
    return _ODA_Drawings.odDbGenerateName(*args)

def odDbAuditColorIndex(*args):
    return _ODA_Drawings.odDbAuditColorIndex(*args)

def odDbAuditColor(*args):
    return _ODA_Drawings.odDbAuditColor(*args)
class OdDbAuditInfo(ODA_Kernel.OdAuditInfo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def printError(self, *args):
        return _ODA_Drawings.OdDbAuditInfo_printError(self, *args)

    def __init__(self, *args):
        _ODA_Drawings.OdDbAuditInfo_swiginit(self, _ODA_Drawings.new_OdDbAuditInfo(*args))
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAuditInfo

# Register OdDbAuditInfo in _ODA_Drawings:
_ODA_Drawings.OdDbAuditInfo_swigregister(OdDbAuditInfo)

class OdDbArcDimension(OdDbDimension):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbArcDimension_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbArcDimension_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbArcDimension_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbArcDimension_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbArcDimension_createObject(*args)

    def arcPoint(self, *args):
        return _ODA_Drawings.OdDbArcDimension_arcPoint(self, *args)

    def setArcPoint(self, *args):
        return _ODA_Drawings.OdDbArcDimension_setArcPoint(self, *args)

    def xLine1Point(self, *args):
        return _ODA_Drawings.OdDbArcDimension_xLine1Point(self, *args)

    def setXLine1Point(self, *args):
        return _ODA_Drawings.OdDbArcDimension_setXLine1Point(self, *args)

    def xLine2Point(self, *args):
        return _ODA_Drawings.OdDbArcDimension_xLine2Point(self, *args)

    def setXLine2Point(self, *args):
        return _ODA_Drawings.OdDbArcDimension_setXLine2Point(self, *args)

    def centerPoint(self, *args):
        return _ODA_Drawings.OdDbArcDimension_centerPoint(self, *args)

    def setCenterPoint(self, *args):
        return _ODA_Drawings.OdDbArcDimension_setCenterPoint(self, *args)

    def isPartial(self, *args):
        return _ODA_Drawings.OdDbArcDimension_isPartial(self, *args)

    def setIsPartial(self, *args):
        return _ODA_Drawings.OdDbArcDimension_setIsPartial(self, *args)

    def arcStartParam(self, *args):
        return _ODA_Drawings.OdDbArcDimension_arcStartParam(self, *args)

    def setArcStartParam(self, *args):
        return _ODA_Drawings.OdDbArcDimension_setArcStartParam(self, *args)

    def arcEndParam(self, *args):
        return _ODA_Drawings.OdDbArcDimension_arcEndParam(self, *args)

    def setArcEndParam(self, *args):
        return _ODA_Drawings.OdDbArcDimension_setArcEndParam(self, *args)

    def hasLeader(self, *args):
        return _ODA_Drawings.OdDbArcDimension_hasLeader(self, *args)

    def setHasLeader(self, *args):
        return _ODA_Drawings.OdDbArcDimension_setHasLeader(self, *args)

    def leader1Point(self, *args):
        return _ODA_Drawings.OdDbArcDimension_leader1Point(self, *args)

    def setLeader1Point(self, *args):
        return _ODA_Drawings.OdDbArcDimension_setLeader1Point(self, *args)

    def leader2Point(self, *args):
        return _ODA_Drawings.OdDbArcDimension_leader2Point(self, *args)

    def setLeader2Point(self, *args):
        return _ODA_Drawings.OdDbArcDimension_setLeader2Point(self, *args)

    def arcSymbolType(self, *args):
        return _ODA_Drawings.OdDbArcDimension_arcSymbolType(self, *args)

    def setArcSymbolType(self, *args):
        return _ODA_Drawings.OdDbArcDimension_setArcSymbolType(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdDbArcDimension_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdDbArcDimension_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdDbArcDimension_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdDbArcDimension_dxfOutFields(self, *args)

    def subGetClassID(self, *args):
        return _ODA_Drawings.OdDbArcDimension_subGetClassID(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbArcDimension

# Register OdDbArcDimension in _ODA_Drawings:
_ODA_Drawings.OdDbArcDimension_swigregister(OdDbArcDimension)

def OdDbArcDimension_cast(*args):
    return _ODA_Drawings.OdDbArcDimension_cast(*args)

def OdDbArcDimension_desc(*args):
    return _ODA_Drawings.OdDbArcDimension_desc(*args)

def OdDbArcDimension_createObject(*args):
    return _ODA_Drawings.OdDbArcDimension_createObject(*args)

class OdDbBlockInsertionPoints(ODA_Kernel.OdRxProtocolReactor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def isA(self, *args):
        return _ODA_Drawings.OdDbBlockInsertionPoints_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbBlockInsertionPoints_queryX(self, *args)

    def getInsertionPoints(self, *args):
        return _ODA_Drawings.OdDbBlockInsertionPoints_getInsertionPoints(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbBlockInsertionPoints

# Register OdDbBlockInsertionPoints in _ODA_Drawings:
_ODA_Drawings.OdDbBlockInsertionPoints_swigregister(OdDbBlockInsertionPoints)

class OdDbAnnotativeObjectPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAnnotativeObjectPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAnnotativeObjectPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAnnotativeObjectPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAnnotativeObjectPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAnnotativeObjectPE_createObject(*args)

    def annotative(self, *args):
        return _ODA_Drawings.OdDbAnnotativeObjectPE_annotative(self, *args)

    def setAnnotative(self, *args):
        return _ODA_Drawings.OdDbAnnotativeObjectPE_setAnnotative(self, *args)

    def setFromStyle(self, *args):
        return _ODA_Drawings.OdDbAnnotativeObjectPE_setFromStyle(self, *args)

    def forceAnnoAllVisible(self, *args):
        return _ODA_Drawings.OdDbAnnotativeObjectPE_forceAnnoAllVisible(self, *args)

    def setForceAnnoAllVisible(self, *args):
        return _ODA_Drawings.OdDbAnnotativeObjectPE_setForceAnnoAllVisible(self, *args)

    def resetScaleDependentProperties(self, *args):
        return _ODA_Drawings.OdDbAnnotativeObjectPE_resetScaleDependentProperties(self, *args)

    def decompose(self, *args):
        return _ODA_Drawings.OdDbAnnotativeObjectPE_decompose(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAnnotativeObjectPE

# Register OdDbAnnotativeObjectPE in _ODA_Drawings:
_ODA_Drawings.OdDbAnnotativeObjectPE_swigregister(OdDbAnnotativeObjectPE)

def OdDbAnnotativeObjectPE_cast(*args):
    return _ODA_Drawings.OdDbAnnotativeObjectPE_cast(*args)

def OdDbAnnotativeObjectPE_desc(*args):
    return _ODA_Drawings.OdDbAnnotativeObjectPE_desc(*args)

def OdDbAnnotativeObjectPE_createObject(*args):
    return _ODA_Drawings.OdDbAnnotativeObjectPE_createObject(*args)

class OdDbPaperOrientationPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPaperOrientationPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPaperOrientationPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPaperOrientationPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPaperOrientationPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPaperOrientationPE_createObject(*args)

    def paperOrientation(self, *args):
        return _ODA_Drawings.OdDbPaperOrientationPE_paperOrientation(self, *args)

    def setPaperOrientation(self, *args):
        return _ODA_Drawings.OdDbPaperOrientationPE_setPaperOrientation(self, *args)

    def applyPaperOrientationTransform(self, *args):
        return _ODA_Drawings.OdDbPaperOrientationPE_applyPaperOrientationTransform(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPaperOrientationPE

# Register OdDbPaperOrientationPE in _ODA_Drawings:
_ODA_Drawings.OdDbPaperOrientationPE_swigregister(OdDbPaperOrientationPE)

def OdDbPaperOrientationPE_cast(*args):
    return _ODA_Drawings.OdDbPaperOrientationPE_cast(*args)

def OdDbPaperOrientationPE_desc(*args):
    return _ODA_Drawings.OdDbPaperOrientationPE_desc(*args)

def OdDbPaperOrientationPE_createObject(*args):
    return _ODA_Drawings.OdDbPaperOrientationPE_createObject(*args)


def readAcisData(*args):
    return _ODA_Drawings.readAcisData(*args)

def writeAcisData(*args):
    return _ODA_Drawings.writeAcisData(*args)
class OdDbAbstractViewportDataForDbVpTabRec(OdDbAbstractViewportDataForAbstractViewTabRec):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_createObject(*args)

    def lowerLeftCorner(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_lowerLeftCorner(self, *args)

    def upperRightCorner(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_upperRightCorner(self, *args)

    def setViewport(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setViewport(self, *args)

    def hasViewport(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_hasViewport(self, *args)

    def viewExtents(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_viewExtents(self, *args)

    def hasUcs(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_hasUcs(self, *args)

    def getUcs(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_getUcs(self, *args)

    def orthoUcs(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_orthoUcs(self, *args)

    def ucsName(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_ucsName(self, *args)

    def elevation(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_elevation(self, *args)

    def isUcsSavedWithViewport(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_isUcsSavedWithViewport(self, *args)

    def setUcsPerViewport(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setUcsPerViewport(self, *args)

    def isUcsFollowModeOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_isUcsFollowModeOn(self, *args)

    def setUcsFollowModeOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setUcsFollowModeOn(self, *args)

    def circleSides(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_circleSides(self, *args)

    def setCircleSides(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setCircleSides(self, *args)

    def isGridOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_isGridOn(self, *args)

    def setGridOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setGridOn(self, *args)

    def gridIncrement(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_gridIncrement(self, *args)

    def setGridIncrement(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setGridIncrement(self, *args)

    def isGridBoundToLimits(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_isGridBoundToLimits(self, *args)

    def setGridBoundToLimits(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setGridBoundToLimits(self, *args)

    def isGridAdaptive(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_isGridAdaptive(self, *args)

    def setGridAdaptive(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setGridAdaptive(self, *args)

    def isGridSubdivisionRestricted(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_isGridSubdivisionRestricted(self, *args)

    def setGridSubdivisionRestricted(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setGridSubdivisionRestricted(self, *args)

    def isGridFollow(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_isGridFollow(self, *args)

    def setGridFollow(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setGridFollow(self, *args)

    def gridMajor(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_gridMajor(self, *args)

    def setGridMajor(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setGridMajor(self, *args)

    def isUcsIconVisible(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_isUcsIconVisible(self, *args)

    def setUcsIconVisible(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setUcsIconVisible(self, *args)

    def isUcsIconAtOrigin(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_isUcsIconAtOrigin(self, *args)

    def setUcsIconAtOrigin(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setUcsIconAtOrigin(self, *args)

    def isSnapOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_isSnapOn(self, *args)

    def setSnapOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setSnapOn(self, *args)

    def isSnapIsometric(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_isSnapIsometric(self, *args)

    def setSnapIsometric(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setSnapIsometric(self, *args)

    def snapAngle(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_snapAngle(self, *args)

    def setSnapAngle(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setSnapAngle(self, *args)

    def snapBase(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_snapBase(self, *args)

    def setSnapBase(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setSnapBase(self, *args)

    def snapIncrement(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_snapIncrement(self, *args)

    def setSnapIncrement(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setSnapIncrement(self, *args)

    def snapIsoPair(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_snapIsoPair(self, *args)

    def setSnapIsoPair(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setSnapIsoPair(self, *args)

    def gsView(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_gsView(self, *args)

    def setGsView(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_setGsView(self, *args)

    def plotDataObject(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_plotDataObject(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAbstractViewportDataForDbVpTabRec

# Register OdDbAbstractViewportDataForDbVpTabRec in _ODA_Drawings:
_ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_swigregister(OdDbAbstractViewportDataForDbVpTabRec)

def OdDbAbstractViewportDataForDbVpTabRec_cast(*args):
    return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_cast(*args)

def OdDbAbstractViewportDataForDbVpTabRec_desc(*args):
    return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_desc(*args)

def OdDbAbstractViewportDataForDbVpTabRec_createObject(*args):
    return _ODA_Drawings.OdDbAbstractViewportDataForDbVpTabRec_createObject(*args)

class OdDbAbstractViewportDataForDbViewTabRec(OdDbAbstractViewportDataForAbstractViewTabRec):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_createObject(*args)

    def hasUcs(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_hasUcs(self, *args)

    def viewExtents(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_viewExtents(self, *args)

    def isUcsSavedWithViewport(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_isUcsSavedWithViewport(self, *args)

    def setUcsPerViewport(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_setUcsPerViewport(self, *args)

    def isUcsFollowModeOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_isUcsFollowModeOn(self, *args)

    def setUcsFollowModeOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_setUcsFollowModeOn(self, *args)

    def circleSides(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_circleSides(self, *args)

    def setCircleSides(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_setCircleSides(self, *args)

    def isGridOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_isGridOn(self, *args)

    def setGridOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_setGridOn(self, *args)

    def gridIncrement(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_gridIncrement(self, *args)

    def setGridIncrement(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_setGridIncrement(self, *args)

    def isGridBoundToLimits(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_isGridBoundToLimits(self, *args)

    def setGridBoundToLimits(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_setGridBoundToLimits(self, *args)

    def isGridAdaptive(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_isGridAdaptive(self, *args)

    def setGridAdaptive(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_setGridAdaptive(self, *args)

    def isGridSubdivisionRestricted(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_isGridSubdivisionRestricted(self, *args)

    def setGridSubdivisionRestricted(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_setGridSubdivisionRestricted(self, *args)

    def isGridFollow(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_isGridFollow(self, *args)

    def setGridFollow(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_setGridFollow(self, *args)

    def gridMajor(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_gridMajor(self, *args)

    def setGridMajor(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_setGridMajor(self, *args)

    def isUcsIconVisible(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_isUcsIconVisible(self, *args)

    def setUcsIconVisible(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_setUcsIconVisible(self, *args)

    def isUcsIconAtOrigin(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_isUcsIconAtOrigin(self, *args)

    def setUcsIconAtOrigin(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_setUcsIconAtOrigin(self, *args)

    def isSnapOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_isSnapOn(self, *args)

    def setSnapOn(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_setSnapOn(self, *args)

    def isSnapIsometric(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_isSnapIsometric(self, *args)

    def setSnapIsometric(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_setSnapIsometric(self, *args)

    def snapAngle(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_snapAngle(self, *args)

    def setSnapAngle(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_setSnapAngle(self, *args)

    def snapBase(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_snapBase(self, *args)

    def setSnapBase(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_setSnapBase(self, *args)

    def snapIncrement(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_snapIncrement(self, *args)

    def setSnapIncrement(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_setSnapIncrement(self, *args)

    def snapIsoPair(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_snapIsoPair(self, *args)

    def setSnapIsoPair(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_setSnapIsoPair(self, *args)

    def gsView(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_gsView(self, *args)

    def setGsView(self, *args):
        return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_setGsView(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAbstractViewportDataForDbViewTabRec

# Register OdDbAbstractViewportDataForDbViewTabRec in _ODA_Drawings:
_ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_swigregister(OdDbAbstractViewportDataForDbViewTabRec)

def OdDbAbstractViewportDataForDbViewTabRec_cast(*args):
    return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_cast(*args)

def OdDbAbstractViewportDataForDbViewTabRec_desc(*args):
    return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_desc(*args)

def OdDbAbstractViewportDataForDbViewTabRec_createObject(*args):
    return _ODA_Drawings.OdDbAbstractViewportDataForDbViewTabRec_createObject(*args)

class OdDbAbstractPlotDataForDbPlotSettings(OdDbAbstractPlotData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_createObject(*args)

    def useStandardScale(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_useStandardScale(self, *args)

    def customScale(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_customScale(self, *args)

    def setCustomScale(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_setCustomScale(self, *args)

    def standardScale(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_standardScale(self, *args)

    def setStandardScale(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_setStandardScale(self, *args)

    def styleSheet(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_styleSheet(self, *args)

    def setStyleSheet(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_setStyleSheet(self, *args)

    def shadePlot(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_shadePlot(self, *args)

    def shadePlotId(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_shadePlotId(self, *args)

    def setShadePlot(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_setShadePlot(self, *args)

    def plotHiddenLines(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_plotHiddenLines(self, *args)

    def setPlotHiddenLines(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_setPlotHiddenLines(self, *args)

    def plotWireframe(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_plotWireframe(self, *args)

    def plotAsRaster(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_plotAsRaster(self, *args)

    def plotTransparency(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_plotTransparency(self, *args)

    def setPlotTransparency(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_setPlotTransparency(self, *args)

    def modelType(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_modelType(self, *args)

    def setModelType(self, *args):
        return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_setModelType(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbAbstractPlotDataForDbPlotSettings

# Register OdDbAbstractPlotDataForDbPlotSettings in _ODA_Drawings:
_ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_swigregister(OdDbAbstractPlotDataForDbPlotSettings)

def OdDbAbstractPlotDataForDbPlotSettings_cast(*args):
    return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_cast(*args)

def OdDbAbstractPlotDataForDbPlotSettings_desc(*args):
    return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_desc(*args)

def OdDbAbstractPlotDataForDbPlotSettings_createObject(*args):
    return _ODA_Drawings.OdDbAbstractPlotDataForDbPlotSettings_createObject(*args)

class OdDb3dProfile(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDb3dProfile_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDb3dProfile_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDb3dProfile_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDb3dProfile_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDb3dProfile_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDb3dProfile

    def copyFrom(self, *args):
        return _ODA_Drawings.OdDb3dProfile_copyFrom(self, *args)

    def entity(self, *args):
        return _ODA_Drawings.OdDb3dProfile_entity(self, *args)

    def getVertexRef(self, *args):
        return _ODA_Drawings.OdDb3dProfile_getVertexRef(self, *args)

    def set(self, *args):
        return _ODA_Drawings.OdDb3dProfile_set(self, *args)

    def isClosed(self, *args):
        return _ODA_Drawings.OdDb3dProfile_isClosed(self, *args)

    def isPlanar(self, *args):
        return _ODA_Drawings.OdDb3dProfile_isPlanar(self, *args)

    def isSubent(self, *args):
        return _ODA_Drawings.OdDb3dProfile_isSubent(self, *args)

    def isFace(self, *args):
        return _ODA_Drawings.OdDb3dProfile_isFace(self, *args)

    def isEdge(self, *args):
        return _ODA_Drawings.OdDb3dProfile_isEdge(self, *args)

    def isValid(self, *args):
        return _ODA_Drawings.OdDb3dProfile_isValid(self, *args)

    def getPathRef(self, *args):
        return _ODA_Drawings.OdDb3dProfile_getPathRef(self, *args)

    @staticmethod
    def mergeProfiles(*args):
        return _ODA_Drawings.OdDb3dProfile_mergeProfiles(*args)

    def convertProfile(self, *args):
        return _ODA_Drawings.OdDb3dProfile_convertProfile(self, *args)

# Register OdDb3dProfile in _ODA_Drawings:
_ODA_Drawings.OdDb3dProfile_swigregister(OdDb3dProfile)

def OdDb3dProfile_cast(*args):
    return _ODA_Drawings.OdDb3dProfile_cast(*args)

def OdDb3dProfile_desc(*args):
    return _ODA_Drawings.OdDb3dProfile_desc(*args)

def OdDb3dProfile_createObject(*args):
    return _ODA_Drawings.OdDb3dProfile_createObject(*args)

def OdDb3dProfile_mergeProfiles(*args):
    return _ODA_Drawings.OdDb3dProfile_mergeProfiles(*args)

class OdDbDeepCloneFiler(OdDbDwgFiler):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbDeepCloneFiler_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbDeepCloneFiler_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbDeepCloneFiler_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbDeepCloneFiler_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbDeepCloneFiler_createObject(*args)

    def start(self, *args):
        return _ODA_Drawings.OdDbDeepCloneFiler_start(self, *args)

    def nextReference(self, *args):
        return _ODA_Drawings.OdDbDeepCloneFiler_nextReference(self, *args)

    def idMapping(self, *args):
        return _ODA_Drawings.OdDbDeepCloneFiler_idMapping(self, *args)

    def defaultProcessReferences(self, *args):
        return _ODA_Drawings.OdDbDeepCloneFiler_defaultProcessReferences(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbDeepCloneFiler

# Register OdDbDeepCloneFiler in _ODA_Drawings:
_ODA_Drawings.OdDbDeepCloneFiler_swigregister(OdDbDeepCloneFiler)

def OdDbDeepCloneFiler_cast(*args):
    return _ODA_Drawings.OdDbDeepCloneFiler_cast(*args)

def OdDbDeepCloneFiler_desc(*args):
    return _ODA_Drawings.OdDbDeepCloneFiler_desc(*args)

def OdDbDeepCloneFiler_createObject(*args):
    return _ODA_Drawings.OdDbDeepCloneFiler_createObject(*args)

class OdDbWblockCloneFiler(OdDbDeepCloneFiler):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbWblockCloneFiler_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbWblockCloneFiler_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbWblockCloneFiler_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbWblockCloneFiler_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbWblockCloneFiler_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbWblockCloneFiler

# Register OdDbWblockCloneFiler in _ODA_Drawings:
_ODA_Drawings.OdDbWblockCloneFiler_swigregister(OdDbWblockCloneFiler)

def OdDbWblockCloneFiler_cast(*args):
    return _ODA_Drawings.OdDbWblockCloneFiler_cast(*args)

def OdDbWblockCloneFiler_desc(*args):
    return _ODA_Drawings.OdDbWblockCloneFiler_desc(*args)

def OdDbWblockCloneFiler_createObject(*args):
    return _ODA_Drawings.OdDbWblockCloneFiler_createObject(*args)

ODA_ARRREAD_PAGESIZE = _ODA_Drawings.ODA_ARRREAD_PAGESIZE
class Int8(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def read(*args):
        return _ODA_Drawings.Int8_read(*args)

    @staticmethod
    def write(*args):
        return _ODA_Drawings.Int8_write(*args)

    def __init__(self, *args):
        _ODA_Drawings.Int8_swiginit(self, _ODA_Drawings.new_Int8(*args))
    __swig_destroy__ = _ODA_Drawings.delete_Int8

# Register Int8 in _ODA_Drawings:
_ODA_Drawings.Int8_swigregister(Int8)

def Int8_read(*args):
    return _ODA_Drawings.Int8_read(*args)

def Int8_write(*args):
    return _ODA_Drawings.Int8_write(*args)

class Int16(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def read(*args):
        return _ODA_Drawings.Int16_read(*args)

    @staticmethod
    def write(*args):
        return _ODA_Drawings.Int16_write(*args)

    def __init__(self, *args):
        _ODA_Drawings.Int16_swiginit(self, _ODA_Drawings.new_Int16(*args))
    __swig_destroy__ = _ODA_Drawings.delete_Int16

# Register Int16 in _ODA_Drawings:
_ODA_Drawings.Int16_swigregister(Int16)

def Int16_read(*args):
    return _ODA_Drawings.Int16_read(*args)

def Int16_write(*args):
    return _ODA_Drawings.Int16_write(*args)

class Int32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def read(*args):
        return _ODA_Drawings.Int32_read(*args)

    @staticmethod
    def write(*args):
        return _ODA_Drawings.Int32_write(*args)

    def __init__(self, *args):
        _ODA_Drawings.Int32_swiginit(self, _ODA_Drawings.new_Int32(*args))
    __swig_destroy__ = _ODA_Drawings.delete_Int32

# Register Int32 in _ODA_Drawings:
_ODA_Drawings.Int32_swigregister(Int32)

def Int32_read(*args):
    return _ODA_Drawings.Int32_read(*args)

def Int32_write(*args):
    return _ODA_Drawings.Int32_write(*args)

class Double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def read(*args):
        return _ODA_Drawings.Double_read(*args)

    @staticmethod
    def write(*args):
        return _ODA_Drawings.Double_write(*args)

    def __init__(self, *args):
        _ODA_Drawings.Double_swiginit(self, _ODA_Drawings.new_Double(*args))
    __swig_destroy__ = _ODA_Drawings.delete_Double

# Register Double in _ODA_Drawings:
_ODA_Drawings.Double_swigregister(Double)

def Double_read(*args):
    return _ODA_Drawings.Double_read(*args)

def Double_write(*args):
    return _ODA_Drawings.Double_write(*args)

class OdApLongTransactionReactor(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdApLongTransactionReactor_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdApLongTransactionReactor_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdApLongTransactionReactor_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdApLongTransactionReactor_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdApLongTransactionReactor_createObject(*args)

    def beginCheckOut(self, *args):
        return _ODA_Drawings.OdApLongTransactionReactor_beginCheckOut(self, *args)

    def endCheckOut(self, *args):
        return _ODA_Drawings.OdApLongTransactionReactor_endCheckOut(self, *args)

    def beginCheckIn(self, *args):
        return _ODA_Drawings.OdApLongTransactionReactor_beginCheckIn(self, *args)

    def endCheckIn(self, *args):
        return _ODA_Drawings.OdApLongTransactionReactor_endCheckIn(self, *args)

    def abortLongTransaction(self, *args):
        return _ODA_Drawings.OdApLongTransactionReactor_abortLongTransaction(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdApLongTransactionReactor

# Register OdApLongTransactionReactor in _ODA_Drawings:
_ODA_Drawings.OdApLongTransactionReactor_swigregister(OdApLongTransactionReactor)

def OdApLongTransactionReactor_cast(*args):
    return _ODA_Drawings.OdApLongTransactionReactor_cast(*args)

def OdApLongTransactionReactor_desc(*args):
    return _ODA_Drawings.OdApLongTransactionReactor_desc(*args)

def OdApLongTransactionReactor_createObject(*args):
    return _ODA_Drawings.OdApLongTransactionReactor_createObject(*args)

class OdApLongTransactionManager(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdApLongTransactionManager_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdApLongTransactionManager_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdApLongTransactionManager_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdApLongTransactionManager_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdApLongTransactionManager_createObject(*args)

    def checkOut(self, *args):
        return _ODA_Drawings.OdApLongTransactionManager_checkOut(self, *args)

    def checkIn(self, *args):
        return _ODA_Drawings.OdApLongTransactionManager_checkIn(self, *args)

    def abortLongTransaction(self, *args):
        return _ODA_Drawings.OdApLongTransactionManager_abortLongTransaction(self, *args)

    def currentLongTransactionFor(self, *args):
        return _ODA_Drawings.OdApLongTransactionManager_currentLongTransactionFor(self, *args)

    def addReactor(self, *args):
        return _ODA_Drawings.OdApLongTransactionManager_addReactor(self, *args)

    def removeReactor(self, *args):
        return _ODA_Drawings.OdApLongTransactionManager_removeReactor(self, *args)

    def addClassFilter(self, *args):
        return _ODA_Drawings.OdApLongTransactionManager_addClassFilter(self, *args)

    def isFiltered(self, *args):
        return _ODA_Drawings.OdApLongTransactionManager_isFiltered(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdApLongTransactionManager

# Register OdApLongTransactionManager in _ODA_Drawings:
_ODA_Drawings.OdApLongTransactionManager_swigregister(OdApLongTransactionManager)

def OdApLongTransactionManager_cast(*args):
    return _ODA_Drawings.OdApLongTransactionManager_cast(*args)

def OdApLongTransactionManager_desc(*args):
    return _ODA_Drawings.OdApLongTransactionManager_desc(*args)

def OdApLongTransactionManager_createObject(*args):
    return _ODA_Drawings.OdApLongTransactionManager_createObject(*args)


def odapLongTransactionManager(*args):
    return _ODA_Drawings.odapLongTransactionManager(*args)
class PdfImporterEx(OdPdfImport):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def properties(self, *args):
        return _ODA_Drawings.PdfImporterEx_properties(self, *args)

    def _import(self, *args):
        return _ODA_Drawings.PdfImporterEx__import(self, *args)

    def loadDocument(self, *args):
        return _ODA_Drawings.PdfImporterEx_loadDocument(self, *args)

    def isDocumentLoaded(self, *args):
        return _ODA_Drawings.PdfImporterEx_isDocumentLoaded(self, *args)

    def loadPage(self, *args):
        return _ODA_Drawings.PdfImporterEx_loadPage(self, *args)

    def isPageLoaded(self, *args):
        return _ODA_Drawings.PdfImporterEx_isPageLoaded(self, *args)

    def getPageCount(self, *args):
        return _ODA_Drawings.PdfImporterEx_getPageCount(self, *args)

    def getMeasureDictInfo(self, *args):
        return _ODA_Drawings.PdfImporterEx_getMeasureDictInfo(self, *args)

    def fillLayersInfo(self, *args):
        return _ODA_Drawings.PdfImporterEx_fillLayersInfo(self, *args)

    def getPageWidth(self, *args):
        return _ODA_Drawings.PdfImporterEx_getPageWidth(self, *args)

    def getPageHeight(self, *args):
        return _ODA_Drawings.PdfImporterEx_getPageHeight(self, *args)

    def setClipBoundary(self, *args):
        return _ODA_Drawings.PdfImporterEx_setClipBoundary(self, *args)

    def setLayersInfo(self, *args):
        return _ODA_Drawings.PdfImporterEx_setLayersInfo(self, *args)

    def clearUnderlayInfo(self, *args):
        return _ODA_Drawings.PdfImporterEx_clearUnderlayInfo(self, *args)

    def getImportedObjectsInfo(self, *args):
        return _ODA_Drawings.PdfImporterEx_getImportedObjectsInfo(self, *args)

    def fillFontsInfo(self, *args):
        return _ODA_Drawings.PdfImporterEx_fillFontsInfo(self, *args)

    def setPreferableFontCallback(self, *args):
        return _ODA_Drawings.PdfImporterEx_setPreferableFontCallback(self, *args)

    def extractEmbededFonts(self, *args):
        return _ODA_Drawings.PdfImporterEx_extractEmbededFonts(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_PdfImporterEx

# Register PdfImporterEx in _ODA_Drawings:
_ODA_Drawings.PdfImporterEx_swigregister(PdfImporterEx)

class OdDwfImport(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    success = _ODA_Drawings.OdDwfImport_success
    fail = _ODA_Drawings.OdDwfImport_fail
    bad_password = _ODA_Drawings.OdDwfImport_bad_password
    bad_file = _ODA_Drawings.OdDwfImport_bad_file
    bad_database = _ODA_Drawings.OdDwfImport_bad_database
    encrypted_file = _ODA_Drawings.OdDwfImport_encrypted_file

    def _import(self, *args):
        return _ODA_Drawings.OdDwfImport__import(self, *args)

    def properties(self, *args):
        return _ODA_Drawings.OdDwfImport_properties(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDwfImport

# Register OdDwfImport in _ODA_Drawings:
_ODA_Drawings.OdDwfImport_swigregister(OdDwfImport)

class OdDwfImportModule(ODA_Kernel.OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def create(self, *args):
        return _ODA_Drawings.OdDwfImportModule_create(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDwfImportModule

# Register OdDwfImportModule in _ODA_Drawings:
_ODA_Drawings.OdDwfImportModule_swigregister(OdDwfImportModule)


def createDwfImporter(*args):
    return _ODA_Drawings.createDwfImporter(*args)
class OdColladaImport(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    success = _ODA_Drawings.OdColladaImport_success
    fail = _ODA_Drawings.OdColladaImport_fail
    bad_file = _ODA_Drawings.OdColladaImport_bad_file
    bad_database = _ODA_Drawings.OdColladaImport_bad_database

    def _import(self, *args):
        return _ODA_Drawings.OdColladaImport__import(self, *args)

    def properties(self, *args):
        return _ODA_Drawings.OdColladaImport_properties(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdColladaImport

# Register OdColladaImport in _ODA_Drawings:
_ODA_Drawings.OdColladaImport_swigregister(OdColladaImport)

class ColladaImportModule(ODA_Kernel.OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def create(self, *args):
        return _ODA_Drawings.ColladaImportModule_create(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_ColladaImportModule

# Register ColladaImportModule in _ODA_Drawings:
_ODA_Drawings.ColladaImportModule_swigregister(ColladaImportModule)


def createColladaImporter(*args):
    return _ODA_Drawings.createColladaImporter(*args)
CUSTOM_DEVICE_NAME = _ODA_Drawings.CUSTOM_DEVICE_NAME
class OdDbPlotSettingsValidatorCustomMediaPE(ODA_Kernel.OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorCustomMediaPE_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorCustomMediaPE_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorCustomMediaPE_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorCustomMediaPE_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorCustomMediaPE_createObject(*args)

    def addMedia(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorCustomMediaPE_addMedia(self, *args)

    def editMedia(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorCustomMediaPE_editMedia(self, *args)

    def removeMedia(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorCustomMediaPE_removeMedia(self, *args)

    def getMedia(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorCustomMediaPE_getMedia(self, *args)

    def clear(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorCustomMediaPE_clear(self, *args)

    def size(self, *args):
        return _ODA_Drawings.OdDbPlotSettingsValidatorCustomMediaPE_size(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdDbPlotSettingsValidatorCustomMediaPE

# Register OdDbPlotSettingsValidatorCustomMediaPE in _ODA_Drawings:
_ODA_Drawings.OdDbPlotSettingsValidatorCustomMediaPE_swigregister(OdDbPlotSettingsValidatorCustomMediaPE)

def OdDbPlotSettingsValidatorCustomMediaPE_cast(*args):
    return _ODA_Drawings.OdDbPlotSettingsValidatorCustomMediaPE_cast(*args)

def OdDbPlotSettingsValidatorCustomMediaPE_desc(*args):
    return _ODA_Drawings.OdDbPlotSettingsValidatorCustomMediaPE_desc(*args)

def OdDbPlotSettingsValidatorCustomMediaPE_createObject(*args):
    return _ODA_Drawings.OdDbPlotSettingsValidatorCustomMediaPE_createObject(*args)

class PdfUnderlayModule(ODA_Kernel.OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def initApp(self, *args):
        return _ODA_Drawings.PdfUnderlayModule_initApp(self, *args)

    def uninitApp(self, *args):
        return _ODA_Drawings.PdfUnderlayModule_uninitApp(self, *args)

    def getExplodeGeometry(self, *args):
        return _ODA_Drawings.PdfUnderlayModule_getExplodeGeometry(self, *args)

    def forInternalUseOnly(self, *args):
        return _ODA_Drawings.PdfUnderlayModule_forInternalUseOnly(self, *args)

    def getSnapGeometry(self, *args):
        return _ODA_Drawings.PdfUnderlayModule_getSnapGeometry(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_PdfUnderlayModule

# Register PdfUnderlayModule in _ODA_Drawings:
_ODA_Drawings.PdfUnderlayModule_swigregister(PdfUnderlayModule)

class OdIdViewSpline(OdDbSpline):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdIdViewSpline_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdIdViewSpline_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdIdViewSpline_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdIdViewSpline_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdIdViewSpline_createObject(*args)

    def vportId(self, *args):
        return _ODA_Drawings.OdIdViewSpline_vportId(self, *args)

    def setVportId(self, *args):
        return _ODA_Drawings.OdIdViewSpline_setVportId(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdIdViewSpline_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdIdViewSpline_dwgOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdIdViewSpline_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdIdViewSpline_subViewportDraw(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdIdViewSpline_subExplode(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdIdViewSpline

# Register OdIdViewSpline in _ODA_Drawings:
_ODA_Drawings.OdIdViewSpline_swigregister(OdIdViewSpline)

def OdIdViewSpline_cast(*args):
    return _ODA_Drawings.OdIdViewSpline_cast(*args)

def OdIdViewSpline_desc(*args):
    return _ODA_Drawings.OdIdViewSpline_desc(*args)

def OdIdViewSpline_createObject(*args):
    return _ODA_Drawings.OdIdViewSpline_createObject(*args)

class OdIdViewLine(OdDbLine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdIdViewLine_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdIdViewLine_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdIdViewLine_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdIdViewLine_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdIdViewLine_createObject(*args)

    def vportId(self, *args):
        return _ODA_Drawings.OdIdViewLine_vportId(self, *args)

    def setVportId(self, *args):
        return _ODA_Drawings.OdIdViewLine_setVportId(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdIdViewLine_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdIdViewLine_dwgOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdIdViewLine_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdIdViewLine_subViewportDraw(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdIdViewLine_subExplode(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdIdViewLine

# Register OdIdViewLine in _ODA_Drawings:
_ODA_Drawings.OdIdViewLine_swigregister(OdIdViewLine)

def OdIdViewLine_cast(*args):
    return _ODA_Drawings.OdIdViewLine_cast(*args)

def OdIdViewLine_desc(*args):
    return _ODA_Drawings.OdIdViewLine_desc(*args)

def OdIdViewLine_createObject(*args):
    return _ODA_Drawings.OdIdViewLine_createObject(*args)

class OdIdViewEllipse(OdDbEllipse):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdIdViewEllipse_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdIdViewEllipse_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdIdViewEllipse_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdIdViewEllipse_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdIdViewEllipse_createObject(*args)

    def vportId(self, *args):
        return _ODA_Drawings.OdIdViewEllipse_vportId(self, *args)

    def setVportId(self, *args):
        return _ODA_Drawings.OdIdViewEllipse_setVportId(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdIdViewEllipse_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdIdViewEllipse_dwgOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdIdViewEllipse_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdIdViewEllipse_subViewportDraw(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdIdViewEllipse_subExplode(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdIdViewEllipse

# Register OdIdViewEllipse in _ODA_Drawings:
_ODA_Drawings.OdIdViewEllipse_swigregister(OdIdViewEllipse)

def OdIdViewEllipse_cast(*args):
    return _ODA_Drawings.OdIdViewEllipse_cast(*args)

def OdIdViewEllipse_desc(*args):
    return _ODA_Drawings.OdIdViewEllipse_desc(*args)

def OdIdViewEllipse_createObject(*args):
    return _ODA_Drawings.OdIdViewEllipse_createObject(*args)

class OdIdViewCircle(OdDbCircle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdIdViewCircle_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdIdViewCircle_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdIdViewCircle_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdIdViewCircle_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdIdViewCircle_createObject(*args)

    def vportId(self, *args):
        return _ODA_Drawings.OdIdViewCircle_vportId(self, *args)

    def setVportId(self, *args):
        return _ODA_Drawings.OdIdViewCircle_setVportId(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdIdViewCircle_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdIdViewCircle_dwgOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdIdViewCircle_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdIdViewCircle_subViewportDraw(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdIdViewCircle_subExplode(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdIdViewCircle

# Register OdIdViewCircle in _ODA_Drawings:
_ODA_Drawings.OdIdViewCircle_swigregister(OdIdViewCircle)

def OdIdViewCircle_cast(*args):
    return _ODA_Drawings.OdIdViewCircle_cast(*args)

def OdIdViewCircle_desc(*args):
    return _ODA_Drawings.OdIdViewCircle_desc(*args)

def OdIdViewCircle_createObject(*args):
    return _ODA_Drawings.OdIdViewCircle_createObject(*args)

class OdIdViewArc(OdDbArc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdIdViewArc_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdIdViewArc_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdIdViewArc_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdIdViewArc_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdIdViewArc_createObject(*args)

    def vportId(self, *args):
        return _ODA_Drawings.OdIdViewArc_vportId(self, *args)

    def setVportId(self, *args):
        return _ODA_Drawings.OdIdViewArc_setVportId(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdIdViewArc_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdIdViewArc_dwgOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdIdViewArc_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdIdViewArc_subViewportDraw(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdIdViewArc_subExplode(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdIdViewArc

# Register OdIdViewArc in _ODA_Drawings:
_ODA_Drawings.OdIdViewArc_swigregister(OdIdViewArc)

def OdIdViewArc_cast(*args):
    return _ODA_Drawings.OdIdViewArc_cast(*args)

def OdIdViewArc_desc(*args):
    return _ODA_Drawings.OdIdViewArc_desc(*args)

def OdIdViewArc_createObject(*args):
    return _ODA_Drawings.OdIdViewArc_createObject(*args)

class OdIdObjectToNotify(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdIdObjectToNotify_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdIdObjectToNotify_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdIdObjectToNotify_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdIdObjectToNotify_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdIdObjectToNotify_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdIdObjectToNotify

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdIdObjectToNotify_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdIdObjectToNotify_dwgOutFields(self, *args)

    def decomposeForSave(self, *args):
        return _ODA_Drawings.OdIdObjectToNotify_decomposeForSave(self, *args)

# Register OdIdObjectToNotify in _ODA_Drawings:
_ODA_Drawings.OdIdObjectToNotify_swigregister(OdIdObjectToNotify)

def OdIdObjectToNotify_cast(*args):
    return _ODA_Drawings.OdIdObjectToNotify_cast(*args)

def OdIdObjectToNotify_desc(*args):
    return _ODA_Drawings.OdIdObjectToNotify_desc(*args)

def OdIdObjectToNotify_createObject(*args):
    return _ODA_Drawings.OdIdObjectToNotify_createObject(*args)

class OdIdVersion(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdIdVersion_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdIdVersion_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdIdVersion_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdIdVersion_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdIdVersion_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdIdVersion_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdIdVersion_dwgOutFields(self, *args)

    def decomposeForSave(self, *args):
        return _ODA_Drawings.OdIdVersion_decomposeForSave(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdIdVersion

# Register OdIdVersion in _ODA_Drawings:
_ODA_Drawings.OdIdVersion_swigregister(OdIdVersion)

def OdIdVersion_cast(*args):
    return _ODA_Drawings.OdIdVersion_cast(*args)

def OdIdVersion_desc(*args):
    return _ODA_Drawings.OdIdVersion_desc(*args)

def OdIdVersion_createObject(*args):
    return _ODA_Drawings.OdIdVersion_createObject(*args)

class _LineData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pnt = property(_ODA_Drawings._LineData_pnt_get, _ODA_Drawings._LineData_pnt_set)
    unknownId = property(_ODA_Drawings._LineData_unknownId_get, _ODA_Drawings._LineData_unknownId_set)

    def __init__(self, *args):
        _ODA_Drawings._LineData_swiginit(self, _ODA_Drawings.new__LineData(*args))
    __swig_destroy__ = _ODA_Drawings.delete__LineData

# Register _LineData in _ODA_Drawings:
_ODA_Drawings._LineData_swigregister(_LineData)

class _ArcData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pnt = property(_ODA_Drawings._ArcData_pnt_get, _ODA_Drawings._ArcData_pnt_set)
    vec1 = property(_ODA_Drawings._ArcData_vec1_get, _ODA_Drawings._ArcData_vec1_set)
    dbl1 = property(_ODA_Drawings._ArcData_dbl1_get, _ODA_Drawings._ArcData_dbl1_set)
    vec2 = property(_ODA_Drawings._ArcData_vec2_get, _ODA_Drawings._ArcData_vec2_set)
    dbl2 = property(_ODA_Drawings._ArcData_dbl2_get, _ODA_Drawings._ArcData_dbl2_set)

    def __init__(self, *args):
        _ODA_Drawings._ArcData_swiginit(self, _ODA_Drawings.new__ArcData(*args))
    __swig_destroy__ = _ODA_Drawings.delete__ArcData

# Register _ArcData in _ODA_Drawings:
_ODA_Drawings._ArcData_swigregister(_ArcData)

class _CircleData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pnt = property(_ODA_Drawings._CircleData_pnt_get, _ODA_Drawings._CircleData_pnt_set)
    vec = property(_ODA_Drawings._CircleData_vec_get, _ODA_Drawings._CircleData_vec_set)
    dbl = property(_ODA_Drawings._CircleData_dbl_get, _ODA_Drawings._CircleData_dbl_set)

    def __init__(self, *args):
        _ODA_Drawings._CircleData_swiginit(self, _ODA_Drawings.new__CircleData(*args))
    __swig_destroy__ = _ODA_Drawings.delete__CircleData

# Register _CircleData in _ODA_Drawings:
_ODA_Drawings._CircleData_swigregister(_CircleData)

class OdIdComplexEntity(OdDbEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdIdComplexEntity_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdIdComplexEntity_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdIdComplexEntity_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdIdComplexEntity_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdIdComplexEntity_createObject(*args)

    def vportId(self, *args):
        return _ODA_Drawings.OdIdComplexEntity_vportId(self, *args)

    def setVportId(self, *args):
        return _ODA_Drawings.OdIdComplexEntity_setVportId(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdIdComplexEntity_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdIdComplexEntity_dwgOutFields(self, *args)

    def addGraphicalArc(self, *args):
        return _ODA_Drawings.OdIdComplexEntity_addGraphicalArc(self, *args)

    def addGraphicalCircle(self, *args):
        return _ODA_Drawings.OdIdComplexEntity_addGraphicalCircle(self, *args)

    def addGraphicalLine(self, *args):
        return _ODA_Drawings.OdIdComplexEntity_addGraphicalLine(self, *args)

    def addLogicalArc(self, *args):
        return _ODA_Drawings.OdIdComplexEntity_addLogicalArc(self, *args)

    def addLogicalCircle(self, *args):
        return _ODA_Drawings.OdIdComplexEntity_addLogicalCircle(self, *args)

    def addLogicalLine(self, *args):
        return _ODA_Drawings.OdIdComplexEntity_addLogicalLine(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdIdComplexEntity_subWorldDraw(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdIdComplexEntity_subExplode(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdIdComplexEntity

# Register OdIdComplexEntity in _ODA_Drawings:
_ODA_Drawings.OdIdComplexEntity_swigregister(OdIdComplexEntity)

def OdIdComplexEntity_cast(*args):
    return _ODA_Drawings.OdIdComplexEntity_cast(*args)

def OdIdComplexEntity_desc(*args):
    return _ODA_Drawings.OdIdComplexEntity_desc(*args)

def OdIdComplexEntity_createObject(*args):
    return _ODA_Drawings.OdIdComplexEntity_createObject(*args)

class OdIdBlockReference(OdDbBlockReference):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdIdBlockReference_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdIdBlockReference_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdIdBlockReference_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdIdBlockReference_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdIdBlockReference_createObject(*args)

    def vportId(self, *args):
        return _ODA_Drawings.OdIdBlockReference_vportId(self, *args)

    def setVportId(self, *args):
        return _ODA_Drawings.OdIdBlockReference_setVportId(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdIdBlockReference_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdIdBlockReference_dwgOutFields(self, *args)

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdIdBlockReference_subWorldDraw(self, *args)

    def subViewportDraw(self, *args):
        return _ODA_Drawings.OdIdBlockReference_subViewportDraw(self, *args)

    def subExplode(self, *args):
        return _ODA_Drawings.OdIdBlockReference_subExplode(self, *args)

    def explodeGeometryToBlock(self, *args):
        return _ODA_Drawings.OdIdBlockReference_explodeGeometryToBlock(self, *args)

    def decomposeForSave(self, *args):
        return _ODA_Drawings.OdIdBlockReference_decomposeForSave(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_OdIdBlockReference

# Register OdIdBlockReference in _ODA_Drawings:
_ODA_Drawings.OdIdBlockReference_swigregister(OdIdBlockReference)

def OdIdBlockReference_cast(*args):
    return _ODA_Drawings.OdIdBlockReference_cast(*args)

def OdIdBlockReference_desc(*args):
    return _ODA_Drawings.OdIdBlockReference_desc(*args)

def OdIdBlockReference_createObject(*args):
    return _ODA_Drawings.OdIdBlockReference_createObject(*args)

class ExHostAppServices(OdDbHostAppServices2, ODA_Kernel.OdDbHostAppProgressMeter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def newProgressMeter(self, *args):
        return _ODA_Drawings.ExHostAppServices_newProgressMeter(self, *args)

    def releaseProgressMeter(self, *args):
        return _ODA_Drawings.ExHostAppServices_releaseProgressMeter(self, *args)

    def start(self, *args):
        return _ODA_Drawings.ExHostAppServices_start(self, *args)

    def stop(self, *args):
        return _ODA_Drawings.ExHostAppServices_stop(self, *args)

    def meterProgress(self, *args):
        return _ODA_Drawings.ExHostAppServices_meterProgress(self, *args)

    def setLimit(self, *args):
        return _ODA_Drawings.ExHostAppServices_setLimit(self, *args)

    def disableOutput(self, *args):
        return _ODA_Drawings.ExHostAppServices_disableOutput(self, *args)

    def setPrefix(self, *args):
        return _ODA_Drawings.ExHostAppServices_setPrefix(self, *args)

    def patternManager(self, *args):
        return _ODA_Drawings.ExHostAppServices_patternManager(self, *args)

    def readFile(self, *args):
        return _ODA_Drawings.ExHostAppServices_readFile(self, *args)

    @staticmethod
    def __new(*args):
        return _ODA_Drawings.ExHostAppServices___new(*args)

    def __init__(self):
        this = _ODA_Drawings.ExHostAppServices___new(self)
        try:
          self.this.append(this)
        except:
          self.this = this

    __swig_destroy__ = _ODA_Drawings.delete_ExHostAppServices
    def __disown__(self):
        self.this.disown()
        _ODA_Drawings.disown_ExHostAppServices(self)
        return weakref.proxy(self)

# Register ExHostAppServices in _ODA_Drawings:
_ODA_Drawings.ExHostAppServices_swigregister(ExHostAppServices)

def ExHostAppServices___new(*args):
    return _ODA_Drawings.ExHostAppServices___new(*args)

class ExDbCommandContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.ExDbCommandContext_createObject(*args)

    def baseDatabase(self, *args):
        return _ODA_Drawings.ExDbCommandContext_baseDatabase(self, *args)

    def reset(self, *args):
        return _ODA_Drawings.ExDbCommandContext_reset(self, *args)

    def baseIO(self, *args):
        return _ODA_Drawings.ExDbCommandContext_baseIO(self, *args)

    def cloneObject(self, *args):
        return _ODA_Drawings.ExDbCommandContext_cloneObject(self, *args)

    def userIO(self, *args):
        return _ODA_Drawings.ExDbCommandContext_userIO(self, *args)

    def funcIO(self, *args):
        return _ODA_Drawings.ExDbCommandContext_funcIO(self, *args)

    def setParam(self, *args):
        return _ODA_Drawings.ExDbCommandContext_setParam(self, *args)

    def param(self, *args):
        return _ODA_Drawings.ExDbCommandContext_param(self, *args)

    def setResult(self, *args):
        return _ODA_Drawings.ExDbCommandContext_setResult(self, *args)

    def result(self, *args):
        return _ODA_Drawings.ExDbCommandContext_result(self, *args)

    def setArbitraryData(self, *args):
        return _ODA_Drawings.ExDbCommandContext_setArbitraryData(self, *args)

    def arbitraryData(self, *args):
        return _ODA_Drawings.ExDbCommandContext_arbitraryData(self, *args)

    def pickfirst(self, *args):
        return _ODA_Drawings.ExDbCommandContext_pickfirst(self, *args)

    def setPickfirst(self, *args):
        return _ODA_Drawings.ExDbCommandContext_setPickfirst(self, *args)

    def previousSelection(self, *args):
        return _ODA_Drawings.ExDbCommandContext_previousSelection(self, *args)

    def setPreviousSelection(self, *args):
        return _ODA_Drawings.ExDbCommandContext_setPreviousSelection(self, *args)

    def baseFormatter(self, *args):
        return _ODA_Drawings.ExDbCommandContext_baseFormatter(self, *args)

    def formatter(self, *args):
        return _ODA_Drawings.ExDbCommandContext_formatter(self, *args)

    def putString(self, *args):
        return _ODA_Drawings.ExDbCommandContext_putString(self, *args)

    def getInt(self, *args):
        return _ODA_Drawings.ExDbCommandContext_getInt(self, *args)

    def getReal(self, *args):
        return _ODA_Drawings.ExDbCommandContext_getReal(self, *args)

    def getString(self, *args):
        return _ODA_Drawings.ExDbCommandContext_getString(self, *args)

    def getKeyword(self, *args):
        return _ODA_Drawings.ExDbCommandContext_getKeyword(self, *args)

    def getAngle(self, *args):
        return _ODA_Drawings.ExDbCommandContext_getAngle(self, *args)

    def getLASTPOINT(self, *args):
        return _ODA_Drawings.ExDbCommandContext_getLASTPOINT(self, *args)

    def setLASTPOINT(self, *args):
        return _ODA_Drawings.ExDbCommandContext_setLASTPOINT(self, *args)

    def createRubberBand(self, *args):
        return _ODA_Drawings.ExDbCommandContext_createRubberBand(self, *args)

    def createRectFrame(self, *args):
        return _ODA_Drawings.ExDbCommandContext_createRectFrame(self, *args)

    def getPoint(self, *args):
        return _ODA_Drawings.ExDbCommandContext_getPoint(self, *args)

    def getDist(self, *args):
        return _ODA_Drawings.ExDbCommandContext_getDist(self, *args)

    def getFilePath(self, *args):
        return _ODA_Drawings.ExDbCommandContext_getFilePath(self, *args)

    def getCmColor(self, *args):
        return _ODA_Drawings.ExDbCommandContext_getCmColor(self, *args)

    def getColor(self, *args):
        return _ODA_Drawings.ExDbCommandContext_getColor(self, *args)

    def select(self, *args):
        return _ODA_Drawings.ExDbCommandContext_select(self, *args)

    def highlight(self, *args):
        return _ODA_Drawings.ExDbCommandContext_highlight(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_ExDbCommandContext

# Register ExDbCommandContext in _ODA_Drawings:
_ODA_Drawings.ExDbCommandContext_swigregister(ExDbCommandContext)

def ExDbCommandContext_createObject(*args):
    return _ODA_Drawings.ExDbCommandContext_createObject(*args)

class DbJoinEntityPEModule(ODA_Kernel.OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Drawings.delete_DbJoinEntityPEModule

# Register DbJoinEntityPEModule in _ODA_Drawings:
_ODA_Drawings.DbJoinEntityPEModule_swigregister(DbJoinEntityPEModule)

class AutoSurfServicesModule(ODA_Kernel.OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def initApp(self, *args):
        return _ODA_Drawings.AutoSurfServicesModule_initApp(self, *args)

    def uninitApp(self, *args):
        return _ODA_Drawings.AutoSurfServicesModule_uninitApp(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_AutoSurfServicesModule

# Register AutoSurfServicesModule in _ODA_Drawings:
_ODA_Drawings.AutoSurfServicesModule_swigregister(AutoSurfServicesModule)

class OdAsSurfBody(OdDbBody):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.OdAsSurfBody_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.OdAsSurfBody_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.OdAsSurfBody_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.OdAsSurfBody_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.OdAsSurfBody_createObject(*args)
    __swig_destroy__ = _ODA_Drawings.delete_OdAsSurfBody

    def subWorldDraw(self, *args):
        return _ODA_Drawings.OdAsSurfBody_subWorldDraw(self, *args)

    def dxfOut(self, *args):
        return _ODA_Drawings.OdAsSurfBody_dxfOut(self, *args)

    def decomposeForSave(self, *args):
        return _ODA_Drawings.OdAsSurfBody_decomposeForSave(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.OdAsSurfBody_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.OdAsSurfBody_dwgOutFields(self, *args)

    def dxfInFields(self, *args):
        return _ODA_Drawings.OdAsSurfBody_dxfInFields(self, *args)

    def dxfOutFields(self, *args):
        return _ODA_Drawings.OdAsSurfBody_dxfOutFields(self, *args)

    def acisIn(self, *args):
        return _ODA_Drawings.OdAsSurfBody_acisIn(self, *args)

    def getSubSurface(self, *args):
        return _ODA_Drawings.OdAsSurfBody_getSubSurface(self, *args)

    def getNormalLength(self, *args):
        return _ODA_Drawings.OdAsSurfBody_getNormalLength(self, *args)

    def getLinesCountU(self, *args):
        return _ODA_Drawings.OdAsSurfBody_getLinesCountU(self, *args)

    def getLinesCountV(self, *args):
        return _ODA_Drawings.OdAsSurfBody_getLinesCountV(self, *args)

    def getSubNurbSurface(self, *args):
        return _ODA_Drawings.OdAsSurfBody_getSubNurbSurface(self, *args)

    def getTrimmingLoops(self, *args):
        return _ODA_Drawings.OdAsSurfBody_getTrimmingLoops(self, *args)

# Register OdAsSurfBody in _ODA_Drawings:
_ODA_Drawings.OdAsSurfBody_swigregister(OdAsSurfBody)

def OdAsSurfBody_cast(*args):
    return _ODA_Drawings.OdAsSurfBody_cast(*args)

def OdAsSurfBody_desc(*args):
    return _ODA_Drawings.OdAsSurfBody_desc(*args)

def OdAsSurfBody_createObject(*args):
    return _ODA_Drawings.OdAsSurfBody_createObject(*args)

class AsSpline2dInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Unknown6 = property(_ODA_Drawings.AsSpline2dInfo_Unknown6_get, _ODA_Drawings.AsSpline2dInfo_Unknown6_set)
    NurbCurve2d = property(_ODA_Drawings.AsSpline2dInfo_NurbCurve2d_get, _ODA_Drawings.AsSpline2dInfo_NurbCurve2d_set)

    def __init__(self, *args):
        _ODA_Drawings.AsSpline2dInfo_swiginit(self, _ODA_Drawings.new_AsSpline2dInfo(*args))
    __swig_destroy__ = _ODA_Drawings.delete_AsSpline2dInfo

# Register AsSpline2dInfo in _ODA_Drawings:
_ODA_Drawings.AsSpline2dInfo_swigregister(AsSpline2dInfo)

class AECIDbEmbeddedRasterImageDef(OdDbRasterImageDef):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImageDef_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImageDef_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImageDef_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImageDef_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImageDef_createObject(*args)

    def getEmbeddedObjectName(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImageDef_getEmbeddedObjectName(self, *args)

    def setEmbeddedObjectName(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImageDef_setEmbeddedObjectName(self, *args)

    def getRasterImage(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImageDef_getRasterImage(self, *args)

    def load(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImageDef_load(self, *args)

    def isLoaded(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImageDef_isLoaded(self, *args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImageDef_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImageDef_dwgOutFields(self, *args)

    def dxfOut(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImageDef_dxfOut(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_AECIDbEmbeddedRasterImageDef

# Register AECIDbEmbeddedRasterImageDef in _ODA_Drawings:
_ODA_Drawings.AECIDbEmbeddedRasterImageDef_swigregister(AECIDbEmbeddedRasterImageDef)

def AECIDbEmbeddedRasterImageDef_cast(*args):
    return _ODA_Drawings.AECIDbEmbeddedRasterImageDef_cast(*args)

def AECIDbEmbeddedRasterImageDef_desc(*args):
    return _ODA_Drawings.AECIDbEmbeddedRasterImageDef_desc(*args)

def AECIDbEmbeddedRasterImageDef_createObject(*args):
    return _ODA_Drawings.AECIDbEmbeddedRasterImageDef_createObject(*args)

class AECIDbEmbeddedRasterImage(OdDbRasterImage):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImage_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImage_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImage_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImage_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImage_createObject(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImage_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImage_dwgOutFields(self, *args)

    def dxfOut(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedRasterImage_dxfOut(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_AECIDbEmbeddedRasterImage

# Register AECIDbEmbeddedRasterImage in _ODA_Drawings:
_ODA_Drawings.AECIDbEmbeddedRasterImage_swigregister(AECIDbEmbeddedRasterImage)

def AECIDbEmbeddedRasterImage_cast(*args):
    return _ODA_Drawings.AECIDbEmbeddedRasterImage_cast(*args)

def AECIDbEmbeddedRasterImage_desc(*args):
    return _ODA_Drawings.AECIDbEmbeddedRasterImage_desc(*args)

def AECIDbEmbeddedRasterImage_createObject(*args):
    return _ODA_Drawings.AECIDbEmbeddedRasterImage_createObject(*args)

class AECISourceCorrelationInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.AECISourceCorrelationInfo_swiginit(self, _ODA_Drawings.new_AECISourceCorrelationInfo(*args))

    def read(self, *args):
        return _ODA_Drawings.AECISourceCorrelationInfo_read(self, *args)

    def write(self, *args):
        return _ODA_Drawings.AECISourceCorrelationInfo_write(self, *args)
    m_units = property(_ODA_Drawings.AECISourceCorrelationInfo_m_units_get, _ODA_Drawings.AECISourceCorrelationInfo_m_units_set)
    m_scale = property(_ODA_Drawings.AECISourceCorrelationInfo_m_scale_get, _ODA_Drawings.AECISourceCorrelationInfo_m_scale_set)
    m_rotation = property(_ODA_Drawings.AECISourceCorrelationInfo_m_rotation_get, _ODA_Drawings.AECISourceCorrelationInfo_m_rotation_set)
    m_density = property(_ODA_Drawings.AECISourceCorrelationInfo_m_density_get, _ODA_Drawings.AECISourceCorrelationInfo_m_density_set)
    m_origin = property(_ODA_Drawings.AECISourceCorrelationInfo_m_origin_get, _ODA_Drawings.AECISourceCorrelationInfo_m_origin_set)
    __swig_destroy__ = _ODA_Drawings.delete_AECISourceCorrelationInfo

# Register AECISourceCorrelationInfo in _ODA_Drawings:
_ODA_Drawings.AECISourceCorrelationInfo_swigregister(AECISourceCorrelationInfo)

class AECIImageProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Drawings.AECIImageProperties_swiginit(self, _ODA_Drawings.new_AECIImageProperties(*args))

    def read(self, *args):
        return _ODA_Drawings.AECIImageProperties_read(self, *args)

    def write(self, *args):
        return _ODA_Drawings.AECIImageProperties_write(self, *args)
    m_width = property(_ODA_Drawings.AECIImageProperties_m_width_get, _ODA_Drawings.AECIImageProperties_m_width_set)
    m_height = property(_ODA_Drawings.AECIImageProperties_m_height_get, _ODA_Drawings.AECIImageProperties_m_height_set)
    m_value3 = property(_ODA_Drawings.AECIImageProperties_m_value3_get, _ODA_Drawings.AECIImageProperties_m_value3_set)
    m_value4 = property(_ODA_Drawings.AECIImageProperties_m_value4_get, _ODA_Drawings.AECIImageProperties_m_value4_set)
    m_value5 = property(_ODA_Drawings.AECIImageProperties_m_value5_get, _ODA_Drawings.AECIImageProperties_m_value5_set)
    __swig_destroy__ = _ODA_Drawings.delete_AECIImageProperties

# Register AECIImageProperties in _ODA_Drawings:
_ODA_Drawings.AECIImageProperties_swigregister(AECIImageProperties)

class AECIDbEmbeddedImageData(OdDbObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_cast(*args)

    @staticmethod
    def desc(*args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_desc(*args)

    def isA(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_isA(self, *args)

    def queryX(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_queryX(self, *args)

    @staticmethod
    def createObject(*args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_createObject(*args)

    def getRasterImage(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_getRasterImage(self, *args)

    def setRasterImage(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_setRasterImage(self, *args)

    def dataCreatedTime(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_dataCreatedTime(self, *args)

    def dataModifiedTime(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_dataModifiedTime(self, *args)

    def imageRawDataSize(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_imageRawDataSize(self, *args)

    def imageRawData(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_imageRawData(self, *args)

    def imageProperties(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_imageProperties(self, *args)

    def sourceCorrelation(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_sourceCorrelation(self, *args)

    def setSourceCorrelation(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_setSourceCorrelation(self, *args)

    def originalFilePath(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_originalFilePath(self, *args)

    def setOriginalFilePath(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_setOriginalFilePath(self, *args)

    def originalFormat(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_originalFormat(self, *args)

    def setOriginalFormat(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_setOriginalFormat(self, *args)

    def originalFileDetails(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_originalFileDetails(self, *args)

    def setOriginalFileDetails(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_setOriginalFileDetails(self, *args)

    @staticmethod
    def imageDataDictionary(*args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_imageDataDictionary(*args)

    def dwgInFields(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_dwgInFields(self, *args)

    def dwgOutFields(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_dwgOutFields(self, *args)

    def dxfOut(self, *args):
        return _ODA_Drawings.AECIDbEmbeddedImageData_dxfOut(self, *args)
    __swig_destroy__ = _ODA_Drawings.delete_AECIDbEmbeddedImageData

# Register AECIDbEmbeddedImageData in _ODA_Drawings:
_ODA_Drawings.AECIDbEmbeddedImageData_swigregister(AECIDbEmbeddedImageData)

def AECIDbEmbeddedImageData_cast(*args):
    return _ODA_Drawings.AECIDbEmbeddedImageData_cast(*args)

def AECIDbEmbeddedImageData_desc(*args):
    return _ODA_Drawings.AECIDbEmbeddedImageData_desc(*args)

def AECIDbEmbeddedImageData_createObject(*args):
    return _ODA_Drawings.AECIDbEmbeddedImageData_createObject(*args)

def AECIDbEmbeddedImageData_imageDataDictionary(*args):
    return _ODA_Drawings.AECIDbEmbeddedImageData_imageDataDictionary(*args)

NullIdAllowed = _ODA_Drawings.NullIdAllowed


