# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ODA_Kernel_Py3
else:
    import _ODA_Kernel_Py3

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class OdRxObjectImpl_OdStreamBuf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def addRef(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxObjectImpl_OdStreamBuf_addRef(self, *args)

    def release(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxObjectImpl_OdStreamBuf_release(self, *args)

    def numRefs(self, *args) -> "long":
        return _ODA_Kernel_Py3.OdRxObjectImpl_OdStreamBuf_numRefs(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdStreamBuf >":
        return _ODA_Kernel_Py3.OdRxObjectImpl_OdStreamBuf_createObject(*args)

# Register OdRxObjectImpl_OdStreamBuf in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxObjectImpl_OdStreamBuf_swigregister(OdRxObjectImpl_OdStreamBuf)

def OdRxObjectImpl_OdStreamBuf_createObject(*args) -> "OdSmartPtr< OdStreamBuf >":
    return _ODA_Kernel_Py3.OdRxObjectImpl_OdStreamBuf_createObject(*args)

BrepType_kOpenShell = _ODA_Kernel_Py3.BrepType_kOpenShell
BrepType_kSolid = _ODA_Kernel_Py3.BrepType_kSolid
BrepType_kVoid = _ODA_Kernel_Py3.BrepType_kVoid
ODCHAR_IS_INT16LE = _ODA_Kernel_Py3.ODCHAR_IS_INT16LE
class OdGeVector3dArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > >::const_iterator":
        return _ODA_Kernel_Py3.OdGeVector3dArray_begin(self, *args)

    def end(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > >::const_iterator":
        return _ODA_Kernel_Py3.OdGeVector3dArray_end(self, *args)

    def rbegin(self, *args) -> "std::reverse_iterator< OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > >::const_iterator >":
        return _ODA_Kernel_Py3.OdGeVector3dArray_rbegin(self, *args)

    def rend(self, *args) -> "std::reverse_iterator< OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > >::const_iterator >":
        return _ODA_Kernel_Py3.OdGeVector3dArray_rend(self, *args)

    def resize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeVector3dArray_resize(self, *args)

    def size(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > >::size_type":
        return _ODA_Kernel_Py3.OdGeVector3dArray_size(self, *args)

    def empty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector3dArray_empty(self, *args)

    def capacity(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > >::size_type":
        return _ODA_Kernel_Py3.OdGeVector3dArray_capacity(self, *args)

    def reserve(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeVector3dArray_reserve(self, *args)

    def assign(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeVector3dArray_assign(self, *args)

    def erase(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > >::iterator":
        return _ODA_Kernel_Py3.OdGeVector3dArray_erase(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeVector3dArray_clear(self, *args)

    def push_back(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeVector3dArray_push_back(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector3dArray_contains(self, *args)

    def length(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > >::size_type":
        return _ODA_Kernel_Py3.OdGeVector3dArray_length(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector3dArray_isEmpty(self, *args)

    def logicalLength(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > >::size_type":
        return _ODA_Kernel_Py3.OdGeVector3dArray_logicalLength(self, *args)

    def physicalLength(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > >::size_type":
        return _ODA_Kernel_Py3.OdGeVector3dArray_physicalLength(self, *args)

    def growLength(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeVector3dArray_growLength(self, *args)

    def getPtr(self, *args) -> "OdGeVector3d const *":
        return _ODA_Kernel_Py3.OdGeVector3dArray_getPtr(self, *args)

    def asArrayPtr(self, *args) -> "OdGeVector3d *":
        return _ODA_Kernel_Py3.OdGeVector3dArray_asArrayPtr(self, *args)

    def setAt(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > > &":
        return _ODA_Kernel_Py3.OdGeVector3dArray_setAt(self, *args)

    def getAt(self, *args) -> "OdGeVector3d const &":
        return _ODA_Kernel_Py3.OdGeVector3dArray_getAt(self, *args)

    def first(self, *args) -> "OdGeVector3d const &":
        return _ODA_Kernel_Py3.OdGeVector3dArray_first(self, *args)

    def last(self, *args) -> "OdGeVector3d const &":
        return _ODA_Kernel_Py3.OdGeVector3dArray_last(self, *args)

    def removeFirst(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > > &":
        return _ODA_Kernel_Py3.OdGeVector3dArray_removeFirst(self, *args)

    def removeLast(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > > &":
        return _ODA_Kernel_Py3.OdGeVector3dArray_removeLast(self, *args)

    def setGrowLength(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > > &":
        return _ODA_Kernel_Py3.OdGeVector3dArray_setGrowLength(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeVector3dArray_swiginit(self, _ODA_Kernel_Py3.new_OdGeVector3dArray(*args))

    @staticmethod
    def create(*args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > >":
        return _ODA_Kernel_Py3.OdGeVector3dArray_create(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeVector3dArray

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector3dArray___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector3dArray___ne__(self, *args)

    def setAll(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > > &":
        return _ODA_Kernel_Py3.OdGeVector3dArray_setAll(self, *args)

    def append(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > > &":
        return _ODA_Kernel_Py3.OdGeVector3dArray_append(self, *args)

    def insertAt(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > > &":
        return _ODA_Kernel_Py3.OdGeVector3dArray_insertAt(self, *args)

    def removeAt(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > > &":
        return _ODA_Kernel_Py3.OdGeVector3dArray_removeAt(self, *args)

    def removeSubArray(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > > &":
        return _ODA_Kernel_Py3.OdGeVector3dArray_removeSubArray(self, *args)

    def find(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector3dArray_find(self, *args)

    def setLogicalLength(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > > &":
        return _ODA_Kernel_Py3.OdGeVector3dArray_setLogicalLength(self, *args)

    def setPhysicalLength(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > > &":
        return _ODA_Kernel_Py3.OdGeVector3dArray_setPhysicalLength(self, *args)

    def reverse(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > > &":
        return _ODA_Kernel_Py3.OdGeVector3dArray_reverse(self, *args)

    def swap(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeVector3dArray_swap(self, *args)

    def remove(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector3dArray_remove(self, *args)

    def Insert(self, *args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > >::iterator":
        return _ODA_Kernel_Py3.OdGeVector3dArray_Insert(self, *args)

    def At(self, *args) -> "OdGeVector3d const &":
        return _ODA_Kernel_Py3.OdGeVector3dArray_At(self, *args)

# Register OdGeVector3dArray in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeVector3dArray_swigregister(OdGeVector3dArray)

def OdGeVector3dArray_create(*args) -> "OdArray< OdGeVector3d,OdMemoryAllocator< OdGeVector3d > >":
    return _ODA_Kernel_Py3.OdGeVector3dArray_create(*args)

class OdGePoint3dArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > >::const_iterator":
        return _ODA_Kernel_Py3.OdGePoint3dArray_begin(self, *args)

    def end(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > >::const_iterator":
        return _ODA_Kernel_Py3.OdGePoint3dArray_end(self, *args)

    def rbegin(self, *args) -> "std::reverse_iterator< OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > >::const_iterator >":
        return _ODA_Kernel_Py3.OdGePoint3dArray_rbegin(self, *args)

    def rend(self, *args) -> "std::reverse_iterator< OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > >::const_iterator >":
        return _ODA_Kernel_Py3.OdGePoint3dArray_rend(self, *args)

    def resize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGePoint3dArray_resize(self, *args)

    def size(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > >::size_type":
        return _ODA_Kernel_Py3.OdGePoint3dArray_size(self, *args)

    def empty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint3dArray_empty(self, *args)

    def capacity(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > >::size_type":
        return _ODA_Kernel_Py3.OdGePoint3dArray_capacity(self, *args)

    def reserve(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGePoint3dArray_reserve(self, *args)

    def assign(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGePoint3dArray_assign(self, *args)

    def erase(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > >::iterator":
        return _ODA_Kernel_Py3.OdGePoint3dArray_erase(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGePoint3dArray_clear(self, *args)

    def push_back(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGePoint3dArray_push_back(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint3dArray_contains(self, *args)

    def length(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > >::size_type":
        return _ODA_Kernel_Py3.OdGePoint3dArray_length(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint3dArray_isEmpty(self, *args)

    def logicalLength(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > >::size_type":
        return _ODA_Kernel_Py3.OdGePoint3dArray_logicalLength(self, *args)

    def physicalLength(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > >::size_type":
        return _ODA_Kernel_Py3.OdGePoint3dArray_physicalLength(self, *args)

    def growLength(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGePoint3dArray_growLength(self, *args)

    def getPtr(self, *args) -> "OdGePoint3d const *":
        return _ODA_Kernel_Py3.OdGePoint3dArray_getPtr(self, *args)

    def asArrayPtr(self, *args) -> "OdGePoint3d *":
        return _ODA_Kernel_Py3.OdGePoint3dArray_asArrayPtr(self, *args)

    def setAt(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > > &":
        return _ODA_Kernel_Py3.OdGePoint3dArray_setAt(self, *args)

    def getAt(self, *args) -> "OdGePoint3d const &":
        return _ODA_Kernel_Py3.OdGePoint3dArray_getAt(self, *args)

    def first(self, *args) -> "OdGePoint3d const &":
        return _ODA_Kernel_Py3.OdGePoint3dArray_first(self, *args)

    def last(self, *args) -> "OdGePoint3d const &":
        return _ODA_Kernel_Py3.OdGePoint3dArray_last(self, *args)

    def removeFirst(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > > &":
        return _ODA_Kernel_Py3.OdGePoint3dArray_removeFirst(self, *args)

    def removeLast(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > > &":
        return _ODA_Kernel_Py3.OdGePoint3dArray_removeLast(self, *args)

    def setGrowLength(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > > &":
        return _ODA_Kernel_Py3.OdGePoint3dArray_setGrowLength(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGePoint3dArray_swiginit(self, _ODA_Kernel_Py3.new_OdGePoint3dArray(*args))

    @staticmethod
    def create(*args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > >":
        return _ODA_Kernel_Py3.OdGePoint3dArray_create(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGePoint3dArray

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint3dArray___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint3dArray___ne__(self, *args)

    def setAll(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > > &":
        return _ODA_Kernel_Py3.OdGePoint3dArray_setAll(self, *args)

    def append(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > > &":
        return _ODA_Kernel_Py3.OdGePoint3dArray_append(self, *args)

    def insertAt(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > > &":
        return _ODA_Kernel_Py3.OdGePoint3dArray_insertAt(self, *args)

    def removeAt(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > > &":
        return _ODA_Kernel_Py3.OdGePoint3dArray_removeAt(self, *args)

    def removeSubArray(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > > &":
        return _ODA_Kernel_Py3.OdGePoint3dArray_removeSubArray(self, *args)

    def find(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint3dArray_find(self, *args)

    def setLogicalLength(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > > &":
        return _ODA_Kernel_Py3.OdGePoint3dArray_setLogicalLength(self, *args)

    def setPhysicalLength(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > > &":
        return _ODA_Kernel_Py3.OdGePoint3dArray_setPhysicalLength(self, *args)

    def reverse(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > > &":
        return _ODA_Kernel_Py3.OdGePoint3dArray_reverse(self, *args)

    def swap(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGePoint3dArray_swap(self, *args)

    def remove(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint3dArray_remove(self, *args)

    def Insert(self, *args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > >::iterator":
        return _ODA_Kernel_Py3.OdGePoint3dArray_Insert(self, *args)

    def At(self, *args) -> "OdGePoint3d const &":
        return _ODA_Kernel_Py3.OdGePoint3dArray_At(self, *args)

# Register OdGePoint3dArray in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGePoint3dArray_swigregister(OdGePoint3dArray)

def OdGePoint3dArray_create(*args) -> "OdArray< OdGePoint3d,OdMemoryAllocator< OdGePoint3d > >":
    return _ODA_Kernel_Py3.OdGePoint3dArray_create(*args)

class OdGePoint2dArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > >::const_iterator":
        return _ODA_Kernel_Py3.OdGePoint2dArray_begin(self, *args)

    def end(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > >::const_iterator":
        return _ODA_Kernel_Py3.OdGePoint2dArray_end(self, *args)

    def rbegin(self, *args) -> "std::reverse_iterator< OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > >::const_iterator >":
        return _ODA_Kernel_Py3.OdGePoint2dArray_rbegin(self, *args)

    def rend(self, *args) -> "std::reverse_iterator< OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > >::const_iterator >":
        return _ODA_Kernel_Py3.OdGePoint2dArray_rend(self, *args)

    def resize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGePoint2dArray_resize(self, *args)

    def size(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > >::size_type":
        return _ODA_Kernel_Py3.OdGePoint2dArray_size(self, *args)

    def empty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint2dArray_empty(self, *args)

    def capacity(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > >::size_type":
        return _ODA_Kernel_Py3.OdGePoint2dArray_capacity(self, *args)

    def reserve(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGePoint2dArray_reserve(self, *args)

    def assign(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGePoint2dArray_assign(self, *args)

    def erase(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > >::iterator":
        return _ODA_Kernel_Py3.OdGePoint2dArray_erase(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGePoint2dArray_clear(self, *args)

    def push_back(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGePoint2dArray_push_back(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint2dArray_contains(self, *args)

    def length(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > >::size_type":
        return _ODA_Kernel_Py3.OdGePoint2dArray_length(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint2dArray_isEmpty(self, *args)

    def logicalLength(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > >::size_type":
        return _ODA_Kernel_Py3.OdGePoint2dArray_logicalLength(self, *args)

    def physicalLength(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > >::size_type":
        return _ODA_Kernel_Py3.OdGePoint2dArray_physicalLength(self, *args)

    def growLength(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGePoint2dArray_growLength(self, *args)

    def getPtr(self, *args) -> "OdGePoint2d const *":
        return _ODA_Kernel_Py3.OdGePoint2dArray_getPtr(self, *args)

    def asArrayPtr(self, *args) -> "OdGePoint2d *":
        return _ODA_Kernel_Py3.OdGePoint2dArray_asArrayPtr(self, *args)

    def setAt(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > > &":
        return _ODA_Kernel_Py3.OdGePoint2dArray_setAt(self, *args)

    def getAt(self, *args) -> "OdGePoint2d const &":
        return _ODA_Kernel_Py3.OdGePoint2dArray_getAt(self, *args)

    def first(self, *args) -> "OdGePoint2d const &":
        return _ODA_Kernel_Py3.OdGePoint2dArray_first(self, *args)

    def last(self, *args) -> "OdGePoint2d const &":
        return _ODA_Kernel_Py3.OdGePoint2dArray_last(self, *args)

    def removeFirst(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > > &":
        return _ODA_Kernel_Py3.OdGePoint2dArray_removeFirst(self, *args)

    def removeLast(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > > &":
        return _ODA_Kernel_Py3.OdGePoint2dArray_removeLast(self, *args)

    def setGrowLength(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > > &":
        return _ODA_Kernel_Py3.OdGePoint2dArray_setGrowLength(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGePoint2dArray_swiginit(self, _ODA_Kernel_Py3.new_OdGePoint2dArray(*args))

    @staticmethod
    def create(*args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > >":
        return _ODA_Kernel_Py3.OdGePoint2dArray_create(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGePoint2dArray

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint2dArray___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint2dArray___ne__(self, *args)

    def setAll(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > > &":
        return _ODA_Kernel_Py3.OdGePoint2dArray_setAll(self, *args)

    def append(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > > &":
        return _ODA_Kernel_Py3.OdGePoint2dArray_append(self, *args)

    def insertAt(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > > &":
        return _ODA_Kernel_Py3.OdGePoint2dArray_insertAt(self, *args)

    def removeAt(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > > &":
        return _ODA_Kernel_Py3.OdGePoint2dArray_removeAt(self, *args)

    def removeSubArray(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > > &":
        return _ODA_Kernel_Py3.OdGePoint2dArray_removeSubArray(self, *args)

    def find(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint2dArray_find(self, *args)

    def setLogicalLength(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > > &":
        return _ODA_Kernel_Py3.OdGePoint2dArray_setLogicalLength(self, *args)

    def setPhysicalLength(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > > &":
        return _ODA_Kernel_Py3.OdGePoint2dArray_setPhysicalLength(self, *args)

    def reverse(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > > &":
        return _ODA_Kernel_Py3.OdGePoint2dArray_reverse(self, *args)

    def swap(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGePoint2dArray_swap(self, *args)

    def remove(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint2dArray_remove(self, *args)

    def Insert(self, *args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > >::iterator":
        return _ODA_Kernel_Py3.OdGePoint2dArray_Insert(self, *args)

    def At(self, *args) -> "OdGePoint2d const &":
        return _ODA_Kernel_Py3.OdGePoint2dArray_At(self, *args)

# Register OdGePoint2dArray in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGePoint2dArray_swigregister(OdGePoint2dArray)

def OdGePoint2dArray_create(*args) -> "OdArray< OdGePoint2d,OdMemoryAllocator< OdGePoint2d > >":
    return _ODA_Kernel_Py3.OdGePoint2dArray_create(*args)

class OdGeDoubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self, *args) -> "OdArray< double,OdMemoryAllocator< double > >::const_iterator":
        return _ODA_Kernel_Py3.OdGeDoubleArray_begin(self, *args)

    def end(self, *args) -> "OdArray< double,OdMemoryAllocator< double > >::const_iterator":
        return _ODA_Kernel_Py3.OdGeDoubleArray_end(self, *args)

    def rbegin(self, *args) -> "std::reverse_iterator< OdArray< double,OdMemoryAllocator< double > >::const_iterator >":
        return _ODA_Kernel_Py3.OdGeDoubleArray_rbegin(self, *args)

    def rend(self, *args) -> "std::reverse_iterator< OdArray< double,OdMemoryAllocator< double > >::const_iterator >":
        return _ODA_Kernel_Py3.OdGeDoubleArray_rend(self, *args)

    def resize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeDoubleArray_resize(self, *args)

    def size(self, *args) -> "OdArray< double,OdMemoryAllocator< double > >::size_type":
        return _ODA_Kernel_Py3.OdGeDoubleArray_size(self, *args)

    def empty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeDoubleArray_empty(self, *args)

    def capacity(self, *args) -> "OdArray< double,OdMemoryAllocator< double > >::size_type":
        return _ODA_Kernel_Py3.OdGeDoubleArray_capacity(self, *args)

    def reserve(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeDoubleArray_reserve(self, *args)

    def assign(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeDoubleArray_assign(self, *args)

    def erase(self, *args) -> "OdArray< double,OdMemoryAllocator< double > >::iterator":
        return _ODA_Kernel_Py3.OdGeDoubleArray_erase(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeDoubleArray_clear(self, *args)

    def push_back(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeDoubleArray_push_back(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeDoubleArray_contains(self, *args)

    def length(self, *args) -> "OdArray< double,OdMemoryAllocator< double > >::size_type":
        return _ODA_Kernel_Py3.OdGeDoubleArray_length(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeDoubleArray_isEmpty(self, *args)

    def logicalLength(self, *args) -> "OdArray< double,OdMemoryAllocator< double > >::size_type":
        return _ODA_Kernel_Py3.OdGeDoubleArray_logicalLength(self, *args)

    def physicalLength(self, *args) -> "OdArray< double,OdMemoryAllocator< double > >::size_type":
        return _ODA_Kernel_Py3.OdGeDoubleArray_physicalLength(self, *args)

    def growLength(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeDoubleArray_growLength(self, *args)

    def getPtr(self, *args) -> "double const *":
        return _ODA_Kernel_Py3.OdGeDoubleArray_getPtr(self, *args)

    def asArrayPtr(self, *args) -> "double *":
        return _ODA_Kernel_Py3.OdGeDoubleArray_asArrayPtr(self, *args)

    def setAt(self, *args) -> "OdArray< double,OdMemoryAllocator< double > > &":
        return _ODA_Kernel_Py3.OdGeDoubleArray_setAt(self, *args)

    def getAt(self, *args) -> "double const &":
        return _ODA_Kernel_Py3.OdGeDoubleArray_getAt(self, *args)

    def first(self, *args) -> "double const &":
        return _ODA_Kernel_Py3.OdGeDoubleArray_first(self, *args)

    def last(self, *args) -> "double const &":
        return _ODA_Kernel_Py3.OdGeDoubleArray_last(self, *args)

    def removeFirst(self, *args) -> "OdArray< double,OdMemoryAllocator< double > > &":
        return _ODA_Kernel_Py3.OdGeDoubleArray_removeFirst(self, *args)

    def removeLast(self, *args) -> "OdArray< double,OdMemoryAllocator< double > > &":
        return _ODA_Kernel_Py3.OdGeDoubleArray_removeLast(self, *args)

    def setGrowLength(self, *args) -> "OdArray< double,OdMemoryAllocator< double > > &":
        return _ODA_Kernel_Py3.OdGeDoubleArray_setGrowLength(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeDoubleArray_swiginit(self, _ODA_Kernel_Py3.new_OdGeDoubleArray(*args))

    @staticmethod
    def create(*args) -> "OdArray< double,OdMemoryAllocator< double > >":
        return _ODA_Kernel_Py3.OdGeDoubleArray_create(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeDoubleArray

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeDoubleArray___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeDoubleArray___ne__(self, *args)

    def setAll(self, *args) -> "OdArray< double,OdMemoryAllocator< double > > &":
        return _ODA_Kernel_Py3.OdGeDoubleArray_setAll(self, *args)

    def append(self, *args) -> "OdArray< double,OdMemoryAllocator< double > > &":
        return _ODA_Kernel_Py3.OdGeDoubleArray_append(self, *args)

    def insertAt(self, *args) -> "OdArray< double,OdMemoryAllocator< double > > &":
        return _ODA_Kernel_Py3.OdGeDoubleArray_insertAt(self, *args)

    def removeAt(self, *args) -> "OdArray< double,OdMemoryAllocator< double > > &":
        return _ODA_Kernel_Py3.OdGeDoubleArray_removeAt(self, *args)

    def removeSubArray(self, *args) -> "OdArray< double,OdMemoryAllocator< double > > &":
        return _ODA_Kernel_Py3.OdGeDoubleArray_removeSubArray(self, *args)

    def find(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeDoubleArray_find(self, *args)

    def setLogicalLength(self, *args) -> "OdArray< double,OdMemoryAllocator< double > > &":
        return _ODA_Kernel_Py3.OdGeDoubleArray_setLogicalLength(self, *args)

    def setPhysicalLength(self, *args) -> "OdArray< double,OdMemoryAllocator< double > > &":
        return _ODA_Kernel_Py3.OdGeDoubleArray_setPhysicalLength(self, *args)

    def reverse(self, *args) -> "OdArray< double,OdMemoryAllocator< double > > &":
        return _ODA_Kernel_Py3.OdGeDoubleArray_reverse(self, *args)

    def swap(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeDoubleArray_swap(self, *args)

    def remove(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeDoubleArray_remove(self, *args)

    def Insert(self, *args) -> "OdArray< double,OdMemoryAllocator< double > >::iterator":
        return _ODA_Kernel_Py3.OdGeDoubleArray_Insert(self, *args)

    def At(self, *args) -> "double const &":
        return _ODA_Kernel_Py3.OdGeDoubleArray_At(self, *args)

# Register OdGeDoubleArray in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeDoubleArray_swigregister(OdGeDoubleArray)

def OdGeDoubleArray_create(*args) -> "OdArray< double,OdMemoryAllocator< double > >":
    return _ODA_Kernel_Py3.OdGeDoubleArray_create(*args)

class OdInt32Array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > >::const_iterator":
        return _ODA_Kernel_Py3.OdInt32Array_begin(self, *args)

    def end(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > >::const_iterator":
        return _ODA_Kernel_Py3.OdInt32Array_end(self, *args)

    def rbegin(self, *args) -> "std::reverse_iterator< OdArray< OdInt32,OdMemoryAllocator< OdInt32 > >::const_iterator >":
        return _ODA_Kernel_Py3.OdInt32Array_rbegin(self, *args)

    def rend(self, *args) -> "std::reverse_iterator< OdArray< OdInt32,OdMemoryAllocator< OdInt32 > >::const_iterator >":
        return _ODA_Kernel_Py3.OdInt32Array_rend(self, *args)

    def resize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdInt32Array_resize(self, *args)

    def size(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > >::size_type":
        return _ODA_Kernel_Py3.OdInt32Array_size(self, *args)

    def empty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdInt32Array_empty(self, *args)

    def capacity(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > >::size_type":
        return _ODA_Kernel_Py3.OdInt32Array_capacity(self, *args)

    def reserve(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdInt32Array_reserve(self, *args)

    def assign(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdInt32Array_assign(self, *args)

    def erase(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > >::iterator":
        return _ODA_Kernel_Py3.OdInt32Array_erase(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdInt32Array_clear(self, *args)

    def push_back(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdInt32Array_push_back(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdInt32Array_contains(self, *args)

    def length(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > >::size_type":
        return _ODA_Kernel_Py3.OdInt32Array_length(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdInt32Array_isEmpty(self, *args)

    def logicalLength(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > >::size_type":
        return _ODA_Kernel_Py3.OdInt32Array_logicalLength(self, *args)

    def physicalLength(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > >::size_type":
        return _ODA_Kernel_Py3.OdInt32Array_physicalLength(self, *args)

    def growLength(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdInt32Array_growLength(self, *args)

    def getPtr(self, *args) -> "OdInt32 const *":
        return _ODA_Kernel_Py3.OdInt32Array_getPtr(self, *args)

    def asArrayPtr(self, *args) -> "OdInt32 *":
        return _ODA_Kernel_Py3.OdInt32Array_asArrayPtr(self, *args)

    def setAt(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > > &":
        return _ODA_Kernel_Py3.OdInt32Array_setAt(self, *args)

    def getAt(self, *args) -> "OdInt32 const &":
        return _ODA_Kernel_Py3.OdInt32Array_getAt(self, *args)

    def first(self, *args) -> "OdInt32 const &":
        return _ODA_Kernel_Py3.OdInt32Array_first(self, *args)

    def last(self, *args) -> "OdInt32 const &":
        return _ODA_Kernel_Py3.OdInt32Array_last(self, *args)

    def removeFirst(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > > &":
        return _ODA_Kernel_Py3.OdInt32Array_removeFirst(self, *args)

    def removeLast(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > > &":
        return _ODA_Kernel_Py3.OdInt32Array_removeLast(self, *args)

    def setGrowLength(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > > &":
        return _ODA_Kernel_Py3.OdInt32Array_setGrowLength(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdInt32Array_swiginit(self, _ODA_Kernel_Py3.new_OdInt32Array(*args))

    @staticmethod
    def create(*args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > >":
        return _ODA_Kernel_Py3.OdInt32Array_create(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdInt32Array

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdInt32Array___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdInt32Array___ne__(self, *args)

    def setAll(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > > &":
        return _ODA_Kernel_Py3.OdInt32Array_setAll(self, *args)

    def append(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > > &":
        return _ODA_Kernel_Py3.OdInt32Array_append(self, *args)

    def insertAt(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > > &":
        return _ODA_Kernel_Py3.OdInt32Array_insertAt(self, *args)

    def removeAt(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > > &":
        return _ODA_Kernel_Py3.OdInt32Array_removeAt(self, *args)

    def removeSubArray(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > > &":
        return _ODA_Kernel_Py3.OdInt32Array_removeSubArray(self, *args)

    def find(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdInt32Array_find(self, *args)

    def setLogicalLength(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > > &":
        return _ODA_Kernel_Py3.OdInt32Array_setLogicalLength(self, *args)

    def setPhysicalLength(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > > &":
        return _ODA_Kernel_Py3.OdInt32Array_setPhysicalLength(self, *args)

    def reverse(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > > &":
        return _ODA_Kernel_Py3.OdInt32Array_reverse(self, *args)

    def swap(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdInt32Array_swap(self, *args)

    def remove(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdInt32Array_remove(self, *args)

    def Insert(self, *args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > >::iterator":
        return _ODA_Kernel_Py3.OdInt32Array_Insert(self, *args)

    def At(self, *args) -> "OdInt32 const &":
        return _ODA_Kernel_Py3.OdInt32Array_At(self, *args)

# Register OdInt32Array in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdInt32Array_swigregister(OdInt32Array)

def OdInt32Array_create(*args) -> "OdArray< OdInt32,OdMemoryAllocator< OdInt32 > >":
    return _ODA_Kernel_Py3.OdInt32Array_create(*args)

class OdRxObjectPtrArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > >::const_iterator":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_begin(self, *args)

    def end(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > >::const_iterator":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_end(self, *args)

    def rbegin(self, *args) -> "std::reverse_iterator< OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > >::const_iterator >":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_rbegin(self, *args)

    def rend(self, *args) -> "std::reverse_iterator< OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > >::const_iterator >":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_rend(self, *args)

    def resize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_resize(self, *args)

    def size(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > >::size_type":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_size(self, *args)

    def empty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_empty(self, *args)

    def capacity(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > >::size_type":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_capacity(self, *args)

    def reserve(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_reserve(self, *args)

    def assign(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_assign(self, *args)

    def erase(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > >::iterator":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_erase(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_clear(self, *args)

    def push_back(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_push_back(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_contains(self, *args)

    def length(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > >::size_type":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_length(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_isEmpty(self, *args)

    def logicalLength(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > >::size_type":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_logicalLength(self, *args)

    def physicalLength(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > >::size_type":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_physicalLength(self, *args)

    def growLength(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_growLength(self, *args)

    def getPtr(self, *args) -> "OdRxObjectPtr const *":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_getPtr(self, *args)

    def asArrayPtr(self, *args) -> "OdRxObjectPtr *":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_asArrayPtr(self, *args)

    def setAt(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > > &":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_setAt(self, *args)

    def getAt(self, *args) -> "OdRxObjectPtr const &":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_getAt(self, *args)

    def first(self, *args) -> "OdRxObjectPtr const &":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_first(self, *args)

    def last(self, *args) -> "OdRxObjectPtr const &":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_last(self, *args)

    def removeFirst(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > > &":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_removeFirst(self, *args)

    def removeLast(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > > &":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_removeLast(self, *args)

    def setGrowLength(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > > &":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_setGrowLength(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdRxObjectPtrArray_swiginit(self, _ODA_Kernel_Py3.new_OdRxObjectPtrArray(*args))

    @staticmethod
    def create(*args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > >":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_create(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxObjectPtrArray

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray___ne__(self, *args)

    def setAll(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > > &":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_setAll(self, *args)

    def append(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > > &":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_append(self, *args)

    def insertAt(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > > &":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_insertAt(self, *args)

    def removeAt(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > > &":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_removeAt(self, *args)

    def removeSubArray(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > > &":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_removeSubArray(self, *args)

    def find(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_find(self, *args)

    def setLogicalLength(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > > &":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_setLogicalLength(self, *args)

    def setPhysicalLength(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > > &":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_setPhysicalLength(self, *args)

    def reverse(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > > &":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_reverse(self, *args)

    def swap(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_swap(self, *args)

    def remove(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_remove(self, *args)

    def Insert(self, *args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > >::iterator":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_Insert(self, *args)

    def At(self, *args) -> "OdRxObjectPtr const &":
        return _ODA_Kernel_Py3.OdRxObjectPtrArray_At(self, *args)

# Register OdRxObjectPtrArray in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxObjectPtrArray_swigregister(OdRxObjectPtrArray)

def OdRxObjectPtrArray_create(*args) -> "OdArray< OdRxObjectPtr,OdObjectsAllocator< OdRxObjectPtr > >":
    return _ODA_Kernel_Py3.OdRxObjectPtrArray_create(*args)

class OdGeNurbCurve2dArrayPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > >::const_iterator":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_begin(self, *args)

    def end(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > >::const_iterator":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_end(self, *args)

    def rbegin(self, *args) -> "std::reverse_iterator< OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > >::const_iterator >":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_rbegin(self, *args)

    def rend(self, *args) -> "std::reverse_iterator< OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > >::const_iterator >":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_rend(self, *args)

    def resize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_resize(self, *args)

    def size(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_size(self, *args)

    def empty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_empty(self, *args)

    def capacity(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_capacity(self, *args)

    def reserve(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_reserve(self, *args)

    def assign(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_assign(self, *args)

    def erase(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > >::iterator":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_erase(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_clear(self, *args)

    def push_back(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_push_back(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_contains(self, *args)

    def length(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_length(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_isEmpty(self, *args)

    def logicalLength(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_logicalLength(self, *args)

    def physicalLength(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_physicalLength(self, *args)

    def growLength(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_growLength(self, *args)

    def getPtr(self, *args) -> "OdGeNurbCurve2d *const *":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_getPtr(self, *args)

    def asArrayPtr(self, *args) -> "OdGeNurbCurve2d **":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_asArrayPtr(self, *args)

    def setAt(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_setAt(self, *args)

    def getAt(self, *args) -> "OdGeNurbCurve2d *const &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_getAt(self, *args)

    def first(self, *args) -> "OdGeNurbCurve2d *const &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_first(self, *args)

    def last(self, *args) -> "OdGeNurbCurve2d *const &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_last(self, *args)

    def removeFirst(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_removeFirst(self, *args)

    def removeLast(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_removeLast(self, *args)

    def setGrowLength(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_setGrowLength(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_swiginit(self, _ODA_Kernel_Py3.new_OdGeNurbCurve2dArrayPtr(*args))

    @staticmethod
    def create(*args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > >":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_create(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeNurbCurve2dArrayPtr

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr___ne__(self, *args)

    def setAll(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_setAll(self, *args)

    def append(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_append(self, *args)

    def insertAt(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_insertAt(self, *args)

    def removeAt(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_removeAt(self, *args)

    def removeSubArray(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_removeSubArray(self, *args)

    def find(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_find(self, *args)

    def setLogicalLength(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_setLogicalLength(self, *args)

    def setPhysicalLength(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_setPhysicalLength(self, *args)

    def reverse(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_reverse(self, *args)

    def swap(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_swap(self, *args)

    def remove(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_remove(self, *args)

    def Insert(self, *args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > >::iterator":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_Insert(self, *args)

    def At(self, *args) -> "OdGeNurbCurve2d *const &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_At(self, *args)

# Register OdGeNurbCurve2dArrayPtr in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_swigregister(OdGeNurbCurve2dArrayPtr)

def OdGeNurbCurve2dArrayPtr_create(*args) -> "OdArray< OdGeNurbCurve2d *,OdObjectsAllocator< OdGeNurbCurve2d * > >":
    return _ODA_Kernel_Py3.OdGeNurbCurve2dArrayPtr_create(*args)

class OdGeNurbCurve2dArray2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self, *args) -> "OdArray< OdArray< OdGeNurbCurve2d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve2d * > > >::const_iterator":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_begin(self, *args)

    def end(self, *args) -> "OdArray< OdArray< OdGeNurbCurve2d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve2d * > > >::const_iterator":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_end(self, *args)

    def rbegin(self, *args) -> "std::reverse_iterator< OdArray< OdArray< OdGeNurbCurve2d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve2d * > > >::const_iterator >":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_rbegin(self, *args)

    def rend(self, *args) -> "std::reverse_iterator< OdArray< OdArray< OdGeNurbCurve2d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve2d * > > >::const_iterator >":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_rend(self, *args)

    def resize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_resize(self, *args)

    def size(self, *args) -> "OdArray< OdArray< OdGeNurbCurve2d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve2d * > > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_size(self, *args)

    def empty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_empty(self, *args)

    def capacity(self, *args) -> "OdArray< OdArray< OdGeNurbCurve2d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve2d * > > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_capacity(self, *args)

    def reserve(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_reserve(self, *args)

    def assign(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_assign(self, *args)

    def erase(self, *args) -> "OdArray< OdArray< OdGeNurbCurve2d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve2d * > > >::iterator":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_erase(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_clear(self, *args)

    def push_back(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_push_back(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_contains(self, *args)

    def length(self, *args) -> "OdArray< OdArray< OdGeNurbCurve2d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve2d * > > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_length(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_isEmpty(self, *args)

    def logicalLength(self, *args) -> "OdArray< OdArray< OdGeNurbCurve2d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve2d * > > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_logicalLength(self, *args)

    def physicalLength(self, *args) -> "OdArray< OdArray< OdGeNurbCurve2d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve2d * > > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_physicalLength(self, *args)

    def growLength(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_growLength(self, *args)

    def getPtr(self, *args) -> "OdArray< OdGeNurbCurve2d * > const *":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_getPtr(self, *args)

    def asArrayPtr(self, *args) -> "OdArray< OdGeNurbCurve2d * > *":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_asArrayPtr(self, *args)

    def setAt(self, *args) -> "OdArray< OdGeNurbCurve2dArrayPtr,OdObjectsAllocator< OdGeNurbCurve2dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_setAt(self, *args)

    def getAt(self, *args) -> "OdArray< OdGeNurbCurve2d * > const &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_getAt(self, *args)

    def first(self, *args) -> "OdArray< OdGeNurbCurve2d * > const &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_first(self, *args)

    def last(self, *args) -> "OdArray< OdGeNurbCurve2d * > const &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_last(self, *args)

    def removeFirst(self, *args) -> "OdArray< OdGeNurbCurve2dArrayPtr,OdObjectsAllocator< OdGeNurbCurve2dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_removeFirst(self, *args)

    def removeLast(self, *args) -> "OdArray< OdGeNurbCurve2dArrayPtr,OdObjectsAllocator< OdGeNurbCurve2dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_removeLast(self, *args)

    def setGrowLength(self, *args) -> "OdArray< OdGeNurbCurve2dArrayPtr,OdObjectsAllocator< OdGeNurbCurve2dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_setGrowLength(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeNurbCurve2dArray2d(*args))

    @staticmethod
    def create(*args) -> "OdArray< OdArray< OdGeNurbCurve2d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve2d * > > >":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_create(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeNurbCurve2dArray2d

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d___ne__(self, *args)

    def setAll(self, *args) -> "OdArray< OdGeNurbCurve2dArrayPtr,OdObjectsAllocator< OdGeNurbCurve2dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_setAll(self, *args)

    def append(self, *args) -> "OdArray< OdGeNurbCurve2dArrayPtr,OdObjectsAllocator< OdGeNurbCurve2dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_append(self, *args)

    def insertAt(self, *args) -> "OdArray< OdGeNurbCurve2dArrayPtr,OdObjectsAllocator< OdGeNurbCurve2dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_insertAt(self, *args)

    def removeAt(self, *args) -> "OdArray< OdGeNurbCurve2dArrayPtr,OdObjectsAllocator< OdGeNurbCurve2dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_removeAt(self, *args)

    def removeSubArray(self, *args) -> "OdArray< OdGeNurbCurve2dArrayPtr,OdObjectsAllocator< OdGeNurbCurve2dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_removeSubArray(self, *args)

    def find(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_find(self, *args)

    def setLogicalLength(self, *args) -> "OdArray< OdGeNurbCurve2dArrayPtr,OdObjectsAllocator< OdGeNurbCurve2dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_setLogicalLength(self, *args)

    def setPhysicalLength(self, *args) -> "OdArray< OdGeNurbCurve2dArrayPtr,OdObjectsAllocator< OdGeNurbCurve2dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_setPhysicalLength(self, *args)

    def reverse(self, *args) -> "OdArray< OdGeNurbCurve2dArrayPtr,OdObjectsAllocator< OdGeNurbCurve2dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_reverse(self, *args)

    def swap(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_swap(self, *args)

    def remove(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_remove(self, *args)

    def Insert(self, *args) -> "OdArray< OdGeNurbCurve2dArrayPtr,OdObjectsAllocator< OdGeNurbCurve2dArrayPtr > >::iterator":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_Insert(self, *args)

    def At(self, *args) -> "OdArray< OdGeNurbCurve2d * > const &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_At(self, *args)

# Register OdGeNurbCurve2dArray2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_swigregister(OdGeNurbCurve2dArray2d)

def OdGeNurbCurve2dArray2d_create(*args) -> "OdArray< OdArray< OdGeNurbCurve2d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve2d * > > >":
    return _ODA_Kernel_Py3.OdGeNurbCurve2dArray2d_create(*args)

class OdGeNurbCurve3dArrayPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > >::const_iterator":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_begin(self, *args)

    def end(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > >::const_iterator":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_end(self, *args)

    def rbegin(self, *args) -> "std::reverse_iterator< OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > >::const_iterator >":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_rbegin(self, *args)

    def rend(self, *args) -> "std::reverse_iterator< OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > >::const_iterator >":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_rend(self, *args)

    def resize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_resize(self, *args)

    def size(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_size(self, *args)

    def empty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_empty(self, *args)

    def capacity(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_capacity(self, *args)

    def reserve(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_reserve(self, *args)

    def assign(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_assign(self, *args)

    def erase(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > >::iterator":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_erase(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_clear(self, *args)

    def push_back(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_push_back(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_contains(self, *args)

    def length(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_length(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_isEmpty(self, *args)

    def logicalLength(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_logicalLength(self, *args)

    def physicalLength(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_physicalLength(self, *args)

    def growLength(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_growLength(self, *args)

    def getPtr(self, *args) -> "OdGeNurbCurve3d *const *":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_getPtr(self, *args)

    def asArrayPtr(self, *args) -> "OdGeNurbCurve3d **":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_asArrayPtr(self, *args)

    def setAt(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_setAt(self, *args)

    def getAt(self, *args) -> "OdGeNurbCurve3d *const &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_getAt(self, *args)

    def first(self, *args) -> "OdGeNurbCurve3d *const &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_first(self, *args)

    def last(self, *args) -> "OdGeNurbCurve3d *const &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_last(self, *args)

    def removeFirst(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_removeFirst(self, *args)

    def removeLast(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_removeLast(self, *args)

    def setGrowLength(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_setGrowLength(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_swiginit(self, _ODA_Kernel_Py3.new_OdGeNurbCurve3dArrayPtr(*args))

    @staticmethod
    def create(*args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > >":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_create(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeNurbCurve3dArrayPtr

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr___ne__(self, *args)

    def setAll(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_setAll(self, *args)

    def append(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_append(self, *args)

    def insertAt(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_insertAt(self, *args)

    def removeAt(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_removeAt(self, *args)

    def removeSubArray(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_removeSubArray(self, *args)

    def find(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_find(self, *args)

    def setLogicalLength(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_setLogicalLength(self, *args)

    def setPhysicalLength(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_setPhysicalLength(self, *args)

    def reverse(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_reverse(self, *args)

    def swap(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_swap(self, *args)

    def remove(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_remove(self, *args)

    def Insert(self, *args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > >::iterator":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_Insert(self, *args)

    def At(self, *args) -> "OdGeNurbCurve3d *const &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_At(self, *args)

# Register OdGeNurbCurve3dArrayPtr in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_swigregister(OdGeNurbCurve3dArrayPtr)

def OdGeNurbCurve3dArrayPtr_create(*args) -> "OdArray< OdGeNurbCurve3d *,OdObjectsAllocator< OdGeNurbCurve3d * > >":
    return _ODA_Kernel_Py3.OdGeNurbCurve3dArrayPtr_create(*args)

class OdGeNurbCurve3dArray2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self, *args) -> "OdArray< OdArray< OdGeNurbCurve3d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve3d * > > >::const_iterator":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_begin(self, *args)

    def end(self, *args) -> "OdArray< OdArray< OdGeNurbCurve3d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve3d * > > >::const_iterator":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_end(self, *args)

    def rbegin(self, *args) -> "std::reverse_iterator< OdArray< OdArray< OdGeNurbCurve3d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve3d * > > >::const_iterator >":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_rbegin(self, *args)

    def rend(self, *args) -> "std::reverse_iterator< OdArray< OdArray< OdGeNurbCurve3d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve3d * > > >::const_iterator >":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_rend(self, *args)

    def resize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_resize(self, *args)

    def size(self, *args) -> "OdArray< OdArray< OdGeNurbCurve3d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve3d * > > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_size(self, *args)

    def empty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_empty(self, *args)

    def capacity(self, *args) -> "OdArray< OdArray< OdGeNurbCurve3d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve3d * > > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_capacity(self, *args)

    def reserve(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_reserve(self, *args)

    def assign(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_assign(self, *args)

    def erase(self, *args) -> "OdArray< OdArray< OdGeNurbCurve3d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve3d * > > >::iterator":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_erase(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_clear(self, *args)

    def push_back(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_push_back(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_contains(self, *args)

    def length(self, *args) -> "OdArray< OdArray< OdGeNurbCurve3d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve3d * > > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_length(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_isEmpty(self, *args)

    def logicalLength(self, *args) -> "OdArray< OdArray< OdGeNurbCurve3d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve3d * > > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_logicalLength(self, *args)

    def physicalLength(self, *args) -> "OdArray< OdArray< OdGeNurbCurve3d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve3d * > > >::size_type":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_physicalLength(self, *args)

    def growLength(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_growLength(self, *args)

    def getPtr(self, *args) -> "OdArray< OdGeNurbCurve3d * > const *":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_getPtr(self, *args)

    def asArrayPtr(self, *args) -> "OdArray< OdGeNurbCurve3d * > *":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_asArrayPtr(self, *args)

    def setAt(self, *args) -> "OdArray< OdGeNurbCurve3dArrayPtr,OdObjectsAllocator< OdGeNurbCurve3dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_setAt(self, *args)

    def getAt(self, *args) -> "OdArray< OdGeNurbCurve3d * > const &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_getAt(self, *args)

    def first(self, *args) -> "OdArray< OdGeNurbCurve3d * > const &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_first(self, *args)

    def last(self, *args) -> "OdArray< OdGeNurbCurve3d * > const &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_last(self, *args)

    def removeFirst(self, *args) -> "OdArray< OdGeNurbCurve3dArrayPtr,OdObjectsAllocator< OdGeNurbCurve3dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_removeFirst(self, *args)

    def removeLast(self, *args) -> "OdArray< OdGeNurbCurve3dArrayPtr,OdObjectsAllocator< OdGeNurbCurve3dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_removeLast(self, *args)

    def setGrowLength(self, *args) -> "OdArray< OdGeNurbCurve3dArrayPtr,OdObjectsAllocator< OdGeNurbCurve3dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_setGrowLength(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeNurbCurve3dArray2d(*args))

    @staticmethod
    def create(*args) -> "OdArray< OdArray< OdGeNurbCurve3d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve3d * > > >":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_create(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeNurbCurve3dArray2d

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d___ne__(self, *args)

    def setAll(self, *args) -> "OdArray< OdGeNurbCurve3dArrayPtr,OdObjectsAllocator< OdGeNurbCurve3dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_setAll(self, *args)

    def append(self, *args) -> "OdArray< OdGeNurbCurve3dArrayPtr,OdObjectsAllocator< OdGeNurbCurve3dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_append(self, *args)

    def insertAt(self, *args) -> "OdArray< OdGeNurbCurve3dArrayPtr,OdObjectsAllocator< OdGeNurbCurve3dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_insertAt(self, *args)

    def removeAt(self, *args) -> "OdArray< OdGeNurbCurve3dArrayPtr,OdObjectsAllocator< OdGeNurbCurve3dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_removeAt(self, *args)

    def removeSubArray(self, *args) -> "OdArray< OdGeNurbCurve3dArrayPtr,OdObjectsAllocator< OdGeNurbCurve3dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_removeSubArray(self, *args)

    def find(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_find(self, *args)

    def setLogicalLength(self, *args) -> "OdArray< OdGeNurbCurve3dArrayPtr,OdObjectsAllocator< OdGeNurbCurve3dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_setLogicalLength(self, *args)

    def setPhysicalLength(self, *args) -> "OdArray< OdGeNurbCurve3dArrayPtr,OdObjectsAllocator< OdGeNurbCurve3dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_setPhysicalLength(self, *args)

    def reverse(self, *args) -> "OdArray< OdGeNurbCurve3dArrayPtr,OdObjectsAllocator< OdGeNurbCurve3dArrayPtr > > &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_reverse(self, *args)

    def swap(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_swap(self, *args)

    def remove(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_remove(self, *args)

    def Insert(self, *args) -> "OdArray< OdGeNurbCurve3dArrayPtr,OdObjectsAllocator< OdGeNurbCurve3dArrayPtr > >::iterator":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_Insert(self, *args)

    def At(self, *args) -> "OdArray< OdGeNurbCurve3d * > const &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_At(self, *args)

# Register OdGeNurbCurve3dArray2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_swigregister(OdGeNurbCurve3dArray2d)

def OdGeNurbCurve3dArray2d_create(*args) -> "OdArray< OdArray< OdGeNurbCurve3d * >,OdObjectsAllocator< OdArray< OdGeNurbCurve3d * > > >":
    return _ODA_Kernel_Py3.OdGeNurbCurve3dArray2d_create(*args)

OdaPI = _ODA_Kernel_Py3.OdaPI
OdaPI2 = _ODA_Kernel_Py3.OdaPI2
OdaPI4 = _ODA_Kernel_Py3.OdaPI4
Oda2PI = _ODA_Kernel_Py3.Oda2PI
kDHL_MC0_0 = _ODA_Kernel_Py3.kDHL_MC0_0
kDHL_AC1_2 = _ODA_Kernel_Py3.kDHL_AC1_2
kDHL_AC1_40 = _ODA_Kernel_Py3.kDHL_AC1_40
kDHL_AC1_50 = _ODA_Kernel_Py3.kDHL_AC1_50
kDHL_AC2_20 = _ODA_Kernel_Py3.kDHL_AC2_20
kDHL_AC2_10 = _ODA_Kernel_Py3.kDHL_AC2_10
kDHL_AC2_21 = _ODA_Kernel_Py3.kDHL_AC2_21
kDHL_AC2_22 = _ODA_Kernel_Py3.kDHL_AC2_22
kDHL_1001 = _ODA_Kernel_Py3.kDHL_1001
kDHL_1002 = _ODA_Kernel_Py3.kDHL_1002
vAC025 = _ODA_Kernel_Py3.vAC025
kDHL_1003 = _ODA_Kernel_Py3.kDHL_1003
vAC026 = _ODA_Kernel_Py3.vAC026
kDHL_1004 = _ODA_Kernel_Py3.kDHL_1004
vAC09 = _ODA_Kernel_Py3.vAC09
kDHL_1005 = _ODA_Kernel_Py3.kDHL_1005
kDHL_1006 = _ODA_Kernel_Py3.kDHL_1006
vAC10 = _ODA_Kernel_Py3.vAC10
kDHL_1007 = _ODA_Kernel_Py3.kDHL_1007
kDHL_1008 = _ODA_Kernel_Py3.kDHL_1008
kDHL_1009 = _ODA_Kernel_Py3.kDHL_1009
vAC12 = _ODA_Kernel_Py3.vAC12
kDHL_1010 = _ODA_Kernel_Py3.kDHL_1010
kDHL_1011 = _ODA_Kernel_Py3.kDHL_1011
kDHL_1012 = _ODA_Kernel_Py3.kDHL_1012
vAC13 = _ODA_Kernel_Py3.vAC13
kDHL_1013 = _ODA_Kernel_Py3.kDHL_1013
vAC14beta = _ODA_Kernel_Py3.vAC14beta
kDHL_1014 = _ODA_Kernel_Py3.kDHL_1014
vAC14 = _ODA_Kernel_Py3.vAC14
kDHL_1500 = _ODA_Kernel_Py3.kDHL_1500
kDHL_1015 = _ODA_Kernel_Py3.kDHL_1015
vAC15 = _ODA_Kernel_Py3.vAC15
kDHL_1800a = _ODA_Kernel_Py3.kDHL_1800a
kDHL_1800 = _ODA_Kernel_Py3.kDHL_1800
vAC18 = _ODA_Kernel_Py3.vAC18
kDHL_2100a = _ODA_Kernel_Py3.kDHL_2100a
kDHL_1021 = _ODA_Kernel_Py3.kDHL_1021
vAC21 = _ODA_Kernel_Py3.vAC21
kDHL_2400a = _ODA_Kernel_Py3.kDHL_2400a
kDHL_1024 = _ODA_Kernel_Py3.kDHL_1024
vAC24 = _ODA_Kernel_Py3.vAC24
kDHL_2700a = _ODA_Kernel_Py3.kDHL_2700a
kDHL_1027 = _ODA_Kernel_Py3.kDHL_1027
vAC27 = _ODA_Kernel_Py3.vAC27
kDHL_3200a = _ODA_Kernel_Py3.kDHL_3200a
kDHL_1032 = _ODA_Kernel_Py3.kDHL_1032
vAC32 = _ODA_Kernel_Py3.vAC32
kDHL_PRECURR = _ODA_Kernel_Py3.kDHL_PRECURR
kDHL_CURRENT = _ODA_Kernel_Py3.kDHL_CURRENT
kDHL_Unknown = _ODA_Kernel_Py3.kDHL_Unknown
kDHL_Max = _ODA_Kernel_Py3.kDHL_Max
kMRelease0 = _ODA_Kernel_Py3.kMRelease0
kMRelease1 = _ODA_Kernel_Py3.kMRelease1
kMRelease2 = _ODA_Kernel_Py3.kMRelease2
kMRelease3 = _ODA_Kernel_Py3.kMRelease3
kMRelease4 = _ODA_Kernel_Py3.kMRelease4
kMRelease5 = _ODA_Kernel_Py3.kMRelease5
kMRelease6 = _ODA_Kernel_Py3.kMRelease6
kMRelease7 = _ODA_Kernel_Py3.kMRelease7
kMRelease8 = _ODA_Kernel_Py3.kMRelease8
kMRelease9 = _ODA_Kernel_Py3.kMRelease9
kMRelease10 = _ODA_Kernel_Py3.kMRelease10
kMRelease11 = _ODA_Kernel_Py3.kMRelease11
kMRelease12 = _ODA_Kernel_Py3.kMRelease12
kMRelease13 = _ODA_Kernel_Py3.kMRelease13
kMRelease14 = _ODA_Kernel_Py3.kMRelease14
kMRelease15 = _ODA_Kernel_Py3.kMRelease15
kMRelease16 = _ODA_Kernel_Py3.kMRelease16
kMRelease17 = _ODA_Kernel_Py3.kMRelease17
kMRelease18 = _ODA_Kernel_Py3.kMRelease18
kMRelease19 = _ODA_Kernel_Py3.kMRelease19
kMRelease20 = _ODA_Kernel_Py3.kMRelease20
kMRelease21 = _ODA_Kernel_Py3.kMRelease21
kMRelease22 = _ODA_Kernel_Py3.kMRelease22
kMRelease23 = _ODA_Kernel_Py3.kMRelease23
kMRelease24 = _ODA_Kernel_Py3.kMRelease24
kMRelease25 = _ODA_Kernel_Py3.kMRelease25
kMRelease26 = _ODA_Kernel_Py3.kMRelease26
kMRelease27 = _ODA_Kernel_Py3.kMRelease27
kMRelease28 = _ODA_Kernel_Py3.kMRelease28
kMRelease29 = _ODA_Kernel_Py3.kMRelease29
kMRelease30 = _ODA_Kernel_Py3.kMRelease30
kMRelease31 = _ODA_Kernel_Py3.kMRelease31
kMRelease32 = _ODA_Kernel_Py3.kMRelease32
kMRelease33 = _ODA_Kernel_Py3.kMRelease33
kMRelease34 = _ODA_Kernel_Py3.kMRelease34
kMRelease35 = _ODA_Kernel_Py3.kMRelease35
kMRelease36 = _ODA_Kernel_Py3.kMRelease36
kMRelease37 = _ODA_Kernel_Py3.kMRelease37
kMRelease38 = _ODA_Kernel_Py3.kMRelease38
kMRelease39 = _ODA_Kernel_Py3.kMRelease39
kMRelease40 = _ODA_Kernel_Py3.kMRelease40
kMRelease41 = _ODA_Kernel_Py3.kMRelease41
kMRelease42 = _ODA_Kernel_Py3.kMRelease42
kMRelease43 = _ODA_Kernel_Py3.kMRelease43
kMRelease44 = _ODA_Kernel_Py3.kMRelease44
kMRelease45 = _ODA_Kernel_Py3.kMRelease45
kMRelease46 = _ODA_Kernel_Py3.kMRelease46
kMRelease47 = _ODA_Kernel_Py3.kMRelease47
kMRelease48 = _ODA_Kernel_Py3.kMRelease48
kMRelease49 = _ODA_Kernel_Py3.kMRelease49
kMRelease50 = _ODA_Kernel_Py3.kMRelease50
kMRelease51 = _ODA_Kernel_Py3.kMRelease51
kMRelease52 = _ODA_Kernel_Py3.kMRelease52
kMRelease53 = _ODA_Kernel_Py3.kMRelease53
kMRelease54 = _ODA_Kernel_Py3.kMRelease54
kMRelease55 = _ODA_Kernel_Py3.kMRelease55
kMRelease56 = _ODA_Kernel_Py3.kMRelease56
kMRelease57 = _ODA_Kernel_Py3.kMRelease57
kMRelease58 = _ODA_Kernel_Py3.kMRelease58
kMRelease59 = _ODA_Kernel_Py3.kMRelease59
kMRelease60 = _ODA_Kernel_Py3.kMRelease60
kMRelease61 = _ODA_Kernel_Py3.kMRelease61
kMRelease62 = _ODA_Kernel_Py3.kMRelease62
kMRelease63 = _ODA_Kernel_Py3.kMRelease63
kMRelease64 = _ODA_Kernel_Py3.kMRelease64
kMRelease65 = _ODA_Kernel_Py3.kMRelease65
kMRelease66 = _ODA_Kernel_Py3.kMRelease66
kMRelease67 = _ODA_Kernel_Py3.kMRelease67
kMRelease68 = _ODA_Kernel_Py3.kMRelease68
kMRelease69 = _ODA_Kernel_Py3.kMRelease69
kMRelease70 = _ODA_Kernel_Py3.kMRelease70
kMRelease71 = _ODA_Kernel_Py3.kMRelease71
kMRelease72 = _ODA_Kernel_Py3.kMRelease72
kMRelease73 = _ODA_Kernel_Py3.kMRelease73
kMRelease74 = _ODA_Kernel_Py3.kMRelease74
kMRelease75 = _ODA_Kernel_Py3.kMRelease75
kMRelease76 = _ODA_Kernel_Py3.kMRelease76
kMRelease77 = _ODA_Kernel_Py3.kMRelease77
kMRelease78 = _ODA_Kernel_Py3.kMRelease78
kMRelease79 = _ODA_Kernel_Py3.kMRelease79
kMRelease80 = _ODA_Kernel_Py3.kMRelease80
kMRelease81 = _ODA_Kernel_Py3.kMRelease81
kMRelease82 = _ODA_Kernel_Py3.kMRelease82
kMRelease83 = _ODA_Kernel_Py3.kMRelease83
kMRelease84 = _ODA_Kernel_Py3.kMRelease84
kMRelease85 = _ODA_Kernel_Py3.kMRelease85
kMRelease86 = _ODA_Kernel_Py3.kMRelease86
kMRelease87 = _ODA_Kernel_Py3.kMRelease87
kMRelease88 = _ODA_Kernel_Py3.kMRelease88
kMRelease89 = _ODA_Kernel_Py3.kMRelease89
kMRelease90 = _ODA_Kernel_Py3.kMRelease90
kMRelease91 = _ODA_Kernel_Py3.kMRelease91
kMRelease92 = _ODA_Kernel_Py3.kMRelease92
kMRelease93 = _ODA_Kernel_Py3.kMRelease93
kMRelease94 = _ODA_Kernel_Py3.kMRelease94
kMRelease95 = _ODA_Kernel_Py3.kMRelease95
kMRelease96 = _ODA_Kernel_Py3.kMRelease96
kMRelease97 = _ODA_Kernel_Py3.kMRelease97
kMRelease98 = _ODA_Kernel_Py3.kMRelease98
kMRelease99 = _ODA_Kernel_Py3.kMRelease99
kMRelease100 = _ODA_Kernel_Py3.kMRelease100
kMRelease101 = _ODA_Kernel_Py3.kMRelease101
kMRelease102 = _ODA_Kernel_Py3.kMRelease102
kMRelease103 = _ODA_Kernel_Py3.kMRelease103
kMRelease104 = _ODA_Kernel_Py3.kMRelease104
kMRelease105 = _ODA_Kernel_Py3.kMRelease105
kMRelease106 = _ODA_Kernel_Py3.kMRelease106
kMRelease107 = _ODA_Kernel_Py3.kMRelease107
kMRelease108 = _ODA_Kernel_Py3.kMRelease108
kMRelease109 = _ODA_Kernel_Py3.kMRelease109
kMRelease110 = _ODA_Kernel_Py3.kMRelease110
kMRelease111 = _ODA_Kernel_Py3.kMRelease111
kMRelease112 = _ODA_Kernel_Py3.kMRelease112
kMRelease113 = _ODA_Kernel_Py3.kMRelease113
kMRelease114 = _ODA_Kernel_Py3.kMRelease114
kMRelease115 = _ODA_Kernel_Py3.kMRelease115
kMRelease116 = _ODA_Kernel_Py3.kMRelease116
kMRelease117 = _ODA_Kernel_Py3.kMRelease117
kMRelease118 = _ODA_Kernel_Py3.kMRelease118
kMRelease119 = _ODA_Kernel_Py3.kMRelease119
kMRelease120 = _ODA_Kernel_Py3.kMRelease120
kMRelease121 = _ODA_Kernel_Py3.kMRelease121
kMRelease122 = _ODA_Kernel_Py3.kMRelease122
kMRelease123 = _ODA_Kernel_Py3.kMRelease123
kMRelease124 = _ODA_Kernel_Py3.kMRelease124
kMRelease125 = _ODA_Kernel_Py3.kMRelease125
kMRelease126 = _ODA_Kernel_Py3.kMRelease126
kMRelease127 = _ODA_Kernel_Py3.kMRelease127
kMRelease128 = _ODA_Kernel_Py3.kMRelease128
kMRelease129 = _ODA_Kernel_Py3.kMRelease129
kMRelease130 = _ODA_Kernel_Py3.kMRelease130
kMRelease131 = _ODA_Kernel_Py3.kMRelease131
kMRelease132 = _ODA_Kernel_Py3.kMRelease132
kMRelease133 = _ODA_Kernel_Py3.kMRelease133
kMRelease134 = _ODA_Kernel_Py3.kMRelease134
kMRelease135 = _ODA_Kernel_Py3.kMRelease135
kMRelease136 = _ODA_Kernel_Py3.kMRelease136
kMRelease137 = _ODA_Kernel_Py3.kMRelease137
kMRelease138 = _ODA_Kernel_Py3.kMRelease138
kMRelease139 = _ODA_Kernel_Py3.kMRelease139
kMRelease140 = _ODA_Kernel_Py3.kMRelease140
kMRelease141 = _ODA_Kernel_Py3.kMRelease141
kMRelease142 = _ODA_Kernel_Py3.kMRelease142
kMRelease143 = _ODA_Kernel_Py3.kMRelease143
kMRelease144 = _ODA_Kernel_Py3.kMRelease144
kMRelease145 = _ODA_Kernel_Py3.kMRelease145
kMRelease146 = _ODA_Kernel_Py3.kMRelease146
kMRelease147 = _ODA_Kernel_Py3.kMRelease147
kMRelease148 = _ODA_Kernel_Py3.kMRelease148
kMRelease149 = _ODA_Kernel_Py3.kMRelease149
kMRelease150 = _ODA_Kernel_Py3.kMRelease150
kMRelease151 = _ODA_Kernel_Py3.kMRelease151
kMRelease152 = _ODA_Kernel_Py3.kMRelease152
kMRelease153 = _ODA_Kernel_Py3.kMRelease153
kMRelease154 = _ODA_Kernel_Py3.kMRelease154
kMRelease155 = _ODA_Kernel_Py3.kMRelease155
kMRelease156 = _ODA_Kernel_Py3.kMRelease156
kMRelease157 = _ODA_Kernel_Py3.kMRelease157
kMRelease158 = _ODA_Kernel_Py3.kMRelease158
kMRelease159 = _ODA_Kernel_Py3.kMRelease159
kMRelease160 = _ODA_Kernel_Py3.kMRelease160
kMRelease161 = _ODA_Kernel_Py3.kMRelease161
kMRelease162 = _ODA_Kernel_Py3.kMRelease162
kMRelease163 = _ODA_Kernel_Py3.kMRelease163
kMRelease164 = _ODA_Kernel_Py3.kMRelease164
kMRelease165 = _ODA_Kernel_Py3.kMRelease165
kMRelease166 = _ODA_Kernel_Py3.kMRelease166
kMRelease167 = _ODA_Kernel_Py3.kMRelease167
kMRelease168 = _ODA_Kernel_Py3.kMRelease168
kMRelease169 = _ODA_Kernel_Py3.kMRelease169
kMRelease170 = _ODA_Kernel_Py3.kMRelease170
kMRelease171 = _ODA_Kernel_Py3.kMRelease171
kMRelease172 = _ODA_Kernel_Py3.kMRelease172
kMRelease173 = _ODA_Kernel_Py3.kMRelease173
kMRelease174 = _ODA_Kernel_Py3.kMRelease174
kMRelease175 = _ODA_Kernel_Py3.kMRelease175
kMRelease176 = _ODA_Kernel_Py3.kMRelease176
kMRelease177 = _ODA_Kernel_Py3.kMRelease177
kMRelease178 = _ODA_Kernel_Py3.kMRelease178
kMRelease179 = _ODA_Kernel_Py3.kMRelease179
kMRelease180 = _ODA_Kernel_Py3.kMRelease180
kMRelease181 = _ODA_Kernel_Py3.kMRelease181
kMRelease182 = _ODA_Kernel_Py3.kMRelease182
kMRelease183 = _ODA_Kernel_Py3.kMRelease183
kMRelease184 = _ODA_Kernel_Py3.kMRelease184
kMRelease185 = _ODA_Kernel_Py3.kMRelease185
kMRelease186 = _ODA_Kernel_Py3.kMRelease186
kMRelease187 = _ODA_Kernel_Py3.kMRelease187
kMRelease188 = _ODA_Kernel_Py3.kMRelease188
kMRelease189 = _ODA_Kernel_Py3.kMRelease189
kMRelease190 = _ODA_Kernel_Py3.kMRelease190
kMRelease191 = _ODA_Kernel_Py3.kMRelease191
kMRelease192 = _ODA_Kernel_Py3.kMRelease192
kMRelease193 = _ODA_Kernel_Py3.kMRelease193
kMRelease194 = _ODA_Kernel_Py3.kMRelease194
kMRelease195 = _ODA_Kernel_Py3.kMRelease195
kMRelease196 = _ODA_Kernel_Py3.kMRelease196
kMRelease197 = _ODA_Kernel_Py3.kMRelease197
kMRelease198 = _ODA_Kernel_Py3.kMRelease198
kMRelease199 = _ODA_Kernel_Py3.kMRelease199
kMRelease200 = _ODA_Kernel_Py3.kMRelease200
kMRelease201 = _ODA_Kernel_Py3.kMRelease201
kMRelease202 = _ODA_Kernel_Py3.kMRelease202
kMRelease203 = _ODA_Kernel_Py3.kMRelease203
kMRelease204 = _ODA_Kernel_Py3.kMRelease204
kMRelease205 = _ODA_Kernel_Py3.kMRelease205
kMRelease206 = _ODA_Kernel_Py3.kMRelease206
kMRelease207 = _ODA_Kernel_Py3.kMRelease207
kMRelease208 = _ODA_Kernel_Py3.kMRelease208
kMRelease209 = _ODA_Kernel_Py3.kMRelease209
kMRelease210 = _ODA_Kernel_Py3.kMRelease210
kMRelease211 = _ODA_Kernel_Py3.kMRelease211
kMRelease212 = _ODA_Kernel_Py3.kMRelease212
kMRelease213 = _ODA_Kernel_Py3.kMRelease213
kMRelease214 = _ODA_Kernel_Py3.kMRelease214
kMRelease215 = _ODA_Kernel_Py3.kMRelease215
kMRelease216 = _ODA_Kernel_Py3.kMRelease216
kMRelease217 = _ODA_Kernel_Py3.kMRelease217
kMRelease218 = _ODA_Kernel_Py3.kMRelease218
kMRelease219 = _ODA_Kernel_Py3.kMRelease219
kMRelease220 = _ODA_Kernel_Py3.kMRelease220
kMRelease221 = _ODA_Kernel_Py3.kMRelease221
kMRelease222 = _ODA_Kernel_Py3.kMRelease222
kMRelease223 = _ODA_Kernel_Py3.kMRelease223
kMRelease224 = _ODA_Kernel_Py3.kMRelease224
kMRelease225 = _ODA_Kernel_Py3.kMRelease225
kMRelease226 = _ODA_Kernel_Py3.kMRelease226
kMRelease227 = _ODA_Kernel_Py3.kMRelease227
kMRelease228 = _ODA_Kernel_Py3.kMRelease228
kMRelease229 = _ODA_Kernel_Py3.kMRelease229
kMRelease230 = _ODA_Kernel_Py3.kMRelease230
kMRelease231 = _ODA_Kernel_Py3.kMRelease231
kMRelease232 = _ODA_Kernel_Py3.kMRelease232
kMRelease233 = _ODA_Kernel_Py3.kMRelease233
kMRelease234 = _ODA_Kernel_Py3.kMRelease234
kMRelease235 = _ODA_Kernel_Py3.kMRelease235
kMRelease236 = _ODA_Kernel_Py3.kMRelease236
kMRelease237 = _ODA_Kernel_Py3.kMRelease237
kMRelease238 = _ODA_Kernel_Py3.kMRelease238
kMRelease239 = _ODA_Kernel_Py3.kMRelease239
kMRelease240 = _ODA_Kernel_Py3.kMRelease240
kMRelease241 = _ODA_Kernel_Py3.kMRelease241
kMRelease242 = _ODA_Kernel_Py3.kMRelease242
kMRelease243 = _ODA_Kernel_Py3.kMRelease243
kMRelease244 = _ODA_Kernel_Py3.kMRelease244
kMRelease245 = _ODA_Kernel_Py3.kMRelease245
kMRelease246 = _ODA_Kernel_Py3.kMRelease246
kMRelease247 = _ODA_Kernel_Py3.kMRelease247
kMRelease248 = _ODA_Kernel_Py3.kMRelease248
kMRelease249 = _ODA_Kernel_Py3.kMRelease249
kMRelease250 = _ODA_Kernel_Py3.kMRelease250
kMRelease251 = _ODA_Kernel_Py3.kMRelease251
kMRelease252 = _ODA_Kernel_Py3.kMRelease252
kMRelease253 = _ODA_Kernel_Py3.kMRelease253
kMRelease254 = _ODA_Kernel_Py3.kMRelease254
kMRelease255 = _ODA_Kernel_Py3.kMRelease255
kMReleaseFirstValid1500 = _ODA_Kernel_Py3.kMReleaseFirstValid1500
kMReleaseCurrent = _ODA_Kernel_Py3.kMReleaseCurrent
kMReleaseUnknown = _ODA_Kernel_Py3.kMReleaseUnknown
kMReleaseMax = _ODA_Kernel_Py3.kMReleaseMax
kMRelease2010Max = _ODA_Kernel_Py3.kMRelease2010Max
kLnWt000 = _ODA_Kernel_Py3.kLnWt000
kLnWt005 = _ODA_Kernel_Py3.kLnWt005
kLnWt009 = _ODA_Kernel_Py3.kLnWt009
kLnWt013 = _ODA_Kernel_Py3.kLnWt013
kLnWt015 = _ODA_Kernel_Py3.kLnWt015
kLnWt018 = _ODA_Kernel_Py3.kLnWt018
kLnWt020 = _ODA_Kernel_Py3.kLnWt020
kLnWt025 = _ODA_Kernel_Py3.kLnWt025
kLnWt030 = _ODA_Kernel_Py3.kLnWt030
kLnWt035 = _ODA_Kernel_Py3.kLnWt035
kLnWt040 = _ODA_Kernel_Py3.kLnWt040
kLnWt050 = _ODA_Kernel_Py3.kLnWt050
kLnWt053 = _ODA_Kernel_Py3.kLnWt053
kLnWt060 = _ODA_Kernel_Py3.kLnWt060
kLnWt070 = _ODA_Kernel_Py3.kLnWt070
kLnWt080 = _ODA_Kernel_Py3.kLnWt080
kLnWt090 = _ODA_Kernel_Py3.kLnWt090
kLnWt100 = _ODA_Kernel_Py3.kLnWt100
kLnWt106 = _ODA_Kernel_Py3.kLnWt106
kLnWt120 = _ODA_Kernel_Py3.kLnWt120
kLnWt140 = _ODA_Kernel_Py3.kLnWt140
kLnWt158 = _ODA_Kernel_Py3.kLnWt158
kLnWt200 = _ODA_Kernel_Py3.kLnWt200
kLnWt211 = _ODA_Kernel_Py3.kLnWt211
kLnWtByLayer = _ODA_Kernel_Py3.kLnWtByLayer
kLnWtByBlock = _ODA_Kernel_Py3.kLnWtByBlock
kLnWtByLwDefault = _ODA_Kernel_Py3.kLnWtByLwDefault
kPlotStyleNameByLayer = _ODA_Kernel_Py3.kPlotStyleNameByLayer
kPlotStyleNameByBlock = _ODA_Kernel_Py3.kPlotStyleNameByBlock
kPlotStyleNameIsDictDefault = _ODA_Kernel_Py3.kPlotStyleNameIsDictDefault
kPlotStyleNameById = _ODA_Kernel_Py3.kPlotStyleNameById
kSTMode = _ODA_Kernel_Py3.kSTMode
kMTLoading = _ODA_Kernel_Py3.kMTLoading
kMTRendering = _ODA_Kernel_Py3.kMTRendering
kEnglish = _ODA_Kernel_Py3.kEnglish
kMetric = _ODA_Kernel_Py3.kMetric
kUnitsUndefined = _ODA_Kernel_Py3.kUnitsUndefined
kUnitsInches = _ODA_Kernel_Py3.kUnitsInches
kUnitsFeet = _ODA_Kernel_Py3.kUnitsFeet
kUnitsMiles = _ODA_Kernel_Py3.kUnitsMiles
kUnitsMillimeters = _ODA_Kernel_Py3.kUnitsMillimeters
kUnitsCentimeters = _ODA_Kernel_Py3.kUnitsCentimeters
kUnitsMeters = _ODA_Kernel_Py3.kUnitsMeters
kUnitsKilometers = _ODA_Kernel_Py3.kUnitsKilometers
kUnitsMicroinches = _ODA_Kernel_Py3.kUnitsMicroinches
kUnitsMils = _ODA_Kernel_Py3.kUnitsMils
kUnitsYards = _ODA_Kernel_Py3.kUnitsYards
kUnitsAngstroms = _ODA_Kernel_Py3.kUnitsAngstroms
kUnitsNanometers = _ODA_Kernel_Py3.kUnitsNanometers
kUnitsMicrons = _ODA_Kernel_Py3.kUnitsMicrons
kUnitsDecimeters = _ODA_Kernel_Py3.kUnitsDecimeters
kUnitsDekameters = _ODA_Kernel_Py3.kUnitsDekameters
kUnitsHectometers = _ODA_Kernel_Py3.kUnitsHectometers
kUnitsGigameters = _ODA_Kernel_Py3.kUnitsGigameters
kUnitsAstronomical = _ODA_Kernel_Py3.kUnitsAstronomical
kUnitsLightYears = _ODA_Kernel_Py3.kUnitsLightYears
kUnitsParsecs = _ODA_Kernel_Py3.kUnitsParsecs
kUnitsUSSurveyFeet = _ODA_Kernel_Py3.kUnitsUSSurveyFeet
kUnitsUSSurveyInch = _ODA_Kernel_Py3.kUnitsUSSurveyInch
kUnitsUSSurveyYard = _ODA_Kernel_Py3.kUnitsUSSurveyYard
kUnitsUSSurveyMile = _ODA_Kernel_Py3.kUnitsUSSurveyMile
kUnitsMax = _ODA_Kernel_Py3.kUnitsMax
kOnBothOperands = _ODA_Kernel_Py3.kOnBothOperands
kExtendThis = _ODA_Kernel_Py3.kExtendThis
kExtendArg = _ODA_Kernel_Py3.kExtendArg
kExtendBoth = _ODA_Kernel_Py3.kExtendBoth
kOsModeEnd = _ODA_Kernel_Py3.kOsModeEnd
kOsModeMid = _ODA_Kernel_Py3.kOsModeMid
kOsModeCen = _ODA_Kernel_Py3.kOsModeCen
kOsModeNode = _ODA_Kernel_Py3.kOsModeNode
kOsModeQuad = _ODA_Kernel_Py3.kOsModeQuad
kOsModeIntersec = _ODA_Kernel_Py3.kOsModeIntersec
kOsModeIns = _ODA_Kernel_Py3.kOsModeIns
kOsModePerp = _ODA_Kernel_Py3.kOsModePerp
kOsModeTan = _ODA_Kernel_Py3.kOsModeTan
kOsModeNear = _ODA_Kernel_Py3.kOsModeNear
kOsModeApint = _ODA_Kernel_Py3.kOsModeApint
kOsModePar = _ODA_Kernel_Py3.kOsModePar
kOsModeStart = _ODA_Kernel_Py3.kOsModeStart
kSoftPointerRef = _ODA_Kernel_Py3.kSoftPointerRef
kHardPointerRef = _ODA_Kernel_Py3.kHardPointerRef
kSoftOwnershipRef = _ODA_Kernel_Py3.kSoftOwnershipRef
kHardOwnershipRef = _ODA_Kernel_Py3.kHardOwnershipRef

def OdPositive(*args) -> "bool":
    return _ODA_Kernel_Py3.OdPositive(*args)

def OdNegative(*args) -> "bool":
    return _ODA_Kernel_Py3.OdNegative(*args)

def OdZero(*args) -> "bool":
    return _ODA_Kernel_Py3.OdZero(*args)

def OdNonZero(*args) -> "bool":
    return _ODA_Kernel_Py3.OdNonZero(*args)

def OdEqual(*args) -> "bool":
    return _ODA_Kernel_Py3.OdEqual(*args)

def OdLess(*args) -> "bool":
    return _ODA_Kernel_Py3.OdLess(*args)

def OdLessOrEqual(*args) -> "bool":
    return _ODA_Kernel_Py3.OdLessOrEqual(*args)

def OdGreater(*args) -> "bool":
    return _ODA_Kernel_Py3.OdGreater(*args)

def OdGreaterOrEqual(*args) -> "bool":
    return _ODA_Kernel_Py3.OdGreaterOrEqual(*args)

def OdSign(*args) -> "int":
    return _ODA_Kernel_Py3.OdSign(*args)

def OdCmpDouble(*args) -> "int":
    return _ODA_Kernel_Py3.OdCmpDouble(*args)

def safeDivide(*args) -> "double":
    return _ODA_Kernel_Py3.safeDivide(*args)
class SmartPtrOdRxVariant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.SmartPtrOdRxVariant_swiginit(self, _ODA_Kernel_Py3.new_SmartPtrOdRxVariant(*args))

    def attach(self, *args) -> "void":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_attach(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_SmartPtrOdRxVariant

    def detach(self, *args) -> "OdRxVariant *":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_detach(self, *args)

    def get(self, *args) -> "OdRxVariant *":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_get(self, *args)

    def __deref__(self, *args) -> "OdRxVariant const *":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant___deref__(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant___ne__(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_queryX(self, *args)

    def cast(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_cast(self, *args)

    def desc(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_desc(self, *args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_isA(self, *args)

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_isKindOf(self, *args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_clone(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_copyFrom(self, *args)

    def typeFactory(self, *args) -> "OdVariant::TypeFactory const *":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_typeFactory(self, *args)

    def varType(self, *args) -> "int":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_varType(self, *args)

    def type(self, *args) -> "OdVariant::Type":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_type(self, *args)

    def isArray(self, *args) -> "bool":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_isArray(self, *args)

    def isByRef(self, *args) -> "bool":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_isByRef(self, *args)

    def getString(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getString(self, *args)

    def getAnsiString(self, *args) -> "OdAnsiString const &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getAnsiString(self, *args)

    def getRxObjectPtr(self, *args) -> "OdRxObjectPtr const &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getRxObjectPtr(self, *args)

    def getBool(self, *args) -> "bool":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getBool(self, *args)

    def getInt8(self, *args) -> "OdInt8":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getInt8(self, *args)

    def getUInt8(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getUInt8(self, *args)

    def getInt16(self, *args) -> "OdInt16":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getInt16(self, *args)

    def getUInt16(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getUInt16(self, *args)

    def getInt32(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getInt32(self, *args)

    def getUInt32(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getUInt32(self, *args)

    def getInt64(self, *args) -> "OdInt64":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getInt64(self, *args)

    def getUInt64(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getUInt64(self, *args)

    def getIntPtr(self, *args) -> "OdIntPtr":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getIntPtr(self, *args)

    def getDouble(self, *args) -> "double":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getDouble(self, *args)

    def getStringArray(self, *args) -> "OdStringArray const &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getStringArray(self, *args)

    def getRxObjectPtrArray(self, *args) -> "OdRxObjectPtrArray const &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getRxObjectPtrArray(self, *args)

    def getBoolArray(self, *args) -> "OdBoolArray const &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getBoolArray(self, *args)

    def getInt8Array(self, *args) -> "OdInt8Array const &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getInt8Array(self, *args)

    def getUInt8Array(self, *args) -> "OdUInt8Array const &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getUInt8Array(self, *args)

    def getInt16Array(self, *args) -> "OdInt16Array const &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getInt16Array(self, *args)

    def getUInt16Array(self, *args) -> "OdUInt16Array const &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getUInt16Array(self, *args)

    def getInt32Array(self, *args) -> "OdInt32Array const &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getInt32Array(self, *args)

    def getUInt32Array(self, *args) -> "OdUInt32Array const &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getUInt32Array(self, *args)

    def getInt64Array(self, *args) -> "OdInt64Array const &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getInt64Array(self, *args)

    def getUInt64Array(self, *args) -> "OdUInt64Array const &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getUInt64Array(self, *args)

    def getDoubleArray(self, *args) -> "OdDoubleArray const &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getDoubleArray(self, *args)

    def asStringArray(self, *args) -> "OdStringArray &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_asStringArray(self, *args)

    def asRxObjectPtrArray(self, *args) -> "OdRxObjectPtrArray &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_asRxObjectPtrArray(self, *args)

    def asBoolArray(self, *args) -> "OdBoolArray &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_asBoolArray(self, *args)

    def asInt8Array(self, *args) -> "OdInt8Array &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_asInt8Array(self, *args)

    def asUInt8Array(self, *args) -> "OdUInt8Array &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_asUInt8Array(self, *args)

    def asInt16Array(self, *args) -> "OdInt16Array &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_asInt16Array(self, *args)

    def asUInt16Array(self, *args) -> "OdUInt16Array &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_asUInt16Array(self, *args)

    def asInt32Array(self, *args) -> "OdInt32Array &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_asInt32Array(self, *args)

    def asUInt32Array(self, *args) -> "OdUInt32Array &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_asUInt32Array(self, *args)

    def asInt64Array(self, *args) -> "OdInt64Array &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_asInt64Array(self, *args)

    def asUInt64Array(self, *args) -> "OdUInt64Array &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_asUInt64Array(self, *args)

    def asDoubleArray(self, *args) -> "OdDoubleArray &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_asDoubleArray(self, *args)

    def getStringArrayPtr(self, *args) -> "OdStringArray *":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getStringArrayPtr(self, *args)

    def getRxObjectPtrArrayPtr(self, *args) -> "OdRxObjectPtrArray *":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getRxObjectPtrArrayPtr(self, *args)

    def getBoolArrayPtr(self, *args) -> "OdBoolArray *":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getBoolArrayPtr(self, *args)

    def getInt8ArrayPtr(self, *args) -> "OdInt8Array *":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getInt8ArrayPtr(self, *args)

    def getUInt8ArrayPtr(self, *args) -> "OdUInt8Array *":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getUInt8ArrayPtr(self, *args)

    def getInt16ArrayPtr(self, *args) -> "OdInt16Array *":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getInt16ArrayPtr(self, *args)

    def getUInt16ArrayPtr(self, *args) -> "OdUInt16Array *":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getUInt16ArrayPtr(self, *args)

    def getInt32ArrayPtr(self, *args) -> "OdInt32Array *":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getInt32ArrayPtr(self, *args)

    def getUInt32ArrayPtr(self, *args) -> "OdUInt32Array *":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getUInt32ArrayPtr(self, *args)

    def getInt64ArrayPtr(self, *args) -> "OdInt64Array *":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getInt64ArrayPtr(self, *args)

    def getUInt64ArrayPtr(self, *args) -> "OdUInt64Array *":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getUInt64ArrayPtr(self, *args)

    def getDoubleArrayPtr(self, *args) -> "OdDoubleArray *":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_getDoubleArrayPtr(self, *args)

    def setString(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setString(self, *args)

    def setAnsiString(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setAnsiString(self, *args)

    def setRxObjectPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setRxObjectPtr(self, *args)

    def setBool(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setBool(self, *args)

    def setInt8(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setInt8(self, *args)

    def setUInt8(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setUInt8(self, *args)

    def setInt16(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setInt16(self, *args)

    def setUInt16(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setUInt16(self, *args)

    def setInt32(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setInt32(self, *args)

    def setUInt32(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setUInt32(self, *args)

    def setInt64(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setInt64(self, *args)

    def setUInt64(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setUInt64(self, *args)

    def setIntPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setIntPtr(self, *args)

    def setDouble(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setDouble(self, *args)

    def setStringArray(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setStringArray(self, *args)

    def setRxObjectPtrArray(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setRxObjectPtrArray(self, *args)

    def setBoolArray(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setBoolArray(self, *args)

    def setInt8Array(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setInt8Array(self, *args)

    def setUInt8Array(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setUInt8Array(self, *args)

    def setInt16Array(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setInt16Array(self, *args)

    def setUInt16Array(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setUInt16Array(self, *args)

    def setInt32Array(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setInt32Array(self, *args)

    def setUInt32Array(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setUInt32Array(self, *args)

    def setInt64Array(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setInt64Array(self, *args)

    def setUInt64Array(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setUInt64Array(self, *args)

    def setDoubleArray(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setDoubleArray(self, *args)

    def setStringArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setStringArrayPtr(self, *args)

    def setRxObjectPtrArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setRxObjectPtrArrayPtr(self, *args)

    def setBoolArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setBoolArrayPtr(self, *args)

    def setInt8ArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setInt8ArrayPtr(self, *args)

    def setUInt8ArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setUInt8ArrayPtr(self, *args)

    def setInt16ArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setInt16ArrayPtr(self, *args)

    def setUInt16ArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setUInt16ArrayPtr(self, *args)

    def setInt32ArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setInt32ArrayPtr(self, *args)

    def setUInt32ArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setUInt32ArrayPtr(self, *args)

    def setInt64ArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setInt64ArrayPtr(self, *args)

    def setUInt64ArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setUInt64ArrayPtr(self, *args)

    def setDoubleArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.SmartPtrOdRxVariant_setDoubleArrayPtr(self, *args)

# Register SmartPtrOdRxVariant in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.SmartPtrOdRxVariant_swigregister(SmartPtrOdRxVariant)
cvar = _ODA_Kernel_Py3.cvar
kMmPerInch = cvar.kMmPerInch

class OdBaseObjectPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdBaseObjectPtr_get(self, *args)

    def isNull(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBaseObjectPtr_isNull(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBaseObjectPtr

# Register OdBaseObjectPtr in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBaseObjectPtr_swigregister(OdBaseObjectPtr)

kOdRxObjAttach = _ODA_Kernel_Py3.kOdRxObjAttach
OdRx_Ordering_kLessThan = _ODA_Kernel_Py3.OdRx_Ordering_kLessThan
OdRx_Ordering_kEqual = _ODA_Kernel_Py3.OdRx_Ordering_kEqual
OdRx_Ordering_kGreaterThan = _ODA_Kernel_Py3.OdRx_Ordering_kGreaterThan
OdRx_Ordering_kNotOrderable = _ODA_Kernel_Py3.OdRx_Ordering_kNotOrderable
OdRx_MTSupport_kMTRender = _ODA_Kernel_Py3.OdRx_MTSupport_kMTRender
OdRx_MTSupport_kMTRenderInBlock = _ODA_Kernel_Py3.OdRx_MTSupport_kMTRenderInBlock
OdRx_MTSupport_kMTRenderNested = _ODA_Kernel_Py3.OdRx_MTSupport_kMTRenderNested
OdRx_MTSupport_kMTRenderReserved = _ODA_Kernel_Py3.OdRx_MTSupport_kMTRenderReserved
OdRx_MTSupport_kMTRenderMask = _ODA_Kernel_Py3.OdRx_MTSupport_kMTRenderMask
OdRx_MTSupport_kMTLoading = _ODA_Kernel_Py3.OdRx_MTSupport_kMTLoading
OdRx_MTSupport_kHistoryAware = _ODA_Kernel_Py3.OdRx_MTSupport_kHistoryAware
class OdRxObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxObject

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxObject_queryX(self, *args)

    @staticmethod
    def cast(*args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdRxObject_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxObject_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxObject_isA(self, *args)

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxObject_isKindOf(self, *args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdRxObject_clone(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxObject_copyFrom(self, *args)

# Register OdRxObject in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxObject_swigregister(OdRxObject)

def OdRxObject_cast(*args) -> "OdRxObjectPtr":
    return _ODA_Kernel_Py3.OdRxObject_cast(*args)

def OdRxObject_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxObject_desc(*args)

kDrawableOverrule = _ODA_Kernel_Py3.kDrawableOverrule
kObjectOverrule = _ODA_Kernel_Py3.kObjectOverrule
kPropertiesOverrule = _ODA_Kernel_Py3.kPropertiesOverrule
kGeometryOverrule = _ODA_Kernel_Py3.kGeometryOverrule
kHighlightOverrule = _ODA_Kernel_Py3.kHighlightOverrule
kSubentityOverrule = _ODA_Kernel_Py3.kSubentityOverrule
kGripOverrule = _ODA_Kernel_Py3.kGripOverrule
kTransformOverrule = _ODA_Kernel_Py3.kTransformOverrule
kOsnapOverrule = _ODA_Kernel_Py3.kOsnapOverrule
kVisibilityOverrule = _ODA_Kernel_Py3.kVisibilityOverrule
kTotalOverrules = _ODA_Kernel_Py3.kTotalOverrules
class OdRxClass(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxClass >":
        return _ODA_Kernel_Py3.OdRxClass_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxClass_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxClass_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxClass_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxClass >":
        return _ODA_Kernel_Py3.OdRxClass_createObject(*args)

    @staticmethod
    def rxInit(*args) -> "void":
        return _ODA_Kernel_Py3.OdRxClass_rxInit(*args)

    @staticmethod
    def rxUninit(*args) -> "void":
        return _ODA_Kernel_Py3.OdRxClass_rxUninit(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxClass

    def addX(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdRxClass_addX(self, *args)

    def getX(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdRxClass_getX(self, *args)

    def delX(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdRxClass_delX(self, *args)

    def create(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdRxClass_create(self, *args)

    def appName(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdRxClass_appName(self, *args)

    def appNameCallbackPtr(self, *args) -> "AppNameChangeFuncPtr":
        return _ODA_Kernel_Py3.OdRxClass_appNameCallbackPtr(self, *args)

    def dxfName(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdRxClass_dxfName(self, *args)

    def name(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdRxClass_name(self, *args)

    def getClassVersion(self, *args) -> "OdDb::DwgVersion":
        return _ODA_Kernel_Py3.OdRxClass_getClassVersion(self, *args)

    def proxyFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdRxClass_proxyFlags(self, *args)

    def isDerivedFrom(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxClass_isDerivedFrom(self, *args)

    def myParent(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxClass_myParent(self, *args)

    def module(self, *args) -> "OdRxModule *":
        return _ODA_Kernel_Py3.OdRxClass_module(self, *args)

    def customFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdRxClass_customFlags(self, *args)

    def members(self, *args) -> "OdRxMemberCollection *":
        return _ODA_Kernel_Py3.OdRxClass_members(self, *args)

    def attributes(self, *args) -> "OdRxAttributeCollection &":
        return _ODA_Kernel_Py3.OdRxClass_attributes(self, *args)

# Register OdRxClass in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxClass_swigregister(OdRxClass)

def OdRxClass_cast(*args) -> "OdSmartPtr< OdRxClass >":
    return _ODA_Kernel_Py3.OdRxClass_cast(*args)

def OdRxClass_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxClass_desc(*args)

def OdRxClass_createObject(*args) -> "OdSmartPtr< OdRxClass >":
    return _ODA_Kernel_Py3.OdRxClass_createObject(*args)

def OdRxClass_rxInit(*args) -> "void":
    return _ODA_Kernel_Py3.OdRxClass_rxInit(*args)

def OdRxClass_rxUninit(*args) -> "void":
    return _ODA_Kernel_Py3.OdRxClass_rxUninit(*args)


def odrxCreateObject(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.odrxCreateObject(*args)

def odrxRegisterDestructorCallback(*args) -> "void":
    return _ODA_Kernel_Py3.odrxRegisterDestructorCallback(*args)

def odrxUnregisterDestructorCallback(*args) -> "void":
    return _ODA_Kernel_Py3.odrxUnregisterDestructorCallback(*args)
class OdError_InvalidVariantType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdError_InvalidVariantType_swiginit(self, _ODA_Kernel_Py3.new_OdError_InvalidVariantType(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdError_InvalidVariantType

# Register OdError_InvalidVariantType in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdError_InvalidVariantType_swigregister(OdError_InvalidVariantType)

class OdVariant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def typeFactory(*args) -> "OdVariant::TypeFactory const *":
        return _ODA_Kernel_Py3.OdVariant_typeFactory(*args)
    kVoid = _ODA_Kernel_Py3.OdVariant_kVoid
    kString = _ODA_Kernel_Py3.OdVariant_kString
    kBool = _ODA_Kernel_Py3.OdVariant_kBool
    kInt8 = _ODA_Kernel_Py3.OdVariant_kInt8
    kUInt8 = _ODA_Kernel_Py3.OdVariant_kUInt8
    kInt16 = _ODA_Kernel_Py3.OdVariant_kInt16
    kUInt16 = _ODA_Kernel_Py3.OdVariant_kUInt16
    kInt32 = _ODA_Kernel_Py3.OdVariant_kInt32
    kUInt32 = _ODA_Kernel_Py3.OdVariant_kUInt32
    kInt64 = _ODA_Kernel_Py3.OdVariant_kInt64
    kUInt64 = _ODA_Kernel_Py3.OdVariant_kUInt64
    kDouble = _ODA_Kernel_Py3.OdVariant_kDouble
    kWString = _ODA_Kernel_Py3.OdVariant_kWString
    kAnsiString = _ODA_Kernel_Py3.OdVariant_kAnsiString
    kRxObjectPtr = _ODA_Kernel_Py3.OdVariant_kRxObjectPtr
    kNextType = _ODA_Kernel_Py3.OdVariant_kNextType
    kByRef = _ODA_Kernel_Py3.OdVariant_kByRef
    kArray = _ODA_Kernel_Py3.OdVariant_kArray
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdVariant

    def varType(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdVariant_varType(self, *args)

    def type(self, *args) -> "OdVariant::Type":
        return _ODA_Kernel_Py3.OdVariant_type(self, *args)

    def isArray(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdVariant_isArray(self, *args)

    def isByRef(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdVariant_isByRef(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdVariant_swiginit(self, _ODA_Kernel_Py3.new_OdVariant(*args))

    def getString(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdVariant_getString(self, *args)

    def getAnsiString(self, *args) -> "OdAnsiString const &":
        return _ODA_Kernel_Py3.OdVariant_getAnsiString(self, *args)

    def getRxObjectPtr(self, *args) -> "OdRxObjectPtr const &":
        return _ODA_Kernel_Py3.OdVariant_getRxObjectPtr(self, *args)

    def getBool(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdVariant_getBool(self, *args)

    def getInt8(self, *args) -> "OdInt8":
        return _ODA_Kernel_Py3.OdVariant_getInt8(self, *args)

    def getUInt8(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdVariant_getUInt8(self, *args)

    def getInt16(self, *args) -> "OdInt16":
        return _ODA_Kernel_Py3.OdVariant_getInt16(self, *args)

    def getUInt16(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdVariant_getUInt16(self, *args)

    def getInt32(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdVariant_getInt32(self, *args)

    def getUInt32(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdVariant_getUInt32(self, *args)

    def getInt64(self, *args) -> "OdInt64":
        return _ODA_Kernel_Py3.OdVariant_getInt64(self, *args)

    def getUInt64(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdVariant_getUInt64(self, *args)

    def getIntPtr(self, *args) -> "OdIntPtr":
        return _ODA_Kernel_Py3.OdVariant_getIntPtr(self, *args)

    def getDouble(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdVariant_getDouble(self, *args)

    def getStringArray(self, *args) -> "OdStringArray const &":
        return _ODA_Kernel_Py3.OdVariant_getStringArray(self, *args)

    def getRxObjectPtrArray(self, *args) -> "OdRxObjectPtrArray const &":
        return _ODA_Kernel_Py3.OdVariant_getRxObjectPtrArray(self, *args)

    def getBoolArray(self, *args) -> "OdBoolArray const &":
        return _ODA_Kernel_Py3.OdVariant_getBoolArray(self, *args)

    def getInt8Array(self, *args) -> "OdInt8Array const &":
        return _ODA_Kernel_Py3.OdVariant_getInt8Array(self, *args)

    def getUInt8Array(self, *args) -> "OdUInt8Array const &":
        return _ODA_Kernel_Py3.OdVariant_getUInt8Array(self, *args)

    def getInt16Array(self, *args) -> "OdInt16Array const &":
        return _ODA_Kernel_Py3.OdVariant_getInt16Array(self, *args)

    def getUInt16Array(self, *args) -> "OdUInt16Array const &":
        return _ODA_Kernel_Py3.OdVariant_getUInt16Array(self, *args)

    def getInt32Array(self, *args) -> "OdInt32Array const &":
        return _ODA_Kernel_Py3.OdVariant_getInt32Array(self, *args)

    def getUInt32Array(self, *args) -> "OdUInt32Array const &":
        return _ODA_Kernel_Py3.OdVariant_getUInt32Array(self, *args)

    def getInt64Array(self, *args) -> "OdInt64Array const &":
        return _ODA_Kernel_Py3.OdVariant_getInt64Array(self, *args)

    def getUInt64Array(self, *args) -> "OdUInt64Array const &":
        return _ODA_Kernel_Py3.OdVariant_getUInt64Array(self, *args)

    def getDoubleArray(self, *args) -> "OdDoubleArray const &":
        return _ODA_Kernel_Py3.OdVariant_getDoubleArray(self, *args)

    def asStringArray(self, *args) -> "OdStringArray &":
        return _ODA_Kernel_Py3.OdVariant_asStringArray(self, *args)

    def asRxObjectPtrArray(self, *args) -> "OdRxObjectPtrArray &":
        return _ODA_Kernel_Py3.OdVariant_asRxObjectPtrArray(self, *args)

    def asBoolArray(self, *args) -> "OdBoolArray &":
        return _ODA_Kernel_Py3.OdVariant_asBoolArray(self, *args)

    def asInt8Array(self, *args) -> "OdInt8Array &":
        return _ODA_Kernel_Py3.OdVariant_asInt8Array(self, *args)

    def asUInt8Array(self, *args) -> "OdUInt8Array &":
        return _ODA_Kernel_Py3.OdVariant_asUInt8Array(self, *args)

    def asInt16Array(self, *args) -> "OdInt16Array &":
        return _ODA_Kernel_Py3.OdVariant_asInt16Array(self, *args)

    def asUInt16Array(self, *args) -> "OdUInt16Array &":
        return _ODA_Kernel_Py3.OdVariant_asUInt16Array(self, *args)

    def asInt32Array(self, *args) -> "OdInt32Array &":
        return _ODA_Kernel_Py3.OdVariant_asInt32Array(self, *args)

    def asUInt32Array(self, *args) -> "OdUInt32Array &":
        return _ODA_Kernel_Py3.OdVariant_asUInt32Array(self, *args)

    def asInt64Array(self, *args) -> "OdInt64Array &":
        return _ODA_Kernel_Py3.OdVariant_asInt64Array(self, *args)

    def asUInt64Array(self, *args) -> "OdUInt64Array &":
        return _ODA_Kernel_Py3.OdVariant_asUInt64Array(self, *args)

    def asDoubleArray(self, *args) -> "OdDoubleArray &":
        return _ODA_Kernel_Py3.OdVariant_asDoubleArray(self, *args)

    def getStringArrayPtr(self, *args) -> "OdStringArray *":
        return _ODA_Kernel_Py3.OdVariant_getStringArrayPtr(self, *args)

    def getRxObjectPtrArrayPtr(self, *args) -> "OdRxObjectPtrArray *":
        return _ODA_Kernel_Py3.OdVariant_getRxObjectPtrArrayPtr(self, *args)

    def getBoolArrayPtr(self, *args) -> "OdBoolArray *":
        return _ODA_Kernel_Py3.OdVariant_getBoolArrayPtr(self, *args)

    def getInt8ArrayPtr(self, *args) -> "OdInt8Array *":
        return _ODA_Kernel_Py3.OdVariant_getInt8ArrayPtr(self, *args)

    def getUInt8ArrayPtr(self, *args) -> "OdUInt8Array *":
        return _ODA_Kernel_Py3.OdVariant_getUInt8ArrayPtr(self, *args)

    def getInt16ArrayPtr(self, *args) -> "OdInt16Array *":
        return _ODA_Kernel_Py3.OdVariant_getInt16ArrayPtr(self, *args)

    def getUInt16ArrayPtr(self, *args) -> "OdUInt16Array *":
        return _ODA_Kernel_Py3.OdVariant_getUInt16ArrayPtr(self, *args)

    def getInt32ArrayPtr(self, *args) -> "OdInt32Array *":
        return _ODA_Kernel_Py3.OdVariant_getInt32ArrayPtr(self, *args)

    def getUInt32ArrayPtr(self, *args) -> "OdUInt32Array *":
        return _ODA_Kernel_Py3.OdVariant_getUInt32ArrayPtr(self, *args)

    def getInt64ArrayPtr(self, *args) -> "OdInt64Array *":
        return _ODA_Kernel_Py3.OdVariant_getInt64ArrayPtr(self, *args)

    def getUInt64ArrayPtr(self, *args) -> "OdUInt64Array *":
        return _ODA_Kernel_Py3.OdVariant_getUInt64ArrayPtr(self, *args)

    def getDoubleArrayPtr(self, *args) -> "OdDoubleArray *":
        return _ODA_Kernel_Py3.OdVariant_getDoubleArrayPtr(self, *args)

    def setString(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setString(self, *args)

    def setAnsiString(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setAnsiString(self, *args)

    def setRxObjectPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setRxObjectPtr(self, *args)

    def setBool(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setBool(self, *args)

    def setInt8(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setInt8(self, *args)

    def setUInt8(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setUInt8(self, *args)

    def setInt16(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setInt16(self, *args)

    def setUInt16(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setUInt16(self, *args)

    def setInt32(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setInt32(self, *args)

    def setUInt32(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setUInt32(self, *args)

    def setInt64(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setInt64(self, *args)

    def setUInt64(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setUInt64(self, *args)

    def setIntPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setIntPtr(self, *args)

    def setDouble(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setDouble(self, *args)

    def setStringArray(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setStringArray(self, *args)

    def setRxObjectPtrArray(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setRxObjectPtrArray(self, *args)

    def setBoolArray(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setBoolArray(self, *args)

    def setInt8Array(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setInt8Array(self, *args)

    def setUInt8Array(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setUInt8Array(self, *args)

    def setInt16Array(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setInt16Array(self, *args)

    def setUInt16Array(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setUInt16Array(self, *args)

    def setInt32Array(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setInt32Array(self, *args)

    def setUInt32Array(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setUInt32Array(self, *args)

    def setInt64Array(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setInt64Array(self, *args)

    def setUInt64Array(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setUInt64Array(self, *args)

    def setDoubleArray(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setDoubleArray(self, *args)

    def setStringArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setStringArrayPtr(self, *args)

    def setRxObjectPtrArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setRxObjectPtrArrayPtr(self, *args)

    def setBoolArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setBoolArrayPtr(self, *args)

    def setInt8ArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setInt8ArrayPtr(self, *args)

    def setUInt8ArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setUInt8ArrayPtr(self, *args)

    def setInt16ArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setInt16ArrayPtr(self, *args)

    def setUInt16ArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setUInt16ArrayPtr(self, *args)

    def setInt32ArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setInt32ArrayPtr(self, *args)

    def setUInt32ArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setUInt32ArrayPtr(self, *args)

    def setInt64ArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setInt64ArrayPtr(self, *args)

    def setUInt64ArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setUInt64ArrayPtr(self, *args)

    def setDoubleArrayPtr(self, *args) -> "OdVariant &":
        return _ODA_Kernel_Py3.OdVariant_setDoubleArrayPtr(self, *args)

# Register OdVariant in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdVariant_swigregister(OdVariant)
nOdVariantDataSize = cvar.nOdVariantDataSize

def OdVariant_typeFactory(*args) -> "OdVariant::TypeFactory const *":
    return _ODA_Kernel_Py3.OdVariant_typeFactory(*args)

class OdVariant_TypeFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def construct(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdVariant_TypeFactory_construct(self, *args)

    def destroy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdVariant_TypeFactory_destroy(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdVariant_TypeFactory

# Register OdVariant_TypeFactory in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdVariant_TypeFactory_swigregister(OdVariant_TypeFactory)

class OdRxVariant(OdRxObject, OdVariant):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxVariant

# Register OdRxVariant in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxVariant_swigregister(OdRxVariant)

class PyOdRxVariantValue(OdRxVariant, OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.PyOdRxVariantValue_swiginit(self, _ODA_Kernel_Py3.new_PyOdRxVariantValue(*args))

    def assign(self, *args) -> "void":
        return _ODA_Kernel_Py3.PyOdRxVariantValue_assign(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PyOdRxVariantValue

# Register PyOdRxVariantValue in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PyOdRxVariantValue_swigregister(PyOdRxVariantValue)

ODPDF_DEFAULT_FONT_WIDTH = _ODA_Kernel_Py3.ODPDF_DEFAULT_FONT_WIDTH

def getUnicodeTextString(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.getUnicodeTextString(*args)

def odrxAlloc(*args) -> "void *":
    return _ODA_Kernel_Py3.odrxAlloc(*args)

def odrxRealloc(*args) -> "void *":
    return _ODA_Kernel_Py3.odrxRealloc(*args)

def odrxFree(*args) -> "void":
    return _ODA_Kernel_Py3.odrxFree(*args)

def GetMemoryUsageInternalInfo(*args) -> "OdUInt64":
    return _ODA_Kernel_Py3.GetMemoryUsageInternalInfo(*args)
IMAGE_MAJOR_VER = _ODA_Kernel_Py3.IMAGE_MAJOR_VER
IMAGE_MINOR_VER = _ODA_Kernel_Py3.IMAGE_MINOR_VER
IMAGE_CORRECTIVE_VER = _ODA_Kernel_Py3.IMAGE_CORRECTIVE_VER
IMAGE_INTERNAL_VER = _ODA_Kernel_Py3.IMAGE_INTERNAL_VER
class OdGe(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eGood = _ODA_Kernel_Py3.OdGe_eGood
    eBad = _ODA_Kernel_Py3.OdGe_eBad
    kEntity2d = _ODA_Kernel_Py3.OdGe_kEntity2d
    kEntity3d = _ODA_Kernel_Py3.OdGe_kEntity3d
    kPointEnt2d = _ODA_Kernel_Py3.OdGe_kPointEnt2d
    kPointEnt3d = _ODA_Kernel_Py3.OdGe_kPointEnt3d
    kPosition2d = _ODA_Kernel_Py3.OdGe_kPosition2d
    kPosition3d = _ODA_Kernel_Py3.OdGe_kPosition3d
    kPointOnCurve2d = _ODA_Kernel_Py3.OdGe_kPointOnCurve2d
    kPointOnCurve3d = _ODA_Kernel_Py3.OdGe_kPointOnCurve3d
    kPointOnSurface = _ODA_Kernel_Py3.OdGe_kPointOnSurface
    kBoundedPlane = _ODA_Kernel_Py3.OdGe_kBoundedPlane
    kCircArc2d = _ODA_Kernel_Py3.OdGe_kCircArc2d
    kCircArc3d = _ODA_Kernel_Py3.OdGe_kCircArc3d
    kConic2d = _ODA_Kernel_Py3.OdGe_kConic2d
    kConic3d = _ODA_Kernel_Py3.OdGe_kConic3d
    kCurve2d = _ODA_Kernel_Py3.OdGe_kCurve2d
    kCurve3d = _ODA_Kernel_Py3.OdGe_kCurve3d
    kEllipArc2d = _ODA_Kernel_Py3.OdGe_kEllipArc2d
    kEllipArc3d = _ODA_Kernel_Py3.OdGe_kEllipArc3d
    kLine2d = _ODA_Kernel_Py3.OdGe_kLine2d
    kLine3d = _ODA_Kernel_Py3.OdGe_kLine3d
    kLinearEnt2d = _ODA_Kernel_Py3.OdGe_kLinearEnt2d
    kLinearEnt3d = _ODA_Kernel_Py3.OdGe_kLinearEnt3d
    kLineSeg2d = _ODA_Kernel_Py3.OdGe_kLineSeg2d
    kLineSeg3d = _ODA_Kernel_Py3.OdGe_kLineSeg3d
    kPlanarEnt = _ODA_Kernel_Py3.OdGe_kPlanarEnt
    kPlane = _ODA_Kernel_Py3.OdGe_kPlane
    kRay2d = _ODA_Kernel_Py3.OdGe_kRay2d
    kRay3d = _ODA_Kernel_Py3.OdGe_kRay3d
    kSurface = _ODA_Kernel_Py3.OdGe_kSurface
    kSphere = _ODA_Kernel_Py3.OdGe_kSphere
    kCylinder = _ODA_Kernel_Py3.OdGe_kCylinder
    kTorus = _ODA_Kernel_Py3.OdGe_kTorus
    kCone = _ODA_Kernel_Py3.OdGe_kCone
    kSplineEnt2d = _ODA_Kernel_Py3.OdGe_kSplineEnt2d
    kPolyline2d = _ODA_Kernel_Py3.OdGe_kPolyline2d
    kAugPolyline2d = _ODA_Kernel_Py3.OdGe_kAugPolyline2d
    kNurbCurve2d = _ODA_Kernel_Py3.OdGe_kNurbCurve2d
    kDSpline2d = _ODA_Kernel_Py3.OdGe_kDSpline2d
    kCubicSplineCurve2d = _ODA_Kernel_Py3.OdGe_kCubicSplineCurve2d
    kSplineEnt3d = _ODA_Kernel_Py3.OdGe_kSplineEnt3d
    kPolyline3d = _ODA_Kernel_Py3.OdGe_kPolyline3d
    kAugPolyline3d = _ODA_Kernel_Py3.OdGe_kAugPolyline3d
    kNurbCurve3d = _ODA_Kernel_Py3.OdGe_kNurbCurve3d
    kDSpline3d = _ODA_Kernel_Py3.OdGe_kDSpline3d
    kCubicSplineCurve3d = _ODA_Kernel_Py3.OdGe_kCubicSplineCurve3d
    kTrimmedCrv2d = _ODA_Kernel_Py3.OdGe_kTrimmedCrv2d
    kCompositeCrv2d = _ODA_Kernel_Py3.OdGe_kCompositeCrv2d
    kCompositeCrv3d = _ODA_Kernel_Py3.OdGe_kCompositeCrv3d
    kExternalSurface = _ODA_Kernel_Py3.OdGe_kExternalSurface
    kNurbSurface = _ODA_Kernel_Py3.OdGe_kNurbSurface
    kTrimmedSurface = _ODA_Kernel_Py3.OdGe_kTrimmedSurface
    kOffsetSurface = _ODA_Kernel_Py3.OdGe_kOffsetSurface
    kEnvelope2d = _ODA_Kernel_Py3.OdGe_kEnvelope2d
    kCurveBoundedSurface = _ODA_Kernel_Py3.OdGe_kCurveBoundedSurface
    kExternalCurve3d = _ODA_Kernel_Py3.OdGe_kExternalCurve3d
    kExternalCurve2d = _ODA_Kernel_Py3.OdGe_kExternalCurve2d
    kSurfaceCurve2dTo3d = _ODA_Kernel_Py3.OdGe_kSurfaceCurve2dTo3d
    kSurfaceCurve3dTo2d = _ODA_Kernel_Py3.OdGe_kSurfaceCurve3dTo2d
    kExternalBoundedSurface = _ODA_Kernel_Py3.OdGe_kExternalBoundedSurface
    kCurveCurveInt2d = _ODA_Kernel_Py3.OdGe_kCurveCurveInt2d
    kCurveCurveInt3d = _ODA_Kernel_Py3.OdGe_kCurveCurveInt3d
    kBoundBlock2d = _ODA_Kernel_Py3.OdGe_kBoundBlock2d
    kBoundBlock3d = _ODA_Kernel_Py3.OdGe_kBoundBlock3d
    kOffsetCurve2d = _ODA_Kernel_Py3.OdGe_kOffsetCurve2d
    kOffsetCurve3d = _ODA_Kernel_Py3.OdGe_kOffsetCurve3d
    kPolynomCurve3d = _ODA_Kernel_Py3.OdGe_kPolynomCurve3d
    kBezierCurve3d = _ODA_Kernel_Py3.OdGe_kBezierCurve3d
    kObject = _ODA_Kernel_Py3.OdGe_kObject
    kFitData3d = _ODA_Kernel_Py3.OdGe_kFitData3d
    kHatch = _ODA_Kernel_Py3.OdGe_kHatch
    kTrimmedCurve2d = _ODA_Kernel_Py3.OdGe_kTrimmedCurve2d
    kTrimmedCurve3d = _ODA_Kernel_Py3.OdGe_kTrimmedCurve3d
    kCurveSampleData = _ODA_Kernel_Py3.OdGe_kCurveSampleData
    kEllipCone = _ODA_Kernel_Py3.OdGe_kEllipCone
    kEllipCylinder = _ODA_Kernel_Py3.OdGe_kEllipCylinder
    kIntervalBoundBlock = _ODA_Kernel_Py3.OdGe_kIntervalBoundBlock
    kClipBoundary2d = _ODA_Kernel_Py3.OdGe_kClipBoundary2d
    kExternalObject = _ODA_Kernel_Py3.OdGe_kExternalObject
    kCurveSurfaceInt = _ODA_Kernel_Py3.OdGe_kCurveSurfaceInt
    kSurfaceSurfaceInt = _ODA_Kernel_Py3.OdGe_kSurfaceSurfaceInt
    kHelix = _ODA_Kernel_Py3.OdGe_kHelix
    kSpunSurface = _ODA_Kernel_Py3.OdGe_kSpunSurface
    kSegmentChain2d = _ODA_Kernel_Py3.OdGe_kSegmentChain2d
    kRevolvedSurface = _ODA_Kernel_Py3.OdGe_kRevolvedSurface
    kRuled = _ODA_Kernel_Py3.OdGe_kRuled
    kEdgeCurve = _ODA_Kernel_Py3.OdGe_kEdgeCurve
    kDummy1 = _ODA_Kernel_Py3.OdGe_kDummy1
    kDummy2 = _ODA_Kernel_Py3.OdGe_kDummy2
    kDummy3 = _ODA_Kernel_Py3.OdGe_kDummy3
    kDummy4 = _ODA_Kernel_Py3.OdGe_kDummy4
    kDummy5 = _ODA_Kernel_Py3.OdGe_kDummy5
    kDummy6 = _ODA_Kernel_Py3.OdGe_kDummy6
    kDummy7 = _ODA_Kernel_Py3.OdGe_kDummy7
    kDummy8 = _ODA_Kernel_Py3.OdGe_kDummy8
    kDummy9 = _ODA_Kernel_Py3.OdGe_kDummy9
    kAcisEntity = _ODA_Kernel_Py3.OdGe_kAcisEntity
    kGe3dCurveEntity = _ODA_Kernel_Py3.OdGe_kGe3dCurveEntity
    kGeSurfaceEntity = _ODA_Kernel_Py3.OdGe_kGeSurfaceEntity
    kExternalEntityUndefined = _ODA_Kernel_Py3.OdGe_kExternalEntityUndefined
    kBimEntity = _ODA_Kernel_Py3.OdGe_kBimEntity
    kIfcEntity = _ODA_Kernel_Py3.OdGe_kIfcEntity
    kInside = _ODA_Kernel_Py3.OdGe_kInside
    kOutside = _ODA_Kernel_Py3.OdGe_kOutside
    kOnBoundary = _ODA_Kernel_Py3.OdGe_kOnBoundary
    kUninit = _ODA_Kernel_Py3.OdGe_kUninit
    kOpen = _ODA_Kernel_Py3.OdGe_kOpen
    kClosed = _ODA_Kernel_Py3.OdGe_kClosed
    kPeriodic = _ODA_Kernel_Py3.OdGe_kPeriodic
    kRational = _ODA_Kernel_Py3.OdGe_kRational
    kNoPoles = _ODA_Kernel_Py3.OdGe_kNoPoles
    kPoleAtMin = _ODA_Kernel_Py3.OdGe_kPoleAtMin
    kPoleAtMax = _ODA_Kernel_Py3.OdGe_kPoleAtMax
    kPoleAtBoth = _ODA_Kernel_Py3.OdGe_kPoleAtBoth
    kFillet = _ODA_Kernel_Py3.OdGe_kFillet
    kChamfer = _ODA_Kernel_Py3.OdGe_kChamfer
    kExtend = _ODA_Kernel_Py3.OdGe_kExtend
    kNotDefined = _ODA_Kernel_Py3.OdGe_kNotDefined
    kUnknown = _ODA_Kernel_Py3.OdGe_kUnknown
    kLeftRight = _ODA_Kernel_Py3.OdGe_kLeftRight
    kRightLeft = _ODA_Kernel_Py3.OdGe_kRightLeft
    kLeftLeft = _ODA_Kernel_Py3.OdGe_kLeftLeft
    kRightRight = _ODA_Kernel_Py3.OdGe_kRightRight
    kPointLeft = _ODA_Kernel_Py3.OdGe_kPointLeft
    kPointRight = _ODA_Kernel_Py3.OdGe_kPointRight
    kLeftOverlap = _ODA_Kernel_Py3.OdGe_kLeftOverlap
    kOverlapLeft = _ODA_Kernel_Py3.OdGe_kOverlapLeft
    kRightOverlap = _ODA_Kernel_Py3.OdGe_kRightOverlap
    kOverlapRight = _ODA_Kernel_Py3.OdGe_kOverlapRight
    kOverlapStart = _ODA_Kernel_Py3.OdGe_kOverlapStart
    kOverlapEnd = _ODA_Kernel_Py3.OdGe_kOverlapEnd
    kOverlapOverlap = _ODA_Kernel_Py3.OdGe_kOverlapOverlap
    kUnion = _ODA_Kernel_Py3.OdGe_kUnion
    kSubtract = _ODA_Kernel_Py3.OdGe_kSubtract
    kCommon = _ODA_Kernel_Py3.OdGe_kCommon
    eOk = _ODA_Kernel_Py3.OdGe_eOk
    eInvalidClipBoundary = _ODA_Kernel_Py3.OdGe_eInvalidClipBoundary
    eNotInitialized = _ODA_Kernel_Py3.OdGe_eNotInitialized
    kInvalid = _ODA_Kernel_Py3.OdGe_kInvalid
    kAllSegmentsInside = _ODA_Kernel_Py3.OdGe_kAllSegmentsInside
    kSegmentsIntersect = _ODA_Kernel_Py3.OdGe_kSegmentsIntersect
    kAllSegmentsOutsideZeroWinds = _ODA_Kernel_Py3.OdGe_kAllSegmentsOutsideZeroWinds
    kAllSegmentsOutsideOddWinds = _ODA_Kernel_Py3.OdGe_kAllSegmentsOutsideOddWinds
    kAllSegmentsOutsideEvenWinds = _ODA_Kernel_Py3.OdGe_kAllSegmentsOutsideEvenWinds
    kOk = _ODA_Kernel_Py3.OdGe_kOk
    k0This = _ODA_Kernel_Py3.OdGe_k0This
    k0Arg1 = _ODA_Kernel_Py3.OdGe_k0Arg1
    k0Arg2 = _ODA_Kernel_Py3.OdGe_k0Arg2
    kPerpendicularArg1Arg2 = _ODA_Kernel_Py3.OdGe_kPerpendicularArg1Arg2
    kEqualArg1Arg2 = _ODA_Kernel_Py3.OdGe_kEqualArg1Arg2
    kEqualArg1Arg3 = _ODA_Kernel_Py3.OdGe_kEqualArg1Arg3
    kEqualArg2Arg3 = _ODA_Kernel_Py3.OdGe_kEqualArg2Arg3
    kLinearlyDependentArg1Arg2Arg3 = _ODA_Kernel_Py3.OdGe_kLinearlyDependentArg1Arg2Arg3
    kArg1TooBig = _ODA_Kernel_Py3.OdGe_kArg1TooBig
    kArg1OnThis = _ODA_Kernel_Py3.OdGe_kArg1OnThis
    kArg1InsideThis = _ODA_Kernel_Py3.OdGe_kArg1InsideThis
    kNonCoplanarGeometry = _ODA_Kernel_Py3.OdGe_kNonCoplanarGeometry
    kDegenerateGeometry = _ODA_Kernel_Py3.OdGe_kDegenerateGeometry
    kSingularPoint = _ODA_Kernel_Py3.OdGe_kSingularPoint
    kXUnknown = _ODA_Kernel_Py3.OdGe_kXUnknown
    kXOut = _ODA_Kernel_Py3.OdGe_kXOut
    kXIn = _ODA_Kernel_Py3.OdGe_kXIn
    kXTanOut = _ODA_Kernel_Py3.OdGe_kXTanOut
    kXTanIn = _ODA_Kernel_Py3.OdGe_kXTanIn
    kXCoincident = _ODA_Kernel_Py3.OdGe_kXCoincident
    kXCoincidentUnbounded = _ODA_Kernel_Py3.OdGe_kXCoincidentUnbounded
    kSSITransverse = _ODA_Kernel_Py3.OdGe_kSSITransverse
    kSSITangent = _ODA_Kernel_Py3.OdGe_kSSITangent
    kSSIAntiTangent = _ODA_Kernel_Py3.OdGe_kSSIAntiTangent
    kSSIUnknown = _ODA_Kernel_Py3.OdGe_kSSIUnknown
    kSSIOut = _ODA_Kernel_Py3.OdGe_kSSIOut
    kSSIIn = _ODA_Kernel_Py3.OdGe_kSSIIn
    kSSICoincident = _ODA_Kernel_Py3.OdGe_kSSICoincident
    kXXOk = _ODA_Kernel_Py3.OdGe_kXXOk
    kXXIndexOutOfRange = _ODA_Kernel_Py3.OdGe_kXXIndexOutOfRange
    kXXWrongDimensionAtIndex = _ODA_Kernel_Py3.OdGe_kXXWrongDimensionAtIndex
    kXXUnknown = _ODA_Kernel_Py3.OdGe_kXXUnknown
    kChord = _ODA_Kernel_Py3.OdGe_kChord
    kSqrtChord = _ODA_Kernel_Py3.OdGe_kSqrtChord
    kUniform = _ODA_Kernel_Py3.OdGe_kUniform
    kCustomParameterization = _ODA_Kernel_Py3.OdGe_kCustomParameterization
    kNotDefinedKnotParam = _ODA_Kernel_Py3.OdGe_kNotDefinedKnotParam

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGe_swiginit(self, _ODA_Kernel_Py3.new_OdGe(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGe

# Register OdGe in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGe_swigregister(OdGe)


def odgeHeapCleanup(*args) -> "void":
    return _ODA_Kernel_Py3.odgeHeapCleanup(*args)
class OdGeTol(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeTol_swiginit(self, _ODA_Kernel_Py3.new_OdGeTol(*args))

    def equalPoint(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeTol_equalPoint(self, *args)

    def equalVector(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeTol_equalVector(self, *args)

    def setEqualPoint(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeTol_setEqualPoint(self, *args)

    def setEqualVector(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeTol_setEqualVector(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeTol

# Register OdGeTol in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeTol_swigregister(OdGeTol)

class OdGeContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    gTol = property(_ODA_Kernel_Py3.OdGeContext_gTol_get, _ODA_Kernel_Py3.OdGeContext_gTol_set)
    gZeroTol = property(_ODA_Kernel_Py3.OdGeContext_gZeroTol_get, _ODA_Kernel_Py3.OdGeContext_gZeroTol_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeContext_swiginit(self, _ODA_Kernel_Py3.new_OdGeContext(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeContext

# Register OdGeContext in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeContext_swigregister(OdGeContext)

class OdGeLoopCtx(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kLUndefined = _ODA_Kernel_Py3.OdGeLoopCtx_kLUndefined
    kLOuter = _ODA_Kernel_Py3.OdGeLoopCtx_kLOuter
    kLInner = _ODA_Kernel_Py3.OdGeLoopCtx_kLInner

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeLoopCtx_swiginit(self, _ODA_Kernel_Py3.new_OdGeLoopCtx(*args))

    def getLoopType(self, *args) -> "OdGeLoopCtx::LoopType":
        return _ODA_Kernel_Py3.OdGeLoopCtx_getLoopType(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeLoopCtx

# Register OdGeLoopCtx in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeLoopCtx_swigregister(OdGeLoopCtx)


def geValidSolid(*args) -> "OdGeError":
    return _ODA_Kernel_Py3.geValidSolid(*args)

def geSolidSignedVolume(*args) -> "OdGeError":
    return _ODA_Kernel_Py3.geSolidSignedVolume(*args)

def geCalculateNormal(*args) -> "OdGeError":
    return _ODA_Kernel_Py3.geCalculateNormal(*args)

def geCalculatePlane(*args) -> "OdGeError":
    return _ODA_Kernel_Py3.geCalculatePlane(*args)

def geNurb3dTo2d(*args) -> "bool":
    return _ODA_Kernel_Py3.geNurb3dTo2d(*args)

def geSurfaceProp(*args) -> "bool":
    return _ODA_Kernel_Py3.geSurfaceProp(*args)

def geToString(*args) -> "OdString":
    return _ODA_Kernel_Py3.geToString(*args)

def geIsDir2dOnSurfCoincide3d(*args) -> "OdResult":
    return _ODA_Kernel_Py3.geIsDir2dOnSurfCoincide3d(*args)

def getSignedArea(*args) -> "double":
    return _ODA_Kernel_Py3.getSignedArea(*args)

def isPolygonOutOfRect2d(*args) -> "bool":
    return _ODA_Kernel_Py3.isPolygonOutOfRect2d(*args)

def GE_ERROR(*args) -> "void":
    return _ODA_Kernel_Py3.GE_ERROR(*args)
class OdError_GeNotImplemted(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdError_GeNotImplemted_swiginit(self, _ODA_Kernel_Py3.new_OdError_GeNotImplemted(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdError_GeNotImplemted

# Register OdError_GeNotImplemted in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdError_GeNotImplemted_swigregister(OdError_GeNotImplemted)

class OdGiLayerOverrides(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiLayerOverrides >":
        return _ODA_Kernel_Py3.OdGiLayerOverrides_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiLayerOverrides_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiLayerOverrides_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiLayerOverrides_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiLayerOverrides >":
        return _ODA_Kernel_Py3.OdGiLayerOverrides_createObject(*args)

    def getLayerOverride(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiLayerOverrides_getLayerOverride(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLayerOverrides

# Register OdGiLayerOverrides in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLayerOverrides_swigregister(OdGiLayerOverrides)

def OdGiLayerOverrides_cast(*args) -> "OdSmartPtr< OdGiLayerOverrides >":
    return _ODA_Kernel_Py3.OdGiLayerOverrides_cast(*args)

def OdGiLayerOverrides_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiLayerOverrides_desc(*args)

def OdGiLayerOverrides_createObject(*args) -> "OdSmartPtr< OdGiLayerOverrides >":
    return _ODA_Kernel_Py3.OdGiLayerOverrides_createObject(*args)

class OdGiAuxiliaryData(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiAuxiliaryData >":
        return _ODA_Kernel_Py3.OdGiAuxiliaryData_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiAuxiliaryData_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiAuxiliaryData_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiAuxiliaryData_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiAuxiliaryData >":
        return _ODA_Kernel_Py3.OdGiAuxiliaryData_createObject(*args)

    def getLevelOverrides(self, *args) -> "OdGiLayerOverridesPtr":
        return _ODA_Kernel_Py3.OdGiAuxiliaryData_getLevelOverrides(self, *args)

    def setLevelOverrides(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiAuxiliaryData_setLevelOverrides(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiAuxiliaryData

# Register OdGiAuxiliaryData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiAuxiliaryData_swigregister(OdGiAuxiliaryData)

def OdGiAuxiliaryData_cast(*args) -> "OdSmartPtr< OdGiAuxiliaryData >":
    return _ODA_Kernel_Py3.OdGiAuxiliaryData_cast(*args)

def OdGiAuxiliaryData_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiAuxiliaryData_desc(*args)

def OdGiAuxiliaryData_createObject(*args) -> "OdSmartPtr< OdGiAuxiliaryData >":
    return _ODA_Kernel_Py3.OdGiAuxiliaryData_createObject(*args)

class OdGeVector2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeVector2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeVector2d(*args))

    def setToProduct(self, *args) -> "OdGeVector2d &":
        return _ODA_Kernel_Py3.OdGeVector2d_setToProduct(self, *args)

    def transformBy(self, *args) -> "OdGeVector2d &":
        return _ODA_Kernel_Py3.OdGeVector2d_transformBy(self, *args)

    def rotateBy(self, *args) -> "OdGeVector2d &":
        return _ODA_Kernel_Py3.OdGeVector2d_rotateBy(self, *args)

    def mirror(self, *args) -> "OdGeVector2d &":
        return _ODA_Kernel_Py3.OdGeVector2d_mirror(self, *args)

    def __mul__(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.OdGeVector2d___mul__(self, *args)

    def __imul__(self, *args) -> "OdGeVector2d &":
        return _ODA_Kernel_Py3.OdGeVector2d___imul__(self, *args)

    def __truediv__(self, *args):
        return _ODA_Kernel_Py3.OdGeVector2d___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _ODA_Kernel_Py3.OdGeVector2d___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.OdGeVector2d___add__(self, *args)

    def __iadd__(self, *args) -> "OdGeVector2d &":
        return _ODA_Kernel_Py3.OdGeVector2d___iadd__(self, *args)

    def __sub__(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.OdGeVector2d___sub__(self, *args)

    def __isub__(self, *args) -> "OdGeVector2d &":
        return _ODA_Kernel_Py3.OdGeVector2d___isub__(self, *args)

    def asPoint(self, *args) -> "OdGePoint2d &":
        return _ODA_Kernel_Py3.OdGeVector2d_asPoint(self, *args)

    def setToSum(self, *args) -> "OdGeVector2d &":
        return _ODA_Kernel_Py3.OdGeVector2d_setToSum(self, *args)

    def __neg__(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.OdGeVector2d___neg__(self, *args)

    def negate(self, *args) -> "OdGeVector2d &":
        return _ODA_Kernel_Py3.OdGeVector2d_negate(self, *args)

    def perpVector(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.OdGeVector2d_perpVector(self, *args)

    def angle(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeVector2d_angle(self, *args)

    def angleTo(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeVector2d_angleTo(self, *args)

    def angleToCCW(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeVector2d_angleToCCW(self, *args)

    def normal(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.OdGeVector2d_normal(self, *args)

    def normalize(self, *args) -> "OdGeVector2d &":
        return _ODA_Kernel_Py3.OdGeVector2d_normalize(self, *args)

    def normalizeGetLength(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeVector2d_normalizeGetLength(self, *args)

    def length(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeVector2d_length(self, *args)

    def lengthSqrd(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeVector2d_lengthSqrd(self, *args)

    def isUnitLength(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector2d_isUnitLength(self, *args)

    def isZeroLength(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector2d_isZeroLength(self, *args)

    def isParallelTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector2d_isParallelTo(self, *args)

    def isCodirectionalTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector2d_isCodirectionalTo(self, *args)

    def isPerpendicularTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector2d_isPerpendicularTo(self, *args)

    def dotProduct(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeVector2d_dotProduct(self, *args)

    def crossProduct(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeVector2d_crossProduct(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector2d___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector2d___ne__(self, *args)

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector2d_isEqualTo(self, *args)

    def largestElement(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdGeVector2d_largestElement(self, *args)

    def set(self, *args) -> "OdGeVector2d &":
        return _ODA_Kernel_Py3.OdGeVector2d_set(self, *args)
    x = property(_ODA_Kernel_Py3.OdGeVector2d_x_get, _ODA_Kernel_Py3.OdGeVector2d_x_set)
    y = property(_ODA_Kernel_Py3.OdGeVector2d_y_get, _ODA_Kernel_Py3.OdGeVector2d_y_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeVector2d

# Register OdGeVector2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeVector2d_swigregister(OdGeVector2d)
OdGeVector2d.kIdentity = _ODA_Kernel_Py3.cvar.OdGeVector2d_kIdentity
OdGeVector2d.kXAxis = _ODA_Kernel_Py3.cvar.OdGeVector2d_kXAxis
OdGeVector2d.kYAxis = _ODA_Kernel_Py3.cvar.OdGeVector2d_kYAxis

kOdGiFillAlways = _ODA_Kernel_Py3.kOdGiFillAlways
kOdGiFillNever = _ODA_Kernel_Py3.kOdGiFillNever
kOdGiInvisible = _ODA_Kernel_Py3.kOdGiInvisible
kOdGiVisible = _ODA_Kernel_Py3.kOdGiVisible
kOdGiSilhouette = _ODA_Kernel_Py3.kOdGiSilhouette
class OdGiDrawableTraits(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiDrawableTraits >":
        return _ODA_Kernel_Py3.OdGiDrawableTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiDrawableTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiDrawableTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiDrawableTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiDrawableTraits >":
        return _ODA_Kernel_Py3.OdGiDrawableTraits_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDrawableTraits

# Register OdGiDrawableTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDrawableTraits_swigregister(OdGiDrawableTraits)

def OdGiDrawableTraits_cast(*args) -> "OdSmartPtr< OdGiDrawableTraits >":
    return _ODA_Kernel_Py3.OdGiDrawableTraits_cast(*args)

def OdGiDrawableTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiDrawableTraits_desc(*args)

def OdGiDrawableTraits_createObject(*args) -> "OdSmartPtr< OdGiDrawableTraits >":
    return _ODA_Kernel_Py3.OdGiDrawableTraits_createObject(*args)

class OdGiSubEntityTraits(OdGiDrawableTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kNoDrawFlags = _ODA_Kernel_Py3.OdGiSubEntityTraits_kNoDrawFlags
    kDrawBackfaces = _ODA_Kernel_Py3.OdGiSubEntityTraits_kDrawBackfaces
    kDrawHatchGroup = _ODA_Kernel_Py3.OdGiSubEntityTraits_kDrawHatchGroup
    kDrawFrontfacesOnly = _ODA_Kernel_Py3.OdGiSubEntityTraits_kDrawFrontfacesOnly
    kDrawGradientFill = _ODA_Kernel_Py3.OdGiSubEntityTraits_kDrawGradientFill
    kDrawSolidFill = _ODA_Kernel_Py3.OdGiSubEntityTraits_kDrawSolidFill
    kDrawNoLineWeight = _ODA_Kernel_Py3.OdGiSubEntityTraits_kDrawNoLineWeight
    kDrawNoPlotstyle = _ODA_Kernel_Py3.OdGiSubEntityTraits_kDrawNoPlotstyle
    kDrawContourFill = _ODA_Kernel_Py3.OdGiSubEntityTraits_kDrawContourFill
    kDisableLayoutCache = _ODA_Kernel_Py3.OdGiSubEntityTraits_kDisableLayoutCache
    kDrawBoundaryForClipping = _ODA_Kernel_Py3.OdGiSubEntityTraits_kDrawBoundaryForClipping
    kDrawBoundaryForClippingDrw = _ODA_Kernel_Py3.OdGiSubEntityTraits_kDrawBoundaryForClippingDrw
    kClipSetIsEmpty = _ODA_Kernel_Py3.OdGiSubEntityTraits_kClipSetIsEmpty
    kDrawPolygonFill = _ODA_Kernel_Py3.OdGiSubEntityTraits_kDrawPolygonFill
    kExcludeFromViewExt = _ODA_Kernel_Py3.OdGiSubEntityTraits_kExcludeFromViewExt
    kDrawDgLsPolyWithoutBreaks = _ODA_Kernel_Py3.OdGiSubEntityTraits_kDrawDgLsPolyWithoutBreaks
    kPolygonProcessing = _ODA_Kernel_Py3.OdGiSubEntityTraits_kPolygonProcessing
    kDisableAutoGenerateNormals = _ODA_Kernel_Py3.OdGiSubEntityTraits_kDisableAutoGenerateNormals
    kDisableFillModeCheck = _ODA_Kernel_Py3.OdGiSubEntityTraits_kDisableFillModeCheck
    kDrawUnderlayReference = _ODA_Kernel_Py3.OdGiSubEntityTraits_kDrawUnderlayReference
    kLineStyleScaleOverride = _ODA_Kernel_Py3.OdGiSubEntityTraits_kLineStyleScaleOverride
    kDisableDisplayClipping = _ODA_Kernel_Py3.OdGiSubEntityTraits_kDisableDisplayClipping
    kRegenTypeDependent2dDraw = _ODA_Kernel_Py3.OdGiSubEntityTraits_kRegenTypeDependent2dDraw
    kInternalDrawFlags = _ODA_Kernel_Py3.OdGiSubEntityTraits_kInternalDrawFlags
    kInheritableDrawFlags = _ODA_Kernel_Py3.OdGiSubEntityTraits_kInheritableDrawFlags
    kNoLockFlags = _ODA_Kernel_Py3.OdGiSubEntityTraits_kNoLockFlags
    kLockColors = _ODA_Kernel_Py3.OdGiSubEntityTraits_kLockColors
    kLockLineWeight = _ODA_Kernel_Py3.OdGiSubEntityTraits_kLockLineWeight
    kLockLineType = _ODA_Kernel_Py3.OdGiSubEntityTraits_kLockLineType
    kLockLineTypeScale = _ODA_Kernel_Py3.OdGiSubEntityTraits_kLockLineTypeScale
    kLockLayer = _ODA_Kernel_Py3.OdGiSubEntityTraits_kLockLayer
    kLockByBlockLayer = _ODA_Kernel_Py3.OdGiSubEntityTraits_kLockByBlockLayer
    kKeepAuxDataAndLockFlags = _ODA_Kernel_Py3.OdGiSubEntityTraits_kKeepAuxDataAndLockFlags
    kInheritableLockFlags = _ODA_Kernel_Py3.OdGiSubEntityTraits_kInheritableLockFlags
    kShadowsCastAndReceive = _ODA_Kernel_Py3.OdGiSubEntityTraits_kShadowsCastAndReceive
    kShadowsDoesNotCast = _ODA_Kernel_Py3.OdGiSubEntityTraits_kShadowsDoesNotCast
    kShadowsDoesNotReceive = _ODA_Kernel_Py3.OdGiSubEntityTraits_kShadowsDoesNotReceive
    kShadowsIgnore = _ODA_Kernel_Py3.OdGiSubEntityTraits_kShadowsIgnore
    kNoSelectionFlags = _ODA_Kernel_Py3.OdGiSubEntityTraits_kNoSelectionFlags
    kSelectionIgnore = _ODA_Kernel_Py3.OdGiSubEntityTraits_kSelectionIgnore
    kHighlightingGeometry = _ODA_Kernel_Py3.OdGiSubEntityTraits_kHighlightingGeometry
    kHiddenInHighlight = _ODA_Kernel_Py3.OdGiSubEntityTraits_kHiddenInHighlight
    kHint2DAttributes = _ODA_Kernel_Py3.OdGiSubEntityTraits_kHint2DAttributes
    kHint3DAttributes = _ODA_Kernel_Py3.OdGiSubEntityTraits_kHint3DAttributes
    kHintAllAttributes = _ODA_Kernel_Py3.OdGiSubEntityTraits_kHintAllAttributes
    kHintSnapModeOn = _ODA_Kernel_Py3.OdGiSubEntityTraits_kHintSnapModeOn
    kHintDefaultState = _ODA_Kernel_Py3.OdGiSubEntityTraits_kHintDefaultState

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiSubEntityTraits >":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiSubEntityTraits >":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_createObject(*args)

    def setColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setColor(self, *args)

    def setTrueColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setTrueColor(self, *args)

    def setLayer(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setLayer(self, *args)

    def setLineType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setLineType(self, *args)

    def setSelectionMarker(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setSelectionMarker(self, *args)

    def setFillType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setFillType(self, *args)

    def setFillPlane(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setFillPlane(self, *args)

    def setLineWeight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setLineWeight(self, *args)

    def setLineTypeScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setLineTypeScale(self, *args)

    def setThickness(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setThickness(self, *args)

    def setPlotStyleName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setPlotStyleName(self, *args)

    def setMaterial(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setMaterial(self, *args)

    def setMapper(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setMapper(self, *args)

    def setVisualStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setVisualStyle(self, *args)

    def setTransparency(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setTransparency(self, *args)

    def setDrawFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setDrawFlags(self, *args)

    def setLockFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setLockFlags(self, *args)

    def setSelectionGeom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setSelectionGeom(self, *args)

    def setShadowFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setShadowFlags(self, *args)

    def setSectionable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setSectionable(self, *args)

    def setSelectionFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setSelectionFlags(self, *args)

    def color(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_color(self, *args)

    def trueColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_trueColor(self, *args)

    def layer(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_layer(self, *args)

    def lineType(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_lineType(self, *args)

    def fillType(self, *args) -> "OdGiFillType":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_fillType(self, *args)

    def fillPlane(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_fillPlane(self, *args)

    def lineWeight(self, *args) -> "OdDb::LineWeight":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_lineWeight(self, *args)

    def lineTypeScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_lineTypeScale(self, *args)

    def thickness(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_thickness(self, *args)

    def plotStyleNameType(self, *args) -> "OdDb::PlotStyleNameType":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_plotStyleNameType(self, *args)

    def plotStyleNameId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_plotStyleNameId(self, *args)

    def material(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_material(self, *args)

    def mapper(self, *args) -> "OdGiMapper const *":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_mapper(self, *args)

    def visualStyle(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_visualStyle(self, *args)

    def transparency(self, *args) -> "OdCmTransparency":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_transparency(self, *args)

    def drawFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_drawFlags(self, *args)

    def lockFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_lockFlags(self, *args)

    def selectionGeom(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_selectionGeom(self, *args)

    def shadowFlags(self, *args) -> "OdGiSubEntityTraits::ShadowFlags":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_shadowFlags(self, *args)

    def sectionable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_sectionable(self, *args)

    def selectionFlags(self, *args) -> "OdGiSubEntityTraits::SelectionFlags":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_selectionFlags(self, *args)

    def setSecondaryTrueColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setSecondaryTrueColor(self, *args)

    def secondaryTrueColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_secondaryTrueColor(self, *args)

    def setLineStyleModifiers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setLineStyleModifiers(self, *args)

    def lineStyleModifiers(self, *args) -> "OdGiDgLinetypeModifiers const *":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_lineStyleModifiers(self, *args)

    def setFill(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setFill(self, *args)

    def fill(self, *args) -> "OdGiFill const *":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_fill(self, *args)

    def setAuxData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setAuxData(self, *args)

    def auxData(self, *args) -> "OdGiAuxiliaryDataPtr":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_auxData(self, *args)

    def pushLineweightOverride(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_pushLineweightOverride(self, *args)

    def popLineweightOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_popLineweightOverride(self, *args)

    def pushPaletteOverride(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_pushPaletteOverride(self, *args)

    def popPaletteOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_popPaletteOverride(self, *args)

    def setupForEntity(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_setupForEntity(self, *args)

    def addLight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraits_addLight(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSubEntityTraits

# Register OdGiSubEntityTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSubEntityTraits_swigregister(OdGiSubEntityTraits)

def OdGiSubEntityTraits_cast(*args) -> "OdSmartPtr< OdGiSubEntityTraits >":
    return _ODA_Kernel_Py3.OdGiSubEntityTraits_cast(*args)

def OdGiSubEntityTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiSubEntityTraits_desc(*args)

def OdGiSubEntityTraits_createObject(*args) -> "OdSmartPtr< OdGiSubEntityTraits >":
    return _ODA_Kernel_Py3.OdGiSubEntityTraits_createObject(*args)

class OdGeVector3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeVector3d_swiginit(self, _ODA_Kernel_Py3.new_OdGeVector3d(*args))

    def setToProduct(self, *args) -> "OdGeVector3d &":
        return _ODA_Kernel_Py3.OdGeVector3d_setToProduct(self, *args)

    def transformBy(self, *args) -> "OdGeVector3d &":
        return _ODA_Kernel_Py3.OdGeVector3d_transformBy(self, *args)

    def rotateBy(self, *args) -> "OdGeVector3d &":
        return _ODA_Kernel_Py3.OdGeVector3d_rotateBy(self, *args)

    def mirror(self, *args) -> "OdGeVector3d &":
        return _ODA_Kernel_Py3.OdGeVector3d_mirror(self, *args)

    def convert2d(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.OdGeVector3d_convert2d(self, *args)

    def __mul__(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeVector3d___mul__(self, *args)

    def __imul__(self, *args) -> "OdGeVector3d &":
        return _ODA_Kernel_Py3.OdGeVector3d___imul__(self, *args)

    def __truediv__(self, *args):
        return _ODA_Kernel_Py3.OdGeVector3d___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _ODA_Kernel_Py3.OdGeVector3d___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeVector3d___add__(self, *args)

    def __iadd__(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeVector3d___iadd__(self, *args)

    def __sub__(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeVector3d___sub__(self, *args)

    def __isub__(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeVector3d___isub__(self, *args)

    def asPoint(self, *args) -> "OdGePoint3d &":
        return _ODA_Kernel_Py3.OdGeVector3d_asPoint(self, *args)

    def setToSum(self, *args) -> "OdGeVector3d &":
        return _ODA_Kernel_Py3.OdGeVector3d_setToSum(self, *args)

    def __neg__(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeVector3d___neg__(self, *args)

    def negate(self, *args) -> "OdGeVector3d &":
        return _ODA_Kernel_Py3.OdGeVector3d_negate(self, *args)

    def perpVector(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeVector3d_perpVector(self, *args)

    def angleTo(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeVector3d_angleTo(self, *args)

    def angleOnPlane(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeVector3d_angleOnPlane(self, *args)

    def normal(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeVector3d_normal(self, *args)

    def normalize(self, *args) -> "OdGeVector3d &":
        return _ODA_Kernel_Py3.OdGeVector3d_normalize(self, *args)

    def normalizeGetLength(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeVector3d_normalizeGetLength(self, *args)

    def length(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeVector3d_length(self, *args)

    def setLength(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeVector3d_setLength(self, *args)

    def lengthSqrd(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeVector3d_lengthSqrd(self, *args)

    def isUnitLength(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector3d_isUnitLength(self, *args)

    def isZeroLength(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector3d_isZeroLength(self, *args)

    def isParallelTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector3d_isParallelTo(self, *args)

    def isCodirectionalTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector3d_isCodirectionalTo(self, *args)

    def isPerpendicularTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector3d_isPerpendicularTo(self, *args)

    def dotProduct(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeVector3d_dotProduct(self, *args)

    def crossProduct(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeVector3d_crossProduct(self, *args)

    def project(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeVector3d_project(self, *args)

    def orthoProject(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeVector3d_orthoProject(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector3d___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector3d___ne__(self, *args)

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeVector3d_isEqualTo(self, *args)

    def largestElement(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdGeVector3d_largestElement(self, *args)

    def set(self, *args) -> "OdGeVector3d &":
        return _ODA_Kernel_Py3.OdGeVector3d_set(self, *args)
    x = property(_ODA_Kernel_Py3.OdGeVector3d_x_get, _ODA_Kernel_Py3.OdGeVector3d_x_set)
    y = property(_ODA_Kernel_Py3.OdGeVector3d_y_get, _ODA_Kernel_Py3.OdGeVector3d_y_set)
    z = property(_ODA_Kernel_Py3.OdGeVector3d_z_get, _ODA_Kernel_Py3.OdGeVector3d_z_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeVector3d

# Register OdGeVector3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeVector3d_swigregister(OdGeVector3d)
OdGeVector3d.kIdentity = _ODA_Kernel_Py3.cvar.OdGeVector3d_kIdentity
OdGeVector3d.kXAxis = _ODA_Kernel_Py3.cvar.OdGeVector3d_kXAxis
OdGeVector3d.kYAxis = _ODA_Kernel_Py3.cvar.OdGeVector3d_kYAxis
OdGeVector3d.kZAxis = _ODA_Kernel_Py3.cvar.OdGeVector3d_kZAxis

class OdGePoint2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGePoint2d_swiginit(self, _ODA_Kernel_Py3.new_OdGePoint2d(*args))

    def setToProduct(self, *args) -> "OdGePoint2d &":
        return _ODA_Kernel_Py3.OdGePoint2d_setToProduct(self, *args)

    def transformBy(self, *args) -> "OdGePoint2d &":
        return _ODA_Kernel_Py3.OdGePoint2d_transformBy(self, *args)

    def rotateBy(self, *args) -> "OdGePoint2d &":
        return _ODA_Kernel_Py3.OdGePoint2d_rotateBy(self, *args)

    def mirror(self, *args) -> "OdGePoint2d &":
        return _ODA_Kernel_Py3.OdGePoint2d_mirror(self, *args)

    def scaleBy(self, *args) -> "OdGePoint2d &":
        return _ODA_Kernel_Py3.OdGePoint2d_scaleBy(self, *args)

    def __mul__(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGePoint2d___mul__(self, *args)

    def __imul__(self, *args) -> "OdGePoint2d &":
        return _ODA_Kernel_Py3.OdGePoint2d___imul__(self, *args)

    def __truediv__(self, *args):
        return _ODA_Kernel_Py3.OdGePoint2d___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _ODA_Kernel_Py3.OdGePoint2d___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGePoint2d___add__(self, *args)

    def __iadd__(self, *args) -> "OdGePoint2d &":
        return _ODA_Kernel_Py3.OdGePoint2d___iadd__(self, *args)

    def __isub__(self, *args) -> "OdGePoint2d &":
        return _ODA_Kernel_Py3.OdGePoint2d___isub__(self, *args)

    def setToSum(self, *args) -> "OdGePoint2d &":
        return _ODA_Kernel_Py3.OdGePoint2d_setToSum(self, *args)

    def __sub__(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.OdGePoint2d___sub__(self, *args)

    def asVector(self, *args) -> "OdGeVector2d &":
        return _ODA_Kernel_Py3.OdGePoint2d_asVector(self, *args)

    def distanceTo(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGePoint2d_distanceTo(self, *args)

    def distanceSqrdTo(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGePoint2d_distanceSqrdTo(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint2d___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint2d___ne__(self, *args)

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint2d_isEqualTo(self, *args)

    def set(self, *args) -> "OdGePoint2d &":
        return _ODA_Kernel_Py3.OdGePoint2d_set(self, *args)
    x = property(_ODA_Kernel_Py3.OdGePoint2d_x_get, _ODA_Kernel_Py3.OdGePoint2d_x_set)
    y = property(_ODA_Kernel_Py3.OdGePoint2d_y_get, _ODA_Kernel_Py3.OdGePoint2d_y_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGePoint2d

# Register OdGePoint2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGePoint2d_swigregister(OdGePoint2d)
OdGePoint2d.kOrigin = _ODA_Kernel_Py3.cvar.OdGePoint2d_kOrigin

class OdCmEntityColor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kRed = _ODA_Kernel_Py3.OdCmEntityColor_kRed
    kGreen = _ODA_Kernel_Py3.OdCmEntityColor_kGreen
    kBlue = _ODA_Kernel_Py3.OdCmEntityColor_kBlue
    kByLayer = _ODA_Kernel_Py3.OdCmEntityColor_kByLayer
    kByBlock = _ODA_Kernel_Py3.OdCmEntityColor_kByBlock
    kByColor = _ODA_Kernel_Py3.OdCmEntityColor_kByColor
    kByACI = _ODA_Kernel_Py3.OdCmEntityColor_kByACI
    kByPen = _ODA_Kernel_Py3.OdCmEntityColor_kByPen
    kForeground = _ODA_Kernel_Py3.OdCmEntityColor_kForeground
    kByDgnIndex = _ODA_Kernel_Py3.OdCmEntityColor_kByDgnIndex
    kNone = _ODA_Kernel_Py3.OdCmEntityColor_kNone
    kACIbyBlock = _ODA_Kernel_Py3.OdCmEntityColor_kACIbyBlock
    kACIforeground = _ODA_Kernel_Py3.OdCmEntityColor_kACIforeground
    kACIbyLayer = _ODA_Kernel_Py3.OdCmEntityColor_kACIbyLayer
    kACIclear = _ODA_Kernel_Py3.OdCmEntityColor_kACIclear
    kACIRed = _ODA_Kernel_Py3.OdCmEntityColor_kACIRed
    kACIYellow = _ODA_Kernel_Py3.OdCmEntityColor_kACIYellow
    kACIGreen = _ODA_Kernel_Py3.OdCmEntityColor_kACIGreen
    kACICyan = _ODA_Kernel_Py3.OdCmEntityColor_kACICyan
    kACIBlue = _ODA_Kernel_Py3.OdCmEntityColor_kACIBlue
    kACIMagenta = _ODA_Kernel_Py3.OdCmEntityColor_kACIMagenta
    kACIWhite = _ODA_Kernel_Py3.OdCmEntityColor_kACIWhite
    kACIstandard = _ODA_Kernel_Py3.OdCmEntityColor_kACIstandard
    kACImaximum = _ODA_Kernel_Py3.OdCmEntityColor_kACImaximum
    kACInone = _ODA_Kernel_Py3.OdCmEntityColor_kACInone
    kACIminimum = _ODA_Kernel_Py3.OdCmEntityColor_kACIminimum

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdCmEntityColor_swiginit(self, _ODA_Kernel_Py3.new_OdCmEntityColor(*args))

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmEntityColor___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmEntityColor___ne__(self, *args)

    def color(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdCmEntityColor_color(self, *args)

    @staticmethod
    def setColorMethod(*args) -> "void":
        return _ODA_Kernel_Py3.OdCmEntityColor_setColorMethod(*args)

    @staticmethod
    def colorMethod(*args) -> "OdCmEntityColor::ColorMethod":
        return _ODA_Kernel_Py3.OdCmEntityColor_colorMethod(*args)

    @staticmethod
    def setColor(*args) -> "void":
        return _ODA_Kernel_Py3.OdCmEntityColor_setColor(*args)

    @staticmethod
    def setColorIndex(*args) -> "void":
        return _ODA_Kernel_Py3.OdCmEntityColor_setColorIndex(*args)

    @staticmethod
    def setDgnColorIndex(*args) -> "void":
        return _ODA_Kernel_Py3.OdCmEntityColor_setDgnColorIndex(*args)

    @staticmethod
    def colorIndex(*args) -> "OdInt16":
        return _ODA_Kernel_Py3.OdCmEntityColor_colorIndex(*args)

    @staticmethod
    def setRGB(*args) -> "void":
        return _ODA_Kernel_Py3.OdCmEntityColor_setRGB(*args)

    @staticmethod
    def setRed(*args) -> "void":
        return _ODA_Kernel_Py3.OdCmEntityColor_setRed(*args)

    @staticmethod
    def setGreen(*args) -> "void":
        return _ODA_Kernel_Py3.OdCmEntityColor_setGreen(*args)

    @staticmethod
    def setBlue(*args) -> "void":
        return _ODA_Kernel_Py3.OdCmEntityColor_setBlue(*args)

    @staticmethod
    def red(*args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdCmEntityColor_red(*args)

    @staticmethod
    def green(*args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdCmEntityColor_green(*args)

    @staticmethod
    def blue(*args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdCmEntityColor_blue(*args)

    @staticmethod
    def isByColor(*args) -> "bool":
        return _ODA_Kernel_Py3.OdCmEntityColor_isByColor(*args)

    @staticmethod
    def isByLayer(*args) -> "bool":
        return _ODA_Kernel_Py3.OdCmEntityColor_isByLayer(*args)

    @staticmethod
    def isByBlock(*args) -> "bool":
        return _ODA_Kernel_Py3.OdCmEntityColor_isByBlock(*args)

    @staticmethod
    def isByACI(*args) -> "bool":
        return _ODA_Kernel_Py3.OdCmEntityColor_isByACI(*args)

    @staticmethod
    def isForeground(*args) -> "bool":
        return _ODA_Kernel_Py3.OdCmEntityColor_isForeground(*args)

    @staticmethod
    def isByDgnIndex(*args) -> "bool":
        return _ODA_Kernel_Py3.OdCmEntityColor_isByDgnIndex(*args)

    @staticmethod
    def isNone(*args) -> "bool":
        return _ODA_Kernel_Py3.OdCmEntityColor_isNone(*args)

    @staticmethod
    def setTrueColor(*args) -> "void":
        return _ODA_Kernel_Py3.OdCmEntityColor_setTrueColor(*args)

    @staticmethod
    def lookUpRGB(*args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdCmEntityColor_lookUpRGB(*args)

    @staticmethod
    def lookUpACI(*args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdCmEntityColor_lookUpACI(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdCmEntityColor

# Register OdCmEntityColor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdCmEntityColor_swigregister(OdCmEntityColor)

def OdCmEntityColor_setColorMethod(*args) -> "void":
    return _ODA_Kernel_Py3.OdCmEntityColor_setColorMethod(*args)

def OdCmEntityColor_colorMethod(*args) -> "OdCmEntityColor::ColorMethod":
    return _ODA_Kernel_Py3.OdCmEntityColor_colorMethod(*args)

def OdCmEntityColor_setColor(*args) -> "void":
    return _ODA_Kernel_Py3.OdCmEntityColor_setColor(*args)

def OdCmEntityColor_setColorIndex(*args) -> "void":
    return _ODA_Kernel_Py3.OdCmEntityColor_setColorIndex(*args)

def OdCmEntityColor_setDgnColorIndex(*args) -> "void":
    return _ODA_Kernel_Py3.OdCmEntityColor_setDgnColorIndex(*args)

def OdCmEntityColor_colorIndex(*args) -> "OdInt16":
    return _ODA_Kernel_Py3.OdCmEntityColor_colorIndex(*args)

def OdCmEntityColor_setRGB(*args) -> "void":
    return _ODA_Kernel_Py3.OdCmEntityColor_setRGB(*args)

def OdCmEntityColor_setRed(*args) -> "void":
    return _ODA_Kernel_Py3.OdCmEntityColor_setRed(*args)

def OdCmEntityColor_setGreen(*args) -> "void":
    return _ODA_Kernel_Py3.OdCmEntityColor_setGreen(*args)

def OdCmEntityColor_setBlue(*args) -> "void":
    return _ODA_Kernel_Py3.OdCmEntityColor_setBlue(*args)

def OdCmEntityColor_red(*args) -> "OdUInt8":
    return _ODA_Kernel_Py3.OdCmEntityColor_red(*args)

def OdCmEntityColor_green(*args) -> "OdUInt8":
    return _ODA_Kernel_Py3.OdCmEntityColor_green(*args)

def OdCmEntityColor_blue(*args) -> "OdUInt8":
    return _ODA_Kernel_Py3.OdCmEntityColor_blue(*args)

def OdCmEntityColor_isByColor(*args) -> "bool":
    return _ODA_Kernel_Py3.OdCmEntityColor_isByColor(*args)

def OdCmEntityColor_isByLayer(*args) -> "bool":
    return _ODA_Kernel_Py3.OdCmEntityColor_isByLayer(*args)

def OdCmEntityColor_isByBlock(*args) -> "bool":
    return _ODA_Kernel_Py3.OdCmEntityColor_isByBlock(*args)

def OdCmEntityColor_isByACI(*args) -> "bool":
    return _ODA_Kernel_Py3.OdCmEntityColor_isByACI(*args)

def OdCmEntityColor_isForeground(*args) -> "bool":
    return _ODA_Kernel_Py3.OdCmEntityColor_isForeground(*args)

def OdCmEntityColor_isByDgnIndex(*args) -> "bool":
    return _ODA_Kernel_Py3.OdCmEntityColor_isByDgnIndex(*args)

def OdCmEntityColor_isNone(*args) -> "bool":
    return _ODA_Kernel_Py3.OdCmEntityColor_isNone(*args)

def OdCmEntityColor_setTrueColor(*args) -> "void":
    return _ODA_Kernel_Py3.OdCmEntityColor_setTrueColor(*args)

def OdCmEntityColor_lookUpRGB(*args) -> "OdUInt32":
    return _ODA_Kernel_Py3.OdCmEntityColor_lookUpRGB(*args)

def OdCmEntityColor_lookUpACI(*args) -> "OdUInt8":
    return _ODA_Kernel_Py3.OdCmEntityColor_lookUpACI(*args)

class OdCmColorBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdCmColorBase

    def colorMethod(self, *args) -> "OdCmEntityColor::ColorMethod":
        return _ODA_Kernel_Py3.OdCmColorBase_colorMethod(self, *args)

    def setColorMethod(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCmColorBase_setColorMethod(self, *args)

    def isByColor(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmColorBase_isByColor(self, *args)

    def isByLayer(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmColorBase_isByLayer(self, *args)

    def isByBlock(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmColorBase_isByBlock(self, *args)

    def isByACI(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmColorBase_isByACI(self, *args)

    def isForeground(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmColorBase_isForeground(self, *args)

    def isByDgnIndex(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmColorBase_isByDgnIndex(self, *args)

    def color(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdCmColorBase_color(self, *args)

    def setColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCmColorBase_setColor(self, *args)

    def setRGB(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCmColorBase_setRGB(self, *args)

    def setRed(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCmColorBase_setRed(self, *args)

    def setGreen(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCmColorBase_setGreen(self, *args)

    def setBlue(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCmColorBase_setBlue(self, *args)

    def red(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdCmColorBase_red(self, *args)

    def green(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdCmColorBase_green(self, *args)

    def blue(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdCmColorBase_blue(self, *args)

    def colorIndex(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdCmColorBase_colorIndex(self, *args)

    def setColorIndex(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCmColorBase_setColorIndex(self, *args)

    def setNames(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmColorBase_setNames(self, *args)

    def colorName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdCmColorBase_colorName(self, *args)

    def bookName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdCmColorBase_bookName(self, *args)

    def colorNameForDisplay(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdCmColorBase_colorNameForDisplay(self, *args)

# Register OdCmColorBase in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdCmColorBase_swigregister(OdCmColorBase)

class OdCmTransparency(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kByLayer = _ODA_Kernel_Py3.OdCmTransparency_kByLayer
    kByBlock = _ODA_Kernel_Py3.OdCmTransparency_kByBlock
    kByAlpha = _ODA_Kernel_Py3.OdCmTransparency_kByAlpha
    kErrorValue = _ODA_Kernel_Py3.OdCmTransparency_kErrorValue

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdCmTransparency_swiginit(self, _ODA_Kernel_Py3.new_OdCmTransparency(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdCmTransparency

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmTransparency___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmTransparency___ne__(self, *args)

    def setAlpha(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCmTransparency_setAlpha(self, *args)

    def alpha(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdCmTransparency_alpha(self, *args)

    def setAlphaPercent(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCmTransparency_setAlphaPercent(self, *args)

    def alphaPercent(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdCmTransparency_alphaPercent(self, *args)

    def method(self, *args) -> "OdCmTransparency::transparencyMethod":
        return _ODA_Kernel_Py3.OdCmTransparency_method(self, *args)

    def setMethod(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCmTransparency_setMethod(self, *args)

    def isByAlpha(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmTransparency_isByAlpha(self, *args)

    def isByBlock(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmTransparency_isByBlock(self, *args)

    def isByLayer(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmTransparency_isByLayer(self, *args)

    def isInvalid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmTransparency_isInvalid(self, *args)

    def isClear(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmTransparency_isClear(self, *args)

    def isSolid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmTransparency_isSolid(self, *args)

    def serializeOut(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdCmTransparency_serializeOut(self, *args)

    def serializeIn(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCmTransparency_serializeIn(self, *args)

# Register OdCmTransparency in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdCmTransparency_swigregister(OdCmTransparency)

class OdRxOverrule(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxOverrule >":
        return _ODA_Kernel_Py3.OdRxOverrule_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxOverrule_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxOverrule_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxOverrule_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxOverrule >":
        return _ODA_Kernel_Py3.OdRxOverrule_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxOverrule

    def isApplicable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxOverrule_isApplicable(self, *args)

    @staticmethod
    def addOverrule(*args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxOverrule_addOverrule(*args)

    @staticmethod
    def removeOverrule(*args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxOverrule_removeOverrule(*args)

    @staticmethod
    def setIsOverruling(*args) -> "void":
        return _ODA_Kernel_Py3.OdRxOverrule_setIsOverruling(*args)

    @staticmethod
    def isOverruling(*args) -> "bool":
        return _ODA_Kernel_Py3.OdRxOverrule_isOverruling(*args)

    @staticmethod
    def hasOverrule(*args) -> "bool":
        return _ODA_Kernel_Py3.OdRxOverrule_hasOverrule(*args)

# Register OdRxOverrule in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxOverrule_swigregister(OdRxOverrule)

def OdRxOverrule_cast(*args) -> "OdSmartPtr< OdRxOverrule >":
    return _ODA_Kernel_Py3.OdRxOverrule_cast(*args)

def OdRxOverrule_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxOverrule_desc(*args)

def OdRxOverrule_createObject(*args) -> "OdSmartPtr< OdRxOverrule >":
    return _ODA_Kernel_Py3.OdRxOverrule_createObject(*args)

def OdRxOverrule_addOverrule(*args) -> "OdResult":
    return _ODA_Kernel_Py3.OdRxOverrule_addOverrule(*args)

def OdRxOverrule_removeOverrule(*args) -> "OdResult":
    return _ODA_Kernel_Py3.OdRxOverrule_removeOverrule(*args)

def OdRxOverrule_setIsOverruling(*args) -> "void":
    return _ODA_Kernel_Py3.OdRxOverrule_setIsOverruling(*args)

def OdRxOverrule_isOverruling(*args) -> "bool":
    return _ODA_Kernel_Py3.OdRxOverrule_isOverruling(*args)

def OdRxOverrule_hasOverrule(*args) -> "bool":
    return _ODA_Kernel_Py3.OdRxOverrule_hasOverrule(*args)

class OdGePoint3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGePoint3d_swiginit(self, _ODA_Kernel_Py3.new_OdGePoint3d(*args))

    def setToProduct(self, *args) -> "OdGePoint3d &":
        return _ODA_Kernel_Py3.OdGePoint3d_setToProduct(self, *args)

    def transformBy(self, *args) -> "OdGePoint3d &":
        return _ODA_Kernel_Py3.OdGePoint3d_transformBy(self, *args)

    def rotateBy(self, *args) -> "OdGePoint3d &":
        return _ODA_Kernel_Py3.OdGePoint3d_rotateBy(self, *args)

    def mirror(self, *args) -> "OdGePoint3d &":
        return _ODA_Kernel_Py3.OdGePoint3d_mirror(self, *args)

    def scaleBy(self, *args) -> "OdGePoint3d &":
        return _ODA_Kernel_Py3.OdGePoint3d_scaleBy(self, *args)

    def convert2d(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGePoint3d_convert2d(self, *args)

    def __mul__(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGePoint3d___mul__(self, *args)

    def __imul__(self, *args) -> "OdGePoint3d &":
        return _ODA_Kernel_Py3.OdGePoint3d___imul__(self, *args)

    def __truediv__(self, *args):
        return _ODA_Kernel_Py3.OdGePoint3d___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _ODA_Kernel_Py3.OdGePoint3d___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGePoint3d___add__(self, *args)

    def __iadd__(self, *args) -> "OdGePoint3d &":
        return _ODA_Kernel_Py3.OdGePoint3d___iadd__(self, *args)

    def __isub__(self, *args) -> "OdGePoint3d &":
        return _ODA_Kernel_Py3.OdGePoint3d___isub__(self, *args)

    def setToSum(self, *args) -> "OdGePoint3d &":
        return _ODA_Kernel_Py3.OdGePoint3d_setToSum(self, *args)

    def __sub__(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGePoint3d___sub__(self, *args)

    def asVector(self, *args) -> "OdGeVector3d &":
        return _ODA_Kernel_Py3.OdGePoint3d_asVector(self, *args)

    def distanceTo(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGePoint3d_distanceTo(self, *args)

    def distanceSqrdTo(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGePoint3d_distanceSqrdTo(self, *args)

    def project(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGePoint3d_project(self, *args)

    def orthoProject(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGePoint3d_orthoProject(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint3d___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint3d___ne__(self, *args)

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePoint3d_isEqualTo(self, *args)

    def set(self, *args) -> "OdGePoint3d &":
        return _ODA_Kernel_Py3.OdGePoint3d_set(self, *args)
    x = property(_ODA_Kernel_Py3.OdGePoint3d_x_get, _ODA_Kernel_Py3.OdGePoint3d_x_set)
    y = property(_ODA_Kernel_Py3.OdGePoint3d_y_get, _ODA_Kernel_Py3.OdGePoint3d_y_set)
    z = property(_ODA_Kernel_Py3.OdGePoint3d_z_get, _ODA_Kernel_Py3.OdGePoint3d_z_set)

    def swapWithPoint(self, *args) -> "OdGePoint3d &":
        return _ODA_Kernel_Py3.OdGePoint3d_swapWithPoint(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGePoint3d

# Register OdGePoint3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGePoint3d_swigregister(OdGePoint3d)
OdGePoint3d.kOrigin = _ODA_Kernel_Py3.cvar.OdGePoint3d_kOrigin

def Mul_GeMatrix3d_GePoint3d(*args) -> "OdGePoint3d":
    return _ODA_Kernel_Py3.Mul_GeMatrix3d_GePoint3d(*args)

class OdGeMatrix2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeMatrix2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeMatrix2d(*args))

    def setToIdentity(self, *args) -> "OdGeMatrix2d &":
        return _ODA_Kernel_Py3.OdGeMatrix2d_setToIdentity(self, *args)

    def __mul__(self, *args) -> "OdGeMatrix2d":
        return _ODA_Kernel_Py3.OdGeMatrix2d___mul__(self, *args)

    def __imul__(self, *args) -> "OdGeMatrix2d &":
        return _ODA_Kernel_Py3.OdGeMatrix2d___imul__(self, *args)

    def preMultBy(self, *args) -> "OdGeMatrix2d &":
        return _ODA_Kernel_Py3.OdGeMatrix2d_preMultBy(self, *args)

    def postMultBy(self, *args) -> "OdGeMatrix2d &":
        return _ODA_Kernel_Py3.OdGeMatrix2d_postMultBy(self, *args)

    def setToProduct(self, *args) -> "OdGeMatrix2d &":
        return _ODA_Kernel_Py3.OdGeMatrix2d_setToProduct(self, *args)

    def invert(self, *args) -> "OdGeMatrix2d &":
        return _ODA_Kernel_Py3.OdGeMatrix2d_invert(self, *args)

    def inverse(self, *args) -> "OdGeMatrix2d":
        return _ODA_Kernel_Py3.OdGeMatrix2d_inverse(self, *args)

    def isSingular(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeMatrix2d_isSingular(self, *args)

    def transposeIt(self, *args) -> "OdGeMatrix2d &":
        return _ODA_Kernel_Py3.OdGeMatrix2d_transposeIt(self, *args)

    def transpose(self, *args) -> "OdGeMatrix2d":
        return _ODA_Kernel_Py3.OdGeMatrix2d_transpose(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeMatrix2d___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeMatrix2d___ne__(self, *args)

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeMatrix2d_isEqualTo(self, *args)

    def isUniScaledOrtho(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeMatrix2d_isUniScaledOrtho(self, *args)

    def isScaledOrtho(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeMatrix2d_isScaledOrtho(self, *args)

    def scale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeMatrix2d_scale(self, *args)

    def det(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeMatrix2d_det(self, *args)

    def setTranslation(self, *args) -> "OdGeMatrix2d &":
        return _ODA_Kernel_Py3.OdGeMatrix2d_setTranslation(self, *args)

    @staticmethod
    def translation(*args) -> "OdGeMatrix2d":
        return _ODA_Kernel_Py3.OdGeMatrix2d_translation(*args)

    def isConformal(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeMatrix2d_isConformal(self, *args)

    def setCoordSystem(self, *args) -> "OdGeMatrix2d &":
        return _ODA_Kernel_Py3.OdGeMatrix2d_setCoordSystem(self, *args)

    def getCoordSystem(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeMatrix2d_getCoordSystem(self, *args)

    def setToTranslation(self, *args) -> "OdGeMatrix2d &":
        return _ODA_Kernel_Py3.OdGeMatrix2d_setToTranslation(self, *args)

    def setToRotation(self, *args) -> "OdGeMatrix2d &":
        return _ODA_Kernel_Py3.OdGeMatrix2d_setToRotation(self, *args)

    def setToScaling(self, *args) -> "OdGeMatrix2d &":
        return _ODA_Kernel_Py3.OdGeMatrix2d_setToScaling(self, *args)

    def setToMirroring(self, *args) -> "OdGeMatrix2d &":
        return _ODA_Kernel_Py3.OdGeMatrix2d_setToMirroring(self, *args)

    def setToAlignCoordSys(self, *args) -> "OdGeMatrix2d &":
        return _ODA_Kernel_Py3.OdGeMatrix2d_setToAlignCoordSys(self, *args)

    @staticmethod
    def rotation(*args) -> "OdGeMatrix2d":
        return _ODA_Kernel_Py3.OdGeMatrix2d_rotation(*args)

    @staticmethod
    def scaling(*args) -> "OdGeMatrix2d":
        return _ODA_Kernel_Py3.OdGeMatrix2d_scaling(*args)

    @staticmethod
    def mirroring(*args) -> "OdGeMatrix2d":
        return _ODA_Kernel_Py3.OdGeMatrix2d_mirroring(*args)

    @staticmethod
    def alignCoordSys(*args) -> "OdGeMatrix2d":
        return _ODA_Kernel_Py3.OdGeMatrix2d_alignCoordSys(*args)

    def __call__(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeMatrix2d___call__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeMatrix2d

# Register OdGeMatrix2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeMatrix2d_swigregister(OdGeMatrix2d)
OdGeMatrix2d.kIdentity = _ODA_Kernel_Py3.cvar.OdGeMatrix2d_kIdentity

def OdGeMatrix2d_translation(*args) -> "OdGeMatrix2d":
    return _ODA_Kernel_Py3.OdGeMatrix2d_translation(*args)

def OdGeMatrix2d_rotation(*args) -> "OdGeMatrix2d":
    return _ODA_Kernel_Py3.OdGeMatrix2d_rotation(*args)

def OdGeMatrix2d_scaling(*args) -> "OdGeMatrix2d":
    return _ODA_Kernel_Py3.OdGeMatrix2d_scaling(*args)

def OdGeMatrix2d_mirroring(*args) -> "OdGeMatrix2d":
    return _ODA_Kernel_Py3.OdGeMatrix2d_mirroring(*args)

def OdGeMatrix2d_alignCoordSys(*args) -> "OdGeMatrix2d":
    return _ODA_Kernel_Py3.OdGeMatrix2d_alignCoordSys(*args)

class OdGiVariant(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kUndefined = _ODA_Kernel_Py3.OdGiVariant_kUndefined
    kBoolean = _ODA_Kernel_Py3.OdGiVariant_kBoolean
    kInt = _ODA_Kernel_Py3.OdGiVariant_kInt
    kDouble = _ODA_Kernel_Py3.OdGiVariant_kDouble
    kColor = _ODA_Kernel_Py3.OdGiVariant_kColor
    kString = _ODA_Kernel_Py3.OdGiVariant_kString
    kTable = _ODA_Kernel_Py3.OdGiVariant_kTable

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiVariant >":
        return _ODA_Kernel_Py3.OdGiVariant_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiVariant_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiVariant_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiVariant_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdGiVariant_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiVariant

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiVariant___eq__(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVariant_copyFrom(self, *args)

    def type(self, *args) -> "OdGiVariant::VariantType":
        return _ODA_Kernel_Py3.OdGiVariant_type(self, *args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVariant_set(self, *args)

    def asBoolean(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiVariant_asBoolean(self, *args)

    def asInt(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiVariant_asInt(self, *args)

    def asDouble(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiVariant_asDouble(self, *args)

    def asColor(self, *args) -> "OdCmEntityColor const &":
        return _ODA_Kernel_Py3.OdGiVariant_asColor(self, *args)

    def asString(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdGiVariant_asString(self, *args)

    def asFloat(self, *args) -> "float":
        return _ODA_Kernel_Py3.OdGiVariant_asFloat(self, *args)

    def asChar(self, *args) -> "OdInt8":
        return _ODA_Kernel_Py3.OdGiVariant_asChar(self, *args)

    def asUchar(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdGiVariant_asUchar(self, *args)

    def asShort(self, *args) -> "OdInt16":
        return _ODA_Kernel_Py3.OdGiVariant_asShort(self, *args)

    def asUshort(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdGiVariant_asUshort(self, *args)

    def asUint(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiVariant_asUint(self, *args)

    def asLong(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiVariant_asLong(self, *args)

    def asUlong(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiVariant_asUlong(self, *args)

    def getElem(self, *args) -> "OdGiVariant const *":
        return _ODA_Kernel_Py3.OdGiVariant_getElem(self, *args)

    def setElem(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVariant_setElem(self, *args)

    def deleteElem(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVariant_deleteElem(self, *args)

    def getElemCount(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiVariant_getElemCount(self, *args)

    def getElemAt(self, *args) -> "OdGiVariant const *":
        return _ODA_Kernel_Py3.OdGiVariant_getElemAt(self, *args)

    @staticmethod
    def isEquivalent(*args) -> "bool":
        return _ODA_Kernel_Py3.OdGiVariant_isEquivalent(*args)

# Register OdGiVariant in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiVariant_swigregister(OdGiVariant)

def OdGiVariant_cast(*args) -> "OdSmartPtr< OdGiVariant >":
    return _ODA_Kernel_Py3.OdGiVariant_cast(*args)

def OdGiVariant_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiVariant_desc(*args)

def OdGiVariant_createObject(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdGiVariant_createObject(*args)

def OdGiVariant_isEquivalent(*args) -> "bool":
    return _ODA_Kernel_Py3.OdGiVariant_isEquivalent(*args)

class OdGiDrawable(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiDrawable >":
        return _ODA_Kernel_Py3.OdGiDrawable_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiDrawable_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiDrawable_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiDrawable_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiDrawable >":
        return _ODA_Kernel_Py3.OdGiDrawable_createObject(*args)
    kDrawableNone = _ODA_Kernel_Py3.OdGiDrawable_kDrawableNone
    kDrawableIsAnEntity = _ODA_Kernel_Py3.OdGiDrawable_kDrawableIsAnEntity
    kDrawableUsesNesting = _ODA_Kernel_Py3.OdGiDrawable_kDrawableUsesNesting
    kDrawableIsCompoundObject = _ODA_Kernel_Py3.OdGiDrawable_kDrawableIsCompoundObject
    kDrawableViewIndependentViewportDraw = _ODA_Kernel_Py3.OdGiDrawable_kDrawableViewIndependentViewportDraw
    kDrawableIsInvisible = _ODA_Kernel_Py3.OdGiDrawable_kDrawableIsInvisible
    kDrawableHasAttributes = _ODA_Kernel_Py3.OdGiDrawable_kDrawableHasAttributes
    kDrawableRegenTypeDependantGeometry = _ODA_Kernel_Py3.OdGiDrawable_kDrawableRegenTypeDependantGeometry
    kDrawableIsDimension = _ODA_Kernel_Py3.OdGiDrawable_kDrawableIsDimension
    kDrawableRegenDraw = _ODA_Kernel_Py3.OdGiDrawable_kDrawableRegenDraw
    kDrawableStandardDisplaySingleLOD = _ODA_Kernel_Py3.OdGiDrawable_kDrawableStandardDisplaySingleLOD
    kDrawableShadedDisplaySingleLOD = _ODA_Kernel_Py3.OdGiDrawable_kDrawableShadedDisplaySingleLOD
    kDrawableViewDependentViewportDraw = _ODA_Kernel_Py3.OdGiDrawable_kDrawableViewDependentViewportDraw
    kDrawableBlockDependentViewportDraw = _ODA_Kernel_Py3.OdGiDrawable_kDrawableBlockDependentViewportDraw
    kDrawableIsExternalReference = _ODA_Kernel_Py3.OdGiDrawable_kDrawableIsExternalReference
    kDrawableNotPlottable = _ODA_Kernel_Py3.OdGiDrawable_kDrawableNotPlottable
    kDrawableNotAllowLCS = _ODA_Kernel_Py3.OdGiDrawable_kDrawableNotAllowLCS
    kDrawableMergeControlOff = _ODA_Kernel_Py3.OdGiDrawable_kDrawableMergeControlOff
    kLastFlag = _ODA_Kernel_Py3.OdGiDrawable_kLastFlag
    kGeometry = _ODA_Kernel_Py3.OdGiDrawable_kGeometry
    kDistantLight = _ODA_Kernel_Py3.OdGiDrawable_kDistantLight
    kPointLight = _ODA_Kernel_Py3.OdGiDrawable_kPointLight
    kSpotLight = _ODA_Kernel_Py3.OdGiDrawable_kSpotLight
    kAmbientLight = _ODA_Kernel_Py3.OdGiDrawable_kAmbientLight
    kSolidBackground = _ODA_Kernel_Py3.OdGiDrawable_kSolidBackground
    kGradientBackground = _ODA_Kernel_Py3.OdGiDrawable_kGradientBackground
    kImageBackground = _ODA_Kernel_Py3.OdGiDrawable_kImageBackground
    kGroundPlaneBackground = _ODA_Kernel_Py3.OdGiDrawable_kGroundPlaneBackground
    kViewport = _ODA_Kernel_Py3.OdGiDrawable_kViewport
    kWebLight = _ODA_Kernel_Py3.OdGiDrawable_kWebLight
    kSkyBackground = _ODA_Kernel_Py3.OdGiDrawable_kSkyBackground
    kImageBasedLightingBackground = _ODA_Kernel_Py3.OdGiDrawable_kImageBasedLightingBackground

    def drawableType(self, *args) -> "OdGiDrawable::DrawableType":
        return _ODA_Kernel_Py3.OdGiDrawable_drawableType(self, *args)

    def setAttributes(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiDrawable_setAttributes(self, *args)

    def worldDraw(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDrawable_worldDraw(self, *args)

    def viewportDraw(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDrawable_viewportDraw(self, *args)

    def isPersistent(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDrawable_isPersistent(self, *args)

    def id(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiDrawable_id(self, *args)

    def setGsNode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDrawable_setGsNode(self, *args)

    def gsNode(self, *args) -> "OdGsCache *":
        return _ODA_Kernel_Py3.OdGiDrawable_gsNode(self, *args)

    def viewportDrawLogicalFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiDrawable_viewportDrawLogicalFlags(self, *args)

    def getGeomExtents(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdGiDrawable_getGeomExtents(self, *args)

    def regenSupportFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiDrawable_regenSupportFlags(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDrawable

# Register OdGiDrawable in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDrawable_swigregister(OdGiDrawable)

def OdGiDrawable_cast(*args) -> "OdSmartPtr< OdGiDrawable >":
    return _ODA_Kernel_Py3.OdGiDrawable_cast(*args)

def OdGiDrawable_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiDrawable_desc(*args)

def OdGiDrawable_createObject(*args) -> "OdSmartPtr< OdGiDrawable >":
    return _ODA_Kernel_Py3.OdGiDrawable_createObject(*args)

class OdGiDrawableOverrule(OdRxOverrule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiDrawableOverrule >":
        return _ODA_Kernel_Py3.OdGiDrawableOverrule_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiDrawableOverrule_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiDrawableOverrule_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiDrawableOverrule_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiDrawableOverrule >":
        return _ODA_Kernel_Py3.OdGiDrawableOverrule_createObject(*args)

    def setAttributes(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiDrawableOverrule_setAttributes(self, *args)

    def worldDraw(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDrawableOverrule_worldDraw(self, *args)

    def viewportDraw(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDrawableOverrule_viewportDraw(self, *args)

    def viewportDrawLogicalFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiDrawableOverrule_viewportDrawLogicalFlags(self, *args)

    def regenSupportFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiDrawableOverrule_regenSupportFlags(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDrawableOverrule

# Register OdGiDrawableOverrule in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDrawableOverrule_swigregister(OdGiDrawableOverrule)

def OdGiDrawableOverrule_cast(*args) -> "OdSmartPtr< OdGiDrawableOverrule >":
    return _ODA_Kernel_Py3.OdGiDrawableOverrule_cast(*args)

def OdGiDrawableOverrule_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiDrawableOverrule_desc(*args)

def OdGiDrawableOverrule_createObject(*args) -> "OdSmartPtr< OdGiDrawableOverrule >":
    return _ODA_Kernel_Py3.OdGiDrawableOverrule_createObject(*args)

class OdGeMatrix3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeMatrix3d_swiginit(self, _ODA_Kernel_Py3.new_OdGeMatrix3d(*args))

    def setToIdentity(self, *args) -> "OdGeMatrix3d &":
        return _ODA_Kernel_Py3.OdGeMatrix3d_setToIdentity(self, *args)

    def validateZero(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeMatrix3d_validateZero(self, *args)

    def __mul__(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGeMatrix3d___mul__(self, *args)

    def __imul__(self, *args) -> "OdGeMatrix3d &":
        return _ODA_Kernel_Py3.OdGeMatrix3d___imul__(self, *args)

    def preMultBy(self, *args) -> "OdGeMatrix3d &":
        return _ODA_Kernel_Py3.OdGeMatrix3d_preMultBy(self, *args)

    def postMultBy(self, *args) -> "OdGeMatrix3d &":
        return _ODA_Kernel_Py3.OdGeMatrix3d_postMultBy(self, *args)

    def setToProduct(self, *args) -> "OdGeMatrix3d &":
        return _ODA_Kernel_Py3.OdGeMatrix3d_setToProduct(self, *args)

    def invert(self, *args) -> "OdGeMatrix3d &":
        return _ODA_Kernel_Py3.OdGeMatrix3d_invert(self, *args)

    def inverse(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeMatrix3d_inverse(self, *args)

    def isSingular(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeMatrix3d_isSingular(self, *args)

    def transposeIt(self, *args) -> "OdGeMatrix3d &":
        return _ODA_Kernel_Py3.OdGeMatrix3d_transposeIt(self, *args)

    def transpose(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGeMatrix3d_transpose(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeMatrix3d___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeMatrix3d___ne__(self, *args)

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeMatrix3d_isEqualTo(self, *args)

    def isUniScaledOrtho(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeMatrix3d_isUniScaledOrtho(self, *args)

    def isScaledOrtho(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeMatrix3d_isScaledOrtho(self, *args)

    def isPerspective(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeMatrix3d_isPerspective(self, *args)

    def det(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeMatrix3d_det(self, *args)

    def setTranslation(self, *args) -> "OdGeMatrix3d &":
        return _ODA_Kernel_Py3.OdGeMatrix3d_setTranslation(self, *args)

    def setCoordSystem(self, *args) -> "OdGeMatrix3d &":
        return _ODA_Kernel_Py3.OdGeMatrix3d_setCoordSystem(self, *args)

    def getCoordSystem(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeMatrix3d_getCoordSystem(self, *args)

    def getCsOrigin(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeMatrix3d_getCsOrigin(self, *args)

    def getCsXAxis(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeMatrix3d_getCsXAxis(self, *args)

    def getCsYAxis(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeMatrix3d_getCsYAxis(self, *args)

    def getCsZAxis(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeMatrix3d_getCsZAxis(self, *args)

    def setToTranslation(self, *args) -> "OdGeMatrix3d &":
        return _ODA_Kernel_Py3.OdGeMatrix3d_setToTranslation(self, *args)

    def setToRotation(self, *args) -> "OdGeMatrix3d &":
        return _ODA_Kernel_Py3.OdGeMatrix3d_setToRotation(self, *args)

    def setToScaling(self, *args) -> "OdGeMatrix3d &":
        return _ODA_Kernel_Py3.OdGeMatrix3d_setToScaling(self, *args)

    def setToMirroring(self, *args) -> "OdGeMatrix3d &":
        return _ODA_Kernel_Py3.OdGeMatrix3d_setToMirroring(self, *args)

    def setToProjection(self, *args) -> "OdGeMatrix3d &":
        return _ODA_Kernel_Py3.OdGeMatrix3d_setToProjection(self, *args)

    def setToAlignCoordSys(self, *args) -> "OdGeMatrix3d &":
        return _ODA_Kernel_Py3.OdGeMatrix3d_setToAlignCoordSys(self, *args)

    def setToWorldToPlane(self, *args) -> "OdGeMatrix3d &":
        return _ODA_Kernel_Py3.OdGeMatrix3d_setToWorldToPlane(self, *args)

    def setToPlaneToWorld(self, *args) -> "OdGeMatrix3d &":
        return _ODA_Kernel_Py3.OdGeMatrix3d_setToPlaneToWorld(self, *args)

    def translation(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeMatrix3d_translation(self, *args)

    @staticmethod
    def rotation(*args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGeMatrix3d_rotation(*args)

    @staticmethod
    def scaling(*args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGeMatrix3d_scaling(*args)

    @staticmethod
    def mirroring(*args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGeMatrix3d_mirroring(*args)

    @staticmethod
    def projection(*args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGeMatrix3d_projection(*args)

    @staticmethod
    def alignCoordSys(*args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGeMatrix3d_alignCoordSys(*args)

    @staticmethod
    def worldToPlane(*args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGeMatrix3d_worldToPlane(*args)

    @staticmethod
    def planeToWorld(*args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGeMatrix3d_planeToWorld(*args)

    def scale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeMatrix3d_scale(self, *args)

    def norm(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeMatrix3d_norm(self, *args)

    def convertToLocal(self, *args) -> "OdGeMatrix2d":
        return _ODA_Kernel_Py3.OdGeMatrix3d_convertToLocal(self, *args)

    def __call__(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeMatrix3d___call__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeMatrix3d

# Register OdGeMatrix3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeMatrix3d_swigregister(OdGeMatrix3d)
OdGeMatrix3d.kIdentity = _ODA_Kernel_Py3.cvar.OdGeMatrix3d_kIdentity

def OdGeMatrix3d_rotation(*args) -> "OdGeMatrix3d":
    return _ODA_Kernel_Py3.OdGeMatrix3d_rotation(*args)

def OdGeMatrix3d_scaling(*args) -> "OdGeMatrix3d":
    return _ODA_Kernel_Py3.OdGeMatrix3d_scaling(*args)

def OdGeMatrix3d_mirroring(*args) -> "OdGeMatrix3d":
    return _ODA_Kernel_Py3.OdGeMatrix3d_mirroring(*args)

def OdGeMatrix3d_projection(*args) -> "OdGeMatrix3d":
    return _ODA_Kernel_Py3.OdGeMatrix3d_projection(*args)

def OdGeMatrix3d_alignCoordSys(*args) -> "OdGeMatrix3d":
    return _ODA_Kernel_Py3.OdGeMatrix3d_alignCoordSys(*args)

def OdGeMatrix3d_worldToPlane(*args) -> "OdGeMatrix3d":
    return _ODA_Kernel_Py3.OdGeMatrix3d_worldToPlane(*args)

def OdGeMatrix3d_planeToWorld(*args) -> "OdGeMatrix3d":
    return _ODA_Kernel_Py3.OdGeMatrix3d_planeToWorld(*args)

class OdGiMaterialTraits(OdGiDrawableTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiMaterialTraits >":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiMaterialTraits >":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_createObject(*args)
    kBlinnShader = _ODA_Kernel_Py3.OdGiMaterialTraits_kBlinnShader
    kMetalShader = _ODA_Kernel_Py3.OdGiMaterialTraits_kMetalShader
    kNone = _ODA_Kernel_Py3.OdGiMaterialTraits_kNone
    kUseDiffuse = _ODA_Kernel_Py3.OdGiMaterialTraits_kUseDiffuse
    kUseSpecular = _ODA_Kernel_Py3.OdGiMaterialTraits_kUseSpecular
    kUseReflection = _ODA_Kernel_Py3.OdGiMaterialTraits_kUseReflection
    kUseOpacity = _ODA_Kernel_Py3.OdGiMaterialTraits_kUseOpacity
    kUseBump = _ODA_Kernel_Py3.OdGiMaterialTraits_kUseBump
    kUseRefraction = _ODA_Kernel_Py3.OdGiMaterialTraits_kUseRefraction
    kUseNormalMap = _ODA_Kernel_Py3.OdGiMaterialTraits_kUseNormalMap
    kUseEmission = _ODA_Kernel_Py3.OdGiMaterialTraits_kUseEmission
    kUseTint = _ODA_Kernel_Py3.OdGiMaterialTraits_kUseTint
    kUseAll = _ODA_Kernel_Py3.OdGiMaterialTraits_kUseAll
    kUseAllInternal = _ODA_Kernel_Py3.OdGiMaterialTraits_kUseAllInternal
    kRealistic = _ODA_Kernel_Py3.OdGiMaterialTraits_kRealistic
    kAdvanced = _ODA_Kernel_Py3.OdGiMaterialTraits_kAdvanced
    kSelfIllumination = _ODA_Kernel_Py3.OdGiMaterialTraits_kSelfIllumination
    kLuminance = _ODA_Kernel_Py3.OdGiMaterialTraits_kLuminance
    kEmissionColor = _ODA_Kernel_Py3.OdGiMaterialTraits_kEmissionColor
    kTangentSpace = _ODA_Kernel_Py3.OdGiMaterialTraits_kTangentSpace
    kGlobalIlluminationNone = _ODA_Kernel_Py3.OdGiMaterialTraits_kGlobalIlluminationNone
    kGlobalIlluminationCast = _ODA_Kernel_Py3.OdGiMaterialTraits_kGlobalIlluminationCast
    kGlobalIlluminationReceive = _ODA_Kernel_Py3.OdGiMaterialTraits_kGlobalIlluminationReceive
    kGlobalIlluminationCastAndReceive = _ODA_Kernel_Py3.OdGiMaterialTraits_kGlobalIlluminationCastAndReceive
    kFinalGatherNone = _ODA_Kernel_Py3.OdGiMaterialTraits_kFinalGatherNone
    kFinalGatherCast = _ODA_Kernel_Py3.OdGiMaterialTraits_kFinalGatherCast
    kFinalGatherReceive = _ODA_Kernel_Py3.OdGiMaterialTraits_kFinalGatherReceive
    kFinalGatherCastAndReceive = _ODA_Kernel_Py3.OdGiMaterialTraits_kFinalGatherCastAndReceive
    kDiffuseRealisticColor = _ODA_Kernel_Py3.OdGiMaterialTraits_kDiffuseRealisticColor
    kDiffuseShadingColor = _ODA_Kernel_Py3.OdGiMaterialTraits_kDiffuseShadingColor
    kDiffuseStyleDependent = _ODA_Kernel_Py3.OdGiMaterialTraits_kDiffuseStyleDependent

    def ambient(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_ambient(self, *args)

    def diffuse(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_diffuse(self, *args)

    def specular(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_specular(self, *args)

    def reflection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_reflection(self, *args)

    def opacity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_opacity(self, *args)

    def bump(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_bump(self, *args)

    def refraction(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_refraction(self, *args)

    def translucence(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_translucence(self, *args)

    def selfIllumination(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_selfIllumination(self, *args)

    def reflectivity(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_reflectivity(self, *args)

    def illuminationModel(self, *args) -> "OdGiMaterialTraits::IlluminationModel":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_illuminationModel(self, *args)

    def channelFlags(self, *args) -> "OdGiMaterialTraits::ChannelFlags":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_channelFlags(self, *args)

    def mode(self, *args) -> "OdGiMaterialTraits::Mode":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_mode(self, *args)

    def setAmbient(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setAmbient(self, *args)

    def setDiffuse(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setDiffuse(self, *args)

    def setSpecular(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setSpecular(self, *args)

    def setReflection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setReflection(self, *args)

    def setOpacity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setOpacity(self, *args)

    def setBump(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setBump(self, *args)

    def setRefraction(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setRefraction(self, *args)

    def setTranslucence(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setTranslucence(self, *args)

    def setSelfIllumination(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setSelfIllumination(self, *args)

    def setReflectivity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setReflectivity(self, *args)

    def setIlluminationModel(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setIlluminationModel(self, *args)

    def setChannelFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setChannelFlags(self, *args)

    def setMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setMode(self, *args)

    def setColorBleedScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setColorBleedScale(self, *args)

    def colorBleedScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_colorBleedScale(self, *args)

    def setIndirectBumpScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setIndirectBumpScale(self, *args)

    def indirectBumpScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_indirectBumpScale(self, *args)

    def setReflectanceScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setReflectanceScale(self, *args)

    def reflectanceScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_reflectanceScale(self, *args)

    def setTransmittanceScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setTransmittanceScale(self, *args)

    def transmittanceScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_transmittanceScale(self, *args)

    def setTwoSided(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setTwoSided(self, *args)

    def twoSided(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_twoSided(self, *args)

    def setLuminanceMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setLuminanceMode(self, *args)

    def luminanceMode(self, *args) -> "OdGiMaterialTraits::LuminanceMode":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_luminanceMode(self, *args)

    def setLuminance(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setLuminance(self, *args)

    def luminance(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_luminance(self, *args)

    def setNormalMap(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setNormalMap(self, *args)

    def normalMap(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_normalMap(self, *args)

    def setGlobalIllumination(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setGlobalIllumination(self, *args)

    def globalIllumination(self, *args) -> "OdGiMaterialTraits::GlobalIlluminationMode":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_globalIllumination(self, *args)

    def setFinalGather(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setFinalGather(self, *args)

    def finalGather(self, *args) -> "OdGiMaterialTraits::FinalGatherMode":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_finalGather(self, *args)

    def setEmission(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setEmission(self, *args)

    def emission(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_emission(self, *args)

    def setTint(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setTint(self, *args)

    def tint(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_tint(self, *args)

    def setShadingAmbient(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setShadingAmbient(self, *args)

    def shadingAmbient(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_shadingAmbient(self, *args)

    def setShadingDiffuse(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setShadingDiffuse(self, *args)

    def shadingDiffuse(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_shadingDiffuse(self, *args)

    def setShadingSpecular(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setShadingSpecular(self, *args)

    def shadingSpecular(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_shadingSpecular(self, *args)

    def setShadingOpacity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setShadingOpacity(self, *args)

    def shadingOpacity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_shadingOpacity(self, *args)

    def setDiffuseColorMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setDiffuseColorMode(self, *args)

    def diffuseColorMode(self, *args) -> "OdGiMaterialTraits::DiffuseColorMode":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_diffuseColorMode(self, *args)

    def setShadowsOpacityEffect(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setShadowsOpacityEffect(self, *args)

    def shadowsOpacityEffect(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_shadowsOpacityEffect(self, *args)

    def setSpecularHighlightingOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_setSpecularHighlightingOverride(self, *args)

    def specularHighlightingOverride(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraits_specularHighlightingOverride(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMaterialTraits

# Register OdGiMaterialTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMaterialTraits_swigregister(OdGiMaterialTraits)

def OdGiMaterialTraits_cast(*args) -> "OdSmartPtr< OdGiMaterialTraits >":
    return _ODA_Kernel_Py3.OdGiMaterialTraits_cast(*args)

def OdGiMaterialTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiMaterialTraits_desc(*args)

def OdGiMaterialTraits_createObject(*args) -> "OdSmartPtr< OdGiMaterialTraits >":
    return _ODA_Kernel_Py3.OdGiMaterialTraits_createObject(*args)

class OdGiMaterialColor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kInherit = _ODA_Kernel_Py3.OdGiMaterialColor_kInherit
    kOverride = _ODA_Kernel_Py3.OdGiMaterialColor_kOverride

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiMaterialColor_swiginit(self, _ODA_Kernel_Py3.new_OdGiMaterialColor(*args))

    def setMethod(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialColor_setMethod(self, *args)

    def setFactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialColor_setFactor(self, *args)

    def method(self, *args) -> "OdGiMaterialColor::Method":
        return _ODA_Kernel_Py3.OdGiMaterialColor_method(self, *args)

    def factor(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialColor_factor(self, *args)

    def color(self, *args) -> "OdCmEntityColor const &":
        return _ODA_Kernel_Py3.OdGiMaterialColor_color(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialColor___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialColor___ne__(self, *args)

    def setColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialColor_setColor(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMaterialColor

# Register OdGiMaterialColor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMaterialColor_swigregister(OdGiMaterialColor)
OdGiMaterialColor.kNull = _ODA_Kernel_Py3.cvar.OdGiMaterialColor_kNull

class OdGiMaterialTexture(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiMaterialTexture >":
        return _ODA_Kernel_Py3.OdGiMaterialTexture_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMaterialTexture_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMaterialTexture_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiMaterialTexture_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiMaterialTexture >":
        return _ODA_Kernel_Py3.OdGiMaterialTexture_createObject(*args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialTexture___eq__(self, *args)

# Register OdGiMaterialTexture in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMaterialTexture_swigregister(OdGiMaterialTexture)

def OdGiMaterialTexture_cast(*args) -> "OdSmartPtr< OdGiMaterialTexture >":
    return _ODA_Kernel_Py3.OdGiMaterialTexture_cast(*args)

def OdGiMaterialTexture_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiMaterialTexture_desc(*args)

def OdGiMaterialTexture_createObject(*args) -> "OdSmartPtr< OdGiMaterialTexture >":
    return _ODA_Kernel_Py3.OdGiMaterialTexture_createObject(*args)

class OdGiImageTexture(OdGiMaterialTexture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiImageTexture >":
        return _ODA_Kernel_Py3.OdGiImageTexture_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiImageTexture_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiImageTexture_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiImageTexture_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiImageTexture >":
        return _ODA_Kernel_Py3.OdGiImageTexture_createObject(*args)

# Register OdGiImageTexture in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiImageTexture_swigregister(OdGiImageTexture)

def OdGiImageTexture_cast(*args) -> "OdSmartPtr< OdGiImageTexture >":
    return _ODA_Kernel_Py3.OdGiImageTexture_cast(*args)

def OdGiImageTexture_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiImageTexture_desc(*args)

def OdGiImageTexture_createObject(*args) -> "OdSmartPtr< OdGiImageTexture >":
    return _ODA_Kernel_Py3.OdGiImageTexture_createObject(*args)

class OdGiImageFileTexture(OdGiImageTexture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiImageFileTexture >":
        return _ODA_Kernel_Py3.OdGiImageFileTexture_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiImageFileTexture_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiImageFileTexture_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiImageFileTexture_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiImageFileTexture >":
        return _ODA_Kernel_Py3.OdGiImageFileTexture_createObject(*args)

    def setSourceFileName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageFileTexture_setSourceFileName(self, *args)

    def sourceFileName(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdGiImageFileTexture_sourceFileName(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiImageFileTexture___eq__(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageFileTexture_copyFrom(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiImageFileTexture

# Register OdGiImageFileTexture in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiImageFileTexture_swigregister(OdGiImageFileTexture)

def OdGiImageFileTexture_cast(*args) -> "OdSmartPtr< OdGiImageFileTexture >":
    return _ODA_Kernel_Py3.OdGiImageFileTexture_cast(*args)

def OdGiImageFileTexture_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiImageFileTexture_desc(*args)

def OdGiImageFileTexture_createObject(*args) -> "OdSmartPtr< OdGiImageFileTexture >":
    return _ODA_Kernel_Py3.OdGiImageFileTexture_createObject(*args)

class OdGiRasterImageTexture(OdGiImageTexture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiRasterImageTexture >":
        return _ODA_Kernel_Py3.OdGiRasterImageTexture_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRasterImageTexture_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRasterImageTexture_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiRasterImageTexture_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiRasterImageTexture >":
        return _ODA_Kernel_Py3.OdGiRasterImageTexture_createObject(*args)

    def setRasterImage(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageTexture_setRasterImage(self, *args)

    def rasterImage(self, *args) -> "OdGiRasterImage const *":
        return _ODA_Kernel_Py3.OdGiRasterImageTexture_rasterImage(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRasterImageTexture___eq__(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageTexture_copyFrom(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRasterImageTexture

# Register OdGiRasterImageTexture in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRasterImageTexture_swigregister(OdGiRasterImageTexture)

def OdGiRasterImageTexture_cast(*args) -> "OdSmartPtr< OdGiRasterImageTexture >":
    return _ODA_Kernel_Py3.OdGiRasterImageTexture_cast(*args)

def OdGiRasterImageTexture_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiRasterImageTexture_desc(*args)

def OdGiRasterImageTexture_createObject(*args) -> "OdSmartPtr< OdGiRasterImageTexture >":
    return _ODA_Kernel_Py3.OdGiRasterImageTexture_createObject(*args)

class OdGiRasterImageFileTexture(OdGiImageFileTexture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiRasterImageFileTexture >":
        return _ODA_Kernel_Py3.OdGiRasterImageFileTexture_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRasterImageFileTexture_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRasterImageFileTexture_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiRasterImageFileTexture_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiRasterImageFileTexture >":
        return _ODA_Kernel_Py3.OdGiRasterImageFileTexture_createObject(*args)

    def setRasterImage(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageFileTexture_setRasterImage(self, *args)

    def rasterImage(self, *args) -> "OdGiRasterImage const *":
        return _ODA_Kernel_Py3.OdGiRasterImageFileTexture_rasterImage(self, *args)

    def setRasterImageTexture(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageFileTexture_setRasterImageTexture(self, *args)

    def rasterImageTexture(self, *args) -> "OdGiRasterImageTexture const *":
        return _ODA_Kernel_Py3.OdGiRasterImageFileTexture_rasterImageTexture(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRasterImageFileTexture___eq__(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageFileTexture_copyFrom(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRasterImageFileTexture

# Register OdGiRasterImageFileTexture in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRasterImageFileTexture_swigregister(OdGiRasterImageFileTexture)

def OdGiRasterImageFileTexture_cast(*args) -> "OdSmartPtr< OdGiRasterImageFileTexture >":
    return _ODA_Kernel_Py3.OdGiRasterImageFileTexture_cast(*args)

def OdGiRasterImageFileTexture_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiRasterImageFileTexture_desc(*args)

def OdGiRasterImageFileTexture_createObject(*args) -> "OdSmartPtr< OdGiRasterImageFileTexture >":
    return _ODA_Kernel_Py3.OdGiRasterImageFileTexture_createObject(*args)

class OdGiProceduralTexture(OdGiMaterialTexture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiProceduralTexture >":
        return _ODA_Kernel_Py3.OdGiProceduralTexture_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiProceduralTexture_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiProceduralTexture_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiProceduralTexture_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiProceduralTexture >":
        return _ODA_Kernel_Py3.OdGiProceduralTexture_createObject(*args)
    kWood = _ODA_Kernel_Py3.OdGiProceduralTexture_kWood
    kMarble = _ODA_Kernel_Py3.OdGiProceduralTexture_kMarble
    kGeneric = _ODA_Kernel_Py3.OdGiProceduralTexture_kGeneric

    def type(self, *args) -> "OdGiProceduralTexture::Type":
        return _ODA_Kernel_Py3.OdGiProceduralTexture_type(self, *args)

# Register OdGiProceduralTexture in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiProceduralTexture_swigregister(OdGiProceduralTexture)

def OdGiProceduralTexture_cast(*args) -> "OdSmartPtr< OdGiProceduralTexture >":
    return _ODA_Kernel_Py3.OdGiProceduralTexture_cast(*args)

def OdGiProceduralTexture_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiProceduralTexture_desc(*args)

def OdGiProceduralTexture_createObject(*args) -> "OdSmartPtr< OdGiProceduralTexture >":
    return _ODA_Kernel_Py3.OdGiProceduralTexture_createObject(*args)

class OdGiWoodTexture(OdGiProceduralTexture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiWoodTexture >":
        return _ODA_Kernel_Py3.OdGiWoodTexture_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiWoodTexture_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiWoodTexture_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiWoodTexture_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiWoodTexture >":
        return _ODA_Kernel_Py3.OdGiWoodTexture_createObject(*args)

    def type(self, *args) -> "OdGiProceduralTexture::Type":
        return _ODA_Kernel_Py3.OdGiWoodTexture_type(self, *args)

    def setColor1(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWoodTexture_setColor1(self, *args)

    def color1(self, *args) -> "OdGiMaterialColor const &":
        return _ODA_Kernel_Py3.OdGiWoodTexture_color1(self, *args)

    def setColor2(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWoodTexture_setColor2(self, *args)

    def color2(self, *args) -> "OdGiMaterialColor const &":
        return _ODA_Kernel_Py3.OdGiWoodTexture_color2(self, *args)

    def setRadialNoise(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWoodTexture_setRadialNoise(self, *args)

    def radialNoise(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiWoodTexture_radialNoise(self, *args)

    def setAxialNoise(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWoodTexture_setAxialNoise(self, *args)

    def axialNoise(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiWoodTexture_axialNoise(self, *args)

    def setGrainThickness(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWoodTexture_setGrainThickness(self, *args)

    def grainThickness(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiWoodTexture_grainThickness(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiWoodTexture___eq__(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWoodTexture_copyFrom(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiWoodTexture

# Register OdGiWoodTexture in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiWoodTexture_swigregister(OdGiWoodTexture)

def OdGiWoodTexture_cast(*args) -> "OdSmartPtr< OdGiWoodTexture >":
    return _ODA_Kernel_Py3.OdGiWoodTexture_cast(*args)

def OdGiWoodTexture_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiWoodTexture_desc(*args)

def OdGiWoodTexture_createObject(*args) -> "OdSmartPtr< OdGiWoodTexture >":
    return _ODA_Kernel_Py3.OdGiWoodTexture_createObject(*args)

class OdGiMarbleTexture(OdGiProceduralTexture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiMarbleTexture >":
        return _ODA_Kernel_Py3.OdGiMarbleTexture_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMarbleTexture_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMarbleTexture_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiMarbleTexture_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiMarbleTexture >":
        return _ODA_Kernel_Py3.OdGiMarbleTexture_createObject(*args)

    def type(self, *args) -> "OdGiProceduralTexture::Type":
        return _ODA_Kernel_Py3.OdGiMarbleTexture_type(self, *args)

    def setStoneColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMarbleTexture_setStoneColor(self, *args)

    def stoneColor(self, *args) -> "OdGiMaterialColor const &":
        return _ODA_Kernel_Py3.OdGiMarbleTexture_stoneColor(self, *args)

    def setVeinColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMarbleTexture_setVeinColor(self, *args)

    def veinColor(self, *args) -> "OdGiMaterialColor const &":
        return _ODA_Kernel_Py3.OdGiMarbleTexture_veinColor(self, *args)

    def setVeinSpacing(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMarbleTexture_setVeinSpacing(self, *args)

    def veinSpacing(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMarbleTexture_veinSpacing(self, *args)

    def setVeinWidth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMarbleTexture_setVeinWidth(self, *args)

    def veinWidth(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMarbleTexture_veinWidth(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMarbleTexture___eq__(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMarbleTexture_copyFrom(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMarbleTexture

# Register OdGiMarbleTexture in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMarbleTexture_swigregister(OdGiMarbleTexture)

def OdGiMarbleTexture_cast(*args) -> "OdSmartPtr< OdGiMarbleTexture >":
    return _ODA_Kernel_Py3.OdGiMarbleTexture_cast(*args)

def OdGiMarbleTexture_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiMarbleTexture_desc(*args)

def OdGiMarbleTexture_createObject(*args) -> "OdSmartPtr< OdGiMarbleTexture >":
    return _ODA_Kernel_Py3.OdGiMarbleTexture_createObject(*args)

class OdGiGenericTexture(OdGiProceduralTexture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiGenericTexture >":
        return _ODA_Kernel_Py3.OdGiGenericTexture_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiGenericTexture_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiGenericTexture_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiGenericTexture_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiGenericTexture >":
        return _ODA_Kernel_Py3.OdGiGenericTexture_createObject(*args)

    def type(self, *args) -> "OdGiProceduralTexture::Type":
        return _ODA_Kernel_Py3.OdGiGenericTexture_type(self, *args)

    def setDefinition(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGenericTexture_setDefinition(self, *args)

    def definition(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGenericTexture_definition(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiGenericTexture___eq__(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGenericTexture_copyFrom(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiGenericTexture

# Register OdGiGenericTexture in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiGenericTexture_swigregister(OdGiGenericTexture)

def OdGiGenericTexture_cast(*args) -> "OdSmartPtr< OdGiGenericTexture >":
    return _ODA_Kernel_Py3.OdGiGenericTexture_cast(*args)

def OdGiGenericTexture_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiGenericTexture_desc(*args)

def OdGiGenericTexture_createObject(*args) -> "OdSmartPtr< OdGiGenericTexture >":
    return _ODA_Kernel_Py3.OdGiGenericTexture_createObject(*args)

class OdGiMapper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kInheritProjection = _ODA_Kernel_Py3.OdGiMapper_kInheritProjection
    kPlanar = _ODA_Kernel_Py3.OdGiMapper_kPlanar
    kBox = _ODA_Kernel_Py3.OdGiMapper_kBox
    kCylinder = _ODA_Kernel_Py3.OdGiMapper_kCylinder
    kSphere = _ODA_Kernel_Py3.OdGiMapper_kSphere
    kDgnParametric = _ODA_Kernel_Py3.OdGiMapper_kDgnParametric
    kDgnPlanar = _ODA_Kernel_Py3.OdGiMapper_kDgnPlanar
    kDgnCylinder = _ODA_Kernel_Py3.OdGiMapper_kDgnCylinder
    kDgnCylinderCapped = _ODA_Kernel_Py3.OdGiMapper_kDgnCylinderCapped
    kDgnSphere = _ODA_Kernel_Py3.OdGiMapper_kDgnSphere
    kInheritTiling = _ODA_Kernel_Py3.OdGiMapper_kInheritTiling
    kTile = _ODA_Kernel_Py3.OdGiMapper_kTile
    kCrop = _ODA_Kernel_Py3.OdGiMapper_kCrop
    kClamp = _ODA_Kernel_Py3.OdGiMapper_kClamp
    kMirror = _ODA_Kernel_Py3.OdGiMapper_kMirror
    kInheritAutoTransform = _ODA_Kernel_Py3.OdGiMapper_kInheritAutoTransform
    kNone = _ODA_Kernel_Py3.OdGiMapper_kNone
    kObject = _ODA_Kernel_Py3.OdGiMapper_kObject
    kModel = _ODA_Kernel_Py3.OdGiMapper_kModel

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiMapper_swiginit(self, _ODA_Kernel_Py3.new_OdGiMapper(*args))

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMapper___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMapper___ne__(self, *args)

    def setProjection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapper_setProjection(self, *args)

    def setUTiling(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapper_setUTiling(self, *args)

    def setVTiling(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapper_setVTiling(self, *args)

    def setAutoTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapper_setAutoTransform(self, *args)

    def projection(self, *args) -> "OdGiMapper::Projection":
        return _ODA_Kernel_Py3.OdGiMapper_projection(self, *args)

    def uTiling(self, *args) -> "OdGiMapper::Tiling":
        return _ODA_Kernel_Py3.OdGiMapper_uTiling(self, *args)

    def vTiling(self, *args) -> "OdGiMapper::Tiling":
        return _ODA_Kernel_Py3.OdGiMapper_vTiling(self, *args)

    def autoTransform(self, *args) -> "OdGiMapper::AutoTransform":
        return _ODA_Kernel_Py3.OdGiMapper_autoTransform(self, *args)

    def transform(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdGiMapper_transform(self, *args)

    def setTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapper_setTransform(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMapper

# Register OdGiMapper in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMapper_swigregister(OdGiMapper)
OdGiMapper.kIdentity = _ODA_Kernel_Py3.cvar.OdGiMapper_kIdentity

class OdGiMaterialMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kScene = _ODA_Kernel_Py3.OdGiMaterialMap_kScene
    kFile = _ODA_Kernel_Py3.OdGiMaterialMap_kFile
    kProcedural = _ODA_Kernel_Py3.OdGiMaterialMap_kProcedural

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiMaterialMap_swiginit(self, _ODA_Kernel_Py3.new_OdGiMaterialMap(*args))

    def setSource(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialMap_setSource(self, *args)

    def setSourceFileName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialMap_setSourceFileName(self, *args)

    def setBlendFactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialMap_setBlendFactor(self, *args)

    def setTexture(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialMap_setTexture(self, *args)

    def source(self, *args) -> "OdGiMaterialMap::Source":
        return _ODA_Kernel_Py3.OdGiMaterialMap_source(self, *args)

    def sourceFileName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdGiMaterialMap_sourceFileName(self, *args)

    def blendFactor(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialMap_blendFactor(self, *args)

    def mapper(self, *args) -> "OdGiMapper const &":
        return _ODA_Kernel_Py3.OdGiMaterialMap_mapper(self, *args)

    def setMapper(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialMap_setMapper(self, *args)

    def texture(self, *args) -> "OdGiMaterialTexturePtr const":
        return _ODA_Kernel_Py3.OdGiMaterialMap_texture(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialMap___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialMap___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMaterialMap

# Register OdGiMaterialMap in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMaterialMap_swigregister(OdGiMaterialMap)
OdGiMaterialMap.kNull = _ODA_Kernel_Py3.cvar.OdGiMaterialMap_kNull

class OdGiRasterImage(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiRasterImage >":
        return _ODA_Kernel_Py3.OdGiRasterImage_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRasterImage_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRasterImage_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiRasterImage_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiRasterImage >":
        return _ODA_Kernel_Py3.OdGiRasterImage_createObject(*args)
    kNone = _ODA_Kernel_Py3.OdGiRasterImage_kNone
    kMillimeter = _ODA_Kernel_Py3.OdGiRasterImage_kMillimeter
    kCentimeter = _ODA_Kernel_Py3.OdGiRasterImage_kCentimeter
    kMeter = _ODA_Kernel_Py3.OdGiRasterImage_kMeter
    kKilometer = _ODA_Kernel_Py3.OdGiRasterImage_kKilometer
    kInch = _ODA_Kernel_Py3.OdGiRasterImage_kInch
    kFoot = _ODA_Kernel_Py3.OdGiRasterImage_kFoot
    kYard = _ODA_Kernel_Py3.OdGiRasterImage_kYard
    kMile = _ODA_Kernel_Py3.OdGiRasterImage_kMile
    kMicroinches = _ODA_Kernel_Py3.OdGiRasterImage_kMicroinches
    kMils = _ODA_Kernel_Py3.OdGiRasterImage_kMils
    kAngstroms = _ODA_Kernel_Py3.OdGiRasterImage_kAngstroms
    kNanometers = _ODA_Kernel_Py3.OdGiRasterImage_kNanometers
    kMicrons = _ODA_Kernel_Py3.OdGiRasterImage_kMicrons
    kDecimeters = _ODA_Kernel_Py3.OdGiRasterImage_kDecimeters
    kDekameters = _ODA_Kernel_Py3.OdGiRasterImage_kDekameters
    kHectometers = _ODA_Kernel_Py3.OdGiRasterImage_kHectometers
    kGigameters = _ODA_Kernel_Py3.OdGiRasterImage_kGigameters
    kAstronomical = _ODA_Kernel_Py3.OdGiRasterImage_kAstronomical
    kLightYears = _ODA_Kernel_Py3.OdGiRasterImage_kLightYears
    kParsecs = _ODA_Kernel_Py3.OdGiRasterImage_kParsecs

    @staticmethod
    def millimetersInUnit(*args) -> "double":
        return _ODA_Kernel_Py3.OdGiRasterImage_millimetersInUnit(*args)
    kUndefinedSource = _ODA_Kernel_Py3.OdGiRasterImage_kUndefinedSource
    kFromDwg = _ODA_Kernel_Py3.OdGiRasterImage_kFromDwg
    kFromOleObject = _ODA_Kernel_Py3.OdGiRasterImage_kFromOleObject
    kFromRender = _ODA_Kernel_Py3.OdGiRasterImage_kFromRender
    kFromUnderlay = _ODA_Kernel_Py3.OdGiRasterImage_kFromUnderlay
    kFromImageBGRA32 = _ODA_Kernel_Py3.OdGiRasterImage_kFromImageBGRA32
    kFromPdfUnderlay = _ODA_Kernel_Py3.OdGiRasterImage_kFromPdfUnderlay
    kFromFile = _ODA_Kernel_Py3.OdGiRasterImage_kFromFile
    kTransparencyDef = _ODA_Kernel_Py3.OdGiRasterImage_kTransparencyDef
    kTransparencyOff = _ODA_Kernel_Py3.OdGiRasterImage_kTransparencyOff
    kTransparency1Bit = _ODA_Kernel_Py3.OdGiRasterImage_kTransparency1Bit
    kTransparency8Bit = _ODA_Kernel_Py3.OdGiRasterImage_kTransparency8Bit

    def pixelWidth(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImage_pixelWidth(self, *args)

    def pixelHeight(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImage_pixelHeight(self, *args)

    def defaultResolution(self, *args) -> "OdGiRasterImage::Units":
        return _ODA_Kernel_Py3.OdGiRasterImage_defaultResolution(self, *args)

    def colorDepth(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImage_colorDepth(self, *args)

    def numColors(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImage_numColors(self, *args)

    def transparentColor(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiRasterImage_transparentColor(self, *args)

    def color(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGiRasterImage_color(self, *args)

    def paletteDataSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImage_paletteDataSize(self, *args)

    def paletteData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImage_paletteData(self, *args)

    def scanLineSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImage_scanLineSize(self, *args)

    def scanLines(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImage_scanLines(self, *args)

    def pixelFormat(self, *args) -> "OdGiRasterImage::PixelFormatInfo":
        return _ODA_Kernel_Py3.OdGiRasterImage_pixelFormat(self, *args)

    def scanLinesAlignment(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImage_scanLinesAlignment(self, *args)

    def imageSource(self, *args) -> "OdGiRasterImage::ImageSource":
        return _ODA_Kernel_Py3.OdGiRasterImage_imageSource(self, *args)

    def sourceFileName(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdGiRasterImage_sourceFileName(self, *args)

    def transparencyMode(self, *args) -> "OdGiRasterImage::TransparencyMode":
        return _ODA_Kernel_Py3.OdGiRasterImage_transparencyMode(self, *args)

    def changeImageSource(self, *args) -> "OdSmartPtr< OdGiRasterImage >":
        return _ODA_Kernel_Py3.OdGiRasterImage_changeImageSource(self, *args)

    def changeSourceFileName(self, *args) -> "OdSmartPtr< OdGiRasterImage >":
        return _ODA_Kernel_Py3.OdGiRasterImage_changeSourceFileName(self, *args)

    def changeTransparencyMode(self, *args) -> "OdSmartPtr< OdGiRasterImage >":
        return _ODA_Kernel_Py3.OdGiRasterImage_changeTransparencyMode(self, *args)

    @staticmethod
    def calcBMPScanLineSize(*args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImage_calcBMPScanLineSize(*args)

    @staticmethod
    def calcColorMask(*args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImage_calcColorMask(*args)

    def convert(self, *args) -> "OdSmartPtr< OdGiRasterImage >":
        return _ODA_Kernel_Py3.OdGiRasterImage_convert(self, *args)

    def crop(self, *args) -> "OdSmartPtr< OdGiRasterImage >":
        return _ODA_Kernel_Py3.OdGiRasterImage_crop(self, *args)

    def imp(self, *args) -> "void *":
        return _ODA_Kernel_Py3.OdGiRasterImage_imp(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRasterImage

# Register OdGiRasterImage in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRasterImage_swigregister(OdGiRasterImage)

def OdGiRasterImage_cast(*args) -> "OdSmartPtr< OdGiRasterImage >":
    return _ODA_Kernel_Py3.OdGiRasterImage_cast(*args)

def OdGiRasterImage_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiRasterImage_desc(*args)

def OdGiRasterImage_createObject(*args) -> "OdSmartPtr< OdGiRasterImage >":
    return _ODA_Kernel_Py3.OdGiRasterImage_createObject(*args)

def OdGiRasterImage_millimetersInUnit(*args) -> "double":
    return _ODA_Kernel_Py3.OdGiRasterImage_millimetersInUnit(*args)

def OdGiRasterImage_calcBMPScanLineSize(*args) -> "OdUInt32":
    return _ODA_Kernel_Py3.OdGiRasterImage_calcBMPScanLineSize(*args)

def OdGiRasterImage_calcColorMask(*args) -> "OdUInt32":
    return _ODA_Kernel_Py3.OdGiRasterImage_calcColorMask(*args)

class PixelFormatInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    redOffset = property(_ODA_Kernel_Py3.PixelFormatInfo_redOffset_get, _ODA_Kernel_Py3.PixelFormatInfo_redOffset_set)
    numRedBits = property(_ODA_Kernel_Py3.PixelFormatInfo_numRedBits_get, _ODA_Kernel_Py3.PixelFormatInfo_numRedBits_set)
    greenOffset = property(_ODA_Kernel_Py3.PixelFormatInfo_greenOffset_get, _ODA_Kernel_Py3.PixelFormatInfo_greenOffset_set)
    numGreenBits = property(_ODA_Kernel_Py3.PixelFormatInfo_numGreenBits_get, _ODA_Kernel_Py3.PixelFormatInfo_numGreenBits_set)
    blueOffset = property(_ODA_Kernel_Py3.PixelFormatInfo_blueOffset_get, _ODA_Kernel_Py3.PixelFormatInfo_blueOffset_set)
    numBlueBits = property(_ODA_Kernel_Py3.PixelFormatInfo_numBlueBits_get, _ODA_Kernel_Py3.PixelFormatInfo_numBlueBits_set)
    alphaOffset = property(_ODA_Kernel_Py3.PixelFormatInfo_alphaOffset_get, _ODA_Kernel_Py3.PixelFormatInfo_alphaOffset_set)
    numAlphaBits = property(_ODA_Kernel_Py3.PixelFormatInfo_numAlphaBits_get, _ODA_Kernel_Py3.PixelFormatInfo_numAlphaBits_set)
    bitsPerPixel = property(_ODA_Kernel_Py3.PixelFormatInfo_bitsPerPixel_get, _ODA_Kernel_Py3.PixelFormatInfo_bitsPerPixel_set)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PixelFormatInfo___eq__(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.PixelFormatInfo_swiginit(self, _ODA_Kernel_Py3.new_PixelFormatInfo(*args))

    def isRGB(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PixelFormatInfo_isRGB(self, *args)

    def setRGB(self, *args) -> "void":
        return _ODA_Kernel_Py3.PixelFormatInfo_setRGB(self, *args)

    def isBGR(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PixelFormatInfo_isBGR(self, *args)

    def setBGR(self, *args) -> "void":
        return _ODA_Kernel_Py3.PixelFormatInfo_setBGR(self, *args)

    def is16bitBGR(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PixelFormatInfo_is16bitBGR(self, *args)

    def set16bitBGR(self, *args) -> "void":
        return _ODA_Kernel_Py3.PixelFormatInfo_set16bitBGR(self, *args)

    def isRGBA(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PixelFormatInfo_isRGBA(self, *args)

    def setRGBA(self, *args) -> "void":
        return _ODA_Kernel_Py3.PixelFormatInfo_setRGBA(self, *args)

    def isBGRA(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PixelFormatInfo_isBGRA(self, *args)

    def setBGRA(self, *args) -> "void":
        return _ODA_Kernel_Py3.PixelFormatInfo_setBGRA(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PixelFormatInfo

# Register PixelFormatInfo in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PixelFormatInfo_swigregister(PixelFormatInfo)

class OdGiRasterImageParam(OdGiRasterImage):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiRasterImageParam >":
        return _ODA_Kernel_Py3.OdGiRasterImageParam_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRasterImageParam_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRasterImageParam_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiRasterImageParam_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiRasterImageParam >":
        return _ODA_Kernel_Py3.OdGiRasterImageParam_createObject(*args)
    kImageSource = _ODA_Kernel_Py3.OdGiRasterImageParam_kImageSource
    kTransparencyMode = _ODA_Kernel_Py3.OdGiRasterImageParam_kTransparencyMode
    kSourceFileName = _ODA_Kernel_Py3.OdGiRasterImageParam_kSourceFileName

    def supportedParams(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageParam_supportedParams(self, *args)

    def setImageSource(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageParam_setImageSource(self, *args)

    def setSourceFileName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageParam_setSourceFileName(self, *args)

    def setTransparencyMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageParam_setTransparencyMode(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRasterImageParam

# Register OdGiRasterImageParam in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRasterImageParam_swigregister(OdGiRasterImageParam)

def OdGiRasterImageParam_cast(*args) -> "OdSmartPtr< OdGiRasterImageParam >":
    return _ODA_Kernel_Py3.OdGiRasterImageParam_cast(*args)

def OdGiRasterImageParam_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiRasterImageParam_desc(*args)

def OdGiRasterImageParam_createObject(*args) -> "OdSmartPtr< OdGiRasterImageParam >":
    return _ODA_Kernel_Py3.OdGiRasterImageParam_createObject(*args)

class OdGiSubEntityTraitsChangedFlags(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kFirstChangedFlag = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kFirstChangedFlag
    kColorChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kColorChanged
    kLayerChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kLayerChanged
    kLineTypeChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kLineTypeChanged
    kFillTypeChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kFillTypeChanged
    kLineWeightChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kLineWeightChanged
    kLineTypeScaleChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kLineTypeScaleChanged
    kThicknessChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kThicknessChanged
    kPlotStyleChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kPlotStyleChanged
    kMaterialChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kMaterialChanged
    kMapperChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kMapperChanged
    kVisualStyleChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kVisualStyleChanged
    kTransparencyChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kTransparencyChanged
    kDrawFlagsChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kDrawFlagsChanged
    kSelectionGeomChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kSelectionGeomChanged
    kShadowFlagsChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kShadowFlagsChanged
    kSectionableChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kSectionableChanged
    kSelectionFlagsChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kSelectionFlagsChanged
    kSecColorChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kSecColorChanged
    kLSModifiersChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kLSModifiersChanged
    kFillChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kFillChanged
    kAwareFlagChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kAwareFlagChanged
    kLockFlagsChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kLockFlagsChanged
    kAuxDataChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kAuxDataChanged
    kAllChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kAllChanged
    kSomeChanged = _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_kSomeChanged

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_swiginit(self, _ODA_Kernel_Py3.new_OdGiSubEntityTraitsChangedFlags(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSubEntityTraitsChangedFlags

# Register OdGiSubEntityTraitsChangedFlags in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSubEntityTraitsChangedFlags_swigregister(OdGiSubEntityTraitsChangedFlags)

class OdGiSubEntityTraitsData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kSelectionGeom = _ODA_Kernel_Py3.OdGiSubEntityTraitsData_kSelectionGeom
    kSectionable = _ODA_Kernel_Py3.OdGiSubEntityTraitsData_kSectionable
    kInheritableSelFlags = _ODA_Kernel_Py3.OdGiSubEntityTraitsData_kInheritableSelFlags
    kSelectionFlagsMask = _ODA_Kernel_Py3.OdGiSubEntityTraitsData_kSelectionFlagsMask
    kLayerOff = _ODA_Kernel_Py3.OdGiSubEntityTraitsData_kLayerOff
    kLayerFrozen = _ODA_Kernel_Py3.OdGiSubEntityTraitsData_kLayerFrozen
    kGeomDisplayNormally = _ODA_Kernel_Py3.OdGiSubEntityTraitsData_kGeomDisplayNormally
    kGeomSelectNormally = _ODA_Kernel_Py3.OdGiSubEntityTraitsData_kGeomSelectNormally
    kGeomDisplayHighlighted = _ODA_Kernel_Py3.OdGiSubEntityTraitsData_kGeomDisplayHighlighted
    kGeomSelectHighlighted = _ODA_Kernel_Py3.OdGiSubEntityTraitsData_kGeomSelectHighlighted
    kGeomAllVisibilityFlags = _ODA_Kernel_Py3.OdGiSubEntityTraitsData_kGeomAllVisibilityFlags

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiSubEntityTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiSubEntityTraitsData(*args))

    def flags(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_flags(self, *args)

    def selFlags(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_selFlags(self, *args)

    def geomVisibilityFlags(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_geomVisibilityFlags(self, *args)

    def isLayerFrozen(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_isLayerFrozen(self, *args)

    def isLayerOff(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_isLayerOff(self, *args)

    def isLayerVisible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_isLayerVisible(self, *args)

    def visibility(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_visibility(self, *args)

    def trueColor(self, *args) -> "OdCmEntityColor const &":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_trueColor(self, *args)

    def color(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_color(self, *args)

    def layer(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_layer(self, *args)

    def lineType(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_lineType(self, *args)

    def fillType(self, *args) -> "OdGiFillType":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_fillType(self, *args)

    def lineWeight(self, *args) -> "OdDb::LineWeight":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_lineWeight(self, *args)

    def lineTypeScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_lineTypeScale(self, *args)

    def thickness(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_thickness(self, *args)

    def plotStyleNameType(self, *args) -> "OdDb::PlotStyleNameType":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_plotStyleNameType(self, *args)

    def plotStyleNameId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_plotStyleNameId(self, *args)

    def material(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_material(self, *args)

    def mapper(self, *args) -> "OdGiMapper const *":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_mapper(self, *args)

    def visualStyle(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_visualStyle(self, *args)

    def transparency(self, *args) -> "OdCmTransparency const &":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_transparency(self, *args)

    def drawFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_drawFlags(self, *args)

    def lockFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_lockFlags(self, *args)

    def selectionGeom(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_selectionGeom(self, *args)

    def shadowFlags(self, *args) -> "OdGiSubEntityTraits::ShadowFlags":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_shadowFlags(self, *args)

    def sectionable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_sectionable(self, *args)

    def selectionFlags(self, *args) -> "OdGiSubEntityTraits::SelectionFlags":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_selectionFlags(self, *args)

    def secondaryTrueColor(self, *args) -> "OdCmEntityColor const &":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_secondaryTrueColor(self, *args)

    def lineStyleModifiers(self, *args) -> "OdGiDgLinetypeModifiers const *":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_lineStyleModifiers(self, *args)

    def fill(self, *args) -> "OdGiFill const *":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_fill(self, *args)

    def auxData(self, *args) -> "OdGiAuxiliaryDataPtr":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_auxData(self, *args)

    def setFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setFlags(self, *args)

    def setSelFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setSelFlags(self, *args)

    def setTrueColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setTrueColor(self, *args)

    def setColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setColor(self, *args)

    def setLayer(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setLayer(self, *args)

    def setLineType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setLineType(self, *args)

    def setFillType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setFillType(self, *args)

    def setLineWeight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setLineWeight(self, *args)

    def setLineTypeScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setLineTypeScale(self, *args)

    def setThickness(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setThickness(self, *args)

    def setPlotStyleName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setPlotStyleName(self, *args)

    def setMaterial(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setMaterial(self, *args)

    def setMapper(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setMapper(self, *args)

    def setVisualStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setVisualStyle(self, *args)

    def setTransparency(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setTransparency(self, *args)

    def setDrawFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setDrawFlags(self, *args)

    def setLockFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setLockFlags(self, *args)

    def setSelectionGeom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setSelectionGeom(self, *args)

    def setShadowFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setShadowFlags(self, *args)

    def setSectionable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setSectionable(self, *args)

    def setSelectionFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setSelectionFlags(self, *args)

    def setSecondaryTrueColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setSecondaryTrueColor(self, *args)

    def setLineStyleModifiers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setLineStyleModifiers(self, *args)

    def setFill(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setFill(self, *args)

    def setAuxData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsData_setAuxData(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSubEntityTraitsData

# Register OdGiSubEntityTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSubEntityTraitsData_swigregister(OdGiSubEntityTraitsData)

class OdGiDrawableDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiDrawableDesc_swiginit(self, _ODA_Kernel_Py3.new_OdGiDrawableDesc(*args))
    pParent = property(_ODA_Kernel_Py3.OdGiDrawableDesc_pParent_get, _ODA_Kernel_Py3.OdGiDrawableDesc_pParent_set)
    persistId = property(_ODA_Kernel_Py3.OdGiDrawableDesc_persistId_get, _ODA_Kernel_Py3.OdGiDrawableDesc_persistId_set)
    pTransientDrawable = property(_ODA_Kernel_Py3.OdGiDrawableDesc_pTransientDrawable_get, _ODA_Kernel_Py3.OdGiDrawableDesc_pTransientDrawable_set)
    nDrawableFlags = property(_ODA_Kernel_Py3.OdGiDrawableDesc_nDrawableFlags_get, _ODA_Kernel_Py3.OdGiDrawableDesc_nDrawableFlags_set)
    kFirstFlag = _ODA_Kernel_Py3.OdGiDrawableDesc_kFirstFlag
    kMarkedToSkip = _ODA_Kernel_Py3.OdGiDrawableDesc_kMarkedToSkip
    kMarkedBySelection = _ODA_Kernel_Py3.OdGiDrawableDesc_kMarkedBySelection
    kMarkedBySubSelection = _ODA_Kernel_Py3.OdGiDrawableDesc_kMarkedBySubSelection
    kMarkedByGeometry = _ODA_Kernel_Py3.OdGiDrawableDesc_kMarkedByGeometry
    kMarkedBySubGeometry = _ODA_Kernel_Py3.OdGiDrawableDesc_kMarkedBySubGeometry
    kMarkedToBreak = _ODA_Kernel_Py3.OdGiDrawableDesc_kMarkedToBreak
    kMarkedForForcedSelection = _ODA_Kernel_Py3.OdGiDrawableDesc_kMarkedForForcedSelection
    kLastFlag = _ODA_Kernel_Py3.OdGiDrawableDesc_kLastFlag
    nDrawableDescFlags = property(_ODA_Kernel_Py3.OdGiDrawableDesc_nDrawableDescFlags_get, _ODA_Kernel_Py3.OdGiDrawableDesc_nDrawableDescFlags_set)

    def markToSkip(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDrawableDesc_markToSkip(self, *args)

    def isMarkedToSkip(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDrawableDesc_isMarkedToSkip(self, *args)

    def markBySelection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDrawableDesc_markBySelection(self, *args)

    def isMarkedBySelection(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDrawableDesc_isMarkedBySelection(self, *args)

    def markBySubSelection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDrawableDesc_markBySubSelection(self, *args)

    def isMarkedBySubSelection(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDrawableDesc_isMarkedBySubSelection(self, *args)

    def markByGeometry(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDrawableDesc_markByGeometry(self, *args)

    def isMarkedByGeometry(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDrawableDesc_isMarkedByGeometry(self, *args)

    def markBySubGeometry(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDrawableDesc_markBySubGeometry(self, *args)

    def isMarkedBySubGeometry(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDrawableDesc_isMarkedBySubGeometry(self, *args)

    def markToBreak(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDrawableDesc_markToBreak(self, *args)

    def isMarkedToBreak(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDrawableDesc_isMarkedToBreak(self, *args)

    def markForForcedSelection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDrawableDesc_markForForcedSelection(self, *args)

    def isMarkedForForcedSelection(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDrawableDesc_isMarkedForForcedSelection(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDrawableDesc

# Register OdGiDrawableDesc in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDrawableDesc_swigregister(OdGiDrawableDesc)

class OdGsSelectionReactor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kContinue = _ODA_Kernel_Py3.OdGsSelectionReactor_kContinue
    kBreak = _ODA_Kernel_Py3.OdGsSelectionReactor_kBreak
    kSkipDrawable = _ODA_Kernel_Py3.OdGsSelectionReactor_kSkipDrawable

    def selected(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsSelectionReactor_selected(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsSelectionReactor

# Register OdGsSelectionReactor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsSelectionReactor_swigregister(OdGsSelectionReactor)

eOdGiRegenTypeInvalid = _ODA_Kernel_Py3.eOdGiRegenTypeInvalid
kOdGiStandardDisplay = _ODA_Kernel_Py3.kOdGiStandardDisplay
kOdGiHideOrShadeCommand = _ODA_Kernel_Py3.kOdGiHideOrShadeCommand
kOdGiRenderCommand = _ODA_Kernel_Py3.kOdGiRenderCommand
kOdGiForExplode = _ODA_Kernel_Py3.kOdGiForExplode
kOdGiSaveWorldDrawForProxy = _ODA_Kernel_Py3.kOdGiSaveWorldDrawForProxy
kOdGiForExtents = _ODA_Kernel_Py3.kOdGiForExtents
kOdGiMaxDevForCircle = _ODA_Kernel_Py3.kOdGiMaxDevForCircle
kOdGiMaxDevForCurve = _ODA_Kernel_Py3.kOdGiMaxDevForCurve
kOdGiMaxDevForBoundary = _ODA_Kernel_Py3.kOdGiMaxDevForBoundary
kOdGiMaxDevForIsoline = _ODA_Kernel_Py3.kOdGiMaxDevForIsoline
kOdGiMaxDevForFacet = _ODA_Kernel_Py3.kOdGiMaxDevForFacet
kOdGiIncludeScores = _ODA_Kernel_Py3.kOdGiIncludeScores
kOdGiRawText = _ODA_Kernel_Py3.kOdGiRawText
kOdGiIncludePenups = _ODA_Kernel_Py3.kOdGiIncludePenups
kOdGiDrawShape = _ODA_Kernel_Py3.kOdGiDrawShape
kOdGiIgnoreMIF = _ODA_Kernel_Py3.kOdGiIgnoreMIF
kOdGiLastPosOnly = _ODA_Kernel_Py3.kOdGiLastPosOnly
class OdGiContext(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiContext >":
        return _ODA_Kernel_Py3.OdGiContext_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiContext_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiContext_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiContext_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiContext >":
        return _ODA_Kernel_Py3.OdGiContext_createObject(*args)

    def database(self, *args) -> "OdDbBaseDatabase *":
        return _ODA_Kernel_Py3.OdGiContext_database(self, *args)

    def openDrawable(self, *args) -> "OdGiDrawablePtr":
        return _ODA_Kernel_Py3.OdGiContext_openDrawable(self, *args)

    def defaultLineWeight(self, *args) -> "OdDb::LineWeight":
        return _ODA_Kernel_Py3.OdGiContext_defaultLineWeight(self, *args)

    def commonLinetypeScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiContext_commonLinetypeScale(self, *args)

    def getDefaultTextStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiContext_getDefaultTextStyle(self, *args)

    def drawShape(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiContext_drawShape(self, *args)

    def drawText(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiContext_drawText(self, *args)

    def textExtentsBox(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiContext_textExtentsBox(self, *args)

    def shapeExtentsBox(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiContext_shapeExtentsBox(self, *args)

    def circleZoomPercent(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdGiContext_circleZoomPercent(self, *args)

    def isPlotGeneration(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiContext_isPlotGeneration(self, *args)

    def paletteBackground(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGiContext_paletteBackground(self, *args)

    def fillTtf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiContext_fillTtf(self, *args)

    def numberOfIsolines(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiContext_numberOfIsolines(self, *args)

    def fillMode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiContext_fillMode(self, *args)

    def quickTextMode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiContext_quickTextMode(self, *args)

    def textQuality(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiContext_textQuality(self, *args)

    def useTtfTriangleCache(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiContext_useTtfTriangleCache(self, *args)
    kImageQualityDraft = _ODA_Kernel_Py3.OdGiContext_kImageQualityDraft
    kImageQualityHigh = _ODA_Kernel_Py3.OdGiContext_kImageQualityHigh

    def imageQuality(self, *args) -> "OdGiContext::ImageQuality":
        return _ODA_Kernel_Py3.OdGiContext_imageQuality(self, *args)
    kImageHighlight = _ODA_Kernel_Py3.OdGiContext_kImageHighlight
    kImageSelect = _ODA_Kernel_Py3.OdGiContext_kImageSelect

    def imageSelectionBehavior(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiContext_imageSelectionBehavior(self, *args)
    kLockedLayerFade = _ODA_Kernel_Py3.OdGiContext_kLockedLayerFade
    kXrefFade = _ODA_Kernel_Py3.OdGiContext_kXrefFade
    kRefEditFade = _ODA_Kernel_Py3.OdGiContext_kRefEditFade

    def fadingIntensityPercentage(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiContext_fadingIntensityPercentage(self, *args)
    kLightGlyph = _ODA_Kernel_Py3.OdGiContext_kLightGlyph
    kCameraGlyph = _ODA_Kernel_Py3.OdGiContext_kCameraGlyph

    def glyphSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiContext_glyphSize(self, *args)
    kPointLineWeight = _ODA_Kernel_Py3.OdGiContext_kPointLineWeight
    kLineCapStyle = _ODA_Kernel_Py3.OdGiContext_kLineCapStyle
    kLineJoinStyle = _ODA_Kernel_Py3.OdGiContext_kLineJoinStyle

    def lineWeightConfiguration(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiContext_lineWeightConfiguration(self, *args)

    def selectionStyle(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiContext_selectionStyle(self, *args)
    kWCS = _ODA_Kernel_Py3.OdGiContext_kWCS
    kECS = _ODA_Kernel_Py3.OdGiContext_kECS
    kNDC = _ODA_Kernel_Py3.OdGiContext_kNDC
    kDCS = _ODA_Kernel_Py3.OdGiContext_kDCS

    def customViewportGeometryCS(self, *args) -> "OdGiContext::CoordinatesSystem":
        return _ODA_Kernel_Py3.OdGiContext_customViewportGeometryCS(self, *args)
    kNestedDrawable = _ODA_Kernel_Py3.OdGiContext_kNestedDrawable
    kSkipVectorization = _ODA_Kernel_Py3.OdGiContext_kSkipVectorization
    kDrawableFilterAppRangeStart = _ODA_Kernel_Py3.OdGiContext_kDrawableFilterAppRangeStart
    kDrawableFilterAppRangeMask = _ODA_Kernel_Py3.OdGiContext_kDrawableFilterAppRangeMask

    def drawableFilterFunctionId(self, *args) -> "OdIntPtr":
        return _ODA_Kernel_Py3.OdGiContext_drawableFilterFunctionId(self, *args)

    def drawableFilterFunction(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiContext_drawableFilterFunction(self, *args)

    def ttfPolyDraw(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiContext_ttfPolyDraw(self, *args)

    def regenAbort(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiContext_regenAbort(self, *args)
    kPsNone = _ODA_Kernel_Py3.OdGiContext_kPsNone
    kPsByColor = _ODA_Kernel_Py3.OdGiContext_kPsByColor
    kPsByName = _ODA_Kernel_Py3.OdGiContext_kPsByName

    def plotStyleType(self, *args) -> "OdGiContext::PStyleType":
        return _ODA_Kernel_Py3.OdGiContext_plotStyleType(self, *args)

    def plotStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiContext_plotStyle(self, *args)

    def getStubByID(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiContext_getStubByID(self, *args)

    def getIDByStub(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdGiContext_getIDByStub(self, *args)

    def getDatabaseByStub(self, *args) -> "OdDbBaseDatabase *":
        return _ODA_Kernel_Py3.OdGiContext_getDatabaseByStub(self, *args)

    def getOwnerIDByStub(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiContext_getOwnerIDByStub(self, *args)

    def getStubByMatName(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiContext_getStubByMatName(self, *args)

    def getStubByMaterialId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiContext_getStubByMaterialId(self, *args)
    kNoSilhouettes = _ODA_Kernel_Py3.OdGiContext_kNoSilhouettes
    kMeshSilhouettes = _ODA_Kernel_Py3.OdGiContext_kMeshSilhouettes
    kModelerSilhouettes = _ODA_Kernel_Py3.OdGiContext_kModelerSilhouettes
    kAllSilhouettes = _ODA_Kernel_Py3.OdGiContext_kAllSilhouettes

    def displaySilhouettes(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiContext_displaySilhouettes(self, *args)

    def displayMeshSilhouettes(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiContext_displayMeshSilhouettes(self, *args)

    def displayModelerSilhouettes(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiContext_displayModelerSilhouettes(self, *args)

    def getSectionGeometryManager(self, *args) -> "OdGiSectionGeometryManagerPtr":
        return _ODA_Kernel_Py3.OdGiContext_getSectionGeometryManager(self, *args)

    def antiAliasingMode(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiContext_antiAliasingMode(self, *args)

    def xrefPropertiesOverride(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiContext_xrefPropertiesOverride(self, *args)

    def multiplyByBlockLinetypeScales(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiContext_multiplyByBlockLinetypeScales(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiContext

# Register OdGiContext in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiContext_swigregister(OdGiContext)

def OdGiContext_cast(*args) -> "OdSmartPtr< OdGiContext >":
    return _ODA_Kernel_Py3.OdGiContext_cast(*args)

def OdGiContext_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiContext_desc(*args)

def OdGiContext_createObject(*args) -> "OdSmartPtr< OdGiContext >":
    return _ODA_Kernel_Py3.OdGiContext_createObject(*args)

class OdGiCommonDraw(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiCommonDraw >":
        return _ODA_Kernel_Py3.OdGiCommonDraw_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiCommonDraw_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiCommonDraw_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiCommonDraw_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiCommonDraw >":
        return _ODA_Kernel_Py3.OdGiCommonDraw_createObject(*args)

    def regenType(self, *args) -> "OdGiRegenType":
        return _ODA_Kernel_Py3.OdGiCommonDraw_regenType(self, *args)

    def regenAbort(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiCommonDraw_regenAbort(self, *args)

    def subEntityTraits(self, *args) -> "OdGiSubEntityTraits &":
        return _ODA_Kernel_Py3.OdGiCommonDraw_subEntityTraits(self, *args)

    def rawGeometry(self, *args) -> "OdGiGeometry &":
        return _ODA_Kernel_Py3.OdGiCommonDraw_rawGeometry(self, *args)

    def isDragging(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiCommonDraw_isDragging(self, *args)

    def deviation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiCommonDraw_deviation(self, *args)

    def numberOfIsolines(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiCommonDraw_numberOfIsolines(self, *args)

    def context(self, *args) -> "OdGiContext *":
        return _ODA_Kernel_Py3.OdGiCommonDraw_context(self, *args)

    def currentGiPath(self, *args) -> "OdGiPathNode const *":
        return _ODA_Kernel_Py3.OdGiCommonDraw_currentGiPath(self, *args)

    def displayModelerSilhouettes(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiCommonDraw_displayModelerSilhouettes(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiCommonDraw

# Register OdGiCommonDraw in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiCommonDraw_swigregister(OdGiCommonDraw)

def OdGiCommonDraw_cast(*args) -> "OdSmartPtr< OdGiCommonDraw >":
    return _ODA_Kernel_Py3.OdGiCommonDraw_cast(*args)

def OdGiCommonDraw_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiCommonDraw_desc(*args)

def OdGiCommonDraw_createObject(*args) -> "OdSmartPtr< OdGiCommonDraw >":
    return _ODA_Kernel_Py3.OdGiCommonDraw_createObject(*args)

class OdGiDrawFlagsHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiDrawFlagsHelper_swiginit(self, _ODA_Kernel_Py3.new_OdGiDrawFlagsHelper(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDrawFlagsHelper

# Register OdGiDrawFlagsHelper in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDrawFlagsHelper_swigregister(OdGiDrawFlagsHelper)

class OdGiSelectionGeomState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiSelectionGeomState_swiginit(self, _ODA_Kernel_Py3.new_OdGiSelectionGeomState(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSelectionGeomState

# Register OdGiSelectionGeomState in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSelectionGeomState_swigregister(OdGiSelectionGeomState)

class OdGiFaceData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiFaceData_swiginit(self, _ODA_Kernel_Py3.new_OdGiFaceData(*args))

    def setColors(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceData_setColors(self, *args)

    def setTrueColors(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceData_setTrueColors(self, *args)

    def setLayers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceData_setLayers(self, *args)

    def setSelectionMarkers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceData_setSelectionMarkers(self, *args)

    def setNormals(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceData_setNormals(self, *args)

    def setVisibility(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceData_setVisibility(self, *args)

    def setMaterials(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceData_setMaterials(self, *args)

    def setMappers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceData_setMappers(self, *args)

    def setTransparency(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceData_setTransparency(self, *args)

    def setFillOrigins(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceData_setFillOrigins(self, *args)

    def setFillDirections(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceData_setFillDirections(self, *args)

    def colors(self, *args) -> "OdUInt16 const *":
        return _ODA_Kernel_Py3.OdGiFaceData_colors(self, *args)

    def trueColors(self, *args) -> "OdCmEntityColor const *":
        return _ODA_Kernel_Py3.OdGiFaceData_trueColors(self, *args)

    def layerIds(self, *args) -> "OdDbStub **":
        return _ODA_Kernel_Py3.OdGiFaceData_layerIds(self, *args)

    def selectionMarkers(self, *args) -> "OdGsMarker const *":
        return _ODA_Kernel_Py3.OdGiFaceData_selectionMarkers(self, *args)

    def normals(self, *args) -> "OdGeVector3d const *":
        return _ODA_Kernel_Py3.OdGiFaceData_normals(self, *args)

    def visibility(self, *args) -> "OdUInt8 const *":
        return _ODA_Kernel_Py3.OdGiFaceData_visibility(self, *args)

    def materials(self, *args) -> "OdDbStub **":
        return _ODA_Kernel_Py3.OdGiFaceData_materials(self, *args)

    def mappers(self, *args) -> "OdGiMapper const *":
        return _ODA_Kernel_Py3.OdGiFaceData_mappers(self, *args)

    def transparency(self, *args) -> "OdCmTransparency const *":
        return _ODA_Kernel_Py3.OdGiFaceData_transparency(self, *args)

    def fillOrigins(self, *args) -> "OdGePoint2d const *":
        return _ODA_Kernel_Py3.OdGiFaceData_fillOrigins(self, *args)

    def fillDirections(self, *args) -> "OdGeVector2d const *":
        return _ODA_Kernel_Py3.OdGiFaceData_fillDirections(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiFaceData

# Register OdGiFaceData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiFaceData_swigregister(OdGiFaceData)

kOdGiCounterClockwise = _ODA_Kernel_Py3.kOdGiCounterClockwise
kOdGiNoOrientation = _ODA_Kernel_Py3.kOdGiNoOrientation
kOdGiClockwise = _ODA_Kernel_Py3.kOdGiClockwise
class OdGiVertexData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiVertexData_swiginit(self, _ODA_Kernel_Py3.new_OdGiVertexData(*args))
    kAllChannels = _ODA_Kernel_Py3.OdGiVertexData_kAllChannels

    def setNormals(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVertexData_setNormals(self, *args)

    def setOrientationFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVertexData_setOrientationFlag(self, *args)

    def setTrueColors(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVertexData_setTrueColors(self, *args)

    def setMappingCoords(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVertexData_setMappingCoords(self, *args)

    def normals(self, *args) -> "OdGeVector3d const *":
        return _ODA_Kernel_Py3.OdGiVertexData_normals(self, *args)

    def orientationFlag(self, *args) -> "OdGiOrientationType":
        return _ODA_Kernel_Py3.OdGiVertexData_orientationFlag(self, *args)

    def trueColors(self, *args) -> "OdCmEntityColor const *":
        return _ODA_Kernel_Py3.OdGiVertexData_trueColors(self, *args)

    def mappingCoords(self, *args) -> "OdGePoint3d const *":
        return _ODA_Kernel_Py3.OdGiVertexData_mappingCoords(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiVertexData

# Register OdGiVertexData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiVertexData_swigregister(OdGiVertexData)

kOdGiArcSimple = _ODA_Kernel_Py3.kOdGiArcSimple
kOdGiArcSector = _ODA_Kernel_Py3.kOdGiArcSector
kOdGiArcChord = _ODA_Kernel_Py3.kOdGiArcChord
class OdGiGeometry(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiGeometry >":
        return _ODA_Kernel_Py3.OdGiGeometry_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiGeometry_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiGeometry_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiGeometry_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiGeometry >":
        return _ODA_Kernel_Py3.OdGiGeometry_createObject(*args)

    def getModelToWorldTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiGeometry_getModelToWorldTransform(self, *args)

    def getWorldToModelTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiGeometry_getWorldToModelTransform(self, *args)

    def pushModelTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_pushModelTransform(self, *args)

    def popModelTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_popModelTransform(self, *args)

    def circle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_circle(self, *args)

    def circularArc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_circularArc(self, *args)

    def polyline(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_polyline(self, *args)

    def polygon(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_polygon(self, *args)

    def pline(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_pline(self, *args)

    def mesh(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_mesh(self, *args)

    def shell(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_shell(self, *args)

    def text(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_text(self, *args)

    def xline(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_xline(self, *args)

    def ray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_ray(self, *args)

    def nurbs(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_nurbs(self, *args)

    def ellipArc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_ellipArc(self, *args)

    def draw(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_draw(self, *args)

    def popClipBoundary(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_popClipBoundary(self, *args)

    def image(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_image(self, *args)

    def edge(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_edge(self, *args)

    def currentGiPath(self, *args) -> "OdGiPathNode const *":
        return _ODA_Kernel_Py3.OdGiGeometry_currentGiPath(self, *args)

    def pushClipBoundary(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_pushClipBoundary(self, *args)

    def polypoint(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_polypoint(self, *args)

    def polyPolygon(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_polyPolygon(self, *args)

    def rowOfDots(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_rowOfDots(self, *args)

    def pointCloud(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometry_pointCloud(self, *args)

    def brep(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiGeometry_brep(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiGeometry

# Register OdGiGeometry in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiGeometry_swigregister(OdGiGeometry)

def OdGiGeometry_cast(*args) -> "OdSmartPtr< OdGiGeometry >":
    return _ODA_Kernel_Py3.OdGiGeometry_cast(*args)

def OdGiGeometry_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiGeometry_desc(*args)

def OdGiGeometry_createObject(*args) -> "OdSmartPtr< OdGiGeometry >":
    return _ODA_Kernel_Py3.OdGiGeometry_createObject(*args)

class OdGiClipBoundarySaver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiClipBoundarySaver_swiginit(self, _ODA_Kernel_Py3.new_OdGiClipBoundarySaver(*args))

    def setSave(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClipBoundarySaver_setSave(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiClipBoundarySaver

# Register OdGiClipBoundarySaver in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiClipBoundarySaver_swigregister(OdGiClipBoundarySaver)

class OdGiModelTransformSaver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiModelTransformSaver_swiginit(self, _ODA_Kernel_Py3.new_OdGiModelTransformSaver(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiModelTransformSaver

# Register OdGiModelTransformSaver in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiModelTransformSaver_swigregister(OdGiModelTransformSaver)

class OdGiModelTransformSaverOpt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiModelTransformSaverOpt_swiginit(self, _ODA_Kernel_Py3.new_OdGiModelTransformSaverOpt(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiModelTransformSaverOpt

# Register OdGiModelTransformSaverOpt in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiModelTransformSaverOpt_swigregister(OdGiModelTransformSaverOpt)

eDummyLastError = _ODA_Kernel_Py3.eDummyLastError
sidDummyFirstMessage = _ODA_Kernel_Py3.sidDummyFirstMessage
sidDummyLastMessage = _ODA_Kernel_Py3.sidDummyLastMessage
class OdGiSelfGdiDrawable(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiSelfGdiDrawable >":
        return _ODA_Kernel_Py3.OdGiSelfGdiDrawable_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSelfGdiDrawable_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSelfGdiDrawable_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiSelfGdiDrawable_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiSelfGdiDrawable >":
        return _ODA_Kernel_Py3.OdGiSelfGdiDrawable_createObject(*args)

    def draw(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSelfGdiDrawable_draw(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSelfGdiDrawable

# Register OdGiSelfGdiDrawable in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSelfGdiDrawable_swigregister(OdGiSelfGdiDrawable)

def OdGiSelfGdiDrawable_cast(*args) -> "OdSmartPtr< OdGiSelfGdiDrawable >":
    return _ODA_Kernel_Py3.OdGiSelfGdiDrawable_cast(*args)

def OdGiSelfGdiDrawable_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiSelfGdiDrawable_desc(*args)

def OdGiSelfGdiDrawable_createObject(*args) -> "OdSmartPtr< OdGiSelfGdiDrawable >":
    return _ODA_Kernel_Py3.OdGiSelfGdiDrawable_createObject(*args)

class OdGiSelfGiDrawablePE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiSelfGiDrawablePE >":
        return _ODA_Kernel_Py3.OdGiSelfGiDrawablePE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSelfGiDrawablePE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSelfGiDrawablePE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiSelfGiDrawablePE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiSelfGiDrawablePE >":
        return _ODA_Kernel_Py3.OdGiSelfGiDrawablePE_createObject(*args)

    def draw(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSelfGiDrawablePE_draw(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSelfGiDrawablePE

# Register OdGiSelfGiDrawablePE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSelfGiDrawablePE_swigregister(OdGiSelfGiDrawablePE)

def OdGiSelfGiDrawablePE_cast(*args) -> "OdSmartPtr< OdGiSelfGiDrawablePE >":
    return _ODA_Kernel_Py3.OdGiSelfGiDrawablePE_cast(*args)

def OdGiSelfGiDrawablePE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiSelfGiDrawablePE_desc(*args)

def OdGiSelfGiDrawablePE_createObject(*args) -> "OdSmartPtr< OdGiSelfGiDrawablePE >":
    return _ODA_Kernel_Py3.OdGiSelfGiDrawablePE_createObject(*args)

class OdGiViewportGeometry(OdGiGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiViewportGeometry >":
        return _ODA_Kernel_Py3.OdGiViewportGeometry_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiViewportGeometry_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiViewportGeometry_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiViewportGeometry_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiViewportGeometry >":
        return _ODA_Kernel_Py3.OdGiViewportGeometry_createObject(*args)

    def polylineEye(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportGeometry_polylineEye(self, *args)

    def polygonEye(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportGeometry_polygonEye(self, *args)

    def polylineDc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportGeometry_polylineDc(self, *args)

    def polygonDc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportGeometry_polygonDc(self, *args)

    def rasterImageDc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportGeometry_rasterImageDc(self, *args)

    def metafileDc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportGeometry_metafileDc(self, *args)

    def ownerDrawDc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportGeometry_ownerDrawDc(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiViewportGeometry

# Register OdGiViewportGeometry in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiViewportGeometry_swigregister(OdGiViewportGeometry)

def OdGiViewportGeometry_cast(*args) -> "OdSmartPtr< OdGiViewportGeometry >":
    return _ODA_Kernel_Py3.OdGiViewportGeometry_cast(*args)

def OdGiViewportGeometry_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiViewportGeometry_desc(*args)

def OdGiViewportGeometry_createObject(*args) -> "OdSmartPtr< OdGiViewportGeometry >":
    return _ODA_Kernel_Py3.OdGiViewportGeometry_createObject(*args)


def odgiImageViewport(*args) -> "void":
    return _ODA_Kernel_Py3.odgiImageViewport(*args)
class OdGiViewport(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiViewport >":
        return _ODA_Kernel_Py3.OdGiViewport_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiViewport_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiViewport_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiViewport_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiViewport >":
        return _ODA_Kernel_Py3.OdGiViewport_createObject(*args)

    def getModelToEyeTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiViewport_getModelToEyeTransform(self, *args)

    def getEyeToModelTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiViewport_getEyeToModelTransform(self, *args)

    def getWorldToEyeTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiViewport_getWorldToEyeTransform(self, *args)

    def getEyeToWorldTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiViewport_getEyeToWorldTransform(self, *args)

    def isPerspective(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiViewport_isPerspective(self, *args)

    def doPerspective(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiViewport_doPerspective(self, *args)

    def doInversePerspective(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiViewport_doInversePerspective(self, *args)

    def getNumPixelsInUnitSquare(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewport_getNumPixelsInUnitSquare(self, *args)

    def getCameraLocation(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGiViewport_getCameraLocation(self, *args)

    def getCameraTarget(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGiViewport_getCameraTarget(self, *args)

    def getCameraUpVector(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGiViewport_getCameraUpVector(self, *args)

    def viewDir(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGiViewport_viewDir(self, *args)

    def viewportId(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiViewport_viewportId(self, *args)

    def acadWindowId(self, *args) -> "OdInt16":
        return _ODA_Kernel_Py3.OdGiViewport_acadWindowId(self, *args)

    def getViewportDcCorners(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewport_getViewportDcCorners(self, *args)

    def getFrontAndBackClipValues(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiViewport_getFrontAndBackClipValues(self, *args)

    def linetypeScaleMultiplier(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiViewport_linetypeScaleMultiplier(self, *args)

    def linetypeGenerationCriteria(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiViewport_linetypeGenerationCriteria(self, *args)

    def layerVisible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiViewport_layerVisible(self, *args)

    def contextualColors(self, *args) -> "OdGiContextualColors const *":
        return _ODA_Kernel_Py3.OdGiViewport_contextualColors(self, *args)

    def annotationScaleId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiViewport_annotationScaleId(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiViewport

# Register OdGiViewport in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiViewport_swigregister(OdGiViewport)

def OdGiViewport_cast(*args) -> "OdSmartPtr< OdGiViewport >":
    return _ODA_Kernel_Py3.OdGiViewport_cast(*args)

def OdGiViewport_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiViewport_desc(*args)

def OdGiViewport_createObject(*args) -> "OdSmartPtr< OdGiViewport >":
    return _ODA_Kernel_Py3.OdGiViewport_createObject(*args)

class OdGiWorldGeometry(OdGiGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiWorldGeometry >":
        return _ODA_Kernel_Py3.OdGiWorldGeometry_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiWorldGeometry_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiWorldGeometry_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiWorldGeometry_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiWorldGeometry >":
        return _ODA_Kernel_Py3.OdGiWorldGeometry_createObject(*args)

    def setExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldGeometry_setExtents(self, *args)

    def startAttributesSegment(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldGeometry_startAttributesSegment(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiWorldGeometry

# Register OdGiWorldGeometry in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiWorldGeometry_swigregister(OdGiWorldGeometry)

def OdGiWorldGeometry_cast(*args) -> "OdSmartPtr< OdGiWorldGeometry >":
    return _ODA_Kernel_Py3.OdGiWorldGeometry_cast(*args)

def OdGiWorldGeometry_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiWorldGeometry_desc(*args)

def OdGiWorldGeometry_createObject(*args) -> "OdSmartPtr< OdGiWorldGeometry >":
    return _ODA_Kernel_Py3.OdGiWorldGeometry_createObject(*args)

class OdGiConveyorContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiConveyorContext

    def giContext(self, *args) -> "OdGiContext &":
        return _ODA_Kernel_Py3.OdGiConveyorContext_giContext(self, *args)

    def subEntityTraits(self, *args) -> "OdGiSubEntityTraits &":
        return _ODA_Kernel_Py3.OdGiConveyorContext_subEntityTraits(self, *args)

    def effectiveTraits(self, *args) -> "OdGiSubEntityTraitsData const &":
        return _ODA_Kernel_Py3.OdGiConveyorContext_effectiveTraits(self, *args)

    def setEffectiveTraits(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorContext_setEffectiveTraits(self, *args)

    def effectivelyVisible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiConveyorContext_effectivelyVisible(self, *args)

    def currentDrawableDesc(self, *args) -> "OdGiDrawableDesc const *":
        return _ODA_Kernel_Py3.OdGiConveyorContext_currentDrawableDesc(self, *args)

    def currentDrawable(self, *args) -> "OdGiDrawable const *":
        return _ODA_Kernel_Py3.OdGiConveyorContext_currentDrawable(self, *args)

    def giViewport(self, *args) -> "OdGiViewport const *":
        return _ODA_Kernel_Py3.OdGiConveyorContext_giViewport(self, *args)

    def gsView(self, *args) -> "OdGsView const *":
        return _ODA_Kernel_Py3.OdGiConveyorContext_gsView(self, *args)

    def onTraitsModified(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorContext_onTraitsModified(self, *args)

    def onTextProcessing(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorContext_onTextProcessing(self, *args)

    def regenAbort(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiConveyorContext_regenAbort(self, *args)

    def currentGiPath(self, *args) -> "OdGiPathNode const *":
        return _ODA_Kernel_Py3.OdGiConveyorContext_currentGiPath(self, *args)

    def worldDeviation(self, *args) -> "OdGiDeviation const &":
        return _ODA_Kernel_Py3.OdGiConveyorContext_worldDeviation(self, *args)

    def modelDeviation(self, *args) -> "OdGiDeviation const &":
        return _ODA_Kernel_Py3.OdGiConveyorContext_modelDeviation(self, *args)

    def eyeDeviation(self, *args) -> "OdGiDeviation const &":
        return _ODA_Kernel_Py3.OdGiConveyorContext_eyeDeviation(self, *args)

    def getModelToWorldTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiConveyorContext_getModelToWorldTransform(self, *args)

    def getWorldToModelTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiConveyorContext_getWorldToModelTransform(self, *args)

    def currentLineweightOverride(self, *args) -> "OdGiLineweightOverride const *":
        return _ODA_Kernel_Py3.OdGiConveyorContext_currentLineweightOverride(self, *args)
    kSpatialFilterSimplPline = _ODA_Kernel_Py3.OdGiConveyorContext_kSpatialFilterSimplPline
    kSpatialFilterSimplNurbs = _ODA_Kernel_Py3.OdGiConveyorContext_kSpatialFilterSimplNurbs
    kSpatialFilterSimplText = _ODA_Kernel_Py3.OdGiConveyorContext_kSpatialFilterSimplText
    kSpatialFilterSimplShape = _ODA_Kernel_Py3.OdGiConveyorContext_kSpatialFilterSimplShape
    kSpatialFilterSimplAll = _ODA_Kernel_Py3.OdGiConveyorContext_kSpatialFilterSimplAll
    kEmbranchmentSimplText = _ODA_Kernel_Py3.OdGiConveyorContext_kEmbranchmentSimplText
    kEmbranchmentSimplNurbs = _ODA_Kernel_Py3.OdGiConveyorContext_kEmbranchmentSimplNurbs
    kEmbranchmentSimplAll = _ODA_Kernel_Py3.OdGiConveyorContext_kEmbranchmentSimplAll
    kConveyorSimplAll = _ODA_Kernel_Py3.OdGiConveyorContext_kConveyorSimplAll
    kPlineMarkers = _ODA_Kernel_Py3.OdGiConveyorContext_kPlineMarkers
    kForceMarkersOnModified = _ODA_Kernel_Py3.OdGiConveyorContext_kForceMarkersOnModified
    kPolylineMarkers = _ODA_Kernel_Py3.OdGiConveyorContext_kPolylineMarkers
    kPlineAllowArcProc = _ODA_Kernel_Py3.OdGiConveyorContext_kPlineAllowArcProc
    kTestMode = _ODA_Kernel_Py3.OdGiConveyorContext_kTestMode
    kLineTyperAfterMetafile = _ODA_Kernel_Py3.OdGiConveyorContext_kLineTyperAfterMetafile

    def drawContextFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiConveyorContext_drawContextFlags(self, *args)

    def annotationScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiConveyorContext_annotationScale(self, *args)

# Register OdGiConveyorContext in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiConveyorContext_swigregister(OdGiConveyorContext)

class OdGiConveyorContextWrapper(OdGiConveyorContext):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getOriginalContext(self, *args) -> "OdGiConveyorContext *":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_getOriginalContext(self, *args)

    def setOriginalContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_setOriginalContext(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiConveyorContextWrapper_swiginit(self, _ODA_Kernel_Py3.new_OdGiConveyorContextWrapper(*args))

    def giContext(self, *args) -> "OdGiContext &":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_giContext(self, *args)

    def subEntityTraits(self, *args) -> "OdGiSubEntityTraits &":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_subEntityTraits(self, *args)

    def effectiveTraits(self, *args) -> "OdGiSubEntityTraitsData const &":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_effectiveTraits(self, *args)

    def setEffectiveTraits(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_setEffectiveTraits(self, *args)

    def effectivelyVisible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_effectivelyVisible(self, *args)

    def currentDrawableDesc(self, *args) -> "OdGiDrawableDesc const *":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_currentDrawableDesc(self, *args)

    def currentDrawable(self, *args) -> "OdGiDrawable const *":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_currentDrawable(self, *args)

    def giViewport(self, *args) -> "OdGiViewport const *":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_giViewport(self, *args)

    def gsView(self, *args) -> "OdGsView const *":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_gsView(self, *args)

    def onTraitsModified(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_onTraitsModified(self, *args)

    def onTextProcessing(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_onTextProcessing(self, *args)

    def regenAbort(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_regenAbort(self, *args)

    def currentGiPath(self, *args) -> "OdGiPathNode const *":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_currentGiPath(self, *args)

    def worldDeviation(self, *args) -> "OdGiDeviation const &":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_worldDeviation(self, *args)

    def modelDeviation(self, *args) -> "OdGiDeviation const &":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_modelDeviation(self, *args)

    def eyeDeviation(self, *args) -> "OdGiDeviation const &":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_eyeDeviation(self, *args)

    def getModelToWorldTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_getModelToWorldTransform(self, *args)

    def getWorldToModelTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_getWorldToModelTransform(self, *args)

    def currentLineweightOverride(self, *args) -> "OdGiLineweightOverride const *":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_currentLineweightOverride(self, *args)

    def drawContextFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiConveyorContextWrapper_drawContextFlags(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiConveyorContextWrapper

# Register OdGiConveyorContextWrapper in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiConveyorContextWrapper_swigregister(OdGiConveyorContextWrapper)

class OdGiConveyorGeometry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiConveyorGeometry

    def plineProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_plineProc(self, *args)

    def polylineProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_polylineProc(self, *args)

    def polygonProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_polygonProc(self, *args)

    def xlineProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_xlineProc(self, *args)

    def rayProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_rayProc(self, *args)

    def meshProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_meshProc(self, *args)

    def shellProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_shellProc(self, *args)

    def circleProc2(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_circleProc2(self, *args)

    def circleProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_circleProc(self, *args)

    def circularArcProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_circularArcProc(self, *args)

    def ellipArcProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_ellipArcProc(self, *args)

    def nurbsProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_nurbsProc(self, *args)

    def textProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_textProc(self, *args)

    def textProc2(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_textProc2(self, *args)

    def shapeProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_shapeProc(self, *args)

    def rasterImageProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_rasterImageProc(self, *args)

    def metafileProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_metafileProc(self, *args)

    def xlineProc2(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_xlineProc2(self, *args)

    def rayProc2(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_rayProc2(self, *args)

    def setExtentsProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_setExtentsProc(self, *args)
    kTtfCharProcEnable = _ODA_Kernel_Py3.OdGiConveyorGeometry_kTtfCharProcEnable
    kTtfCharProcBoundBlock = _ODA_Kernel_Py3.OdGiConveyorGeometry_kTtfCharProcBoundBlock

    def ttfCharProcFlags(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_ttfCharProcFlags(self, *args)

    def ttfCharProc(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_ttfCharProc(self, *args)

    def ttfPolyDrawProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_ttfPolyDrawProc(self, *args)
    kBoundaryProcXform = _ODA_Kernel_Py3.OdGiConveyorGeometry_kBoundaryProcXform
    kBoundaryProcXformNonUni = _ODA_Kernel_Py3.OdGiConveyorGeometry_kBoundaryProcXformNonUni
    kBoundaryProcProjection = _ODA_Kernel_Py3.OdGiConveyorGeometry_kBoundaryProcProjection
    kBoundaryProcClip = _ODA_Kernel_Py3.OdGiConveyorGeometry_kBoundaryProcClip
    kBoundaryProcClipFull = _ODA_Kernel_Py3.OdGiConveyorGeometry_kBoundaryProcClipFull

    def conveyorBoundaryInfoProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_conveyorBoundaryInfoProc(self, *args)

    def polypointProc2(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_polypointProc2(self, *args)

    def rowOfDotsProc2(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_rowOfDotsProc2(self, *args)

    def polypointProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_polypointProc(self, *args)

    def polyPolygonProc2(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_polyPolygonProc2(self, *args)

    def rowOfDotsProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_rowOfDotsProc(self, *args)

    def pointCloudProc2(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_pointCloudProc2(self, *args)

    def pointCloudProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_pointCloudProc(self, *args)

    def edgeProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorGeometry_edgeProc(self, *args)

# Register OdGiConveyorGeometry in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiConveyorGeometry_swigregister(OdGiConveyorGeometry)


def OdRound(*args) -> "double":
    return _ODA_Kernel_Py3.OdRound(*args)

def OdRoundToLong(*args) -> "long":
    return _ODA_Kernel_Py3.OdRoundToLong(*args)

def OdTruncateToLong(*args) -> "long":
    return _ODA_Kernel_Py3.OdTruncateToLong(*args)
class OdError(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdError_setContext(self, *args)

    def context(self, *args) -> "OdErrorContext *":
        return _ODA_Kernel_Py3.OdError_context(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdError_swiginit(self, _ODA_Kernel_Py3.new_OdError(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdError

    def code(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdError_code(self, *args)

    def description(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdError_description(self, *args)

    def attachPreviousError(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdError_attachPreviousError(self, *args)

# Register OdError in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdError_swigregister(OdError)

CP_UNDEFINED = _ODA_Kernel_Py3.CP_UNDEFINED
CP_ASCII = _ODA_Kernel_Py3.CP_ASCII
CP_8859_1 = _ODA_Kernel_Py3.CP_8859_1
CP_8859_2 = _ODA_Kernel_Py3.CP_8859_2
CP_8859_3 = _ODA_Kernel_Py3.CP_8859_3
CP_8859_4 = _ODA_Kernel_Py3.CP_8859_4
CP_8859_5 = _ODA_Kernel_Py3.CP_8859_5
CP_8859_6 = _ODA_Kernel_Py3.CP_8859_6
CP_8859_7 = _ODA_Kernel_Py3.CP_8859_7
CP_8859_8 = _ODA_Kernel_Py3.CP_8859_8
CP_8859_9 = _ODA_Kernel_Py3.CP_8859_9
CP_DOS437 = _ODA_Kernel_Py3.CP_DOS437
CP_DOS850 = _ODA_Kernel_Py3.CP_DOS850
CP_DOS852 = _ODA_Kernel_Py3.CP_DOS852
CP_DOS855 = _ODA_Kernel_Py3.CP_DOS855
CP_DOS857 = _ODA_Kernel_Py3.CP_DOS857
CP_DOS860 = _ODA_Kernel_Py3.CP_DOS860
CP_DOS861 = _ODA_Kernel_Py3.CP_DOS861
CP_DOS863 = _ODA_Kernel_Py3.CP_DOS863
CP_DOS864 = _ODA_Kernel_Py3.CP_DOS864
CP_DOS865 = _ODA_Kernel_Py3.CP_DOS865
CP_DOS869 = _ODA_Kernel_Py3.CP_DOS869
CP_DOS932 = _ODA_Kernel_Py3.CP_DOS932
CP_MACINTOSH = _ODA_Kernel_Py3.CP_MACINTOSH
CP_BIG5 = _ODA_Kernel_Py3.CP_BIG5
CP_KSC5601 = _ODA_Kernel_Py3.CP_KSC5601
CP_JOHAB = _ODA_Kernel_Py3.CP_JOHAB
CP_DOS866 = _ODA_Kernel_Py3.CP_DOS866
CP_ANSI_1250 = _ODA_Kernel_Py3.CP_ANSI_1250
CP_ANSI_1251 = _ODA_Kernel_Py3.CP_ANSI_1251
CP_ANSI_1252 = _ODA_Kernel_Py3.CP_ANSI_1252
CP_GB2312 = _ODA_Kernel_Py3.CP_GB2312
CP_ANSI_1253 = _ODA_Kernel_Py3.CP_ANSI_1253
CP_ANSI_1254 = _ODA_Kernel_Py3.CP_ANSI_1254
CP_ANSI_1255 = _ODA_Kernel_Py3.CP_ANSI_1255
CP_ANSI_1256 = _ODA_Kernel_Py3.CP_ANSI_1256
CP_ANSI_1257 = _ODA_Kernel_Py3.CP_ANSI_1257
CP_ANSI_874 = _ODA_Kernel_Py3.CP_ANSI_874
CP_ANSI_932 = _ODA_Kernel_Py3.CP_ANSI_932
CP_ANSI_936 = _ODA_Kernel_Py3.CP_ANSI_936
CP_ANSI_949 = _ODA_Kernel_Py3.CP_ANSI_949
CP_ANSI_950 = _ODA_Kernel_Py3.CP_ANSI_950
CP_ANSI_1361 = _ODA_Kernel_Py3.CP_ANSI_1361
CP_ANSI_1200 = _ODA_Kernel_Py3.CP_ANSI_1200
CP_ANSI_1258 = _ODA_Kernel_Py3.CP_ANSI_1258
CP_UTF_8 = _ODA_Kernel_Py3.CP_UTF_8
CP_CNT = _ODA_Kernel_Py3.CP_CNT
class OdGeInterval(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeInterval_swiginit(self, _ODA_Kernel_Py3.new_OdGeInterval(*args))

    def lowerBound(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeInterval_lowerBound(self, *args)

    def upperBound(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeInterval_upperBound(self, *args)

    def middle(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeInterval_middle(self, *args)

    def element(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeInterval_element(self, *args)

    def getBounds(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeInterval_getBounds(self, *args)

    def getEnd(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeInterval_getEnd(self, *args)

    def length(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeInterval_length(self, *args)

    def tolerance(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeInterval_tolerance(self, *args)

    def eval(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeInterval_eval(self, *args)

    def set(self, *args) -> "OdGeInterval &":
        return _ODA_Kernel_Py3.OdGeInterval_set(self, *args)

    def setUpper(self, *args) -> "OdGeInterval &":
        return _ODA_Kernel_Py3.OdGeInterval_setUpper(self, *args)

    def setLower(self, *args) -> "OdGeInterval &":
        return _ODA_Kernel_Py3.OdGeInterval_setLower(self, *args)

    def setTolerance(self, *args) -> "OdGeInterval &":
        return _ODA_Kernel_Py3.OdGeInterval_setTolerance(self, *args)

    def getMerge(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeInterval_getMerge(self, *args)

    def subtract(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeInterval_subtract(self, *args)

    def intersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeInterval_intersectWith(self, *args)

    def finiteIntersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeInterval_finiteIntersectWith(self, *args)

    def isBounded(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeInterval_isBounded(self, *args)

    def isBoundedAbove(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeInterval_isBoundedAbove(self, *args)

    def isBoundedBelow(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeInterval_isBoundedBelow(self, *args)

    def isUnBounded(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeInterval_isUnBounded(self, *args)

    def isSingleton(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeInterval_isSingleton(self, *args)

    def isDisjoint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeInterval_isDisjoint(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeInterval_contains(self, *args)

    def clamp(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeInterval_clamp(self, *args)

    def isContinuousAtUpper(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeInterval_isContinuousAtUpper(self, *args)

    def isOverlapAtUpper(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeInterval_isOverlapAtUpper(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeInterval___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeInterval___ne__(self, *args)

    def isEqualAtUpper(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeInterval_isEqualAtUpper(self, *args)

    def isEqualAtLower(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeInterval_isEqualAtLower(self, *args)

    def isPeriodicallyOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeInterval_isPeriodicallyOn(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeInterval

# Register OdGeInterval in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeInterval_swigregister(OdGeInterval)

class OdGiViewportDraw(OdGiCommonDraw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiViewportDraw >":
        return _ODA_Kernel_Py3.OdGiViewportDraw_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiViewportDraw_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiViewportDraw_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiViewportDraw_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiViewportDraw >":
        return _ODA_Kernel_Py3.OdGiViewportDraw_createObject(*args)

    def viewport(self, *args) -> "OdGiViewport &":
        return _ODA_Kernel_Py3.OdGiViewportDraw_viewport(self, *args)

    def geometry(self, *args) -> "OdGiViewportGeometry &":
        return _ODA_Kernel_Py3.OdGiViewportDraw_geometry(self, *args)

    def sequenceNumber(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiViewportDraw_sequenceNumber(self, *args)

    def isValidId(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiViewportDraw_isValidId(self, *args)

    def viewportObjectId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiViewportDraw_viewportObjectId(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiViewportDraw

# Register OdGiViewportDraw in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiViewportDraw_swigregister(OdGiViewportDraw)

def OdGiViewportDraw_cast(*args) -> "OdSmartPtr< OdGiViewportDraw >":
    return _ODA_Kernel_Py3.OdGiViewportDraw_cast(*args)

def OdGiViewportDraw_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiViewportDraw_desc(*args)

def OdGiViewportDraw_createObject(*args) -> "OdSmartPtr< OdGiViewportDraw >":
    return _ODA_Kernel_Py3.OdGiViewportDraw_createObject(*args)

class OdGiWorldDraw(OdGiCommonDraw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiWorldDraw >":
        return _ODA_Kernel_Py3.OdGiWorldDraw_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiWorldDraw_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiWorldDraw_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiWorldDraw_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiWorldDraw >":
        return _ODA_Kernel_Py3.OdGiWorldDraw_createObject(*args)

    def geometry(self, *args) -> "OdGiWorldGeometry &":
        return _ODA_Kernel_Py3.OdGiWorldDraw_geometry(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiWorldDraw

# Register OdGiWorldDraw in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiWorldDraw_swigregister(OdGiWorldDraw)

def OdGiWorldDraw_cast(*args) -> "OdSmartPtr< OdGiWorldDraw >":
    return _ODA_Kernel_Py3.OdGiWorldDraw_cast(*args)

def OdGiWorldDraw_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiWorldDraw_desc(*args)

def OdGiWorldDraw_createObject(*args) -> "OdSmartPtr< OdGiWorldDraw >":
    return _ODA_Kernel_Py3.OdGiWorldDraw_createObject(*args)

class OdGiEmptyGeometry(OdGiConveyorGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kVoid = property(_ODA_Kernel_Py3.OdGiEmptyGeometry_kVoid_get, _ODA_Kernel_Py3.OdGiEmptyGeometry_kVoid_set)

    def plineProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEmptyGeometry_plineProc(self, *args)

    def circleProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEmptyGeometry_circleProc(self, *args)

    def circularArcProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEmptyGeometry_circularArcProc(self, *args)

    def polylineProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEmptyGeometry_polylineProc(self, *args)

    def polygonProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEmptyGeometry_polygonProc(self, *args)

    def meshProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEmptyGeometry_meshProc(self, *args)

    def shellProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEmptyGeometry_shellProc(self, *args)

    def textProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEmptyGeometry_textProc(self, *args)

    def shapeProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEmptyGeometry_shapeProc(self, *args)

    def xlineProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEmptyGeometry_xlineProc(self, *args)

    def rayProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEmptyGeometry_rayProc(self, *args)

    def nurbsProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEmptyGeometry_nurbsProc(self, *args)

    def ellipArcProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEmptyGeometry_ellipArcProc(self, *args)

    def rasterImageProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEmptyGeometry_rasterImageProc(self, *args)

    def metafileProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEmptyGeometry_metafileProc(self, *args)

    def polypointProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEmptyGeometry_polypointProc(self, *args)

    def rowOfDotsProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEmptyGeometry_rowOfDotsProc(self, *args)

    def pointCloudProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEmptyGeometry_pointCloudProc(self, *args)

    def edgeProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEmptyGeometry_edgeProc(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiEmptyGeometry_swiginit(self, _ODA_Kernel_Py3.new_OdGiEmptyGeometry(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiEmptyGeometry

# Register OdGiEmptyGeometry in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiEmptyGeometry_swigregister(OdGiEmptyGeometry)


def odDToStr(*args) -> "OdString":
    return _ODA_Kernel_Py3.odDToStr(*args)

def odStrToD(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.odStrToD(*args)
INVALIDEXTENTS = _ODA_Kernel_Py3.INVALIDEXTENTS
class OdGeExtents3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeExtents3d_swiginit(self, _ODA_Kernel_Py3.new_OdGeExtents3d(*args))

    def minPoint(self, *args) -> "OdGePoint3d const &":
        return _ODA_Kernel_Py3.OdGeExtents3d_minPoint(self, *args)

    def maxPoint(self, *args) -> "OdGePoint3d const &":
        return _ODA_Kernel_Py3.OdGeExtents3d_maxPoint(self, *args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeExtents3d_set(self, *args)

    def comparingSet(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeExtents3d_comparingSet(self, *args)

    def addPoint(self, *args) -> "OdGeExtents3d &":
        return _ODA_Kernel_Py3.OdGeExtents3d_addPoint(self, *args)

    def addPoints(self, *args) -> "OdGeExtents3d &":
        return _ODA_Kernel_Py3.OdGeExtents3d_addPoints(self, *args)

    def addExt(self, *args) -> "OdGeExtents3d &":
        return _ODA_Kernel_Py3.OdGeExtents3d_addExt(self, *args)

    def isValidExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExtents3d_isValidExtents(self, *args)

    def expandBy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeExtents3d_expandBy(self, *args)

    def transformBy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeExtents3d_transformBy(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExtents3d_contains(self, *args)

    def isDisjoint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExtents3d_isDisjoint(self, *args)

    def isDisjointEuclidean(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExtents3d_isDisjointEuclidean(self, *args)

    def distanceTo(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeExtents3d_distanceTo(self, *args)
    kIntersectUnknown = _ODA_Kernel_Py3.OdGeExtents3d_kIntersectUnknown
    kIntersectNot = _ODA_Kernel_Py3.OdGeExtents3d_kIntersectNot
    kIntersectOpIn = _ODA_Kernel_Py3.OdGeExtents3d_kIntersectOpIn
    kIntersectOpOut = _ODA_Kernel_Py3.OdGeExtents3d_kIntersectOpOut
    kIntersectOk = _ODA_Kernel_Py3.OdGeExtents3d_kIntersectOk

    def intersectWith(self, *args) -> "OdGeExtents3d::IntersectionStatus":
        return _ODA_Kernel_Py3.OdGeExtents3d_intersectWith(self, *args)

    def isWithinRange(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExtents3d_isWithinRange(self, *args)

    def center(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeExtents3d_center(self, *args)

    def diagonal(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeExtents3d_diagonal(self, *args)
    kConvert2dPlaneXY = _ODA_Kernel_Py3.OdGeExtents3d_kConvert2dPlaneXY
    kConvert2dPlaneXZ = _ODA_Kernel_Py3.OdGeExtents3d_kConvert2dPlaneXZ
    kConvert2dPlaneYX = _ODA_Kernel_Py3.OdGeExtents3d_kConvert2dPlaneYX
    kConvert2dPlaneYZ = _ODA_Kernel_Py3.OdGeExtents3d_kConvert2dPlaneYZ
    kConvert2dPlaneZX = _ODA_Kernel_Py3.OdGeExtents3d_kConvert2dPlaneZX
    kConvert2dPlaneZY = _ODA_Kernel_Py3.OdGeExtents3d_kConvert2dPlaneZY

    def convert2d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeExtents3d_convert2d(self, *args)

    def setFrom2d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeExtents3d_setFrom2d(self, *args)

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExtents3d_isEqualTo(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExtents3d___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExtents3d___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeExtents3d

# Register OdGeExtents3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeExtents3d_swigregister(OdGeExtents3d)
OdGeExtents3d.kInvalid = _ODA_Kernel_Py3.cvar.OdGeExtents3d_kInvalid

class OdGeEntity2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeEntity2d

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEntity2d_isKindOf(self, *args)

    def type(self, *args) -> "OdGe::EntityId":
        return _ODA_Kernel_Py3.OdGeEntity2d_type(self, *args)

    def copy(self, *args) -> "OdGeEntity2d *":
        return _ODA_Kernel_Py3.OdGeEntity2d_copy(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEntity2d___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEntity2d___ne__(self, *args)

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEntity2d_isEqualTo(self, *args)

    def transformBy(self, *args) -> "OdGeEntity2d &":
        return _ODA_Kernel_Py3.OdGeEntity2d_transformBy(self, *args)

    def translateBy(self, *args) -> "OdGeEntity2d &":
        return _ODA_Kernel_Py3.OdGeEntity2d_translateBy(self, *args)

    def rotateBy(self, *args) -> "OdGeEntity2d &":
        return _ODA_Kernel_Py3.OdGeEntity2d_rotateBy(self, *args)

    def mirror(self, *args) -> "OdGeEntity2d &":
        return _ODA_Kernel_Py3.OdGeEntity2d_mirror(self, *args)

    def scaleBy(self, *args) -> "OdGeEntity2d &":
        return _ODA_Kernel_Py3.OdGeEntity2d_scaleBy(self, *args)

    def isOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEntity2d_isOn(self, *args)

# Register OdGeEntity2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeEntity2d_swigregister(OdGeEntity2d)

class OdGiContextualColors(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiContextualColors >":
        return _ODA_Kernel_Py3.OdGiContextualColors_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiContextualColors_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiContextualColors_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiContextualColors_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiContextualColors >":
        return _ODA_Kernel_Py3.OdGiContextualColors_createObject(*args)

    def gridMajorLines(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiContextualColors_gridMajorLines(self, *args)

    def gridMinorLines(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiContextualColors_gridMinorLines(self, *args)

    def gridAxisLines(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiContextualColors_gridAxisLines(self, *args)

    def gridMajorLineTintXYZ(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiContextualColors_gridMajorLineTintXYZ(self, *args)

    def gridMinorLineTintXYZ(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiContextualColors_gridMinorLineTintXYZ(self, *args)

    def gridAxisLineTintXYZ(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiContextualColors_gridAxisLineTintXYZ(self, *args)

    def lightGlyphs(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiContextualColors_lightGlyphs(self, *args)

    def lightHotspot(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiContextualColors_lightHotspot(self, *args)

    def lightFalloff(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiContextualColors_lightFalloff(self, *args)

    def lightStartLimit(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiContextualColors_lightStartLimit(self, *args)

    def lightEndLimit(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiContextualColors_lightEndLimit(self, *args)

    def lightShapeColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiContextualColors_lightShapeColor(self, *args)

    def lightDistanceColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiContextualColors_lightDistanceColor(self, *args)

    def webMeshColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiContextualColors_webMeshColor(self, *args)

    def webMeshMissingColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiContextualColors_webMeshMissingColor(self, *args)

    def cameraGlyphs(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiContextualColors_cameraGlyphs(self, *args)

    def cameraFrustrum(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiContextualColors_cameraFrustrum(self, *args)

    def cameraClipping(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiContextualColors_cameraClipping(self, *args)

    def setContextFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiContextualColors_setContextFlags(self, *args)

    def flagsSet(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiContextualColors_flagsSet(self, *args)
    kGridMajorLinesColor = _ODA_Kernel_Py3.OdGiContextualColors_kGridMajorLinesColor
    kGridMinorLinesColor = _ODA_Kernel_Py3.OdGiContextualColors_kGridMinorLinesColor
    kGridAxisLinesColor = _ODA_Kernel_Py3.OdGiContextualColors_kGridAxisLinesColor
    kLightGlyphsColor = _ODA_Kernel_Py3.OdGiContextualColors_kLightGlyphsColor
    kLightHotspotColor = _ODA_Kernel_Py3.OdGiContextualColors_kLightHotspotColor
    kLightFalloffColor = _ODA_Kernel_Py3.OdGiContextualColors_kLightFalloffColor
    kLightStartLimitColor = _ODA_Kernel_Py3.OdGiContextualColors_kLightStartLimitColor
    kLightEndLimitColor = _ODA_Kernel_Py3.OdGiContextualColors_kLightEndLimitColor
    kLightShapeColor = _ODA_Kernel_Py3.OdGiContextualColors_kLightShapeColor
    kLightDistanceColor = _ODA_Kernel_Py3.OdGiContextualColors_kLightDistanceColor
    kWebMeshColor = _ODA_Kernel_Py3.OdGiContextualColors_kWebMeshColor
    kWebMeshMissingColor = _ODA_Kernel_Py3.OdGiContextualColors_kWebMeshMissingColor
    kCameraGlyphsColor = _ODA_Kernel_Py3.OdGiContextualColors_kCameraGlyphsColor
    kCameraFrustrumColor = _ODA_Kernel_Py3.OdGiContextualColors_kCameraFrustrumColor
    kCameraClippingColor = _ODA_Kernel_Py3.OdGiContextualColors_kCameraClippingColor
    kNumColors = _ODA_Kernel_Py3.OdGiContextualColors_kNumColors
    kGridMajorLineTint = _ODA_Kernel_Py3.OdGiContextualColors_kGridMajorLineTint
    kGridMinorLineTint = _ODA_Kernel_Py3.OdGiContextualColors_kGridMinorLineTint
    kGridAxisLineTint = _ODA_Kernel_Py3.OdGiContextualColors_kGridAxisLineTint
    kNumTintFlags = _ODA_Kernel_Py3.OdGiContextualColors_kNumTintFlags

    def contextualColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiContextualColors_contextualColor(self, *args)

    def contextualColorTint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiContextualColors_contextualColorTint(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiContextualColors

# Register OdGiContextualColors in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiContextualColors_swigregister(OdGiContextualColors)

def OdGiContextualColors_cast(*args) -> "OdSmartPtr< OdGiContextualColors >":
    return _ODA_Kernel_Py3.OdGiContextualColors_cast(*args)

def OdGiContextualColors_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiContextualColors_desc(*args)

def OdGiContextualColors_createObject(*args) -> "OdSmartPtr< OdGiContextualColors >":
    return _ODA_Kernel_Py3.OdGiContextualColors_createObject(*args)

class OdGiContextualColorsImpl(OdGiContextualColors):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiContextualColorsImpl >":
        return _ODA_Kernel_Py3.OdGiContextualColorsImpl_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiContextualColorsImpl_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiContextualColorsImpl_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiContextualColorsImpl_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiContextualColorsImpl >":
        return _ODA_Kernel_Py3.OdGiContextualColorsImpl_createObject(*args)
    kVisualTypeNotSet = _ODA_Kernel_Py3.OdGiContextualColorsImpl_kVisualTypeNotSet
    k2dModel = _ODA_Kernel_Py3.OdGiContextualColorsImpl_k2dModel
    kLayout = _ODA_Kernel_Py3.OdGiContextualColorsImpl_kLayout
    k3dParallel = _ODA_Kernel_Py3.OdGiContextualColorsImpl_k3dParallel
    k3dPerspective = _ODA_Kernel_Py3.OdGiContextualColorsImpl_k3dPerspective
    kBlock = _ODA_Kernel_Py3.OdGiContextualColorsImpl_kBlock
    kNumVisualTypes = _ODA_Kernel_Py3.OdGiContextualColorsImpl_kNumVisualTypes

    def setVisualType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiContextualColorsImpl_setVisualType(self, *args)

    def visualType(self, *args) -> "OdGiContextualColorsImpl::VisualType":
        return _ODA_Kernel_Py3.OdGiContextualColorsImpl_visualType(self, *args)

    def setContextualColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiContextualColorsImpl_setContextualColor(self, *args)

    def setContextualColorTint(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiContextualColorsImpl_setContextualColorTint(self, *args)

    def setDefaultForType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiContextualColorsImpl_setDefaultForType(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiContextualColorsImpl

# Register OdGiContextualColorsImpl in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiContextualColorsImpl_swigregister(OdGiContextualColorsImpl)

def OdGiContextualColorsImpl_cast(*args) -> "OdSmartPtr< OdGiContextualColorsImpl >":
    return _ODA_Kernel_Py3.OdGiContextualColorsImpl_cast(*args)

def OdGiContextualColorsImpl_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiContextualColorsImpl_desc(*args)

def OdGiContextualColorsImpl_createObject(*args) -> "OdSmartPtr< OdGiContextualColorsImpl >":
    return _ODA_Kernel_Py3.OdGiContextualColorsImpl_createObject(*args)

class OdGiContextualColorsRedir(OdGiContextualColors):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiContextualColorsRedir >":
        return _ODA_Kernel_Py3.OdGiContextualColorsRedir_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiContextualColorsRedir_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiContextualColorsRedir_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiContextualColorsRedir_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiContextualColorsRedir >":
        return _ODA_Kernel_Py3.OdGiContextualColorsRedir_createObject(*args)

    def setRedirectionObject(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiContextualColorsRedir_setRedirectionObject(self, *args)

    def redirectionObject(self, *args) -> "OdGiContextualColors *":
        return _ODA_Kernel_Py3.OdGiContextualColorsRedir_redirectionObject(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiContextualColorsRedir

# Register OdGiContextualColorsRedir in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiContextualColorsRedir_swigregister(OdGiContextualColorsRedir)

def OdGiContextualColorsRedir_cast(*args) -> "OdSmartPtr< OdGiContextualColorsRedir >":
    return _ODA_Kernel_Py3.OdGiContextualColorsRedir_cast(*args)

def OdGiContextualColorsRedir_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiContextualColorsRedir_desc(*args)

def OdGiContextualColorsRedir_createObject(*args) -> "OdSmartPtr< OdGiContextualColorsRedir >":
    return _ODA_Kernel_Py3.OdGiContextualColorsRedir_createObject(*args)

SCALAR_MIN = _ODA_Kernel_Py3.SCALAR_MIN
SCALAR_MAX = _ODA_Kernel_Py3.SCALAR_MAX
class OdGsDCPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Maximum = _ODA_Kernel_Py3.OdGsDCPoint_Maximum
    Minimum = _ODA_Kernel_Py3.OdGsDCPoint_Minimum

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsDCPoint_swiginit(self, _ODA_Kernel_Py3.new_OdGsDCPoint(*args))

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDCPoint___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDCPoint___ne__(self, *args)
    x = property(_ODA_Kernel_Py3.OdGsDCPoint_x_get, _ODA_Kernel_Py3.OdGsDCPoint_x_set)
    y = property(_ODA_Kernel_Py3.OdGsDCPoint_y_get, _ODA_Kernel_Py3.OdGsDCPoint_y_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsDCPoint

# Register OdGsDCPoint in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsDCPoint_swigregister(OdGsDCPoint)

class OdGsDCRect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Null = _ODA_Kernel_Py3.OdGsDCRect_Null

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsDCRect_swiginit(self, _ODA_Kernel_Py3.new_OdGsDCRect(*args))

    def __ior__(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDCRect___ior__(self, *args)

    def __iand__(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDCRect___iand__(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDCRect___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDCRect___ne__(self, *args)

    def set_null(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDCRect_set_null(self, *args)

    def is_null(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDCRect_is_null(self, *args)

    def within(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDCRect_within(self, *args)

    def offset(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDCRect_offset(self, *args)

    def intersectWith(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDCRect_intersectWith(self, *args)

    def normalize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDCRect_normalize(self, *args)

    def isDisjoint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDCRect_isDisjoint(self, *args)
    m_min = property(_ODA_Kernel_Py3.OdGsDCRect_m_min_get, _ODA_Kernel_Py3.OdGsDCRect_m_min_set)
    m_max = property(_ODA_Kernel_Py3.OdGsDCRect_m_max_get, _ODA_Kernel_Py3.OdGsDCRect_m_max_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsDCRect

# Register OdGsDCRect in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsDCRect_swigregister(OdGsDCRect)

class OdGsDCRectDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsDCRectDouble_swiginit(self, _ODA_Kernel_Py3.new_OdGsDCRectDouble(*args))

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDCRectDouble___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDCRectDouble___ne__(self, *args)

    def round(self, *args) -> "OdGsDCRect":
        return _ODA_Kernel_Py3.OdGsDCRectDouble_round(self, *args)
    m_min = property(_ODA_Kernel_Py3.OdGsDCRectDouble_m_min_get, _ODA_Kernel_Py3.OdGsDCRectDouble_m_min_set)
    m_max = property(_ODA_Kernel_Py3.OdGsDCRectDouble_m_max_get, _ODA_Kernel_Py3.OdGsDCRectDouble_m_max_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsDCRectDouble

# Register OdGsDCRectDouble in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsDCRectDouble_swigregister(OdGsDCRectDouble)

kMfDisplay = _ODA_Kernel_Py3.kMfDisplay
kMfSelect = _ODA_Kernel_Py3.kMfSelect
kMfNested = _ODA_Kernel_Py3.kMfNested
kMfExtents = _ODA_Kernel_Py3.kMfExtents
class OdRxModule(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxModule >":
        return _ODA_Kernel_Py3.OdRxModule_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxModule_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxModule_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxModule_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxModule >":
        return _ODA_Kernel_Py3.OdRxModule_createObject(*args)

    def sysData(self, *args) -> "void *":
        return _ODA_Kernel_Py3.OdRxModule_sysData(self, *args)

    def deleteModule(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxModule_deleteModule(self, *args)

    def initApp(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxModule_initApp(self, *args)

    def uninitApp(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxModule_uninitApp(self, *args)

    def moduleName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxModule_moduleName(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxModule

# Register OdRxModule in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxModule_swigregister(OdRxModule)

def OdRxModule_cast(*args) -> "OdSmartPtr< OdRxModule >":
    return _ODA_Kernel_Py3.OdRxModule_cast(*args)

def OdRxModule_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxModule_desc(*args)

def OdRxModule_createObject(*args) -> "OdSmartPtr< OdRxModule >":
    return _ODA_Kernel_Py3.OdRxModule_createObject(*args)

class OdRxIterator(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxIterator >":
        return _ODA_Kernel_Py3.OdRxIterator_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxIterator_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxIterator_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxIterator >":
        return _ODA_Kernel_Py3.OdRxIterator_createObject(*args)

    def done(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxIterator_done(self, *args)

    def next(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxIterator_next(self, *args)

    def object(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdRxIterator_object(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxIterator

# Register OdRxIterator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxIterator_swigregister(OdRxIterator)

def OdRxIterator_cast(*args) -> "OdSmartPtr< OdRxIterator >":
    return _ODA_Kernel_Py3.OdRxIterator_cast(*args)

def OdRxIterator_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxIterator_desc(*args)

def OdRxIterator_createObject(*args) -> "OdSmartPtr< OdRxIterator >":
    return _ODA_Kernel_Py3.OdRxIterator_createObject(*args)

class OdCharMapper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def initialize(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdCharMapper_initialize(*args)

    @staticmethod
    def unicodeToCodepage(*args) -> "OdResult":
        return _ODA_Kernel_Py3.OdCharMapper_unicodeToCodepage(*args)

    @staticmethod
    def unicodeToCodepage2(*args) -> "OdResult":
        return _ODA_Kernel_Py3.OdCharMapper_unicodeToCodepage2(*args)

    @staticmethod
    def codepageToUnicode(*args) -> "OdResult":
        return _ODA_Kernel_Py3.OdCharMapper_codepageToUnicode(*args)

    @staticmethod
    def isLeadByte(*args) -> "bool":
        return _ODA_Kernel_Py3.OdCharMapper_isLeadByte(*args)

    @staticmethod
    def codepageDescToId(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdCharMapper_codepageDescToId(*args)

    @staticmethod
    def codepageIdToDesc(*args) -> "OdString &":
        return _ODA_Kernel_Py3.OdCharMapper_codepageIdToDesc(*args)

    @staticmethod
    def numValidCodepages(*args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdCharMapper_numValidCodepages(*args)

    @staticmethod
    def ansiCpToAcadCp(*args) -> "OdCodePageId":
        return _ODA_Kernel_Py3.OdCharMapper_ansiCpToAcadCp(*args)

    @staticmethod
    def acadCpToAnsiCp(*args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdCharMapper_acadCpToAnsiCp(*args)

    @staticmethod
    def getCodepageByCharset(*args) -> "OdCodePageId":
        return _ODA_Kernel_Py3.OdCharMapper_getCodepageByCharset(*args)

    @staticmethod
    def getReorderCharsetByChar(*args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdCharMapper_getReorderCharsetByChar(*args)

    @staticmethod
    def isConversionSupported(*args) -> "bool":
        return _ODA_Kernel_Py3.OdCharMapper_isConversionSupported(*args)

    @staticmethod
    def wideCharToMultiByte(*args) -> "void":
        return _ODA_Kernel_Py3.OdCharMapper_wideCharToMultiByte(*args)

    @staticmethod
    def multiByteToWideChar(*args) -> "void":
        return _ODA_Kernel_Py3.OdCharMapper_multiByteToWideChar(*args)

    @staticmethod
    def utf8ToUnicode(*args) -> "bool":
        return _ODA_Kernel_Py3.OdCharMapper_utf8ToUnicode(*args)

    @staticmethod
    def unicodeToUtf8(*args) -> "void":
        return _ODA_Kernel_Py3.OdCharMapper_unicodeToUtf8(*args)

    @staticmethod
    def addBigFontWithIndex(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdCharMapper_addBigFontWithIndex(*args)

    @staticmethod
    def addBigFontWithCodepage(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdCharMapper_addBigFontWithCodepage(*args)

    @staticmethod
    def addBigFonts(*args) -> "OdResult":
        return _ODA_Kernel_Py3.OdCharMapper_addBigFonts(*args)

    @staticmethod
    def getCpByBigFont(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdCharMapper_getCpByBigFont(*args)

    @staticmethod
    def getCpIndexByBigFont(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdCharMapper_getCpIndexByBigFont(*args)

    @staticmethod
    def getCheckSumAnsi(*args) -> "double":
        return _ODA_Kernel_Py3.OdCharMapper_getCheckSumAnsi(*args)

    @staticmethod
    def getCheckSumUnicode(*args) -> "double":
        return _ODA_Kernel_Py3.OdCharMapper_getCheckSumUnicode(*args)

    @staticmethod
    def convertCIFcoding(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdCharMapper_convertCIFcoding(*args)

    @staticmethod
    def convertAlphaNumJapanese(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdCharMapper_convertAlphaNumJapanese(*args)

    @staticmethod
    def containsSpecialSequence(*args) -> "OdString &":
        return _ODA_Kernel_Py3.OdCharMapper_containsSpecialSequence(*args)

    @staticmethod
    def embedTextRawData(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdCharMapper_embedTextRawData(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdCharMapper

# Register OdCharMapper in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdCharMapper_swigregister(OdCharMapper)

def OdCharMapper_initialize(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdCharMapper_initialize(*args)

def OdCharMapper_unicodeToCodepage(*args) -> "OdResult":
    return _ODA_Kernel_Py3.OdCharMapper_unicodeToCodepage(*args)

def OdCharMapper_unicodeToCodepage2(*args) -> "OdResult":
    return _ODA_Kernel_Py3.OdCharMapper_unicodeToCodepage2(*args)

def OdCharMapper_codepageToUnicode(*args) -> "OdResult":
    return _ODA_Kernel_Py3.OdCharMapper_codepageToUnicode(*args)

def OdCharMapper_isLeadByte(*args) -> "bool":
    return _ODA_Kernel_Py3.OdCharMapper_isLeadByte(*args)

def OdCharMapper_codepageDescToId(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdCharMapper_codepageDescToId(*args)

def OdCharMapper_codepageIdToDesc(*args) -> "OdString &":
    return _ODA_Kernel_Py3.OdCharMapper_codepageIdToDesc(*args)

def OdCharMapper_numValidCodepages(*args) -> "OdUInt32":
    return _ODA_Kernel_Py3.OdCharMapper_numValidCodepages(*args)

def OdCharMapper_ansiCpToAcadCp(*args) -> "OdCodePageId":
    return _ODA_Kernel_Py3.OdCharMapper_ansiCpToAcadCp(*args)

def OdCharMapper_acadCpToAnsiCp(*args) -> "OdUInt32":
    return _ODA_Kernel_Py3.OdCharMapper_acadCpToAnsiCp(*args)

def OdCharMapper_getCodepageByCharset(*args) -> "OdCodePageId":
    return _ODA_Kernel_Py3.OdCharMapper_getCodepageByCharset(*args)

def OdCharMapper_getReorderCharsetByChar(*args) -> "OdUInt16":
    return _ODA_Kernel_Py3.OdCharMapper_getReorderCharsetByChar(*args)

def OdCharMapper_isConversionSupported(*args) -> "bool":
    return _ODA_Kernel_Py3.OdCharMapper_isConversionSupported(*args)

def OdCharMapper_wideCharToMultiByte(*args) -> "void":
    return _ODA_Kernel_Py3.OdCharMapper_wideCharToMultiByte(*args)

def OdCharMapper_multiByteToWideChar(*args) -> "void":
    return _ODA_Kernel_Py3.OdCharMapper_multiByteToWideChar(*args)

def OdCharMapper_utf8ToUnicode(*args) -> "bool":
    return _ODA_Kernel_Py3.OdCharMapper_utf8ToUnicode(*args)

def OdCharMapper_unicodeToUtf8(*args) -> "void":
    return _ODA_Kernel_Py3.OdCharMapper_unicodeToUtf8(*args)

def OdCharMapper_addBigFontWithIndex(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdCharMapper_addBigFontWithIndex(*args)

def OdCharMapper_addBigFontWithCodepage(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdCharMapper_addBigFontWithCodepage(*args)

def OdCharMapper_addBigFonts(*args) -> "OdResult":
    return _ODA_Kernel_Py3.OdCharMapper_addBigFonts(*args)

def OdCharMapper_getCpByBigFont(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdCharMapper_getCpByBigFont(*args)

def OdCharMapper_getCpIndexByBigFont(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdCharMapper_getCpIndexByBigFont(*args)

def OdCharMapper_getCheckSumAnsi(*args) -> "double":
    return _ODA_Kernel_Py3.OdCharMapper_getCheckSumAnsi(*args)

def OdCharMapper_getCheckSumUnicode(*args) -> "double":
    return _ODA_Kernel_Py3.OdCharMapper_getCheckSumUnicode(*args)

def OdCharMapper_convertCIFcoding(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdCharMapper_convertCIFcoding(*args)

def OdCharMapper_convertAlphaNumJapanese(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdCharMapper_convertAlphaNumJapanese(*args)

def OdCharMapper_containsSpecialSequence(*args) -> "OdString &":
    return _ODA_Kernel_Py3.OdCharMapper_containsSpecialSequence(*args)

def OdCharMapper_embedTextRawData(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdCharMapper_embedTextRawData(*args)

JAPANESE_CP_INDEX = _ODA_Kernel_Py3.JAPANESE_CP_INDEX
TRADITIONAL_CHINESE_CP_INDEX = _ODA_Kernel_Py3.TRADITIONAL_CHINESE_CP_INDEX
KOREAN_WANSUNG_CP_INDEX = _ODA_Kernel_Py3.KOREAN_WANSUNG_CP_INDEX
KOREAN_JOHAB_CP_INDEX = _ODA_Kernel_Py3.KOREAN_JOHAB_CP_INDEX
SIMPLIFIED_CHINESE_CP_INDEX = _ODA_Kernel_Py3.SIMPLIFIED_CHINESE_CP_INDEX
class OdGeUvBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    intervals = property(_ODA_Kernel_Py3.OdGeUvBox_intervals_get, _ODA_Kernel_Py3.OdGeUvBox_intervals_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeUvBox_swiginit(self, _ODA_Kernel_Py3.new_OdGeUvBox(*args))

    def u(self, *args) -> "OdGeInterval &":
        return _ODA_Kernel_Py3.OdGeUvBox_u(self, *args)

    def v(self, *args) -> "OdGeInterval &":
        return _ODA_Kernel_Py3.OdGeUvBox_v(self, *args)

    def set(self, *args) -> "OdGeUvBox &":
        return _ODA_Kernel_Py3.OdGeUvBox_set(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeUvBox_contains(self, *args)

    def isBounded(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeUvBox_isBounded(self, *args)

    def finiteIntersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeUvBox_finiteIntersectWith(self, *args)

    def lowerBound(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeUvBox_lowerBound(self, *args)

    def upperBound(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeUvBox_upperBound(self, *args)

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeUvBox_isEqualTo(self, *args)

    def eval(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeUvBox_eval(self, *args)

    def clamp(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeUvBox_clamp(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeUvBox

# Register OdGeUvBox in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeUvBox_swigregister(OdGeUvBox)

class OdGeEntity3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeEntity3d

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEntity3d_isKindOf(self, *args)

    def type(self, *args) -> "OdGe::EntityId":
        return _ODA_Kernel_Py3.OdGeEntity3d_type(self, *args)

    def copy(self, *args) -> "OdGeEntity3d *":
        return _ODA_Kernel_Py3.OdGeEntity3d_copy(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEntity3d___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEntity3d___ne__(self, *args)

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEntity3d_isEqualTo(self, *args)

    def transformBy(self, *args) -> "OdGeEntity3d &":
        return _ODA_Kernel_Py3.OdGeEntity3d_transformBy(self, *args)

    def translateBy(self, *args) -> "OdGeEntity3d &":
        return _ODA_Kernel_Py3.OdGeEntity3d_translateBy(self, *args)

    def rotateBy(self, *args) -> "OdGeEntity3d &":
        return _ODA_Kernel_Py3.OdGeEntity3d_rotateBy(self, *args)

    def mirror(self, *args) -> "OdGeEntity3d &":
        return _ODA_Kernel_Py3.OdGeEntity3d_mirror(self, *args)

    def scaleBy(self, *args) -> "OdGeEntity3d &":
        return _ODA_Kernel_Py3.OdGeEntity3d_scaleBy(self, *args)

    def isOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEntity3d_isOn(self, *args)

# Register OdGeEntity3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeEntity3d_swigregister(OdGeEntity3d)

class OdNonCopyable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

# Register OdNonCopyable in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdNonCopyable_swigregister(OdNonCopyable)

class OdMutex(OdNonCopyable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdMutex_swiginit(self, _ODA_Kernel_Py3.new_OdMutex(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdMutex

    def lock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdMutex_lock(self, *args)

    def unlock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdMutex_unlock(self, *args)

# Register OdMutex in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdMutex_swigregister(OdMutex)

class OdMutexAutoLock(OdNonCopyable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdMutexAutoLock_swiginit(self, _ODA_Kernel_Py3.new_OdMutexAutoLock(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdMutexAutoLock

# Register OdMutexAutoLock in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdMutexAutoLock_swigregister(OdMutexAutoLock)

class OdGiDeviation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def deviation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiDeviation_deviation(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDeviation

# Register OdGiDeviation in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDeviation_swigregister(OdGiDeviation)


def odgiGetAllDeviations(*args) -> "OdGeDoubleArray":
    return _ODA_Kernel_Py3.odgiGetAllDeviations(*args)
class OdGiViewportDraw_Stub(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiViewportDraw_Stub_swiginit(self, _ODA_Kernel_Py3.new_OdGiViewportDraw_Stub(*args))

    def rawGeometry(self, *args) -> "OdGiGeometry &":
        return _ODA_Kernel_Py3.OdGiViewportDraw_Stub_rawGeometry(self, *args)

    def subEntityTraits(self, *args) -> "OdGiSubEntityTraits &":
        return _ODA_Kernel_Py3.OdGiViewportDraw_Stub_subEntityTraits(self, *args)

    def geometry(self, *args) -> "OdGiViewportGeometry &":
        return _ODA_Kernel_Py3.OdGiViewportDraw_Stub_geometry(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiViewportDraw_Stub

# Register OdGiViewportDraw_Stub in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiViewportDraw_Stub_swigregister(OdGiViewportDraw_Stub)

class OdGiWorldDraw_Stub(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiWorldDraw_Stub_swiginit(self, _ODA_Kernel_Py3.new_OdGiWorldDraw_Stub(*args))

    def rawGeometry(self, *args) -> "OdGiGeometry &":
        return _ODA_Kernel_Py3.OdGiWorldDraw_Stub_rawGeometry(self, *args)

    def subEntityTraits(self, *args) -> "OdGiSubEntityTraits &":
        return _ODA_Kernel_Py3.OdGiWorldDraw_Stub_subEntityTraits(self, *args)

    def geometry(self, *args) -> "OdGiWorldGeometry &":
        return _ODA_Kernel_Py3.OdGiWorldDraw_Stub_geometry(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiWorldDraw_Stub

# Register OdGiWorldDraw_Stub in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiWorldDraw_Stub_swigregister(OdGiWorldDraw_Stub)

class OdGiViewportDraw_Dummy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiViewportDraw_Dummy_swiginit(self, _ODA_Kernel_Py3.new_OdGiViewportDraw_Dummy(*args))

    def database(self, *args) -> "OdDbBaseDatabase *":
        return _ODA_Kernel_Py3.OdGiViewportDraw_Dummy_database(self, *args)

    def rawGeometry(self, *args) -> "OdGiGeometry &":
        return _ODA_Kernel_Py3.OdGiViewportDraw_Dummy_rawGeometry(self, *args)

    def subEntityTraits(self, *args) -> "OdGiSubEntityTraits &":
        return _ODA_Kernel_Py3.OdGiViewportDraw_Dummy_subEntityTraits(self, *args)

    def geometry(self, *args) -> "OdGiViewportGeometry &":
        return _ODA_Kernel_Py3.OdGiViewportDraw_Dummy_geometry(self, *args)

    def context(self, *args) -> "OdGiContext *":
        return _ODA_Kernel_Py3.OdGiViewportDraw_Dummy_context(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiViewportDraw_Dummy

# Register OdGiViewportDraw_Dummy in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiViewportDraw_Dummy_swigregister(OdGiViewportDraw_Dummy)

class OdGiWorldDraw_Dummy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiWorldDraw_Dummy_swiginit(self, _ODA_Kernel_Py3.new_OdGiWorldDraw_Dummy(*args))

    def database(self, *args) -> "OdDbBaseDatabase *":
        return _ODA_Kernel_Py3.OdGiWorldDraw_Dummy_database(self, *args)

    def rawGeometry(self, *args) -> "OdGiGeometry &":
        return _ODA_Kernel_Py3.OdGiWorldDraw_Dummy_rawGeometry(self, *args)

    def subEntityTraits(self, *args) -> "OdGiSubEntityTraits &":
        return _ODA_Kernel_Py3.OdGiWorldDraw_Dummy_subEntityTraits(self, *args)

    def geometry(self, *args) -> "OdGiWorldGeometry &":
        return _ODA_Kernel_Py3.OdGiWorldDraw_Dummy_geometry(self, *args)

    def context(self, *args) -> "OdGiContext *":
        return _ODA_Kernel_Py3.OdGiWorldDraw_Dummy_context(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiWorldDraw_Dummy

# Register OdGiWorldDraw_Dummy in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiWorldDraw_Dummy_swigregister(OdGiWorldDraw_Dummy)

class OdGiLayerTraits(OdGiDrawableTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiLayerTraits >":
        return _ODA_Kernel_Py3.OdGiLayerTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiLayerTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiLayerTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiLayerTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiLayerTraits >":
        return _ODA_Kernel_Py3.OdGiLayerTraits_createObject(*args)

    def color(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiLayerTraits_color(self, *args)

    def lineweight(self, *args) -> "OdDb::LineWeight":
        return _ODA_Kernel_Py3.OdGiLayerTraits_lineweight(self, *args)

    def linetype(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiLayerTraits_linetype(self, *args)

    def plotStyleNameType(self, *args) -> "OdDb::PlotStyleNameType":
        return _ODA_Kernel_Py3.OdGiLayerTraits_plotStyleNameType(self, *args)

    def plotStyleNameId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiLayerTraits_plotStyleNameId(self, *args)

    def materialId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiLayerTraits_materialId(self, *args)

    def transparency(self, *args) -> "OdCmTransparency":
        return _ODA_Kernel_Py3.OdGiLayerTraits_transparency(self, *args)

    def setColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraits_setColor(self, *args)

    def setLineweight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraits_setLineweight(self, *args)

    def setLinetype(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraits_setLinetype(self, *args)

    def setPlotStyleName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraits_setPlotStyleName(self, *args)

    def setMaterial(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraits_setMaterial(self, *args)

    def setTransparency(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraits_setTransparency(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLayerTraits

# Register OdGiLayerTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLayerTraits_swigregister(OdGiLayerTraits)

def OdGiLayerTraits_cast(*args) -> "OdSmartPtr< OdGiLayerTraits >":
    return _ODA_Kernel_Py3.OdGiLayerTraits_cast(*args)

def OdGiLayerTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiLayerTraits_desc(*args)

def OdGiLayerTraits_createObject(*args) -> "OdSmartPtr< OdGiLayerTraits >":
    return _ODA_Kernel_Py3.OdGiLayerTraits_createObject(*args)

class OdGiLinetypeTraits(OdGiDrawableTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiLinetypeTraits >":
        return _ODA_Kernel_Py3.OdGiLinetypeTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiLinetypeTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiLinetypeTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiLinetypeTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiLinetypeTraits >":
        return _ODA_Kernel_Py3.OdGiLinetypeTraits_createObject(*args)

    def patternLength(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiLinetypeTraits_patternLength(self, *args)

    def dashes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetypeTraits_dashes(self, *args)

    def scale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiLinetypeTraits_scale(self, *args)

    def setDashes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetypeTraits_setDashes(self, *args)

    def setScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetypeTraits_setScale(self, *args)

    def setPatternLength(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetypeTraits_setPatternLength(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLinetypeTraits

# Register OdGiLinetypeTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLinetypeTraits_swigregister(OdGiLinetypeTraits)

def OdGiLinetypeTraits_cast(*args) -> "OdSmartPtr< OdGiLinetypeTraits >":
    return _ODA_Kernel_Py3.OdGiLinetypeTraits_cast(*args)

def OdGiLinetypeTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiLinetypeTraits_desc(*args)

def OdGiLinetypeTraits_createObject(*args) -> "OdSmartPtr< OdGiLinetypeTraits >":
    return _ODA_Kernel_Py3.OdGiLinetypeTraits_createObject(*args)

class OdGiTextStyleTraits(OdGiDrawableTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiTextStyleTraits >":
        return _ODA_Kernel_Py3.OdGiTextStyleTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiTextStyleTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiTextStyleTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiTextStyleTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiTextStyleTraits >":
        return _ODA_Kernel_Py3.OdGiTextStyleTraits_createObject(*args)

    def textStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyleTraits_textStyle(self, *args)

    def setTextStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyleTraits_setTextStyle(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiTextStyleTraits

# Register OdGiTextStyleTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiTextStyleTraits_swigregister(OdGiTextStyleTraits)

def OdGiTextStyleTraits_cast(*args) -> "OdSmartPtr< OdGiTextStyleTraits >":
    return _ODA_Kernel_Py3.OdGiTextStyleTraits_cast(*args)

def OdGiTextStyleTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiTextStyleTraits_desc(*args)

def OdGiTextStyleTraits_createObject(*args) -> "OdSmartPtr< OdGiTextStyleTraits >":
    return _ODA_Kernel_Py3.OdGiTextStyleTraits_createObject(*args)

class OdGiConveyorInput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def addSourceNode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorInput_addSourceNode(self, *args)

    def removeSourceNode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorInput_removeSourceNode(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiConveyorInput

# Register OdGiConveyorInput in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiConveyorInput_swigregister(OdGiConveyorInput)

class OdGiConveyorOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setDestGeometry(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorOutput_setDestGeometry(self, *args)

    def destGeometry(self, *args) -> "OdGiConveyorGeometry &":
        return _ODA_Kernel_Py3.OdGiConveyorOutput_destGeometry(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiConveyorOutput

# Register OdGiConveyorOutput in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiConveyorOutput_swigregister(OdGiConveyorOutput)

class OdGiConveyorNode(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiConveyorNode >":
        return _ODA_Kernel_Py3.OdGiConveyorNode_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiConveyorNode_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiConveyorNode_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiConveyorNode_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiConveyorNode >":
        return _ODA_Kernel_Py3.OdGiConveyorNode_createObject(*args)

    def input(self, *args) -> "OdGiConveyorInput &":
        return _ODA_Kernel_Py3.OdGiConveyorNode_input(self, *args)

    def output(self, *args) -> "OdGiConveyorOutput &":
        return _ODA_Kernel_Py3.OdGiConveyorNode_output(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiConveyorNode

# Register OdGiConveyorNode in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiConveyorNode_swigregister(OdGiConveyorNode)

def OdGiConveyorNode_cast(*args) -> "OdSmartPtr< OdGiConveyorNode >":
    return _ODA_Kernel_Py3.OdGiConveyorNode_cast(*args)

def OdGiConveyorNode_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiConveyorNode_desc(*args)

def OdGiConveyorNode_createObject(*args) -> "OdSmartPtr< OdGiConveyorNode >":
    return _ODA_Kernel_Py3.OdGiConveyorNode_createObject(*args)


def getHexValue(*args) -> "int":
    return _ODA_Kernel_Py3.getHexValue(*args)
class OdDbHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdDbHandle_swiginit(self, _ODA_Kernel_Py3.new_OdDbHandle(*args))

    def ascii(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbHandle_ascii(self, *args)

    def isNull(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbHandle_isNull(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbHandle___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbHandle___ne__(self, *args)

    def __gt__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbHandle___gt__(self, *args)

    def __lt__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbHandle___lt__(self, *args)

    def __le__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbHandle___le__(self, *args)

    def __ge__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbHandle___ge__(self, *args)

    def __iadd__(self, *args) -> "OdDbHandle &":
        return _ODA_Kernel_Py3.OdDbHandle___iadd__(self, *args)

    def __add__(self, *args) -> "OdDbHandle":
        return _ODA_Kernel_Py3.OdDbHandle___add__(self, *args)

    def bytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbHandle_bytes(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbHandle

# Register OdDbHandle in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbHandle_swigregister(OdDbHandle)

class OdUnitsFormatter(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdUnitsFormatter >":
        return _ODA_Kernel_Py3.OdUnitsFormatter_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdUnitsFormatter_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdUnitsFormatter_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdUnitsFormatter_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdUnitsFormatter >":
        return _ODA_Kernel_Py3.OdUnitsFormatter_createObject(*args)
    kScientific = _ODA_Kernel_Py3.OdUnitsFormatter_kScientific
    kDecimal = _ODA_Kernel_Py3.OdUnitsFormatter_kDecimal
    kEngineering = _ODA_Kernel_Py3.OdUnitsFormatter_kEngineering
    kArchitectural = _ODA_Kernel_Py3.OdUnitsFormatter_kArchitectural
    kFractional = _ODA_Kernel_Py3.OdUnitsFormatter_kFractional
    kWindowsDesktop = _ODA_Kernel_Py3.OdUnitsFormatter_kWindowsDesktop
    kSuppressesZeroFeetAndPreciselyZeroInches = _ODA_Kernel_Py3.OdUnitsFormatter_kSuppressesZeroFeetAndPreciselyZeroInches
    kIncludesZeroFeetAndPreciselyZeroInches = _ODA_Kernel_Py3.OdUnitsFormatter_kIncludesZeroFeetAndPreciselyZeroInches
    kIncludesZeroFeetAndSuppressesZeroInches = _ODA_Kernel_Py3.OdUnitsFormatter_kIncludesZeroFeetAndSuppressesZeroInches
    kIncludesZeroInchesAndSuppressesZeroFeet = _ODA_Kernel_Py3.OdUnitsFormatter_kIncludesZeroInchesAndSuppressesZeroFeet
    kSuppressesLeadingZeros = _ODA_Kernel_Py3.OdUnitsFormatter_kSuppressesLeadingZeros
    kSuppressesTrailingZeros = _ODA_Kernel_Py3.OdUnitsFormatter_kSuppressesTrailingZeros
    kSuppressesBothLeadingAndTrailingZeros = _ODA_Kernel_Py3.OdUnitsFormatter_kSuppressesBothLeadingAndTrailingZeros

    def formatCmColor(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdUnitsFormatter_formatCmColor(self, *args)

    def unformatCmColor(self, *args) -> "OdSharedPtr< OdCmColorBase >":
        return _ODA_Kernel_Py3.OdUnitsFormatter_unformatCmColor(self, *args)

    def formatLinear(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdUnitsFormatter_formatLinear(self, *args)

    def unformatLinear(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdUnitsFormatter_unformatLinear(self, *args)

    def formatAngle(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdUnitsFormatter_formatAngle(self, *args)

    def unformatAngle(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdUnitsFormatter_unformatAngle(self, *args)

    @staticmethod
    def isZeroFeetSuppressed(*args) -> "bool":
        return _ODA_Kernel_Py3.OdUnitsFormatter_isZeroFeetSuppressed(*args)

    @staticmethod
    def isZeroInchesSuppressed(*args) -> "bool":
        return _ODA_Kernel_Py3.OdUnitsFormatter_isZeroInchesSuppressed(*args)

    @staticmethod
    def formatL(*args) -> "OdString":
        return _ODA_Kernel_Py3.OdUnitsFormatter_formatL(*args)

    @staticmethod
    def formatArea(*args) -> "OdString":
        return _ODA_Kernel_Py3.OdUnitsFormatter_formatArea(*args)

    @staticmethod
    def unformatL(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdUnitsFormatter_unformatL(*args)
    kDegrees = _ODA_Kernel_Py3.OdUnitsFormatter_kDegrees
    kDegMinSec = _ODA_Kernel_Py3.OdUnitsFormatter_kDegMinSec
    kGrads = _ODA_Kernel_Py3.OdUnitsFormatter_kGrads
    kRadians = _ODA_Kernel_Py3.OdUnitsFormatter_kRadians
    kSurveyors = _ODA_Kernel_Py3.OdUnitsFormatter_kSurveyors

    @staticmethod
    def formatA(*args) -> "OdString":
        return _ODA_Kernel_Py3.OdUnitsFormatter_formatA(*args)

    @staticmethod
    def formatA_unnorm(*args) -> "OdString":
        return _ODA_Kernel_Py3.OdUnitsFormatter_formatA_unnorm(*args)

    @staticmethod
    def unformatA(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdUnitsFormatter_unformatA(*args)

    @staticmethod
    def unformatA_unnorm(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdUnitsFormatter_unformatA_unnorm(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdUnitsFormatter

# Register OdUnitsFormatter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdUnitsFormatter_swigregister(OdUnitsFormatter)

def OdUnitsFormatter_cast(*args) -> "OdSmartPtr< OdUnitsFormatter >":
    return _ODA_Kernel_Py3.OdUnitsFormatter_cast(*args)

def OdUnitsFormatter_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdUnitsFormatter_desc(*args)

def OdUnitsFormatter_createObject(*args) -> "OdSmartPtr< OdUnitsFormatter >":
    return _ODA_Kernel_Py3.OdUnitsFormatter_createObject(*args)

def OdUnitsFormatter_isZeroFeetSuppressed(*args) -> "bool":
    return _ODA_Kernel_Py3.OdUnitsFormatter_isZeroFeetSuppressed(*args)

def OdUnitsFormatter_isZeroInchesSuppressed(*args) -> "bool":
    return _ODA_Kernel_Py3.OdUnitsFormatter_isZeroInchesSuppressed(*args)

def OdUnitsFormatter_formatL(*args) -> "OdString":
    return _ODA_Kernel_Py3.OdUnitsFormatter_formatL(*args)

def OdUnitsFormatter_formatArea(*args) -> "OdString":
    return _ODA_Kernel_Py3.OdUnitsFormatter_formatArea(*args)

def OdUnitsFormatter_unformatL(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdUnitsFormatter_unformatL(*args)

def OdUnitsFormatter_formatA(*args) -> "OdString":
    return _ODA_Kernel_Py3.OdUnitsFormatter_formatA(*args)

def OdUnitsFormatter_formatA_unnorm(*args) -> "OdString":
    return _ODA_Kernel_Py3.OdUnitsFormatter_formatA_unnorm(*args)

def OdUnitsFormatter_unformatA(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdUnitsFormatter_unformatA(*args)

def OdUnitsFormatter_unformatA_unnorm(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdUnitsFormatter_unformatA_unnorm(*args)

class OdUnitsFormatterTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdUnitsFormatterTool_swiginit(self, _ODA_Kernel_Py3.new_OdUnitsFormatterTool(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdUnitsFormatterTool

    @staticmethod
    def formatDecimal(*args) -> "OdString":
        return _ODA_Kernel_Py3.OdUnitsFormatterTool_formatDecimal(*args)

    @staticmethod
    def angle(*args) -> "double":
        return _ODA_Kernel_Py3.OdUnitsFormatterTool_angle(*args)

    @staticmethod
    def toInt(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdUnitsFormatterTool_toInt(*args)

    @staticmethod
    def isZero(*args) -> "bool":
        return _ODA_Kernel_Py3.OdUnitsFormatterTool_isZero(*args)

    @staticmethod
    def formatArchitectural(*args) -> "OdString":
        return _ODA_Kernel_Py3.OdUnitsFormatterTool_formatArchitectural(*args)

    @staticmethod
    def negative(*args) -> "bool":
        return _ODA_Kernel_Py3.OdUnitsFormatterTool_negative(*args)

    @staticmethod
    def integer(*args) -> "double":
        return _ODA_Kernel_Py3.OdUnitsFormatterTool_integer(*args)

    @staticmethod
    def number(*args) -> "double":
        return _ODA_Kernel_Py3.OdUnitsFormatterTool_number(*args)

    @staticmethod
    def fraction(*args) -> "int &, int &, int &":
        return _ODA_Kernel_Py3.OdUnitsFormatterTool_fraction(*args)

    @staticmethod
    def base_denominator(*args) -> "double":
        return _ODA_Kernel_Py3.OdUnitsFormatterTool_base_denominator(*args)

    @staticmethod
    def linear_denominator(*args) -> "double":
        return _ODA_Kernel_Py3.OdUnitsFormatterTool_linear_denominator(*args)

    @staticmethod
    def digit(*args) -> "bool":
        return _ODA_Kernel_Py3.OdUnitsFormatterTool_digit(*args)

    @staticmethod
    def denominator(*args) -> "double":
        return _ODA_Kernel_Py3.OdUnitsFormatterTool_denominator(*args)

    @staticmethod
    def decomp(*args) -> "int &, int &":
        return _ODA_Kernel_Py3.OdUnitsFormatterTool_decomp(*args)

    @staticmethod
    def format(*args) -> "OdString":
        return _ODA_Kernel_Py3.OdUnitsFormatterTool_format(*args)

    @staticmethod
    def next(*args) -> "OdString &":
        return _ODA_Kernel_Py3.OdUnitsFormatterTool_next(*args)

    @staticmethod
    def countOccurences(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdUnitsFormatterTool_countOccurences(*args)

# Register OdUnitsFormatterTool in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdUnitsFormatterTool_swigregister(OdUnitsFormatterTool)

def OdUnitsFormatterTool_formatDecimal(*args) -> "OdString":
    return _ODA_Kernel_Py3.OdUnitsFormatterTool_formatDecimal(*args)

def OdUnitsFormatterTool_angle(*args) -> "double":
    return _ODA_Kernel_Py3.OdUnitsFormatterTool_angle(*args)

def OdUnitsFormatterTool_toInt(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdUnitsFormatterTool_toInt(*args)

def OdUnitsFormatterTool_isZero(*args) -> "bool":
    return _ODA_Kernel_Py3.OdUnitsFormatterTool_isZero(*args)

def OdUnitsFormatterTool_formatArchitectural(*args) -> "OdString":
    return _ODA_Kernel_Py3.OdUnitsFormatterTool_formatArchitectural(*args)

def OdUnitsFormatterTool_negative(*args) -> "bool":
    return _ODA_Kernel_Py3.OdUnitsFormatterTool_negative(*args)

def OdUnitsFormatterTool_integer(*args) -> "double":
    return _ODA_Kernel_Py3.OdUnitsFormatterTool_integer(*args)

def OdUnitsFormatterTool_number(*args) -> "double":
    return _ODA_Kernel_Py3.OdUnitsFormatterTool_number(*args)

def OdUnitsFormatterTool_fraction(*args) -> "int &, int &, int &":
    return _ODA_Kernel_Py3.OdUnitsFormatterTool_fraction(*args)

def OdUnitsFormatterTool_base_denominator(*args) -> "double":
    return _ODA_Kernel_Py3.OdUnitsFormatterTool_base_denominator(*args)

def OdUnitsFormatterTool_linear_denominator(*args) -> "double":
    return _ODA_Kernel_Py3.OdUnitsFormatterTool_linear_denominator(*args)

def OdUnitsFormatterTool_digit(*args) -> "bool":
    return _ODA_Kernel_Py3.OdUnitsFormatterTool_digit(*args)

def OdUnitsFormatterTool_denominator(*args) -> "double":
    return _ODA_Kernel_Py3.OdUnitsFormatterTool_denominator(*args)

def OdUnitsFormatterTool_decomp(*args) -> "int &, int &":
    return _ODA_Kernel_Py3.OdUnitsFormatterTool_decomp(*args)

def OdUnitsFormatterTool_format(*args) -> "OdString":
    return _ODA_Kernel_Py3.OdUnitsFormatterTool_format(*args)

def OdUnitsFormatterTool_next(*args) -> "OdString &":
    return _ODA_Kernel_Py3.OdUnitsFormatterTool_next(*args)

def OdUnitsFormatterTool_countOccurences(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdUnitsFormatterTool_countOccurences(*args)

class OdTimeStamp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kInitZero = _ODA_Kernel_Py3.OdTimeStamp_kInitZero
    kInitLocalTime = _ODA_Kernel_Py3.OdTimeStamp_kInitLocalTime
    kInitUniversalTime = _ODA_Kernel_Py3.OdTimeStamp_kInitUniversalTime

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdTimeStamp_swiginit(self, _ODA_Kernel_Py3.new_OdTimeStamp(*args))

    def getDate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_getDate(self, *args)

    def setDate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_setDate(self, *args)

    def month(self, *args) -> "short":
        return _ODA_Kernel_Py3.OdTimeStamp_month(self, *args)

    def setMonth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_setMonth(self, *args)

    def day(self, *args) -> "short":
        return _ODA_Kernel_Py3.OdTimeStamp_day(self, *args)

    def setDay(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_setDay(self, *args)

    def year(self, *args) -> "short":
        return _ODA_Kernel_Py3.OdTimeStamp_year(self, *args)

    def setYear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_setYear(self, *args)

    def getTime(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_getTime(self, *args)

    def setTime(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_setTime(self, *args)

    def hour(self, *args) -> "short":
        return _ODA_Kernel_Py3.OdTimeStamp_hour(self, *args)

    def setHour(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_setHour(self, *args)

    def minute(self, *args) -> "short":
        return _ODA_Kernel_Py3.OdTimeStamp_minute(self, *args)

    def setMinute(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_setMinute(self, *args)

    def second(self, *args) -> "short":
        return _ODA_Kernel_Py3.OdTimeStamp_second(self, *args)

    def setSecond(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_setSecond(self, *args)

    def millisecond(self, *args) -> "short":
        return _ODA_Kernel_Py3.OdTimeStamp_millisecond(self, *args)

    def setMillisecond(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_setMillisecond(self, *args)

    def setToZero(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_setToZero(self, *args)

    def getLocalTime(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_getLocalTime(self, *args)

    def getUniversalTime(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_getUniversalTime(self, *args)

    def localToUniversal(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_localToUniversal(self, *args)

    def universalToLocal(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_universalToLocal(self, *args)

    def julianDay(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdTimeStamp_julianDay(self, *args)

    def setJulianDay(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_setJulianDay(self, *args)

    def msecsPastMidnight(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdTimeStamp_msecsPastMidnight(self, *args)

    def setMsecsPastMidnight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_setMsecsPastMidnight(self, *args)

    def setJulianDate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_setJulianDate(self, *args)

    def julianFraction(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdTimeStamp_julianFraction(self, *args)

    def setJulianFraction(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_setJulianFraction(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTimeStamp___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTimeStamp___ne__(self, *args)

    def __gt__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTimeStamp___gt__(self, *args)

    def __ge__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTimeStamp___ge__(self, *args)

    def __lt__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTimeStamp___lt__(self, *args)

    def __le__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTimeStamp___le__(self, *args)

    def __add__(self, *args) -> "OdTimeStamp const":
        return _ODA_Kernel_Py3.OdTimeStamp___add__(self, *args)

    def __sub__(self, *args) -> "OdTimeStamp const":
        return _ODA_Kernel_Py3.OdTimeStamp___sub__(self, *args)

    def __iadd__(self, *args) -> "OdTimeStamp const &":
        return _ODA_Kernel_Py3.OdTimeStamp___iadd__(self, *args)

    def __isub__(self, *args) -> "OdTimeStamp const &":
        return _ODA_Kernel_Py3.OdTimeStamp___isub__(self, *args)

    def add(self, *args) -> "OdTimeStamp const &":
        return _ODA_Kernel_Py3.OdTimeStamp_add(self, *args)

    def subtract(self, *args) -> "OdTimeStamp const &":
        return _ODA_Kernel_Py3.OdTimeStamp_subtract(self, *args)

    def ctime(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_ctime(self, *args)

    def strftime(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_strftime(self, *args)

    def packedValue(self, *args) -> "OdInt64":
        return _ODA_Kernel_Py3.OdTimeStamp_packedValue(self, *args)

    def setPackedValue(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTimeStamp_setPackedValue(self, *args)

    def weekday(self, *args) -> "short":
        return _ODA_Kernel_Py3.OdTimeStamp_weekday(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdTimeStamp

# Register OdTimeStamp in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdTimeStamp_swigregister(OdTimeStamp)

class OdGeBoundBlock3d(OdGeEntity3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeBoundBlock3d_swiginit(self, _ODA_Kernel_Py3.new_OdGeBoundBlock3d(*args))

    def getMinMaxPoints(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeBoundBlock3d_getMinMaxPoints(self, *args)

    def get(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeBoundBlock3d_get(self, *args)

    def set(self, *args) -> "OdGeBoundBlock3d &":
        return _ODA_Kernel_Py3.OdGeBoundBlock3d_set(self, *args)

    def extend(self, *args) -> "OdGeBoundBlock3d &":
        return _ODA_Kernel_Py3.OdGeBoundBlock3d_extend(self, *args)

    def swell(self, *args) -> "OdGeBoundBlock3d &":
        return _ODA_Kernel_Py3.OdGeBoundBlock3d_swell(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeBoundBlock3d_contains(self, *args)

    def isDisjoint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeBoundBlock3d_isDisjoint(self, *args)

    def isBox(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeBoundBlock3d_isBox(self, *args)

    def setToBox(self, *args) -> "OdGeBoundBlock3d &":
        return _ODA_Kernel_Py3.OdGeBoundBlock3d_setToBox(self, *args)

    def minPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeBoundBlock3d_minPoint(self, *args)

    def maxPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeBoundBlock3d_maxPoint(self, *args)

    def center(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeBoundBlock3d_center(self, *args)

    def setToBoxOrtho(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeBoundBlock3d_setToBoxOrtho(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeBoundBlock3d

# Register OdGeBoundBlock3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeBoundBlock3d_swigregister(OdGeBoundBlock3d)

class OdGeCurve2d(OdGeEntity2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def convertTo3d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurve2d_convertTo3d(self, *args)

    def getInterval(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurve2d_getInterval(self, *args)

    def reverseParam(self, *args) -> "OdGeCurve2d &":
        return _ODA_Kernel_Py3.OdGeCurve2d_reverseParam(self, *args)

    def setInterval(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve2d_setInterval(self, *args)

    def distanceTo(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCurve2d_distanceTo(self, *args)

    def closestPointTo(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeCurve2d_closestPointTo(self, *args)

    def getClosestPointTo(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurve2d_getClosestPointTo(self, *args)

    def getNormalPoint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve2d_getNormalPoint(self, *args)

    def isOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve2d_isOn(self, *args)

    def paramOf(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCurve2d_paramOf(self, *args)

    def getTrimmedOffset(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurve2d_getTrimmedOffset(self, *args)

    def isClosed(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve2d_isClosed(self, *args)

    def isPeriodic(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve2d_isPeriodic(self, *args)

    def isLinear(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve2d_isLinear(self, *args)

    def length(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCurve2d_length(self, *args)

    def paramAtLength(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCurve2d_paramAtLength(self, *args)

    def area(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve2d_area(self, *args)

    def getSplitCurves(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurve2d_getSplitCurves(self, *args)

    def explode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve2d_explode(self, *args)

    def getLocalClosestPoints(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurve2d_getLocalClosestPoints(self, *args)

    def boundBlock(self, *args) -> "OdGeBoundBlock2d":
        return _ODA_Kernel_Py3.OdGeCurve2d_boundBlock(self, *args)

    def orthoBoundBlock(self, *args) -> "OdGeBoundBlock2d":
        return _ODA_Kernel_Py3.OdGeCurve2d_orthoBoundBlock(self, *args)

    def getGeomExtents(self, *args) -> "OdGeExtents2d":
        return _ODA_Kernel_Py3.OdGeCurve2d_getGeomExtents(self, *args)

    def hasStartPoint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve2d_hasStartPoint(self, *args)

    def hasEndPoint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve2d_hasEndPoint(self, *args)

    def hasMidPoint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve2d_hasMidPoint(self, *args)

    def midPoint(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeCurve2d_midPoint(self, *args)

    def evalPoint(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeCurve2d_evalPoint(self, *args)

    def getSamplePoints(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurve2d_getSamplePoints(self, *args)

    def appendSamplePoints(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurve2d_appendSamplePoints(self, *args)

    @staticmethod
    def restoreUvCurve(*args) -> "OdGeCurve2d *":
        return _ODA_Kernel_Py3.OdGeCurve2d_restoreUvCurve(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeCurve2d

# Register OdGeCurve2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeCurve2d_swigregister(OdGeCurve2d)

def OdGeCurve2d_restoreUvCurve(*args) -> "OdGeCurve2d *":
    return _ODA_Kernel_Py3.OdGeCurve2d_restoreUvCurve(*args)

class OdGiLinetypeDash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    length = property(_ODA_Kernel_Py3.OdGiLinetypeDash_length_get, _ODA_Kernel_Py3.OdGiLinetypeDash_length_set)
    shapeScale = property(_ODA_Kernel_Py3.OdGiLinetypeDash_shapeScale_get, _ODA_Kernel_Py3.OdGiLinetypeDash_shapeScale_set)
    shapeRotation = property(_ODA_Kernel_Py3.OdGiLinetypeDash_shapeRotation_get, _ODA_Kernel_Py3.OdGiLinetypeDash_shapeRotation_set)
    flags = property(_ODA_Kernel_Py3.OdGiLinetypeDash_flags_get, _ODA_Kernel_Py3.OdGiLinetypeDash_flags_set)
    shapeNumber = property(_ODA_Kernel_Py3.OdGiLinetypeDash_shapeNumber_get, _ODA_Kernel_Py3.OdGiLinetypeDash_shapeNumber_set)
    shapeOffset = property(_ODA_Kernel_Py3.OdGiLinetypeDash_shapeOffset_get, _ODA_Kernel_Py3.OdGiLinetypeDash_shapeOffset_set)
    textString = property(_ODA_Kernel_Py3.OdGiLinetypeDash_textString_get, _ODA_Kernel_Py3.OdGiLinetypeDash_textString_set)
    styleId = property(_ODA_Kernel_Py3.OdGiLinetypeDash_styleId_get, _ODA_Kernel_Py3.OdGiLinetypeDash_styleId_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiLinetypeDash_swiginit(self, _ODA_Kernel_Py3.new_OdGiLinetypeDash(*args))

    def isRotationAbsolute(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLinetypeDash_isRotationAbsolute(self, *args)

    def setRotationAbsolute(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetypeDash_setRotationAbsolute(self, *args)

    def isRotationUpright(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLinetypeDash_isRotationUpright(self, *args)

    def setRotationUpright(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetypeDash_setRotationUpright(self, *args)

    def isEmbeddedTextString(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLinetypeDash_isEmbeddedTextString(self, *args)

    def setEmbeddedTextString(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetypeDash_setEmbeddedTextString(self, *args)

    def isEmbeddedShape(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLinetypeDash_isEmbeddedShape(self, *args)

    def setEmbeddedShape(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetypeDash_setEmbeddedShape(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLinetypeDash

# Register OdGiLinetypeDash in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLinetypeDash_swigregister(OdGiLinetypeDash)

class offset(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_ODA_Kernel_Py3.offset_x_get, _ODA_Kernel_Py3.offset_x_set)
    y = property(_ODA_Kernel_Py3.offset_y_get, _ODA_Kernel_Py3.offset_y_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.offset_swiginit(self, _ODA_Kernel_Py3.new_offset(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_offset

# Register offset in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.offset_swigregister(offset)

class OdGiLinetype(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiLinetype_swiginit(self, _ODA_Kernel_Py3.new_OdGiLinetype(*args))

    def isContinuous(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLinetype_isContinuous(self, *args)

    def isByBlock(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLinetype_isByBlock(self, *args)

    def setByBlock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetype_setByBlock(self, *args)

    def isByLayer(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLinetype_isByLayer(self, *args)

    def setByLayer(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetype_setByLayer(self, *args)

    def patternLength(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiLinetype_patternLength(self, *args)

    def setPatternLength(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetype_setPatternLength(self, *args)

    def numDashes(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiLinetype_numDashes(self, *args)

    def setNumDashes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetype_setNumDashes(self, *args)

    def dashAt(self, *args) -> "OdGiLinetypeDash const &":
        return _ODA_Kernel_Py3.OdGiLinetype_dashAt(self, *args)

    def setDashAt(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetype_setDashAt(self, *args)

    def dashes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetype_dashes(self, *args)

    def setDashes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetype_setDashes(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLinetype

# Register OdGiLinetype in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLinetype_swigregister(OdGiLinetype)

class OdGsView(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsView >":
        return _ODA_Kernel_Py3.OdGsView_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsView_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsView_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsView_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsView >":
        return _ODA_Kernel_Py3.OdGsView_createObject(*args)
    kBoundingBox = _ODA_Kernel_Py3.OdGsView_kBoundingBox
    k2DOptimized = _ODA_Kernel_Py3.OdGsView_k2DOptimized
    kWireframe = _ODA_Kernel_Py3.OdGsView_kWireframe
    kHiddenLine = _ODA_Kernel_Py3.OdGsView_kHiddenLine
    kFlatShaded = _ODA_Kernel_Py3.OdGsView_kFlatShaded
    kGouraudShaded = _ODA_Kernel_Py3.OdGsView_kGouraudShaded
    kFlatShadedWithWireframe = _ODA_Kernel_Py3.OdGsView_kFlatShadedWithWireframe
    kGouraudShadedWithWireframe = _ODA_Kernel_Py3.OdGsView_kGouraudShadedWithWireframe
    kNone = _ODA_Kernel_Py3.OdGsView_kNone
    kParallel = _ODA_Kernel_Py3.OdGsView_kParallel
    kPerspective = _ODA_Kernel_Py3.OdGsView_kPerspective
    kWindow = _ODA_Kernel_Py3.OdGsView_kWindow
    kCrossing = _ODA_Kernel_Py3.OdGsView_kCrossing
    kFence = _ODA_Kernel_Py3.OdGsView_kFence
    kWPoly = _ODA_Kernel_Py3.OdGsView_kWPoly
    kCPoly = _ODA_Kernel_Py3.OdGsView_kCPoly
    kPoint = _ODA_Kernel_Py3.OdGsView_kPoint
    kOneLight = _ODA_Kernel_Py3.OdGsView_kOneLight
    kTwoLights = _ODA_Kernel_Py3.OdGsView_kTwoLights
    kBackLight = _ODA_Kernel_Py3.OdGsView_kBackLight
    kCameraChanged = _ODA_Kernel_Py3.OdGsView_kCameraChanged

    def device(self, *args) -> "OdGsDevice *":
        return _ODA_Kernel_Py3.OdGsView_device(self, *args)

    def userGiContext(self, *args) -> "OdGiContext *":
        return _ODA_Kernel_Py3.OdGsView_userGiContext(self, *args)

    def setUserGiContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setUserGiContext(self, *args)

    def lineweightToDcScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsView_lineweightToDcScale(self, *args)

    def setLineweightToDcScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setLineweightToDcScale(self, *args)

    def setLineweightEnum(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setLineweightEnum(self, *args)

    def setViewport(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setViewport(self, *args)

    def getViewport(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_getViewport(self, *args)

    def setViewportClipRegion(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setViewportClipRegion(self, *args)

    def viewportClipRegion(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_viewportClipRegion(self, *args)

    def removeViewportClipRegion(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_removeViewportClipRegion(self, *args)

    def setViewport3dClipping(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setViewport3dClipping(self, *args)

    def viewport3dClipping(self, *args) -> "OdGiClipBoundary const *":
        return _ODA_Kernel_Py3.OdGsView_viewport3dClipping(self, *args)

    def removeViewport3dClipping(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_removeViewport3dClipping(self, *args)

    def setViewportBorderProperties(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setViewportBorderProperties(self, *args)

    def getViewportBorderProperties(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_getViewportBorderProperties(self, *args)

    def setViewportBorderVisibility(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setViewportBorderVisibility(self, *args)

    def isViewportBorderVisible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsView_isViewportBorderVisible(self, *args)

    def setView(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setView(self, *args)

    def position(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGsView_position(self, *args)

    def target(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGsView_target(self, *args)

    def upVector(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGsView_upVector(self, *args)

    def lensLength(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsView_lensLength(self, *args)

    def setLensLength(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setLensLength(self, *args)

    def isPerspective(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsView_isPerspective(self, *args)

    def fieldWidth(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsView_fieldWidth(self, *args)

    def fieldHeight(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsView_fieldHeight(self, *args)

    def setEnableFrontClip(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setEnableFrontClip(self, *args)

    def isFrontClipped(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsView_isFrontClipped(self, *args)

    def setFrontClip(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setFrontClip(self, *args)

    def frontClip(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsView_frontClip(self, *args)

    def setEnableBackClip(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setEnableBackClip(self, *args)

    def isBackClipped(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsView_isBackClipped(self, *args)

    def setBackClip(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setBackClip(self, *args)

    def backClip(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsView_backClip(self, *args)

    def viewingMatrix(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGsView_viewingMatrix(self, *args)

    def projectionMatrix(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGsView_projectionMatrix(self, *args)

    def screenMatrix(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGsView_screenMatrix(self, *args)

    def worldToDeviceMatrix(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGsView_worldToDeviceMatrix(self, *args)

    def objectToDeviceMatrix(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGsView_objectToDeviceMatrix(self, *args)

    def setMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setMode(self, *args)

    def mode(self, *args) -> "OdGsView::RenderMode":
        return _ODA_Kernel_Py3.OdGsView_mode(self, *args)

    def add(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsView_add(self, *args)

    def numRootDrawables(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGsView_numRootDrawables(self, *args)

    def rootDrawableIdAt(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGsView_rootDrawableIdAt(self, *args)

    def rootDrawableAt(self, *args) -> "OdGiDrawablePtr":
        return _ODA_Kernel_Py3.OdGsView_rootDrawableAt(self, *args)

    def erase(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsView_erase(self, *args)

    def eraseAll(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_eraseAll(self, *args)

    def getModel(self, *args) -> "OdGsModel *":
        return _ODA_Kernel_Py3.OdGsView_getModel(self, *args)

    def getModelList(self, *args) -> "OdGsModelArray":
        return _ODA_Kernel_Py3.OdGsView_getModelList(self, *args)

    def invalidate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_invalidate(self, *args)

    def isValid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsView_isValid(self, *args)

    def update(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_update(self, *args)

    def beginInteractivity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_beginInteractivity(self, *args)

    def isInInteractivity(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsView_isInInteractivity(self, *args)

    def interactivityFrameRate(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsView_interactivityFrameRate(self, *args)

    def endInteractivity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_endInteractivity(self, *args)

    def flush(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_flush(self, *args)

    def hide(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_hide(self, *args)

    def show(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_show(self, *args)

    def isVisible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsView_isVisible(self, *args)

    def freezeLayer(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_freezeLayer(self, *args)

    def thawLayer(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_thawLayer(self, *args)

    def clearFrozenLayers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_clearFrozenLayers(self, *args)

    def invalidateCachedViewportGeometry(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_invalidateCachedViewportGeometry(self, *args)

    def select(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_select(self, *args)

    def dolly(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_dolly(self, *args)

    def roll(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_roll(self, *args)

    def orbit(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_orbit(self, *args)

    def zoom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_zoom(self, *args)

    def pan(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_pan(self, *args)

    def zoomExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_zoomExtents(self, *args)

    def zoomWindow(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_zoomWindow(self, *args)

    def pointInView(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsView_pointInView(self, *args)

    def extentsInView(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsView_extentsInView(self, *args)

    def cloneView(self, *args) -> "OdGsViewPtr":
        return _ODA_Kernel_Py3.OdGsView_cloneView(self, *args)

    def viewParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_viewParameters(self, *args)

    def exceededBounds(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsView_exceededBounds(self, *args)

    def enableStereo(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_enableStereo(self, *args)

    def isStereoEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsView_isStereoEnabled(self, *args)

    def setStereoParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setStereoParameters(self, *args)

    def getStereoParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_getStereoParameters(self, *args)

    def initLights(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_initLights(self, *args)

    def setLinetypeScaleMultiplier(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setLinetypeScaleMultiplier(self, *args)

    def linetypeScaleMultiplier(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsView_linetypeScaleMultiplier(self, *args)

    def setAlternateLinetypeScaleMultiplier(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setAlternateLinetypeScaleMultiplier(self, *args)

    def linetypeAlternateScaleMultiplier(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsView_linetypeAlternateScaleMultiplier(self, *args)

    def clientViewInfo(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_clientViewInfo(self, *args)
    kTransparent = _ODA_Kernel_Py3.OdGsView_kTransparent
    kDeviceBackground = _ODA_Kernel_Py3.OdGsView_kDeviceBackground
    kPaletteBackground = _ODA_Kernel_Py3.OdGsView_kPaletteBackground

    def setClearColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setClearColor(self, *args)

    def pointInViewport(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsView_pointInViewport(self, *args)

    def getNumPixelsInUnitSquare(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_getNumPixelsInUnitSquare(self, *args)

    def setBackground(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setBackground(self, *args)

    def background(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGsView_background(self, *args)

    def setVisualStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_setVisualStyle(self, *args)

    def visualStyle(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsView_visualStyle(self, *args)

    def enableDefaultLighting(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_enableDefaultLighting(self, *args)

    def getSnapShot(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_getSnapShot(self, *args)

    def collide(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_collide(self, *args)

    def enableAntiAliasing(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_enableAntiAliasing(self, *args)

    def antiAliasingMode(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsView_antiAliasingMode(self, *args)

    def enableSSAO(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsView_enableSSAO(self, *args)

    def ssaoMode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsView_ssaoMode(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsView

# Register OdGsView in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsView_swigregister(OdGsView)

def OdGsView_cast(*args) -> "OdSmartPtr< OdGsView >":
    return _ODA_Kernel_Py3.OdGsView_cast(*args)

def OdGsView_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsView_desc(*args)

def OdGsView_createObject(*args) -> "OdSmartPtr< OdGsView >":
    return _ODA_Kernel_Py3.OdGsView_createObject(*args)

class OdGsClientViewInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kDependentViewport = _ODA_Kernel_Py3.OdGsClientViewInfo_kDependentViewport
    kDependentGeometry = _ODA_Kernel_Py3.OdGsClientViewInfo_kDependentGeometry
    kHelperView = _ODA_Kernel_Py3.OdGsClientViewInfo_kHelperView
    kSetViewportId = _ODA_Kernel_Py3.OdGsClientViewInfo_kSetViewportId
    viewportId = property(_ODA_Kernel_Py3.OdGsClientViewInfo_viewportId_get, _ODA_Kernel_Py3.OdGsClientViewInfo_viewportId_set)
    acadWindowId = property(_ODA_Kernel_Py3.OdGsClientViewInfo_acadWindowId_get, _ODA_Kernel_Py3.OdGsClientViewInfo_acadWindowId_set)
    viewportObjectId = property(_ODA_Kernel_Py3.OdGsClientViewInfo_viewportObjectId_get, _ODA_Kernel_Py3.OdGsClientViewInfo_viewportObjectId_set)
    contextColors = property(_ODA_Kernel_Py3.OdGsClientViewInfo_contextColors_get, _ODA_Kernel_Py3.OdGsClientViewInfo_contextColors_set)
    viewportFlags = property(_ODA_Kernel_Py3.OdGsClientViewInfo_viewportFlags_get, _ODA_Kernel_Py3.OdGsClientViewInfo_viewportFlags_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsClientViewInfo_swiginit(self, _ODA_Kernel_Py3.new_OdGsClientViewInfo(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsClientViewInfo

# Register OdGsClientViewInfo in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsClientViewInfo_swigregister(OdGsClientViewInfo)

class OdGsCollisionDetectionReactor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kContinue = _ODA_Kernel_Py3.OdGsCollisionDetectionReactor_kContinue
    kBreak = _ODA_Kernel_Py3.OdGsCollisionDetectionReactor_kBreak

    def collisionDetected(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionReactor_collisionDetected(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsCollisionDetectionReactor_swiginit(self, _ODA_Kernel_Py3.new_OdGsCollisionDetectionReactor(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsCollisionDetectionReactor

# Register OdGsCollisionDetectionReactor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsCollisionDetectionReactor_swigregister(OdGsCollisionDetectionReactor)

class OdGsCollisionDetectionContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsCollisionDetectionContext_swiginit(self, _ODA_Kernel_Py3.new_OdGsCollisionDetectionContext(*args))

    def setIntersectionOnly(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionContext_setIntersectionOnly(self, *args)

    def intersectionOnly(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionContext_intersectionOnly(self, *args)

    def setIntersectionWithModel(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionContext_setIntersectionWithModel(self, *args)

    def intersectionWithModel(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionContext_intersectionWithModel(self, *args)

    def setIgnoreViewExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionContext_setIgnoreViewExtents(self, *args)

    def ignoreViewExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionContext_ignoreViewExtents(self, *args)

    def setCombineSubEntities(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionContext_setCombineSubEntities(self, *args)

    def combineSubEntities(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionContext_combineSubEntities(self, *args)

    def setToleranceOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionContext_setToleranceOverride(self, *args)

    def isToleranceOverride(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionContext_isToleranceOverride(self, *args)

    def toleranceOverride(self, *args) -> "OdGeTol const &":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionContext_toleranceOverride(self, *args)

    def setCalculateDistance(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionContext_setCalculateDistance(self, *args)

    def getCalculateDistance(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionContext_getCalculateDistance(self, *args)

    def setCheckAll(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionContext_setCheckAll(self, *args)

    def getCheckAll(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionContext_getCheckAll(self, *args)

    def setClearance(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionContext_setClearance(self, *args)

    def getClearance(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionContext_getClearance(self, *args)

    def setProcessSignleList(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionContext_setProcessSignleList(self, *args)

    def getProcessSignleList(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsCollisionDetectionContext_getProcessSignleList(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsCollisionDetectionContext

# Register OdGsCollisionDetectionContext in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsCollisionDetectionContext_swigregister(OdGsCollisionDetectionContext)

class OdGsDevice(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsDevice >":
        return _ODA_Kernel_Py3.OdGsDevice_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsDevice_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsDevice_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsDevice_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsDevice >":
        return _ODA_Kernel_Py3.OdGsDevice_createObject(*args)

    def properties(self, *args) -> "OdRxDictionaryPtr":
        return _ODA_Kernel_Py3.OdGsDevice_properties(self, *args)

    def userGiContext(self, *args) -> "OdGiContext *":
        return _ODA_Kernel_Py3.OdGsDevice_userGiContext(self, *args)

    def setUserGiContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDevice_setUserGiContext(self, *args)

    def invalidate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDevice_invalidate(self, *args)

    def isValid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDevice_isValid(self, *args)

    def update(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDevice_update(self, *args)

    def onSize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDevice_onSize(self, *args)

    def getSize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDevice_getSize(self, *args)

    def onRealizeForegroundPalette(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDevice_onRealizeForegroundPalette(self, *args)

    def onRealizeBackgroundPalette(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDevice_onRealizeBackgroundPalette(self, *args)

    def onDisplayChange(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDevice_onDisplayChange(self, *args)

    def createView(self, *args) -> "OdGsViewPtr":
        return _ODA_Kernel_Py3.OdGsDevice_createView(self, *args)

    def addView(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDevice_addView(self, *args)

    def createModel(self, *args) -> "OdGsModelPtr":
        return _ODA_Kernel_Py3.OdGsDevice_createModel(self, *args)

    def isModelCompatible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDevice_isModelCompatible(self, *args)

    def saveDeviceState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDevice_saveDeviceState(self, *args)

    def loadDeviceState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDevice_loadDeviceState(self, *args)

    def insertView(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDevice_insertView(self, *args)

    def eraseView(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDevice_eraseView(self, *args)

    def eraseAllViews(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDevice_eraseAllViews(self, *args)

    def numViews(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGsDevice_numViews(self, *args)

    def viewAt(self, *args) -> "OdGsView *":
        return _ODA_Kernel_Py3.OdGsDevice_viewAt(self, *args)

    def setBackgroundColor(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDevice_setBackgroundColor(self, *args)

    def getBackgroundColor(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGsDevice_getBackgroundColor(self, *args)

    def setLogicalPalette(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDevice_setLogicalPalette(self, *args)

    def getLogicalPalette(self, *args) -> "ODCOLORREF const *":
        return _ODA_Kernel_Py3.OdGsDevice_getLogicalPalette(self, *args)

    def getSnapShot(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDevice_getSnapShot(self, *args)

    def getUpdateManager(self, *args) -> "OdGsUpdateManagerPtr":
        return _ODA_Kernel_Py3.OdGsDevice_getUpdateManager(self, *args)

    def setUpdateManager(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsDevice_setUpdateManager(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsDevice

# Register OdGsDevice in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsDevice_swigregister(OdGsDevice)

def OdGsDevice_cast(*args) -> "OdSmartPtr< OdGsDevice >":
    return _ODA_Kernel_Py3.OdGsDevice_cast(*args)

def OdGsDevice_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsDevice_desc(*args)

def OdGsDevice_createObject(*args) -> "OdSmartPtr< OdGsDevice >":
    return _ODA_Kernel_Py3.OdGsDevice_createObject(*args)

class OdGsReactor(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def viewWasCreated(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsReactor_viewWasCreated(self, *args)

    def viewToBeDestroyed(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsReactor_viewToBeDestroyed(self, *args)

    def viewToBeUpdated(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsReactor_viewToBeUpdated(self, *args)

    def viewWasUpdated(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsReactor_viewWasUpdated(self, *args)

    def gsToBeUnloaded(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsReactor_gsToBeUnloaded(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsReactor

# Register OdGsReactor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsReactor_swigregister(OdGsReactor)

class OdGsModule(OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsModule >":
        return _ODA_Kernel_Py3.OdGsModule_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsModule_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsModule_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsModule_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsModule >":
        return _ODA_Kernel_Py3.OdGsModule_createObject(*args)

    def createDevice(self, *args) -> "OdGsDevicePtr":
        return _ODA_Kernel_Py3.OdGsModule_createDevice(self, *args)

    def createBitmapDevice(self, *args) -> "OdGsDevicePtr":
        return _ODA_Kernel_Py3.OdGsModule_createBitmapDevice(self, *args)

    def addReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModule_addReactor(self, *args)

    def removeReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModule_removeReactor(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsModule

# Register OdGsModule in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsModule_swigregister(OdGsModule)

def OdGsModule_cast(*args) -> "OdSmartPtr< OdGsModule >":
    return _ODA_Kernel_Py3.OdGsModule_cast(*args)

def OdGsModule_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsModule_desc(*args)

def OdGsModule_createObject(*args) -> "OdSmartPtr< OdGsModule >":
    return _ODA_Kernel_Py3.OdGsModule_createObject(*args)

class OdGiDefaultContext(OdGiContext):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiDefaultContext >":
        return _ODA_Kernel_Py3.OdGiDefaultContext_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiDefaultContext_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiDefaultContext_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiDefaultContext_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiDefaultContext >":
        return _ODA_Kernel_Py3.OdGiDefaultContext_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDefaultContext

    def getDefaultTextStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDefaultContext_getDefaultTextStyle(self, *args)

    def drawText(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDefaultContext_drawText(self, *args)

    def drawShape(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDefaultContext_drawShape(self, *args)

    def textExtentsBox(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDefaultContext_textExtentsBox(self, *args)

    def shapeExtentsBox(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDefaultContext_shapeExtentsBox(self, *args)

    def setPlotGeneration(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDefaultContext_setPlotGeneration(self, *args)

    def paletteBackground(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGiDefaultContext_paletteBackground(self, *args)

    def setPaletteBackground(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDefaultContext_setPaletteBackground(self, *args)

    def isZeroTextNormals(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDefaultContext_isZeroTextNormals(self, *args)

    def supportVerticalTTFText(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDefaultContext_supportVerticalTTFText(self, *args)

    def useGsModel(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDefaultContext_useGsModel(self, *args)

    def enableGsModel(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDefaultContext_enableGsModel(self, *args)
    kHatchTriangulation = _ODA_Kernel_Py3.OdGiDefaultContext_kHatchTriangulation
    kHatchPolygon = _ODA_Kernel_Py3.OdGiDefaultContext_kHatchPolygon
    kHatchBoth = _ODA_Kernel_Py3.OdGiDefaultContext_kHatchBoth

    def hatchAsPolygon(self, *args) -> "OdGiDefaultContext::SolidHatchAsPolygonMode":
        return _ODA_Kernel_Py3.OdGiDefaultContext_hatchAsPolygon(self, *args)

    def setHatchAsPolygon(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDefaultContext_setHatchAsPolygon(self, *args)

    def getStubByID(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiDefaultContext_getStubByID(self, *args)

    def getIDByStub(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdGiDefaultContext_getIDByStub(self, *args)

    def getDatabaseByStub(self, *args) -> "OdDbBaseDatabase *":
        return _ODA_Kernel_Py3.OdGiDefaultContext_getDatabaseByStub(self, *args)

    def getOwnerIDByStub(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiDefaultContext_getOwnerIDByStub(self, *args)

# Register OdGiDefaultContext in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDefaultContext_swigregister(OdGiDefaultContext)
kNullSubentIndex = cvar.kNullSubentIndex

def OdGiDefaultContext_cast(*args) -> "OdSmartPtr< OdGiDefaultContext >":
    return _ODA_Kernel_Py3.OdGiDefaultContext_cast(*args)

def OdGiDefaultContext_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiDefaultContext_desc(*args)

def OdGiDefaultContext_createObject(*args) -> "OdSmartPtr< OdGiDefaultContext >":
    return _ODA_Kernel_Py3.OdGiDefaultContext_createObject(*args)

kFontTypeUnknown = _ODA_Kernel_Py3.kFontTypeUnknown
kFontTypeShx = _ODA_Kernel_Py3.kFontTypeShx
kFontTypeTrueType = _ODA_Kernel_Py3.kFontTypeTrueType
kFontTypeShape = _ODA_Kernel_Py3.kFontTypeShape
kFontTypeBig = _ODA_Kernel_Py3.kFontTypeBig
kFontTypeRsc = _ODA_Kernel_Py3.kFontTypeRsc
class OdCharacterProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdCharacterProperties_swiginit(self, _ODA_Kernel_Py3.new_OdCharacterProperties(*args))
    bUnderlined = property(_ODA_Kernel_Py3.OdCharacterProperties_bUnderlined_get, _ODA_Kernel_Py3.OdCharacterProperties_bUnderlined_set)
    bOverlined = property(_ODA_Kernel_Py3.OdCharacterProperties_bOverlined_get, _ODA_Kernel_Py3.OdCharacterProperties_bOverlined_set)
    bStriked = property(_ODA_Kernel_Py3.OdCharacterProperties_bStriked_get, _ODA_Kernel_Py3.OdCharacterProperties_bStriked_set)
    bLastChar = property(_ODA_Kernel_Py3.OdCharacterProperties_bLastChar_get, _ODA_Kernel_Py3.OdCharacterProperties_bLastChar_set)
    bInBigFont = property(_ODA_Kernel_Py3.OdCharacterProperties_bInBigFont_get, _ODA_Kernel_Py3.OdCharacterProperties_bInBigFont_set)
    bAsian = property(_ODA_Kernel_Py3.OdCharacterProperties_bAsian_get, _ODA_Kernel_Py3.OdCharacterProperties_bAsian_set)
    bValid = property(_ODA_Kernel_Py3.OdCharacterProperties_bValid_get, _ODA_Kernel_Py3.OdCharacterProperties_bValid_set)
    uCode = property(_ODA_Kernel_Py3.OdCharacterProperties_uCode_get, _ODA_Kernel_Py3.OdCharacterProperties_uCode_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdCharacterProperties

# Register OdCharacterProperties in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdCharacterProperties_swigregister(OdCharacterProperties)

class OdTextProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_trackingPercent = property(_ODA_Kernel_Py3.OdTextProperties_m_trackingPercent_get, _ODA_Kernel_Py3.OdTextProperties_m_trackingPercent_set)
    m_flags = property(_ODA_Kernel_Py3.OdTextProperties_m_flags_get, _ODA_Kernel_Py3.OdTextProperties_m_flags_set)
    m_textQuality = property(_ODA_Kernel_Py3.OdTextProperties_m_textQuality_get, _ODA_Kernel_Py3.OdTextProperties_m_textQuality_set)
    kNormalText = _ODA_Kernel_Py3.OdTextProperties_kNormalText
    kVerticalText = _ODA_Kernel_Py3.OdTextProperties_kVerticalText
    kUnderlined = _ODA_Kernel_Py3.OdTextProperties_kUnderlined
    kOverlined = _ODA_Kernel_Py3.OdTextProperties_kOverlined
    kLastChar = _ODA_Kernel_Py3.OdTextProperties_kLastChar
    kInBigFont = _ODA_Kernel_Py3.OdTextProperties_kInBigFont
    kInclPenups = _ODA_Kernel_Py3.OdTextProperties_kInclPenups
    kZeroNormals = _ODA_Kernel_Py3.OdTextProperties_kZeroNormals
    kBezierCurves = _ODA_Kernel_Py3.OdTextProperties_kBezierCurves
    kStriked = _ODA_Kernel_Py3.OdTextProperties_kStriked
    kLastPosOnly = _ODA_Kernel_Py3.OdTextProperties_kLastPosOnly
    kTriangleCache = _ODA_Kernel_Py3.OdTextProperties_kTriangleCache
    kIsGlyph = _ODA_Kernel_Py3.OdTextProperties_kIsGlyph
    m_prevChar = property(_ODA_Kernel_Py3.OdTextProperties_m_prevChar_get, _ODA_Kernel_Py3.OdTextProperties_m_prevChar_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdTextProperties_swiginit(self, _ODA_Kernel_Py3.new_OdTextProperties(*args))

    def isNormalText(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTextProperties_isNormalText(self, *args)

    def setNormalText(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTextProperties_setNormalText(self, *args)

    def isVerticalText(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTextProperties_isVerticalText(self, *args)

    def setVerticalText(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTextProperties_setVerticalText(self, *args)

    def isUnderlined(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTextProperties_isUnderlined(self, *args)

    def setUnderlined(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTextProperties_setUnderlined(self, *args)

    def isOverlined(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTextProperties_isOverlined(self, *args)

    def setOverlined(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTextProperties_setOverlined(self, *args)

    def isStriked(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTextProperties_isStriked(self, *args)

    def setStriked(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTextProperties_setStriked(self, *args)

    def isLastChar(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTextProperties_isLastChar(self, *args)

    def setLastChar(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTextProperties_setLastChar(self, *args)

    def isInBigFont(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTextProperties_isInBigFont(self, *args)

    def setInBigFont(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTextProperties_setInBigFont(self, *args)

    def isIncludePenups(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTextProperties_isIncludePenups(self, *args)

    def setIncludePenups(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTextProperties_setIncludePenups(self, *args)

    def isZeroNormals(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTextProperties_isZeroNormals(self, *args)

    def setZeroNormals(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTextProperties_setZeroNormals(self, *args)

    def ttfPolyDraw(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTextProperties_ttfPolyDraw(self, *args)

    def setTtfPolyDraw(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTextProperties_setTtfPolyDraw(self, *args)

    def trackingPercent(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdTextProperties_trackingPercent(self, *args)

    def setTrackingPercent(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTextProperties_setTrackingPercent(self, *args)

    def textQuality(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdTextProperties_textQuality(self, *args)

    def setTextQuality(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTextProperties_setTextQuality(self, *args)

    def isTriangleCache(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTextProperties_isTriangleCache(self, *args)

    def setSetTriangleCache(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTextProperties_setSetTriangleCache(self, *args)

    def isLastPosOnly(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTextProperties_isLastPosOnly(self, *args)

    def setLastPosOnly(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTextProperties_setLastPosOnly(self, *args)

    def isGlyph(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTextProperties_isGlyph(self, *args)

    def setGlyph(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTextProperties_setGlyph(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdTextProperties

# Register OdTextProperties in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdTextProperties_swigregister(OdTextProperties)

class OdFont(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdFont >":
        return _ODA_Kernel_Py3.OdFont_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdFont_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdFont_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdFont_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdFont >":
        return _ODA_Kernel_Py3.OdFont_createObject(*args)
    kBigFont10 = _ODA_Kernel_Py3.OdFont_kBigFont10
    kUniFont10 = _ODA_Kernel_Py3.OdFont_kUniFont10
    kFont10 = _ODA_Kernel_Py3.OdFont_kFont10
    kFont11 = _ODA_Kernel_Py3.OdFont_kFont11
    kFont10A = _ODA_Kernel_Py3.OdFont_kFont10A
    kTrueType = _ODA_Kernel_Py3.OdFont_kTrueType
    kFontGdt = _ODA_Kernel_Py3.OdFont_kFontGdt
    kFontSimplex6 = _ODA_Kernel_Py3.OdFont_kFontSimplex6
    kShapes11 = _ODA_Kernel_Py3.OdFont_kShapes11
    kFontRsc = _ODA_Kernel_Py3.OdFont_kFontRsc

    def getFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdFont_getFlags(self, *args)

    def flags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdFont_flags(self, *args)

    def setFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdFont_setFlags(self, *args)

    def addFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdFont_addFlag(self, *args)

    def initialize(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdFont_initialize(self, *args)

    def drawCharacter(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdFont_drawCharacter(self, *args)

    def getAbove(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdFont_getAbove(self, *args)

    def getBelow(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdFont_getBelow(self, *args)

    def getAvailableChars(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdFont_getAvailableChars(self, *args)

    def hasCharacter(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdFont_hasCharacter(self, *args)

    def getHeight(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdFont_getHeight(self, *args)

    def getInternalLeading(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdFont_getInternalLeading(self, *args)

    def fontAbove(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdFont_fontAbove(self, *args)

    def getUnderlinePos(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdFont_getUnderlinePos(self, *args)

    def getOverlinePos(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdFont_getOverlinePos(self, *args)

    def isShxFont(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdFont_isShxFont(self, *args)

    def getAverageWidth(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdFont_getAverageWidth(self, *args)

    def getScore(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdFont_getScore(self, *args)

    def getFontData(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdFont_getFontData(self, *args)

    def supportsVerticalMode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdFont_supportsVerticalMode(self, *args)

    def getFileName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdFont_getFileName(self, *args)

    def getDescriptor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdFont_getDescriptor(self, *args)

    def getLogFont(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdFont_getLogFont(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdFont

# Register OdFont in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdFont_swigregister(OdFont)

def OdFont_cast(*args) -> "OdSmartPtr< OdFont >":
    return _ODA_Kernel_Py3.OdFont_cast(*args)

def OdFont_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdFont_desc(*args)

def OdFont_createObject(*args) -> "OdSmartPtr< OdFont >":
    return _ODA_Kernel_Py3.OdFont_createObject(*args)

class OdBaseTextIterator(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def nextChar(self, *args) -> "OdChar":
        return _ODA_Kernel_Py3.OdBaseTextIterator_nextChar(self, *args)

    def currProperties(self, *args) -> "OdCharacterProperties const &":
        return _ODA_Kernel_Py3.OdBaseTextIterator_currProperties(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBaseTextIterator

# Register OdBaseTextIterator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBaseTextIterator_swigregister(OdBaseTextIterator)

class OdGeSurface(OdGeEntity3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def paramOf(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeSurface_paramOf(self, *args)

    def isOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeSurface_isOn(self, *args)

    def closestPointTo(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeSurface_closestPointTo(self, *args)

    def getClosestPointTo(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeSurface_getClosestPointTo(self, *args)

    def distanceTo(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeSurface_distanceTo(self, *args)

    def isNormalReversed(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeSurface_isNormalReversed(self, *args)

    def isLeftHanded(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeSurface_isLeftHanded(self, *args)

    def reverseNormal(self, *args) -> "OdGeSurface &":
        return _ODA_Kernel_Py3.OdGeSurface_reverseNormal(self, *args)

    def getEnvelope(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeSurface_getEnvelope(self, *args)

    def isClosedInU(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeSurface_isClosedInU(self, *args)

    def isClosedInV(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeSurface_isClosedInV(self, *args)

    def evalPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeSurface_evalPoint(self, *args)

    def getGeomExtents(self, *args) -> "OdGeExtents3d":
        return _ODA_Kernel_Py3.OdGeSurface_getGeomExtents(self, *args)

    def project(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeSurface_project(self, *args)

    def setEnvelope(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeSurface_setEnvelope(self, *args)

    def makeIsoparamCurve(self, *args) -> "OdGeCurve3d *":
        return _ODA_Kernel_Py3.OdGeSurface_makeIsoparamCurve(self, *args)

    def getPoles(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeSurface_getPoles(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeSurface

# Register OdGeSurface in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeSurface_swigregister(OdGeSurface)

class OdrxMemoryManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Alloc(*args) -> "void *":
        return _ODA_Kernel_Py3.OdrxMemoryManager_Alloc(*args)

    @staticmethod
    def Free(*args) -> "void":
        return _ODA_Kernel_Py3.OdrxMemoryManager_Free(*args)

    @staticmethod
    def Realloc(*args) -> "void *":
        return _ODA_Kernel_Py3.OdrxMemoryManager_Realloc(*args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdrxMemoryManager_swiginit(self, _ODA_Kernel_Py3.new_OdrxMemoryManager(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdrxMemoryManager

# Register OdrxMemoryManager in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdrxMemoryManager_swigregister(OdrxMemoryManager)

def OdrxMemoryManager_Alloc(*args) -> "void *":
    return _ODA_Kernel_Py3.OdrxMemoryManager_Alloc(*args)

def OdrxMemoryManager_Free(*args) -> "void":
    return _ODA_Kernel_Py3.OdrxMemoryManager_Free(*args)

def OdrxMemoryManager_Realloc(*args) -> "void *":
    return _ODA_Kernel_Py3.OdrxMemoryManager_Realloc(*args)

class OdGsCache(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsCache >":
        return _ODA_Kernel_Py3.OdGsCache_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsCache_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsCache_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsCache_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsCache >":
        return _ODA_Kernel_Py3.OdGsCache_createObject(*args)

    def model(self, *args) -> "OdGsModel *":
        return _ODA_Kernel_Py3.OdGsCache_model(self, *args)

    def setDrawableNull(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsCache_setDrawableNull(self, *args)

    def extents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsCache_extents(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsCache

# Register OdGsCache in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsCache_swigregister(OdGsCache)

def OdGsCache_cast(*args) -> "OdSmartPtr< OdGsCache >":
    return _ODA_Kernel_Py3.OdGsCache_cast(*args)

def OdGsCache_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsCache_desc(*args)

def OdGsCache_createObject(*args) -> "OdSmartPtr< OdGsCache >":
    return _ODA_Kernel_Py3.OdGsCache_createObject(*args)

class OdGsModel(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsModel >":
        return _ODA_Kernel_Py3.OdGsModel_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsModel_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsModel_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsModel_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsModel >":
        return _ODA_Kernel_Py3.OdGsModel_createObject(*args)

    def onAdded(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_onAdded(self, *args)

    def onModified(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_onModified(self, *args)

    def onModifiedGraphics(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_onModifiedGraphics(self, *args)

    def onErased(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_onErased(self, *args)

    def onUnerased(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_onUnerased(self, *args)
    kInvalidateIsolines = _ODA_Kernel_Py3.OdGsModel_kInvalidateIsolines
    kInvalidateViewportCache = _ODA_Kernel_Py3.OdGsModel_kInvalidateViewportCache
    kInvalidateAll = _ODA_Kernel_Py3.OdGsModel_kInvalidateAll
    kInvalidateMaterials = _ODA_Kernel_Py3.OdGsModel_kInvalidateMaterials
    kInvalidateLinetypes = _ODA_Kernel_Py3.OdGsModel_kInvalidateLinetypes

    def invalidate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_invalidate(self, *args)

    def invalidateVisible(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_invalidateVisible(self, *args)

    def setTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_setTransform(self, *args)

    def transform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGsModel_transform(self, *args)

    def highlight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_highlight(self, *args)

    def hide(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_hide(self, *args)
    kMinRenderType = _ODA_Kernel_Py3.OdGsModel_kMinRenderType
    kUserBg1 = _ODA_Kernel_Py3.OdGsModel_kUserBg1
    kUserBg2 = _ODA_Kernel_Py3.OdGsModel_kUserBg2
    kUserBg3 = _ODA_Kernel_Py3.OdGsModel_kUserBg3
    kMain = _ODA_Kernel_Py3.OdGsModel_kMain
    kSprite = _ODA_Kernel_Py3.OdGsModel_kSprite
    kDirect = _ODA_Kernel_Py3.OdGsModel_kDirect
    kHighlight = _ODA_Kernel_Py3.OdGsModel_kHighlight
    kHighlightSelection = _ODA_Kernel_Py3.OdGsModel_kHighlightSelection
    kDirectTopmost = _ODA_Kernel_Py3.OdGsModel_kDirectTopmost
    kContrast = _ODA_Kernel_Py3.OdGsModel_kContrast
    kCount = _ODA_Kernel_Py3.OdGsModel_kCount
    kUserFg1 = _ODA_Kernel_Py3.OdGsModel_kUserFg1
    kUserFg2 = _ODA_Kernel_Py3.OdGsModel_kUserFg2
    kUserFg3 = _ODA_Kernel_Py3.OdGsModel_kUserFg3
    kMaxRenderType = _ODA_Kernel_Py3.OdGsModel_kMaxRenderType
    kNumRenderTypes = _ODA_Kernel_Py3.OdGsModel_kNumRenderTypes

    def setRenderType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_setRenderType(self, *args)

    def renderType(self, *args) -> "OdGsModel::RenderType":
        return _ODA_Kernel_Py3.OdGsModel_renderType(self, *args)

    def setRenderModeOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_setRenderModeOverride(self, *args)

    def renderModeOverride(self, *args) -> "OdGsView::RenderMode":
        return _ODA_Kernel_Py3.OdGsModel_renderModeOverride(self, *args)

    def setViewClippingOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_setViewClippingOverride(self, *args)

    def viewClippingOverride(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsModel_viewClippingOverride(self, *args)

    def setBackground(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_setBackground(self, *args)

    def background(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGsModel_background(self, *args)

    def setVisualStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_setVisualStyle(self, *args)

    def visualStyle(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsModel_visualStyle(self, *args)

    def addModelReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_addModelReactor(self, *args)

    def removeModelReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_removeModelReactor(self, *args)

    def setEnableSectioning(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_setEnableSectioning(self, *args)

    def isSectioningEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsModel_isSectioningEnabled(self, *args)

    def setSectioning(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsModel_setSectioning(self, *args)

    def setSectioningVisualStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_setSectioningVisualStyle(self, *args)

    def setEnableLinetypes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_setEnableLinetypes(self, *args)

    def isLinetypesEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsModel_isLinetypesEnabled(self, *args)

    def setSelectable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_setSelectable(self, *args)

    def isSelectable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsModel_isSelectable(self, *args)

    def setEnableViewExtentsCalculation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_setEnableViewExtentsCalculation(self, *args)

    def isViewExtentsCalculationEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsModel_isViewExtentsCalculationEnabled(self, *args)

    def setEnableLightsInBlocks(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_setEnableLightsInBlocks(self, *args)

    def isLightsInBlocksEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsModel_isLightsInBlocksEnabled(self, *args)

    def setViewSectioningOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsModel_setViewSectioningOverride(self, *args)

    def viewSectioningOverride(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsModel_viewSectioningOverride(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsModel

# Register OdGsModel in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsModel_swigregister(OdGsModel)

def OdGsModel_cast(*args) -> "OdSmartPtr< OdGsModel >":
    return _ODA_Kernel_Py3.OdGsModel_cast(*args)

def OdGsModel_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsModel_desc(*args)

def OdGsModel_createObject(*args) -> "OdSmartPtr< OdGsModel >":
    return _ODA_Kernel_Py3.OdGsModel_createObject(*args)

class OdGsModelReactor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsModelReactor_swiginit(self, _ODA_Kernel_Py3.new_OdGsModelReactor(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsModelReactor

    def onAdded(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsModelReactor_onAdded(self, *args)

    def onErased(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsModelReactor_onErased(self, *args)

    def onModified(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsModelReactor_onModified(self, *args)

    def onUnerased(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsModelReactor_onUnerased(self, *args)

# Register OdGsModelReactor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsModelReactor_swigregister(OdGsModelReactor)

class OdMutexPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdMutexPtr_swiginit(self, _ODA_Kernel_Py3.new_OdMutexPtr(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdMutexPtr

    def get(self, *args) -> "OdMutex *":
        return _ODA_Kernel_Py3.OdMutexPtr_get(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdMutexPtr_clear(self, *args)

# Register OdMutexPtr in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdMutexPtr_swigregister(OdMutexPtr)

class OdMutexPtrAutoLock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdMutexPtrAutoLock_swiginit(self, _ODA_Kernel_Py3.new_OdMutexPtrAutoLock(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdMutexPtrAutoLock

    def lock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdMutexPtrAutoLock_lock(self, *args)

    def unlock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdMutexPtrAutoLock_unlock(self, *args)

# Register OdMutexPtrAutoLock in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdMutexPtrAutoLock_swigregister(OdMutexPtrAutoLock)

class ThreadsCounterReactor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def increase(self, *args) -> "void":
        return _ODA_Kernel_Py3.ThreadsCounterReactor_increase(self, *args)

    def decrease(self, *args) -> "void":
        return _ODA_Kernel_Py3.ThreadsCounterReactor_decrease(self, *args)

    def startThread(self, *args) -> "void":
        return _ODA_Kernel_Py3.ThreadsCounterReactor_startThread(self, *args)

    def stopThread(self, *args) -> "void":
        return _ODA_Kernel_Py3.ThreadsCounterReactor_stopThread(self, *args)

# Register ThreadsCounterReactor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.ThreadsCounterReactor_swigregister(ThreadsCounterReactor)

class ThreadsCounter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    kNoAttributes = _ODA_Kernel_Py3.ThreadsCounter_kNoAttributes
    kMtLoadingAttributes = _ODA_Kernel_Py3.ThreadsCounter_kMtLoadingAttributes
    kMtRegenAttributes = _ODA_Kernel_Py3.ThreadsCounter_kMtRegenAttributes
    kStRegenAttributes = _ODA_Kernel_Py3.ThreadsCounter_kStRegenAttributes
    kMtDisplayAttributes = _ODA_Kernel_Py3.ThreadsCounter_kMtDisplayAttributes
    kMtModelerAttributes = _ODA_Kernel_Py3.ThreadsCounter_kMtModelerAttributes
    kAllAttributes = _ODA_Kernel_Py3.ThreadsCounter_kAllAttributes

    def __nonzero__(self):
        return _ODA_Kernel_Py3.ThreadsCounter___nonzero__(self)
    __bool__ = __nonzero__



    def addReactor(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ThreadsCounter_addReactor(self, *args)

    def removeReactor(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ThreadsCounter_removeReactor(self, *args)

    def hasReactor(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ThreadsCounter_hasReactor(self, *args)

    def nReactors(self, *args) -> "int":
        return _ODA_Kernel_Py3.ThreadsCounter_nReactors(self, *args)

    def setThreadPoolService(self, *args) -> "void":
        return _ODA_Kernel_Py3.ThreadsCounter_setThreadPoolService(self, *args)

    def getThreadPoolService(self, *args) -> "OdRxThreadPoolService *":
        return _ODA_Kernel_Py3.ThreadsCounter_getThreadPoolService(self, *args)

    def increase(self, *args) -> "void":
        return _ODA_Kernel_Py3.ThreadsCounter_increase(self, *args)

    def decrease(self, *args) -> "void":
        return _ODA_Kernel_Py3.ThreadsCounter_decrease(self, *args)

    def startThread(self, *args) -> "void":
        return _ODA_Kernel_Py3.ThreadsCounter_startThread(self, *args)

    def stopThread(self, *args) -> "void":
        return _ODA_Kernel_Py3.ThreadsCounter_stopThread(self, *args)

    def hasThread(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ThreadsCounter_hasThread(self, *args)

    def setMainThreadFunc(self, *args) -> "void":
        return _ODA_Kernel_Py3.ThreadsCounter_setMainThreadFunc(self, *args)

    def getMainThreadFunc(self, *args) -> "ExecuteMainThreadFunc":
        return _ODA_Kernel_Py3.ThreadsCounter_getMainThreadFunc(self, *args)

# Register ThreadsCounter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.ThreadsCounter_swigregister(ThreadsCounter)


def odThreadsCounter(*args) -> "ThreadsCounter &":
    return _ODA_Kernel_Py3.odThreadsCounter(*args)

def odExecuteMainThreadAction(*args) -> "bool":
    return _ODA_Kernel_Py3.odExecuteMainThreadAction(*args)

def odGetCurrentThreadId(*args) -> "unsigned int":
    return _ODA_Kernel_Py3.odGetCurrentThreadId(*args)

def odThreadYield(*args) -> "void":
    return _ODA_Kernel_Py3.odThreadYield(*args)
class OdGiExtAccum(OdGiConveyorNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiExtAccum >":
        return _ODA_Kernel_Py3.OdGiExtAccum_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiExtAccum_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiExtAccum_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiExtAccum_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiExtAccum >":
        return _ODA_Kernel_Py3.OdGiExtAccum_createObject(*args)

    def setDrawContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtAccum_setDrawContext(self, *args)

    def setDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtAccum_setDeviation(self, *args)

    def geometry(self, *args) -> "OdGiConveyorGeometry &":
        return _ODA_Kernel_Py3.OdGiExtAccum_geometry(self, *args)

    def getExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiExtAccum_getExtents(self, *args)

    def resetExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtAccum_resetExtents(self, *args)

    def addExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtAccum_addExtents(self, *args)

    def plineContainBulges(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiExtAccum_plineContainBulges(self, *args)

    @staticmethod
    def textExtents(*args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtAccum_textExtents(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiExtAccum

# Register OdGiExtAccum in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiExtAccum_swigregister(OdGiExtAccum)

def OdGiExtAccum_cast(*args) -> "OdSmartPtr< OdGiExtAccum >":
    return _ODA_Kernel_Py3.OdGiExtAccum_cast(*args)

def OdGiExtAccum_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiExtAccum_desc(*args)

def OdGiExtAccum_createObject(*args) -> "OdSmartPtr< OdGiExtAccum >":
    return _ODA_Kernel_Py3.OdGiExtAccum_createObject(*args)

def OdGiExtAccum_textExtents(*args) -> "void":
    return _ODA_Kernel_Py3.OdGiExtAccum_textExtents(*args)

class OdGsBaseModelLocalIds(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def onViewDelete(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModelLocalIds_onViewDelete(self, *args)

    def resetViewId(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModelLocalIds_resetViewId(self, *args)

    def getViewId(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsBaseModelLocalIds_getViewId(self, *args)

    def registerView(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsBaseModelLocalIds_registerView(self, *args)

    def getMaxId(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsBaseModelLocalIds_getMaxId(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsBaseModelLocalIds >":
        return _ODA_Kernel_Py3.OdGsBaseModelLocalIds_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsBaseModelLocalIds

# Register OdGsBaseModelLocalIds in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsBaseModelLocalIds_swigregister(OdGsBaseModelLocalIds)

def OdGsBaseModelLocalIds_createObject(*args) -> "OdSmartPtr< OdGsBaseModelLocalIds >":
    return _ODA_Kernel_Py3.OdGsBaseModelLocalIds_createObject(*args)

class OdGsViewLocalId(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsViewLocalId_swiginit(self, _ODA_Kernel_Py3.new_OdGsViewLocalId(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsViewLocalId

    def setView(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewLocalId_setView(self, *args)

    def view(self, *args) -> "OdGsViewImpl *":
        return _ODA_Kernel_Py3.OdGsViewLocalId_view(self, *args)

    def localViewportId(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsViewLocalId_localViewportId(self, *args)

    def getLocalViewportId(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsViewLocalId_getLocalViewportId(self, *args)

    def reset(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewLocalId_reset(self, *args)

    def refs(self, *args) -> "OdArray< OdGsBaseModelLocalIdsPtr > &":
        return _ODA_Kernel_Py3.OdGsViewLocalId_refs(self, *args)

# Register OdGsViewLocalId in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsViewLocalId_swigregister(OdGsViewLocalId)

class OdGiClippedGeometryOutputCallback(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clippedGeometryOutputCallbackProc(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutputCallback_clippedGeometryOutputCallbackProc(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiClippedGeometryOutputCallback

# Register OdGiClippedGeometryOutputCallback in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiClippedGeometryOutputCallback_swigregister(OdGiClippedGeometryOutputCallback)

class OdGiClippedGeometryOutput(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def destGeometry(self, *args) -> "OdGiConveyorGeometry &":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_destGeometry(self, *args)

    def drawContext(self, *args) -> "OdGiConveyorContext &":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_drawContext(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_copyFrom(self, *args)

    def getInterface(self, *args) -> "OdGiClippedGeometryOutput::ClippedGeometryOutputInterface *":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_getInterface(self, *args)

    def setInterface(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_setInterface(self, *args)

    def geometryProcessingCallback(self, *args) -> "OdGiClippedGeometryOutputCallback *":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_geometryProcessingCallback(self, *args)

    def setGeometryProcessingCallback(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_setGeometryProcessingCallback(self, *args)

    def isProcessingEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_isProcessingEnabled(self, *args)

    def setProcessingEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_setProcessingEnabled(self, *args)

    def isNonSectionableGeometryClipping(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_isNonSectionableGeometryClipping(self, *args)

    def setNonSectionableGeometryClipping(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_setNonSectionableGeometryClipping(self, *args)

    def setTraitsOverrideFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_setTraitsOverrideFlags(self, *args)

    def traitsOverrideFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_traitsOverrideFlags(self, *args)

    def setTraitsOverrides(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_setTraitsOverrides(self, *args)

    def traitsOverrides(self, *args) -> "OdGiSubEntityTraitsData const &":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_traitsOverrides(self, *args)

    def setupDrawableProcessing(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_setupDrawableProcessing(self, *args)

    def setupTraits(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_setupTraits(self, *args)

    def releaseTraits(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_releaseTraits(self, *args)

    def plineProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_plineProc(self, *args)

    def polylineProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_polylineProc(self, *args)

    def polygonProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_polygonProc(self, *args)

    def xlineProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_xlineProc(self, *args)

    def rayProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_rayProc(self, *args)

    def meshProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_meshProc(self, *args)

    def shellProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_shellProc(self, *args)

    def circleProc2(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_circleProc2(self, *args)

    def circleProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_circleProc(self, *args)

    def circularArcProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_circularArcProc(self, *args)

    def ellipArcProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_ellipArcProc(self, *args)

    def nurbsProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_nurbsProc(self, *args)

    def textProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_textProc(self, *args)

    def textProc2(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_textProc2(self, *args)

    def shapeProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_shapeProc(self, *args)

    def rasterImageProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_rasterImageProc(self, *args)

    def metafileProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_metafileProc(self, *args)

    def xlineProc2(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_xlineProc2(self, *args)

    def rayProc2(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_rayProc2(self, *args)

    def ttfPolyDrawProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_ttfPolyDrawProc(self, *args)

    def polypointProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_polypointProc(self, *args)

    def rowOfDotsProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_rowOfDotsProc(self, *args)

    def pointCloudProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_pointCloudProc(self, *args)

    def edgeProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryOutput_edgeProc(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiClippedGeometryOutput

# Register OdGiClippedGeometryOutput in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiClippedGeometryOutput_swigregister(OdGiClippedGeometryOutput)

class ClippedGeometryOutputInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def destinationGeometry(self, *args) -> "OdGiConveyorGeometry &":
        return _ODA_Kernel_Py3.ClippedGeometryOutputInterface_destinationGeometry(self, *args)

    def conveyorContext(self, *args) -> "OdGiConveyorContext &":
        return _ODA_Kernel_Py3.ClippedGeometryOutputInterface_conveyorContext(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_ClippedGeometryOutputInterface

# Register ClippedGeometryOutputInterface in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.ClippedGeometryOutputInterface_swigregister(ClippedGeometryOutputInterface)

class OdGiSectionGeometryOutput(OdGiClippedGeometryOutput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiSectionGeometryOutput >":
        return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiSectionGeometryOutput >":
        return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_createObject(*args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_copyFrom(self, *args)

    def isClosedSectionsOutputEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_isClosedSectionsOutputEnabled(self, *args)

    def enableClosedSectionsOutput(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_enableClosedSectionsOutput(self, *args)

    def isOpenedSectionsOutputEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_isOpenedSectionsOutputEnabled(self, *args)

    def enableOpenedSectionsOutput(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_enableOpenedSectionsOutput(self, *args)

    def isOutputOfClosedSectionsAsPolylinesEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_isOutputOfClosedSectionsAsPolylinesEnabled(self, *args)

    def enableOutputOfClosedSectionsAsPolylines(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_enableOutputOfClosedSectionsAsPolylines(self, *args)

    def isSectionToleranceOverrideEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_isSectionToleranceOverrideEnabled(self, *args)

    def sectionToleranceOverride(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_sectionToleranceOverride(self, *args)

    def setSectionToleranceOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_setSectionToleranceOverride(self, *args)

    def resetSectionToleranceOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_resetSectionToleranceOverride(self, *args)

    def polylineProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_polylineProc(self, *args)

    def shellProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_shellProc(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSectionGeometryOutput

# Register OdGiSectionGeometryOutput in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSectionGeometryOutput_swigregister(OdGiSectionGeometryOutput)

def OdGiSectionGeometryOutput_cast(*args) -> "OdSmartPtr< OdGiSectionGeometryOutput >":
    return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_cast(*args)

def OdGiSectionGeometryOutput_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_desc(*args)

def OdGiSectionGeometryOutput_createObject(*args) -> "OdSmartPtr< OdGiSectionGeometryOutput >":
    return _ODA_Kernel_Py3.OdGiSectionGeometryOutput_createObject(*args)

class OdGiCuttedGeometryOutput(OdGiClippedGeometryOutput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiCuttedGeometryOutput >":
        return _ODA_Kernel_Py3.OdGiCuttedGeometryOutput_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiCuttedGeometryOutput_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiCuttedGeometryOutput_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiCuttedGeometryOutput_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiCuttedGeometryOutput >":
        return _ODA_Kernel_Py3.OdGiCuttedGeometryOutput_createObject(*args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiCuttedGeometryOutput_copyFrom(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiCuttedGeometryOutput

# Register OdGiCuttedGeometryOutput in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiCuttedGeometryOutput_swigregister(OdGiCuttedGeometryOutput)

def OdGiCuttedGeometryOutput_cast(*args) -> "OdSmartPtr< OdGiCuttedGeometryOutput >":
    return _ODA_Kernel_Py3.OdGiCuttedGeometryOutput_cast(*args)

def OdGiCuttedGeometryOutput_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiCuttedGeometryOutput_desc(*args)

def OdGiCuttedGeometryOutput_createObject(*args) -> "OdSmartPtr< OdGiCuttedGeometryOutput >":
    return _ODA_Kernel_Py3.OdGiCuttedGeometryOutput_createObject(*args)

class OdGeSphere(OdGeSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeSphere_swiginit(self, _ODA_Kernel_Py3.new_OdGeSphere(*args))

    def radius(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeSphere_radius(self, *args)

    def center(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeSphere_center(self, *args)

    def getAnglesInU(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeSphere_getAnglesInU(self, *args)

    def getAnglesInV(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeSphere_getAnglesInV(self, *args)

    def northAxis(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeSphere_northAxis(self, *args)

    def refAxis(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeSphere_refAxis(self, *args)

    def northPole(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeSphere_northPole(self, *args)

    def southPole(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeSphere_southPole(self, *args)

    def isOuterNormal(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeSphere_isOuterNormal(self, *args)

    def isClosed(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeSphere_isClosed(self, *args)

    def setRadius(self, *args) -> "OdGeSphere &":
        return _ODA_Kernel_Py3.OdGeSphere_setRadius(self, *args)

    def setAnglesInU(self, *args) -> "OdGeSphere &":
        return _ODA_Kernel_Py3.OdGeSphere_setAnglesInU(self, *args)

    def setAnglesInV(self, *args) -> "OdGeSphere &":
        return _ODA_Kernel_Py3.OdGeSphere_setAnglesInV(self, *args)

    def set(self, *args) -> "OdGeSphere &":
        return _ODA_Kernel_Py3.OdGeSphere_set(self, *args)

    def intersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeSphere_intersectWith(self, *args)

    def isReverseV(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeSphere_isReverseV(self, *args)

    def setReverseV(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeSphere_setReverseV(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeSphere

# Register OdGeSphere in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeSphere_swigregister(OdGeSphere)

class OdGiLinetyper(OdGiConveyorNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiLinetyper >":
        return _ODA_Kernel_Py3.OdGiLinetyper_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiLinetyper_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiLinetyper_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiLinetyper_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiLinetyper >":
        return _ODA_Kernel_Py3.OdGiLinetyper_createObject(*args)

    def setDrawContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetyper_setDrawContext(self, *args)

    def setDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetyper_setDeviation(self, *args)

    def setLinetype(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiLinetyper_setLinetype(self, *args)

    def linetypeTraits(self, *args) -> "OdGiLinetypeTraits &":
        return _ODA_Kernel_Py3.OdGiLinetyper_linetypeTraits(self, *args)

    def enable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetyper_enable(self, *args)

    def enabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLinetyper_enabled(self, *args)

    def disable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetyper_disable(self, *args)

    def setAnalyticLinetypingCircles(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetyper_setAnalyticLinetypingCircles(self, *args)

    def isAnalyticLinetypingCircles(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLinetyper_isAnalyticLinetypingCircles(self, *args)

    def setAnalyticLinetypingComplexCurves(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetyper_setAnalyticLinetypingComplexCurves(self, *args)

    def isAnalyticLinetypingComplexCurves(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLinetyper_isAnalyticLinetypingComplexCurves(self, *args)

    def redirectionGeometry(self, *args) -> "OdGiConveyorGeometry *":
        return _ODA_Kernel_Py3.OdGiLinetyper_redirectionGeometry(self, *args)

    def enableCache(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetyper_enableCache(self, *args)

    def disableCache(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetyper_disableCache(self, *args)

    def cacheEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLinetyper_cacheEnabled(self, *args)

    def clearCache(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetyper_clearCache(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLinetyper

# Register OdGiLinetyper in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLinetyper_swigregister(OdGiLinetyper)

def OdGiLinetyper_cast(*args) -> "OdSmartPtr< OdGiLinetyper >":
    return _ODA_Kernel_Py3.OdGiLinetyper_cast(*args)

def OdGiLinetyper_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiLinetyper_desc(*args)

def OdGiLinetyper_createObject(*args) -> "OdSmartPtr< OdGiLinetyper >":
    return _ODA_Kernel_Py3.OdGiLinetyper_createObject(*args)

class OdGiWorldDraw_(OdGiWorldDraw, OdGiWorldGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def geometry(self, *args) -> "OdGiWorldGeometry &":
        return _ODA_Kernel_Py3.OdGiWorldDraw__geometry(self, *args)

    def currentGiPath(self, *args) -> "OdGiPathNode const *":
        return _ODA_Kernel_Py3.OdGiWorldDraw__currentGiPath(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiWorldDraw_

# Register OdGiWorldDraw_ in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiWorldDraw__swigregister(OdGiWorldDraw_)

class OdGiViewportDraw_(OdGiViewportDraw, OdGiViewportGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def geometry(self, *args) -> "OdGiViewportGeometry &":
        return _ODA_Kernel_Py3.OdGiViewportDraw__geometry(self, *args)

    def currentGiPath(self, *args) -> "OdGiPathNode const *":
        return _ODA_Kernel_Py3.OdGiViewportDraw__currentGiPath(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiViewportDraw_

# Register OdGiViewportDraw_ in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiViewportDraw__swigregister(OdGiViewportDraw_)

class OdDbBaseDatabasePE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbBaseDatabasePE >":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbBaseDatabasePE >":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_createObject(*args)
    kZeroFlags = _ODA_Kernel_Py3.OdDbBaseDatabasePE_kZeroFlags
    kExactExtents = _ODA_Kernel_Py3.OdDbBaseDatabasePE_kExactExtents
    kUseViewExtents = _ODA_Kernel_Py3.OdDbBaseDatabasePE_kUseViewExtents
    kUseGivenExtents = _ODA_Kernel_Py3.OdDbBaseDatabasePE_kUseGivenExtents
    kUseGivenView = _ODA_Kernel_Py3.OdDbBaseDatabasePE_kUseGivenView

    def appServices(self, *args) -> "OdDbBaseHostAppServices *":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_appServices(self, *args)

    def getFilename(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getFilename(self, *args)

    def startTransaction(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_startTransaction(self, *args)

    def abortTransaction(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_abortTransaction(self, *args)

    def startUndoRecord(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_startUndoRecord(self, *args)

    def evaluateFields(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_evaluateFields(self, *args)

    def undo(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_undo(self, *args)

    def createGiContext(self, *args) -> "OdGiDefaultContextPtr":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_createGiContext(self, *args)

    def putNamedViewInfo(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_putNamedViewInfo(self, *args)

    def createTextIterator(self, *args) -> "OdBaseTextIteratorPtr":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_createTextIterator(self, *args)

    def setupActiveLayoutViews(self, *args) -> "OdGsDevicePtr":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_setupActiveLayoutViews(self, *args)

    def setupLayoutView(self, *args) -> "OdGsDevicePtr":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_setupLayoutView(self, *args)

    def setupPalette(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_setupPalette(self, *args)

    def getNextViewForActiveLayout(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getNextViewForActiveLayout(self, *args)

    def applyLayoutSettings(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_applyLayoutSettings(self, *args)

    def zoomToExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_zoomToExtents(self, *args)

    def loadPlotstyleTableForActiveLayout(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_loadPlotstyleTableForActiveLayout(self, *args)

    def layers(self, *args) -> "OdRxIteratorPtr":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_layers(self, *args)

    def visualStyles(self, *args) -> "OdRxIteratorPtr":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_visualStyles(self, *args)

    def getVisualStyleId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getVisualStyleId(self, *args)

    def currentLayout(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_currentLayout(self, *args)

    def setCurrentLayout(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_setCurrentLayout(self, *args)

    def layouts(self, *args) -> "OdRxIteratorPtr":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_layouts(self, *args)

    def getLayout(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getLayout(self, *args)

    def findLayoutByViewport(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_findLayoutByViewport(self, *args)

    def findLayoutIdByViewport(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_findLayoutIdByViewport(self, *args)

    def findLayoutNamed(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_findLayoutNamed(self, *args)

    def getFirstLayout(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getFirstLayout(self, *args)

    def getFirstLayoutId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getFirstLayoutId(self, *args)

    def getCreationTime(self, *args) -> "OdTimeStamp":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getCreationTime(self, *args)

    def getUpdateTime(self, *args) -> "OdTimeStamp":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getUpdateTime(self, *args)

    def getFingerPrintGuid(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getFingerPrintGuid(self, *args)

    def getVersionGuid(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getVersionGuid(self, *args)

    def getUnits(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getUnits(self, *args)

    def baseFormatter(self, *args) -> "OdUnitsFormatter *":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_baseFormatter(self, *args)

    def getMeasurement(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getMeasurement(self, *args)

    def getLineTypeById(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getLineTypeById(self, *args)

    def getTextStyleById(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getTextStyleById(self, *args)

    def getId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getId(self, *args)

    def getObject(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getObject(self, *args)

    def getHandle(self, *args) -> "OdDbHandle":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getHandle(self, *args)

    def getDatabase(self, *args) -> "OdDbBaseDatabase *":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getDatabase(self, *args)

    def getOwner(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getOwner(self, *args)

    def getCodePage(self, *args) -> "OdCodePageId":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getCodePage(self, *args)

    def getModelBlockId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getModelBlockId(self, *args)

    def getPaperBlockId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getPaperBlockId(self, *args)

    def currentLayoutId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_currentLayoutId(self, *args)

    def xrefBlockId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_xrefBlockId(self, *args)

    def setMultiThreadedRender(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_setMultiThreadedRender(self, *args)

    def isExclusiveReadingEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_isExclusiveReadingEnabled(self, *args)

    def isAProxy(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_isAProxy(self, *args)

    def openObject(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_openObject(self, *args)

    def upgradeOpen(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_upgradeOpen(self, *args)

    def downgradeOpen(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_downgradeOpen(self, *args)

    def getAnnoScaleSet(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getAnnoScaleSet(self, *args)

    def getCurrentLongTransation(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getCurrentLongTransation(self, *args)

    def addDatabaseUnloadReactor(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_addDatabaseUnloadReactor(self, *args)

    def removeDatabaseUnloadReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_removeDatabaseUnloadReactor(self, *args)

    def faceConversionHelper(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_faceConversionHelper(self, *args)

    def getDatabasePartialViewingMode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getDatabasePartialViewingMode(self, *args)

    def getObscuredLtype(self, *args) -> "OdInt16":
        return _ODA_Kernel_Py3.OdDbBaseDatabasePE_getObscuredLtype(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbBaseDatabasePE

# Register OdDbBaseDatabasePE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbBaseDatabasePE_swigregister(OdDbBaseDatabasePE)

def OdDbBaseDatabasePE_cast(*args) -> "OdSmartPtr< OdDbBaseDatabasePE >":
    return _ODA_Kernel_Py3.OdDbBaseDatabasePE_cast(*args)

def OdDbBaseDatabasePE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbBaseDatabasePE_desc(*args)

def OdDbBaseDatabasePE_createObject(*args) -> "OdSmartPtr< OdDbBaseDatabasePE >":
    return _ODA_Kernel_Py3.OdDbBaseDatabasePE_createObject(*args)

class DatabaseUnloadReactor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_DatabaseUnloadReactor

    def goodbye(self, *args) -> "void":
        return _ODA_Kernel_Py3.DatabaseUnloadReactor_goodbye(self, *args)

# Register DatabaseUnloadReactor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.DatabaseUnloadReactor_swigregister(DatabaseUnloadReactor)

class OdDbBaseLayerPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbBaseLayerPE >":
        return _ODA_Kernel_Py3.OdDbBaseLayerPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseLayerPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseLayerPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbBaseLayerPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbBaseLayerPE >":
        return _ODA_Kernel_Py3.OdDbBaseLayerPE_createObject(*args)

    def name(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseLayerPE_name(self, *args)

    def isOff(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseLayerPE_isOff(self, *args)

    def isFrozen(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseLayerPE_isFrozen(self, *args)

    def setIsOff(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseLayerPE_setIsOff(self, *args)

    def setIsFrozen(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseLayerPE_setIsFrozen(self, *args)

    def getLineType(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseLayerPE_getLineType(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbBaseLayerPE

# Register OdDbBaseLayerPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbBaseLayerPE_swigregister(OdDbBaseLayerPE)

def OdDbBaseLayerPE_cast(*args) -> "OdSmartPtr< OdDbBaseLayerPE >":
    return _ODA_Kernel_Py3.OdDbBaseLayerPE_cast(*args)

def OdDbBaseLayerPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbBaseLayerPE_desc(*args)

def OdDbBaseLayerPE_createObject(*args) -> "OdSmartPtr< OdDbBaseLayerPE >":
    return _ODA_Kernel_Py3.OdDbBaseLayerPE_createObject(*args)

class OdDbBaseVisualStylePE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbBaseVisualStylePE >":
        return _ODA_Kernel_Py3.OdDbBaseVisualStylePE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseVisualStylePE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseVisualStylePE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbBaseVisualStylePE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbBaseVisualStylePE >":
        return _ODA_Kernel_Py3.OdDbBaseVisualStylePE_createObject(*args)

    def name(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseVisualStylePE_name(self, *args)

    def isInternal(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseVisualStylePE_isInternal(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbBaseVisualStylePE

# Register OdDbBaseVisualStylePE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbBaseVisualStylePE_swigregister(OdDbBaseVisualStylePE)

def OdDbBaseVisualStylePE_cast(*args) -> "OdSmartPtr< OdDbBaseVisualStylePE >":
    return _ODA_Kernel_Py3.OdDbBaseVisualStylePE_cast(*args)

def OdDbBaseVisualStylePE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbBaseVisualStylePE_desc(*args)

def OdDbBaseVisualStylePE_createObject(*args) -> "OdSmartPtr< OdDbBaseVisualStylePE >":
    return _ODA_Kernel_Py3.OdDbBaseVisualStylePE_createObject(*args)

class OdDbBaseAnnotationScalePE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbBaseAnnotationScalePE >":
        return _ODA_Kernel_Py3.OdDbBaseAnnotationScalePE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseAnnotationScalePE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseAnnotationScalePE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbBaseAnnotationScalePE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbBaseAnnotationScalePE >":
        return _ODA_Kernel_Py3.OdDbBaseAnnotationScalePE_createObject(*args)

    def scaleRatio(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseAnnotationScalePE_scaleRatio(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbBaseAnnotationScalePE

# Register OdDbBaseAnnotationScalePE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbBaseAnnotationScalePE_swigregister(OdDbBaseAnnotationScalePE)

def OdDbBaseAnnotationScalePE_cast(*args) -> "OdSmartPtr< OdDbBaseAnnotationScalePE >":
    return _ODA_Kernel_Py3.OdDbBaseAnnotationScalePE_cast(*args)

def OdDbBaseAnnotationScalePE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbBaseAnnotationScalePE_desc(*args)

def OdDbBaseAnnotationScalePE_createObject(*args) -> "OdSmartPtr< OdDbBaseAnnotationScalePE >":
    return _ODA_Kernel_Py3.OdDbBaseAnnotationScalePE_createObject(*args)

class OdDbBaseLayoutPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbBaseLayoutPE >":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbBaseLayoutPE >":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_createObject(*args)
    kInches = _ODA_Kernel_Py3.OdDbBaseLayoutPE_kInches
    kMillimeters = _ODA_Kernel_Py3.OdDbBaseLayoutPE_kMillimeters
    kPixels = _ODA_Kernel_Py3.OdDbBaseLayoutPE_kPixels
    k0degrees = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k0degrees
    k90degrees = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k90degrees
    k180degrees = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k180degrees
    k270degrees = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k270degrees
    kDisplay = _ODA_Kernel_Py3.OdDbBaseLayoutPE_kDisplay
    kExtents = _ODA_Kernel_Py3.OdDbBaseLayoutPE_kExtents
    kLimits = _ODA_Kernel_Py3.OdDbBaseLayoutPE_kLimits
    kView = _ODA_Kernel_Py3.OdDbBaseLayoutPE_kView
    kWindow = _ODA_Kernel_Py3.OdDbBaseLayoutPE_kWindow
    kLayout = _ODA_Kernel_Py3.OdDbBaseLayoutPE_kLayout
    kScaleToFit = _ODA_Kernel_Py3.OdDbBaseLayoutPE_kScaleToFit
    k1_128in_1ft = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1_128in_1ft
    k1_64in_1ft = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1_64in_1ft
    k1_32in_1ft = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1_32in_1ft
    k1_16in_1ft = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1_16in_1ft
    k3_32in_1ft = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k3_32in_1ft
    k1_8in_1ft = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1_8in_1ft
    k3_16in_1ft = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k3_16in_1ft
    k1_4in_1ft = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1_4in_1ft
    k3_8in_1ft = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k3_8in_1ft
    k1_2in_1ft = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1_2in_1ft
    k3_4in_1ft = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k3_4in_1ft
    k1in_1ft = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1in_1ft
    k3in_1ft = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k3in_1ft
    k6in_1ft = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k6in_1ft
    k1ft_1ft = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1ft_1ft
    k1_1 = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1_1
    k1_2 = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1_2
    k1_4 = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1_4
    k1_5 = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1_5
    k1_8 = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1_8
    k1_10 = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1_10
    k1_16 = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1_16
    k1_20 = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1_20
    k1_30 = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1_30
    k1_40 = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1_40
    k1_50 = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1_50
    k1_100 = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1_100
    k2_1 = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k2_1
    k4_1 = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k4_1
    k8_1 = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k8_1
    k10_1 = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k10_1
    k100_1 = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k100_1
    k1000_1 = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1000_1
    k1and1_2in_1ft = _ODA_Kernel_Py3.OdDbBaseLayoutPE_k1and1_2in_1ft

    def name(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_name(self, *args)

    def isModelLayout(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_isModelLayout(self, *args)

    def printLineweights(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_printLineweights(self, *args)

    def showPlotStyles(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_showPlotStyles(self, *args)

    def paperName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_paperName(self, *args)

    def getPaperSize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_getPaperSize(self, *args)

    def plotRotation(self, *args) -> "OdDbBaseLayoutPE::PlotRotation":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_plotRotation(self, *args)

    def getTopMargin(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_getTopMargin(self, *args)

    def getRightMargin(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_getRightMargin(self, *args)

    def getBottomMargin(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_getBottomMargin(self, *args)

    def getLeftMargin(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_getLeftMargin(self, *args)

    def isOverallVPortErased(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_isOverallVPortErased(self, *args)

    def getGeomExtents(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_getGeomExtents(self, *args)

    def useStandardScale(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_useStandardScale(self, *args)

    def getStdScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_getStdScale(self, *args)

    def getCustomPrintScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_getCustomPrintScale(self, *args)

    def plotType(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_plotType(self, *args)

    def getPlotType(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_getPlotType(self, *args)

    def getPlotViewName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_getPlotViewName(self, *args)

    def getPlotWindowArea(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_getPlotWindowArea(self, *args)

    def getPlotOrigin(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_getPlotOrigin(self, *args)

    def getPlotPaperSize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_getPlotPaperSize(self, *args)

    def plotPaperUnits(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_plotPaperUnits(self, *args)

    def getPlotPaperUnits(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_getPlotPaperUnits(self, *args)

    def getBlockId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_getBlockId(self, *args)

    def scalePSLinetypes(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_scalePSLinetypes(self, *args)

    def getApproxExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_getApproxExtents(self, *args)

    def getStdScaleType(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbBaseLayoutPE_getStdScaleType(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbBaseLayoutPE

# Register OdDbBaseLayoutPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbBaseLayoutPE_swigregister(OdDbBaseLayoutPE)

def OdDbBaseLayoutPE_cast(*args) -> "OdSmartPtr< OdDbBaseLayoutPE >":
    return _ODA_Kernel_Py3.OdDbBaseLayoutPE_cast(*args)

def OdDbBaseLayoutPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbBaseLayoutPE_desc(*args)

def OdDbBaseLayoutPE_createObject(*args) -> "OdSmartPtr< OdDbBaseLayoutPE >":
    return _ODA_Kernel_Py3.OdDbBaseLayoutPE_createObject(*args)

class OdDbSetBasePlotSettingsPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbSetBasePlotSettingsPE >":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbSetBasePlotSettingsPE >":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_createObject(*args)

    def setPlotCfgName(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_setPlotCfgName(self, *args)

    def setPlotLayoutFlags(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_setPlotLayoutFlags(self, *args)

    def setMargins(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_setMargins(self, *args)

    def setPlotPaperSize(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_setPlotPaperSize(self, *args)

    def setMediaName(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_setMediaName(self, *args)

    def setOrigin(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_setOrigin(self, *args)

    def setPlotPaperUnits(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_setPlotPaperUnits(self, *args)

    def setPlotRotation(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_setPlotRotation(self, *args)

    def setPlotType(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_setPlotType(self, *args)

    def setPlotWindowArea(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_setPlotWindowArea(self, *args)

    def setPlotView(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_setPlotView(self, *args)

    def setPrintScale(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_setPrintScale(self, *args)

    def setStyleSheet(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_setStyleSheet(self, *args)

    def setStdScaleType(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_setStdScaleType(self, *args)

    def setScaleFactor(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_setScaleFactor(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbSetBasePlotSettingsPE

# Register OdDbSetBasePlotSettingsPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_swigregister(OdDbSetBasePlotSettingsPE)

def OdDbSetBasePlotSettingsPE_cast(*args) -> "OdSmartPtr< OdDbSetBasePlotSettingsPE >":
    return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_cast(*args)

def OdDbSetBasePlotSettingsPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_desc(*args)

def OdDbSetBasePlotSettingsPE_createObject(*args) -> "OdSmartPtr< OdDbSetBasePlotSettingsPE >":
    return _ODA_Kernel_Py3.OdDbSetBasePlotSettingsPE_createObject(*args)

class OdDbBaseBlockPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbBaseBlockPE >":
        return _ODA_Kernel_Py3.OdDbBaseBlockPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseBlockPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseBlockPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbBaseBlockPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbBaseBlockPE >":
        return _ODA_Kernel_Py3.OdDbBaseBlockPE_createObject(*args)

    def isBlockReferenceAdded(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseBlockPE_isBlockReferenceAdded(self, *args)

    def isFromExternalReference(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseBlockPE_isFromExternalReference(self, *args)

    def xrefDatabase(self, *args) -> "OdDbBaseDatabase *":
        return _ODA_Kernel_Py3.OdDbBaseBlockPE_xrefDatabase(self, *args)

    def getLayoutId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbBaseBlockPE_getLayoutId(self, *args)

    def isAnonymous(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseBlockPE_isAnonymous(self, *args)

    def getName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseBlockPE_getName(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbBaseBlockPE

# Register OdDbBaseBlockPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbBaseBlockPE_swigregister(OdDbBaseBlockPE)

def OdDbBaseBlockPE_cast(*args) -> "OdSmartPtr< OdDbBaseBlockPE >":
    return _ODA_Kernel_Py3.OdDbBaseBlockPE_cast(*args)

def OdDbBaseBlockPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbBaseBlockPE_desc(*args)

def OdDbBaseBlockPE_createObject(*args) -> "OdSmartPtr< OdDbBaseBlockPE >":
    return _ODA_Kernel_Py3.OdDbBaseBlockPE_createObject(*args)

class OdDbBaseBlockRefPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbBaseBlockRefPE >":
        return _ODA_Kernel_Py3.OdDbBaseBlockRefPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseBlockRefPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseBlockRefPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbBaseBlockRefPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbBaseBlockRefPE >":
        return _ODA_Kernel_Py3.OdDbBaseBlockRefPE_createObject(*args)

    def blockId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbBaseBlockRefPE_blockId(self, *args)

    def blockTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdDbBaseBlockRefPE_blockTransform(self, *args)

    def newAttribIterator(self, *args) -> "OdRxIteratorPtr":
        return _ODA_Kernel_Py3.OdDbBaseBlockRefPE_newAttribIterator(self, *args)

    def isAttribute(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseBlockRefPE_isAttribute(self, *args)

    def isGeneric(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseBlockRefPE_isGeneric(self, *args)

    def isMInsert(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseBlockRefPE_isMInsert(self, *args)

    def isBasic(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseBlockRefPE_isBasic(self, *args)

    def isSelfReferential(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseBlockRefPE_isSelfReferential(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbBaseBlockRefPE

# Register OdDbBaseBlockRefPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbBaseBlockRefPE_swigregister(OdDbBaseBlockRefPE)

def OdDbBaseBlockRefPE_cast(*args) -> "OdSmartPtr< OdDbBaseBlockRefPE >":
    return _ODA_Kernel_Py3.OdDbBaseBlockRefPE_cast(*args)

def OdDbBaseBlockRefPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbBaseBlockRefPE_desc(*args)

def OdDbBaseBlockRefPE_createObject(*args) -> "OdSmartPtr< OdDbBaseBlockRefPE >":
    return _ODA_Kernel_Py3.OdDbBaseBlockRefPE_createObject(*args)

class OdDbBaseSortEntsPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbBaseSortEntsPE >":
        return _ODA_Kernel_Py3.OdDbBaseSortEntsPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseSortEntsPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseSortEntsPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbBaseSortEntsPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbBaseSortEntsPE >":
        return _ODA_Kernel_Py3.OdDbBaseSortEntsPE_createObject(*args)

    def blockId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbBaseSortEntsPE_blockId(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbBaseSortEntsPE

# Register OdDbBaseSortEntsPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbBaseSortEntsPE_swigregister(OdDbBaseSortEntsPE)

def OdDbBaseSortEntsPE_cast(*args) -> "OdSmartPtr< OdDbBaseSortEntsPE >":
    return _ODA_Kernel_Py3.OdDbBaseSortEntsPE_cast(*args)

def OdDbBaseSortEntsPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbBaseSortEntsPE_desc(*args)

def OdDbBaseSortEntsPE_createObject(*args) -> "OdSmartPtr< OdDbBaseSortEntsPE >":
    return _ODA_Kernel_Py3.OdDbBaseSortEntsPE_createObject(*args)

class OdDbBaseLongTransactionPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbBaseLongTransactionPE >":
        return _ODA_Kernel_Py3.OdDbBaseLongTransactionPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseLongTransactionPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseLongTransactionPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbBaseLongTransactionPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbBaseLongTransactionPE >":
        return _ODA_Kernel_Py3.OdDbBaseLongTransactionPE_createObject(*args)

    def destinationBlock(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbBaseLongTransactionPE_destinationBlock(self, *args)

    def getDatabase(self, *args) -> "OdDbBaseDatabase *":
        return _ODA_Kernel_Py3.OdDbBaseLongTransactionPE_getDatabase(self, *args)

    def workSetHas(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseLongTransactionPE_workSetHas(self, *args)

    def newWorkSetIterator(self, *args) -> "OdRxIteratorPtr":
        return _ODA_Kernel_Py3.OdDbBaseLongTransactionPE_newWorkSetIterator(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbBaseLongTransactionPE

# Register OdDbBaseLongTransactionPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbBaseLongTransactionPE_swigregister(OdDbBaseLongTransactionPE)

def OdDbBaseLongTransactionPE_cast(*args) -> "OdSmartPtr< OdDbBaseLongTransactionPE >":
    return _ODA_Kernel_Py3.OdDbBaseLongTransactionPE_cast(*args)

def OdDbBaseLongTransactionPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbBaseLongTransactionPE_desc(*args)

def OdDbBaseLongTransactionPE_createObject(*args) -> "OdSmartPtr< OdDbBaseLongTransactionPE >":
    return _ODA_Kernel_Py3.OdDbBaseLongTransactionPE_createObject(*args)

class OdDbBaseHatchPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbBaseHatchPE >":
        return _ODA_Kernel_Py3.OdDbBaseHatchPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseHatchPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseHatchPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbBaseHatchPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbBaseHatchPE >":
        return _ODA_Kernel_Py3.OdDbBaseHatchPE_createObject(*args)
    kNormal = _ODA_Kernel_Py3.OdDbBaseHatchPE_kNormal
    kOuter = _ODA_Kernel_Py3.OdDbBaseHatchPE_kOuter
    kIgnore = _ODA_Kernel_Py3.OdDbBaseHatchPE_kIgnore
    kDefault = _ODA_Kernel_Py3.OdDbBaseHatchPE_kDefault
    kExternal = _ODA_Kernel_Py3.OdDbBaseHatchPE_kExternal
    kPolyline = _ODA_Kernel_Py3.OdDbBaseHatchPE_kPolyline
    kDerived = _ODA_Kernel_Py3.OdDbBaseHatchPE_kDerived
    kTextbox = _ODA_Kernel_Py3.OdDbBaseHatchPE_kTextbox
    kOutermost = _ODA_Kernel_Py3.OdDbBaseHatchPE_kOutermost
    kNotClosed = _ODA_Kernel_Py3.OdDbBaseHatchPE_kNotClosed
    kSelfIntersecting = _ODA_Kernel_Py3.OdDbBaseHatchPE_kSelfIntersecting
    kTextIsland = _ODA_Kernel_Py3.OdDbBaseHatchPE_kTextIsland
    kDuplicate = _ODA_Kernel_Py3.OdDbBaseHatchPE_kDuplicate
    kIsAnnotative = _ODA_Kernel_Py3.OdDbBaseHatchPE_kIsAnnotative
    kDoesNotSupportScale = _ODA_Kernel_Py3.OdDbBaseHatchPE_kDoesNotSupportScale
    kForceAnnoAllVisible = _ODA_Kernel_Py3.OdDbBaseHatchPE_kForceAnnoAllVisible
    kOrientToPaper = _ODA_Kernel_Py3.OdDbBaseHatchPE_kOrientToPaper
    kIsAnnotativeBlock = _ODA_Kernel_Py3.OdDbBaseHatchPE_kIsAnnotativeBlock

    def numLoops(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdDbBaseHatchPE_numLoops(self, *args)

    def loopTypeAt(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdDbBaseHatchPE_loopTypeAt(self, *args)

    def getLoopAt(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseHatchPE_getLoopAt(self, *args)

    def hatchStyle(self, *args) -> "OdDbBaseHatchPE::HatchStyle":
        return _ODA_Kernel_Py3.OdDbBaseHatchPE_hatchStyle(self, *args)

    def isGradient(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseHatchPE_isGradient(self, *args)

    def isSolidFill(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseHatchPE_isSolidFill(self, *args)

    def isReallyHatch(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseHatchPE_isReallyHatch(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbBaseHatchPE

# Register OdDbBaseHatchPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbBaseHatchPE_swigregister(OdDbBaseHatchPE)

def OdDbBaseHatchPE_cast(*args) -> "OdSmartPtr< OdDbBaseHatchPE >":
    return _ODA_Kernel_Py3.OdDbBaseHatchPE_cast(*args)

def OdDbBaseHatchPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbBaseHatchPE_desc(*args)

def OdDbBaseHatchPE_createObject(*args) -> "OdSmartPtr< OdDbBaseHatchPE >":
    return _ODA_Kernel_Py3.OdDbBaseHatchPE_createObject(*args)

class OdDbBaseMaterialPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbBaseMaterialPE >":
        return _ODA_Kernel_Py3.OdDbBaseMaterialPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseMaterialPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseMaterialPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbBaseMaterialPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbBaseMaterialPE >":
        return _ODA_Kernel_Py3.OdDbBaseMaterialPE_createObject(*args)

    def name(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseMaterialPE_name(self, *args)

    def isDefault(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseMaterialPE_isDefault(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbBaseMaterialPE

# Register OdDbBaseMaterialPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbBaseMaterialPE_swigregister(OdDbBaseMaterialPE)

def OdDbBaseMaterialPE_cast(*args) -> "OdSmartPtr< OdDbBaseMaterialPE >":
    return _ODA_Kernel_Py3.OdDbBaseMaterialPE_cast(*args)

def OdDbBaseMaterialPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbBaseMaterialPE_desc(*args)

def OdDbBaseMaterialPE_createObject(*args) -> "OdSmartPtr< OdDbBaseMaterialPE >":
    return _ODA_Kernel_Py3.OdDbBaseMaterialPE_createObject(*args)

kTextRenderingBasedA = _ODA_Kernel_Py3.kTextRenderingBasedA
kTextRenderingBasedM = _ODA_Kernel_Py3.kTextRenderingBasedM
class OdTtfDescriptor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdTtfDescriptor_swiginit(self, _ODA_Kernel_Py3.new_OdTtfDescriptor(*args))

    def fileName(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdTtfDescriptor_fileName(self, *args)

    def typeface(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdTtfDescriptor_typeface(self, *args)

    def clearFileName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTtfDescriptor_clearFileName(self, *args)

    def clearTypeface(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTtfDescriptor_clearTypeface(self, *args)

    def addTypeface(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTtfDescriptor_addTypeface(self, *args)

    def setFileName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTtfDescriptor_setFileName(self, *args)

    def setTypeFace(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTtfDescriptor_setTypeFace(self, *args)

    def setTtfFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTtfDescriptor_setTtfFlags(self, *args)

    def setBold(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTtfDescriptor_setBold(self, *args)

    def setItalic(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTtfDescriptor_setItalic(self, *args)

    def setCharSet(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTtfDescriptor_setCharSet(self, *args)

    def setPitchAndFamily(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTtfDescriptor_setPitchAndFamily(self, *args)

    def isBold(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTtfDescriptor_isBold(self, *args)

    def isItalic(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTtfDescriptor_isItalic(self, *args)

    def charSet(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdTtfDescriptor_charSet(self, *args)

    def pitchAndFamily(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdTtfDescriptor_pitchAndFamily(self, *args)

    def getPitch(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdTtfDescriptor_getPitch(self, *args)

    def getFamily(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdTtfDescriptor_getFamily(self, *args)

    def textRenderingMode(self, *args) -> "TextRenderingMode":
        return _ODA_Kernel_Py3.OdTtfDescriptor_textRenderingMode(self, *args)

    def setTextRenderingMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTtfDescriptor_setTextRenderingMode(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdTtfDescriptor

# Register OdTtfDescriptor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdTtfDescriptor_swigregister(OdTtfDescriptor)

class OdGiClipBoundary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_vNormal = property(_ODA_Kernel_Py3.OdGiClipBoundary_m_vNormal_get, _ODA_Kernel_Py3.OdGiClipBoundary_m_vNormal_set)
    m_ptPoint = property(_ODA_Kernel_Py3.OdGiClipBoundary_m_ptPoint_get, _ODA_Kernel_Py3.OdGiClipBoundary_m_ptPoint_set)
    m_Points = property(_ODA_Kernel_Py3.OdGiClipBoundary_m_Points_get, _ODA_Kernel_Py3.OdGiClipBoundary_m_Points_set)
    m_xToClipSpace = property(_ODA_Kernel_Py3.OdGiClipBoundary_m_xToClipSpace_get, _ODA_Kernel_Py3.OdGiClipBoundary_m_xToClipSpace_set)
    m_xInverseBlockRefXForm = property(_ODA_Kernel_Py3.OdGiClipBoundary_m_xInverseBlockRefXForm_get, _ODA_Kernel_Py3.OdGiClipBoundary_m_xInverseBlockRefXForm_set)
    m_dFrontClipZ = property(_ODA_Kernel_Py3.OdGiClipBoundary_m_dFrontClipZ_get, _ODA_Kernel_Py3.OdGiClipBoundary_m_dFrontClipZ_set)
    m_dBackClipZ = property(_ODA_Kernel_Py3.OdGiClipBoundary_m_dBackClipZ_get, _ODA_Kernel_Py3.OdGiClipBoundary_m_dBackClipZ_set)
    m_bClippingFront = property(_ODA_Kernel_Py3.OdGiClipBoundary_m_bClippingFront_get, _ODA_Kernel_Py3.OdGiClipBoundary_m_bClippingFront_set)
    m_bDrawBoundary = property(_ODA_Kernel_Py3.OdGiClipBoundary_m_bDrawBoundary_get, _ODA_Kernel_Py3.OdGiClipBoundary_m_bDrawBoundary_set)
    m_bClippingBack = property(_ODA_Kernel_Py3.OdGiClipBoundary_m_bClippingBack_get, _ODA_Kernel_Py3.OdGiClipBoundary_m_bClippingBack_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiClipBoundary_swiginit(self, _ODA_Kernel_Py3.new_OdGiClipBoundary(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiClipBoundary

# Register OdGiClipBoundary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiClipBoundary_swigregister(OdGiClipBoundary)


def odgiIsValidClipBoundary(*args) -> "bool":
    return _ODA_Kernel_Py3.odgiIsValidClipBoundary(*args)

def odgiEmptyClipBoundary(*args) -> "void":
    return _ODA_Kernel_Py3.odgiEmptyClipBoundary(*args)
class OdGePlanarEnt(OdGeSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isOnPlane(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePlanarEnt_isOnPlane(self, *args)

    def intersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePlanarEnt_intersectWith(self, *args)

    def closestPointToLinearEnt(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGePlanarEnt_closestPointToLinearEnt(self, *args)

    def closestPointToPlanarEnt(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGePlanarEnt_closestPointToPlanarEnt(self, *args)

    def isParallelTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePlanarEnt_isParallelTo(self, *args)

    def isPerpendicularTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePlanarEnt_isPerpendicularTo(self, *args)

    def isCoplanarTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePlanarEnt_isCoplanarTo(self, *args)

    def get(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGePlanarEnt_get(self, *args)

    def pointOnPlane(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGePlanarEnt_pointOnPlane(self, *args)

    def normal(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGePlanarEnt_normal(self, *args)

    def getCoefficients(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGePlanarEnt_getCoefficients(self, *args)

    def getCoordSystem(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGePlanarEnt_getCoordSystem(self, *args)

    def project(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePlanarEnt_project(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGePlanarEnt

# Register OdGePlanarEnt in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGePlanarEnt_swigregister(OdGePlanarEnt)

kNullSubentType = _ODA_Kernel_Py3.kNullSubentType
kFaceSubentType = _ODA_Kernel_Py3.kFaceSubentType
kEdgeSubentType = _ODA_Kernel_Py3.kEdgeSubentType
kVertexSubentType = _ODA_Kernel_Py3.kVertexSubentType
kMlineSubentCache = _ODA_Kernel_Py3.kMlineSubentCache
kClassSubentType = _ODA_Kernel_Py3.kClassSubentType
class OdDbSubentId(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdDbSubentId_swiginit(self, _ODA_Kernel_Py3.new_OdDbSubentId(*args))

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbSubentId___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbSubentId___ne__(self, *args)

    def type(self, *args) -> "OdDb::SubentType":
        return _ODA_Kernel_Py3.OdDbSubentId_type(self, *args)

    def setType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbSubentId_setType(self, *args)

    def index(self, *args) -> "OdGsMarker":
        return _ODA_Kernel_Py3.OdDbSubentId_index(self, *args)

    def setIndex(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbSubentId_setIndex(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbSubentId

# Register OdDbSubentId in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbSubentId_swigregister(OdDbSubentId)

class OdDbBaseFullSubentPath(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdDbBaseFullSubentPath_swiginit(self, _ODA_Kernel_Py3.new_OdDbBaseFullSubentPath(*args))

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseFullSubentPath___eq__(self, *args)

    def objectIds(self, *args) -> "OdDbStubPtrArray &":
        return _ODA_Kernel_Py3.OdDbBaseFullSubentPath_objectIds(self, *args)

    def subentId(self, *args) -> "OdDbSubentId &":
        return _ODA_Kernel_Py3.OdDbBaseFullSubentPath_subentId(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbBaseFullSubentPath

# Register OdDbBaseFullSubentPath in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbBaseFullSubentPath_swigregister(OdDbBaseFullSubentPath)


def baseDatabaseBy(*args) -> "OdRxObject *":
    return _ODA_Kernel_Py3.baseDatabaseBy(*args)
class OdBaseDatabaseByResolver(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def resolve(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdBaseDatabaseByResolver_resolve(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBaseDatabaseByResolver

# Register OdBaseDatabaseByResolver in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBaseDatabaseByResolver_swigregister(OdBaseDatabaseByResolver)


def addBaseDatabaseByResolver(*args) -> "void":
    return _ODA_Kernel_Py3.addBaseDatabaseByResolver(*args)

def removeBaseDatabaseByResolver(*args) -> "void":
    return _ODA_Kernel_Py3.removeBaseDatabaseByResolver(*args)
class OdBrMassProps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mVolume = property(_ODA_Kernel_Py3.OdBrMassProps_mVolume_get, _ODA_Kernel_Py3.OdBrMassProps_mVolume_set)
    mMass = property(_ODA_Kernel_Py3.OdBrMassProps_mMass_get, _ODA_Kernel_Py3.OdBrMassProps_mMass_set)
    mCentroid = property(_ODA_Kernel_Py3.OdBrMassProps_mCentroid_get, _ODA_Kernel_Py3.OdBrMassProps_mCentroid_set)
    mRadiiGyration = property(_ODA_Kernel_Py3.OdBrMassProps_mRadiiGyration_get, _ODA_Kernel_Py3.OdBrMassProps_mRadiiGyration_set)
    mMomInertia = property(_ODA_Kernel_Py3.OdBrMassProps_mMomInertia_get, _ODA_Kernel_Py3.OdBrMassProps_mMomInertia_set)
    mProdInertia = property(_ODA_Kernel_Py3.OdBrMassProps_mProdInertia_get, _ODA_Kernel_Py3.OdBrMassProps_mProdInertia_set)
    mPrinMoments = property(_ODA_Kernel_Py3.OdBrMassProps_mPrinMoments_get, _ODA_Kernel_Py3.OdBrMassProps_mPrinMoments_set)
    mPrinAxes = property(_ODA_Kernel_Py3.OdBrMassProps_mPrinAxes_get, _ODA_Kernel_Py3.OdBrMassProps_mPrinAxes_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrMassProps_swiginit(self, _ODA_Kernel_Py3.new_OdBrMassProps(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrMassProps

# Register OdBrMassProps in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrMassProps_swigregister(OdBrMassProps)

odbrOK = _ODA_Kernel_Py3.odbrOK
odbrWrongObjectType = _ODA_Kernel_Py3.odbrWrongObjectType
odbrInvalidObject = _ODA_Kernel_Py3.odbrInvalidObject
odbrUnsuitableTopology = _ODA_Kernel_Py3.odbrUnsuitableTopology
odbrMissingGeometry = _ODA_Kernel_Py3.odbrMissingGeometry
odbrInvalidInput = _ODA_Kernel_Py3.odbrInvalidInput
odbrDegenerateTopology = _ODA_Kernel_Py3.odbrDegenerateTopology
odbrUninitialisedObject = _ODA_Kernel_Py3.odbrUninitialisedObject
odbrOutOfMemory = _ODA_Kernel_Py3.odbrOutOfMemory
odbrBrepChanged = _ODA_Kernel_Py3.odbrBrepChanged
odbrNotImplementedYet = _ODA_Kernel_Py3.odbrNotImplementedYet
odbrNullObjectId = _ODA_Kernel_Py3.odbrNullObjectId
odbrNotApplicable = _ODA_Kernel_Py3.odbrNotApplicable
odbrWrongSubentityType = _ODA_Kernel_Py3.odbrWrongSubentityType
odbrNullSubentityId = _ODA_Kernel_Py3.odbrNullSubentityId
odbrNullObjectPointer = _ODA_Kernel_Py3.odbrNullObjectPointer
odbrObjectIdMismatch = _ODA_Kernel_Py3.odbrObjectIdMismatch
odbrTopologyMismatch = _ODA_Kernel_Py3.odbrTopologyMismatch
odbrUnsuitableGeometry = _ODA_Kernel_Py3.odbrUnsuitableGeometry
odbrMissingSubentity = _ODA_Kernel_Py3.odbrMissingSubentity
odbrAmbiguousOutput = _ODA_Kernel_Py3.odbrAmbiguousOutput
odbrUnrecoverableErrors = _ODA_Kernel_Py3.odbrUnrecoverableErrors
odbrMissingTopology = _ODA_Kernel_Py3.odbrMissingTopology
odbrWrongDatabase = _ODA_Kernel_Py3.odbrWrongDatabase
odbrNotInDatabase = _ODA_Kernel_Py3.odbrNotInDatabase
odbrDegenerateGeometry = _ODA_Kernel_Py3.odbrDegenerateGeometry
odbrLoopUnclassified = _ODA_Kernel_Py3.odbrLoopUnclassified
odbrLoopExterior = _ODA_Kernel_Py3.odbrLoopExterior
odbrLoopInterior = _ODA_Kernel_Py3.odbrLoopInterior
odbrLoopWinding = _ODA_Kernel_Py3.odbrLoopWinding
odbrShellUnclassified = _ODA_Kernel_Py3.odbrShellUnclassified
odbrShellExterior = _ODA_Kernel_Py3.odbrShellExterior
odbrShellInterior = _ODA_Kernel_Py3.odbrShellInterior
odbrFullValidation = _ODA_Kernel_Py3.odbrFullValidation
odbrNoValidation = _ODA_Kernel_Py3.odbrNoValidation
kDefault = _ODA_Kernel_Py3.kDefault
kAllPolygons = _ODA_Kernel_Py3.kAllPolygons
kAllQuadrilaterals = _ODA_Kernel_Py3.kAllQuadrilaterals
kAllTriangles = _ODA_Kernel_Py3.kAllTriangles
BrEntityFlags_kNoFlags = _ODA_Kernel_Py3.BrEntityFlags_kNoFlags
BrEntityFlags_kDoubleSide = _ODA_Kernel_Py3.BrEntityFlags_kDoubleSide
BrEntityFlags_kVisible = _ODA_Kernel_Py3.BrEntityFlags_kVisible
BrEntityFlags_kInvisible = _ODA_Kernel_Py3.BrEntityFlags_kInvisible
BrEntityFlags_kHighlight = _ODA_Kernel_Py3.BrEntityFlags_kHighlight
BrEntityFlags_kSelectionIgnore = _ODA_Kernel_Py3.BrEntityFlags_kSelectionIgnore
kBimRvEdgeSwapFaces = _ODA_Kernel_Py3.kBimRvEdgeSwapFaces
class OdBinaryData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBinaryData_swiginit(self, _ODA_Kernel_Py3.new_OdBinaryData(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBinaryData

# Register OdBinaryData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBinaryData_swigregister(OdBinaryData)

class OdBitBinaryData(OdBinaryData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBitBinaryData_swiginit(self, _ODA_Kernel_Py3.new_OdBitBinaryData(*args))

    def getBitSize(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdBitBinaryData_getBitSize(self, *args)

    def setBitSize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBitBinaryData_setBitSize(self, *args)

    def updateBitSize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBitBinaryData_updateBitSize(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBitBinaryData

# Register OdBitBinaryData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBitBinaryData_swigregister(OdBitBinaryData)

kSeekFromStart = _ODA_Kernel_Py3.kSeekFromStart
kSeekFromCurrent = _ODA_Kernel_Py3.kSeekFromCurrent
kSeekFromEnd = _ODA_Kernel_Py3.kSeekFromEnd
class OdStreamBuf(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdStreamBuf >":
        return _ODA_Kernel_Py3.OdStreamBuf_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdStreamBuf_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdStreamBuf_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdStreamBuf_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdStreamBuf >":
        return _ODA_Kernel_Py3.OdStreamBuf_createObject(*args)

    def fileName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdStreamBuf_fileName(self, *args)

    def isEof(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdStreamBuf_isEof(self, *args)

    def tell(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdStreamBuf_tell(self, *args)

    def length(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdStreamBuf_length(self, *args)

    def truncate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdStreamBuf_truncate(self, *args)

    def rewind(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdStreamBuf_rewind(self, *args)

    def seek(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdStreamBuf_seek(self, *args)

    def getByte(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdStreamBuf_getByte(self, *args)

    def getBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdStreamBuf_getBytes(self, *args)

    def putByte(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdStreamBuf_putByte(self, *args)

    def putBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdStreamBuf_putBytes(self, *args)

    def copyDataTo(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdStreamBuf_copyDataTo(self, *args)

    def getShareMode(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdStreamBuf_getShareMode(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdStreamBuf

# Register OdStreamBuf in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdStreamBuf_swigregister(OdStreamBuf)

def OdStreamBuf_cast(*args) -> "OdSmartPtr< OdStreamBuf >":
    return _ODA_Kernel_Py3.OdStreamBuf_cast(*args)

def OdStreamBuf_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdStreamBuf_desc(*args)

def OdStreamBuf_createObject(*args) -> "OdSmartPtr< OdStreamBuf >":
    return _ODA_Kernel_Py3.OdStreamBuf_createObject(*args)

class OdGsBaseModelReactor(OdGsModelReactor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def onHighlight(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModelReactor_onHighlight(self, *args)

    def onInvalidate(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModelReactor_onInvalidate(self, *args)

    def onHide(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModelReactor_onHide(self, *args)
    kModelTransform = _ODA_Kernel_Py3.OdGsBaseModelReactor_kModelTransform
    kModelRenderType = _ODA_Kernel_Py3.OdGsBaseModelReactor_kModelRenderType
    kModelBackground = _ODA_Kernel_Py3.OdGsBaseModelReactor_kModelBackground
    kModelVisualStyle = _ODA_Kernel_Py3.OdGsBaseModelReactor_kModelVisualStyle
    kModelSectioning = _ODA_Kernel_Py3.OdGsBaseModelReactor_kModelSectioning
    kNumModelProps = _ODA_Kernel_Py3.OdGsBaseModelReactor_kNumModelProps

    def onPropertyModified(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModelReactor_onPropertyModified(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsBaseModelReactor_swiginit(self, _ODA_Kernel_Py3.new_OdGsBaseModelReactor(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsBaseModelReactor

# Register OdGsBaseModelReactor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsBaseModelReactor_swigregister(OdGsBaseModelReactor)

class OdGsStateBranchReactor(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def onChildAdded(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsStateBranchReactor_onChildAdded(self, *args)

    def onChildRemoved(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsStateBranchReactor_onChildRemoved(self, *args)

    def onMarkerAdded(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsStateBranchReactor_onMarkerAdded(self, *args)

    def onMarkerRemoved(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsStateBranchReactor_onMarkerRemoved(self, *args)

    def onStyleModified(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsStateBranchReactor_onStyleModified(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsStateBranchReactor

# Register OdGsStateBranchReactor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsStateBranchReactor_swigregister(OdGsStateBranchReactor)

class OdGsStateBranchMultimoduleReactor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def attach(*args) -> "void":
        return _ODA_Kernel_Py3.OdGsStateBranchMultimoduleReactor_attach(*args)

    @staticmethod
    def detach(*args) -> "void":
        return _ODA_Kernel_Py3.OdGsStateBranchMultimoduleReactor_detach(*args)

    @staticmethod
    def getReactor(*args) -> "OdGsStateBranchReactor *":
        return _ODA_Kernel_Py3.OdGsStateBranchMultimoduleReactor_getReactor(*args)

    @staticmethod
    def setReactor(*args) -> "void":
        return _ODA_Kernel_Py3.OdGsStateBranchMultimoduleReactor_setReactor(*args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsStateBranchMultimoduleReactor_swiginit(self, _ODA_Kernel_Py3.new_OdGsStateBranchMultimoduleReactor(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsStateBranchMultimoduleReactor

# Register OdGsStateBranchMultimoduleReactor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsStateBranchMultimoduleReactor_swigregister(OdGsStateBranchMultimoduleReactor)

def OdGsStateBranchMultimoduleReactor_attach(*args) -> "void":
    return _ODA_Kernel_Py3.OdGsStateBranchMultimoduleReactor_attach(*args)

def OdGsStateBranchMultimoduleReactor_detach(*args) -> "void":
    return _ODA_Kernel_Py3.OdGsStateBranchMultimoduleReactor_detach(*args)

def OdGsStateBranchMultimoduleReactor_getReactor(*args) -> "OdGsStateBranchReactor *":
    return _ODA_Kernel_Py3.OdGsStateBranchMultimoduleReactor_getReactor(*args)

def OdGsStateBranchMultimoduleReactor_setReactor(*args) -> "void":
    return _ODA_Kernel_Py3.OdGsStateBranchMultimoduleReactor_setReactor(*args)

class OdGsMaterialCache(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsMaterialCache

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsMaterialCache >":
        return _ODA_Kernel_Py3.OdGsMaterialCache_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsMaterialCache_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsMaterialCache_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsMaterialCache_queryX(self, *args)

    def setBaseModel(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMaterialCache_setBaseModel(self, *args)

    def baseModel(self, *args) -> "OdGsBaseModel const *":
        return _ODA_Kernel_Py3.OdGsMaterialCache_baseModel(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsMaterialCache >":
        return _ODA_Kernel_Py3.OdGsMaterialCache_createObject(*args)

    def searchNode(self, *args) -> "OdGsMaterialNode *":
        return _ODA_Kernel_Py3.OdGsMaterialCache_searchNode(self, *args)

    def setMaterial(self, *args) -> "OdGsMaterialNode *":
        return _ODA_Kernel_Py3.OdGsMaterialCache_setMaterial(self, *args)

    def removeNode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsMaterialCache_removeNode(self, *args)

    def getCacheSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsMaterialCache_getCacheSize(self, *args)

    def getCacheNode(self, *args) -> "OdGsMaterialNode *":
        return _ODA_Kernel_Py3.OdGsMaterialCache_getCacheNode(self, *args)

    def addNode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMaterialCache_addNode(self, *args)

    def clearCache(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMaterialCache_clearCache(self, *args)

    def invalidateCache(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMaterialCache_invalidateCache(self, *args)

    def saveMaterialCache(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsMaterialCache_saveMaterialCache(self, *args)

    def loadMaterialCache(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsMaterialCache_loadMaterialCache(self, *args)

# Register OdGsMaterialCache in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsMaterialCache_swigregister(OdGsMaterialCache)

def OdGsMaterialCache_cast(*args) -> "OdSmartPtr< OdGsMaterialCache >":
    return _ODA_Kernel_Py3.OdGsMaterialCache_cast(*args)

def OdGsMaterialCache_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsMaterialCache_desc(*args)

def OdGsMaterialCache_createObject(*args) -> "OdSmartPtr< OdGsMaterialCache >":
    return _ODA_Kernel_Py3.OdGsMaterialCache_createObject(*args)

class OdGsCurrentMaterialNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsCurrentMaterialNode_swiginit(self, _ODA_Kernel_Py3.new_OdGsCurrentMaterialNode(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsCurrentMaterialNode

    def currentNode(self, *args) -> "OdGsMaterialNode *":
        return _ODA_Kernel_Py3.OdGsCurrentMaterialNode_currentNode(self, *args)

    def setCurrentNode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsCurrentMaterialNode_setCurrentNode(self, *args)

    def setMaterial(self, *args) -> "OdGsMaterialNode *":
        return _ODA_Kernel_Py3.OdGsCurrentMaterialNode_setMaterial(self, *args)

# Register OdGsCurrentMaterialNode in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsCurrentMaterialNode_swigregister(OdGsCurrentMaterialNode)

class OdGsConveyorNodeBase(OdGiConveyorInput, OdGiConveyorOutput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def addSourceNode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsConveyorNodeBase_addSourceNode(self, *args)

    def removeSourceNode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsConveyorNodeBase_removeSourceNode(self, *args)

    def setDestGeometry(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsConveyorNodeBase_setDestGeometry(self, *args)

    def destGeometry(self, *args) -> "OdGiConveyorGeometry &":
        return _ODA_Kernel_Py3.OdGsConveyorNodeBase_destGeometry(self, *args)

    def updateLink(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsConveyorNodeBase_updateLink(self, *args)

    def optionalGeometry(self, *args) -> "OdGiConveyorGeometry *":
        return _ODA_Kernel_Py3.OdGsConveyorNodeBase_optionalGeometry(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsConveyorNodeBase

# Register OdGsConveyorNodeBase in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsConveyorNodeBase_swigregister(OdGsConveyorNodeBase)

class OdGsExtAccum(OdGiExtAccum, OdGsConveyorNodeBase, OdGiConveyorGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsExtAccum >":
        return _ODA_Kernel_Py3.OdGsExtAccum_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsExtAccum_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsExtAccum_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsExtAccum_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsExtAccum >":
        return _ODA_Kernel_Py3.OdGsExtAccum_createObject(*args)

    def optionalGeometry(self, *args) -> "OdGiConveyorGeometry *":
        return _ODA_Kernel_Py3.OdGsExtAccum_optionalGeometry(self, *args)

    def giExtAccum(self, *args) -> "OdGiExtAccum const *":
        return _ODA_Kernel_Py3.OdGsExtAccum_giExtAccum(self, *args)

    def setBaseView(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_setBaseView(self, *args)

    def baseView(self, *args) -> "OdGsViewImpl *":
        return _ODA_Kernel_Py3.OdGsExtAccum_baseView(self, *args)

    def setDrawContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_setDrawContext(self, *args)

    def geometry(self, *args) -> "OdGiConveyorGeometry &":
        return _ODA_Kernel_Py3.OdGsExtAccum_geometry(self, *args)

    def getExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsExtAccum_getExtents(self, *args)

    def resetExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_resetExtents(self, *args)

    def addExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_addExtents(self, *args)

    def plineContainBulges(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsExtAccum_plineContainBulges(self, *args)

    def setDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_setDeviation(self, *args)

    def getLineweight(self, *args) -> "OdDb::LineWeight":
        return _ODA_Kernel_Py3.OdGsExtAccum_getLineweight(self, *args)

    def addLineweight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_addLineweight(self, *args)

    def input(self, *args) -> "OdGiConveyorInput &":
        return _ODA_Kernel_Py3.OdGsExtAccum_input(self, *args)

    def output(self, *args) -> "OdGiConveyorOutput &":
        return _ODA_Kernel_Py3.OdGsExtAccum_output(self, *args)

    def plineProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_plineProc(self, *args)

    def polylineProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_polylineProc(self, *args)

    def polygonProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_polygonProc(self, *args)

    def xlineProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_xlineProc(self, *args)

    def rayProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_rayProc(self, *args)

    def meshProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_meshProc(self, *args)

    def shellProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_shellProc(self, *args)

    def circleProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_circleProc(self, *args)

    def circularArcProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_circularArcProc(self, *args)

    def ellipArcProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_ellipArcProc(self, *args)

    def nurbsProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_nurbsProc(self, *args)

    def textProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_textProc(self, *args)

    def textProc2(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_textProc2(self, *args)

    def shapeProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_shapeProc(self, *args)

    def rasterImageProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_rasterImageProc(self, *args)

    def metafileProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_metafileProc(self, *args)

    def setExtentsProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_setExtentsProc(self, *args)

    def polypointProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_polypointProc(self, *args)

    def rowOfDotsProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_rowOfDotsProc(self, *args)

    def pointCloudProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_pointCloudProc(self, *args)

    def edgeProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsExtAccum_edgeProc(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsExtAccum

# Register OdGsExtAccum in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsExtAccum_swigregister(OdGsExtAccum)

def OdGsExtAccum_cast(*args) -> "OdSmartPtr< OdGsExtAccum >":
    return _ODA_Kernel_Py3.OdGsExtAccum_cast(*args)

def OdGsExtAccum_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsExtAccum_desc(*args)

def OdGsExtAccum_createObject(*args) -> "OdSmartPtr< OdGsExtAccum >":
    return _ODA_Kernel_Py3.OdGsExtAccum_createObject(*args)

class ViewProps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.ViewProps_swiginit(self, _ODA_Kernel_Py3.new_ViewProps(*args))
    m_vpId = property(_ODA_Kernel_Py3.ViewProps_m_vpId_get, _ODA_Kernel_Py3.ViewProps_m_vpId_set)
    m_vpObjectId = property(_ODA_Kernel_Py3.ViewProps_m_vpObjectId_get, _ODA_Kernel_Py3.ViewProps_m_vpObjectId_set)
    m_regenType = property(_ODA_Kernel_Py3.ViewProps_m_regenType_get, _ODA_Kernel_Py3.ViewProps_m_regenType_set)
    m_renderMode = property(_ODA_Kernel_Py3.ViewProps_m_renderMode_get, _ODA_Kernel_Py3.ViewProps_m_renderMode_set)
    m_worldToEye = property(_ODA_Kernel_Py3.ViewProps_m_worldToEye_get, _ODA_Kernel_Py3.ViewProps_m_worldToEye_set)
    m_cameraLocation = property(_ODA_Kernel_Py3.ViewProps_m_cameraLocation_get, _ODA_Kernel_Py3.ViewProps_m_cameraLocation_set)
    m_cameraTarget = property(_ODA_Kernel_Py3.ViewProps_m_cameraTarget_get, _ODA_Kernel_Py3.ViewProps_m_cameraTarget_set)
    m_cameraUpVector = property(_ODA_Kernel_Py3.ViewProps_m_cameraUpVector_get, _ODA_Kernel_Py3.ViewProps_m_cameraUpVector_set)
    m_viewDir = property(_ODA_Kernel_Py3.ViewProps_m_viewDir_get, _ODA_Kernel_Py3.ViewProps_m_viewDir_set)
    m_vpLowerLeft = property(_ODA_Kernel_Py3.ViewProps_m_vpLowerLeft_get, _ODA_Kernel_Py3.ViewProps_m_vpLowerLeft_set)
    m_vpUpperRight = property(_ODA_Kernel_Py3.ViewProps_m_vpUpperRight_get, _ODA_Kernel_Py3.ViewProps_m_vpUpperRight_set)
    m_deviation = property(_ODA_Kernel_Py3.ViewProps_m_deviation_get, _ODA_Kernel_Py3.ViewProps_m_deviation_set)
    m_frontClip = property(_ODA_Kernel_Py3.ViewProps_m_frontClip_get, _ODA_Kernel_Py3.ViewProps_m_frontClip_set)
    m_backClip = property(_ODA_Kernel_Py3.ViewProps_m_backClip_get, _ODA_Kernel_Py3.ViewProps_m_backClip_set)
    m_frozenLayers = property(_ODA_Kernel_Py3.ViewProps_m_frozenLayers_get, _ODA_Kernel_Py3.ViewProps_m_frozenLayers_set)
    m_linetypeScaleMultiplier = property(_ODA_Kernel_Py3.ViewProps_m_linetypeScaleMultiplier_get, _ODA_Kernel_Py3.ViewProps_m_linetypeScaleMultiplier_set)
    m_renderModule = property(_ODA_Kernel_Py3.ViewProps_m_renderModule_get, _ODA_Kernel_Py3.ViewProps_m_renderModule_set)
    m_annoScale = property(_ODA_Kernel_Py3.ViewProps_m_annoScale_get, _ODA_Kernel_Py3.ViewProps_m_annoScale_set)
    m_filterFunction = property(_ODA_Kernel_Py3.ViewProps_m_filterFunction_get, _ODA_Kernel_Py3.ViewProps_m_filterFunction_set)
    m_visualStyle = property(_ODA_Kernel_Py3.ViewProps_m_visualStyle_get, _ODA_Kernel_Py3.ViewProps_m_visualStyle_set)
    m_nViewChanges = property(_ODA_Kernel_Py3.ViewProps_m_nViewChanges_get, _ODA_Kernel_Py3.ViewProps_m_nViewChanges_set)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.ViewProps_set(self, *args)

    def difference(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.ViewProps_difference(self, *args)

    def isCompatibleWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ViewProps_isCompatibleWith(self, *args)

    def isInvalid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ViewProps_isInvalid(self, *args)

    def setInvalid(self, *args) -> "void":
        return _ODA_Kernel_Py3.ViewProps_setInvalid(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_ViewProps

# Register ViewProps in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.ViewProps_swigregister(ViewProps)


def isInvalid(*args) -> "bool":
    return _ODA_Kernel_Py3.isInvalid(*args)
class ViewRefs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.ViewRefs_swiginit(self, _ODA_Kernel_Py3.new_ViewRefs(*args))

    def numViews(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.ViewRefs_numViews(self, *args)

    def add(self, *args) -> "void":
        return _ODA_Kernel_Py3.ViewRefs_add(self, *args)

    def remove(self, *args) -> "void":
        return _ODA_Kernel_Py3.ViewRefs_remove(self, *args)

    def maxViewportId(self, *args) -> "int":
        return _ODA_Kernel_Py3.ViewRefs_maxViewportId(self, *args)

    def numDifferentViewports(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.ViewRefs_numDifferentViewports(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.ViewRefs_clear(self, *args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.ViewRefs_set(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ViewRefs_contains(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_ViewRefs

# Register ViewRefs in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.ViewRefs_swigregister(ViewRefs)

class const_iterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.const_iterator_swiginit(self, _ODA_Kernel_Py3.new_const_iterator(*args))

    def start(self, *args) -> "void":
        return _ODA_Kernel_Py3.const_iterator_start(self, *args)

    def done(self, *args) -> "bool":
        return _ODA_Kernel_Py3.const_iterator_done(self, *args)

    def viewportId(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.const_iterator_viewportId(self, *args)

    def step(self, *args) -> "void":
        return _ODA_Kernel_Py3.const_iterator_step(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_const_iterator

# Register const_iterator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.const_iterator_swigregister(const_iterator)

class StockProps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.StockProps_swiginit(self, _ODA_Kernel_Py3.new_StockProps(*args))

    def viewProps(self, *args) -> "ViewProps const &":
        return _ODA_Kernel_Py3.StockProps_viewProps(self, *args)

    def numViewProps(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.StockProps_numViewProps(self, *args)

    def viewRefs(self, *args) -> "ViewRefs const &":
        return _ODA_Kernel_Py3.StockProps_viewRefs(self, *args)

    def deviceClass(self, *args) -> "OdRxClass const *":
        return _ODA_Kernel_Py3.StockProps_deviceClass(self, *args)

    def set(self, *args) -> "bool":
        return _ODA_Kernel_Py3.StockProps_set(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.StockProps_clear(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_StockProps

# Register StockProps in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.StockProps_swigregister(StockProps)


def sameSortedArrays(*args) -> "bool":
    return _ODA_Kernel_Py3.sameSortedArrays(*args)
class OdGiPathNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def parent(self, *args) -> "OdGiPathNode const *":
        return _ODA_Kernel_Py3.OdGiPathNode_parent(self, *args)

    def persistentDrawableId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiPathNode_persistentDrawableId(self, *args)

    def transientDrawable(self, *args) -> "OdGiDrawable const *":
        return _ODA_Kernel_Py3.OdGiPathNode_transientDrawable(self, *args)

    def modelToWorld(self, *args) -> "OdGeMatrix3d const *":
        return _ODA_Kernel_Py3.OdGiPathNode_modelToWorld(self, *args)

    def selectionMarker(self, *args) -> "OdGsMarker":
        return _ODA_Kernel_Py3.OdGiPathNode_selectionMarker(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPathNode

# Register OdGiPathNode in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPathNode_swigregister(OdGiPathNode)

class OdGiAbstractClipBoundary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kNormal = _ODA_Kernel_Py3.OdGiAbstractClipBoundary_kNormal
    kInverted = _ODA_Kernel_Py3.OdGiAbstractClipBoundary_kInverted
    kExtended = _ODA_Kernel_Py3.OdGiAbstractClipBoundary_kExtended
    kComplex = _ODA_Kernel_Py3.OdGiAbstractClipBoundary_kComplex
    kPlanar = _ODA_Kernel_Py3.OdGiAbstractClipBoundary_kPlanar
    kMulti = _ODA_Kernel_Py3.OdGiAbstractClipBoundary_kMulti

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiAbstractClipBoundary_swiginit(self, _ODA_Kernel_Py3.new_OdGiAbstractClipBoundary(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiAbstractClipBoundary

    def type(self, *args) -> "OdGiAbstractClipBoundary::BoundaryType":
        return _ODA_Kernel_Py3.OdGiAbstractClipBoundary_type(self, *args)

    def clone(self, *args) -> "OdGiAbstractClipBoundary *":
        return _ODA_Kernel_Py3.OdGiAbstractClipBoundary_clone(self, *args)

# Register OdGiAbstractClipBoundary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiAbstractClipBoundary_swigregister(OdGiAbstractClipBoundary)

class OdGiInvertedClipBoundary(OdGiAbstractClipBoundary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiInvertedClipBoundary_swiginit(self, _ODA_Kernel_Py3.new_OdGiInvertedClipBoundary(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiInvertedClipBoundary

    def type(self, *args) -> "OdGiAbstractClipBoundary::BoundaryType":
        return _ODA_Kernel_Py3.OdGiInvertedClipBoundary_type(self, *args)

    def invertedClipBoundary(self, *args) -> "OdGePoint2dArray const &":
        return _ODA_Kernel_Py3.OdGiInvertedClipBoundary_invertedClipBoundary(self, *args)

    def setInvertedClipBoundary(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiInvertedClipBoundary_setInvertedClipBoundary(self, *args)

    def clone(self, *args) -> "OdGiAbstractClipBoundary *":
        return _ODA_Kernel_Py3.OdGiInvertedClipBoundary_clone(self, *args)

# Register OdGiInvertedClipBoundary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiInvertedClipBoundary_swigregister(OdGiInvertedClipBoundary)

class OdGiExtendedClipBoundary(OdGiAbstractClipBoundary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiExtendedClipBoundary_swiginit(self, _ODA_Kernel_Py3.new_OdGiExtendedClipBoundary(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiExtendedClipBoundary

    def type(self, *args) -> "OdGiAbstractClipBoundary::BoundaryType":
        return _ODA_Kernel_Py3.OdGiExtendedClipBoundary_type(self, *args)

    def clipBoundaryCounts(self, *args) -> "OdIntArray const &":
        return _ODA_Kernel_Py3.OdGiExtendedClipBoundary_clipBoundaryCounts(self, *args)

    def setClipBoundaryCounts(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtendedClipBoundary_setClipBoundaryCounts(self, *args)

    def clipBoundaryPoints(self, *args) -> "OdGePoint2dArray const &":
        return _ODA_Kernel_Py3.OdGiExtendedClipBoundary_clipBoundaryPoints(self, *args)

    def setClipBoundaryPoints(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtendedClipBoundary_setClipBoundaryPoints(self, *args)

    def clone(self, *args) -> "OdGiAbstractClipBoundary *":
        return _ODA_Kernel_Py3.OdGiExtendedClipBoundary_clone(self, *args)

# Register OdGiExtendedClipBoundary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiExtendedClipBoundary_swigregister(OdGiExtendedClipBoundary)

class OdGiComplexClipBoundary(OdGiExtendedClipBoundary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiComplexClipBoundary_swiginit(self, _ODA_Kernel_Py3.new_OdGiComplexClipBoundary(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiComplexClipBoundary

    def type(self, *args) -> "OdGiAbstractClipBoundary::BoundaryType":
        return _ODA_Kernel_Py3.OdGiComplexClipBoundary_type(self, *args)

    def clone(self, *args) -> "OdGiAbstractClipBoundary *":
        return _ODA_Kernel_Py3.OdGiComplexClipBoundary_clone(self, *args)

# Register OdGiComplexClipBoundary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiComplexClipBoundary_swigregister(OdGiComplexClipBoundary)

class OdGiPlanarClipBoundary(OdGiAbstractClipBoundary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiPlanarClipBoundary_swiginit(self, _ODA_Kernel_Py3.new_OdGiPlanarClipBoundary(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPlanarClipBoundary

    def type(self, *args) -> "OdGiAbstractClipBoundary::BoundaryType":
        return _ODA_Kernel_Py3.OdGiPlanarClipBoundary_type(self, *args)

    def clipPlanes(self, *args) -> "OdGiPlanarClipBoundary::ClipPlaneArray const &":
        return _ODA_Kernel_Py3.OdGiPlanarClipBoundary_clipPlanes(self, *args)

    def setClipPlanes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPlanarClipBoundary_setClipPlanes(self, *args)

    def sectionGeometryOutput(self, *args) -> "OdGiSectionGeometryOutput *":
        return _ODA_Kernel_Py3.OdGiPlanarClipBoundary_sectionGeometryOutput(self, *args)

    def setSectionGeometryOutput(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPlanarClipBoundary_setSectionGeometryOutput(self, *args)

    def cuttedGeometryOutput(self, *args) -> "OdGiCuttedGeometryOutput *":
        return _ODA_Kernel_Py3.OdGiPlanarClipBoundary_cuttedGeometryOutput(self, *args)

    def setCuttedGeometryOutput(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPlanarClipBoundary_setCuttedGeometryOutput(self, *args)

    def clone(self, *args) -> "OdGiAbstractClipBoundary *":
        return _ODA_Kernel_Py3.OdGiPlanarClipBoundary_clone(self, *args)

# Register OdGiPlanarClipBoundary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPlanarClipBoundary_swigregister(OdGiPlanarClipBoundary)

class OdGiPlanarClipBoundary_ClipPlane(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_origin = property(_ODA_Kernel_Py3.OdGiPlanarClipBoundary_ClipPlane_m_origin_get, _ODA_Kernel_Py3.OdGiPlanarClipBoundary_ClipPlane_m_origin_set)
    m_normal = property(_ODA_Kernel_Py3.OdGiPlanarClipBoundary_ClipPlane_m_normal_get, _ODA_Kernel_Py3.OdGiPlanarClipBoundary_ClipPlane_m_normal_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiPlanarClipBoundary_ClipPlane_swiginit(self, _ODA_Kernel_Py3.new_OdGiPlanarClipBoundary_ClipPlane(*args))

    def setOrigin(self, *args) -> "OdGiPlanarClipBoundary::ClipPlane &":
        return _ODA_Kernel_Py3.OdGiPlanarClipBoundary_ClipPlane_setOrigin(self, *args)

    def origin(self, *args) -> "OdGePoint3d const &":
        return _ODA_Kernel_Py3.OdGiPlanarClipBoundary_ClipPlane_origin(self, *args)

    def setNormal(self, *args) -> "OdGiPlanarClipBoundary::ClipPlane &":
        return _ODA_Kernel_Py3.OdGiPlanarClipBoundary_ClipPlane_setNormal(self, *args)

    def normal(self, *args) -> "OdGeVector3d const &":
        return _ODA_Kernel_Py3.OdGiPlanarClipBoundary_ClipPlane_normal(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPlanarClipBoundary_ClipPlane

# Register OdGiPlanarClipBoundary_ClipPlane in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPlanarClipBoundary_ClipPlane_swigregister(OdGiPlanarClipBoundary_ClipPlane)

class OdGiMultiClipBoundary(OdGiAbstractClipBoundary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiMultiClipBoundary_swiginit(self, _ODA_Kernel_Py3.new_OdGiMultiClipBoundary(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMultiClipBoundary

    def type(self, *args) -> "OdGiAbstractClipBoundary::BoundaryType":
        return _ODA_Kernel_Py3.OdGiMultiClipBoundary_type(self, *args)

    def clipBoundaries(self, *args) -> "OdGiMultiClipBoundary::AbstractClipBoundaryArray const &":
        return _ODA_Kernel_Py3.OdGiMultiClipBoundary_clipBoundaries(self, *args)

    def setClipBoundaries(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMultiClipBoundary_setClipBoundaries(self, *args)

    def clone(self, *args) -> "OdGiAbstractClipBoundary *":
        return _ODA_Kernel_Py3.OdGiMultiClipBoundary_clone(self, *args)

# Register OdGiMultiClipBoundary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMultiClipBoundary_swigregister(OdGiMultiClipBoundary)

class OdGiMultiClipBoundaryClone(OdGiMultiClipBoundary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiMultiClipBoundaryClone_swiginit(self, _ODA_Kernel_Py3.new_OdGiMultiClipBoundaryClone(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMultiClipBoundaryClone

# Register OdGiMultiClipBoundaryClone in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMultiClipBoundaryClone_swigregister(OdGiMultiClipBoundaryClone)

class OdGiClipBoundaryWithAbstractData(OdGiClipBoundary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_pAbstractData = property(_ODA_Kernel_Py3.OdGiClipBoundaryWithAbstractData_m_pAbstractData_get, _ODA_Kernel_Py3.OdGiClipBoundaryWithAbstractData_m_pAbstractData_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiClipBoundaryWithAbstractData_swiginit(self, _ODA_Kernel_Py3.new_OdGiClipBoundaryWithAbstractData(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiClipBoundaryWithAbstractData

# Register OdGiClipBoundaryWithAbstractData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiClipBoundaryWithAbstractData_swigregister(OdGiClipBoundaryWithAbstractData)

kGsMainOverlay = _ODA_Kernel_Py3.kGsMainOverlay
kGsDirectOverlay = _ODA_Kernel_Py3.kGsDirectOverlay
kGsUserFg3Overlay = _ODA_Kernel_Py3.kGsUserFg3Overlay
kGsUserBg1Overlay = _ODA_Kernel_Py3.kGsUserBg1Overlay
kGsUserBg3Overlay = _ODA_Kernel_Py3.kGsUserBg3Overlay
kGsUserFg1Overlay = _ODA_Kernel_Py3.kGsUserFg1Overlay
kGsHighlightOverlay = _ODA_Kernel_Py3.kGsHighlightOverlay
kGsHighlightSelectionOverlay = _ODA_Kernel_Py3.kGsHighlightSelectionOverlay
kGsDirectTopmostOverlay = _ODA_Kernel_Py3.kGsDirectTopmostOverlay
kGsSpriteOverlay = _ODA_Kernel_Py3.kGsSpriteOverlay
kGsContrastOverlay = _ODA_Kernel_Py3.kGsContrastOverlay
kGsUserFg2Overlay = _ODA_Kernel_Py3.kGsUserFg2Overlay
kGsUserBg2Overlay = _ODA_Kernel_Py3.kGsUserBg2Overlay
kNumGsOverlays = _ODA_Kernel_Py3.kNumGsOverlays
kGsAllOverlays = _ODA_Kernel_Py3.kGsAllOverlays
kGsNoOverlays = _ODA_Kernel_Py3.kGsNoOverlays
kGsUndefinedOverlay = _ODA_Kernel_Py3.kGsUndefinedOverlay
class OdGsOverlayMapping(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kMainDepth = _ODA_Kernel_Py3.OdGsOverlayMapping_kMainDepth
    kNoDepth = _ODA_Kernel_Py3.OdGsOverlayMapping_kNoDepth
    kOwnDepth = _ODA_Kernel_Py3.OdGsOverlayMapping_kOwnDepth
    kNoFrameBuf = _ODA_Kernel_Py3.OdGsOverlayMapping_kNoFrameBuf
    kHltStyle = _ODA_Kernel_Py3.OdGsOverlayMapping_kHltStyle
    kContrastStyle = _ODA_Kernel_Py3.OdGsOverlayMapping_kContrastStyle

    @staticmethod
    def overlayFlags(*args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsOverlayMapping_overlayFlags(*args)

    @staticmethod
    def overlayIndexToRenderingOrder(*args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsOverlayMapping_overlayIndexToRenderingOrder(*args)

    @staticmethod
    def overlayRenderingOrderToIndex(*args) -> "OdGsOverlayId":
        return _ODA_Kernel_Py3.OdGsOverlayMapping_overlayRenderingOrderToIndex(*args)

    @staticmethod
    def validateDefinitions(*args) -> "bool":
        return _ODA_Kernel_Py3.OdGsOverlayMapping_validateDefinitions(*args)

    @staticmethod
    def validateOverlayIndex(*args) -> "bool":
        return _ODA_Kernel_Py3.OdGsOverlayMapping_validateOverlayIndex(*args)

    @staticmethod
    def validateRenderingOrder(*args) -> "bool":
        return _ODA_Kernel_Py3.OdGsOverlayMapping_validateRenderingOrder(*args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsOverlayMapping_swiginit(self, _ODA_Kernel_Py3.new_OdGsOverlayMapping(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsOverlayMapping

# Register OdGsOverlayMapping in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsOverlayMapping_swigregister(OdGsOverlayMapping)

def OdGsOverlayMapping_overlayFlags(*args) -> "OdUInt32":
    return _ODA_Kernel_Py3.OdGsOverlayMapping_overlayFlags(*args)

def OdGsOverlayMapping_overlayIndexToRenderingOrder(*args) -> "OdUInt32":
    return _ODA_Kernel_Py3.OdGsOverlayMapping_overlayIndexToRenderingOrder(*args)

def OdGsOverlayMapping_overlayRenderingOrderToIndex(*args) -> "OdGsOverlayId":
    return _ODA_Kernel_Py3.OdGsOverlayMapping_overlayRenderingOrderToIndex(*args)

def OdGsOverlayMapping_validateDefinitions(*args) -> "bool":
    return _ODA_Kernel_Py3.OdGsOverlayMapping_validateDefinitions(*args)

def OdGsOverlayMapping_validateOverlayIndex(*args) -> "bool":
    return _ODA_Kernel_Py3.OdGsOverlayMapping_validateOverlayIndex(*args)

def OdGsOverlayMapping_validateRenderingOrder(*args) -> "bool":
    return _ODA_Kernel_Py3.OdGsOverlayMapping_validateRenderingOrder(*args)

class OdGsOverlayDataPlaceholder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsOverlayDataPlaceholder_swiginit(self, _ODA_Kernel_Py3.new_OdGsOverlayDataPlaceholder(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsOverlayDataPlaceholder

# Register OdGsOverlayDataPlaceholder in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsOverlayDataPlaceholder_swigregister(OdGsOverlayDataPlaceholder)

class OdGsCullingPrimitive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kPrimBBox = _ODA_Kernel_Py3.OdGsCullingPrimitive_kPrimBBox
    kPrimBSphere = _ODA_Kernel_Py3.OdGsCullingPrimitive_kPrimBSphere
    kPrimOBBox = _ODA_Kernel_Py3.OdGsCullingPrimitive_kPrimOBBox
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsCullingPrimitive

    def primitiveType(self, *args) -> "OdGsCullingPrimitive::PrimitiveType":
        return _ODA_Kernel_Py3.OdGsCullingPrimitive_primitiveType(self, *args)

# Register OdGsCullingPrimitive in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsCullingPrimitive_swigregister(OdGsCullingPrimitive)

class OdGsCullingBBox(OdGsCullingPrimitive, OdGeExtents3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsCullingBBox_swiginit(self, _ODA_Kernel_Py3.new_OdGsCullingBBox(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsCullingBBox

    def primitiveType(self, *args) -> "OdGsCullingPrimitive::PrimitiveType":
        return _ODA_Kernel_Py3.OdGsCullingBBox_primitiveType(self, *args)

# Register OdGsCullingBBox in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsCullingBBox_swigregister(OdGsCullingBBox)

class OdGsCullingBSphere(OdGsCullingPrimitive, OdGeSphere):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsCullingBSphere_swiginit(self, _ODA_Kernel_Py3.new_OdGsCullingBSphere(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsCullingBSphere

    def primitiveType(self, *args) -> "OdGsCullingPrimitive::PrimitiveType":
        return _ODA_Kernel_Py3.OdGsCullingBSphere_primitiveType(self, *args)

# Register OdGsCullingBSphere in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsCullingBSphere_swigregister(OdGsCullingBSphere)

class OdGsCullingOBBox(OdGsCullingPrimitive, OdGeBoundBlock3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsCullingOBBox_swiginit(self, _ODA_Kernel_Py3.new_OdGsCullingOBBox(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsCullingOBBox

    def primitiveType(self, *args) -> "OdGsCullingPrimitive::PrimitiveType":
        return _ODA_Kernel_Py3.OdGsCullingOBBox_primitiveType(self, *args)

# Register OdGsCullingOBBox in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsCullingOBBox_swigregister(OdGsCullingOBBox)

class OdGsCullingVolume(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kProjOrtho = _ODA_Kernel_Py3.OdGsCullingVolume_kProjOrtho
    kProjPerspective = _ODA_Kernel_Py3.OdGsCullingVolume_kProjPerspective
    kIntersectNot = _ODA_Kernel_Py3.OdGsCullingVolume_kIntersectNot
    kIntersectOk = _ODA_Kernel_Py3.OdGsCullingVolume_kIntersectOk
    kIntersectIn = _ODA_Kernel_Py3.OdGsCullingVolume_kIntersectIn

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsCullingVolume >":
        return _ODA_Kernel_Py3.OdGsCullingVolume_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsCullingVolume_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsCullingVolume_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsCullingVolume_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsCullingVolume >":
        return _ODA_Kernel_Py3.OdGsCullingVolume_createObject(*args)

    def projectionType(self, *args) -> "OdGsCullingVolume::ProjectionType":
        return _ODA_Kernel_Py3.OdGsCullingVolume_projectionType(self, *args)

    def intersectWithOpt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsCullingVolume_intersectWithOpt(self, *args)

    def intersectWith(self, *args) -> "OdGsCullingVolume::IntersectionStatus":
        return _ODA_Kernel_Py3.OdGsCullingVolume_intersectWith(self, *args)

    def transformBy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsCullingVolume_transformBy(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsCullingVolume

# Register OdGsCullingVolume in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsCullingVolume_swigregister(OdGsCullingVolume)

def OdGsCullingVolume_cast(*args) -> "OdSmartPtr< OdGsCullingVolume >":
    return _ODA_Kernel_Py3.OdGsCullingVolume_cast(*args)

def OdGsCullingVolume_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsCullingVolume_desc(*args)

def OdGsCullingVolume_createObject(*args) -> "OdSmartPtr< OdGsCullingVolume >":
    return _ODA_Kernel_Py3.OdGsCullingVolume_createObject(*args)

class OdGsOrthoCullingVolume(OdGsCullingVolume):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsOrthoCullingVolume >":
        return _ODA_Kernel_Py3.OdGsOrthoCullingVolume_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsOrthoCullingVolume_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsOrthoCullingVolume_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsOrthoCullingVolume_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsOrthoCullingVolume >":
        return _ODA_Kernel_Py3.OdGsOrthoCullingVolume_createObject(*args)

    def init(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsOrthoCullingVolume_init(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsOrthoCullingVolume

# Register OdGsOrthoCullingVolume in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsOrthoCullingVolume_swigregister(OdGsOrthoCullingVolume)

def OdGsOrthoCullingVolume_cast(*args) -> "OdSmartPtr< OdGsOrthoCullingVolume >":
    return _ODA_Kernel_Py3.OdGsOrthoCullingVolume_cast(*args)

def OdGsOrthoCullingVolume_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsOrthoCullingVolume_desc(*args)

def OdGsOrthoCullingVolume_createObject(*args) -> "OdSmartPtr< OdGsOrthoCullingVolume >":
    return _ODA_Kernel_Py3.OdGsOrthoCullingVolume_createObject(*args)

class OdGsFrustumCullingVolume(OdGsCullingVolume):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsFrustumCullingVolume >":
        return _ODA_Kernel_Py3.OdGsFrustumCullingVolume_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsFrustumCullingVolume_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsFrustumCullingVolume_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsFrustumCullingVolume_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsFrustumCullingVolume >":
        return _ODA_Kernel_Py3.OdGsFrustumCullingVolume_createObject(*args)

    def init(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFrustumCullingVolume_init(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsFrustumCullingVolume

# Register OdGsFrustumCullingVolume in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsFrustumCullingVolume_swigregister(OdGsFrustumCullingVolume)

def OdGsFrustumCullingVolume_cast(*args) -> "OdSmartPtr< OdGsFrustumCullingVolume >":
    return _ODA_Kernel_Py3.OdGsFrustumCullingVolume_cast(*args)

def OdGsFrustumCullingVolume_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsFrustumCullingVolume_desc(*args)

def OdGsFrustumCullingVolume_createObject(*args) -> "OdSmartPtr< OdGsFrustumCullingVolume >":
    return _ODA_Kernel_Py3.OdGsFrustumCullingVolume_createObject(*args)

class OdGsPropertiesDirectRenderOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DirectRender_Point = _ODA_Kernel_Py3.OdGsPropertiesDirectRenderOutput_DirectRender_Point
    DirectRender_LineFlat = _ODA_Kernel_Py3.OdGsPropertiesDirectRenderOutput_DirectRender_LineFlat
    DirectRender_LineGouraud = _ODA_Kernel_Py3.OdGsPropertiesDirectRenderOutput_DirectRender_LineGouraud
    DirectRender_TriangleFlat = _ODA_Kernel_Py3.OdGsPropertiesDirectRenderOutput_DirectRender_TriangleFlat
    DirectRender_TriangleGouraud = _ODA_Kernel_Py3.OdGsPropertiesDirectRenderOutput_DirectRender_TriangleGouraud
    DirectRender_PolygoneFlat = _ODA_Kernel_Py3.OdGsPropertiesDirectRenderOutput_DirectRender_PolygoneFlat
    DirectRender_PolygoneGouraud = _ODA_Kernel_Py3.OdGsPropertiesDirectRenderOutput_DirectRender_PolygoneGouraud
    DirectRender_Image = _ODA_Kernel_Py3.OdGsPropertiesDirectRenderOutput_DirectRender_Image

    def directRenderOutputPoint(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsPropertiesDirectRenderOutput_directRenderOutputPoint(self, *args)

    def directRenderOutputLineFlat(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsPropertiesDirectRenderOutput_directRenderOutputLineFlat(self, *args)

    def directRenderOutputLineGouraud(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsPropertiesDirectRenderOutput_directRenderOutputLineGouraud(self, *args)

    def directRenderOutputTriangleFlat(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsPropertiesDirectRenderOutput_directRenderOutputTriangleFlat(self, *args)

    def directRenderOutputTriangleGouraud(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsPropertiesDirectRenderOutput_directRenderOutputTriangleGouraud(self, *args)

    def directRenderOutputPolygoneFlat(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsPropertiesDirectRenderOutput_directRenderOutputPolygoneFlat(self, *args)

    def directRenderOutputPolygoneGouraud(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsPropertiesDirectRenderOutput_directRenderOutputPolygoneGouraud(self, *args)

    def directRenderOutputImage(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsPropertiesDirectRenderOutput_directRenderOutputImage(self, *args)

    def directRenderOutputFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsPropertiesDirectRenderOutput_directRenderOutputFlags(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsPropertiesDirectRenderOutput

# Register OdGsPropertiesDirectRenderOutput in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsPropertiesDirectRenderOutput_swigregister(OdGsPropertiesDirectRenderOutput)

class DirectRenderImageUV(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    u = property(_ODA_Kernel_Py3.DirectRenderImageUV_u_get, _ODA_Kernel_Py3.DirectRenderImageUV_u_set)
    v = property(_ODA_Kernel_Py3.DirectRenderImageUV_v_get, _ODA_Kernel_Py3.DirectRenderImageUV_v_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.DirectRenderImageUV_swiginit(self, _ODA_Kernel_Py3.new_DirectRenderImageUV(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_DirectRenderImageUV

# Register DirectRenderImageUV in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.DirectRenderImageUV_swigregister(DirectRenderImageUV)

class DirectRenderImageParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    uvCoords = property(_ODA_Kernel_Py3.DirectRenderImageParams_uvCoords_get, _ODA_Kernel_Py3.DirectRenderImageParams_uvCoords_set)
    pDrawable = property(_ODA_Kernel_Py3.DirectRenderImageParams_pDrawable_get, _ODA_Kernel_Py3.DirectRenderImageParams_pDrawable_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.DirectRenderImageParams_swiginit(self, _ODA_Kernel_Py3.new_DirectRenderImageParams(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_DirectRenderImageParams

# Register DirectRenderImageParams in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.DirectRenderImageParams_swigregister(DirectRenderImageParams)

class OdGsProperties(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kViewport = _ODA_Kernel_Py3.OdGsProperties_kViewport
    kBackground = _ODA_Kernel_Py3.OdGsProperties_kBackground
    kVisualStyle = _ODA_Kernel_Py3.OdGsProperties_kVisualStyle
    kRenderEnvironment = _ODA_Kernel_Py3.OdGsProperties_kRenderEnvironment
    kRenderSettings = _ODA_Kernel_Py3.OdGsProperties_kRenderSettings
    kDeviceSimple = _ODA_Kernel_Py3.OdGsProperties_kDeviceSimple
    kDeviceBackground = _ODA_Kernel_Py3.OdGsProperties_kDeviceBackground
    kDeviceNormal = _ODA_Kernel_Py3.OdGsProperties_kDeviceNormal
    kDeviceRender = _ODA_Kernel_Py3.OdGsProperties_kDeviceRender
    kAll = _ODA_Kernel_Py3.OdGsProperties_kAll

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsProperties >":
        return _ODA_Kernel_Py3.OdGsProperties_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsProperties_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsProperties_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsProperties_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsProperties >":
        return _ODA_Kernel_Py3.OdGsProperties_createObject(*args)

    def setUnderlyingDrawable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsProperties_setUnderlyingDrawable(self, *args)

    def underlyingDrawable(self, *args) -> "OdGiDrawablePtr":
        return _ODA_Kernel_Py3.OdGsProperties_underlyingDrawable(self, *args)

    def isUnderlyingDrawableChanged(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsProperties_isUnderlyingDrawableChanged(self, *args)

    def hasUnderlyingDrawable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsProperties_hasUnderlyingDrawable(self, *args)

    def isUnderlyingDrawablePersistent(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsProperties_isUnderlyingDrawablePersistent(self, *args)

    def underlyingDrawableId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGsProperties_underlyingDrawableId(self, *args)

    def underlyingDrawableType(self, *args) -> "OdGiDrawable::DrawableType":
        return _ODA_Kernel_Py3.OdGsProperties_underlyingDrawableType(self, *args)

    def propertiesType(self, *args) -> "OdGsProperties::PropertiesType":
        return _ODA_Kernel_Py3.OdGsProperties_propertiesType(self, *args)

    def propertiesForType(self, *args) -> "OdSmartPtr< OdGsProperties >":
        return _ODA_Kernel_Py3.OdGsProperties_propertiesForType(self, *args)

    def update(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsProperties_update(self, *args)

    def display(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsProperties_display(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsProperties

# Register OdGsProperties in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsProperties_swigregister(OdGsProperties)

def OdGsProperties_cast(*args) -> "OdSmartPtr< OdGsProperties >":
    return _ODA_Kernel_Py3.OdGsProperties_cast(*args)

def OdGsProperties_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsProperties_desc(*args)

def OdGsProperties_createObject(*args) -> "OdSmartPtr< OdGsProperties >":
    return _ODA_Kernel_Py3.OdGsProperties_createObject(*args)

class OdGsUpdateExtents(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsUpdateExtents_swiginit(self, _ODA_Kernel_Py3.new_OdGsUpdateExtents(*args))

    def getExtents(self, *args) -> "OdGeExtents3d const &":
        return _ODA_Kernel_Py3.OdGsUpdateExtents_getExtents(self, *args)

    def accessExtents(self, *args) -> "OdGeExtents3d &":
        return _ODA_Kernel_Py3.OdGsUpdateExtents_accessExtents(self, *args)

    def setExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsUpdateExtents_setExtents(self, *args)

    def resetExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsUpdateExtents_resetExtents(self, *args)

    def addExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsUpdateExtents_addExtents(self, *args)

    def hasLineweight(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsUpdateExtents_hasLineweight(self, *args)

    def getLineweight(self, *args) -> "OdDb::LineWeight":
        return _ODA_Kernel_Py3.OdGsUpdateExtents_getLineweight(self, *args)

    def accessLineweight(self, *args) -> "OdDb::LineWeight &":
        return _ODA_Kernel_Py3.OdGsUpdateExtents_accessLineweight(self, *args)

    def setLineweight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsUpdateExtents_setLineweight(self, *args)

    def resetLineweight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsUpdateExtents_resetLineweight(self, *args)

    def addLineweight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsUpdateExtents_addLineweight(self, *args)

    def get(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsUpdateExtents_get(self, *args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsUpdateExtents_set(self, *args)

    def reset(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsUpdateExtents_reset(self, *args)

    def add(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsUpdateExtents_add(self, *args)

    def isValid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsUpdateExtents_isValid(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsUpdateExtents

# Register OdGsUpdateExtents in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsUpdateExtents_swigregister(OdGsUpdateExtents)
OdGsUpdateExtents.kInvalid = _ODA_Kernel_Py3.cvar.OdGsUpdateExtents_kInvalid

class DrawableHolder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.DrawableHolder_swiginit(self, _ODA_Kernel_Py3.new_DrawableHolder(*args))
    m_drawableId = property(_ODA_Kernel_Py3.DrawableHolder_m_drawableId_get, _ODA_Kernel_Py3.DrawableHolder_m_drawableId_set)
    m_pDrawable = property(_ODA_Kernel_Py3.DrawableHolder_m_pDrawable_get, _ODA_Kernel_Py3.DrawableHolder_m_pDrawable_set)
    m_pGsModel = property(_ODA_Kernel_Py3.DrawableHolder_m_pGsModel_get, _ODA_Kernel_Py3.DrawableHolder_m_pGsModel_set)
    m_pGsRoot = property(_ODA_Kernel_Py3.DrawableHolder_m_pGsRoot_get, _ODA_Kernel_Py3.DrawableHolder_m_pGsRoot_set)
    m_pMetafile = property(_ODA_Kernel_Py3.DrawableHolder_m_pMetafile_get, _ODA_Kernel_Py3.DrawableHolder_m_pMetafile_set)
    m_lastExt = property(_ODA_Kernel_Py3.DrawableHolder_m_lastExt_get, _ODA_Kernel_Py3.DrawableHolder_m_lastExt_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_DrawableHolder

# Register DrawableHolder in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.DrawableHolder_swigregister(DrawableHolder)

class OdGsBaseModule(OdGsModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsBaseModule >":
        return _ODA_Kernel_Py3.OdGsBaseModule_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsBaseModule_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsBaseModule_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsBaseModule_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsBaseModule >":
        return _ODA_Kernel_Py3.OdGsBaseModule_createObject(*args)

    def fire_viewToBeDestroyed(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModule_fire_viewToBeDestroyed(self, *args)

    def createDevice(self, *args) -> "OdGsDevicePtr":
        return _ODA_Kernel_Py3.OdGsBaseModule_createDevice(self, *args)

    def createBitmapDevice(self, *args) -> "OdGsDevicePtr":
        return _ODA_Kernel_Py3.OdGsBaseModule_createBitmapDevice(self, *args)

    def createView(self, *args) -> "OdSmartPtr< OdGsViewImpl >":
        return _ODA_Kernel_Py3.OdGsBaseModule_createView(self, *args)

    def createBitmapView(self, *args) -> "OdSmartPtr< OdGsViewImpl >":
        return _ODA_Kernel_Py3.OdGsBaseModule_createBitmapView(self, *args)

    def addReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModule_addReactor(self, *args)

    def removeReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModule_removeReactor(self, *args)

    def initApp(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModule_initApp(self, *args)

    def uninitApp(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModule_uninitApp(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsBaseModule

# Register OdGsBaseModule in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsBaseModule_swigregister(OdGsBaseModule)

def OdGsBaseModule_cast(*args) -> "OdSmartPtr< OdGsBaseModule >":
    return _ODA_Kernel_Py3.OdGsBaseModule_cast(*args)

def OdGsBaseModule_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsBaseModule_desc(*args)

def OdGsBaseModule_createObject(*args) -> "OdSmartPtr< OdGsBaseModule >":
    return _ODA_Kernel_Py3.OdGsBaseModule_createObject(*args)

class GsViewUpdateEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.GsViewUpdateEvent_swiginit(self, _ODA_Kernel_Py3.new_GsViewUpdateEvent(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_GsViewUpdateEvent

# Register GsViewUpdateEvent in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.GsViewUpdateEvent_swigregister(GsViewUpdateEvent)


def odgsInitialize(*args) -> "void":
    return _ODA_Kernel_Py3.odgsInitialize(*args)

def odgsUninitialize(*args) -> "void":
    return _ODA_Kernel_Py3.odgsUninitialize(*args)
kFsSolid = _ODA_Kernel_Py3.kFsSolid
kFsCheckerboard = _ODA_Kernel_Py3.kFsCheckerboard
kFsCrosshatch = _ODA_Kernel_Py3.kFsCrosshatch
kFsDiamonds = _ODA_Kernel_Py3.kFsDiamonds
kFsHorizontalBars = _ODA_Kernel_Py3.kFsHorizontalBars
kFsSlantLeft = _ODA_Kernel_Py3.kFsSlantLeft
kFsSlantRight = _ODA_Kernel_Py3.kFsSlantRight
kFsSquareDots = _ODA_Kernel_Py3.kFsSquareDots
kFsVerticalBars = _ODA_Kernel_Py3.kFsVerticalBars
kFsUseObject = _ODA_Kernel_Py3.kFsUseObject
kFsLast = _ODA_Kernel_Py3.kFsLast
kLesButt = _ODA_Kernel_Py3.kLesButt
kLesSquare = _ODA_Kernel_Py3.kLesSquare
kLesRound = _ODA_Kernel_Py3.kLesRound
kLesDiamond = _ODA_Kernel_Py3.kLesDiamond
kLesUseObject = _ODA_Kernel_Py3.kLesUseObject
kLjsMiter = _ODA_Kernel_Py3.kLjsMiter
kLjsBevel = _ODA_Kernel_Py3.kLjsBevel
kLjsRound = _ODA_Kernel_Py3.kLjsRound
kLjsDiamond = _ODA_Kernel_Py3.kLjsDiamond
kLjsUseObject = _ODA_Kernel_Py3.kLjsUseObject
kLtpSolid = _ODA_Kernel_Py3.kLtpSolid
kLtpDashed = _ODA_Kernel_Py3.kLtpDashed
kLtpDotted = _ODA_Kernel_Py3.kLtpDotted
kLtpDashDot = _ODA_Kernel_Py3.kLtpDashDot
kLtpShortDash = _ODA_Kernel_Py3.kLtpShortDash
kLtpMediumDash = _ODA_Kernel_Py3.kLtpMediumDash
kLtpLongDash = _ODA_Kernel_Py3.kLtpLongDash
kLtpShortDashX2 = _ODA_Kernel_Py3.kLtpShortDashX2
kLtpMediumDashX2 = _ODA_Kernel_Py3.kLtpMediumDashX2
kLtpLongDashX2 = _ODA_Kernel_Py3.kLtpLongDashX2
kLtpMediumLongDash = _ODA_Kernel_Py3.kLtpMediumLongDash
kLtpMediumDashShortDashShortDash = _ODA_Kernel_Py3.kLtpMediumDashShortDashShortDash
kLtpLongDashShortDash = _ODA_Kernel_Py3.kLtpLongDashShortDash
kLtpLongDashDotDot = _ODA_Kernel_Py3.kLtpLongDashDotDot
kLtpLongDashDot = _ODA_Kernel_Py3.kLtpLongDashDot
kLtpMediumDashDotShortDashDot = _ODA_Kernel_Py3.kLtpMediumDashDotShortDashDot
kLtpSparseDot = _ODA_Kernel_Py3.kLtpSparseDot
kLtpISODash = _ODA_Kernel_Py3.kLtpISODash
kLtpISODashSpace = _ODA_Kernel_Py3.kLtpISODashSpace
kLtpISOLongDashDot = _ODA_Kernel_Py3.kLtpISOLongDashDot
kLtpISOLongDashDoubleDot = _ODA_Kernel_Py3.kLtpISOLongDashDoubleDot
kLtpISOLongDashTripleDot = _ODA_Kernel_Py3.kLtpISOLongDashTripleDot
kLtpISODot = _ODA_Kernel_Py3.kLtpISODot
kLtpISOLongDashShortDash = _ODA_Kernel_Py3.kLtpISOLongDashShortDash
kLtpISOLongDashDoubleShortDash = _ODA_Kernel_Py3.kLtpISOLongDashDoubleShortDash
kLtpISODashDot = _ODA_Kernel_Py3.kLtpISODashDot
kLtpISODoubleDashDot = _ODA_Kernel_Py3.kLtpISODoubleDashDot
kLtpISODashDoubleDot = _ODA_Kernel_Py3.kLtpISODashDoubleDot
kLtpISODoubleDashDoubleDot = _ODA_Kernel_Py3.kLtpISODoubleDashDoubleDot
kLtpISODashTripleDot = _ODA_Kernel_Py3.kLtpISODashTripleDot
kLtpISODoubleDashTripleDot = _ODA_Kernel_Py3.kLtpISODoubleDashTripleDot
kLtpUseObject = _ODA_Kernel_Py3.kLtpUseObject
kLtpLast = _ODA_Kernel_Py3.kLtpLast
class OdPsPlotStyleData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kDither = _ODA_Kernel_Py3.OdPsPlotStyleData_kDither
    kGrayScale = _ODA_Kernel_Py3.OdPsPlotStyleData_kGrayScale
    kNotUseObject = _ODA_Kernel_Py3.OdPsPlotStyleData_kNotUseObject

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdPsPlotStyleData_swiginit(self, _ODA_Kernel_Py3.new_OdPsPlotStyleData(*args))

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdPsPlotStyleData___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdPsPlotStyleData___ne__(self, *args)

    def color(self, *args) -> "OdCmEntityColor const &":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_color(self, *args)

    def colorPolicy(self, *args) -> "OdInt16":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_colorPolicy(self, *args)

    def physicalPenNumber(self, *args) -> "OdInt16":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_physicalPenNumber(self, *args)

    def virtualPenNumber(self, *args) -> "OdInt16":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_virtualPenNumber(self, *args)

    def screening(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_screening(self, *args)

    def linePatternSize(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_linePatternSize(self, *args)

    def linetype(self, *args) -> "OdPs::LineType":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_linetype(self, *args)

    def isAdaptiveLinetype(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_isAdaptiveLinetype(self, *args)

    def isGrayScaleOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_isGrayScaleOn(self, *args)

    def isDitherOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_isDitherOn(self, *args)

    def lineweight(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_lineweight(self, *args)

    def fillStyle(self, *args) -> "OdPs::FillStyle":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_fillStyle(self, *args)

    def endStyle(self, *args) -> "OdPs::LineEndStyle":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_endStyle(self, *args)

    def joinStyle(self, *args) -> "OdPs::LineJoinStyle":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_joinStyle(self, *args)

    def setColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_setColor(self, *args)

    def setColorPolicy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_setColorPolicy(self, *args)

    def setPhysicalPenNumber(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_setPhysicalPenNumber(self, *args)

    def setVirtualPenNumber(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_setVirtualPenNumber(self, *args)

    def setScreening(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_setScreening(self, *args)

    def setLinePatternSize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_setLinePatternSize(self, *args)

    def setLinetype(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_setLinetype(self, *args)

    def setAdaptiveLinetype(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_setAdaptiveLinetype(self, *args)

    def setGrayScaleOn(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_setGrayScaleOn(self, *args)

    def setDitherOn(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_setDitherOn(self, *args)

    def setLineweight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_setLineweight(self, *args)

    def setFillStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_setFillStyle(self, *args)

    def setEndStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_setEndStyle(self, *args)

    def setJoinStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleData_setJoinStyle(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdPsPlotStyleData

# Register OdPsPlotStyleData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdPsPlotStyleData_swigregister(OdPsPlotStyleData)
OdPsPlotStyleData.kDefault = _ODA_Kernel_Py3.cvar.OdPsPlotStyleData_kDefault

class OdPsPlotStyle(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdPsPlotStyle >":
        return _ODA_Kernel_Py3.OdPsPlotStyle_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdPsPlotStyle_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdPsPlotStyle_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdPsPlotStyle_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdPsPlotStyle >":
        return _ODA_Kernel_Py3.OdPsPlotStyle_createObject(*args)

    def name(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdPsPlotStyle_name(self, *args)

    def description(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdPsPlotStyle_description(self, *args)

    def getData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyle_getData(self, *args)

    def localizedName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdPsPlotStyle_localizedName(self, *args)

    def setData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyle_setData(self, *args)

    def setDescription(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyle_setDescription(self, *args)

    def setName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyle_setName(self, *args)

    def setLocalizedName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyle_setLocalizedName(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdPsPlotStyle

# Register OdPsPlotStyle in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdPsPlotStyle_swigregister(OdPsPlotStyle)

def OdPsPlotStyle_cast(*args) -> "OdSmartPtr< OdPsPlotStyle >":
    return _ODA_Kernel_Py3.OdPsPlotStyle_cast(*args)

def OdPsPlotStyle_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdPsPlotStyle_desc(*args)

def OdPsPlotStyle_createObject(*args) -> "OdSmartPtr< OdPsPlotStyle >":
    return _ODA_Kernel_Py3.OdPsPlotStyle_createObject(*args)

class OdPsPlotStyleTable(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdPsPlotStyleTable >":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdPsPlotStyleTable >":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_createObject(*args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_clone(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_copyFrom(self, *args)

    def isApplyScaleFactor(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_isApplyScaleFactor(self, *args)

    def description(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_description(self, *args)

    def scaleFactor(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_scaleFactor(self, *args)

    def isDisplayCustomLineweightUnits(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_isDisplayCustomLineweightUnits(self, *args)

    def getLineweightAt(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_getLineweightAt(self, *args)

    def plotStyleAt(self, *args) -> "OdPsPlotStylePtr":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_plotStyleAt(self, *args)

    def plotStyleSize(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_plotStyleSize(self, *args)

    def lineweightSize(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_lineweightSize(self, *args)

    def isAciTableAvailable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_isAciTableAvailable(self, *args)

    def addNewPlotStyle(self, *args) -> "OdPsPlotStylePtr":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_addNewPlotStyle(self, *args)

    def delPlotStyle(self, *args) -> "OdPsPlotStylePtr":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_delPlotStyle(self, *args)

    def setDescription(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_setDescription(self, *args)

    def setScaleFactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_setScaleFactor(self, *args)

    def setApplyScaleFactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_setApplyScaleFactor(self, *args)

    def setDisplayCustomLineweightUnits(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_setDisplayCustomLineweightUnits(self, *args)

    def setLineweightAt(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_setLineweightAt(self, *args)

    def setLineweights(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_setLineweights(self, *args)

    def setAciTableAvailable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_setAciTableAvailable(self, *args)

    def setPlotStylesIndexed(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_setPlotStylesIndexed(self, *args)

    def setPlotStyles(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_setPlotStyles(self, *args)

    def addPlotStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_addPlotStyle(self, *args)

    def setOrdering(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_setOrdering(self, *args)

    def plotStyles(self, *args) -> "OdPsPlotStylesMap":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_plotStyles(self, *args)

    def plotStylesIndexed(self, *args) -> "OdPsPlotStylesArray":
        return _ODA_Kernel_Py3.OdPsPlotStyleTable_plotStylesIndexed(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdPsPlotStyleTable

# Register OdPsPlotStyleTable in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdPsPlotStyleTable_swigregister(OdPsPlotStyleTable)

def OdPsPlotStyleTable_cast(*args) -> "OdSmartPtr< OdPsPlotStyleTable >":
    return _ODA_Kernel_Py3.OdPsPlotStyleTable_cast(*args)

def OdPsPlotStyleTable_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdPsPlotStyleTable_desc(*args)

def OdPsPlotStyleTable_createObject(*args) -> "OdSmartPtr< OdPsPlotStyleTable >":
    return _ODA_Kernel_Py3.OdPsPlotStyleTable_createObject(*args)

class OdPsPlotStyleServices(OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdPsPlotStyleServices >":
        return _ODA_Kernel_Py3.OdPsPlotStyleServices_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdPsPlotStyleServices_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdPsPlotStyleServices_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdPsPlotStyleServices_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdPsPlotStyleServices >":
        return _ODA_Kernel_Py3.OdPsPlotStyleServices_createObject(*args)

    def createPlotStyleTable(self, *args) -> "OdPsPlotStyleTablePtr":
        return _ODA_Kernel_Py3.OdPsPlotStyleServices_createPlotStyleTable(self, *args)

    def loadPlotStyleTable(self, *args) -> "OdPsPlotStyleTablePtr":
        return _ODA_Kernel_Py3.OdPsPlotStyleServices_loadPlotStyleTable(self, *args)

    def savePlotStyleTable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPsPlotStyleServices_savePlotStyleTable(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdPsPlotStyleServices

# Register OdPsPlotStyleServices in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdPsPlotStyleServices_swigregister(OdPsPlotStyleServices)

def OdPsPlotStyleServices_cast(*args) -> "OdSmartPtr< OdPsPlotStyleServices >":
    return _ODA_Kernel_Py3.OdPsPlotStyleServices_cast(*args)

def OdPsPlotStyleServices_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdPsPlotStyleServices_desc(*args)

def OdPsPlotStyleServices_createObject(*args) -> "OdSmartPtr< OdPsPlotStyleServices >":
    return _ODA_Kernel_Py3.OdPsPlotStyleServices_createObject(*args)

class OdGiDgLinetyper(OdGiLinetyper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiDgLinetyper >":
        return _ODA_Kernel_Py3.OdGiDgLinetyper_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiDgLinetyper_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiDgLinetyper_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiDgLinetyper_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiDgLinetyper >":
        return _ODA_Kernel_Py3.OdGiDgLinetyper_createObject(*args)

    def dgLinetypeTraits(self, *args) -> "OdGiDgLinetypeTraits &":
        return _ODA_Kernel_Py3.OdGiDgLinetyper_dgLinetypeTraits(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDgLinetyper

# Register OdGiDgLinetyper in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDgLinetyper_swigregister(OdGiDgLinetyper)

def OdGiDgLinetyper_cast(*args) -> "OdSmartPtr< OdGiDgLinetyper >":
    return _ODA_Kernel_Py3.OdGiDgLinetyper_cast(*args)

def OdGiDgLinetyper_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiDgLinetyper_desc(*args)

def OdGiDgLinetyper_createObject(*args) -> "OdSmartPtr< OdGiDgLinetyper >":
    return _ODA_Kernel_Py3.OdGiDgLinetyper_createObject(*args)

class OdGiMaterialTraitsData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiMaterialTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiMaterialTraitsData(*args))

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData___ne__(self, *args)

    def ambient(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_ambient(self, *args)

    def diffuse(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_diffuse(self, *args)

    def specular(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_specular(self, *args)

    def reflection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_reflection(self, *args)

    def opacity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_opacity(self, *args)

    def bump(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_bump(self, *args)

    def refraction(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_refraction(self, *args)

    def translucence(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_translucence(self, *args)

    def selfIllumination(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_selfIllumination(self, *args)

    def reflectivity(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_reflectivity(self, *args)

    def illuminationModel(self, *args) -> "OdGiMaterialTraits::IlluminationModel":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_illuminationModel(self, *args)

    def channelFlags(self, *args) -> "OdGiMaterialTraits::ChannelFlags":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_channelFlags(self, *args)

    def mode(self, *args) -> "OdGiMaterialTraits::Mode":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_mode(self, *args)

    def setAmbient(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setAmbient(self, *args)

    def setDiffuse(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setDiffuse(self, *args)

    def setSpecular(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setSpecular(self, *args)

    def setReflection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setReflection(self, *args)

    def setOpacity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setOpacity(self, *args)

    def setBump(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setBump(self, *args)

    def setRefraction(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setRefraction(self, *args)

    def setTranslucence(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setTranslucence(self, *args)

    def setSelfIllumination(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setSelfIllumination(self, *args)

    def setReflectivity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setReflectivity(self, *args)

    def setIlluminationModel(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setIlluminationModel(self, *args)

    def setChannelFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setChannelFlags(self, *args)

    def setMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setMode(self, *args)

    def setColorBleedScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setColorBleedScale(self, *args)

    def colorBleedScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_colorBleedScale(self, *args)

    def setIndirectBumpScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setIndirectBumpScale(self, *args)

    def indirectBumpScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_indirectBumpScale(self, *args)

    def setReflectanceScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setReflectanceScale(self, *args)

    def reflectanceScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_reflectanceScale(self, *args)

    def setTransmittanceScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setTransmittanceScale(self, *args)

    def transmittanceScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_transmittanceScale(self, *args)

    def setTwoSided(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setTwoSided(self, *args)

    def twoSided(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_twoSided(self, *args)

    def setLuminanceMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setLuminanceMode(self, *args)

    def luminanceMode(self, *args) -> "OdGiMaterialTraits::LuminanceMode":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_luminanceMode(self, *args)

    def setLuminance(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setLuminance(self, *args)

    def luminance(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_luminance(self, *args)

    def setNormalMap(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setNormalMap(self, *args)

    def normalMap(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_normalMap(self, *args)

    def setGlobalIllumination(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setGlobalIllumination(self, *args)

    def globalIllumination(self, *args) -> "OdGiMaterialTraits::GlobalIlluminationMode":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_globalIllumination(self, *args)

    def setFinalGather(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setFinalGather(self, *args)

    def finalGather(self, *args) -> "OdGiMaterialTraits::FinalGatherMode":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_finalGather(self, *args)

    def setEmission(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setEmission(self, *args)

    def emission(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_emission(self, *args)

    def setTint(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setTint(self, *args)

    def tint(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_tint(self, *args)

    def setShadingAmbient(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setShadingAmbient(self, *args)

    def shadingAmbient(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_shadingAmbient(self, *args)

    def setShadingDiffuse(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setShadingDiffuse(self, *args)

    def shadingDiffuse(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_shadingDiffuse(self, *args)

    def setShadingSpecular(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setShadingSpecular(self, *args)

    def shadingSpecular(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_shadingSpecular(self, *args)

    def setShadingOpacity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setShadingOpacity(self, *args)

    def shadingOpacity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_shadingOpacity(self, *args)

    def setDiffuseColorMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setDiffuseColorMode(self, *args)

    def diffuseColorMode(self, *args) -> "OdGiMaterialTraits::DiffuseColorMode":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_diffuseColorMode(self, *args)

    def setShadowsOpacityEffect(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setShadowsOpacityEffect(self, *args)

    def shadowsOpacityEffect(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_shadowsOpacityEffect(self, *args)

    def setSpecularHighlightingOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_setSpecularHighlightingOverride(self, *args)

    def specularHighlightingOverride(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTraitsData_specularHighlightingOverride(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMaterialTraitsData

# Register OdGiMaterialTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMaterialTraitsData_swigregister(OdGiMaterialTraitsData)

class OdGiLayerTraits_(OdGiLayerTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLayerTraits_

# Register OdGiLayerTraits_ in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLayerTraits__swigregister(OdGiLayerTraits_)

class OdGiSubEntityTraits_(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSubEntityTraits_

# Register OdGiSubEntityTraits_ in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSubEntityTraits__swigregister(OdGiSubEntityTraits_)

class OdGiLayerTraitsData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiLayerTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiLayerTraitsData(*args))

    def flags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_flags(self, *args)

    def lineweight(self, *args) -> "OdDb::LineWeight":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_lineweight(self, *args)

    def linetype(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_linetype(self, *args)

    def plotStyleNameType(self, *args) -> "OdDb::PlotStyleNameType":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_plotStyleNameType(self, *args)

    def plotStyleNameId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_plotStyleNameId(self, *args)

    def trueColor(self, *args) -> "OdCmEntityColor const &":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_trueColor(self, *args)

    def materialId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_materialId(self, *args)

    def transparency(self, *args) -> "OdCmTransparency":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_transparency(self, *args)

    def setTrueColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_setTrueColor(self, *args)

    def setLineweight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_setLineweight(self, *args)

    def setLinetype(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_setLinetype(self, *args)

    def setMaterial(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_setMaterial(self, *args)

    def setTransparency(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_setTransparency(self, *args)

    def isOff(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_isOff(self, *args)

    def setOff(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_setOff(self, *args)

    def isPlottable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_isPlottable(self, *args)

    def setPlottable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_setPlottable(self, *args)

    def isLocked(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_isLocked(self, *args)

    def setLocked(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_setLocked(self, *args)

    def isFrozen(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_isFrozen(self, *args)

    def isByBlock(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsData_isByBlock(self, *args)
    m_flags = property(_ODA_Kernel_Py3.OdGiLayerTraitsData_m_flags_get, _ODA_Kernel_Py3.OdGiLayerTraitsData_m_flags_set)
    m_lineweight = property(_ODA_Kernel_Py3.OdGiLayerTraitsData_m_lineweight_get, _ODA_Kernel_Py3.OdGiLayerTraitsData_m_lineweight_set)
    m_plotStyleNameType = property(_ODA_Kernel_Py3.OdGiLayerTraitsData_m_plotStyleNameType_get, _ODA_Kernel_Py3.OdGiLayerTraitsData_m_plotStyleNameType_set)
    m_color = property(_ODA_Kernel_Py3.OdGiLayerTraitsData_m_color_get, _ODA_Kernel_Py3.OdGiLayerTraitsData_m_color_set)
    m_linetypeId = property(_ODA_Kernel_Py3.OdGiLayerTraitsData_m_linetypeId_get, _ODA_Kernel_Py3.OdGiLayerTraitsData_m_linetypeId_set)
    m_plotStyleNameId = property(_ODA_Kernel_Py3.OdGiLayerTraitsData_m_plotStyleNameId_get, _ODA_Kernel_Py3.OdGiLayerTraitsData_m_plotStyleNameId_set)
    m_materialId = property(_ODA_Kernel_Py3.OdGiLayerTraitsData_m_materialId_get, _ODA_Kernel_Py3.OdGiLayerTraitsData_m_materialId_set)
    m_cmTransparency = property(_ODA_Kernel_Py3.OdGiLayerTraitsData_m_cmTransparency_get, _ODA_Kernel_Py3.OdGiLayerTraitsData_m_cmTransparency_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLayerTraitsData

# Register OdGiLayerTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLayerTraitsData_swigregister(OdGiLayerTraitsData)

class OdGiLayerTraitsTaker(OdGiLayerTraits_, OdGiSubEntityTraits_, OdGiLayerTraitsData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setRefView(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_setRefView(self, *args)

    def reset(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_reset(self, *args)

    def lineweight(self, *args) -> "OdDb::LineWeight":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_lineweight(self, *args)

    def linetype(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_linetype(self, *args)

    def plotStyleNameType(self, *args) -> "OdDb::PlotStyleNameType":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_plotStyleNameType(self, *args)

    def plotStyleNameId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_plotStyleNameId(self, *args)

    def materialId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_materialId(self, *args)

    def setLineweight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_setLineweight(self, *args)

    def setLinetype(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_setLinetype(self, *args)

    def setPlotStyleName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_setPlotStyleName(self, *args)

    def isOff(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_isOff(self, *args)

    def setOff(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_setOff(self, *args)

    def isPlottable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_isPlottable(self, *args)

    def setPlottable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_setPlottable(self, *args)

    def isLocked(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_isLocked(self, *args)

    def setLocked(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_setLocked(self, *args)

    def trueColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_trueColor(self, *args)

    def layer(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_layer(self, *args)

    def lineType(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_lineType(self, *args)

    def fillType(self, *args) -> "OdGiFillType":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_fillType(self, *args)

    def lineWeight(self, *args) -> "OdDb::LineWeight":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_lineWeight(self, *args)

    def lineTypeScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_lineTypeScale(self, *args)

    def thickness(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_thickness(self, *args)

    def material(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_material(self, *args)

    def mapper(self, *args) -> "OdGiMapper const *":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_mapper(self, *args)

    def visualStyle(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_visualStyle(self, *args)

    def transparency(self, *args) -> "OdCmTransparency":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_transparency(self, *args)

    def drawFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_drawFlags(self, *args)

    def selectionGeom(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_selectionGeom(self, *args)

    def shadowFlags(self, *args) -> "ShadowFlags":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_shadowFlags(self, *args)

    def sectionable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_sectionable(self, *args)

    def selectionFlags(self, *args) -> "SelectionFlags":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_selectionFlags(self, *args)

    def setTrueColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_setTrueColor(self, *args)

    def setColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_setColor(self, *args)

    def setLineType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_setLineType(self, *args)

    def setLineWeight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_setLineWeight(self, *args)

    def setMaterial(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_setMaterial(self, *args)

    def setTransparency(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_setTransparency(self, *args)

    def secondaryTrueColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_secondaryTrueColor(self, *args)

    def lineStyleModifiers(self, *args) -> "OdGiDgLinetypeModifiers const *":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_lineStyleModifiers(self, *args)

    def fill(self, *args) -> "OdGiFill const *":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_fill(self, *args)

    def regenType(self, *args) -> "OdGiRegenType":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_regenType(self, *args)

    def regenAbort(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_regenAbort(self, *args)

    def subEntityTraits(self, *args) -> "OdGiSubEntityTraits &":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_subEntityTraits(self, *args)

    def rawGeometry(self, *args) -> "OdGiGeometry &":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_rawGeometry(self, *args)

    def isDragging(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_isDragging(self, *args)

    def deviation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_deviation(self, *args)

    def numberOfIsolines(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_numberOfIsolines(self, *args)

    def context(self, *args) -> "OdGiContext *":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_context(self, *args)

    def setContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_setContext(self, *args)

    def viewport(self, *args) -> "OdGiViewport &":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_viewport(self, *args)

    def sequenceNumber(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_sequenceNumber(self, *args)

    def isValidId(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_isValidId(self, *args)

    def viewportObjectId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_viewportObjectId(self, *args)

    def getModelToWorldTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_getModelToWorldTransform(self, *args)

    def getWorldToModelTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_getWorldToModelTransform(self, *args)

    def auxData(self, *args) -> "OdGiAuxiliaryDataPtr":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_auxData(self, *args)

    def setAuxData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTaker_setAuxData(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLayerTraitsTaker

# Register OdGiLayerTraitsTaker in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLayerTraitsTaker_swigregister(OdGiLayerTraitsTaker)

class OdGiTextStyle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kShape = _ODA_Kernel_Py3.OdGiTextStyle_kShape
    kUpsideDown = _ODA_Kernel_Py3.OdGiTextStyle_kUpsideDown
    kVertical = _ODA_Kernel_Py3.OdGiTextStyle_kVertical
    kUnderlined = _ODA_Kernel_Py3.OdGiTextStyle_kUnderlined
    kOverlined = _ODA_Kernel_Py3.OdGiTextStyle_kOverlined
    kShxFont = _ODA_Kernel_Py3.OdGiTextStyle_kShxFont
    kPreLoaded = _ODA_Kernel_Py3.OdGiTextStyle_kPreLoaded
    kBackward = _ODA_Kernel_Py3.OdGiTextStyle_kBackward
    kShapeLoaded = _ODA_Kernel_Py3.OdGiTextStyle_kShapeLoaded
    kStriked = _ODA_Kernel_Py3.OdGiTextStyle_kStriked
    kUseIntercharSpacing = _ODA_Kernel_Py3.OdGiTextStyle_kUseIntercharSpacing
    kFixedIntercharSpacing = _ODA_Kernel_Py3.OdGiTextStyle_kFixedIntercharSpacing
    kNoUsePreferableFont = _ODA_Kernel_Py3.OdGiTextStyle_kNoUsePreferableFont

    def setShapeLoaded(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setShapeLoaded(self, *args)

    def isShapeLoaded(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiTextStyle_isShapeLoaded(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiTextStyle_swiginit(self, _ODA_Kernel_Py3.new_OdGiTextStyle(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiTextStyle

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_set(self, *args)

    def loadStyleRec(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_loadStyleRec(self, *args)

    def getFontFilePath(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdGiTextStyle_getFontFilePath(self, *args)

    def getBigFontFilePath(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdGiTextStyle_getBigFontFilePath(self, *args)

    def setFontFilePath(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setFontFilePath(self, *args)

    def setBigFontFilePath(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setBigFontFilePath(self, *args)

    def setTextSize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setTextSize(self, *args)

    def setXScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setXScale(self, *args)

    def setObliquingAngle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setObliquingAngle(self, *args)

    def setTrackingPercent(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setTrackingPercent(self, *args)

    def setBackward(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setBackward(self, *args)

    def setUpsideDown(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setUpsideDown(self, *args)

    def setVertical(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setVertical(self, *args)

    def setUnderlined(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setUnderlined(self, *args)

    def setOverlined(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setOverlined(self, *args)

    def setStriked(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setStriked(self, *args)

    def setPreLoaded(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setPreLoaded(self, *args)

    def setShxFont(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setShxFont(self, *args)

    def setFileName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setFileName(self, *args)

    def setBigFontFileName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setBigFontFileName(self, *args)

    def isBackward(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiTextStyle_isBackward(self, *args)

    def isUpsideDown(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiTextStyle_isUpsideDown(self, *args)

    def isVertical(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiTextStyle_isVertical(self, *args)

    def isUnderlined(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiTextStyle_isUnderlined(self, *args)

    def isOverlined(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiTextStyle_isOverlined(self, *args)

    def isStriked(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiTextStyle_isStriked(self, *args)

    def isPreLoaded(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiTextStyle_isPreLoaded(self, *args)

    def isShxFont(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiTextStyle_isShxFont(self, *args)

    def isTtfFont(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiTextStyle_isTtfFont(self, *args)

    def setIsShape(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setIsShape(self, *args)

    def isShape(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiTextStyle_isShape(self, *args)

    def setFont(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setFont(self, *args)

    def setBigFont(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setBigFont(self, *args)

    def font(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_font(self, *args)

    def getFont(self, *args) -> "OdFont *":
        return _ODA_Kernel_Py3.OdGiTextStyle_getFont(self, *args)

    def getBigFont(self, *args) -> "OdFont *":
        return _ODA_Kernel_Py3.OdGiTextStyle_getBigFont(self, *args)

    def ttfdescriptor(self, *args) -> "OdTtfDescriptor const &":
        return _ODA_Kernel_Py3.OdGiTextStyle_ttfdescriptor(self, *args)

    def bigFontFileName(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdGiTextStyle_bigFontFileName(self, *args)

    def textSize(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiTextStyle_textSize(self, *args)

    def xScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiTextStyle_xScale(self, *args)

    def obliquingAngle(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiTextStyle_obliquingAngle(self, *args)

    def trackingPercent(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiTextStyle_trackingPercent(self, *args)

    def getCodePage(self, *args) -> "OdCodePageId":
        return _ODA_Kernel_Py3.OdGiTextStyle_getCodePage(self, *args)

    def setCodePage(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setCodePage(self, *args)

    def styleName(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdGiTextStyle_styleName(self, *args)

    def setStyleName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setStyleName(self, *args)

    def setIsUseIntercharSpacing(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setIsUseIntercharSpacing(self, *args)

    def isUseIntercharSpacing(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiTextStyle_isUseIntercharSpacing(self, *args)

    def setIsFixedIntercharSpacing(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setIsFixedIntercharSpacing(self, *args)

    def isFixedIntercharSpacing(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiTextStyle_isFixedIntercharSpacing(self, *args)

    def getIntercharSpacing(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiTextStyle_getIntercharSpacing(self, *args)

    def setIntercharSpacing(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setIntercharSpacing(self, *args)

    def setNoUsePreferableFont(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTextStyle_setNoUsePreferableFont(self, *args)

    def isNoUsePreferableFont(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiTextStyle_isNoUsePreferableFont(self, *args)

# Register OdGiTextStyle in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiTextStyle_swigregister(OdGiTextStyle)

class OdGiOrthoClipper(OdGiConveyorNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiOrthoClipper >":
        return _ODA_Kernel_Py3.OdGiOrthoClipper_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiOrthoClipper_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiOrthoClipper_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiOrthoClipper_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiOrthoClipper >":
        return _ODA_Kernel_Py3.OdGiOrthoClipper_createObject(*args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipper_set(self, *args)

    def get(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipper_get(self, *args)

    def setDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipper_setDeviation(self, *args)

    def setDrawContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipper_setDrawContext(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiOrthoClipper

# Register OdGiOrthoClipper in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiOrthoClipper_swigregister(OdGiOrthoClipper)

def OdGiOrthoClipper_cast(*args) -> "OdSmartPtr< OdGiOrthoClipper >":
    return _ODA_Kernel_Py3.OdGiOrthoClipper_cast(*args)

def OdGiOrthoClipper_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiOrthoClipper_desc(*args)

def OdGiOrthoClipper_createObject(*args) -> "OdSmartPtr< OdGiOrthoClipper >":
    return _ODA_Kernel_Py3.OdGiOrthoClipper_createObject(*args)

class OdGiDgLinetypeDash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_dash = property(_ODA_Kernel_Py3.OdGiDgLinetypeDash_m_dash_get, _ODA_Kernel_Py3.OdGiDgLinetypeDash_m_dash_set)
    m_shape = property(_ODA_Kernel_Py3.OdGiDgLinetypeDash_m_shape_get, _ODA_Kernel_Py3.OdGiDgLinetypeDash_m_shape_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiDgLinetypeDash_swiginit(self, _ODA_Kernel_Py3.new_OdGiDgLinetypeDash(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDgLinetypeDash

# Register OdGiDgLinetypeDash in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDgLinetypeDash_swigregister(OdGiDgLinetypeDash)

class DashInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kLsNoWidth = _ODA_Kernel_Py3.DashInfo_kLsNoWidth
    kLsWidthLeft = _ODA_Kernel_Py3.DashInfo_kLsWidthLeft
    kLsWidthRight = _ODA_Kernel_Py3.DashInfo_kLsWidthRight
    kLsWidthFull = _ODA_Kernel_Py3.DashInfo_kLsWidthFull
    kLsCapsClosed = _ODA_Kernel_Py3.DashInfo_kLsCapsClosed
    kLsCapsOpen = _ODA_Kernel_Py3.DashInfo_kLsCapsOpen
    kLsCapsExtended = _ODA_Kernel_Py3.DashInfo_kLsCapsExtended
    kLsCapsHexagon = _ODA_Kernel_Py3.DashInfo_kLsCapsHexagon
    kLsCapsOctagon = _ODA_Kernel_Py3.DashInfo_kLsCapsOctagon
    kLsCapsDecagon = _ODA_Kernel_Py3.DashInfo_kLsCapsDecagon
    kLsCapsArc = _ODA_Kernel_Py3.DashInfo_kLsCapsArc
    kFlagDash = _ODA_Kernel_Py3.DashInfo_kFlagDash
    kFlagPassCorner = _ODA_Kernel_Py3.DashInfo_kFlagPassCorner
    kFlagCanBeScaled = _ODA_Kernel_Py3.DashInfo_kFlagCanBeScaled
    kFlagInvertStrokeInFirstCode = _ODA_Kernel_Py3.DashInfo_kFlagInvertStrokeInFirstCode
    kFlagInvertStrokeInLastCode = _ODA_Kernel_Py3.DashInfo_kFlagInvertStrokeInLastCode
    kFlagIncreasingTaper = _ODA_Kernel_Py3.DashInfo_kFlagIncreasingTaper
    kFlagDecreasingTaper = _ODA_Kernel_Py3.DashInfo_kFlagDecreasingTaper
    kFlagBaseStrokeDash = _ODA_Kernel_Py3.DashInfo_kFlagBaseStrokeDash
    m_uFlags = property(_ODA_Kernel_Py3.DashInfo_m_uFlags_get, _ODA_Kernel_Py3.DashInfo_m_uFlags_set)
    m_dLength = property(_ODA_Kernel_Py3.DashInfo_m_dLength_get, _ODA_Kernel_Py3.DashInfo_m_dLength_set)
    m_dStartWidth = property(_ODA_Kernel_Py3.DashInfo_m_dStartWidth_get, _ODA_Kernel_Py3.DashInfo_m_dStartWidth_set)
    m_dEndWidth = property(_ODA_Kernel_Py3.DashInfo_m_dEndWidth_get, _ODA_Kernel_Py3.DashInfo_m_dEndWidth_set)
    m_lsWidthMode = property(_ODA_Kernel_Py3.DashInfo_m_lsWidthMode_get, _ODA_Kernel_Py3.DashInfo_m_lsWidthMode_set)
    m_lsCapsType = property(_ODA_Kernel_Py3.DashInfo_m_lsCapsType_get, _ODA_Kernel_Py3.DashInfo_m_lsCapsType_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.DashInfo_swiginit(self, _ODA_Kernel_Py3.new_DashInfo(*args))

    def getLength(self, *args) -> "double":
        return _ODA_Kernel_Py3.DashInfo_getLength(self, *args)

    def setLength(self, *args) -> "void":
        return _ODA_Kernel_Py3.DashInfo_setLength(self, *args)

    def getStartWidth(self, *args) -> "double":
        return _ODA_Kernel_Py3.DashInfo_getStartWidth(self, *args)

    def setStartWidth(self, *args) -> "void":
        return _ODA_Kernel_Py3.DashInfo_setStartWidth(self, *args)

    def getEndWidth(self, *args) -> "double":
        return _ODA_Kernel_Py3.DashInfo_getEndWidth(self, *args)

    def setEndWidth(self, *args) -> "void":
        return _ODA_Kernel_Py3.DashInfo_setEndWidth(self, *args)

    def getDashFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DashInfo_getDashFlag(self, *args)

    def setDashFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.DashInfo_setDashFlag(self, *args)

    def getByPassCornerFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DashInfo_getByPassCornerFlag(self, *args)

    def setByPassCornerFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.DashInfo_setByPassCornerFlag(self, *args)

    def getCanBeScaledFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DashInfo_getCanBeScaledFlag(self, *args)

    def setCanBeScaledFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.DashInfo_setCanBeScaledFlag(self, *args)

    def getInvertStrokeInFirstCodeFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DashInfo_getInvertStrokeInFirstCodeFlag(self, *args)

    def setInvertStrokeInFirstCodeFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.DashInfo_setInvertStrokeInFirstCodeFlag(self, *args)

    def getInvertStrokeInLastCodeFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DashInfo_getInvertStrokeInLastCodeFlag(self, *args)

    def setInvertStrokeInLastCodeFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.DashInfo_setInvertStrokeInLastCodeFlag(self, *args)

    def getWidthMode(self, *args) -> "OdGiDgLinetypeDash::DashInfo::StrokeWidthMode":
        return _ODA_Kernel_Py3.DashInfo_getWidthMode(self, *args)

    def setWidthMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.DashInfo_setWidthMode(self, *args)

    def getIncreasingTaperFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DashInfo_getIncreasingTaperFlag(self, *args)

    def setIncreasingTaperFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.DashInfo_setIncreasingTaperFlag(self, *args)

    def getDecreasingTaperFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DashInfo_getDecreasingTaperFlag(self, *args)

    def setDecreasingTaperFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.DashInfo_setDecreasingTaperFlag(self, *args)

    def getBaseStrokeDashFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DashInfo_getBaseStrokeDashFlag(self, *args)

    def setBaseStrokeDashFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.DashInfo_setBaseStrokeDashFlag(self, *args)

    def isDashOrBaseStrokeDash(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DashInfo_isDashOrBaseStrokeDash(self, *args)

    def getCapsType(self, *args) -> "OdGiDgLinetypeDash::DashInfo::StrokeCapsType":
        return _ODA_Kernel_Py3.DashInfo_getCapsType(self, *args)

    def setCapsType(self, *args) -> "void":
        return _ODA_Kernel_Py3.DashInfo_setCapsType(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_DashInfo

# Register DashInfo in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.DashInfo_swigregister(DashInfo)

class ShapeInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kLsNoSymbol = _ODA_Kernel_Py3.ShapeInfo_kLsNoSymbol
    kLsAtOriginOfStroke = _ODA_Kernel_Py3.ShapeInfo_kLsAtOriginOfStroke
    kLsAtEndOfStroke = _ODA_Kernel_Py3.ShapeInfo_kLsAtEndOfStroke
    kLsAtCenterOfStroke = _ODA_Kernel_Py3.ShapeInfo_kLsAtCenterOfStroke
    kFlagSymbolAtElementOrigin = _ODA_Kernel_Py3.ShapeInfo_kFlagSymbolAtElementOrigin
    kFlagSymbolAtElementEnd = _ODA_Kernel_Py3.ShapeInfo_kFlagSymbolAtElementEnd
    kFlagSymbolAtEachVertex = _ODA_Kernel_Py3.ShapeInfo_kFlagSymbolAtEachVertex
    kFlagMirrorSymbolForReversedLines = _ODA_Kernel_Py3.ShapeInfo_kFlagMirrorSymbolForReversedLines
    kFlagAbsoluteRotationAngle = _ODA_Kernel_Py3.ShapeInfo_kFlagAbsoluteRotationAngle
    kFlagDoNotScaleElement = _ODA_Kernel_Py3.ShapeInfo_kFlagDoNotScaleElement
    kFlagDoNotClipElement = _ODA_Kernel_Py3.ShapeInfo_kFlagDoNotClipElement
    kFlagNoPartialStrokes = _ODA_Kernel_Py3.ShapeInfo_kFlagNoPartialStrokes
    kFlagPartialOriginBeyondEnd = _ODA_Kernel_Py3.ShapeInfo_kFlagPartialOriginBeyondEnd
    kFlagUseSymbolColor = _ODA_Kernel_Py3.ShapeInfo_kFlagUseSymbolColor
    kFlagUseSymbolWeight = _ODA_Kernel_Py3.ShapeInfo_kFlagUseSymbolWeight
    m_uFlags = property(_ODA_Kernel_Py3.ShapeInfo_m_uFlags_get, _ODA_Kernel_Py3.ShapeInfo_m_uFlags_set)
    m_pSymbol = property(_ODA_Kernel_Py3.ShapeInfo_m_pSymbol_get, _ODA_Kernel_Py3.ShapeInfo_m_pSymbol_set)
    m_lsPos = property(_ODA_Kernel_Py3.ShapeInfo_m_lsPos_get, _ODA_Kernel_Py3.ShapeInfo_m_lsPos_set)
    m_offset = property(_ODA_Kernel_Py3.ShapeInfo_m_offset_get, _ODA_Kernel_Py3.ShapeInfo_m_offset_set)
    m_dRotation = property(_ODA_Kernel_Py3.ShapeInfo_m_dRotation_get, _ODA_Kernel_Py3.ShapeInfo_m_dRotation_set)
    m_dScale = property(_ODA_Kernel_Py3.ShapeInfo_m_dScale_get, _ODA_Kernel_Py3.ShapeInfo_m_dScale_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.ShapeInfo_swiginit(self, _ODA_Kernel_Py3.new_ShapeInfo(*args))

    def getSymbolId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.ShapeInfo_getSymbolId(self, *args)

    def setSymbolId(self, *args) -> "void":
        return _ODA_Kernel_Py3.ShapeInfo_setSymbolId(self, *args)

    def getSymbolPosOnStroke(self, *args) -> "OdGiDgLinetypeDash::ShapeInfo::SymbolPosOnStroke":
        return _ODA_Kernel_Py3.ShapeInfo_getSymbolPosOnStroke(self, *args)

    def setSymbolPosOnStroke(self, *args) -> "void":
        return _ODA_Kernel_Py3.ShapeInfo_setSymbolPosOnStroke(self, *args)

    def getSymbolAtElementOriginFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ShapeInfo_getSymbolAtElementOriginFlag(self, *args)

    def setSymbolAtElementOriginFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.ShapeInfo_setSymbolAtElementOriginFlag(self, *args)

    def getSymbolAtElementEndFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ShapeInfo_getSymbolAtElementEndFlag(self, *args)

    def setSymbolAtElementEndFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.ShapeInfo_setSymbolAtElementEndFlag(self, *args)

    def getSymbolAtEachVertexFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ShapeInfo_getSymbolAtEachVertexFlag(self, *args)

    def setSymbolAtEachVertexFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.ShapeInfo_setSymbolAtEachVertexFlag(self, *args)

    def getMirrorSymbolForReversedLinesFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ShapeInfo_getMirrorSymbolForReversedLinesFlag(self, *args)

    def setMirrorSymbolForReversedLinesFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.ShapeInfo_setMirrorSymbolForReversedLinesFlag(self, *args)

    def getAbsoluteRotationAngleFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ShapeInfo_getAbsoluteRotationAngleFlag(self, *args)

    def setAbsoluteRotationAngleFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.ShapeInfo_setAbsoluteRotationAngleFlag(self, *args)

    def getDoNotScaleElementFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ShapeInfo_getDoNotScaleElementFlag(self, *args)

    def setDoNotScaleElementFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.ShapeInfo_setDoNotScaleElementFlag(self, *args)

    def getDoNotClipElementFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ShapeInfo_getDoNotClipElementFlag(self, *args)

    def setDoNotClipElementFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.ShapeInfo_setDoNotClipElementFlag(self, *args)

    def getNoPartialStrokesFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ShapeInfo_getNoPartialStrokesFlag(self, *args)

    def setNoPartialStrokesFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.ShapeInfo_setNoPartialStrokesFlag(self, *args)

    def getPartialOriginBeyondEndFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ShapeInfo_getPartialOriginBeyondEndFlag(self, *args)

    def setPartialOriginBeyondEndFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.ShapeInfo_setPartialOriginBeyondEndFlag(self, *args)

    def getUseSymbolColorFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ShapeInfo_getUseSymbolColorFlag(self, *args)

    def setUseSymbolColorFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.ShapeInfo_setUseSymbolColorFlag(self, *args)

    def getUseSymbolWeightFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ShapeInfo_getUseSymbolWeightFlag(self, *args)

    def setUseSymbolWeightFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.ShapeInfo_setUseSymbolWeightFlag(self, *args)

    def getOffset(self, *args) -> "void":
        return _ODA_Kernel_Py3.ShapeInfo_getOffset(self, *args)

    def setOffset(self, *args) -> "void":
        return _ODA_Kernel_Py3.ShapeInfo_setOffset(self, *args)

    def getRotationAngle(self, *args) -> "double":
        return _ODA_Kernel_Py3.ShapeInfo_getRotationAngle(self, *args)

    def setRotationAngle(self, *args) -> "void":
        return _ODA_Kernel_Py3.ShapeInfo_setRotationAngle(self, *args)

    def getSymbolScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.ShapeInfo_getSymbolScale(self, *args)

    def setSymbolScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.ShapeInfo_setSymbolScale(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_ShapeInfo

# Register ShapeInfo in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.ShapeInfo_swigregister(ShapeInfo)

class OdGiDgLinetypeItem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kFlagAutoPhase = _ODA_Kernel_Py3.OdGiDgLinetypeItem_kFlagAutoPhase
    kFlagUseIterationLimit = _ODA_Kernel_Py3.OdGiDgLinetypeItem_kFlagUseIterationLimit
    kFlagSingleSegmentMode = _ODA_Kernel_Py3.OdGiDgLinetypeItem_kFlagSingleSegmentMode
    kFlagCenterStretchPhaseMode = _ODA_Kernel_Py3.OdGiDgLinetypeItem_kFlagCenterStretchPhaseMode
    kFlagStandardLinetype = _ODA_Kernel_Py3.OdGiDgLinetypeItem_kFlagStandardLinetype
    kFlagComputeStandardScale = _ODA_Kernel_Py3.OdGiDgLinetypeItem_kFlagComputeStandardScale
    m_uFlags = property(_ODA_Kernel_Py3.OdGiDgLinetypeItem_m_uFlags_get, _ODA_Kernel_Py3.OdGiDgLinetypeItem_m_uFlags_set)
    m_dLength = property(_ODA_Kernel_Py3.OdGiDgLinetypeItem_m_dLength_get, _ODA_Kernel_Py3.OdGiDgLinetypeItem_m_dLength_set)
    m_dPhase = property(_ODA_Kernel_Py3.OdGiDgLinetypeItem_m_dPhase_get, _ODA_Kernel_Py3.OdGiDgLinetypeItem_m_dPhase_set)
    m_nMaxIterations = property(_ODA_Kernel_Py3.OdGiDgLinetypeItem_m_nMaxIterations_get, _ODA_Kernel_Py3.OdGiDgLinetypeItem_m_nMaxIterations_set)
    m_dOffset = property(_ODA_Kernel_Py3.OdGiDgLinetypeItem_m_dOffset_get, _ODA_Kernel_Py3.OdGiDgLinetypeItem_m_dOffset_set)
    m_dashes = property(_ODA_Kernel_Py3.OdGiDgLinetypeItem_m_dashes_get, _ODA_Kernel_Py3.OdGiDgLinetypeItem_m_dashes_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiDgLinetypeItem_swiginit(self, _ODA_Kernel_Py3.new_OdGiDgLinetypeItem(*args))

    def getLength(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_getLength(self, *args)

    def setLength(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_setLength(self, *args)

    def getPhase(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_getPhase(self, *args)

    def setPhase(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_setPhase(self, *args)

    def getAutoPhaseFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_getAutoPhaseFlag(self, *args)

    def setAutoPhaseFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_setAutoPhaseFlag(self, *args)

    def getUseIterationLimitFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_getUseIterationLimitFlag(self, *args)

    def setUseIterationLimitFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_setUseIterationLimitFlag(self, *args)

    def getSingleSegmentModeFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_getSingleSegmentModeFlag(self, *args)

    def setSingleSegmentModeFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_setSingleSegmentModeFlag(self, *args)

    def getCenterStretchPhaseModeFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_getCenterStretchPhaseModeFlag(self, *args)

    def setCenterStretchPhaseModeFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_setCenterStretchPhaseModeFlag(self, *args)

    def getStandardLinetypeFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_getStandardLinetypeFlag(self, *args)

    def setStandardLinetypeFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_setStandardLinetypeFlag(self, *args)

    def getComputeStandardScaleFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_getComputeStandardScaleFlag(self, *args)

    def setComputeStandardScaleFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_setComputeStandardScaleFlag(self, *args)

    def getMaxIterations(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_getMaxIterations(self, *args)

    def setMaxIterations(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_setMaxIterations(self, *args)

    def getYOffset(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_getYOffset(self, *args)

    def setYOffset(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_setYOffset(self, *args)

    def numDashes(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_numDashes(self, *args)

    def setNumDashes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_setNumDashes(self, *args)

    def dashAt(self, *args) -> "OdGiDgLinetypeDash const &":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_dashAt(self, *args)

    def setDashAt(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_setDashAt(self, *args)

    def dashes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_dashes(self, *args)

    def setDashes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeItem_setDashes(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDgLinetypeItem

# Register OdGiDgLinetypeItem in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDgLinetypeItem_swigregister(OdGiDgLinetypeItem)

class OdGiDgLinetype(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiDgLinetype_swiginit(self, _ODA_Kernel_Py3.new_OdGiDgLinetype(*args))

    def isContinuous(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetype_isContinuous(self, *args)

    def isByBlock(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetype_isByBlock(self, *args)

    def setByBlock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetype_setByBlock(self, *args)

    def isByLayer(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetype_isByLayer(self, *args)

    def setByLayer(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetype_setByLayer(self, *args)

    def patternLength(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiDgLinetype_patternLength(self, *args)

    def setPatternLength(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetype_setPatternLength(self, *args)

    def numItems(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiDgLinetype_numItems(self, *args)

    def setNumItems(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetype_setNumItems(self, *args)

    def itemAt(self, *args) -> "OdGiDgLinetypeItem const &":
        return _ODA_Kernel_Py3.OdGiDgLinetype_itemAt(self, *args)

    def setItemAt(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetype_setItemAt(self, *args)

    def items(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetype_items(self, *args)

    def setItems(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetype_setItems(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDgLinetype

# Register OdGiDgLinetype in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDgLinetype_swigregister(OdGiDgLinetype)

class OdGiDgLinetypeModifiers(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kFlagUseDashScale = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kFlagUseDashScale
    kFlagUseGapScale = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kFlagUseGapScale
    kFlagUseWidth = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kFlagUseWidth
    kFlagUseEndWidth = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kFlagUseEndWidth
    kFlagUseShift = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kFlagUseShift
    kFlagUseFractionShift = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kFlagUseFractionShift
    kFlagUseCenteredShift = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kFlagUseCenteredShift
    kFlagTrueWidth = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kFlagTrueWidth
    kFlagOverrideBreakAtCorners = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kFlagOverrideBreakAtCorners
    kFlagOverrideRunThroughCorners = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kFlagOverrideRunThroughCorners
    kFlagsWidthMask = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kFlagsWidthMask
    kFlagsShiftMask = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kFlagsShiftMask
    kFlagsCornersMask = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kFlagsCornersMask
    kLsNoWidth = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kLsNoWidth
    kLsWidthConstant = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kLsWidthConstant
    kLsWidthTapered = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kLsWidthTapered
    kLsNoShift = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kLsNoShift
    kLsShiftDistance = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kLsShiftDistance
    kLsShiftFraction = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kLsShiftFraction
    kLsShiftCentered = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kLsShiftCentered
    kLsCornersFromLS = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kLsCornersFromLS
    kLsBreakAtCorners = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kLsBreakAtCorners
    kLsRunThroughCorners = _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_kLsRunThroughCorners
    m_uFlags = property(_ODA_Kernel_Py3.OdGiDgLinetypeModifiers_m_uFlags_get, _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_m_uFlags_set)
    m_dDashScale = property(_ODA_Kernel_Py3.OdGiDgLinetypeModifiers_m_dDashScale_get, _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_m_dDashScale_set)
    m_dGapScale = property(_ODA_Kernel_Py3.OdGiDgLinetypeModifiers_m_dGapScale_get, _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_m_dGapScale_set)
    m_dWidth = property(_ODA_Kernel_Py3.OdGiDgLinetypeModifiers_m_dWidth_get, _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_m_dWidth_set)
    m_dEndWidth = property(_ODA_Kernel_Py3.OdGiDgLinetypeModifiers_m_dEndWidth_get, _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_m_dEndWidth_set)
    m_dPhase = property(_ODA_Kernel_Py3.OdGiDgLinetypeModifiers_m_dPhase_get, _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_m_dPhase_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_swiginit(self, _ODA_Kernel_Py3.new_OdGiDgLinetypeModifiers(*args))

    def getDashScaleFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_getDashScaleFlag(self, *args)

    def setDashScaleFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_setDashScaleFlag(self, *args)

    def getDashScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_getDashScale(self, *args)

    def setDashScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_setDashScale(self, *args)

    def getGapScaleFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_getGapScaleFlag(self, *args)

    def setGapScaleFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_setGapScaleFlag(self, *args)

    def getGapScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_getGapScale(self, *args)

    def setGapScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_setGapScale(self, *args)

    def getWidthFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_getWidthFlag(self, *args)

    def setWidthFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_setWidthFlag(self, *args)

    def getWidth(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_getWidth(self, *args)

    def setWidth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_setWidth(self, *args)

    def getEndWidthFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_getEndWidthFlag(self, *args)

    def setEndWidthFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_setEndWidthFlag(self, *args)

    def getEndWidth(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_getEndWidth(self, *args)

    def setEndWidth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_setEndWidth(self, *args)

    def getWidthMode(self, *args) -> "OdGiDgLinetypeModifiers::WidthMode":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_getWidthMode(self, *args)

    def setWidthMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_setWidthMode(self, *args)

    def getShiftFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_getShiftFlag(self, *args)

    def setShiftFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_setShiftFlag(self, *args)

    def getFractionShiftFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_getFractionShiftFlag(self, *args)

    def setFractionShiftFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_setFractionShiftFlag(self, *args)

    def getCenteredShiftFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_getCenteredShiftFlag(self, *args)

    def setCenteredShiftFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_setCenteredShiftFlag(self, *args)

    def getPhase(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_getPhase(self, *args)

    def setPhase(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_setPhase(self, *args)

    def getShiftMode(self, *args) -> "OdGiDgLinetypeModifiers::ShiftMode":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_getShiftMode(self, *args)

    def setShiftMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_setShiftMode(self, *args)

    def getTrueWidthFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_getTrueWidthFlag(self, *args)

    def setTrueWidthFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_setTrueWidthFlag(self, *args)

    def getBreakAtCornersFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_getBreakAtCornersFlag(self, *args)

    def setBreakAtCornersFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_setBreakAtCornersFlag(self, *args)

    def getRunThroughCornersFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_getRunThroughCornersFlag(self, *args)

    def setRunThroughCornersFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_setRunThroughCornersFlag(self, *args)

    def getCornersMode(self, *args) -> "OdGiDgLinetypeModifiers::CornersMode":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_getCornersMode(self, *args)

    def setCornersMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers_setCornersMode(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDgLinetypeModifiers___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDgLinetypeModifiers

# Register OdGiDgLinetypeModifiers in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDgLinetypeModifiers_swigregister(OdGiDgLinetypeModifiers)

class OdGiDgLinetypeTraits(OdGiDrawableTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiDgLinetypeTraits >":
        return _ODA_Kernel_Py3.OdGiDgLinetypeTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiDgLinetypeTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiDgLinetypeTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiDgLinetypeTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiDgLinetypeTraits >":
        return _ODA_Kernel_Py3.OdGiDgLinetypeTraits_createObject(*args)

    def items(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeTraits_items(self, *args)

    def setItems(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeTraits_setItems(self, *args)

    def patternLength(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiDgLinetypeTraits_patternLength(self, *args)

    def setPatternLength(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeTraits_setPatternLength(self, *args)

    def scale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiDgLinetypeTraits_scale(self, *args)

    def setScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDgLinetypeTraits_setScale(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDgLinetypeTraits

# Register OdGiDgLinetypeTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDgLinetypeTraits_swigregister(OdGiDgLinetypeTraits)

def OdGiDgLinetypeTraits_cast(*args) -> "OdSmartPtr< OdGiDgLinetypeTraits >":
    return _ODA_Kernel_Py3.OdGiDgLinetypeTraits_cast(*args)

def OdGiDgLinetypeTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiDgLinetypeTraits_desc(*args)

def OdGiDgLinetypeTraits_createObject(*args) -> "OdSmartPtr< OdGiDgLinetypeTraits >":
    return _ODA_Kernel_Py3.OdGiDgLinetypeTraits_createObject(*args)

class OdGePlane(OdGePlanarEnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGePlane_swiginit(self, _ODA_Kernel_Py3.new_OdGePlane(*args))

    def intersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePlane_intersectWith(self, *args)

    def signedDistanceTo(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGePlane_signedDistanceTo(self, *args)

    def set(self, *args) -> "OdGePlane &":
        return _ODA_Kernel_Py3.OdGePlane_set(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGePlane

# Register OdGePlane in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGePlane_swigregister(OdGePlane)
OdGePlane.kXYPlane = _ODA_Kernel_Py3.cvar.OdGePlane_kXYPlane
OdGePlane.kYZPlane = _ODA_Kernel_Py3.cvar.OdGePlane_kYZPlane
OdGePlane.kZXPlane = _ODA_Kernel_Py3.cvar.OdGePlane_kZXPlane

class OdGiConveyorConnector(OdGiConveyorInput, OdGiConveyorOutput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiConveyorConnector_swiginit(self, _ODA_Kernel_Py3.new_OdGiConveyorConnector(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiConveyorConnector

    def addSourceNode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorConnector_addSourceNode(self, *args)

    def removeSourceNode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorConnector_removeSourceNode(self, *args)

    def setDestGeometry(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorConnector_setDestGeometry(self, *args)

    def destGeometry(self, *args) -> "OdGiConveyorGeometry &":
        return _ODA_Kernel_Py3.OdGiConveyorConnector_destGeometry(self, *args)

    def geometry(self, *args) -> "OdGiConveyorGeometry &":
        return _ODA_Kernel_Py3.OdGiConveyorConnector_geometry(self, *args)

# Register OdGiConveyorConnector in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiConveyorConnector_swigregister(OdGiConveyorConnector)

class OdGiConveyorEntryPoint(OdGiConveyorOutput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiConveyorEntryPoint_swiginit(self, _ODA_Kernel_Py3.new_OdGiConveyorEntryPoint(*args))

    def geometry(self, *args) -> "OdGiConveyorGeometry &":
        return _ODA_Kernel_Py3.OdGiConveyorEntryPoint_geometry(self, *args)

    def setDestGeometry(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorEntryPoint_setDestGeometry(self, *args)

    def destGeometry(self, *args) -> "OdGiConveyorGeometry &":
        return _ODA_Kernel_Py3.OdGiConveyorEntryPoint_destGeometry(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiConveyorEntryPoint

# Register OdGiConveyorEntryPoint in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiConveyorEntryPoint_swigregister(OdGiConveyorEntryPoint)

class OdGiModelToViewProc(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiModelToViewProc >":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiModelToViewProc >":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_createObject(*args)

    def setDrawContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_setDrawContext(self, *args)

    def modelInput(self, *args) -> "OdGiConveyorInput &":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_modelInput(self, *args)

    def eyeInput(self, *args) -> "OdGiConveyorInput &":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_eyeInput(self, *args)

    def output(self, *args) -> "OdGiConveyorOutput &":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_output(self, *args)

    def setEyeToOutputTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_setEyeToOutputTransform(self, *args)

    def eyeToOutputTransform(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_eyeToOutputTransform(self, *args)

    def setView(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_setView(self, *args)

    def setWorldToEyeTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_setWorldToEyeTransform(self, *args)

    def worldToEyeTransform(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_worldToEyeTransform(self, *args)

    def eyeToWorldTransform(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_eyeToWorldTransform(self, *args)

    def modelToEyeTransform(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_modelToEyeTransform(self, *args)

    def eyeToModelTransform(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_eyeToModelTransform(self, *args)

    def pushModelTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_pushModelTransform(self, *args)

    def popModelTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_popModelTransform(self, *args)

    def isEmptyModelMatrixStack(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_isEmptyModelMatrixStack(self, *args)

    def modelToWorldTransform(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_modelToWorldTransform(self, *args)

    def worldToModelTransform(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_worldToModelTransform(self, *args)

    def getModelToEyeXform(self, *args) -> "OdGiXform const *":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_getModelToEyeXform(self, *args)

    def getEyeToModelXform(self, *args) -> "OdGiXform const *":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_getEyeToModelXform(self, *args)

    def pushClipBoundary(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_pushClipBoundary(self, *args)

    def popClipBoundary(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_popClipBoundary(self, *args)

    def isClipping(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_isClipping(self, *args)

    def isEmptyClipSet(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_isEmptyClipSet(self, *args)

    def initGeometryClipStatus(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_initGeometryClipStatus(self, *args)

    def getGeometryClipStatus(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_getGeometryClipStatus(self, *args)

    def setWorldDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_setWorldDeviation(self, *args)

    def worldDeviation(self, *args) -> "OdGiDeviation const &":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_worldDeviation(self, *args)

    def modelDeviation(self, *args) -> "OdGiDeviation const &":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_modelDeviation(self, *args)

    def eyeDeviation(self, *args) -> "OdGiDeviation const &":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_eyeDeviation(self, *args)
    kClipInEyeSpace = _ODA_Kernel_Py3.OdGiModelToViewProc_kClipInEyeSpace
    kClipInWorldSpace = _ODA_Kernel_Py3.OdGiModelToViewProc_kClipInWorldSpace
    kClipInOutputSpace = _ODA_Kernel_Py3.OdGiModelToViewProc_kClipInOutputSpace

    def setClippingSpace(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_setClippingSpace(self, *args)

    def currentClippingSpace(self, *args) -> "OdGiModelToViewProc::ClippingCS":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_currentClippingSpace(self, *args)

    def enableAnalyticCurvesClipping(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_enableAnalyticCurvesClipping(self, *args)

    def isAnalyticCurvesClippingEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_isAnalyticCurvesClippingEnabled(self, *args)

    def enableClippingDebugLog(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_enableClippingDebugLog(self, *args)

    def disableClippingDebugLog(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_disableClippingDebugLog(self, *args)

    def isClippingDebugLogEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_isClippingDebugLogEnabled(self, *args)

    def switchSectioning(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_switchSectioning(self, *args)

    def isSectioningEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiModelToViewProc_isSectioningEnabled(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiModelToViewProc

# Register OdGiModelToViewProc in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiModelToViewProc_swigregister(OdGiModelToViewProc)

def OdGiModelToViewProc_cast(*args) -> "OdSmartPtr< OdGiModelToViewProc >":
    return _ODA_Kernel_Py3.OdGiModelToViewProc_cast(*args)

def OdGiModelToViewProc_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiModelToViewProc_desc(*args)

def OdGiModelToViewProc_createObject(*args) -> "OdSmartPtr< OdGiModelToViewProc >":
    return _ODA_Kernel_Py3.OdGiModelToViewProc_createObject(*args)

class OdGiModelSection(OdGiConveyorNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiModelSection >":
        return _ODA_Kernel_Py3.OdGiModelSection_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiModelSection_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiModelSection_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiModelSection_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiModelSection >":
        return _ODA_Kernel_Py3.OdGiModelSection_createObject(*args)

    def setDrawContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiModelSection_setDrawContext(self, *args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiModelSection_set(self, *args)

    def setModelToWorld(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiModelSection_setModelToWorld(self, *args)

    def enabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiModelSection_enabled(self, *args)

    def setEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiModelSection_setEnabled(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiModelSection

# Register OdGiModelSection in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiModelSection_swigregister(OdGiModelSection)

def OdGiModelSection_cast(*args) -> "OdSmartPtr< OdGiModelSection >":
    return _ODA_Kernel_Py3.OdGiModelSection_cast(*args)

def OdGiModelSection_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiModelSection_desc(*args)

def OdGiModelSection_createObject(*args) -> "OdSmartPtr< OdGiModelSection >":
    return _ODA_Kernel_Py3.OdGiModelSection_createObject(*args)

class OdGiXform(OdGiConveyorNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiXform >":
        return _ODA_Kernel_Py3.OdGiXform_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiXform_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiXform_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiXform_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiXform >":
        return _ODA_Kernel_Py3.OdGiXform_createObject(*args)

    def setTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiXform_setTransform(self, *args)

    def transform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiXform_transform(self, *args)

    def setOutput2dPoints(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiXform_setOutput2dPoints(self, *args)

    def output2dPoints(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiXform_output2dPoints(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiXform

# Register OdGiXform in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiXform_swigregister(OdGiXform)

def OdGiXform_cast(*args) -> "OdSmartPtr< OdGiXform >":
    return _ODA_Kernel_Py3.OdGiXform_cast(*args)

def OdGiXform_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiXform_desc(*args)

def OdGiXform_createObject(*args) -> "OdSmartPtr< OdGiXform >":
    return _ODA_Kernel_Py3.OdGiXform_createObject(*args)

class OdGiXformOptimizer(OdGiConveyorNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiXformOptimizer >":
        return _ODA_Kernel_Py3.OdGiXformOptimizer_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiXformOptimizer_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiXformOptimizer_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiXformOptimizer_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiXformOptimizer >":
        return _ODA_Kernel_Py3.OdGiXformOptimizer_createObject(*args)

    def setTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiXformOptimizer_setTransform(self, *args)

    def transform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiXformOptimizer_transform(self, *args)

    def sync(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiXformOptimizer_sync(self, *args)

    def redirectionGeometry(self, *args) -> "OdGiConveyorGeometry *":
        return _ODA_Kernel_Py3.OdGiXformOptimizer_redirectionGeometry(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiXformOptimizer

# Register OdGiXformOptimizer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiXformOptimizer_swigregister(OdGiXformOptimizer)

def OdGiXformOptimizer_cast(*args) -> "OdSmartPtr< OdGiXformOptimizer >":
    return _ODA_Kernel_Py3.OdGiXformOptimizer_cast(*args)

def OdGiXformOptimizer_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiXformOptimizer_desc(*args)

def OdGiXformOptimizer_createObject(*args) -> "OdSmartPtr< OdGiXformOptimizer >":
    return _ODA_Kernel_Py3.OdGiXformOptimizer_createObject(*args)

class OdGiTranslationXform(OdGiXformOptimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiTranslationXform >":
        return _ODA_Kernel_Py3.OdGiTranslationXform_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiTranslationXform_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiTranslationXform_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiTranslationXform_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiTranslationXform >":
        return _ODA_Kernel_Py3.OdGiTranslationXform_createObject(*args)

    def translationAsVector(self, *args) -> "OdGeVector3d const &":
        return _ODA_Kernel_Py3.OdGiTranslationXform_translationAsVector(self, *args)

    def setTranslation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTranslationXform_setTranslation(self, *args)

    def translationAsPoint(self, *args) -> "OdGePoint3d const &":
        return _ODA_Kernel_Py3.OdGiTranslationXform_translationAsPoint(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiTranslationXform

# Register OdGiTranslationXform in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiTranslationXform_swigregister(OdGiTranslationXform)

def OdGiTranslationXform_cast(*args) -> "OdSmartPtr< OdGiTranslationXform >":
    return _ODA_Kernel_Py3.OdGiTranslationXform_cast(*args)

def OdGiTranslationXform_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiTranslationXform_desc(*args)

def OdGiTranslationXform_createObject(*args) -> "OdSmartPtr< OdGiTranslationXform >":
    return _ODA_Kernel_Py3.OdGiTranslationXform_createObject(*args)

class OdBrMeshControl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrMeshControl

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrMeshControl_isEqualTo(self, *args)

    def setMaxSubdivisions(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMeshControl_setMaxSubdivisions(self, *args)

    def getMaxSubdivisions(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMeshControl_getMaxSubdivisions(self, *args)

    def setMaxNodeSpacing(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMeshControl_setMaxNodeSpacing(self, *args)

    def getMaxNodeSpacing(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMeshControl_getMaxNodeSpacing(self, *args)

    def setAngTol(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMeshControl_setAngTol(self, *args)

    def getAngTol(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMeshControl_getAngTol(self, *args)

    def setDistTol(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMeshControl_setDistTol(self, *args)

    def getDistTol(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMeshControl_getDistTol(self, *args)

# Register OdBrMeshControl in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrMeshControl_swigregister(OdBrMeshControl)

class OdBrEntity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isNull(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrEntity_isNull(self, *args)

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrEntity_isEqualTo(self, *args)

    def getBrep(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrEntity_getBrep(self, *args)

    def checkEntity(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrEntity_checkEntity(self, *args)

    def getSubentPath(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrEntity_getSubentPath(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrEntity

    def setSubentPath(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrEntity_setSubentPath(self, *args)

    def getPointContainment(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrEntity_getPointContainment(self, *args)

    def getLineContainment(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrEntity_getLineContainment(self, *args)

    def getBoundBlock(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrEntity_getBoundBlock(self, *args)

    def setValidationLevel(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrEntity_setValidationLevel(self, *args)

    def getValidationLevel(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrEntity_getValidationLevel(self, *args)

    def getFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdBrEntity_getFlags(self, *args)

    def getGsMarker(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrEntity_getGsMarker(self, *args)

    def getMassProps(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrEntity_getMassProps(self, *args)

    def getVolume(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrEntity_getVolume(self, *args)

    def getSurfaceArea(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrEntity_getSurfaceArea(self, *args)

    def getPerimeterLength(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrEntity_getPerimeterLength(self, *args)

    def getUniqueId(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdBrEntity_getUniqueId(self, *args)
    dUnspecified = property(_ODA_Kernel_Py3.OdBrEntity_dUnspecified_get, _ODA_Kernel_Py3.OdBrEntity_dUnspecified_set)

# Register OdBrEntity in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrEntity_swigregister(OdBrEntity)

class OdGsFiler(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsFiler >":
        return _ODA_Kernel_Py3.OdGsFiler_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsFiler_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsFiler_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsFiler_queryX(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsFiler
    kEOFSection = _ODA_Kernel_Py3.OdGsFiler_kEOFSection
    kHeaderSection = _ODA_Kernel_Py3.OdGsFiler_kHeaderSection
    kDatabaseLinkSection = _ODA_Kernel_Py3.OdGsFiler_kDatabaseLinkSection
    kGsModuleSection = _ODA_Kernel_Py3.OdGsFiler_kGsModuleSection
    kDeviceSection = _ODA_Kernel_Py3.OdGsFiler_kDeviceSection
    kClientDeviceSection = _ODA_Kernel_Py3.OdGsFiler_kClientDeviceSection
    kViewSection = _ODA_Kernel_Py3.OdGsFiler_kViewSection
    kClientViewSection = _ODA_Kernel_Py3.OdGsFiler_kClientViewSection
    kModelSection = _ODA_Kernel_Py3.OdGsFiler_kModelSection
    kClientModelSection = _ODA_Kernel_Py3.OdGsFiler_kClientModelSection
    kNodeSection = _ODA_Kernel_Py3.OdGsFiler_kNodeSection
    kClientNodeSection = _ODA_Kernel_Py3.OdGsFiler_kClientNodeSection
    kMetafileSection = _ODA_Kernel_Py3.OdGsFiler_kMetafileSection
    kClientMetafileSection = _ODA_Kernel_Py3.OdGsFiler_kClientMetafileSection
    kClientMaterialSection = _ODA_Kernel_Py3.OdGsFiler_kClientMaterialSection
    kBlockRefImplSection = _ODA_Kernel_Py3.OdGsFiler_kBlockRefImplSection
    kLinkedDeviceSection = _ODA_Kernel_Py3.OdGsFiler_kLinkedDeviceSection
    kRenditionSection = _ODA_Kernel_Py3.OdGsFiler_kRenditionSection
    kRuntimeChangesSection = _ODA_Kernel_Py3.OdGsFiler_kRuntimeChangesSection
    kV1 = _ODA_Kernel_Py3.OdGsFiler_kV1
    kV2 = _ODA_Kernel_Py3.OdGsFiler_kV2
    kVLast = _ODA_Kernel_Py3.OdGsFiler_kVLast

    def setStream(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsFiler_setStream(self, *args)

    def getStream(self, *args) -> "OdStreamBufPtr":
        return _ODA_Kernel_Py3.OdGsFiler_getStream(self, *args)

    def setDatabase(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_setDatabase(self, *args)

    def getDatabase(self, *args) -> "OdDbBaseDatabase *":
        return _ODA_Kernel_Py3.OdGsFiler_getDatabase(self, *args)

    def setVersion(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_setVersion(self, *args)

    def version(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsFiler_version(self, *args)

    def wrDbHash(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrDbHash(self, *args)

    def checkDbHash(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsFiler_checkDbHash(self, *args)

    def setWriteSections(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_setWriteSections(self, *args)

    def setWriteSection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_setWriteSection(self, *args)

    def isWriteSection(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsFiler_isWriteSection(self, *args)

    def setReadSections(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_setReadSections(self, *args)

    def setReadSection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_setReadSection(self, *args)

    def isReadSection(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsFiler_isReadSection(self, *args)

    def wrSectionBegin(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrSectionBegin(self, *args)

    def wrSectionEnd(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrSectionEnd(self, *args)

    def wrEOFSection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrEOFSection(self, *args)

    def rdSection(self, *args) -> "OdGsFiler::Section":
        return _ODA_Kernel_Py3.OdGsFiler_rdSection(self, *args)

    def curSection(self, *args) -> "OdGsFiler::Section":
        return _ODA_Kernel_Py3.OdGsFiler_curSection(self, *args)

    def skipSection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_skipSection(self, *args)

    def rdBackSection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdBackSection(self, *args)

    def checkEOF(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsFiler_checkEOF(self, *args)

    def subst(self, *args) -> "OdGsFiler::Substitutor *":
        return _ODA_Kernel_Py3.OdGsFiler_subst(self, *args)

    def makeSubstitutions(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_makeSubstitutions(self, *args)

    def getSubstitutor(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGsFiler_getSubstitutor(self, *args)

    def setSubstitutor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_setSubstitutor(self, *args)

    def setArbitraryData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_setArbitraryData(self, *args)

    def getArbitraryData(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGsFiler_getArbitraryData(self, *args)

    def hasArbitraryData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsFiler_hasArbitraryData(self, *args)

    def clearArbitraryData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_clearArbitraryData(self, *args)

    def registerPtr(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_registerPtr(self, *args)

    def unregisterPtr(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_unregisterPtr(self, *args)

    def isPtrRegistered(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsFiler_isPtrRegistered(self, *args)

    def clearRegisteredPtrs(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_clearRegisteredPtrs(self, *args)

    def wrHandle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrHandle(self, *args)

    def rdHandle(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGsFiler_rdHandle(self, *args)

    def wrClass(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrClass(self, *args)

    def rdClass(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGsFiler_rdClass(self, *args)

    def wrRawData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrRawData(self, *args)

    def rdRawData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdRawData(self, *args)

    def wrBool(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrBool(self, *args)

    def rdBool(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsFiler_rdBool(self, *args)

    def wrInt(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrInt(self, *args)

    def rdInt(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGsFiler_rdInt(self, *args)

    def wrUInt(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrUInt(self, *args)

    def rdUInt(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdGsFiler_rdUInt(self, *args)

    def wrChar(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrChar(self, *args)

    def rdChar(self, *args) -> "char":
        return _ODA_Kernel_Py3.OdGsFiler_rdChar(self, *args)

    def wrUInt8(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrUInt8(self, *args)

    def rdUInt8(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdGsFiler_rdUInt8(self, *args)

    def wrInt16(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrInt16(self, *args)

    def rdInt16(self, *args) -> "OdInt16":
        return _ODA_Kernel_Py3.OdGsFiler_rdInt16(self, *args)

    def wrUInt16(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrUInt16(self, *args)

    def rdUInt16(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdGsFiler_rdUInt16(self, *args)

    def wrInt32(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrInt32(self, *args)

    def rdInt32(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGsFiler_rdInt32(self, *args)

    def wrUInt32(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrUInt32(self, *args)

    def rdUInt32(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsFiler_rdUInt32(self, *args)

    def wrInt64(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrInt64(self, *args)

    def rdInt64(self, *args) -> "OdInt64":
        return _ODA_Kernel_Py3.OdGsFiler_rdInt64(self, *args)

    def wrUInt64(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrUInt64(self, *args)

    def rdUInt64(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdGsFiler_rdUInt64(self, *args)

    def wrIntPtr(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrIntPtr(self, *args)

    def rdIntPtr(self, *args) -> "OdIntPtr":
        return _ODA_Kernel_Py3.OdGsFiler_rdIntPtr(self, *args)

    def wrPtr(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrPtr(self, *args)

    def rdPtr(self, *args) -> "void *":
        return _ODA_Kernel_Py3.OdGsFiler_rdPtr(self, *args)

    def wrCOLORREF(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrCOLORREF(self, *args)

    def rdCOLORREF(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGsFiler_rdCOLORREF(self, *args)

    def wrFloat(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrFloat(self, *args)

    def rdFloat(self, *args) -> "float":
        return _ODA_Kernel_Py3.OdGsFiler_rdFloat(self, *args)

    def wrDouble(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrDouble(self, *args)

    def rdDouble(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsFiler_rdDouble(self, *args)

    def wrPoint2d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrPoint2d(self, *args)

    def rdPoint2d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdPoint2d(self, *args)

    def wrVector2d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrVector2d(self, *args)

    def rdVector2d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdVector2d(self, *args)

    def wrPoint3d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrPoint3d(self, *args)

    def rdPoint3d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdPoint3d(self, *args)

    def wrVector3d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrVector3d(self, *args)

    def rdVector3d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdVector3d(self, *args)

    def wrMatrix3d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrMatrix3d(self, *args)

    def rdMatrix3d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdMatrix3d(self, *args)

    def wrExtents3d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrExtents3d(self, *args)

    def rdExtents3d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdExtents3d(self, *args)

    def wrAnsiString(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrAnsiString(self, *args)

    def rdAnsiString(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdAnsiString(self, *args)

    def rdAnsiStringRet(self, *args) -> "OdAnsiString":
        return _ODA_Kernel_Py3.OdGsFiler_rdAnsiStringRet(self, *args)

    def wrString(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrString(self, *args)

    def rdString(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdString(self, *args)

    def rdStringRet(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdGsFiler_rdStringRet(self, *args)

    def wrUInt8Array(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrUInt8Array(self, *args)

    def wrUInt16Array(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrUInt16Array(self, *args)

    def wrUInt32Array(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrUInt32Array(self, *args)

    def wrUInt64Array(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrUInt64Array(self, *args)

    def wrIntArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrIntArray(self, *args)

    def wrFloatArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrFloatArray(self, *args)

    def wrPoint2dArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrPoint2dArray(self, *args)

    def wrPoint3dArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrPoint3dArray(self, *args)

    def wrDbStubPtrArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrDbStubPtrArray(self, *args)

    def wrGsDCRect(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrGsDCRect(self, *args)

    def wrGsDCRectDouble(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_wrGsDCRectDouble(self, *args)

    def rdUInt8Array(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdUInt8Array(self, *args)

    def rdUInt16Array(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdUInt16Array(self, *args)

    def rdUInt32Array(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdUInt32Array(self, *args)

    def rdUInt64Array(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdUInt64Array(self, *args)

    def rdIntArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdIntArray(self, *args)

    def rdFloatArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdFloatArray(self, *args)

    def rdPoint2dArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdPoint2dArray(self, *args)

    def rdPoint3dArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdPoint3dArray(self, *args)

    def rdDbStubPtrArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdDbStubPtrArray(self, *args)

    def rdGsDCRect(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdGsDCRect(self, *args)

    def rdGsDCRectDouble(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsFiler_rdGsDCRectDouble(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsFiler >":
        return _ODA_Kernel_Py3.OdGsFiler_createObject(*args)

# Register OdGsFiler in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsFiler_swigregister(OdGsFiler)

def OdGsFiler_cast(*args) -> "OdSmartPtr< OdGsFiler >":
    return _ODA_Kernel_Py3.OdGsFiler_cast(*args)

def OdGsFiler_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsFiler_desc(*args)

def OdGsFiler_createObject(*args) -> "OdSmartPtr< OdGsFiler >":
    return _ODA_Kernel_Py3.OdGsFiler_createObject(*args)

class SubstitutionActuator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.SubstitutionActuator_swiginit(self, _ODA_Kernel_Py3.new_SubstitutionActuator(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_SubstitutionActuator

    def applySubstitution(self, *args) -> "void":
        return _ODA_Kernel_Py3.SubstitutionActuator_applySubstitution(self, *args)

# Register SubstitutionActuator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.SubstitutionActuator_swigregister(SubstitutionActuator)

class Substitutor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def registerSubstitution(self, *args) -> "void":
        return _ODA_Kernel_Py3.Substitutor_registerSubstitution(self, *args)

    def requestSubstitution(self, *args) -> "void":
        return _ODA_Kernel_Py3.Substitutor_requestSubstitution(self, *args)

    def clearSubstitutions(self, *args) -> "void":
        return _ODA_Kernel_Py3.Substitutor_clearSubstitutions(self, *args)

    def runSubstitutions(self, *args) -> "void":
        return _ODA_Kernel_Py3.Substitutor_runSubstitutions(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_Substitutor

# Register Substitutor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.Substitutor_swigregister(Substitutor)

class OdGsFilerCreatorPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsFilerCreatorPE >":
        return _ODA_Kernel_Py3.OdGsFilerCreatorPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsFilerCreatorPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsFilerCreatorPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsFilerCreatorPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsFilerCreatorPE >":
        return _ODA_Kernel_Py3.OdGsFilerCreatorPE_createObject(*args)

    def createGsFiler(self, *args) -> "OdGsFilerPtr":
        return _ODA_Kernel_Py3.OdGsFilerCreatorPE_createGsFiler(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsFilerCreatorPE

# Register OdGsFilerCreatorPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsFilerCreatorPE_swigregister(OdGsFilerCreatorPE)

def OdGsFilerCreatorPE_cast(*args) -> "OdSmartPtr< OdGsFilerCreatorPE >":
    return _ODA_Kernel_Py3.OdGsFilerCreatorPE_cast(*args)

def OdGsFilerCreatorPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsFilerCreatorPE_desc(*args)

def OdGsFilerCreatorPE_createObject(*args) -> "OdSmartPtr< OdGsFilerCreatorPE >":
    return _ODA_Kernel_Py3.OdGsFilerCreatorPE_createObject(*args)

class OdGsFilerDbHashPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsFilerDbHashPE >":
        return _ODA_Kernel_Py3.OdGsFilerDbHashPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsFilerDbHashPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsFilerDbHashPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsFilerDbHashPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsFilerDbHashPE >":
        return _ODA_Kernel_Py3.OdGsFilerDbHashPE_createObject(*args)

    def computeDbHash(self, *args) -> "OdBinaryData":
        return _ODA_Kernel_Py3.OdGsFilerDbHashPE_computeDbHash(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsFilerDbHashPE

# Register OdGsFilerDbHashPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsFilerDbHashPE_swigregister(OdGsFilerDbHashPE)

def OdGsFilerDbHashPE_cast(*args) -> "OdSmartPtr< OdGsFilerDbHashPE >":
    return _ODA_Kernel_Py3.OdGsFilerDbHashPE_cast(*args)

def OdGsFilerDbHashPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsFilerDbHashPE_desc(*args)

def OdGsFilerDbHashPE_createObject(*args) -> "OdSmartPtr< OdGsFilerDbHashPE >":
    return _ODA_Kernel_Py3.OdGsFilerDbHashPE_createObject(*args)

class IAllocator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def alloc(self, *args) -> "void *":
        return _ODA_Kernel_Py3.IAllocator_alloc(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_IAllocator

# Register IAllocator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.IAllocator_swigregister(IAllocator)

class AllocatorArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.AllocatorArray_swiginit(self, _ODA_Kernel_Py3.new_AllocatorArray(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_AllocatorArray

    def size(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.AllocatorArray_size(self, *args)

    def getAt(self, *args) -> "IAllocator *":
        return _ODA_Kernel_Py3.AllocatorArray_getAt(self, *args)

# Register AllocatorArray in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.AllocatorArray_swigregister(AllocatorArray)


def addLocalHeaps(*args) -> "void":
    return _ODA_Kernel_Py3.addLocalHeaps(*args)

def releaseLocalHeaps(*args) -> "void":
    return _ODA_Kernel_Py3.releaseLocalHeaps(*args)
class AllocatorArrayML(AllocatorArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.AllocatorArrayML_swiginit(self, _ODA_Kernel_Py3.new_AllocatorArrayML(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_AllocatorArrayML

    def reset(self, *args) -> "void":
        return _ODA_Kernel_Py3.AllocatorArrayML_reset(self, *args)

    def uninit(self, *args) -> "void":
        return _ODA_Kernel_Py3.AllocatorArrayML_uninit(self, *args)

# Register AllocatorArrayML in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.AllocatorArrayML_swigregister(AllocatorArrayML)

kBlockNode = _ODA_Kernel_Py3.kBlockNode
kContainerNode = _ODA_Kernel_Py3.kContainerNode
kLayerNode = _ODA_Kernel_Py3.kLayerNode
kEntityNode = _ODA_Kernel_Py3.kEntityNode
kMaterialNode = _ODA_Kernel_Py3.kMaterialNode
kLastNodeType = _ODA_Kernel_Py3.kLastNodeType
kLightNode = _ODA_Kernel_Py3.kLightNode
kBlockReferenceNode = _ODA_Kernel_Py3.kBlockReferenceNode
kMInsertBlockNode = _ODA_Kernel_Py3.kMInsertBlockNode
class OdGsBaseModel(OdGsModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def invalidateEntRect(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_invalidateEntRect(self, *args)
    m_nMfCached = property(_ODA_Kernel_Py3.OdGsBaseModel_m_nMfCached_get, _ODA_Kernel_Py3.OdGsBaseModel_m_nMfCached_set)
    m_nMfReused = property(_ODA_Kernel_Py3.OdGsBaseModel_m_nMfReused_get, _ODA_Kernel_Py3.OdGsBaseModel_m_nMfReused_set)

    def checkFaded(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_checkFaded(self, *args)

    def setCheckFaded(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_setCheckFaded(self, *args)

    def setVectorizing(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_setVectorizing(self, *args)

    def resetVectorizing(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_resetVectorizing(self, *args)

    def disableNotifications(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_disableNotifications(self, *args)

    def setDisableNotifications(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_setDisableNotifications(self, *args)

    def getViewProps(self, *args) -> "ViewPropsArray const &":
        return _ODA_Kernel_Py3.OdGsBaseModel_getViewProps(self, *args)

    def refView(self, *args) -> "OdGsViewImpl *":
        return _ODA_Kernel_Py3.OdGsBaseModel_refView(self, *args)

    def refDevice(self, *args) -> "OdGsBaseVectorizeDevice *":
        return _ODA_Kernel_Py3.OdGsBaseModel_refDevice(self, *args)

    def refModulesCount(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsBaseModel_refModulesCount(self, *args)

    def attachLocalViewportId(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_attachLocalViewportId(self, *args)

    def getLocalViewportId(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsBaseModel_getLocalViewportId(self, *args)

    def getMaxLocalViewportId(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsBaseModel_getMaxLocalViewportId(self, *args)

    def invalidVp(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_invalidVp(self, *args)

    def invalidateRegenDrawBlocks(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_invalidateRegenDrawBlocks(self, *args)

    def invalidateSectionableBlocks(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_invalidateSectionableBlocks(self, *args)

    def gsNode(self, *args) -> "OdGsNode *":
        return _ODA_Kernel_Py3.OdGsBaseModel_gsNode(self, *args)

    def detach(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_detach(self, *args)

    def detachAll(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_detachAll(self, *args)

    def detachAllFromDb(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_detachAllFromDb(self, *args)

    def open(self, *args) -> "OdGiDrawablePtr":
        return _ODA_Kernel_Py3.OdGsBaseModel_open(self, *args)

    def setDrawableGsNode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_setDrawableGsNode(self, *args)

    def drawableGsNode(self, *args) -> "OdGsCache *":
        return _ODA_Kernel_Py3.OdGsBaseModel_drawableGsNode(self, *args)
    kAddDrawable = _ODA_Kernel_Py3.OdGsBaseModel_kAddDrawable
    kUneraseDrawable = _ODA_Kernel_Py3.OdGsBaseModel_kUneraseDrawable

    def onAdded(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_onAdded(self, *args)

    def onAddedImpl(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_onAddedImpl(self, *args)

    def onModified(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_onModified(self, *args)

    def onModifiedImpl(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_onModifiedImpl(self, *args)

    def onModifiedGraphics(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_onModifiedGraphics(self, *args)

    def onErased(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_onErased(self, *args)

    def onErasedImpl(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_onErasedImpl(self, *args)

    def onUnerased(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_onUnerased(self, *args)

    def invalidateVisible(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_invalidateVisible(self, *args)

    def invalidate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_invalidate(self, *args)

    def viewChanges(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsBaseModel_viewChanges(self, *args)

    def numViewProps(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsBaseModel_numViewProps(self, *args)

    def viewProps(self, *args) -> "ViewProps const &":
        return _ODA_Kernel_Py3.OdGsBaseModel_viewProps(self, *args)

    def updateViewProps(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_updateViewProps(self, *args)

    def isViewPropsValid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_isViewPropsValid(self, *args)

    def viewById(self, *args) -> "OdGsViewImpl const *":
        return _ODA_Kernel_Py3.OdGsBaseModel_viewById(self, *args)

    def gsLayerNode(self, *args) -> "OdGsLayerNode *":
        return _ODA_Kernel_Py3.OdGsBaseModel_gsLayerNode(self, *args)

    def propagateLayerChanges(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_propagateLayerChanges(self, *args)

    def setTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_setTransform(self, *args)

    def transform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGsBaseModel_transform(self, *args)

    def isIdentityTransform(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_isIdentityTransform(self, *args)

    def transformExtents(self, *args) -> "OdGeExtents3d &":
        return _ODA_Kernel_Py3.OdGsBaseModel_transformExtents(self, *args)

    def renderModeOverride(self, *args) -> "OdGsView::RenderMode":
        return _ODA_Kernel_Py3.OdGsBaseModel_renderModeOverride(self, *args)

    def setRenderModeOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_setRenderModeOverride(self, *args)

    def highlight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_highlight(self, *args)

    def highlightImpl(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_highlightImpl(self, *args)

    def hide(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_hide(self, *args)

    def hideImpl(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_hideImpl(self, *args)

    def materialCache(self, *args) -> "OdGsMaterialCache *":
        return _ODA_Kernel_Py3.OdGsBaseModel_materialCache(self, *args)

    def setRenderType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_setRenderType(self, *args)

    def renderType(self, *args) -> "OdGsModel::RenderType":
        return _ODA_Kernel_Py3.OdGsBaseModel_renderType(self, *args)

    def setBackground(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_setBackground(self, *args)

    def background(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGsBaseModel_background(self, *args)

    def setVisualStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_setVisualStyle(self, *args)

    def visualStyle(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_visualStyle(self, *args)

    def visualStyleDrawable(self, *args) -> "OdGiDrawable const *":
        return _ODA_Kernel_Py3.OdGsBaseModel_visualStyleDrawable(self, *args)

    def makeStock(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_makeStock(self, *args)

    def releaseStock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_releaseStock(self, *args)

    def hasChangedLayers(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_hasChangedLayers(self, *args)

    def addModelReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_addModelReactor(self, *args)

    def removeModelReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_removeModelReactor(self, *args)

    def setEnableSectioning(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_setEnableSectioning(self, *args)

    def isSectioningEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_isSectioningEnabled(self, *args)

    def setSectioning(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_setSectioning(self, *args)

    def setSectioningVisualStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_setSectioningVisualStyle(self, *args)

    def getSectioning(self, *args) -> "OdGsBaseModel::SectioningSettings const &":
        return _ODA_Kernel_Py3.OdGsBaseModel_getSectioning(self, *args)

    def setViewClippingOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_setViewClippingOverride(self, *args)

    def viewClippingOverride(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_viewClippingOverride(self, *args)

    def setEnableLinetypes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_setEnableLinetypes(self, *args)

    def isLinetypesEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_isLinetypesEnabled(self, *args)

    def setSelectable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_setSelectable(self, *args)

    def isSelectable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_isSelectable(self, *args)

    def setEnableViewExtentsCalculation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_setEnableViewExtentsCalculation(self, *args)

    def isViewExtentsCalculationEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_isViewExtentsCalculationEnabled(self, *args)

    def setEnableLightsInBlocks(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_setEnableLightsInBlocks(self, *args)

    def isLightsInBlocksEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_isLightsInBlocksEnabled(self, *args)

    def setViewSectioningOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseModel_setViewSectioningOverride(self, *args)

    def viewSectioningOverride(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_viewSectioningOverride(self, *args)

    def saveModelState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_saveModelState(self, *args)

    def loadModelState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_loadModelState(self, *args)

    def saveClientModelState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_saveClientModelState(self, *args)

    def loadClientModelState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_loadClientModelState(self, *args)

    def postprocessModelLoading(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseModel_postprocessModelLoading(self, *args)

    def newNode(self, *args) -> "OdGsNode *":
        return _ODA_Kernel_Py3.OdGsBaseModel_newNode(self, *args)

# Register OdGsBaseModel in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsBaseModel_swigregister(OdGsBaseModel)

class SectioningSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_bEnabled = property(_ODA_Kernel_Py3.SectioningSettings_m_bEnabled_get, _ODA_Kernel_Py3.SectioningSettings_m_bEnabled_set)
    m_bTopSet = property(_ODA_Kernel_Py3.SectioningSettings_m_bTopSet_get, _ODA_Kernel_Py3.SectioningSettings_m_bTopSet_set)
    m_bBottomSet = property(_ODA_Kernel_Py3.SectioningSettings_m_bBottomSet_get, _ODA_Kernel_Py3.SectioningSettings_m_bBottomSet_set)
    m_bVisualStyle = property(_ODA_Kernel_Py3.SectioningSettings_m_bVisualStyle_get, _ODA_Kernel_Py3.SectioningSettings_m_bVisualStyle_set)
    m_points = property(_ODA_Kernel_Py3.SectioningSettings_m_points_get, _ODA_Kernel_Py3.SectioningSettings_m_points_set)
    m_upVector = property(_ODA_Kernel_Py3.SectioningSettings_m_upVector_get, _ODA_Kernel_Py3.SectioningSettings_m_upVector_set)
    m_dTop = property(_ODA_Kernel_Py3.SectioningSettings_m_dTop_get, _ODA_Kernel_Py3.SectioningSettings_m_dTop_set)
    m_dBottom = property(_ODA_Kernel_Py3.SectioningSettings_m_dBottom_get, _ODA_Kernel_Py3.SectioningSettings_m_dBottom_set)
    m_visualStyle = property(_ODA_Kernel_Py3.SectioningSettings_m_visualStyle_get, _ODA_Kernel_Py3.SectioningSettings_m_visualStyle_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.SectioningSettings_swiginit(self, _ODA_Kernel_Py3.new_SectioningSettings(*args))

    def isEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.SectioningSettings_isEnabled(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_SectioningSettings

# Register SectioningSettings in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.SectioningSettings_swigregister(SectioningSettings)

class OdGsUpdateManager(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsUpdateManager >":
        return _ODA_Kernel_Py3.OdGsUpdateManager_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsUpdateManager_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsUpdateManager_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsUpdateManager_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsUpdateManager >":
        return _ODA_Kernel_Py3.OdGsUpdateManager_createObject(*args)
    kKeepDrawOrder = _ODA_Kernel_Py3.OdGsUpdateManager_kKeepDrawOrder
    kFilterByLimit = _ODA_Kernel_Py3.OdGsUpdateManager_kFilterByLimit
    kAdd = _ODA_Kernel_Py3.OdGsUpdateManager_kAdd
    kRemove = _ODA_Kernel_Py3.OdGsUpdateManager_kRemove
    kNoChanges = _ODA_Kernel_Py3.OdGsUpdateManager_kNoChanges

    def settings(self, *args) -> "OdGsUpdateManager::UpdateManagerSettings":
        return _ODA_Kernel_Py3.OdGsUpdateManager_settings(self, *args)

    def setSettings(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsUpdateManager_setSettings(self, *args)

    def addElement(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsUpdateManager_addElement(self, *args)

    def addPriorityElement(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsUpdateManager_addPriorityElement(self, *args)

    def setProcessCallback(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsUpdateManager_setProcessCallback(self, *args)

    def process(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsUpdateManager_process(self, *args)

    def reset(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsUpdateManager_reset(self, *args)

    def removeElement(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsUpdateManager_removeElement(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsUpdateManager

# Register OdGsUpdateManager in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsUpdateManager_swigregister(OdGsUpdateManager)

def OdGsUpdateManager_cast(*args) -> "OdSmartPtr< OdGsUpdateManager >":
    return _ODA_Kernel_Py3.OdGsUpdateManager_cast(*args)

def OdGsUpdateManager_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsUpdateManager_desc(*args)

def OdGsUpdateManager_createObject(*args) -> "OdSmartPtr< OdGsUpdateManager >":
    return _ODA_Kernel_Py3.OdGsUpdateManager_createObject(*args)

class OdGsUpdateManagerElement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsUpdateManagerElement_swiginit(self, _ODA_Kernel_Py3.new_OdGsUpdateManagerElement(*args))

    def state(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdGsUpdateManagerElement_state(self, *args)

    def setState(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsUpdateManagerElement_setState(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsUpdateManagerElement

# Register OdGsUpdateManagerElement in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsUpdateManagerElement_swigregister(OdGsUpdateManagerElement)

class UpdateManagerSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_ODA_Kernel_Py3.UpdateManagerSettings_type_get, _ODA_Kernel_Py3.UpdateManagerSettings_type_set)
    nMemoryLimit = property(_ODA_Kernel_Py3.UpdateManagerSettings_nMemoryLimit_get, _ODA_Kernel_Py3.UpdateManagerSettings_nMemoryLimit_set)
    nMinMemoryLimit = property(_ODA_Kernel_Py3.UpdateManagerSettings_nMinMemoryLimit_get, _ODA_Kernel_Py3.UpdateManagerSettings_nMinMemoryLimit_set)
    nClientCurrentHeapUsage = property(_ODA_Kernel_Py3.UpdateManagerSettings_nClientCurrentHeapUsage_get, _ODA_Kernel_Py3.UpdateManagerSettings_nClientCurrentHeapUsage_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.UpdateManagerSettings_swiginit(self, _ODA_Kernel_Py3.new_UpdateManagerSettings(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_UpdateManagerSettings

# Register UpdateManagerSettings in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.UpdateManagerSettings_swigregister(UpdateManagerSettings)

class OdSlotManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdSlotManager_swiginit(self, _ODA_Kernel_Py3.new_OdSlotManager(*args))

    def newSlot(self, *args) -> "OdSlotId":
        return _ODA_Kernel_Py3.OdSlotManager_newSlot(self, *args)

    def freeSlot(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSlotManager_freeSlot(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSlotManager_contains(self, *args)

    def numSlots(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdSlotManager_numSlots(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdSlotManager

# Register OdSlotManager in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdSlotManager_swigregister(OdSlotManager)

class GsDevicePerformanceTm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.GsDevicePerformanceTm_swiginit(self, _ODA_Kernel_Py3.new_GsDevicePerformanceTm(*args))

    def reset(self, *args) -> "void":
        return _ODA_Kernel_Py3.GsDevicePerformanceTm_reset(self, *args)
    m_update = property(_ODA_Kernel_Py3.GsDevicePerformanceTm_m_update_get, _ODA_Kernel_Py3.GsDevicePerformanceTm_m_update_set)
    m_updateGeometry = property(_ODA_Kernel_Py3.GsDevicePerformanceTm_m_updateGeometry_get, _ODA_Kernel_Py3.GsDevicePerformanceTm_m_updateGeometry_set)
    m_updateScreen = property(_ODA_Kernel_Py3.GsDevicePerformanceTm_m_updateScreen_get, _ODA_Kernel_Py3.GsDevicePerformanceTm_m_updateScreen_set)
    m_updateEntities = property(_ODA_Kernel_Py3.GsDevicePerformanceTm_m_updateEntities_get, _ODA_Kernel_Py3.GsDevicePerformanceTm_m_updateEntities_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_GsDevicePerformanceTm

# Register GsDevicePerformanceTm in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.GsDevicePerformanceTm_swigregister(GsDevicePerformanceTm)

eEnableParallelVectorization = _ODA_Kernel_Py3.eEnableParallelVectorization
eEnableParallelDisplay = _ODA_Kernel_Py3.eEnableParallelDisplay
eEnableOptimalThreadsNumber = _ODA_Kernel_Py3.eEnableOptimalThreadsNumber
eEnableSchedulerLogOutput = _ODA_Kernel_Py3.eEnableSchedulerLogOutput
eEnablePerfMeasurements = _ODA_Kernel_Py3.eEnablePerfMeasurements
eForcePartialUpdateForTest = _ODA_Kernel_Py3.eForcePartialUpdateForTest
eForceParallelVectorization = _ODA_Kernel_Py3.eForceParallelVectorization
eEnableUpdateExtentsOnly = _ODA_Kernel_Py3.eEnableUpdateExtentsOnly
class GsVectPerformanceData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.GsVectPerformanceData_swiginit(self, _ODA_Kernel_Py3.new_GsVectPerformanceData(*args))

    def enableParallelVectorization(self, *args) -> "bool":
        return _ODA_Kernel_Py3.GsVectPerformanceData_enableParallelVectorization(self, *args)

    def enableParallelDisplay(self, *args) -> "bool":
        return _ODA_Kernel_Py3.GsVectPerformanceData_enableParallelDisplay(self, *args)

    def schedulerLogOutput(self, *args) -> "bool":
        return _ODA_Kernel_Py3.GsVectPerformanceData_schedulerLogOutput(self, *args)

    def optimalThreadsNumber(self, *args) -> "bool":
        return _ODA_Kernel_Py3.GsVectPerformanceData_optimalThreadsNumber(self, *args)

    def enablePerfMeasurements(self, *args) -> "bool":
        return _ODA_Kernel_Py3.GsVectPerformanceData_enablePerfMeasurements(self, *args)

    def forcePartialUpdateForTest(self, *args) -> "bool":
        return _ODA_Kernel_Py3.GsVectPerformanceData_forcePartialUpdateForTest(self, *args)

    def forceParallelVectorization(self, *args) -> "bool":
        return _ODA_Kernel_Py3.GsVectPerformanceData_forceParallelVectorization(self, *args)

    def enableVectorizationOnly(self, *args) -> "bool":
        return _ODA_Kernel_Py3.GsVectPerformanceData_enableVectorizationOnly(self, *args)
    m_options = property(_ODA_Kernel_Py3.GsVectPerformanceData_m_options_get, _ODA_Kernel_Py3.GsVectPerformanceData_m_options_set)
    m_tm = property(_ODA_Kernel_Py3.GsVectPerformanceData_m_tm_get, _ODA_Kernel_Py3.GsVectPerformanceData_m_tm_set)
    m_numVectUsedUpdateGeom = property(_ODA_Kernel_Py3.GsVectPerformanceData_m_numVectUsedUpdateGeom_get, _ODA_Kernel_Py3.GsVectPerformanceData_m_numVectUsedUpdateGeom_set)
    m_numVectUsedUpdateScr = property(_ODA_Kernel_Py3.GsVectPerformanceData_m_numVectUsedUpdateScr_get, _ODA_Kernel_Py3.GsVectPerformanceData_m_numVectUsedUpdateScr_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_GsVectPerformanceData

# Register GsVectPerformanceData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.GsVectPerformanceData_swigregister(GsVectPerformanceData)

class OdGsViewImpl(OdGsView):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsViewImpl >":
        return _ODA_Kernel_Py3.OdGsViewImpl_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsViewImpl_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsViewImpl_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsViewImpl_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsViewImpl >":
        return _ODA_Kernel_Py3.OdGsViewImpl_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsViewImpl

    def init(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_init(self, *args)

    def device(self, *args) -> "OdGsDevice *":
        return _ODA_Kernel_Py3.OdGsViewImpl_device(self, *args)

    def mode(self, *args) -> "OdGsView::RenderMode":
        return _ODA_Kernel_Py3.OdGsViewImpl_mode(self, *args)

    def setModeOverride(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_setModeOverride(self, *args)

    def setMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setMode(self, *args)

    def freezeLayer(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_freezeLayer(self, *args)

    def thawLayer(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_thawLayer(self, *args)

    def clearFrozenLayers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_clearFrozenLayers(self, *args)

    def setViewportBorderProperties(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setViewportBorderProperties(self, *args)

    def getViewportBorderProperties(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_getViewportBorderProperties(self, *args)

    def setViewportBorderVisibility(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setViewportBorderVisibility(self, *args)

    def isViewportBorderVisible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isViewportBorderVisible(self, *args)

    def setEnableFrontClip(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setEnableFrontClip(self, *args)

    def isFrontClipped(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isFrontClipped(self, *args)

    def setFrontClip(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setFrontClip(self, *args)

    def frontClip(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_frontClip(self, *args)

    def setEnableBackClip(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setEnableBackClip(self, *args)

    def isBackClipped(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isBackClipped(self, *args)

    def setBackClip(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setBackClip(self, *args)

    def backClip(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_backClip(self, *args)

    def position(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGsViewImpl_position(self, *args)

    def target(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGsViewImpl_target(self, *args)

    def upVector(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGsViewImpl_upVector(self, *args)

    def fieldWidth(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_fieldWidth(self, *args)

    def fieldHeight(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_fieldHeight(self, *args)

    def windowAspect(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_windowAspect(self, *args)

    def lensLength(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_lensLength(self, *args)

    def setLensLength(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setLensLength(self, *args)

    def isPerspective(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isPerspective(self, *args)

    def beginInteractivity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_beginInteractivity(self, *args)

    def isInInteractivity(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isInInteractivity(self, *args)

    def interactivityFrameRate(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_interactivityFrameRate(self, *args)

    def endInteractivity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_endInteractivity(self, *args)

    def flush(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_flush(self, *args)

    def hide(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_hide(self, *args)

    def show(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_show(self, *args)

    def isVisible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isVisible(self, *args)

    def cloneView(self, *args) -> "OdGsViewPtr":
        return _ODA_Kernel_Py3.OdGsViewImpl_cloneView(self, *args)

    def exceededBounds(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_exceededBounds(self, *args)

    def enableStereo(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_enableStereo(self, *args)

    def isStereoEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isStereoEnabled(self, *args)

    def setStereoParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setStereoParameters(self, *args)

    def getStereoParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_getStereoParameters(self, *args)

    def initLights(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_initLights(self, *args)

    def getSnapShot(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_getSnapShot(self, *args)

    def setViewport(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setViewport(self, *args)

    def getViewport(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_getViewport(self, *args)

    def screenMatrix(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGsViewImpl_screenMatrix(self, *args)

    def viewingMatrix(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGsViewImpl_viewingMatrix(self, *args)

    def viewParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_viewParameters(self, *args)

    def lineweightToDcScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_lineweightToDcScale(self, *args)

    def setLineweightToDcScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setLineweightToDcScale(self, *args)

    def setLineweightEnum(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setLineweightEnum(self, *args)

    def setLinetypeScaleMultiplier(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setLinetypeScaleMultiplier(self, *args)

    def setAlternateLinetypeScaleMultiplier(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setAlternateLinetypeScaleMultiplier(self, *args)

    def linetypeScaleMultiplier(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_linetypeScaleMultiplier(self, *args)

    def dolly(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_dolly(self, *args)

    def roll(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_roll(self, *args)

    def orbit(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_orbit(self, *args)

    def zoom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_zoom(self, *args)

    def pan(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_pan(self, *args)

    def setView(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setView(self, *args)

    def zoomExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_zoomExtents(self, *args)

    def zoomWindow(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_zoomWindow(self, *args)

    def pointInView(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_pointInView(self, *args)

    def extentsInView(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_extentsInView(self, *args)

    def viewportClipRegion(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_viewportClipRegion(self, *args)

    def setViewportClipRegion(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setViewportClipRegion(self, *args)

    def isDependentViewportView(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isDependentViewportView(self, *args)

    def isDependentGeometryView(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isDependentGeometryView(self, *args)

    def isHelperView(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isHelperView(self, *args)

    def getGsModulePtr(self, *args) -> "OdGsBaseModule const *":
        return _ODA_Kernel_Py3.OdGsViewImpl_getGsModulePtr(self, *args)

    def contextualColors(self, *args) -> "OdGiContextualColors const *":
        return _ODA_Kernel_Py3.OdGsViewImpl_contextualColors(self, *args)

    def setContextualColors(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setContextualColors(self, *args)

    def pointInViewport(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_pointInViewport(self, *args)

    def setClearColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setClearColor(self, *args)

    def add(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_add(self, *args)

    def numRootDrawables(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGsViewImpl_numRootDrawables(self, *args)

    def rootDrawableIdAt(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGsViewImpl_rootDrawableIdAt(self, *args)

    def rootDrawableAt(self, *args) -> "OdGiDrawablePtr":
        return _ODA_Kernel_Py3.OdGsViewImpl_rootDrawableAt(self, *args)

    def erase(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_erase(self, *args)

    def eraseAll(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_eraseAll(self, *args)

    def getModel(self, *args) -> "OdGsModel *":
        return _ODA_Kernel_Py3.OdGsViewImpl_getModel(self, *args)

    def getModelList(self, *args) -> "OdGsModelArray":
        return _ODA_Kernel_Py3.OdGsViewImpl_getModelList(self, *args)

    def isValid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isValid(self, *args)

    def getNumPixelsInUnitSquare(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_getNumPixelsInUnitSquare(self, *args)

    def setBackground(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setBackground(self, *args)

    def background(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGsViewImpl_background(self, *args)

    def setVisualStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setVisualStyle(self, *args)

    def visualStyle(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_visualStyle(self, *args)

    def enableDefaultLighting(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_enableDefaultLighting(self, *args)

    def defaultLightingEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_defaultLightingEnabled(self, *args)

    def defaultLightingType(self, *args) -> "OdGsView::DefaultLightingType":
        return _ODA_Kernel_Py3.OdGsViewImpl_defaultLightingType(self, *args)

    @staticmethod
    def safeCast(*args) -> "OdGsViewImpl const *":
        return _ODA_Kernel_Py3.OdGsViewImpl_safeCast(*args)

    def viewportId(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsViewImpl_viewportId(self, *args)

    def isValidViewportId(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isValidViewportId(self, *args)

    def getViewportObjectId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGsViewImpl_getViewportObjectId(self, *args)

    def baseDevice(self, *args) -> "OdGsBaseVectorizeDevice const *":
        return _ODA_Kernel_Py3.OdGsViewImpl_baseDevice(self, *args)

    def annotationScaleId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGsViewImpl_annotationScaleId(self, *args)

    def drawablesFilterFunction(self, *args) -> "OdIntPtr":
        return _ODA_Kernel_Py3.OdGsViewImpl_drawablesFilterFunction(self, *args)

    def viewExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_viewExtents(self, *args)

    def select(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_select(self, *args)

    def isSnapping(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isSnapping(self, *args)

    def setSnapping(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setSnapping(self, *args)

    def isRegenOnDrawForbidden(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isRegenOnDrawForbidden(self, *args)

    def setRegenOnDrawForbidden(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setRegenOnDrawForbidden(self, *args)

    def isAccumulateVpChanges(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isAccumulateVpChanges(self, *args)

    def clearLinetypeCache(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_clearLinetypeCache(self, *args)

    def linetypeAlternateScaleMultiplier(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_linetypeAlternateScaleMultiplier(self, *args)

    def isSupportLegacyWireframeMode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isSupportLegacyWireframeMode(self, *args)

    def isLegacyWireframeMode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isLegacyWireframeMode(self, *args)

    def setLegacyWireframeMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setLegacyWireframeMode(self, *args)

    def isSupportLegacyHiddenMode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isSupportLegacyHiddenMode(self, *args)

    def isLegacyHiddenMode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isLegacyHiddenMode(self, *args)

    def setLegacyHiddenMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setLegacyHiddenMode(self, *args)

    def isSupportPlotStyles(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isSupportPlotStyles(self, *args)

    def isPlotTransparency(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isPlotTransparency(self, *args)

    def setPlotTransparency(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setPlotTransparency(self, *args)

    def frozenLayers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_frozenLayers(self, *args)

    def isLayerVisible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isLayerVisible(self, *args)

    def lineweightToPixels(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_lineweightToPixels(self, *args)

    def screenRect(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_screenRect(self, *args)

    def screenRectNorm(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_screenRectNorm(self, *args)

    def viewportDcCorners(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_viewportDcCorners(self, *args)

    def doPerspectivePt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_doPerspectivePt(self, *args)

    def doInversePerspectivePt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_doInversePerspectivePt(self, *args)

    def eyeToWorldMatrix(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdGsViewImpl_eyeToWorldMatrix(self, *args)

    def worldToEyeMatrix(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdGsViewImpl_worldToEyeMatrix(self, *args)

    def eyeToScreenMatrix(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGsViewImpl_eyeToScreenMatrix(self, *args)

    def worldToDeviceMatrix(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGsViewImpl_worldToDeviceMatrix(self, *args)

    def objectToDeviceMatrix(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGsViewImpl_objectToDeviceMatrix(self, *args)
    kProjectionIncludeDept = _ODA_Kernel_Py3.OdGsViewImpl_kProjectionIncludeDept
    kProjectionIncludeClip = _ODA_Kernel_Py3.OdGsViewImpl_kProjectionIncludeClip
    kProjectionIncludePerspective = _ODA_Kernel_Py3.OdGsViewImpl_kProjectionIncludePerspective
    kProjectionIncludeRotation = _ODA_Kernel_Py3.OdGsViewImpl_kProjectionIncludeRotation
    kProjectionIncludeAll = _ODA_Kernel_Py3.OdGsViewImpl_kProjectionIncludeAll
    kProjectionIncludeAllNoDept = _ODA_Kernel_Py3.OdGsViewImpl_kProjectionIncludeAllNoDept

    def projectionMatrix(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGsViewImpl_projectionMatrix(self, *args)

    def clearColor(self, *args) -> "OdGsView::ClearColor":
        return _ODA_Kernel_Py3.OdGsViewImpl_clearColor(self, *args)

    def extentsToPixels(self, *args) -> "OdGsOverlayId":
        return _ODA_Kernel_Py3.OdGsViewImpl_extentsToPixels(self, *args)

    def invalidate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_invalidate(self, *args)

    def invalidateRegion(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_invalidateRegion(self, *args)

    def invalidRects(self, *args) -> "OdGsDCRectArray":
        return _ODA_Kernel_Py3.OdGsViewImpl_invalidRects(self, *args)

    def isViewportOnScreen(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isViewportOnScreen(self, *args)

    def isCompletelyVisible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isCompletelyVisible(self, *args)

    def setCompletelyVisible(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setCompletelyVisible(self, *args)

    def setInversion(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setInversion(self, *args)

    def getRegenType(self, *args) -> "OdGiRegenType":
        return _ODA_Kernel_Py3.OdGsViewImpl_getRegenType(self, *args)

    def focalLength(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_focalLength(self, *args)

    def eyeVector(self, *args) -> "OdGeVector3d const &":
        return _ODA_Kernel_Py3.OdGsViewImpl_eyeVector(self, *args)

    def xVector(self, *args) -> "OdGeVector3d const &":
        return _ODA_Kernel_Py3.OdGsViewImpl_xVector(self, *args)

    def getUpVector(self, *args) -> "OdGeVector3d const &":
        return _ODA_Kernel_Py3.OdGsViewImpl_getUpVector(self, *args)

    def getLinetypeScaleMultiplier(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_getLinetypeScaleMultiplier(self, *args)

    def getLinetypeGenerationCriteria(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_getLinetypeGenerationCriteria(self, *args)

    def getDeviation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_getDeviation(self, *args)

    def initDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_initDeviation(self, *args)

    def cachedDrawables(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGsViewImpl_cachedDrawables(self, *args)

    def localViewportId(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsViewImpl_localViewportId(self, *args)

    def isLocalViewportIdCompatible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isLocalViewportIdCompatible(self, *args)

    def getViewLocalId(self, *args) -> "OdGsViewLocalId &":
        return _ODA_Kernel_Py3.OdGsViewImpl_getViewLocalId(self, *args)

    def isViewRegenerated(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isViewRegenerated(self, *args)

    def center(self, *args) -> "OdGePoint2d const &":
        return _ODA_Kernel_Py3.OdGsViewImpl_center(self, *args)

    def setCenter(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setCenter(self, *args)

    def focusPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGsViewImpl_focusPoint(self, *args)

    def isNonRectClipped(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isNonRectClipped(self, *args)

    def hasLweights(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_hasLweights(self, *args)

    def getLweightsEnum(self, *args) -> "OdUInt8Array const &":
        return _ODA_Kernel_Py3.OdGsViewImpl_getLweightsEnum(self, *args)

    def dcScreenMin(self, *args) -> "OdGePoint2d const &":
        return _ODA_Kernel_Py3.OdGsViewImpl_dcScreenMin(self, *args)

    def dcScreenMax(self, *args) -> "OdGePoint2d const &":
        return _ODA_Kernel_Py3.OdGsViewImpl_dcScreenMax(self, *args)

    def dcLowerLeft(self, *args) -> "OdGePoint2d const &":
        return _ODA_Kernel_Py3.OdGsViewImpl_dcLowerLeft(self, *args)

    def dcUpperRight(self, *args) -> "OdGePoint2d const &":
        return _ODA_Kernel_Py3.OdGsViewImpl_dcUpperRight(self, *args)

    def perspectiveMatrix(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGsViewImpl_perspectiveMatrix(self, *args)

    @staticmethod
    def lensLengthToFOV(*args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_lensLengthToFOV(*args)

    @staticmethod
    def lensLengthFromFOV(*args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_lensLengthFromFOV(*args)

    def invalidateCachedViewportGeometry(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_invalidateCachedViewportGeometry(self, *args)

    def registerOverlay(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_registerOverlay(self, *args)

    def unregisterOverlay(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_unregisterOverlay(self, *args)

    def partialUpdateExtentsEnlargement(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGsViewImpl_partialUpdateExtentsEnlargement(self, *args)

    def calcDeviation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_calcDeviation(self, *args)

    def getViewportPropertiesRoot(self, *args) -> "OdGsPropertiesPtr":
        return _ODA_Kernel_Py3.OdGsViewImpl_getViewportPropertiesRoot(self, *args)

    def updateViewportProperties(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_updateViewportProperties(self, *args)

    def getViewportPropertiesForType(self, *args) -> "OdGsPropertiesPtr":
        return _ODA_Kernel_Py3.OdGsViewImpl_getViewportPropertiesForType(self, *args)

    def rotationMatrix(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdGsViewImpl_rotationMatrix(self, *args)

    def viewportRotation(self, *args) -> "short":
        return _ODA_Kernel_Py3.OdGsViewImpl_viewportRotation(self, *args)

    def isRotated(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isRotated(self, *args)

    def unrotatedFieldHeight(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_unrotatedFieldHeight(self, *args)

    def unrotatedFieldWidth(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_unrotatedFieldWidth(self, *args)

    def actualFieldWidth(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_actualFieldWidth(self, *args)

    def actualFieldHeight(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsViewImpl_actualFieldHeight(self, *args)

    def initCullingVolume(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_initCullingVolume(self, *args)

    def setCullingVolume(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setCullingVolume(self, *args)

    def cullingVolume(self, *args) -> "OdGsCullingVolumePtr":
        return _ODA_Kernel_Py3.OdGsViewImpl_cullingVolume(self, *args)

    def isCullingVolumeInitialized(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_isCullingVolumeInitialized(self, *args)

    def cullingVolumeIntersectWithOpt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_cullingVolumeIntersectWithOpt(self, *args)

    def cullingVolumeIntersectWith(self, *args) -> "OdGsCullingVolume::IntersectionStatus":
        return _ODA_Kernel_Py3.OdGsViewImpl_cullingVolumeIntersectWith(self, *args)

    def cullingVolumeTransformBy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_cullingVolumeTransformBy(self, *args)

    def setViewport3dClipping(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setViewport3dClipping(self, *args)

    def viewport3dClipping(self, *args) -> "OdGiClipBoundary const *":
        return _ODA_Kernel_Py3.OdGsViewImpl_viewport3dClipping(self, *args)

    def viewport3dClippingObject(self, *args) -> "OdGiClipBoundaryWithAbstractData *":
        return _ODA_Kernel_Py3.OdGsViewImpl_viewport3dClippingObject(self, *args)

    def hasViewport3dClipping(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_hasViewport3dClipping(self, *args)

    def saveViewState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_saveViewState(self, *args)

    def loadViewState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_loadViewState(self, *args)

    def saveClientViewState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_saveClientViewState(self, *args)

    def loadClientViewState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_loadClientViewState(self, *args)

    def collide(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_collide(self, *args)

    def enableAntiAliasing(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_enableAntiAliasing(self, *args)

    def antiAliasingMode(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsViewImpl_antiAliasingMode(self, *args)

    def enableSSAO(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_enableSSAO(self, *args)

    def ssaoMode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewImpl_ssaoMode(self, *args)

    def addClippingShape(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_addClippingShape(self, *args)

    def removeClippingShape(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_removeClippingShape(self, *args)

    def clippingShapes(self, *args) -> "OdSiShapeConstPtrArray const &":
        return _ODA_Kernel_Py3.OdGsViewImpl_clippingShapes(self, *args)

    def setClippingShapes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewImpl_setClippingShapes(self, *args)

# Register OdGsViewImpl in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsViewImpl_swigregister(OdGsViewImpl)

def OdGsViewImpl_cast(*args) -> "OdSmartPtr< OdGsViewImpl >":
    return _ODA_Kernel_Py3.OdGsViewImpl_cast(*args)

def OdGsViewImpl_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsViewImpl_desc(*args)

def OdGsViewImpl_createObject(*args) -> "OdSmartPtr< OdGsViewImpl >":
    return _ODA_Kernel_Py3.OdGsViewImpl_createObject(*args)

def OdGsViewImpl_safeCast(*args) -> "OdGsViewImpl const *":
    return _ODA_Kernel_Py3.OdGsViewImpl_safeCast(*args)

def OdGsViewImpl_lensLengthToFOV(*args) -> "double":
    return _ODA_Kernel_Py3.OdGsViewImpl_lensLengthToFOV(*args)

def OdGsViewImpl_lensLengthFromFOV(*args) -> "double":
    return _ODA_Kernel_Py3.OdGsViewImpl_lensLengthFromFOV(*args)


def calcFocalLength(*args) -> "double":
    return _ODA_Kernel_Py3.calcFocalLength(*args)
class OdGiIntRGB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r = property(_ODA_Kernel_Py3.OdGiIntRGB_r_get, _ODA_Kernel_Py3.OdGiIntRGB_r_set)
    g = property(_ODA_Kernel_Py3.OdGiIntRGB_g_get, _ODA_Kernel_Py3.OdGiIntRGB_g_set)
    b = property(_ODA_Kernel_Py3.OdGiIntRGB_b_get, _ODA_Kernel_Py3.OdGiIntRGB_b_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiIntRGB_swiginit(self, _ODA_Kernel_Py3.new_OdGiIntRGB(*args))

    def red(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiIntRGB_red(self, *args)

    def green(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiIntRGB_green(self, *args)

    def blue(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiIntRGB_blue(self, *args)

    def setRed(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiIntRGB_setRed(self, *args)

    def setGreen(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiIntRGB_setGreen(self, *args)

    def setBlue(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiIntRGB_setBlue(self, *args)

    def setRGB(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiIntRGB_setRGB(self, *args)

    def setColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiIntRGB_setColor(self, *args)

    def color(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGiIntRGB_color(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiIntRGB

# Register OdGiIntRGB in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiIntRGB_swigregister(OdGiIntRGB)

class OdGiColorCube(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def createDynamic(*args) -> "OdSmartPtr< OdGiColorCube >":
        return _ODA_Kernel_Py3.OdGiColorCube_createDynamic(*args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiColorCube_clone(self, *args)

    def cloneIfNeed(self, *args) -> "OdSmartPtr< OdGiColorCube >":
        return _ODA_Kernel_Py3.OdGiColorCube_cloneIfNeed(self, *args)

    def baseOffset(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiColorCube_baseOffset(self, *args)

    def gridDivisions(self, *args) -> "OdGiIntRGB const &":
        return _ODA_Kernel_Py3.OdGiColorCube_gridDivisions(self, *args)

    def intensity(self, *args) -> "float":
        return _ODA_Kernel_Py3.OdGiColorCube_intensity(self, *args)

    def gridSize(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiColorCube_gridSize(self, *args)

    def offsets(self, *args) -> "OdGiIntRGB const &":
        return _ODA_Kernel_Py3.OdGiColorCube_offsets(self, *args)

    def dimensions(self, *args) -> "OdGiIntRGB const &":
        return _ODA_Kernel_Py3.OdGiColorCube_dimensions(self, *args)

    def color(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGiColorCube_color(self, *args)

    def closestMatch(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiColorCube_closestMatch(self, *args)

    def ditheredMatch(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiColorCube_ditheredMatch(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiColorCube

# Register OdGiColorCube in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiColorCube_swigregister(OdGiColorCube)

def OdGiColorCube_createDynamic(*args) -> "OdSmartPtr< OdGiColorCube >":
    return _ODA_Kernel_Py3.OdGiColorCube_createDynamic(*args)

class DtMatchResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_fitColors = property(_ODA_Kernel_Py3.DtMatchResult_m_fitColors_get, _ODA_Kernel_Py3.DtMatchResult_m_fitColors_set)
    m_pattern = property(_ODA_Kernel_Py3.DtMatchResult_m_pattern_get, _ODA_Kernel_Py3.DtMatchResult_m_pattern_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.DtMatchResult_swiginit(self, _ODA_Kernel_Py3.new_DtMatchResult(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_DtMatchResult

# Register DtMatchResult in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.DtMatchResult_swigregister(DtMatchResult)

class OdGiGrayRamp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def createDynamic(*args) -> "OdSmartPtr< OdGiGrayRamp >":
        return _ODA_Kernel_Py3.OdGiGrayRamp_createDynamic(*args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiGrayRamp_clone(self, *args)

    def cloneIfNeed(self, *args) -> "OdSmartPtr< OdGiGrayRamp >":
        return _ODA_Kernel_Py3.OdGiGrayRamp_cloneIfNeed(self, *args)

    def baseOffset(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiGrayRamp_baseOffset(self, *args)

    def gridDivisions(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiGrayRamp_gridDivisions(self, *args)

    def intensity(self, *args) -> "float":
        return _ODA_Kernel_Py3.OdGiGrayRamp_intensity(self, *args)

    def dimension(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiGrayRamp_dimension(self, *args)

    def color(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGiGrayRamp_color(self, *args)

    def closestMatch(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiGrayRamp_closestMatch(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiGrayRamp

# Register OdGiGrayRamp in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiGrayRamp_swigregister(OdGiGrayRamp)

def OdGiGrayRamp_createDynamic(*args) -> "OdSmartPtr< OdGiGrayRamp >":
    return _ODA_Kernel_Py3.OdGiGrayRamp_createDynamic(*args)

class OdGiPalette(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def createDynamic(*args) -> "OdSmartPtr< OdGiPalette >":
        return _ODA_Kernel_Py3.OdGiPalette_createDynamic(*args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiPalette_clone(self, *args)

    def cloneIfNeed(self, *args) -> "OdSmartPtr< OdGiPalette >":
        return _ODA_Kernel_Py3.OdGiPalette_cloneIfNeed(self, *args)

    def color(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGiPalette_color(self, *args)

    def entryActivity(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPalette_entryActivity(self, *args)

    def setColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPalette_setColor(self, *args)

    def setEntryActivity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPalette_setEntryActivity(self, *args)

    def asArray(self, *args) -> "ODCOLORREF const *":
        return _ODA_Kernel_Py3.OdGiPalette_asArray(self, *args)

    def colorCube(self, *args) -> "OdGiColorCube const *":
        return _ODA_Kernel_Py3.OdGiPalette_colorCube(self, *args)

    def setColorCube(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPalette_setColorCube(self, *args)

    def resetColorCube(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPalette_resetColorCube(self, *args)

    def grayRamp(self, *args) -> "OdGiGrayRamp const *":
        return _ODA_Kernel_Py3.OdGiPalette_grayRamp(self, *args)

    def setGrayRamp(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPalette_setGrayRamp(self, *args)

    def resetGrayRamp(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPalette_resetGrayRamp(self, *args)

    def install(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPalette_install(self, *args)

    def closestMatch(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiPalette_closestMatch(self, *args)

    def firstAvailableBlock(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiPalette_firstAvailableBlock(self, *args)

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPalette_isEqualTo(self, *args)

    def remove(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPalette_remove(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPalette_clear(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPalette

# Register OdGiPalette in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPalette_swigregister(OdGiPalette)

def OdGiPalette_createDynamic(*args) -> "OdSmartPtr< OdGiPalette >":
    return _ODA_Kernel_Py3.OdGiPalette_createDynamic(*args)

class Addressation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_nSrcFrom = property(_ODA_Kernel_Py3.Addressation_m_nSrcFrom_get, _ODA_Kernel_Py3.Addressation_m_nSrcFrom_set)
    m_nDstTo = property(_ODA_Kernel_Py3.Addressation_m_nDstTo_get, _ODA_Kernel_Py3.Addressation_m_nDstTo_set)
    m_nNumColors = property(_ODA_Kernel_Py3.Addressation_m_nNumColors_get, _ODA_Kernel_Py3.Addressation_m_nNumColors_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.Addressation_swiginit(self, _ODA_Kernel_Py3.new_Addressation(*args))

    def validate(self, *args) -> "bool":
        return _ODA_Kernel_Py3.Addressation_validate(self, *args)

    def fullRange(self, *args) -> "bool":
        return _ODA_Kernel_Py3.Addressation_fullRange(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_Addressation

# Register Addressation in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.Addressation_swigregister(Addressation)

class OdGiPaletteOverrideHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiPaletteOverrideHelper_swiginit(self, _ODA_Kernel_Py3.new_OdGiPaletteOverrideHelper(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPaletteOverrideHelper

    def setPaletteOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPaletteOverrideHelper_setPaletteOverride(self, *args)

# Register OdGiPaletteOverrideHelper in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPaletteOverrideHelper_swigregister(OdGiPaletteOverrideHelper)

class OdGiLineweightOverride(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiLineweightOverride_swiginit(self, _ODA_Kernel_Py3.new_OdGiLineweightOverride(*args))

    def setScaleOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLineweightOverride_setScaleOverride(self, *args)

    def resetScaleOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLineweightOverride_resetScaleOverride(self, *args)

    def hasScaleOverride(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLineweightOverride_hasScaleOverride(self, *args)

    def scaleOverride(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiLineweightOverride_scaleOverride(self, *args)

    def setPixelScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLineweightOverride_setPixelScale(self, *args)

    def pixelScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiLineweightOverride_pixelScale(self, *args)

    def setStyleOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLineweightOverride_setStyleOverride(self, *args)

    def resetStyleOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLineweightOverride_resetStyleOverride(self, *args)

    def hasStyleOverride(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLineweightOverride_hasStyleOverride(self, *args)

    def endStyleOverride(self, *args) -> "OdPs::LineEndStyle":
        return _ODA_Kernel_Py3.OdGiLineweightOverride_endStyleOverride(self, *args)

    def joinStyleOverride(self, *args) -> "OdPs::LineJoinStyle":
        return _ODA_Kernel_Py3.OdGiLineweightOverride_joinStyleOverride(self, *args)

    def hasOverrides(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLineweightOverride_hasOverrides(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLineweightOverride___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLineweightOverride___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLineweightOverride

# Register OdGiLineweightOverride in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLineweightOverride_swigregister(OdGiLineweightOverride)

class OdGiLineweightOverrideHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiLineweightOverrideHelper_swiginit(self, _ODA_Kernel_Py3.new_OdGiLineweightOverrideHelper(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLineweightOverrideHelper

    def setLineweightOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLineweightOverrideHelper_setLineweightOverride(self, *args)

# Register OdGiLineweightOverrideHelper in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLineweightOverrideHelper_swigregister(OdGiLineweightOverrideHelper)

class OdGiLinetypeRedir(OdGiDgLinetyper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kToStandard = _ODA_Kernel_Py3.OdGiLinetypeRedir_kToStandard
    kToDg = _ODA_Kernel_Py3.OdGiLinetypeRedir_kToDg

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiLinetypeRedir >":
        return _ODA_Kernel_Py3.OdGiLinetypeRedir_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiLinetypeRedir_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiLinetypeRedir_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiLinetypeRedir_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiLinetypeRedir >":
        return _ODA_Kernel_Py3.OdGiLinetypeRedir_createObject(*args)

    def switchTo(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLinetypeRedir_switchTo(self, *args)

    def currentRedir(self, *args) -> "OdGiLinetypeRedir::Direction":
        return _ODA_Kernel_Py3.OdGiLinetypeRedir_currentRedir(self, *args)

    def activeLinetyper(self, *args) -> "OdGiLinetyper const *":
        return _ODA_Kernel_Py3.OdGiLinetypeRedir_activeLinetyper(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLinetypeRedir

# Register OdGiLinetypeRedir in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLinetypeRedir_swigregister(OdGiLinetypeRedir)

def OdGiLinetypeRedir_cast(*args) -> "OdSmartPtr< OdGiLinetypeRedir >":
    return _ODA_Kernel_Py3.OdGiLinetypeRedir_cast(*args)

def OdGiLinetypeRedir_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiLinetypeRedir_desc(*args)

def OdGiLinetypeRedir_createObject(*args) -> "OdSmartPtr< OdGiLinetypeRedir >":
    return _ODA_Kernel_Py3.OdGiLinetypeRedir_createObject(*args)

class OdGiConveyorEmbranchment(OdGiConveyorNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiConveyorEmbranchment >":
        return _ODA_Kernel_Py3.OdGiConveyorEmbranchment_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiConveyorEmbranchment_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiConveyorEmbranchment_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiConveyorEmbranchment_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiConveyorEmbranchment >":
        return _ODA_Kernel_Py3.OdGiConveyorEmbranchment_createObject(*args)

    def secondOutput(self, *args) -> "OdGiConveyorOutput &":
        return _ODA_Kernel_Py3.OdGiConveyorEmbranchment_secondOutput(self, *args)

    def isSimplifyOpt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiConveyorEmbranchment_isSimplifyOpt(self, *args)

    def setDrawContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorEmbranchment_setDrawContext(self, *args)

    def setDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiConveyorEmbranchment_setDeviation(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiConveyorEmbranchment

# Register OdGiConveyorEmbranchment in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiConveyorEmbranchment_swigregister(OdGiConveyorEmbranchment)

def OdGiConveyorEmbranchment_cast(*args) -> "OdSmartPtr< OdGiConveyorEmbranchment >":
    return _ODA_Kernel_Py3.OdGiConveyorEmbranchment_cast(*args)

def OdGiConveyorEmbranchment_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiConveyorEmbranchment_desc(*args)

def OdGiConveyorEmbranchment_createObject(*args) -> "OdSmartPtr< OdGiConveyorEmbranchment >":
    return _ODA_Kernel_Py3.OdGiConveyorEmbranchment_createObject(*args)

class OdGiWorldDrawImpl(OdGiSubEntityTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setContext(self, *args)

    @staticmethod
    def dummyGiContext(*args) -> "OdGiContext *":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_dummyGiContext(*args)

    def color(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_color(self, *args)

    def trueColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_trueColor(self, *args)

    def layer(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_layer(self, *args)

    def lineType(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_lineType(self, *args)

    def fillType(self, *args) -> "OdGiFillType":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_fillType(self, *args)

    def lineWeight(self, *args) -> "OdDb::LineWeight":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_lineWeight(self, *args)

    def lineTypeScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_lineTypeScale(self, *args)

    def thickness(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_thickness(self, *args)

    def plotStyleNameType(self, *args) -> "OdDb::PlotStyleNameType":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_plotStyleNameType(self, *args)

    def plotStyleNameId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_plotStyleNameId(self, *args)

    def material(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_material(self, *args)

    def mapper(self, *args) -> "OdGiMapper const *":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_mapper(self, *args)

    def visualStyle(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_visualStyle(self, *args)

    def transparency(self, *args) -> "OdCmTransparency":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_transparency(self, *args)

    def drawFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_drawFlags(self, *args)

    def lockFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_lockFlags(self, *args)

    def selectionGeom(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_selectionGeom(self, *args)

    def shadowFlags(self, *args) -> "OdGiSubEntityTraits::ShadowFlags":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_shadowFlags(self, *args)

    def sectionable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_sectionable(self, *args)

    def selectionFlags(self, *args) -> "OdGiSubEntityTraits::SelectionFlags":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_selectionFlags(self, *args)

    def secondaryTrueColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_secondaryTrueColor(self, *args)

    def lineStyleModifiers(self, *args) -> "OdGiDgLinetypeModifiers const *":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_lineStyleModifiers(self, *args)

    def fill(self, *args) -> "OdGiFill const *":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_fill(self, *args)

    def auxData(self, *args) -> "OdGiAuxiliaryDataPtr":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_auxData(self, *args)

    def setTrueColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setTrueColor(self, *args)

    def setPlotStyleName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setPlotStyleName(self, *args)

    def setColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setColor(self, *args)

    def setLayer(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setLayer(self, *args)

    def setLineType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setLineType(self, *args)

    def setFillType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setFillType(self, *args)

    def setLineWeight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setLineWeight(self, *args)

    def setLineTypeScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setLineTypeScale(self, *args)

    def setThickness(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setThickness(self, *args)

    def setSelectionMarker(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setSelectionMarker(self, *args)

    def setMaterial(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setMaterial(self, *args)

    def setMapper(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setMapper(self, *args)

    def setVisualStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setVisualStyle(self, *args)

    def setTransparency(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setTransparency(self, *args)

    def setDrawFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setDrawFlags(self, *args)

    def setLockFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setLockFlags(self, *args)

    def setSelectionGeom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setSelectionGeom(self, *args)

    def setShadowFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setShadowFlags(self, *args)

    def setSectionable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setSectionable(self, *args)

    def setSelectionFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setSelectionFlags(self, *args)

    def setSecondaryTrueColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setSecondaryTrueColor(self, *args)

    def setLineStyleModifiers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setLineStyleModifiers(self, *args)

    def setFill(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setFill(self, *args)

    def setAuxData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_setAuxData(self, *args)

    def context(self, *args) -> "OdGiContext *":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_context(self, *args)

    def subEntityTraits(self, *args) -> "OdGiSubEntityTraits &":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_subEntityTraits(self, *args)

    def rawGeometry(self, *args) -> "OdGiGeometry &":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_rawGeometry(self, *args)

    def numberOfIsolines(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiWorldDrawImpl_numberOfIsolines(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiWorldDrawImpl

# Register OdGiWorldDrawImpl in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiWorldDrawImpl_swigregister(OdGiWorldDrawImpl)

def OdGiWorldDrawImpl_dummyGiContext(*args) -> "OdGiContext *":
    return _ODA_Kernel_Py3.OdGiWorldDrawImpl_dummyGiContext(*args)

class OdGiBaseVectorizer(OdGiWorldDrawImpl, OdGiViewportDraw_, OdGiConveyorContext, OdGiDeviation, OdGiSubEntityTraitsChangedFlags):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def isEntityTraitsDataChanged(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_isEntityTraitsDataChanged(self, *args)

    def setEntityTraitsDataChanged(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setEntityTraitsDataChanged(self, *args)

    def clearEntityTraitsDataChanged(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_clearEntityTraitsDataChanged(self, *args)

    def effectivelyVisible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_effectivelyVisible(self, *args)

    def giContext(self, *args) -> "OdGiContext &":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_giContext(self, *args)

    def currentDrawableDesc(self, *args) -> "OdGiDrawableDesc const *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_currentDrawableDesc(self, *args)

    def currentDrawable(self, *args) -> "OdGiDrawable const *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_currentDrawable(self, *args)

    def giViewport(self, *args) -> "OdGiViewport const *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_giViewport(self, *args)

    def gsView(self, *args) -> "OdGsView const *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_gsView(self, *args)
    m_pDrawableDesc = property(_ODA_Kernel_Py3.OdGiBaseVectorizer_m_pDrawableDesc_get, _ODA_Kernel_Py3.OdGiBaseVectorizer_m_pDrawableDesc_set)
    m_nDrawableAttributes = property(_ODA_Kernel_Py3.OdGiBaseVectorizer_m_nDrawableAttributes_get, _ODA_Kernel_Py3.OdGiBaseVectorizer_m_nDrawableAttributes_set)

    def drawableDesc(self, *args) -> "OdGiDrawableDesc const *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_drawableDesc(self, *args)

    def effectiveTraits(self, *args) -> "OdGiSubEntityTraitsData const &":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_effectiveTraits(self, *args)

    def setEffectiveTraits(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setEffectiveTraits(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiBaseVectorizer

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_queryX(self, *args)

    def output(self, *args) -> "OdGiConveyorOutput &":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_output(self, *args)

    def setEyeToOutputTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setEyeToOutputTransform(self, *args)

    def eyeToOutputTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_eyeToOutputTransform(self, *args)

    def drawContext(self, *args) -> "OdGiConveyorContext const *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_drawContext(self, *args)

    def beginViewVectorization(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_beginViewVectorization(self, *args)

    def endViewVectorization(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_endViewVectorization(self, *args)

    def setTrueColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setTrueColor(self, *args)

    def setColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setColor(self, *args)

    def setLayer(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setLayer(self, *args)

    def setLineType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setLineType(self, *args)

    def setFillType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setFillType(self, *args)

    def setLineWeight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setLineWeight(self, *args)

    def setLineTypeScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setLineTypeScale(self, *args)

    def setThickness(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setThickness(self, *args)

    def setPlotStyleName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setPlotStyleName(self, *args)

    def setSelectionMarker(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setSelectionMarker(self, *args)

    def setMaterial(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setMaterial(self, *args)

    def setMapper(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setMapper(self, *args)

    def setVisualStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setVisualStyle(self, *args)

    def setTransparency(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setTransparency(self, *args)

    def setDrawFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setDrawFlags(self, *args)

    def setLockFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setLockFlags(self, *args)

    def setSelectionGeom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setSelectionGeom(self, *args)

    def setShadowFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setShadowFlags(self, *args)

    def setSectionable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setSectionable(self, *args)

    def setSelectionFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setSelectionFlags(self, *args)

    def setSecondaryTrueColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setSecondaryTrueColor(self, *args)

    def setLineStyleModifiers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setLineStyleModifiers(self, *args)

    def setFill(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setFill(self, *args)

    def setAuxData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setAuxData(self, *args)

    def context(self, *args) -> "OdGiContext *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_context(self, *args)

    def regenAbort(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_regenAbort(self, *args)

    def subEntityTraits(self, *args) -> "OdGiSubEntityTraits &":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_subEntityTraits(self, *args)

    def deviation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_deviation(self, *args)

    def regenType(self, *args) -> "OdGiRegenType":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_regenType(self, *args)

    def numberOfIsolines(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_numberOfIsolines(self, *args)

    def rawGeometry(self, *args) -> "OdGiGeometry &":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_rawGeometry(self, *args)

    def isDragging(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_isDragging(self, *args)

    def drawContextFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_drawContextFlags(self, *args)

    def setDrawContextFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setDrawContextFlags(self, *args)

    def sequenceNumber(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_sequenceNumber(self, *args)

    def isValidId(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_isValidId(self, *args)

    def viewportObjectId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_viewportObjectId(self, *args)

    def viewport(self, *args) -> "OdGiViewport &":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_viewport(self, *args)

    def circle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_circle(self, *args)

    def circularArc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_circularArc(self, *args)

    def polyline(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_polyline(self, *args)

    def polygon(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_polygon(self, *args)

    def pline(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_pline(self, *args)

    def shape(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_shape(self, *args)

    def text(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_text(self, *args)

    def xline(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_xline(self, *args)

    def ray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_ray(self, *args)

    def nurbs(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_nurbs(self, *args)

    def ellipArc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_ellipArc(self, *args)

    def mesh(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_mesh(self, *args)

    def shell(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_shell(self, *args)

    def image(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_image(self, *args)

    def edge(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_edge(self, *args)

    def polypoint(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_polypoint(self, *args)

    def polyPolygon(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_polyPolygon(self, *args)

    def rowOfDots(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_rowOfDots(self, *args)

    def pointCloud(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_pointCloud(self, *args)

    def pushClipBoundary(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_pushClipBoundary(self, *args)

    def drawClipBoundary(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_drawClipBoundary(self, *args)

    def popClipBoundary(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_popClipBoundary(self, *args)

    def isClipping(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_isClipping(self, *args)

    def pushModelTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_pushModelTransform(self, *args)

    def popModelTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_popModelTransform(self, *args)

    def getModelToWorldTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_getModelToWorldTransform(self, *args)

    def getWorldToModelTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_getWorldToModelTransform(self, *args)

    def isXrefOverride(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_isXrefOverride(self, *args)

    def setXrefOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setXrefOverride(self, *args)

    def draw(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_draw(self, *args)

    def currentGiPath(self, *args) -> "OdGiPathNode const *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_currentGiPath(self, *args)

    def setAttributes(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setAttributes(self, *args)

    def drawableAttributes(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_drawableAttributes(self, *args)

    def needDraw(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_needDraw(self, *args)

    def doDraw(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_doDraw(self, *args)

    def setExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setExtents(self, *args)

    def startAttributesSegment(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_startAttributesSegment(self, *args)

    def isAttributesSegmentEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_isAttributesSegmentEnabled(self, *args)

    def rasterImageDc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_rasterImageDc(self, *args)

    def metafileDc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_metafileDc(self, *args)

    def polylineEye(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_polylineEye(self, *args)

    def polygonEye(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_polygonEye(self, *args)

    def polylineDc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_polylineDc(self, *args)

    def polygonDc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_polygonDc(self, *args)

    def polylineCs(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_polylineCs(self, *args)

    def polygonCs(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_polygonCs(self, *args)

    def onTraitsModified(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_onTraitsModified(self, *args)

    def modelDeviation(self, *args) -> "OdGiDeviation const &":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_modelDeviation(self, *args)

    def worldDeviation(self, *args) -> "OdGiDeviation const &":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_worldDeviation(self, *args)

    def eyeDeviation(self, *args) -> "OdGiDeviation const &":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_eyeDeviation(self, *args)

    def effectiveMaterialTraitsData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_effectiveMaterialTraitsData(self, *args)

    def setEffectiveMaterialTraitsData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setEffectiveMaterialTraitsData(self, *args)

    def selectionMarker(self, *args) -> "OdGsMarker":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_selectionMarker(self, *args)

    def byBlockTraits(self, *args) -> "OdGiSubEntityTraitsData const *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_byBlockTraits(self, *args)

    def setByBlockTraits(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_setByBlockTraits(self, *args)

    def saveByBlockTraits(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiBaseVectorizer_saveByBlockTraits(self, *args)

# Register OdGiBaseVectorizer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiBaseVectorizer_swigregister(OdGiBaseVectorizer)

class OdGiExtCalc(OdGiBaseVectorizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiExtCalc

    def regenType(self, *args) -> "OdGiRegenType":
        return _ODA_Kernel_Py3.OdGiExtCalc_regenType(self, *args)

    def regenAbort(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiExtCalc_regenAbort(self, *args)

    def draw(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtCalc_draw(self, *args)

    def setExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtCalc_setExtents(self, *args)

    def resetExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtCalc_resetExtents(self, *args)

    def getExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtCalc_getExtents(self, *args)

    def setContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtCalc_setContext(self, *args)

    def effectiveTraits(self, *args) -> "OdGiSubEntityTraitsData const &":
        return _ODA_Kernel_Py3.OdGiExtCalc_effectiveTraits(self, *args)

    def affectTraits(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtCalc_affectTraits(self, *args)

# Register OdGiExtCalc in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiExtCalc_swigregister(OdGiExtCalc)


def odgiCalculateTextBasis(*args) -> "void":
    return _ODA_Kernel_Py3.odgiCalculateTextBasis(*args)

def odgiPrepareTextStyle(*args) -> "OdGiTextStyle const *":
    return _ODA_Kernel_Py3.odgiPrepareTextStyle(*args)

def odgiGetTextExtentsCacheCapacity(*args) -> "size_t":
    return _ODA_Kernel_Py3.odgiGetTextExtentsCacheCapacity(*args)

def odgiSetTextExtentsCacheCapacity(*args) -> "void":
    return _ODA_Kernel_Py3.odgiSetTextExtentsCacheCapacity(*args)
class OdBrMesh2dControl(OdBrMeshControl):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrMesh2dControl_swiginit(self, _ODA_Kernel_Py3.new_OdBrMesh2dControl(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrMesh2dControl

    def setMaxAspectRatio(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMesh2dControl_setMaxAspectRatio(self, *args)

    def getMaxAspectRatio(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMesh2dControl_getMaxAspectRatio(self, *args)

    def setElementShape(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMesh2dControl_setElementShape(self, *args)

    def getElementShape(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMesh2dControl_getElementShape(self, *args)

# Register OdBrMesh2dControl in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrMesh2dControl_swigregister(OdBrMesh2dControl)
OdBrMesh2dControl.OdBrMesh2dControlDefault = _ODA_Kernel_Py3.cvar.OdBrMesh2dControl_OdBrMesh2dControlDefault

class OdBrMeshEntity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrMeshEntity

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrMeshEntity_isEqualTo(self, *args)

    def isNull(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrMeshEntity_isNull(self, *args)

    def getEntityAssociated(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMeshEntity_getEntityAssociated(self, *args)

    def setValidationLevel(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMeshEntity_setValidationLevel(self, *args)

    def getValidationLevel(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMeshEntity_getValidationLevel(self, *args)

    def brepChanged(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrMeshEntity_brepChanged(self, *args)

# Register OdBrMeshEntity in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrMeshEntity_swigregister(OdBrMeshEntity)

class OdGiFaceStyle(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiFaceStyle >":
        return _ODA_Kernel_Py3.OdGiFaceStyle_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiFaceStyle_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiFaceStyle_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiFaceStyle_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiFaceStyle >":
        return _ODA_Kernel_Py3.OdGiFaceStyle_createObject(*args)
    kInvisible = _ODA_Kernel_Py3.OdGiFaceStyle_kInvisible
    kConstant = _ODA_Kernel_Py3.OdGiFaceStyle_kConstant
    kPhong = _ODA_Kernel_Py3.OdGiFaceStyle_kPhong
    kGooch = _ODA_Kernel_Py3.OdGiFaceStyle_kGooch
    kNoLighting = _ODA_Kernel_Py3.OdGiFaceStyle_kNoLighting
    kPerFaceLighting = _ODA_Kernel_Py3.OdGiFaceStyle_kPerFaceLighting
    kPerVertexLighting = _ODA_Kernel_Py3.OdGiFaceStyle_kPerVertexLighting
    kPerPixelLighting = _ODA_Kernel_Py3.OdGiFaceStyle_kPerPixelLighting
    kNoColorMode = _ODA_Kernel_Py3.OdGiFaceStyle_kNoColorMode
    kObjectColor = _ODA_Kernel_Py3.OdGiFaceStyle_kObjectColor
    kBackgroundColor = _ODA_Kernel_Py3.OdGiFaceStyle_kBackgroundColor
    kMono = _ODA_Kernel_Py3.OdGiFaceStyle_kMono
    kTint = _ODA_Kernel_Py3.OdGiFaceStyle_kTint
    kDesaturate = _ODA_Kernel_Py3.OdGiFaceStyle_kDesaturate
    kNoFaceModifiers = _ODA_Kernel_Py3.OdGiFaceStyle_kNoFaceModifiers
    kOpacity = _ODA_Kernel_Py3.OdGiFaceStyle_kOpacity
    kSpecular = _ODA_Kernel_Py3.OdGiFaceStyle_kSpecular

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceStyle_set(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFaceStyle___eq__(self, *args)

    def setLightingModel(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceStyle_setLightingModel(self, *args)

    def lightingModel(self, *args) -> "OdGiFaceStyle::LightingModel":
        return _ODA_Kernel_Py3.OdGiFaceStyle_lightingModel(self, *args)

    def setLightingQuality(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceStyle_setLightingQuality(self, *args)

    def lightingQuality(self, *args) -> "OdGiFaceStyle::LightingQuality":
        return _ODA_Kernel_Py3.OdGiFaceStyle_lightingQuality(self, *args)

    def setFaceColorMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceStyle_setFaceColorMode(self, *args)

    def faceColorMode(self, *args) -> "OdGiFaceStyle::FaceColorMode":
        return _ODA_Kernel_Py3.OdGiFaceStyle_faceColorMode(self, *args)

    def setFaceModifiers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceStyle_setFaceModifiers(self, *args)

    def setFaceModifierFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceStyle_setFaceModifierFlag(self, *args)

    def faceModifiers(self, *args) -> "unsigned long":
        return _ODA_Kernel_Py3.OdGiFaceStyle_faceModifiers(self, *args)

    def isFaceModifierFlagSet(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFaceStyle_isFaceModifierFlagSet(self, *args)

    def setOpacityLevel(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceStyle_setOpacityLevel(self, *args)

    def opacityLevel(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiFaceStyle_opacityLevel(self, *args)

    def setSpecularAmount(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceStyle_setSpecularAmount(self, *args)

    def specularAmount(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiFaceStyle_specularAmount(self, *args)

    def setMonoColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceStyle_setMonoColor(self, *args)

    def monoColor(self, *args) -> "OdCmColorBase &":
        return _ODA_Kernel_Py3.OdGiFaceStyle_monoColor(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiFaceStyle

# Register OdGiFaceStyle in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiFaceStyle_swigregister(OdGiFaceStyle)

def OdGiFaceStyle_cast(*args) -> "OdSmartPtr< OdGiFaceStyle >":
    return _ODA_Kernel_Py3.OdGiFaceStyle_cast(*args)

def OdGiFaceStyle_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiFaceStyle_desc(*args)

def OdGiFaceStyle_createObject(*args) -> "OdSmartPtr< OdGiFaceStyle >":
    return _ODA_Kernel_Py3.OdGiFaceStyle_createObject(*args)

class OdGiEdgeStyle(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiEdgeStyle >":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiEdgeStyle >":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_createObject(*args)
    kNoEdges = _ODA_Kernel_Py3.OdGiEdgeStyle_kNoEdges
    kIsolines = _ODA_Kernel_Py3.OdGiEdgeStyle_kIsolines
    kFacetEdges = _ODA_Kernel_Py3.OdGiEdgeStyle_kFacetEdges
    kNoEdgeStyle = _ODA_Kernel_Py3.OdGiEdgeStyle_kNoEdgeStyle
    kVisible = _ODA_Kernel_Py3.OdGiEdgeStyle_kVisible
    kSilhouette = _ODA_Kernel_Py3.OdGiEdgeStyle_kSilhouette
    kObscured = _ODA_Kernel_Py3.OdGiEdgeStyle_kObscured
    kIntersection = _ODA_Kernel_Py3.OdGiEdgeStyle_kIntersection
    kNoEdgeModifiers = _ODA_Kernel_Py3.OdGiEdgeStyle_kNoEdgeModifiers
    kOverhang = _ODA_Kernel_Py3.OdGiEdgeStyle_kOverhang
    kJitter = _ODA_Kernel_Py3.OdGiEdgeStyle_kJitter
    kWidth = _ODA_Kernel_Py3.OdGiEdgeStyle_kWidth
    kColor = _ODA_Kernel_Py3.OdGiEdgeStyle_kColor
    kHaloGap = _ODA_Kernel_Py3.OdGiEdgeStyle_kHaloGap
    kLinetype = _ODA_Kernel_Py3.OdGiEdgeStyle_kLinetype
    kAlwaysOnTop = _ODA_Kernel_Py3.OdGiEdgeStyle_kAlwaysOnTop
    kOpacity = _ODA_Kernel_Py3.OdGiEdgeStyle_kOpacity
    kWiggle = _ODA_Kernel_Py3.OdGiEdgeStyle_kWiggle
    kTexture = _ODA_Kernel_Py3.OdGiEdgeStyle_kTexture
    kJitterLow = _ODA_Kernel_Py3.OdGiEdgeStyle_kJitterLow
    kJitterMedium = _ODA_Kernel_Py3.OdGiEdgeStyle_kJitterMedium
    kJitterHigh = _ODA_Kernel_Py3.OdGiEdgeStyle_kJitterHigh
    kWiggleLow = _ODA_Kernel_Py3.OdGiEdgeStyle_kWiggleLow
    kWiggleMedium = _ODA_Kernel_Py3.OdGiEdgeStyle_kWiggleMedium
    kWiggleHigh = _ODA_Kernel_Py3.OdGiEdgeStyle_kWiggleHigh
    kSolid = _ODA_Kernel_Py3.OdGiEdgeStyle_kSolid
    kDashed = _ODA_Kernel_Py3.OdGiEdgeStyle_kDashed
    kDotted = _ODA_Kernel_Py3.OdGiEdgeStyle_kDotted
    kShortDash = _ODA_Kernel_Py3.OdGiEdgeStyle_kShortDash
    kMediumDash = _ODA_Kernel_Py3.OdGiEdgeStyle_kMediumDash
    kLongDash = _ODA_Kernel_Py3.OdGiEdgeStyle_kLongDash
    kDoubleShortDash = _ODA_Kernel_Py3.OdGiEdgeStyle_kDoubleShortDash
    kDoubleMediumDash = _ODA_Kernel_Py3.OdGiEdgeStyle_kDoubleMediumDash
    kDoubleLongDash = _ODA_Kernel_Py3.OdGiEdgeStyle_kDoubleLongDash
    kMediumLongDash = _ODA_Kernel_Py3.OdGiEdgeStyle_kMediumLongDash
    kSparseDot = _ODA_Kernel_Py3.OdGiEdgeStyle_kSparseDot
    kDefault = _ODA_Kernel_Py3.OdGiEdgeStyle_kDefault
    kAll = _ODA_Kernel_Py3.OdGiEdgeStyle_kAll

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_set(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiEdgeStyle___eq__(self, *args)

    def setEdgeModel(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setEdgeModel(self, *args)

    def edgeModel(self, *args) -> "OdGiEdgeStyle::EdgeModel":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_edgeModel(self, *args)

    def setEdgeStyles(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setEdgeStyles(self, *args)

    def setEdgeStyleFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setEdgeStyleFlag(self, *args)

    def edgeStyles(self, *args) -> "unsigned long":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_edgeStyles(self, *args)

    def isEdgeStyleFlagSet(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_isEdgeStyleFlagSet(self, *args)

    def setIntersectionColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setIntersectionColor(self, *args)

    def intersectionColor(self, *args) -> "OdCmColorBase &":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_intersectionColor(self, *args)

    def setObscuredColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setObscuredColor(self, *args)

    def obscuredColor(self, *args) -> "OdCmColorBase &":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_obscuredColor(self, *args)

    def setObscuredLinetype(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setObscuredLinetype(self, *args)

    def obscuredLinetype(self, *args) -> "OdGiEdgeStyle::LineType":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_obscuredLinetype(self, *args)

    def setIntersectionLinetype(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setIntersectionLinetype(self, *args)

    def intersectionLinetype(self, *args) -> "OdGiEdgeStyle::LineType":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_intersectionLinetype(self, *args)

    def setCreaseAngle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setCreaseAngle(self, *args)

    def creaseAngle(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_creaseAngle(self, *args)

    def setEdgeModifiers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setEdgeModifiers(self, *args)

    def setEdgeModifierFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setEdgeModifierFlag(self, *args)

    def edgeModifiers(self, *args) -> "unsigned long":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_edgeModifiers(self, *args)

    def isEdgeModifierFlagSet(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_isEdgeModifierFlagSet(self, *args)

    def setEdgeColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setEdgeColor(self, *args)

    def edgeColor(self, *args) -> "OdCmColorBase &":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_edgeColor(self, *args)

    def setOpacityLevel(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setOpacityLevel(self, *args)

    def opacityLevel(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_opacityLevel(self, *args)

    def setEdgeWidth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setEdgeWidth(self, *args)

    def edgeWidth(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_edgeWidth(self, *args)

    def setOverhangAmount(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setOverhangAmount(self, *args)

    def overhangAmount(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_overhangAmount(self, *args)

    def setJitterAmount(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setJitterAmount(self, *args)

    def jitterAmount(self, *args) -> "OdGiEdgeStyle::JitterAmount":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_jitterAmount(self, *args)

    def setWiggleAmount(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setWiggleAmount(self, *args)

    def wiggleAmount(self, *args) -> "OdGiEdgeStyle::WiggleAmount":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_wiggleAmount(self, *args)

    def setSilhouetteColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setSilhouetteColor(self, *args)

    def silhouetteColor(self, *args) -> "OdCmColorBase &":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_silhouetteColor(self, *args)

    def setSilhouetteWidth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setSilhouetteWidth(self, *args)

    def silhouetteWidth(self, *args) -> "short":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_silhouetteWidth(self, *args)

    def setHaloGap(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setHaloGap(self, *args)

    def haloGap(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_haloGap(self, *args)

    def setIsolines(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setIsolines(self, *args)

    def isolines(self, *args) -> "unsigned short":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_isolines(self, *args)

    def setHidePrecision(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setHidePrecision(self, *args)

    def hidePrecision(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_hidePrecision(self, *args)

    def setEdgeStyleApply(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_setEdgeStyleApply(self, *args)

    def edgeStyleApply(self, *args) -> "OdGiEdgeStyle::EdgeStyleApply":
        return _ODA_Kernel_Py3.OdGiEdgeStyle_edgeStyleApply(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiEdgeStyle

# Register OdGiEdgeStyle in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiEdgeStyle_swigregister(OdGiEdgeStyle)

def OdGiEdgeStyle_cast(*args) -> "OdSmartPtr< OdGiEdgeStyle >":
    return _ODA_Kernel_Py3.OdGiEdgeStyle_cast(*args)

def OdGiEdgeStyle_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiEdgeStyle_desc(*args)

def OdGiEdgeStyle_createObject(*args) -> "OdSmartPtr< OdGiEdgeStyle >":
    return _ODA_Kernel_Py3.OdGiEdgeStyle_createObject(*args)

class OdGiDisplayStyle(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiDisplayStyle >":
        return _ODA_Kernel_Py3.OdGiDisplayStyle_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiDisplayStyle_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiDisplayStyle_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiDisplayStyle_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiDisplayStyle >":
        return _ODA_Kernel_Py3.OdGiDisplayStyle_createObject(*args)
    kNone = _ODA_Kernel_Py3.OdGiDisplayStyle_kNone
    kBackgrounds = _ODA_Kernel_Py3.OdGiDisplayStyle_kBackgrounds
    kLights = _ODA_Kernel_Py3.OdGiDisplayStyle_kLights
    kMaterials = _ODA_Kernel_Py3.OdGiDisplayStyle_kMaterials
    kTextures = _ODA_Kernel_Py3.OdGiDisplayStyle_kTextures
    kShadowsNone = _ODA_Kernel_Py3.OdGiDisplayStyle_kShadowsNone
    kShadowsGroundPlane = _ODA_Kernel_Py3.OdGiDisplayStyle_kShadowsGroundPlane
    kShadowsFull = _ODA_Kernel_Py3.OdGiDisplayStyle_kShadowsFull
    kShadowsFullAndGround = _ODA_Kernel_Py3.OdGiDisplayStyle_kShadowsFullAndGround

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDisplayStyle_set(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDisplayStyle___eq__(self, *args)

    def setDisplaySettings(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDisplayStyle_setDisplaySettings(self, *args)

    def setDisplaySettingsFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDisplayStyle_setDisplaySettingsFlag(self, *args)

    def displaySettings(self, *args) -> "unsigned long":
        return _ODA_Kernel_Py3.OdGiDisplayStyle_displaySettings(self, *args)

    def isDisplaySettingsFlagSet(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDisplayStyle_isDisplaySettingsFlagSet(self, *args)

    def setBrightness(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDisplayStyle_setBrightness(self, *args)

    def brightness(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiDisplayStyle_brightness(self, *args)

    def setShadowType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDisplayStyle_setShadowType(self, *args)

    def shadowType(self, *args) -> "OdGiDisplayStyle::ShadowType":
        return _ODA_Kernel_Py3.OdGiDisplayStyle_shadowType(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDisplayStyle

# Register OdGiDisplayStyle in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDisplayStyle_swigregister(OdGiDisplayStyle)

def OdGiDisplayStyle_cast(*args) -> "OdSmartPtr< OdGiDisplayStyle >":
    return _ODA_Kernel_Py3.OdGiDisplayStyle_cast(*args)

def OdGiDisplayStyle_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiDisplayStyle_desc(*args)

def OdGiDisplayStyle_createObject(*args) -> "OdSmartPtr< OdGiDisplayStyle >":
    return _ODA_Kernel_Py3.OdGiDisplayStyle_createObject(*args)

kInvalidProperty = _ODA_Kernel_Py3.kInvalidProperty
kFaceLightingModel = _ODA_Kernel_Py3.kFaceLightingModel
kFaceLightingQuality = _ODA_Kernel_Py3.kFaceLightingQuality
kFaceColorMode = _ODA_Kernel_Py3.kFaceColorMode
kFaceModifiers = _ODA_Kernel_Py3.kFaceModifiers
kFaceOpacity = _ODA_Kernel_Py3.kFaceOpacity
kFaceSpecular = _ODA_Kernel_Py3.kFaceSpecular
kFaceMonoColor = _ODA_Kernel_Py3.kFaceMonoColor
kEdgeModel = _ODA_Kernel_Py3.kEdgeModel
kEdgeStyles = _ODA_Kernel_Py3.kEdgeStyles
kEdgeIntersectionColor = _ODA_Kernel_Py3.kEdgeIntersectionColor
kEdgeObscuredColor = _ODA_Kernel_Py3.kEdgeObscuredColor
kEdgeObscuredLinePattern = _ODA_Kernel_Py3.kEdgeObscuredLinePattern
kEdgeIntersectionLinePattern = _ODA_Kernel_Py3.kEdgeIntersectionLinePattern
kEdgeCreaseAngle = _ODA_Kernel_Py3.kEdgeCreaseAngle
kEdgeModifiers = _ODA_Kernel_Py3.kEdgeModifiers
kEdgeColor = _ODA_Kernel_Py3.kEdgeColor
kEdgeOpacity = _ODA_Kernel_Py3.kEdgeOpacity
kEdgeWidth = _ODA_Kernel_Py3.kEdgeWidth
kEdgeOverhang = _ODA_Kernel_Py3.kEdgeOverhang
kEdgeJitterAmount = _ODA_Kernel_Py3.kEdgeJitterAmount
kEdgeSilhouetteColor = _ODA_Kernel_Py3.kEdgeSilhouetteColor
kEdgeSilhouetteWidth = _ODA_Kernel_Py3.kEdgeSilhouetteWidth
kEdgeHaloGap = _ODA_Kernel_Py3.kEdgeHaloGap
kEdgeIsolines = _ODA_Kernel_Py3.kEdgeIsolines
kEdgeHidePrecision = _ODA_Kernel_Py3.kEdgeHidePrecision
kDisplayStyles = _ODA_Kernel_Py3.kDisplayStyles
kDisplayBrightness = _ODA_Kernel_Py3.kDisplayBrightness
kDisplayShadowType = _ODA_Kernel_Py3.kDisplayShadowType
kUseDrawOrder = _ODA_Kernel_Py3.kUseDrawOrder
kViewportTransparency = _ODA_Kernel_Py3.kViewportTransparency
kLightingEnabled = _ODA_Kernel_Py3.kLightingEnabled
kPosterizeEffect = _ODA_Kernel_Py3.kPosterizeEffect
kMonoEffect = _ODA_Kernel_Py3.kMonoEffect
kBlurEffect = _ODA_Kernel_Py3.kBlurEffect
kPencilEffect = _ODA_Kernel_Py3.kPencilEffect
kBloomEffect = _ODA_Kernel_Py3.kBloomEffect
kPastelEffect = _ODA_Kernel_Py3.kPastelEffect
kBlurAmount = _ODA_Kernel_Py3.kBlurAmount
kPencilAngle = _ODA_Kernel_Py3.kPencilAngle
kPencilScale = _ODA_Kernel_Py3.kPencilScale
kPencilPattern = _ODA_Kernel_Py3.kPencilPattern
kPencilColor = _ODA_Kernel_Py3.kPencilColor
kBloomThreshold = _ODA_Kernel_Py3.kBloomThreshold
kBloomRadius = _ODA_Kernel_Py3.kBloomRadius
kTintColor = _ODA_Kernel_Py3.kTintColor
kFaceAdjustment = _ODA_Kernel_Py3.kFaceAdjustment
kPostContrast = _ODA_Kernel_Py3.kPostContrast
kPostBrightness = _ODA_Kernel_Py3.kPostBrightness
kPostPower = _ODA_Kernel_Py3.kPostPower
kTintEffect = _ODA_Kernel_Py3.kTintEffect
kBloomIntensity = _ODA_Kernel_Py3.kBloomIntensity
kColor = _ODA_Kernel_Py3.kColor
kTransparency = _ODA_Kernel_Py3.kTransparency
kEdgeWiggleAmount = _ODA_Kernel_Py3.kEdgeWiggleAmount
kEdgeTexturePath = _ODA_Kernel_Py3.kEdgeTexturePath
kDepthOfField = _ODA_Kernel_Py3.kDepthOfField
kFocusDistance = _ODA_Kernel_Py3.kFocusDistance
kFocusWidth = _ODA_Kernel_Py3.kFocusWidth
kPropertyCount = _ODA_Kernel_Py3.kPropertyCount
kInvisible = _ODA_Kernel_Py3.kInvisible
kConstant = _ODA_Kernel_Py3.kConstant
kPhong = _ODA_Kernel_Py3.kPhong
kGooch = _ODA_Kernel_Py3.kGooch
kZebra = _ODA_Kernel_Py3.kZebra
kNoLighting = _ODA_Kernel_Py3.kNoLighting
kPerFaceLighting = _ODA_Kernel_Py3.kPerFaceLighting
kPerVertexLighting = _ODA_Kernel_Py3.kPerVertexLighting
kPerPixelLighting = _ODA_Kernel_Py3.kPerPixelLighting
kNoColorMode = _ODA_Kernel_Py3.kNoColorMode
kObjectColor = _ODA_Kernel_Py3.kObjectColor
kBackgroundColor = _ODA_Kernel_Py3.kBackgroundColor
kMono = _ODA_Kernel_Py3.kMono
kTint = _ODA_Kernel_Py3.kTint
kDesaturate = _ODA_Kernel_Py3.kDesaturate
kBackgroundTexture = _ODA_Kernel_Py3.kBackgroundTexture
kNoFaceModifiers = _ODA_Kernel_Py3.kNoFaceModifiers
kFaceOpacityFlag = _ODA_Kernel_Py3.kFaceOpacityFlag
kSpecularFlag = _ODA_Kernel_Py3.kSpecularFlag
OdGiVisualStyleProperties_EdgeModel_kNoEdges = _ODA_Kernel_Py3.OdGiVisualStyleProperties_EdgeModel_kNoEdges
OdGiVisualStyleProperties_EdgeModel_kIsolines = _ODA_Kernel_Py3.OdGiVisualStyleProperties_EdgeModel_kIsolines
OdGiVisualStyleProperties_EdgeModel_kFacetEdges = _ODA_Kernel_Py3.OdGiVisualStyleProperties_EdgeModel_kFacetEdges
kNoEdgeStyle = _ODA_Kernel_Py3.kNoEdgeStyle
kVisibleFlag = _ODA_Kernel_Py3.kVisibleFlag
kSilhouetteFlag = _ODA_Kernel_Py3.kSilhouetteFlag
kObscuredFlag = _ODA_Kernel_Py3.kObscuredFlag
kIntersectionFlag = _ODA_Kernel_Py3.kIntersectionFlag
kNoEdgeModifiers = _ODA_Kernel_Py3.kNoEdgeModifiers
kEdgeOverhangFlag = _ODA_Kernel_Py3.kEdgeOverhangFlag
kEdgeJitterFlag = _ODA_Kernel_Py3.kEdgeJitterFlag
kEdgeWidthFlag = _ODA_Kernel_Py3.kEdgeWidthFlag
kEdgeColorFlag = _ODA_Kernel_Py3.kEdgeColorFlag
kEdgeHaloGapFlag = _ODA_Kernel_Py3.kEdgeHaloGapFlag
kAlwaysOnTopFlag = _ODA_Kernel_Py3.kAlwaysOnTopFlag
kEdgeOpacityFlag = _ODA_Kernel_Py3.kEdgeOpacityFlag
kEdgeWiggleFlag = _ODA_Kernel_Py3.kEdgeWiggleFlag
kEdgeTextureFlag = _ODA_Kernel_Py3.kEdgeTextureFlag
kJitterLow = _ODA_Kernel_Py3.kJitterLow
kJitterMedium = _ODA_Kernel_Py3.kJitterMedium
kJitterHigh = _ODA_Kernel_Py3.kJitterHigh
kWiggleLow = _ODA_Kernel_Py3.kWiggleLow
kWiggleMedium = _ODA_Kernel_Py3.kWiggleMedium
kWiggleHigh = _ODA_Kernel_Py3.kWiggleHigh
kSolid = _ODA_Kernel_Py3.kSolid
kDashedLine = _ODA_Kernel_Py3.kDashedLine
kDotted = _ODA_Kernel_Py3.kDotted
kShortDash = _ODA_Kernel_Py3.kShortDash
kMediumDash = _ODA_Kernel_Py3.kMediumDash
kLongDash = _ODA_Kernel_Py3.kLongDash
kDoubleShortDash = _ODA_Kernel_Py3.kDoubleShortDash
kDoubleMediumDash = _ODA_Kernel_Py3.kDoubleMediumDash
kDoubleLongDash = _ODA_Kernel_Py3.kDoubleLongDash
kMediumLongDash = _ODA_Kernel_Py3.kMediumLongDash
kSparseDot = _ODA_Kernel_Py3.kSparseDot
kNoDisplayStyle = _ODA_Kernel_Py3.kNoDisplayStyle
kBackgroundsFlag = _ODA_Kernel_Py3.kBackgroundsFlag
kLightingFlag = _ODA_Kernel_Py3.kLightingFlag
kMaterialsFlag = _ODA_Kernel_Py3.kMaterialsFlag
kTexturesFlag = _ODA_Kernel_Py3.kTexturesFlag
kShadowsNone = _ODA_Kernel_Py3.kShadowsNone
kShadowsGroundPlane = _ODA_Kernel_Py3.kShadowsGroundPlane
kShadowsFull = _ODA_Kernel_Py3.kShadowsFull
kShadowsFullAndGround = _ODA_Kernel_Py3.kShadowsFullAndGround
kInvalidOperation = _ODA_Kernel_Py3.kInvalidOperation
kInherit = _ODA_Kernel_Py3.kInherit
kSet = _ODA_Kernel_Py3.kSet
kDisable = _ODA_Kernel_Py3.kDisable
kEnable = _ODA_Kernel_Py3.kEnable
class OdGiVisualStyle(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiVisualStyle >":
        return _ODA_Kernel_Py3.OdGiVisualStyle_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiVisualStyle_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiVisualStyle_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiVisualStyle_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiVisualStyle >":
        return _ODA_Kernel_Py3.OdGiVisualStyle_createObject(*args)
    kFlat = _ODA_Kernel_Py3.OdGiVisualStyle_kFlat
    kFlatWithEdges = _ODA_Kernel_Py3.OdGiVisualStyle_kFlatWithEdges
    kGouraud = _ODA_Kernel_Py3.OdGiVisualStyle_kGouraud
    kGouraudWithEdges = _ODA_Kernel_Py3.OdGiVisualStyle_kGouraudWithEdges
    k2DWireframe = _ODA_Kernel_Py3.OdGiVisualStyle_k2DWireframe
    k3DWireframe = _ODA_Kernel_Py3.OdGiVisualStyle_k3DWireframe
    kHidden = _ODA_Kernel_Py3.OdGiVisualStyle_kHidden
    kBasic = _ODA_Kernel_Py3.OdGiVisualStyle_kBasic
    kRealistic = _ODA_Kernel_Py3.OdGiVisualStyle_kRealistic
    kConceptual = _ODA_Kernel_Py3.OdGiVisualStyle_kConceptual
    kCustom = _ODA_Kernel_Py3.OdGiVisualStyle_kCustom
    kDim = _ODA_Kernel_Py3.OdGiVisualStyle_kDim
    kBrighten = _ODA_Kernel_Py3.OdGiVisualStyle_kBrighten
    kThicken = _ODA_Kernel_Py3.OdGiVisualStyle_kThicken
    kLinePattern = _ODA_Kernel_Py3.OdGiVisualStyle_kLinePattern
    kFacePattern = _ODA_Kernel_Py3.OdGiVisualStyle_kFacePattern
    kColorChange = _ODA_Kernel_Py3.OdGiVisualStyle_kColorChange
    kFaceOnly = _ODA_Kernel_Py3.OdGiVisualStyle_kFaceOnly
    kEdgeOnly = _ODA_Kernel_Py3.OdGiVisualStyle_kEdgeOnly
    kDisplayOnly = _ODA_Kernel_Py3.OdGiVisualStyle_kDisplayOnly
    kJitterOff = _ODA_Kernel_Py3.OdGiVisualStyle_kJitterOff
    kOverhangOff = _ODA_Kernel_Py3.OdGiVisualStyle_kOverhangOff
    kEdgeColorOff = _ODA_Kernel_Py3.OdGiVisualStyle_kEdgeColorOff
    kShadesOfGray = _ODA_Kernel_Py3.OdGiVisualStyle_kShadesOfGray
    kSketchy = _ODA_Kernel_Py3.OdGiVisualStyle_kSketchy
    kXRay = _ODA_Kernel_Py3.OdGiVisualStyle_kXRay
    kShadedWithEdges = _ODA_Kernel_Py3.OdGiVisualStyle_kShadedWithEdges
    kShaded = _ODA_Kernel_Py3.OdGiVisualStyle_kShaded
    kByViewport = _ODA_Kernel_Py3.OdGiVisualStyle_kByViewport
    kByLayer = _ODA_Kernel_Py3.OdGiVisualStyle_kByLayer
    kByBlock = _ODA_Kernel_Py3.OdGiVisualStyle_kByBlock
    kEmptyStyle = _ODA_Kernel_Py3.OdGiVisualStyle_kEmptyStyle

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiVisualStyle___eq__(self, *args)

    def faceStyle(self, *args) -> "OdGiFaceStyle const &":
        return _ODA_Kernel_Py3.OdGiVisualStyle_faceStyle(self, *args)

    def edgeStyle(self, *args) -> "OdGiEdgeStyle const &":
        return _ODA_Kernel_Py3.OdGiVisualStyle_edgeStyle(self, *args)

    def displayStyle(self, *args) -> "OdGiDisplayStyle const &":
        return _ODA_Kernel_Py3.OdGiVisualStyle_displayStyle(self, *args)

    def setFaceStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVisualStyle_setFaceStyle(self, *args)

    def setEdgeStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVisualStyle_setEdgeStyle(self, *args)

    def setDisplayStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVisualStyle_setDisplayStyle(self, *args)

    def configureForType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVisualStyle_configureForType(self, *args)

    def setType(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiVisualStyle_setType(self, *args)

    def type(self, *args) -> "OdGiVisualStyle::Type":
        return _ODA_Kernel_Py3.OdGiVisualStyle_type(self, *args)

    def setTrait(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiVisualStyle_setTrait(self, *args)

    def trait(self, *args) -> "OdGiVariantPtr":
        return _ODA_Kernel_Py3.OdGiVisualStyle_trait(self, *args)

    def operation(self, *args) -> "OdGiVisualStyle::Operation":
        return _ODA_Kernel_Py3.OdGiVisualStyle_operation(self, *args)

    def setTraitFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiVisualStyle_setTraitFlag(self, *args)

    def traitFlag(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiVisualStyle_traitFlag(self, *args)

    @staticmethod
    def propertyType(*args) -> "OdGiVariant::VariantType":
        return _ODA_Kernel_Py3.OdGiVisualStyle_propertyType(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiVisualStyle

# Register OdGiVisualStyle in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiVisualStyle_swigregister(OdGiVisualStyle)

def OdGiVisualStyle_cast(*args) -> "OdSmartPtr< OdGiVisualStyle >":
    return _ODA_Kernel_Py3.OdGiVisualStyle_cast(*args)

def OdGiVisualStyle_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiVisualStyle_desc(*args)

def OdGiVisualStyle_createObject(*args) -> "OdSmartPtr< OdGiVisualStyle >":
    return _ODA_Kernel_Py3.OdGiVisualStyle_createObject(*args)

def OdGiVisualStyle_propertyType(*args) -> "OdGiVariant::VariantType":
    return _ODA_Kernel_Py3.OdGiVisualStyle_propertyType(*args)

class OdGiVisualStyleTraits(OdGiDrawableTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiVisualStyleTraits >":
        return _ODA_Kernel_Py3.OdGiVisualStyleTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiVisualStyleTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiVisualStyleTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiVisualStyleTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiVisualStyleTraits >":
        return _ODA_Kernel_Py3.OdGiVisualStyleTraits_createObject(*args)

    def setOdGiVisualStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVisualStyleTraits_setOdGiVisualStyle(self, *args)

    def odgiVisualStyle(self, *args) -> "OdGiVisualStyle const &":
        return _ODA_Kernel_Py3.OdGiVisualStyleTraits_odgiVisualStyle(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiVisualStyleTraits

# Register OdGiVisualStyleTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiVisualStyleTraits_swigregister(OdGiVisualStyleTraits)

def OdGiVisualStyleTraits_cast(*args) -> "OdSmartPtr< OdGiVisualStyleTraits >":
    return _ODA_Kernel_Py3.OdGiVisualStyleTraits_cast(*args)

def OdGiVisualStyleTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiVisualStyleTraits_desc(*args)

def OdGiVisualStyleTraits_createObject(*args) -> "OdSmartPtr< OdGiVisualStyleTraits >":
    return _ODA_Kernel_Py3.OdGiVisualStyleTraits_createObject(*args)

class OdGiToneOperatorParameters(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kDaylightOff = _ODA_Kernel_Py3.OdGiToneOperatorParameters_kDaylightOff
    kDaylightOn = _ODA_Kernel_Py3.OdGiToneOperatorParameters_kDaylightOn
    kDaylightAuto = _ODA_Kernel_Py3.OdGiToneOperatorParameters_kDaylightAuto

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiToneOperatorParameters >":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiToneOperatorParameters >":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiToneOperatorParameters

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters___ne__(self, *args)

    def setIsActive(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_setIsActive(self, *args)

    def isActive(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_isActive(self, *args)

    def setChromaticAdaptation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_setChromaticAdaptation(self, *args)

    def chromaticAdaptation(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_chromaticAdaptation(self, *args)

    def setColorDifferentiation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_setColorDifferentiation(self, *args)

    def colorDifferentiation(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_colorDifferentiation(self, *args)

    def setWhiteColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_setWhiteColor(self, *args)

    def whiteColor(self, *args) -> "OdCmEntityColor const &":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_whiteColor(self, *args)

    def setProcessBackground(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_setProcessBackground(self, *args)

    def processBackground(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_processBackground(self, *args)

    def setBrightness(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_setBrightness(self, *args)

    def brightness(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_brightness(self, *args)

    def setContrast(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_setContrast(self, *args)

    def contrast(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_contrast(self, *args)

    def setMidTones(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_setMidTones(self, *args)

    def midTones(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_midTones(self, *args)

    def setExteriorDaylight(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_setExteriorDaylight(self, *args)

    def exteriorDaylight(self, *args) -> "OdGiToneOperatorParameters::ExteriorDaylightMode":
        return _ODA_Kernel_Py3.OdGiToneOperatorParameters_exteriorDaylight(self, *args)

# Register OdGiToneOperatorParameters in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiToneOperatorParameters_swigregister(OdGiToneOperatorParameters)

def OdGiToneOperatorParameters_cast(*args) -> "OdSmartPtr< OdGiToneOperatorParameters >":
    return _ODA_Kernel_Py3.OdGiToneOperatorParameters_cast(*args)

def OdGiToneOperatorParameters_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiToneOperatorParameters_desc(*args)

def OdGiToneOperatorParameters_createObject(*args) -> "OdSmartPtr< OdGiToneOperatorParameters >":
    return _ODA_Kernel_Py3.OdGiToneOperatorParameters_createObject(*args)

class OdGiPhotographicExposureParameters(OdGiToneOperatorParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiPhotographicExposureParameters >":
        return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiPhotographicExposureParameters >":
        return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPhotographicExposureParameters

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters___ne__(self, *args)

    def setExposure(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters_setExposure(self, *args)

    def exposure(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters_exposure(self, *args)

    def setWhitePoint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters_setWhitePoint(self, *args)

    def whitePoint(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters_whitePoint(self, *args)

    def setBrightness(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters_setBrightness(self, *args)

    def whitePointToColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters_whitePointToColor(self, *args)

    @staticmethod
    def convertExposureToBrightness(*args) -> "double":
        return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters_convertExposureToBrightness(*args)

    @staticmethod
    def convertBrightnessToExposure(*args) -> "double":
        return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters_convertBrightnessToExposure(*args)

# Register OdGiPhotographicExposureParameters in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPhotographicExposureParameters_swigregister(OdGiPhotographicExposureParameters)

def OdGiPhotographicExposureParameters_cast(*args) -> "OdSmartPtr< OdGiPhotographicExposureParameters >":
    return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters_cast(*args)

def OdGiPhotographicExposureParameters_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters_desc(*args)

def OdGiPhotographicExposureParameters_createObject(*args) -> "OdSmartPtr< OdGiPhotographicExposureParameters >":
    return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters_createObject(*args)

def OdGiPhotographicExposureParameters_convertExposureToBrightness(*args) -> "double":
    return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters_convertExposureToBrightness(*args)

def OdGiPhotographicExposureParameters_convertBrightnessToExposure(*args) -> "double":
    return _ODA_Kernel_Py3.OdGiPhotographicExposureParameters_convertBrightnessToExposure(*args)

class OdGiViewportTraits(OdGiSubEntityTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiViewportTraits >":
        return _ODA_Kernel_Py3.OdGiViewportTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiViewportTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiViewportTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiViewportTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiViewportTraits >":
        return _ODA_Kernel_Py3.OdGiViewportTraits_createObject(*args)
    kOneDistantLight = _ODA_Kernel_Py3.OdGiViewportTraits_kOneDistantLight
    kTwoDistantLights = _ODA_Kernel_Py3.OdGiViewportTraits_kTwoDistantLights
    kBackLighting = _ODA_Kernel_Py3.OdGiViewportTraits_kBackLighting
    kUserDefinedLight = _ODA_Kernel_Py3.OdGiViewportTraits_kUserDefinedLight

    def isDefaultLightingOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiViewportTraits_isDefaultLightingOn(self, *args)

    def setDefaultLightingOn(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraits_setDefaultLightingOn(self, *args)

    def defaultLightingType(self, *args) -> "OdGiViewportTraits::DefaultLightingType":
        return _ODA_Kernel_Py3.OdGiViewportTraits_defaultLightingType(self, *args)

    def setDefaultLightingType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraits_setDefaultLightingType(self, *args)

    def userDefinedLightDirection(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGiViewportTraits_userDefinedLightDirection(self, *args)

    def setUserDefinedLightDirection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraits_setUserDefinedLightDirection(self, *args)

    def defaultLightingIntensity(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiViewportTraits_defaultLightingIntensity(self, *args)

    def setDefaultLightingIntensity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraits_setDefaultLightingIntensity(self, *args)

    def defaultLightingColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiViewportTraits_defaultLightingColor(self, *args)

    def setDefaultLightingColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraits_setDefaultLightingColor(self, *args)

    def defaultLightingShadowParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraits_defaultLightingShadowParameters(self, *args)

    def setDefaultLightingShadowParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraits_setDefaultLightingShadowParameters(self, *args)

    def setAmbientLightColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraits_setAmbientLightColor(self, *args)

    def ambientLightColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiViewportTraits_ambientLightColor(self, *args)

    def setContrast(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraits_setContrast(self, *args)

    def contrast(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiViewportTraits_contrast(self, *args)

    def setBrightness(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraits_setBrightness(self, *args)

    def brightness(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiViewportTraits_brightness(self, *args)

    def setBackground(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraits_setBackground(self, *args)

    def background(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiViewportTraits_background(self, *args)

    def setRenderEnvironment(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraits_setRenderEnvironment(self, *args)

    def renderEnvironment(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiViewportTraits_renderEnvironment(self, *args)

    def setRenderSettings(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraits_setRenderSettings(self, *args)

    def renderSettings(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiViewportTraits_renderSettings(self, *args)

    def setToneOperatorParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraits_setToneOperatorParameters(self, *args)

    def toneOperatorParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraits_toneOperatorParameters(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiViewportTraits

# Register OdGiViewportTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiViewportTraits_swigregister(OdGiViewportTraits)

def OdGiViewportTraits_cast(*args) -> "OdSmartPtr< OdGiViewportTraits >":
    return _ODA_Kernel_Py3.OdGiViewportTraits_cast(*args)

def OdGiViewportTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiViewportTraits_desc(*args)

def OdGiViewportTraits_createObject(*args) -> "OdSmartPtr< OdGiViewportTraits >":
    return _ODA_Kernel_Py3.OdGiViewportTraits_createObject(*args)

class OdGiRenderEnvironmentTraits(OdGiDrawableTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiRenderEnvironmentTraits >":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiRenderEnvironmentTraits >":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_createObject(*args)

    def setEnable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_setEnable(self, *args)

    def enable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_enable(self, *args)

    def setIsBackground(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_setIsBackground(self, *args)

    def isBackground(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_isBackground(self, *args)

    def setFogColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_setFogColor(self, *args)

    def fogColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_fogColor(self, *args)

    def setNearDistance(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_setNearDistance(self, *args)

    def nearDistance(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_nearDistance(self, *args)

    def setFarDistance(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_setFarDistance(self, *args)

    def farDistance(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_farDistance(self, *args)

    def setNearPercentage(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_setNearPercentage(self, *args)

    def nearPercentage(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_nearPercentage(self, *args)

    def setFarPercentage(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_setFarPercentage(self, *args)

    def farPercentage(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_farPercentage(self, *args)

    def setEnvironmentMap(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_setEnvironmentMap(self, *args)

    def environmentMap(self, *args) -> "OdGiMaterialTexture *":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_environmentMap(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRenderEnvironmentTraits

# Register OdGiRenderEnvironmentTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_swigregister(OdGiRenderEnvironmentTraits)

def OdGiRenderEnvironmentTraits_cast(*args) -> "OdSmartPtr< OdGiRenderEnvironmentTraits >":
    return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_cast(*args)

def OdGiRenderEnvironmentTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_desc(*args)

def OdGiRenderEnvironmentTraits_createObject(*args) -> "OdSmartPtr< OdGiRenderEnvironmentTraits >":
    return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraits_createObject(*args)

class OdGiRenderSettingsTraits(OdGiDrawableTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiRenderSettingsTraits >":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiRenderSettingsTraits >":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_createObject(*args)

    def setMaterialEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_setMaterialEnabled(self, *args)

    def materialEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_materialEnabled(self, *args)

    def setTextureSampling(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_setTextureSampling(self, *args)

    def textureSampling(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_textureSampling(self, *args)

    def setBackFacesEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_setBackFacesEnabled(self, *args)

    def backFacesEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_backFacesEnabled(self, *args)

    def setShadowsEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_setShadowsEnabled(self, *args)

    def shadowsEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_shadowsEnabled(self, *args)

    def setDiagnosticBackgroundEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_setDiagnosticBackgroundEnabled(self, *args)

    def diagnosticBackgroundEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_diagnosticBackgroundEnabled(self, *args)

    def setModelScaleFactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_setModelScaleFactor(self, *args)

    def modelScaleFactor(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_modelScaleFactor(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRenderSettingsTraits

# Register OdGiRenderSettingsTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRenderSettingsTraits_swigregister(OdGiRenderSettingsTraits)

def OdGiRenderSettingsTraits_cast(*args) -> "OdSmartPtr< OdGiRenderSettingsTraits >":
    return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_cast(*args)

def OdGiRenderSettingsTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_desc(*args)

def OdGiRenderSettingsTraits_createObject(*args) -> "OdSmartPtr< OdGiRenderSettingsTraits >":
    return _ODA_Kernel_Py3.OdGiRenderSettingsTraits_createObject(*args)

krBox = _ODA_Kernel_Py3.krBox
krTriangle = _ODA_Kernel_Py3.krTriangle
krGauss = _ODA_Kernel_Py3.krGauss
krMitchell = _ODA_Kernel_Py3.krMitchell
krLanczos = _ODA_Kernel_Py3.krLanczos
krSimple = _ODA_Kernel_Py3.krSimple
krSorted = _ODA_Kernel_Py3.krSorted
krSegments = _ODA_Kernel_Py3.krSegments
krOff = _ODA_Kernel_Py3.krOff
krGrid = _ODA_Kernel_Py3.krGrid
krPhoton = _ODA_Kernel_Py3.krPhoton
krSamples = _ODA_Kernel_Py3.krSamples
krBSP = _ODA_Kernel_Py3.krBSP
krObject = _ODA_Kernel_Py3.krObject
krWorld = _ODA_Kernel_Py3.krWorld
krCamera = _ODA_Kernel_Py3.krCamera
krDensity = _ODA_Kernel_Py3.krDensity
krIrradiance = _ODA_Kernel_Py3.krIrradiance
krDepth = _ODA_Kernel_Py3.krDepth
krSize = _ODA_Kernel_Py3.krSize
krHilbert = _ODA_Kernel_Py3.krHilbert
krSpiral = _ODA_Kernel_Py3.krSpiral
krLeftToRight = _ODA_Kernel_Py3.krLeftToRight
krRightToLeft = _ODA_Kernel_Py3.krRightToLeft
krTopToBottom = _ODA_Kernel_Py3.krTopToBottom
krBottomToTop = _ODA_Kernel_Py3.krBottomToTop
krAutomatic = _ODA_Kernel_Py3.krAutomatic
krLogarithmic = _ODA_Kernel_Py3.krLogarithmic
krFinalGatherOff = _ODA_Kernel_Py3.krFinalGatherOff
krFinalGatherOn = _ODA_Kernel_Py3.krFinalGatherOn
krFinalGatherAuto = _ODA_Kernel_Py3.krFinalGatherAuto
krExportMIOff = _ODA_Kernel_Py3.krExportMIOff
krExportMIWithRender = _ODA_Kernel_Py3.krExportMIWithRender
krExportMIOnly = _ODA_Kernel_Py3.krExportMIOnly
class OdGiMentalRayRenderSettingsTraits(OdGiRenderSettingsTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiMentalRayRenderSettingsTraits >":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiMentalRayRenderSettingsTraits >":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_createObject(*args)

    def setSampling(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setSampling(self, *args)

    def sampling(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_sampling(self, *args)

    def setSamplingFilter(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setSamplingFilter(self, *args)

    def SamplingFilter(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_SamplingFilter(self, *args)

    def setSamplingContrastColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setSamplingContrastColor(self, *args)

    def samplingContrastColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_samplingContrastColor(self, *args)

    def setShadowMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setShadowMode(self, *args)

    def shadowMode(self, *args) -> "OdGiMrShadowMode":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_shadowMode(self, *args)

    def setShadowMapEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setShadowMapEnabled(self, *args)

    def shadowMapEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_shadowMapEnabled(self, *args)

    def setRayTraceEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setRayTraceEnabled(self, *args)

    def rayTraceEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_rayTraceEnabled(self, *args)

    def setRayTraceDepth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setRayTraceDepth(self, *args)

    def rayTraceDepth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_rayTraceDepth(self, *args)

    def setGlobalIlluminationEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setGlobalIlluminationEnabled(self, *args)

    def globalIlluminationEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_globalIlluminationEnabled(self, *args)

    def setGISampleCount(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setGISampleCount(self, *args)

    def giSampleCount(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_giSampleCount(self, *args)

    def setGISampleRadiusEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setGISampleRadiusEnabled(self, *args)

    def giSampleRadiusEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_giSampleRadiusEnabled(self, *args)

    def setGISampleRadius(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setGISampleRadius(self, *args)

    def giSampleRadius(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_giSampleRadius(self, *args)

    def setGIPhotonsPerLight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setGIPhotonsPerLight(self, *args)

    def giPhotonsPerLight(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_giPhotonsPerLight(self, *args)

    def setPhotonTraceDepth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setPhotonTraceDepth(self, *args)

    def photonTraceDepth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_photonTraceDepth(self, *args)

    def setFinalGatheringEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setFinalGatheringEnabled(self, *args)

    def finalGatheringEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_finalGatheringEnabled(self, *args)

    def setFGRayCount(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setFGRayCount(self, *args)

    def fgRayCount(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_fgRayCount(self, *args)

    def setFGRadiusState(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setFGRadiusState(self, *args)

    def fgSampleRadiusState(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_fgSampleRadiusState(self, *args)

    def setFGSampleRadius(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setFGSampleRadius(self, *args)

    def fgSampleRadius(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_fgSampleRadius(self, *args)

    def setLightLuminanceScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setLightLuminanceScale(self, *args)

    def lightLuminanceScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_lightLuminanceScale(self, *args)

    def setDiagnosticMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setDiagnosticMode(self, *args)

    def diagnosticMode(self, *args) -> "OdGiMrDiagnosticMode":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_diagnosticMode(self, *args)

    def setDiagnosticGridMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setDiagnosticGridMode(self, *args)

    def diagnosticGridMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_diagnosticGridMode(self, *args)

    def setDiagnosticPhotonMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setDiagnosticPhotonMode(self, *args)

    def diagnosticPhotonMode(self, *args) -> "OdGiMrDiagnosticPhotonMode":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_diagnosticPhotonMode(self, *args)

    def setDiagnosticBSPMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setDiagnosticBSPMode(self, *args)

    def diagnosticBSPMode(self, *args) -> "OdGiMrDiagnosticBSPMode":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_diagnosticBSPMode(self, *args)

    def setExportMIEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setExportMIEnabled(self, *args)

    def exportMIEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_exportMIEnabled(self, *args)

    def setExportMIFileName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setExportMIFileName(self, *args)

    def exportMIFileName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_exportMIFileName(self, *args)

    def setTileSize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setTileSize(self, *args)

    def tileSize(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_tileSize(self, *args)

    def setTileOrder(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setTileOrder(self, *args)

    def tileOrder(self, *args) -> "OdGiMrTileOrder":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_tileOrder(self, *args)

    def setMemoryLimit(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setMemoryLimit(self, *args)

    def memoryLimit(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_memoryLimit(self, *args)

    def setEnergyMultiplier(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setEnergyMultiplier(self, *args)

    def energyMultiplier(self, *args) -> "float":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_energyMultiplier(self, *args)

    def setProgressMonitor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setProgressMonitor(self, *args)

    def progressMonitor(self, *args) -> "void const *":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_progressMonitor(self, *args)

    def setExposureType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setExposureType(self, *args)

    def exposureType(self, *args) -> "OdGiMrExposureType":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_exposureType(self, *args)

    def setFinalGatheringMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setFinalGatheringMode(self, *args)

    def finalGatheringMode(self, *args) -> "OdGiMrFinalGatheringMode":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_finalGatheringMode(self, *args)

    def setShadowSamplingMultiplier(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setShadowSamplingMultiplier(self, *args)

    def shadowSamplingMultiplier(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_shadowSamplingMultiplier(self, *args)

    def setExportMIMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_setExportMIMode(self, *args)

    def exportMIMode(self, *args) -> "OdGiMrExportMIMode":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_exportMIMode(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMentalRayRenderSettingsTraits

# Register OdGiMentalRayRenderSettingsTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_swigregister(OdGiMentalRayRenderSettingsTraits)

def OdGiMentalRayRenderSettingsTraits_cast(*args) -> "OdSmartPtr< OdGiMentalRayRenderSettingsTraits >":
    return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_cast(*args)

def OdGiMentalRayRenderSettingsTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_desc(*args)

def OdGiMentalRayRenderSettingsTraits_createObject(*args) -> "OdSmartPtr< OdGiMentalRayRenderSettingsTraits >":
    return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraits_createObject(*args)

krEQuitByRenderLevel = _ODA_Kernel_Py3.krEQuitByRenderLevel
krEQuitByRenderTime = _ODA_Kernel_Py3.krEQuitByRenderTime
krESimplistic = _ODA_Kernel_Py3.krESimplistic
krEBasic = _ODA_Kernel_Py3.krEBasic
krEAdvanced = _ODA_Kernel_Py3.krEAdvanced
krEBox = _ODA_Kernel_Py3.krEBox
krETriangle = _ODA_Kernel_Py3.krETriangle
krEGaussian = _ODA_Kernel_Py3.krEGaussian
krELanczos = _ODA_Kernel_Py3.krELanczos
krEMitchell = _ODA_Kernel_Py3.krEMitchell
class OdGiRapidRTRenderSettingsTraits(OdGiRenderSettingsTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiRapidRTRenderSettingsTraits >":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiRapidRTRenderSettingsTraits >":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_createObject(*args)

    def setQuitCondition(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_setQuitCondition(self, *args)

    def quitCondition(self, *args) -> "OdGiQuitCondition":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_quitCondition(self, *args)

    def setDesiredRenderLevel(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_setDesiredRenderLevel(self, *args)

    def desiredRenderLevel(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_desiredRenderLevel(self, *args)

    def setDesiredRenderTime(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_setDesiredRenderTime(self, *args)

    def desiredRenderTime(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_desiredRenderTime(self, *args)

    def setLightingMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_setLightingMode(self, *args)

    def lightingMode(self, *args) -> "OdGiLightingMode":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_lightingMode(self, *args)

    def setFilterType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_setFilterType(self, *args)

    def filterType(self, *args) -> "OdGiFilterType":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_filterType(self, *args)

    def setFilterWidth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_setFilterWidth(self, *args)

    def filterWidth(self, *args) -> "float":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_filterWidth(self, *args)

    def setFilterHeight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_setFilterHeight(self, *args)

    def filterHeight(self, *args) -> "float":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_filterHeight(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRapidRTRenderSettingsTraits

# Register OdGiRapidRTRenderSettingsTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_swigregister(OdGiRapidRTRenderSettingsTraits)

def OdGiRapidRTRenderSettingsTraits_cast(*args) -> "OdSmartPtr< OdGiRapidRTRenderSettingsTraits >":
    return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_cast(*args)

def OdGiRapidRTRenderSettingsTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_desc(*args)

def OdGiRapidRTRenderSettingsTraits_createObject(*args) -> "OdSmartPtr< OdGiRapidRTRenderSettingsTraits >":
    return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraits_createObject(*args)

class OdGiSolidBackgroundTraits(OdGiDrawableTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiSolidBackgroundTraits >":
        return _ODA_Kernel_Py3.OdGiSolidBackgroundTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSolidBackgroundTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSolidBackgroundTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiSolidBackgroundTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiSolidBackgroundTraits >":
        return _ODA_Kernel_Py3.OdGiSolidBackgroundTraits_createObject(*args)

    def setColorSolid(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSolidBackgroundTraits_setColorSolid(self, *args)

    def colorSolid(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiSolidBackgroundTraits_colorSolid(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSolidBackgroundTraits

# Register OdGiSolidBackgroundTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSolidBackgroundTraits_swigregister(OdGiSolidBackgroundTraits)

def OdGiSolidBackgroundTraits_cast(*args) -> "OdSmartPtr< OdGiSolidBackgroundTraits >":
    return _ODA_Kernel_Py3.OdGiSolidBackgroundTraits_cast(*args)

def OdGiSolidBackgroundTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiSolidBackgroundTraits_desc(*args)

def OdGiSolidBackgroundTraits_createObject(*args) -> "OdSmartPtr< OdGiSolidBackgroundTraits >":
    return _ODA_Kernel_Py3.OdGiSolidBackgroundTraits_createObject(*args)

class OdGiGradientBackgroundTraits(OdGiDrawableTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiGradientBackgroundTraits >":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiGradientBackgroundTraits >":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_createObject(*args)

    def setColorTop(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_setColorTop(self, *args)

    def colorTop(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_colorTop(self, *args)

    def setColorMiddle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_setColorMiddle(self, *args)

    def colorMiddle(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_colorMiddle(self, *args)

    def setColorBottom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_setColorBottom(self, *args)

    def colorBottom(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_colorBottom(self, *args)

    def setHorizon(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_setHorizon(self, *args)

    def horizon(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_horizon(self, *args)

    def setHeight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_setHeight(self, *args)

    def height(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_height(self, *args)

    def setRotation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_setRotation(self, *args)

    def rotation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_rotation(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiGradientBackgroundTraits

# Register OdGiGradientBackgroundTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiGradientBackgroundTraits_swigregister(OdGiGradientBackgroundTraits)

def OdGiGradientBackgroundTraits_cast(*args) -> "OdSmartPtr< OdGiGradientBackgroundTraits >":
    return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_cast(*args)

def OdGiGradientBackgroundTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_desc(*args)

def OdGiGradientBackgroundTraits_createObject(*args) -> "OdSmartPtr< OdGiGradientBackgroundTraits >":
    return _ODA_Kernel_Py3.OdGiGradientBackgroundTraits_createObject(*args)

class OdGiImageBackgroundTraits(OdGiDrawableTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiImageBackgroundTraits >":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiImageBackgroundTraits >":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_createObject(*args)

    def setImageFilename(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_setImageFilename(self, *args)

    def imageFilename(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_imageFilename(self, *args)

    def setFitToScreen(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_setFitToScreen(self, *args)

    def fitToScreen(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_fitToScreen(self, *args)

    def setMaintainAspectRatio(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_setMaintainAspectRatio(self, *args)

    def maintainAspectRatio(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_maintainAspectRatio(self, *args)

    def setUseTiling(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_setUseTiling(self, *args)

    def useTiling(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_useTiling(self, *args)

    def setXOffset(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_setXOffset(self, *args)

    def xOffset(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_xOffset(self, *args)

    def setYOffset(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_setYOffset(self, *args)

    def yOffset(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_yOffset(self, *args)

    def setXScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_setXScale(self, *args)

    def xScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_xScale(self, *args)

    def setYScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_setYScale(self, *args)

    def yScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_yScale(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiImageBackgroundTraits

# Register OdGiImageBackgroundTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiImageBackgroundTraits_swigregister(OdGiImageBackgroundTraits)

def OdGiImageBackgroundTraits_cast(*args) -> "OdSmartPtr< OdGiImageBackgroundTraits >":
    return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_cast(*args)

def OdGiImageBackgroundTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_desc(*args)

def OdGiImageBackgroundTraits_createObject(*args) -> "OdSmartPtr< OdGiImageBackgroundTraits >":
    return _ODA_Kernel_Py3.OdGiImageBackgroundTraits_createObject(*args)

class OdGiGroundPlaneBackgroundTraits(OdGiDrawableTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiGroundPlaneBackgroundTraits >":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiGroundPlaneBackgroundTraits >":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_createObject(*args)

    def setColorSkyZenith(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_setColorSkyZenith(self, *args)

    def colorSkyZenith(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_colorSkyZenith(self, *args)

    def setColorSkyHorizon(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_setColorSkyHorizon(self, *args)

    def colorSkyHorizon(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_colorSkyHorizon(self, *args)

    def setColorUndergroundHorizon(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_setColorUndergroundHorizon(self, *args)

    def colorUndergroundHorizon(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_colorUndergroundHorizon(self, *args)

    def setColorUndergroundAzimuth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_setColorUndergroundAzimuth(self, *args)

    def colorUndergroundAzimuth(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_colorUndergroundAzimuth(self, *args)

    def setColorGroundPlaneNear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_setColorGroundPlaneNear(self, *args)

    def colorGroundPlaneNear(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_colorGroundPlaneNear(self, *args)

    def setColorGroundPlaneFar(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_setColorGroundPlaneFar(self, *args)

    def colorGroundPlaneFar(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_colorGroundPlaneFar(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiGroundPlaneBackgroundTraits

# Register OdGiGroundPlaneBackgroundTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_swigregister(OdGiGroundPlaneBackgroundTraits)

def OdGiGroundPlaneBackgroundTraits_cast(*args) -> "OdSmartPtr< OdGiGroundPlaneBackgroundTraits >":
    return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_cast(*args)

def OdGiGroundPlaneBackgroundTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_desc(*args)

def OdGiGroundPlaneBackgroundTraits_createObject(*args) -> "OdSmartPtr< OdGiGroundPlaneBackgroundTraits >":
    return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraits_createObject(*args)

class OdGiSkyBackgroundTraits(OdGiDrawableTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiSkyBackgroundTraits >":
        return _ODA_Kernel_Py3.OdGiSkyBackgroundTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSkyBackgroundTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSkyBackgroundTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiSkyBackgroundTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiSkyBackgroundTraits >":
        return _ODA_Kernel_Py3.OdGiSkyBackgroundTraits_createObject(*args)

    def setSkyParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyBackgroundTraits_setSkyParameters(self, *args)

    def skyParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyBackgroundTraits_skyParameters(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSkyBackgroundTraits

# Register OdGiSkyBackgroundTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSkyBackgroundTraits_swigregister(OdGiSkyBackgroundTraits)

def OdGiSkyBackgroundTraits_cast(*args) -> "OdSmartPtr< OdGiSkyBackgroundTraits >":
    return _ODA_Kernel_Py3.OdGiSkyBackgroundTraits_cast(*args)

def OdGiSkyBackgroundTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiSkyBackgroundTraits_desc(*args)

def OdGiSkyBackgroundTraits_createObject(*args) -> "OdSmartPtr< OdGiSkyBackgroundTraits >":
    return _ODA_Kernel_Py3.OdGiSkyBackgroundTraits_createObject(*args)

class OdGiIBLBackgroundTraits(OdGiDrawableTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiIBLBackgroundTraits >":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiIBLBackgroundTraits >":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraits_createObject(*args)

    def setEnable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraits_setEnable(self, *args)

    def enable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraits_enable(self, *args)

    def setIBLImageName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraits_setIBLImageName(self, *args)

    def IBLImageName(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraits_IBLImageName(self, *args)

    def setRotation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraits_setRotation(self, *args)

    def rotation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraits_rotation(self, *args)

    def setDisplayImage(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraits_setDisplayImage(self, *args)

    def displayImage(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraits_displayImage(self, *args)

    def setSecondaryBackground(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraits_setSecondaryBackground(self, *args)

    def secondaryBackground(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraits_secondaryBackground(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiIBLBackgroundTraits

# Register OdGiIBLBackgroundTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiIBLBackgroundTraits_swigregister(OdGiIBLBackgroundTraits)

def OdGiIBLBackgroundTraits_cast(*args) -> "OdSmartPtr< OdGiIBLBackgroundTraits >":
    return _ODA_Kernel_Py3.OdGiIBLBackgroundTraits_cast(*args)

def OdGiIBLBackgroundTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiIBLBackgroundTraits_desc(*args)

def OdGiIBLBackgroundTraits_createObject(*args) -> "OdSmartPtr< OdGiIBLBackgroundTraits >":
    return _ODA_Kernel_Py3.OdGiIBLBackgroundTraits_createObject(*args)

class OdGiLightTraits(OdGiDrawableTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiLightTraits >":
        return _ODA_Kernel_Py3.OdGiLightTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiLightTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiLightTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiLightTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiLightTraits >":
        return _ODA_Kernel_Py3.OdGiLightTraits_createObject(*args)

    def setOn(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightTraits_setOn(self, *args)

    def isOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLightTraits_isOn(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLightTraits

# Register OdGiLightTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLightTraits_swigregister(OdGiLightTraits)

def OdGiLightTraits_cast(*args) -> "OdSmartPtr< OdGiLightTraits >":
    return _ODA_Kernel_Py3.OdGiLightTraits_cast(*args)

def OdGiLightTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiLightTraits_desc(*args)

def OdGiLightTraits_createObject(*args) -> "OdSmartPtr< OdGiLightTraits >":
    return _ODA_Kernel_Py3.OdGiLightTraits_createObject(*args)

class OdGiColorRGB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    red = property(_ODA_Kernel_Py3.OdGiColorRGB_red_get, _ODA_Kernel_Py3.OdGiColorRGB_red_set)
    green = property(_ODA_Kernel_Py3.OdGiColorRGB_green_get, _ODA_Kernel_Py3.OdGiColorRGB_green_set)
    blue = property(_ODA_Kernel_Py3.OdGiColorRGB_blue_get, _ODA_Kernel_Py3.OdGiColorRGB_blue_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiColorRGB_swiginit(self, _ODA_Kernel_Py3.new_OdGiColorRGB(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiColorRGB

# Register OdGiColorRGB in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiColorRGB_swigregister(OdGiColorRGB)

class OdGiShadowParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiShadowParameters_swiginit(self, _ODA_Kernel_Py3.new_OdGiShadowParameters(*args))

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShadowParameters___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShadowParameters___ne__(self, *args)
    kShadowsRayTraced = _ODA_Kernel_Py3.OdGiShadowParameters_kShadowsRayTraced
    kShadowMaps = _ODA_Kernel_Py3.OdGiShadowParameters_kShadowMaps
    kAreaSampled = _ODA_Kernel_Py3.OdGiShadowParameters_kAreaSampled
    kLinear = _ODA_Kernel_Py3.OdGiShadowParameters_kLinear
    kRectangle = _ODA_Kernel_Py3.OdGiShadowParameters_kRectangle
    kDisk = _ODA_Kernel_Py3.OdGiShadowParameters_kDisk
    kCylinder = _ODA_Kernel_Py3.OdGiShadowParameters_kCylinder
    kSphere = _ODA_Kernel_Py3.OdGiShadowParameters_kSphere

    def setShadowsOn(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShadowParameters_setShadowsOn(self, *args)

    def shadowsOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShadowParameters_shadowsOn(self, *args)

    def setShadowType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShadowParameters_setShadowType(self, *args)

    def shadowType(self, *args) -> "OdGiShadowParameters::ShadowType":
        return _ODA_Kernel_Py3.OdGiShadowParameters_shadowType(self, *args)

    def setShadowMapSize(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShadowParameters_setShadowMapSize(self, *args)

    def shadowMapSize(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdGiShadowParameters_shadowMapSize(self, *args)

    def setShadowMapSoftness(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShadowParameters_setShadowMapSoftness(self, *args)

    def shadowMapSoftness(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdGiShadowParameters_shadowMapSoftness(self, *args)

    def setShadowSamples(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShadowParameters_setShadowSamples(self, *args)

    def shadowSamples(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdGiShadowParameters_shadowSamples(self, *args)

    def setShapeVisibility(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShadowParameters_setShapeVisibility(self, *args)

    def shapeVisibility(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShadowParameters_shapeVisibility(self, *args)

    def setExtendedLightShape(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShadowParameters_setExtendedLightShape(self, *args)

    def extendedLightShape(self, *args) -> "OdGiShadowParameters::ExtendedLightShape":
        return _ODA_Kernel_Py3.OdGiShadowParameters_extendedLightShape(self, *args)

    def setExtendedLightLength(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShadowParameters_setExtendedLightLength(self, *args)

    def extendedLightLength(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiShadowParameters_extendedLightLength(self, *args)

    def setExtendedLightWidth(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShadowParameters_setExtendedLightWidth(self, *args)

    def extendedLightWidth(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiShadowParameters_extendedLightWidth(self, *args)

    def setExtendedLightRadius(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShadowParameters_setExtendedLightRadius(self, *args)

    def extendedLightRadius(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiShadowParameters_extendedLightRadius(self, *args)

    def save(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShadowParameters_save(self, *args)

    def load(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShadowParameters_load(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiShadowParameters

# Register OdGiShadowParameters in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiShadowParameters_swigregister(OdGiShadowParameters)

class OdGiLightAttenuation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiLightAttenuation_swiginit(self, _ODA_Kernel_Py3.new_OdGiLightAttenuation(*args))
    kNone = _ODA_Kernel_Py3.OdGiLightAttenuation_kNone
    kInverseLinear = _ODA_Kernel_Py3.OdGiLightAttenuation_kInverseLinear
    kInverseSquare = _ODA_Kernel_Py3.OdGiLightAttenuation_kInverseSquare

    def setAttenuationType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightAttenuation_setAttenuationType(self, *args)

    def attenuationType(self, *args) -> "OdGiLightAttenuation::AttenuationType":
        return _ODA_Kernel_Py3.OdGiLightAttenuation_attenuationType(self, *args)

    def setUseLimits(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightAttenuation_setUseLimits(self, *args)

    def useLimits(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLightAttenuation_useLimits(self, *args)

    def setLimits(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightAttenuation_setLimits(self, *args)

    def startLimit(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiLightAttenuation_startLimit(self, *args)

    def endLimit(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiLightAttenuation_endLimit(self, *args)

    def save(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightAttenuation_save(self, *args)

    def load(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightAttenuation_load(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLightAttenuation___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLightAttenuation___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLightAttenuation

# Register OdGiLightAttenuation in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLightAttenuation_swigregister(OdGiLightAttenuation)

class OdGiSkyParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiSkyParameters_swiginit(self, _ODA_Kernel_Py3.new_OdGiSkyParameters(*args))

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSkyParameters___eq__(self, *args)

    def setIllumination(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyParameters_setIllumination(self, *args)

    def illumination(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSkyParameters_illumination(self, *args)

    def setIntensityFactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyParameters_setIntensityFactor(self, *args)

    def intensityFactor(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSkyParameters_intensityFactor(self, *args)

    def setHaze(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyParameters_setHaze(self, *args)

    def haze(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSkyParameters_haze(self, *args)

    def setHorizonHeight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyParameters_setHorizonHeight(self, *args)

    def horizonHeight(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSkyParameters_horizonHeight(self, *args)

    def setHorizonBlur(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyParameters_setHorizonBlur(self, *args)

    def horizonBlur(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSkyParameters_horizonBlur(self, *args)

    def setGroundColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyParameters_setGroundColor(self, *args)

    def groundColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiSkyParameters_groundColor(self, *args)

    def setNightColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyParameters_setNightColor(self, *args)

    def nightColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiSkyParameters_nightColor(self, *args)

    def setAerialPerspective(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyParameters_setAerialPerspective(self, *args)

    def aerialPerspective(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSkyParameters_aerialPerspective(self, *args)

    def setVisibilityDistance(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyParameters_setVisibilityDistance(self, *args)

    def visibilityDistance(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSkyParameters_visibilityDistance(self, *args)

    def setDiskScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyParameters_setDiskScale(self, *args)

    def diskScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSkyParameters_diskScale(self, *args)

    def setGlowIntensity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyParameters_setGlowIntensity(self, *args)

    def glowIntensity(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSkyParameters_glowIntensity(self, *args)

    def setDiskIntensity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyParameters_setDiskIntensity(self, *args)

    def diskIntensity(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSkyParameters_diskIntensity(self, *args)

    def setSolarDiskSamples(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyParameters_setSolarDiskSamples(self, *args)

    def solarDiskSamples(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdGiSkyParameters_solarDiskSamples(self, *args)

    def setSunDirection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyParameters_setSunDirection(self, *args)

    def sunDirection(self, *args) -> "OdGeVector3d const &":
        return _ODA_Kernel_Py3.OdGiSkyParameters_sunDirection(self, *args)

    def setRedBlueShift(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyParameters_setRedBlueShift(self, *args)

    def redBlueShift(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSkyParameters_redBlueShift(self, *args)

    def setSaturation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyParameters_setSaturation(self, *args)

    def saturation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSkyParameters_saturation(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSkyParameters

# Register OdGiSkyParameters in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSkyParameters_swigregister(OdGiSkyParameters)

class OdGiStandardLightTraits(OdGiLightTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiStandardLightTraits >":
        return _ODA_Kernel_Py3.OdGiStandardLightTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiStandardLightTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiStandardLightTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiStandardLightTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiStandardLightTraits >":
        return _ODA_Kernel_Py3.OdGiStandardLightTraits_createObject(*args)

    def setIntensity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiStandardLightTraits_setIntensity(self, *args)

    def intensity(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiStandardLightTraits_intensity(self, *args)

    def setLightColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiStandardLightTraits_setLightColor(self, *args)

    def lightColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiStandardLightTraits_lightColor(self, *args)

    def setShadowParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiStandardLightTraits_setShadowParameters(self, *args)

    def shadowParameters(self, *args) -> "OdGiShadowParameters":
        return _ODA_Kernel_Py3.OdGiStandardLightTraits_shadowParameters(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiStandardLightTraits

# Register OdGiStandardLightTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiStandardLightTraits_swigregister(OdGiStandardLightTraits)

def OdGiStandardLightTraits_cast(*args) -> "OdSmartPtr< OdGiStandardLightTraits >":
    return _ODA_Kernel_Py3.OdGiStandardLightTraits_cast(*args)

def OdGiStandardLightTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiStandardLightTraits_desc(*args)

def OdGiStandardLightTraits_createObject(*args) -> "OdSmartPtr< OdGiStandardLightTraits >":
    return _ODA_Kernel_Py3.OdGiStandardLightTraits_createObject(*args)

class OdGiPointLightTraits(OdGiStandardLightTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiPointLightTraits >":
        return _ODA_Kernel_Py3.OdGiPointLightTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPointLightTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPointLightTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiPointLightTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiPointLightTraits >":
        return _ODA_Kernel_Py3.OdGiPointLightTraits_createObject(*args)

    def setPosition(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointLightTraits_setPosition(self, *args)

    def position(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGiPointLightTraits_position(self, *args)

    def lightAttenuation(self, *args) -> "OdGiLightAttenuation":
        return _ODA_Kernel_Py3.OdGiPointLightTraits_lightAttenuation(self, *args)

    def setAttenuation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointLightTraits_setAttenuation(self, *args)

    def setPhysicalIntensity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointLightTraits_setPhysicalIntensity(self, *args)

    def physicalIntensity(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiPointLightTraits_physicalIntensity(self, *args)

    def setLampColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointLightTraits_setLampColor(self, *args)

    def lampColor(self, *args) -> "OdGiColorRGB":
        return _ODA_Kernel_Py3.OdGiPointLightTraits_lampColor(self, *args)

    def setHasTarget(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointLightTraits_setHasTarget(self, *args)

    def hasTarget(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPointLightTraits_hasTarget(self, *args)

    def setTargetLocation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointLightTraits_setTargetLocation(self, *args)

    def targetLocation(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGiPointLightTraits_targetLocation(self, *args)

    def setHemisphericalDistribution(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointLightTraits_setHemisphericalDistribution(self, *args)

    def hemisphericalDistribution(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPointLightTraits_hemisphericalDistribution(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPointLightTraits

# Register OdGiPointLightTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPointLightTraits_swigregister(OdGiPointLightTraits)

def OdGiPointLightTraits_cast(*args) -> "OdSmartPtr< OdGiPointLightTraits >":
    return _ODA_Kernel_Py3.OdGiPointLightTraits_cast(*args)

def OdGiPointLightTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiPointLightTraits_desc(*args)

def OdGiPointLightTraits_createObject(*args) -> "OdSmartPtr< OdGiPointLightTraits >":
    return _ODA_Kernel_Py3.OdGiPointLightTraits_createObject(*args)

class OdGiSpotLightTraits(OdGiStandardLightTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiSpotLightTraits >":
        return _ODA_Kernel_Py3.OdGiSpotLightTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSpotLightTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSpotLightTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiSpotLightTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiSpotLightTraits >":
        return _ODA_Kernel_Py3.OdGiSpotLightTraits_createObject(*args)

    def setPosition(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSpotLightTraits_setPosition(self, *args)

    def position(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGiSpotLightTraits_position(self, *args)

    def setTargetLocation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSpotLightTraits_setTargetLocation(self, *args)

    def targetLocation(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGiSpotLightTraits_targetLocation(self, *args)

    def setHotspotAndFalloff(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSpotLightTraits_setHotspotAndFalloff(self, *args)

    def hotspot(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSpotLightTraits_hotspot(self, *args)

    def falloff(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSpotLightTraits_falloff(self, *args)

    def lightAttenuation(self, *args) -> "OdGiLightAttenuation":
        return _ODA_Kernel_Py3.OdGiSpotLightTraits_lightAttenuation(self, *args)

    def setAttenuation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSpotLightTraits_setAttenuation(self, *args)

    def setPhysicalIntensity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSpotLightTraits_setPhysicalIntensity(self, *args)

    def physicalIntensity(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSpotLightTraits_physicalIntensity(self, *args)

    def setLampColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSpotLightTraits_setLampColor(self, *args)

    def lampColor(self, *args) -> "OdGiColorRGB":
        return _ODA_Kernel_Py3.OdGiSpotLightTraits_lampColor(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSpotLightTraits

# Register OdGiSpotLightTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSpotLightTraits_swigregister(OdGiSpotLightTraits)

def OdGiSpotLightTraits_cast(*args) -> "OdSmartPtr< OdGiSpotLightTraits >":
    return _ODA_Kernel_Py3.OdGiSpotLightTraits_cast(*args)

def OdGiSpotLightTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiSpotLightTraits_desc(*args)

def OdGiSpotLightTraits_createObject(*args) -> "OdSmartPtr< OdGiSpotLightTraits >":
    return _ODA_Kernel_Py3.OdGiSpotLightTraits_createObject(*args)

class OdGiDistantLightTraits(OdGiStandardLightTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiDistantLightTraits >":
        return _ODA_Kernel_Py3.OdGiDistantLightTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiDistantLightTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiDistantLightTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiDistantLightTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiDistantLightTraits >":
        return _ODA_Kernel_Py3.OdGiDistantLightTraits_createObject(*args)

    def setLightDirection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDistantLightTraits_setLightDirection(self, *args)

    def lightDirection(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGiDistantLightTraits_lightDirection(self, *args)

    def setIsSunlight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDistantLightTraits_setIsSunlight(self, *args)

    def isSunlight(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDistantLightTraits_isSunlight(self, *args)

    def setPhysicalIntensity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDistantLightTraits_setPhysicalIntensity(self, *args)

    def physicalIntensity(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiDistantLightTraits_physicalIntensity(self, *args)

    def setLampColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDistantLightTraits_setLampColor(self, *args)

    def lampColor(self, *args) -> "OdGiColorRGB":
        return _ODA_Kernel_Py3.OdGiDistantLightTraits_lampColor(self, *args)

    def setSkyParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDistantLightTraits_setSkyParameters(self, *args)

    def skyParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDistantLightTraits_skyParameters(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDistantLightTraits

# Register OdGiDistantLightTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDistantLightTraits_swigregister(OdGiDistantLightTraits)

def OdGiDistantLightTraits_cast(*args) -> "OdSmartPtr< OdGiDistantLightTraits >":
    return _ODA_Kernel_Py3.OdGiDistantLightTraits_cast(*args)

def OdGiDistantLightTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiDistantLightTraits_desc(*args)

def OdGiDistantLightTraits_createObject(*args) -> "OdSmartPtr< OdGiDistantLightTraits >":
    return _ODA_Kernel_Py3.OdGiDistantLightTraits_createObject(*args)

class OdGiWebLightTraits(OdGiPointLightTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiWebLightTraits >":
        return _ODA_Kernel_Py3.OdGiWebLightTraits_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiWebLightTraits_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiWebLightTraits_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiWebLightTraits_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiWebLightTraits >":
        return _ODA_Kernel_Py3.OdGiWebLightTraits_createObject(*args)
    kTypeA = _ODA_Kernel_Py3.OdGiWebLightTraits_kTypeA
    kTypeB = _ODA_Kernel_Py3.OdGiWebLightTraits_kTypeB
    kTypeC = _ODA_Kernel_Py3.OdGiWebLightTraits_kTypeC
    kNoSymmetry = _ODA_Kernel_Py3.OdGiWebLightTraits_kNoSymmetry
    kSingleSymmetry = _ODA_Kernel_Py3.OdGiWebLightTraits_kSingleSymmetry
    kDoubleSymmetry = _ODA_Kernel_Py3.OdGiWebLightTraits_kDoubleSymmetry
    kAxialSymmetry = _ODA_Kernel_Py3.OdGiWebLightTraits_kAxialSymmetry

    def setWebFile(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWebLightTraits_setWebFile(self, *args)

    def webFile(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdGiWebLightTraits_webFile(self, *args)

    def setWebRotation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWebLightTraits_setWebRotation(self, *args)

    def webRotation(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGiWebLightTraits_webRotation(self, *args)

    def setWebFlux(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWebLightTraits_setWebFlux(self, *args)

    def webFlux(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiWebLightTraits_webFlux(self, *args)

    def setWebFileType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWebLightTraits_setWebFileType(self, *args)

    def webFileType(self, *args) -> "OdGiWebLightTraits::WebFileType":
        return _ODA_Kernel_Py3.OdGiWebLightTraits_webFileType(self, *args)

    def setWebSymmetry(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWebLightTraits_setWebSymmetry(self, *args)

    def webSymmetry(self, *args) -> "OdGiWebLightTraits::WebSymmetry":
        return _ODA_Kernel_Py3.OdGiWebLightTraits_webSymmetry(self, *args)

    def setWebHorzAng90to270(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWebLightTraits_setWebHorzAng90to270(self, *args)

    def webHorzAng90to270(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiWebLightTraits_webHorzAng90to270(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiWebLightTraits

# Register OdGiWebLightTraits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiWebLightTraits_swigregister(OdGiWebLightTraits)

def OdGiWebLightTraits_cast(*args) -> "OdSmartPtr< OdGiWebLightTraits >":
    return _ODA_Kernel_Py3.OdGiWebLightTraits_cast(*args)

def OdGiWebLightTraits_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiWebLightTraits_desc(*args)

def OdGiWebLightTraits_createObject(*args) -> "OdSmartPtr< OdGiWebLightTraits >":
    return _ODA_Kernel_Py3.OdGiWebLightTraits_createObject(*args)

class OdGiLightTraitsVpDep(OdGiDrawableTraits):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiLightTraitsVpDep >":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDep_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDep_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDep_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDep_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiLightTraitsVpDep >":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDep_createObject(*args)

    def viewportId(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDep_viewportId(self, *args)

    def viewportObjectId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDep_viewportObjectId(self, *args)

    def setOn(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDep_setOn(self, *args)

    def isOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDep_isOn(self, *args)

    def setDimming(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDep_setDimming(self, *args)

    def dimming(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDep_dimming(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLightTraitsVpDep

# Register OdGiLightTraitsVpDep in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLightTraitsVpDep_swigregister(OdGiLightTraitsVpDep)

def OdGiLightTraitsVpDep_cast(*args) -> "OdSmartPtr< OdGiLightTraitsVpDep >":
    return _ODA_Kernel_Py3.OdGiLightTraitsVpDep_cast(*args)

def OdGiLightTraitsVpDep_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiLightTraitsVpDep_desc(*args)

def OdGiLightTraitsVpDep_createObject(*args) -> "OdSmartPtr< OdGiLightTraitsVpDep >":
    return _ODA_Kernel_Py3.OdGiLightTraitsVpDep_createObject(*args)

class OdGeQuaternion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeQuaternion_swiginit(self, _ODA_Kernel_Py3.new_OdGeQuaternion(*args))

    def set(self, *args) -> "OdGeQuaternion &":
        return _ODA_Kernel_Py3.OdGeQuaternion_set(self, *args)

    def getMatrix(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGeQuaternion_getMatrix(self, *args)

    def rotate(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeQuaternion_rotate(self, *args)

    def rotateOpposite(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeQuaternion_rotateOpposite(self, *args)

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeQuaternion_isEqualTo(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeQuaternion___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeQuaternion___ne__(self, *args)

    def __mul__(self, *args) -> "OdGeQuaternion":
        return _ODA_Kernel_Py3.OdGeQuaternion___mul__(self, *args)

    def __imul__(self, *args) -> "OdGeQuaternion &":
        return _ODA_Kernel_Py3.OdGeQuaternion___imul__(self, *args)

    def __truediv__(self, *args):
        return _ODA_Kernel_Py3.OdGeQuaternion___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _ODA_Kernel_Py3.OdGeQuaternion___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, *args) -> "OdGeQuaternion":
        return _ODA_Kernel_Py3.OdGeQuaternion___add__(self, *args)

    def __iadd__(self, *args) -> "OdGeQuaternion &":
        return _ODA_Kernel_Py3.OdGeQuaternion___iadd__(self, *args)

    def __sub__(self, *args) -> "OdGeQuaternion":
        return _ODA_Kernel_Py3.OdGeQuaternion___sub__(self, *args)

    def __isub__(self, *args) -> "OdGeQuaternion &":
        return _ODA_Kernel_Py3.OdGeQuaternion___isub__(self, *args)

    def __neg__(self, *args) -> "OdGeQuaternion":
        return _ODA_Kernel_Py3.OdGeQuaternion___neg__(self, *args)

    def normSqrd(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeQuaternion_normSqrd(self, *args)

    def norm(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeQuaternion_norm(self, *args)

    def normalize(self, *args) -> "OdGeQuaternion &":
        return _ODA_Kernel_Py3.OdGeQuaternion_normalize(self, *args)

    def dotProduct(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeQuaternion_dotProduct(self, *args)

    def slerp(self, *args) -> "OdGeQuaternion":
        return _ODA_Kernel_Py3.OdGeQuaternion_slerp(self, *args)
    w = property(_ODA_Kernel_Py3.OdGeQuaternion_w_get, _ODA_Kernel_Py3.OdGeQuaternion_w_set)
    x = property(_ODA_Kernel_Py3.OdGeQuaternion_x_get, _ODA_Kernel_Py3.OdGeQuaternion_x_set)
    y = property(_ODA_Kernel_Py3.OdGeQuaternion_y_get, _ODA_Kernel_Py3.OdGeQuaternion_y_set)
    z = property(_ODA_Kernel_Py3.OdGeQuaternion_z_get, _ODA_Kernel_Py3.OdGeQuaternion_z_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeQuaternion

# Register OdGeQuaternion in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeQuaternion_swigregister(OdGeQuaternion)
OdGeQuaternion.kIdentity = _ODA_Kernel_Py3.cvar.OdGeQuaternion_kIdentity

class OdGeExtents2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeExtents2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeExtents2d(*args))

    def minPoint(self, *args) -> "OdGePoint2d const &":
        return _ODA_Kernel_Py3.OdGeExtents2d_minPoint(self, *args)

    def maxPoint(self, *args) -> "OdGePoint2d const &":
        return _ODA_Kernel_Py3.OdGeExtents2d_maxPoint(self, *args)

    def diagonal(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.OdGeExtents2d_diagonal(self, *args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeExtents2d_set(self, *args)

    def comparingSet(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeExtents2d_comparingSet(self, *args)

    def addPoint(self, *args) -> "OdGeExtents2d &":
        return _ODA_Kernel_Py3.OdGeExtents2d_addPoint(self, *args)

    def addPoints(self, *args) -> "OdGeExtents2d &":
        return _ODA_Kernel_Py3.OdGeExtents2d_addPoints(self, *args)

    def addExt(self, *args) -> "OdGeExtents2d &":
        return _ODA_Kernel_Py3.OdGeExtents2d_addExt(self, *args)

    def isValidExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExtents2d_isValidExtents(self, *args)

    def expandBy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeExtents2d_expandBy(self, *args)

    def transformBy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeExtents2d_transformBy(self, *args)

    def translate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeExtents2d_translate(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExtents2d_contains(self, *args)

    def isDisjoint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExtents2d_isDisjoint(self, *args)
    kIntersectUnknown = _ODA_Kernel_Py3.OdGeExtents2d_kIntersectUnknown
    kIntersectNot = _ODA_Kernel_Py3.OdGeExtents2d_kIntersectNot
    kIntersectOpIn = _ODA_Kernel_Py3.OdGeExtents2d_kIntersectOpIn
    kIntersectOpOut = _ODA_Kernel_Py3.OdGeExtents2d_kIntersectOpOut
    kIntersectOk = _ODA_Kernel_Py3.OdGeExtents2d_kIntersectOk

    def intersectWith(self, *args) -> "OdGeExtents2d::IntersectionStatus":
        return _ODA_Kernel_Py3.OdGeExtents2d_intersectWith(self, *args)

    def center(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeExtents2d_center(self, *args)

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExtents2d_isEqualTo(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExtents2d___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExtents2d___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeExtents2d

# Register OdGeExtents2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeExtents2d_swigregister(OdGeExtents2d)
OdGeExtents2d.kInvalid = _ODA_Kernel_Py3.cvar.OdGeExtents2d_kInvalid


def pointsExtents(*args) -> "void":
    return _ODA_Kernel_Py3.pointsExtents(*args)

def extendExtents(*args) -> "bool":
    return _ODA_Kernel_Py3.extendExtents(*args)

def isBoxContainsPoint(*args) -> "bool":
    return _ODA_Kernel_Py3.isBoxContainsPoint(*args)
class OdGeScale3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeScale3d_swiginit(self, _ODA_Kernel_Py3.new_OdGeScale3d(*args))

    def __mul__(self, *args) -> "OdGeScale3d":
        return _ODA_Kernel_Py3.OdGeScale3d___mul__(self, *args)

    def __imul__(self, *args) -> "OdGeScale3d &":
        return _ODA_Kernel_Py3.OdGeScale3d___imul__(self, *args)

    def setToProduct(self, *args) -> "OdGeScale3d &":
        return _ODA_Kernel_Py3.OdGeScale3d_setToProduct(self, *args)

    def inverse(self, *args) -> "OdGeScale3d":
        return _ODA_Kernel_Py3.OdGeScale3d_inverse(self, *args)

    def invert(self, *args) -> "OdGeScale3d &":
        return _ODA_Kernel_Py3.OdGeScale3d_invert(self, *args)

    def isProportional(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeScale3d_isProportional(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeScale3d___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeScale3d___ne__(self, *args)

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeScale3d_isEqualTo(self, *args)

    def set(self, *args) -> "OdGeScale3d &":
        return _ODA_Kernel_Py3.OdGeScale3d_set(self, *args)

    def getMatrix(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeScale3d_getMatrix(self, *args)

    def extractScale(self, *args) -> "OdGeScale3d &":
        return _ODA_Kernel_Py3.OdGeScale3d_extractScale(self, *args)

    def removeScale(self, *args) -> "OdGeScale3d &":
        return _ODA_Kernel_Py3.OdGeScale3d_removeScale(self, *args)

    def isValid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeScale3d_isValid(self, *args)
    sx = property(_ODA_Kernel_Py3.OdGeScale3d_sx_get, _ODA_Kernel_Py3.OdGeScale3d_sx_set)
    sy = property(_ODA_Kernel_Py3.OdGeScale3d_sy_get, _ODA_Kernel_Py3.OdGeScale3d_sy_set)
    sz = property(_ODA_Kernel_Py3.OdGeScale3d_sz_get, _ODA_Kernel_Py3.OdGeScale3d_sz_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeScale3d

# Register OdGeScale3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeScale3d_swigregister(OdGeScale3d)
OdGeScale3d.kIdentity = _ODA_Kernel_Py3.cvar.OdGeScale3d_kIdentity

class OdRxMember(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxMember >":
        return _ODA_Kernel_Py3.OdRxMember_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxMember_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxMember_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxMember_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxMember >":
        return _ODA_Kernel_Py3.OdRxMember_createObject(*args)

    def name(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRxMember_name(self, *args)

    def localName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxMember_localName(self, *args)

    def attributes(self, *args) -> "OdRxAttributeCollection &":
        return _ODA_Kernel_Py3.OdRxMember_attributes(self, *args)

    def owner(self, *args) -> "OdRxObject const *":
        return _ODA_Kernel_Py3.OdRxMember_owner(self, *args)

    def children(self, *args) -> "OdArray< OdRxMemberPtr > const *":
        return _ODA_Kernel_Py3.OdRxMember_children(self, *args)

    @staticmethod
    def deleteMember(*args) -> "void":
        return _ODA_Kernel_Py3.OdRxMember_deleteMember(*args)

# Register OdRxMember in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxMember_swigregister(OdRxMember)

def OdRxMember_cast(*args) -> "OdSmartPtr< OdRxMember >":
    return _ODA_Kernel_Py3.OdRxMember_cast(*args)

def OdRxMember_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxMember_desc(*args)

def OdRxMember_createObject(*args) -> "OdSmartPtr< OdRxMember >":
    return _ODA_Kernel_Py3.OdRxMember_createObject(*args)

def OdRxMember_deleteMember(*args) -> "void":
    return _ODA_Kernel_Py3.OdRxMember_deleteMember(*args)

class OdRxEnumTag(OdRxMember):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxEnumTag >":
        return _ODA_Kernel_Py3.OdRxEnumTag_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxEnumTag_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxEnumTag_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxEnumTag_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdRxEnumTagPtr":
        return _ODA_Kernel_Py3.OdRxEnumTag_createObject(*args)

    def value(self, *args) -> "OdRxValue const &":
        return _ODA_Kernel_Py3.OdRxEnumTag_value(self, *args)

    def alternateLocalName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxEnumTag_alternateLocalName(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxEnumTag

# Register OdRxEnumTag in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxEnumTag_swigregister(OdRxEnumTag)

def OdRxEnumTag_cast(*args) -> "OdSmartPtr< OdRxEnumTag >":
    return _ODA_Kernel_Py3.OdRxEnumTag_cast(*args)

def OdRxEnumTag_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxEnumTag_desc(*args)

def OdRxEnumTag_createObject(*args) -> "OdRxEnumTagPtr":
    return _ODA_Kernel_Py3.OdRxEnumTag_createObject(*args)

class OdRxMemberCollection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxMemberCollection

    def count(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdRxMemberCollection_count(self, *args)

    def getAt(self, *args) -> "OdRxMember *":
        return _ODA_Kernel_Py3.OdRxMemberCollection_getAt(self, *args)

# Register OdRxMemberCollection in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxMemberCollection_swigregister(OdRxMemberCollection)

class OdRxMemberCollectionBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def add(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxMemberCollectionBuilder_add(self, *args)

    def owner(self, *args) -> "OdRxClass const *":
        return _ODA_Kernel_Py3.OdRxMemberCollectionBuilder_owner(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxMemberCollectionBuilder

# Register OdRxMemberCollectionBuilder in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxMemberCollectionBuilder_swigregister(OdRxMemberCollectionBuilder)

class OdRxMemberIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxMemberIterator

    def done(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxMemberIterator_done(self, *args)

    def next(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxMemberIterator_next(self, *args)

    def current(self, *args) -> "OdRxMember *":
        return _ODA_Kernel_Py3.OdRxMemberIterator_current(self, *args)

    def find(self, *args) -> "OdRxMemberPtr":
        return _ODA_Kernel_Py3.OdRxMemberIterator_find(self, *args)

    def size(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdRxMemberIterator_size(self, *args)

# Register OdRxMemberIterator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxMemberIterator_swigregister(OdRxMemberIterator)

class OdRxMemberQueryContext(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxMemberQueryContext >":
        return _ODA_Kernel_Py3.OdRxMemberQueryContext_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxMemberQueryContext_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxMemberQueryContext_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxMemberQueryContext_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxMemberQueryContext >":
        return _ODA_Kernel_Py3.OdRxMemberQueryContext_createObject(*args)

    def newMemberIterator(self, *args) -> "OdRxMemberIteratorPtr":
        return _ODA_Kernel_Py3.OdRxMemberQueryContext_newMemberIterator(self, *args)

    def find(self, *args) -> "OdRxMemberPtr":
        return _ODA_Kernel_Py3.OdRxMemberQueryContext_find(self, *args)

# Register OdRxMemberQueryContext in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxMemberQueryContext_swigregister(OdRxMemberQueryContext)

def OdRxMemberQueryContext_cast(*args) -> "OdSmartPtr< OdRxMemberQueryContext >":
    return _ODA_Kernel_Py3.OdRxMemberQueryContext_cast(*args)

def OdRxMemberQueryContext_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxMemberQueryContext_desc(*args)

def OdRxMemberQueryContext_createObject(*args) -> "OdSmartPtr< OdRxMemberQueryContext >":
    return _ODA_Kernel_Py3.OdRxMemberQueryContext_createObject(*args)

class OdRxFacetProvider(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxFacetProvider >":
        return _ODA_Kernel_Py3.OdRxFacetProvider_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxFacetProvider_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxFacetProvider_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxFacetProvider_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxFacetProvider >":
        return _ODA_Kernel_Py3.OdRxFacetProvider_createObject(*args)

    def getFacets(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxFacetProvider_getFacets(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxFacetProvider

# Register OdRxFacetProvider in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxFacetProvider_swigregister(OdRxFacetProvider)

def OdRxFacetProvider_cast(*args) -> "OdSmartPtr< OdRxFacetProvider >":
    return _ODA_Kernel_Py3.OdRxFacetProvider_cast(*args)

def OdRxFacetProvider_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxFacetProvider_desc(*args)

def OdRxFacetProvider_createObject(*args) -> "OdSmartPtr< OdRxFacetProvider >":
    return _ODA_Kernel_Py3.OdRxFacetProvider_createObject(*args)

class OdRxMemberReactor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxMemberReactor

    def goodbye(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxMemberReactor_goodbye(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdRxMemberReactor_swiginit(self, _ODA_Kernel_Py3.new_OdRxMemberReactor(*args))

# Register OdRxMemberReactor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxMemberReactor_swigregister(OdRxMemberReactor)

class OdRxMemberQueryEngine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def theEngine(*args) -> "OdRxMemberQueryEngine *":
        return _ODA_Kernel_Py3.OdRxMemberQueryEngine_theEngine(*args)

    def find(self, *args) -> "OdRxMemberPtr":
        return _ODA_Kernel_Py3.OdRxMemberQueryEngine_find(self, *args)

    def newMemberIterator(self, *args) -> "OdRxMemberIteratorPtr":
        return _ODA_Kernel_Py3.OdRxMemberQueryEngine_newMemberIterator(self, *args)

    def defaultContext(self, *args) -> "OdRxMemberQueryContext const *":
        return _ODA_Kernel_Py3.OdRxMemberQueryEngine_defaultContext(self, *args)

    def promotingContext(self, *args) -> "OdRxPromotingQueryContext const *":
        return _ODA_Kernel_Py3.OdRxMemberQueryEngine_promotingContext(self, *args)

    def addFacetProvider(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxMemberQueryEngine_addFacetProvider(self, *args)

    def removeFacetProvider(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxMemberQueryEngine_removeFacetProvider(self, *args)

    def addReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxMemberQueryEngine_addReactor(self, *args)

    def removeReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxMemberQueryEngine_removeReactor(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxMemberQueryEngine

# Register OdRxMemberQueryEngine in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxMemberQueryEngine_swigregister(OdRxMemberQueryEngine)

def OdRxMemberQueryEngine_theEngine(*args) -> "OdRxMemberQueryEngine *":
    return _ODA_Kernel_Py3.OdRxMemberQueryEngine_theEngine(*args)

class OdRxMemberOverrule(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxMemberOverrule >":
        return _ODA_Kernel_Py3.OdRxMemberOverrule_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxMemberOverrule_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxMemberOverrule_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxMemberOverrule_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxMemberOverrule >":
        return _ODA_Kernel_Py3.OdRxMemberOverrule_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxMemberOverrule

# Register OdRxMemberOverrule in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxMemberOverrule_swigregister(OdRxMemberOverrule)

def OdRxMemberOverrule_cast(*args) -> "OdSmartPtr< OdRxMemberOverrule >":
    return _ODA_Kernel_Py3.OdRxMemberOverrule_cast(*args)

def OdRxMemberOverrule_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxMemberOverrule_desc(*args)

def OdRxMemberOverrule_createObject(*args) -> "OdSmartPtr< OdRxMemberOverrule >":
    return _ODA_Kernel_Py3.OdRxMemberOverrule_createObject(*args)

class IOdRxNonBlittableType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def construct(self, *args) -> "void":
        return _ODA_Kernel_Py3.IOdRxNonBlittableType_construct(self, *args)

    def assign(self, *args) -> "void":
        return _ODA_Kernel_Py3.IOdRxNonBlittableType_assign(self, *args)

    def destruct(self, *args) -> "void":
        return _ODA_Kernel_Py3.IOdRxNonBlittableType_destruct(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_IOdRxNonBlittableType

# Register IOdRxNonBlittableType in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.IOdRxNonBlittableType_swigregister(IOdRxNonBlittableType)

class IOdRxEnumeration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def count(self, *args) -> "int":
        return _ODA_Kernel_Py3.IOdRxEnumeration_count(self, *args)

    def getAt(self, *args) -> "OdRxEnumTag const &":
        return _ODA_Kernel_Py3.IOdRxEnumeration_getAt(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_IOdRxEnumeration

# Register IOdRxEnumeration in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.IOdRxEnumeration_swigregister(IOdRxEnumeration)

class IOdRxReferenceType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kForRead = _ODA_Kernel_Py3.IOdRxReferenceType_kForRead
    kForWrite = _ODA_Kernel_Py3.IOdRxReferenceType_kForWrite
    kForNotify = _ODA_Kernel_Py3.IOdRxReferenceType_kForNotify

    def dereference(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.IOdRxReferenceType_dereference(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_IOdRxReferenceType

# Register IOdRxReferenceType in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.IOdRxReferenceType_swigregister(IOdRxReferenceType)

class IOdRxObjectValue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getRxObject(self, *args) -> "OdRxObject const *":
        return _ODA_Kernel_Py3.IOdRxObjectValue_getRxObject(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_IOdRxObjectValue

# Register IOdRxObjectValue in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.IOdRxObjectValue_swigregister(IOdRxObjectValue)

class OdGUID(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGUID_swiginit(self, _ODA_Kernel_Py3.new_OdGUID(*args))

    def __lt__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGUID___lt__(self, *args)

    def __gt__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGUID___gt__(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGUID___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGUID___ne__(self, *args)

    def __le__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGUID___le__(self, *args)

    def __ge__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGUID___ge__(self, *args)

    def toString(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdGUID_toString(self, *args)

    def data(self, *args) -> "OdGUID::DataType const &":
        return _ODA_Kernel_Py3.OdGUID_data(self, *args)

    def setGUIDdata(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGUID_setGUIDdata(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGUID

# Register OdGUID in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGUID_swigregister(OdGUID)
OdGUID.kNull = _ODA_Kernel_Py3.cvar.OdGUID_kNull

class StringFormat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Digits = _ODA_Kernel_Py3.StringFormat_Digits
    Hyphenses = _ODA_Kernel_Py3.StringFormat_Hyphenses
    Braces = _ODA_Kernel_Py3.StringFormat_Braces
    Parentheses = _ODA_Kernel_Py3.StringFormat_Parentheses
    Extended = _ODA_Kernel_Py3.StringFormat_Extended

    def __init__(self, *args):
        _ODA_Kernel_Py3.StringFormat_swiginit(self, _ODA_Kernel_Py3.new_StringFormat(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_StringFormat

# Register StringFormat in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.StringFormat_swigregister(StringFormat)

class OdSiShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSiShape_contains(self, *args)

    def intersects(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSiShape_intersects(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdSiShape

    def clone(self, *args) -> "OdSiShape *":
        return _ODA_Kernel_Py3.OdSiShape_clone(self, *args)

    def transform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiShape_transform(self, *args)

    @staticmethod
    def isOverallSpace(*args) -> "bool":
        return _ODA_Kernel_Py3.OdSiShape_isOverallSpace(*args)

    @staticmethod
    def isNoSpace(*args) -> "bool":
        return _ODA_Kernel_Py3.OdSiShape_isNoSpace(*args)

# Register OdSiShape in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdSiShape_swigregister(OdSiShape)

def OdSiShape_isOverallSpace(*args) -> "bool":
    return _ODA_Kernel_Py3.OdSiShape_isOverallSpace(*args)

def OdSiShape_isNoSpace(*args) -> "bool":
    return _ODA_Kernel_Py3.OdSiShape_isNoSpace(*args)
OdSiShape.kOverallSpace = _ODA_Kernel_Py3.cvar.OdSiShape_kOverallSpace
OdSiShape.kNoSpace = _ODA_Kernel_Py3.cvar.OdSiShape_kNoSpace

class OdSiEntity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def extents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSiEntity_extents(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdSiEntity

# Register OdSiEntity in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdSiEntity_swigregister(OdSiEntity)

class OdSiVisitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def visit(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiVisitor_visit(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdSiVisitor

# Register OdSiVisitor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdSiVisitor_swigregister(OdSiVisitor)

class OdSiSpatialIndex(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdSiSpatialIndex >":
        return _ODA_Kernel_Py3.OdSiSpatialIndex_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdSiSpatialIndex_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdSiSpatialIndex_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdSiSpatialIndex_queryX(self, *args)
    kSiNoFlags = _ODA_Kernel_Py3.OdSiSpatialIndex_kSiNoFlags
    kSiPlanar = _ODA_Kernel_Py3.OdSiSpatialIndex_kSiPlanar
    kSiModifyMtAware = _ODA_Kernel_Py3.OdSiSpatialIndex_kSiModifyMtAware
    kSiAccessMtAware = _ODA_Kernel_Py3.OdSiSpatialIndex_kSiAccessMtAware
    kSiFullMtAware = _ODA_Kernel_Py3.OdSiSpatialIndex_kSiFullMtAware

    @staticmethod
    def createObject(*args) -> "OdSiSpatialIndexPtr":
        return _ODA_Kernel_Py3.OdSiSpatialIndex_createObject(*args)

    def insert(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiSpatialIndex_insert(self, *args)

    def remove(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSiSpatialIndex_remove(self, *args)

    def query(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiSpatialIndex_query(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiSpatialIndex_clear(self, *args)

    def setMaxTreeDepth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiSpatialIndex_setMaxTreeDepth(self, *args)

    def setMaxNodeSize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiSpatialIndex_setMaxNodeSize(self, *args)

    def extents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSiSpatialIndex_extents(self, *args)

    def maxTreeDepth(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdSiSpatialIndex_maxTreeDepth(self, *args)

    def maxNodeSize(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdSiSpatialIndex_maxNodeSize(self, *args)

    def tolerance(self, *args) -> "OdGeTol const &":
        return _ODA_Kernel_Py3.OdSiSpatialIndex_tolerance(self, *args)

    def setTolerance(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiSpatialIndex_setTolerance(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdSiSpatialIndex

# Register OdSiSpatialIndex in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdSiSpatialIndex_swigregister(OdSiSpatialIndex)

def OdSiSpatialIndex_cast(*args) -> "OdSmartPtr< OdSiSpatialIndex >":
    return _ODA_Kernel_Py3.OdSiSpatialIndex_cast(*args)

def OdSiSpatialIndex_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdSiSpatialIndex_desc(*args)

def OdSiSpatialIndex_createObject(*args) -> "OdSiSpatialIndexPtr":
    return _ODA_Kernel_Py3.OdSiSpatialIndex_createObject(*args)

class OdSiDynamicShape(OdSiShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def update(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiDynamicShape_update(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdSiDynamicShape

# Register OdSiDynamicShape in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdSiDynamicShape_swigregister(OdSiDynamicShape)

class OdSiShapesIntersection(OdSiShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdSiShapesIntersection_swiginit(self, _ODA_Kernel_Py3.new_OdSiShapesIntersection(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdSiShapesIntersection

    def shapes(self, *args) -> "OdSiShapePtrArray const &":
        return _ODA_Kernel_Py3.OdSiShapesIntersection_shapes(self, *args)

    def reset(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiShapesIntersection_reset(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiShapesIntersection_clear(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSiShapesIntersection_contains(self, *args)

    def intersects(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSiShapesIntersection_intersects(self, *args)

    def clone(self, *args) -> "OdSiShape *":
        return _ODA_Kernel_Py3.OdSiShapesIntersection_clone(self, *args)

    def transform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiShapesIntersection_transform(self, *args)

# Register OdSiShapesIntersection in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdSiShapesIntersection_swigregister(OdSiShapesIntersection)

class OdGsNode(OdGsCache):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def invalidVp(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsNode_invalidVp(self, *args)

    def setToDrawable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsNode_setToDrawable(self, *args)

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsNode >":
        return _ODA_Kernel_Py3.OdGsNode_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsNode_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsNode_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsNode_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsNode >":
        return _ODA_Kernel_Py3.OdGsNode_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsNode

    def baseModel(self, *args) -> "OdGsBaseModel *":
        return _ODA_Kernel_Py3.OdGsNode_baseModel(self, *args)

    def model(self, *args) -> "OdGsModel *":
        return _ODA_Kernel_Py3.OdGsNode_model(self, *args)

    def isContainer(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsNode_isContainer(self, *args)

    def nodeType(self, *args) -> "ENodeType":
        return _ODA_Kernel_Py3.OdGsNode_nodeType(self, *args)

    def isSyncDrawable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsNode_isSyncDrawable(self, *args)

    def invalidate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsNode_invalidate(self, *args)

    def underlyingDrawable(self, *args) -> "OdGiDrawablePtr":
        return _ODA_Kernel_Py3.OdGsNode_underlyingDrawable(self, *args)

    def underlyingDrawableId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGsNode_underlyingDrawableId(self, *args)

    def updateVisible(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsNode_updateVisible(self, *args)

    def propagateLayerChanges(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsNode_propagateLayerChanges(self, *args)

    def highlight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsNode_highlight(self, *args)

    def isHighlighted(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsNode_isHighlighted(self, *args)

    def isHighlightedAll(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsNode_isHighlightedAll(self, *args)

    def destroy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsNode_destroy(self, *args)

    def hide(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsNode_hide(self, *args)

    def isHidden(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsNode_isHidden(self, *args)

    def isSelectableIfHidden(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsNode_isSelectableIfHidden(self, *args)

    def isHiddenAll(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsNode_isHiddenAll(self, *args)

    def selectionStyle(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsNode_selectionStyle(self, *args)

    def hasSelectionStyle(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsNode_hasSelectionStyle(self, *args)

    def userFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsNode_userFlags(self, *args)

    def setUserFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsNode_setUserFlags(self, *args)

    def saveNodeState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsNode_saveNodeState(self, *args)

    def loadNodeState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsNode_loadNodeState(self, *args)

    def saveClientNodeState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsNode_saveClientNodeState(self, *args)

    def loadClientNodeState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsNode_loadClientNodeState(self, *args)

    def postprocessNodeLoading(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsNode_postprocessNodeLoading(self, *args)

    def extents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsNode_extents(self, *args)

    def modelExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsNode_modelExtents(self, *args)

    def getMaxLineweightUsed(self, *args) -> "OdDb::LineWeight":
        return _ODA_Kernel_Py3.OdGsNode_getMaxLineweightUsed(self, *args)

    def setDrawableNull(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsNode_setDrawableNull(self, *args)

    def addContentToUpdateManager(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsNode_addContentToUpdateManager(self, *args)

# Register OdGsNode in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsNode_swigregister(OdGsNode)

def OdGsNode_cast(*args) -> "OdSmartPtr< OdGsNode >":
    return _ODA_Kernel_Py3.OdGsNode_cast(*args)

def OdGsNode_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsNode_desc(*args)

def OdGsNode_createObject(*args) -> "OdSmartPtr< OdGsNode >":
    return _ODA_Kernel_Py3.OdGsNode_createObject(*args)

class UpdateManagerContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kForMemoryLimit = _ODA_Kernel_Py3.UpdateManagerContext_kForMemoryLimit
    kForDrawOrder = _ODA_Kernel_Py3.UpdateManagerContext_kForDrawOrder
    contextType = property(_ODA_Kernel_Py3.UpdateManagerContext_contextType_get, _ODA_Kernel_Py3.UpdateManagerContext_contextType_set)
    pView = property(_ODA_Kernel_Py3.UpdateManagerContext_pView_get, _ODA_Kernel_Py3.UpdateManagerContext_pView_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.UpdateManagerContext_swiginit(self, _ODA_Kernel_Py3.new_UpdateManagerContext(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_UpdateManagerContext

# Register UpdateManagerContext in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.UpdateManagerContext_swigregister(UpdateManagerContext)

kDictSorted = _ODA_Kernel_Py3.kDictSorted
kDictCollated = _ODA_Kernel_Py3.kDictCollated
kDictReversed = _ODA_Kernel_Py3.kDictReversed
class OdGsBaseVectorizeDevice(OdGsDevice):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def invalid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_invalid(self, *args)

    def setInvalid(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_setInvalid(self, *args)

    def setValid(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_setValid(self, *args)

    def supportPartialUpdate(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_supportPartialUpdate(self, *args)

    def supportPartialScreenUpdate(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_supportPartialScreenUpdate(self, *args)

    def onViewAdded(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_onViewAdded(self, *args)

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsBaseVectorizeDevice >":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsBaseVectorizeDevice >":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsBaseVectorizeDevice

    def userGiContext(self, *args) -> "OdGiContext *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_userGiContext(self, *args)

    def setUserGiContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_setUserGiContext(self, *args)

    def properties(self, *args) -> "OdRxDictionaryPtr":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_properties(self, *args)

    def height(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_height(self, *args)

    def width(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_width(self, *args)

    def hOffset(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_hOffset(self, *args)

    def vOffset(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_vOffset(self, *args)

    def invalidate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_invalidate(self, *args)

    def invalidateRegion(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_invalidateRegion(self, *args)

    def invalidRects(self, *args) -> "OdGsDCRectArray const *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_invalidRects(self, *args)

    def isValid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_isValid(self, *args)

    def update(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_update(self, *args)

    def updateGeometry(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_updateGeometry(self, *args)

    def updateScreen(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_updateScreen(self, *args)

    def onSize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_onSize(self, *args)

    def outputRect(self, *args) -> "OdGsDCRect const &":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_outputRect(self, *args)

    def getSize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_getSize(self, *args)

    def onRealizeForegroundPalette(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_onRealizeForegroundPalette(self, *args)

    def onRealizeBackgroundPalette(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_onRealizeBackgroundPalette(self, *args)

    def onDisplayChange(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_onDisplayChange(self, *args)

    def createView(self, *args) -> "OdGsViewPtr":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_createView(self, *args)

    def addView(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_addView(self, *args)

    def insertView(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_insertView(self, *args)

    def numViews(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_numViews(self, *args)

    def viewAt(self, *args) -> "OdGsView const *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_viewAt(self, *args)

    def viewImplAt(self, *args) -> "OdGsViewImpl const *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_viewImplAt(self, *args)

    def eraseView(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_eraseView(self, *args)

    def eraseAllViews(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_eraseAllViews(self, *args)

    def setBackgroundColor(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_setBackgroundColor(self, *args)

    def getBackgroundColor(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_getBackgroundColor(self, *args)

    def setLogicalPalette(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_setLogicalPalette(self, *args)

    def getSnapShot(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_getSnapShot(self, *args)

    def getColor(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_getColor(self, *args)

    def getPaletteBackground(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_getPaletteBackground(self, *args)

    def getPalette(self, *args) -> "ODCOLORREF const *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_getPalette(self, *args)

    def getLogicalPalette(self, *args) -> "ODCOLORREF const *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_getLogicalPalette(self, *args)

    def createModel(self, *args) -> "OdGsModelPtr":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_createModel(self, *args)

    def isModelCompatible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_isModelCompatible(self, *args)

    def rootView(self, *args) -> "OdGsView const *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_rootView(self, *args)

    def sortRenderTypes(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_sortRenderTypes(self, *args)

    def setSortRenderTypes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_setSortRenderTypes(self, *args)

    def renderTypeWeight(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_renderTypeWeight(self, *args)

    def transientRenderType(self, *args) -> "OdGsModel::RenderType":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_transientRenderType(self, *args)

    def setTransientRenderType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_setTransientRenderType(self, *args)

    def supportOverlays(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_supportOverlays(self, *args)

    def setSupportOverlays(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_setSupportOverlays(self, *args)

    def renderTypeOverlay(self, *args) -> "OdGsOverlayId":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_renderTypeOverlay(self, *args)

    def gsModelOverlay(self, *args) -> "OdGsOverlayId":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_gsModelOverlay(self, *args)

    def isOverlayRequireUpdate(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_isOverlayRequireUpdate(self, *args)

    def isSpatialIndexDisabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_isSpatialIndexDisabled(self, *args)

    def disableSpatialIndex(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_disableSpatialIndex(self, *args)

    def isCullingVolumeEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_isCullingVolumeEnabled(self, *args)

    def enableCullingVolume(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_enableCullingVolume(self, *args)

    def supportHighlightTwoPass(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_supportHighlightTwoPass(self, *args)

    def setSupportHighlightTwoPass(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_setSupportHighlightTwoPass(self, *args)

    def isMtDisplay(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_isMtDisplay(self, *args)

    def supportDynamicHighlight(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_supportDynamicHighlight(self, *args)

    def supportDynamicSubhighlight(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_supportDynamicSubhighlight(self, *args)

    def supportSelectionStyles(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_supportSelectionStyles(self, *args)

    def supportBlocks(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_supportBlocks(self, *args)

    def supportComposition(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_supportComposition(self, *args)

    def compositionEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_compositionEnabled(self, *args)

    def enableComposition(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_enableComposition(self, *args)

    def isDisplayOffLayersEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_isDisplayOffLayersEnabled(self, *args)

    def enableDisplayOffLayers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_enableDisplayOffLayers(self, *args)

    def isValidViewportId(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_isValidViewportId(self, *args)

    def useVpLtypeScaleMult(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_useVpLtypeScaleMult(self, *args)

    def useVpFilterFunction(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_useVpFilterFunction(self, *args)

    def getSectionGeometryManager(self, *args) -> "OdGiSectionGeometryManager *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_getSectionGeometryManager(self, *args)

    def getSectionGeometryMap(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_getSectionGeometryMap(self, *args)

    def clearSectionGeometryMap(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_clearSectionGeometryMap(self, *args)

    def mtServices(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_mtServices(self, *args)

    def transientManager(self, *args) -> "OdGiTransientManager *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_transientManager(self, *args)

    def setTransientManager(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_setTransientManager(self, *args)

    def isSupportDeviceStateSaving(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_isSupportDeviceStateSaving(self, *args)

    def saveDeviceState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_saveDeviceState(self, *args)

    def loadDeviceState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_loadDeviceState(self, *args)

    def saveClientDeviceState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_saveClientDeviceState(self, *args)

    def loadClientDeviceState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_loadClientDeviceState(self, *args)

    def saveLinkedDeviceState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_saveLinkedDeviceState(self, *args)

    def loadLinkedDeviceState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_loadLinkedDeviceState(self, *args)

    def supportInteractiveViewMode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_supportInteractiveViewMode(self, *args)

    def setSupportInteractiveViewMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_setSupportInteractiveViewMode(self, *args)

    def getUpdateManager(self, *args) -> "OdGsUpdateManagerPtr":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_getUpdateManager(self, *args)

    def setUpdateManager(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_setUpdateManager(self, *args)

    def updateManager(self, *args) -> "OdGsUpdateManager *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_updateManager(self, *args)

    def isSuppressHide(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_isSuppressHide(self, *args)

    def deviceSelfReference(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_deviceSelfReference(self, *args)
    m_vectPerfData = property(_ODA_Kernel_Py3.OdGsBaseVectorizeDevice_m_vectPerfData_get, _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_m_vectPerfData_set)

# Register OdGsBaseVectorizeDevice in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsBaseVectorizeDevice_swigregister(OdGsBaseVectorizeDevice)

def OdGsBaseVectorizeDevice_cast(*args) -> "OdSmartPtr< OdGsBaseVectorizeDevice >":
    return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_cast(*args)

def OdGsBaseVectorizeDevice_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_desc(*args)

def OdGsBaseVectorizeDevice_createObject(*args) -> "OdSmartPtr< OdGsBaseVectorizeDevice >":
    return _ODA_Kernel_Py3.OdGsBaseVectorizeDevice_createObject(*args)

class OdGiBaseVectorizerImpl(OdGiViewport, OdGiBaseVectorizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setUp(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_setUp(self, *args)

    def view(self, *args) -> "OdGsViewImpl &":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_view(self, *args)

    def awareFlags(self, *args) -> "OdUInt32 &":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_awareFlags(self, *args)

    def resetAwareFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_resetAwareFlags(self, *args)

    def effectivePlotStyle(self, *args) -> "OdPsPlotStyleData const &":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_effectivePlotStyle(self, *args)

    def getRenderMode(self, *args) -> "OdGsView::RenderMode":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_getRenderMode(self, *args)

    def clearLinetypeCache(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_clearLinetypeCache(self, *args)

    def setLinetypesEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_setLinetypesEnabled(self, *args)

    def isLinetypesEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_isLinetypesEnabled(self, *args)

    def setSkipViewSectioning(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_setSkipViewSectioning(self, *args)

    def isViewSectioningSkipped(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_isViewSectioningSkipped(self, *args)

    def setModelSection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_setModelSection(self, *args)

    def liveSection(self, *args) -> "OdGiDrawable const *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_liveSection(self, *args)

    def modelToWorldTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_modelToWorldTransform(self, *args)

    def worldToModelTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_worldToModelTransform(self, *args)

    def objectToDeviceMatrix(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_objectToDeviceMatrix(self, *args)

    def lineweightToPixels(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_lineweightToPixels(self, *args)

    def hasLineweightOverride(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_hasLineweightOverride(self, *args)

    def hasLinestyleOverride(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_hasLinestyleOverride(self, *args)

    def isMultiplyLineStyleScale(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_isMultiplyLineStyleScale(self, *args)

    def currentLineweightOverride(self, *args) -> "OdGiLineweightOverride const *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_currentLineweightOverride(self, *args)

    def paletteColor(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_paletteColor(self, *args)

    def getPalette(self, *args) -> "ODCOLORREF const *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_getPalette(self, *args)

    def hasPaletteOverride(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_hasPaletteOverride(self, *args)

    def getModelToEyeTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_getModelToEyeTransform(self, *args)

    def getEyeToModelTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_getEyeToModelTransform(self, *args)

    def getWorldToEyeTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_getWorldToEyeTransform(self, *args)

    def getEyeToWorldTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_getEyeToWorldTransform(self, *args)

    def getWorldToModelTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_getWorldToModelTransform(self, *args)

    def getModelToWorldTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_getModelToWorldTransform(self, *args)

    def isPerspective(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_isPerspective(self, *args)

    def doPerspective(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_doPerspective(self, *args)

    def doInversePerspective(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_doInversePerspective(self, *args)

    def getNumPixelsInUnitSquare(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_getNumPixelsInUnitSquare(self, *args)

    def getCameraLocation(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_getCameraLocation(self, *args)

    def getCameraTarget(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_getCameraTarget(self, *args)

    def getCameraUpVector(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_getCameraUpVector(self, *args)

    def viewDir(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_viewDir(self, *args)

    def viewportId(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_viewportId(self, *args)

    def acadWindowId(self, *args) -> "OdInt16":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_acadWindowId(self, *args)

    def getViewportDcCorners(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_getViewportDcCorners(self, *args)

    def getFrontAndBackClipValues(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_getFrontAndBackClipValues(self, *args)

    def linetypeScaleMultiplier(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_linetypeScaleMultiplier(self, *args)

    def linetypeGenerationCriteria(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_linetypeGenerationCriteria(self, *args)

    def layerVisible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_layerVisible(self, *args)

    def contextualColors(self, *args) -> "OdGiContextualColors const *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_contextualColors(self, *args)

    def annotationScaleId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_annotationScaleId(self, *args)

    def pushModelTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_pushModelTransform(self, *args)

    def popModelTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_popModelTransform(self, *args)

    def xline(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_xline(self, *args)

    def ray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_ray(self, *args)

    def shell(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_shell(self, *args)

    def mesh(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_mesh(self, *args)

    def setExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_setExtents(self, *args)

    def deviation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_deviation(self, *args)

    def regenType(self, *args) -> "OdGiRegenType":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_regenType(self, *args)

    def sequenceNumber(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_sequenceNumber(self, *args)

    def isValidId(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_isValidId(self, *args)

    def viewportObjectId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_viewportObjectId(self, *args)

    def viewport(self, *args) -> "OdGiViewport &":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_viewport(self, *args)

    def setFillPlane(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_setFillPlane(self, *args)

    def setFillType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_setFillType(self, *args)

    def visualStyle(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_visualStyle(self, *args)

    def setupForEntity(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_setupForEntity(self, *args)

    def pushLineweightOverride(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_pushLineweightOverride(self, *args)

    def popLineweightOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_popLineweightOverride(self, *args)

    def pushPaletteOverride(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_pushPaletteOverride(self, *args)

    def popPaletteOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_popPaletteOverride(self, *args)

    def hasPaletteOverrides(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_hasPaletteOverrides(self, *args)

    def giViewport(self, *args) -> "OdGiViewport const *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_giViewport(self, *args)

    def gsView(self, *args) -> "OdGsView const *":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_gsView(self, *args)

    def annotationScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_annotationScale(self, *args)

    def beginViewVectorization(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_beginViewVectorization(self, *args)

    def endViewVectorization(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_endViewVectorization(self, *args)

    def onTraitsModified(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_onTraitsModified(self, *args)

    def effectiveTraits(self, *args) -> "OdGiSubEntityTraitsData const &":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_effectiveTraits(self, *args)
    kNotVectorizing = _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_kNotVectorizing
    kVectorizing = _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_kVectorizing
    kDisplaying = _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_kDisplaying
    kSelecting = _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_kSelecting
    kExtentsComp = _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_kExtentsComp

    def vectorizingFlags(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_vectorizingFlags(self, *args)

    def setVectorizingFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBaseVectorizerImpl_setVectorizingFlags(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiBaseVectorizerImpl

# Register OdGiBaseVectorizerImpl in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiBaseVectorizerImpl_swigregister(OdGiBaseVectorizerImpl)

OdGeIslandStyle_Normal = _ODA_Kernel_Py3.OdGeIslandStyle_Normal
OdGeIslandStyle_Outer = _ODA_Kernel_Py3.OdGeIslandStyle_Outer
OdGeIslandStyle_Ignore = _ODA_Kernel_Py3.OdGeIslandStyle_Ignore
class OdHatchPatternLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_dLineAngle = property(_ODA_Kernel_Py3.OdHatchPatternLine_m_dLineAngle_get, _ODA_Kernel_Py3.OdHatchPatternLine_m_dLineAngle_set)
    m_basePoint = property(_ODA_Kernel_Py3.OdHatchPatternLine_m_basePoint_get, _ODA_Kernel_Py3.OdHatchPatternLine_m_basePoint_set)
    m_patternOffset = property(_ODA_Kernel_Py3.OdHatchPatternLine_m_patternOffset_get, _ODA_Kernel_Py3.OdHatchPatternLine_m_patternOffset_set)
    m_dashes = property(_ODA_Kernel_Py3.OdHatchPatternLine_m_dashes_get, _ODA_Kernel_Py3.OdHatchPatternLine_m_dashes_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdHatchPatternLine_swiginit(self, _ODA_Kernel_Py3.new_OdHatchPatternLine(*args))

    def transformBy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdHatchPatternLine_transformBy(self, *args)

    def scale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdHatchPatternLine_scale(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdHatchPatternLine

# Register OdHatchPatternLine in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdHatchPatternLine_swigregister(OdHatchPatternLine)

class OdGeCurve3d(OdGeEntity3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getInterval(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurve3d_getInterval(self, *args)

    def reverseParam(self, *args) -> "OdGeCurve3d &":
        return _ODA_Kernel_Py3.OdGeCurve3d_reverseParam(self, *args)

    def setInterval(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve3d_setInterval(self, *args)

    def distanceTo(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCurve3d_distanceTo(self, *args)

    def closestPointTo(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeCurve3d_closestPointTo(self, *args)

    def getClosestPointTo(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurve3d_getClosestPointTo(self, *args)

    def projClosestPointTo(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeCurve3d_projClosestPointTo(self, *args)

    def getProjClosestPointTo(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurve3d_getProjClosestPointTo(self, *args)

    def getNormalPoint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve3d_getNormalPoint(self, *args)

    def boundBlock(self, *args) -> "OdGeBoundBlock3d":
        return _ODA_Kernel_Py3.OdGeCurve3d_boundBlock(self, *args)

    def orthoBoundBlock(self, *args) -> "OdGeBoundBlock3d":
        return _ODA_Kernel_Py3.OdGeCurve3d_orthoBoundBlock(self, *args)

    def getGeomExtents(self, *args) -> "OdGeExtents3d":
        return _ODA_Kernel_Py3.OdGeCurve3d_getGeomExtents(self, *args)

    def project(self, *args) -> "OdGeEntity3d *":
        return _ODA_Kernel_Py3.OdGeCurve3d_project(self, *args)

    def orthoProject(self, *args) -> "OdGeEntity3d *":
        return _ODA_Kernel_Py3.OdGeCurve3d_orthoProject(self, *args)

    def isOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve3d_isOn(self, *args)

    def paramOf(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCurve3d_paramOf(self, *args)

    def getTrimmedOffset(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurve3d_getTrimmedOffset(self, *args)

    def isClosed(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve3d_isClosed(self, *args)

    def isPlanar(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve3d_isPlanar(self, *args)

    def isLinear(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve3d_isLinear(self, *args)

    def isCoplanarWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve3d_isCoplanarWith(self, *args)

    def isPeriodic(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve3d_isPeriodic(self, *args)

    def length(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCurve3d_length(self, *args)

    def paramAtLength(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCurve3d_paramAtLength(self, *args)

    def area(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve3d_area(self, *args)

    def getSplitCurves(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurve3d_getSplitCurves(self, *args)

    def explode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve3d_explode(self, *args)

    def getLocalClosestPoints(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurve3d_getLocalClosestPoints(self, *args)

    def hasStartPoint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve3d_hasStartPoint(self, *args)

    def hasEndPoint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve3d_hasEndPoint(self, *args)

    def hasMidPoint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurve3d_hasMidPoint(self, *args)

    def midPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeCurve3d_midPoint(self, *args)

    def evalPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeCurve3d_evalPoint(self, *args)

    def getSamplePoints(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurve3d_getSamplePoints(self, *args)

    def appendSamplePoints(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurve3d_appendSamplePoints(self, *args)

    def convertTo2d(self, *args) -> "OdGeCurve2d *":
        return _ODA_Kernel_Py3.OdGeCurve3d_convertTo2d(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeCurve3d

# Register OdGeCurve3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeCurve3d_swigregister(OdGeCurve3d)

class OdBrMesh2dFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrMesh2dFilter_swiginit(self, _ODA_Kernel_Py3.new_OdBrMesh2dFilter(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrMesh2dFilter

    def set(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMesh2dFilter_set(self, *args)

    def getBrEntity(self, *args) -> "OdBrEntity const *":
        return _ODA_Kernel_Py3.OdBrMesh2dFilter_getBrEntity(self, *args)

    def getMeshControl(self, *args) -> "OdBrMesh2dControl const &":
        return _ODA_Kernel_Py3.OdBrMesh2dFilter_getMeshControl(self, *args)

# Register OdBrMesh2dFilter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrMesh2dFilter_swigregister(OdBrMesh2dFilter)

class OdBrMesh(OdBrMeshEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrMesh

# Register OdBrMesh in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrMesh_swigregister(OdBrMesh)

class OdBrElement(OdBrMeshEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrElement

# Register OdBrElement in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrElement_swigregister(OdBrElement)

class OdGeEllipCone(OdGeSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeEllipCone_swiginit(self, _ODA_Kernel_Py3.new_OdGeEllipCone(*args))

    def radiusRatio(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipCone_radiusRatio(self, *args)

    def minorRadius(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipCone_minorRadius(self, *args)

    def majorRadius(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipCone_majorRadius(self, *args)

    def baseCenter(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeEllipCone_baseCenter(self, *args)

    def getAngles(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeEllipCone_getAngles(self, *args)

    def halfAngle(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipCone_halfAngle(self, *args)

    def getHalfAngle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeEllipCone_getHalfAngle(self, *args)

    def getHeight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeEllipCone_getHeight(self, *args)

    def heightAt(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipCone_heightAt(self, *args)

    def axisOfSymmetry(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeEllipCone_axisOfSymmetry(self, *args)

    def majorAxis(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeEllipCone_majorAxis(self, *args)

    def minorAxis(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeEllipCone_minorAxis(self, *args)

    def apex(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeEllipCone_apex(self, *args)

    def isClosed(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEllipCone_isClosed(self, *args)

    def isOuterNormal(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEllipCone_isOuterNormal(self, *args)

    def setMinorRadius(self, *args) -> "OdGeEllipCone &":
        return _ODA_Kernel_Py3.OdGeEllipCone_setMinorRadius(self, *args)

    def setMajorRadius(self, *args) -> "OdGeEllipCone &":
        return _ODA_Kernel_Py3.OdGeEllipCone_setMajorRadius(self, *args)

    def setAngles(self, *args) -> "OdGeEllipCone &":
        return _ODA_Kernel_Py3.OdGeEllipCone_setAngles(self, *args)

    def setHeight(self, *args) -> "OdGeEllipCone &":
        return _ODA_Kernel_Py3.OdGeEllipCone_setHeight(self, *args)

    def getPoleParam(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipCone_getPoleParam(self, *args)

    def intersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEllipCone_intersectWith(self, *args)

    def set(self, *args) -> "OdGeEllipCone &":
        return _ODA_Kernel_Py3.OdGeEllipCone_set(self, *args)

    def getUParamScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipCone_getUParamScale(self, *args)

    def setUParamScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeEllipCone_setUParamScale(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeEllipCone

# Register OdGeEllipCone in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeEllipCone_swigregister(OdGeEllipCone)

class OdGeEllipCylinder(OdGeSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeEllipCylinder_swiginit(self, _ODA_Kernel_Py3.new_OdGeEllipCylinder(*args))

    def radiusRatio(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_radiusRatio(self, *args)

    def minorRadius(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_minorRadius(self, *args)

    def majorRadius(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_majorRadius(self, *args)

    def origin(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_origin(self, *args)

    def getAngles(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_getAngles(self, *args)

    def getHeight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_getHeight(self, *args)

    def heightAt(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_heightAt(self, *args)

    def axisOfSymmetry(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_axisOfSymmetry(self, *args)

    def majorAxis(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_majorAxis(self, *args)

    def minorAxis(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_minorAxis(self, *args)

    def isOuterNormal(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_isOuterNormal(self, *args)

    def isClosed(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_isClosed(self, *args)

    def setIsOuterNormal(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_setIsOuterNormal(self, *args)

    def setMinorRadius(self, *args) -> "OdGeEllipCylinder &":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_setMinorRadius(self, *args)

    def setMajorRadius(self, *args) -> "OdGeEllipCylinder &":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_setMajorRadius(self, *args)

    def setAngles(self, *args) -> "OdGeEllipCylinder &":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_setAngles(self, *args)

    def setHeight(self, *args) -> "OdGeEllipCylinder &":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_setHeight(self, *args)

    def set(self, *args) -> "OdGeEllipCylinder &":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_set(self, *args)

    def intersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_intersectWith(self, *args)

    def getUParamScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_getUParamScale(self, *args)

    def setUParamScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeEllipCylinder_setUParamScale(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeEllipCylinder

# Register OdGeEllipCylinder in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeEllipCylinder_swigregister(OdGeEllipCylinder)

class OdGeKnotVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeKnotVector_swiginit(self, _ODA_Kernel_Py3.new_OdGeKnotVector(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeKnotVector

    def startParam(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeKnotVector_startParam(self, *args)

    def endParam(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeKnotVector_endParam(self, *args)

    def numIntervals(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeKnotVector_numIntervals(self, *args)

    def getInterval(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeKnotVector_getInterval(self, *args)

    def getDistinctKnots(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeKnotVector_getDistinctKnots(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeKnotVector_contains(self, *args)

    def isOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeKnotVector_isOn(self, *args)

    def reverse(self, *args) -> "OdGeKnotVector &":
        return _ODA_Kernel_Py3.OdGeKnotVector_reverse(self, *args)

    def removeAt(self, *args) -> "OdGeKnotVector &":
        return _ODA_Kernel_Py3.OdGeKnotVector_removeAt(self, *args)

    def removeSubVector(self, *args) -> "OdGeKnotVector &":
        return _ODA_Kernel_Py3.OdGeKnotVector_removeSubVector(self, *args)

    def insertAt(self, *args) -> "OdGeKnotVector &":
        return _ODA_Kernel_Py3.OdGeKnotVector_insertAt(self, *args)

    def insert(self, *args) -> "OdGeKnotVector &":
        return _ODA_Kernel_Py3.OdGeKnotVector_insert(self, *args)

    def append(self, *args) -> "OdGeKnotVector &":
        return _ODA_Kernel_Py3.OdGeKnotVector_append(self, *args)

    def split(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeKnotVector_split(self, *args)

    def setRange(self, *args) -> "OdGeKnotVector &":
        return _ODA_Kernel_Py3.OdGeKnotVector_setRange(self, *args)

    def tolerance(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeKnotVector_tolerance(self, *args)

    def setTolerance(self, *args) -> "OdGeKnotVector &":
        return _ODA_Kernel_Py3.OdGeKnotVector_setTolerance(self, *args)

    def length(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeKnotVector_length(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeKnotVector_isEmpty(self, *args)

    def logicalLength(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeKnotVector_logicalLength(self, *args)

    def setLogicalLength(self, *args) -> "OdGeKnotVector &":
        return _ODA_Kernel_Py3.OdGeKnotVector_setLogicalLength(self, *args)

    def physicalLength(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeKnotVector_physicalLength(self, *args)

    def setPhysicalLength(self, *args) -> "OdGeKnotVector &":
        return _ODA_Kernel_Py3.OdGeKnotVector_setPhysicalLength(self, *args)

    def growLength(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeKnotVector_growLength(self, *args)

    def setGrowLength(self, *args) -> "OdGeKnotVector &":
        return _ODA_Kernel_Py3.OdGeKnotVector_setGrowLength(self, *args)

    def set(self, *args) -> "OdGeKnotVector &":
        return _ODA_Kernel_Py3.OdGeKnotVector_set(self, *args)

    def multiplicityAt(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeKnotVector_multiplicityAt(self, *args)

    def getArray(self, *args) -> "OdGeDoubleArray const &":
        return _ODA_Kernel_Py3.OdGeKnotVector_getArray(self, *args)

# Register OdGeKnotVector in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeKnotVector_swigregister(OdGeKnotVector)
OdGeKnotVector.globalKnotTolerance = _ODA_Kernel_Py3.cvar.OdGeKnotVector_globalKnotTolerance
OdGeKnotVector.globalKnotTolerance2d = _ODA_Kernel_Py3.cvar.OdGeKnotVector_globalKnotTolerance2d

class OdError_InvalidRxPropertyVariantType(OdError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdError_InvalidRxPropertyVariantType_swiginit(self, _ODA_Kernel_Py3.new_OdError_InvalidRxPropertyVariantType(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdError_InvalidRxPropertyVariantType

# Register OdError_InvalidRxPropertyVariantType in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdError_InvalidRxPropertyVariantType_swigregister(OdError_InvalidRxPropertyVariantType)
OdRxPropertyVariantDataSize = cvar.OdRxPropertyVariantDataSize

class OdRxPropertyVariant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def typeFactory(*args) -> "OdRxPropertyVariant::TypeFactory const *":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_typeFactory(*args)
    kVoid = _ODA_Kernel_Py3.OdRxPropertyVariant_kVoid
    kString = _ODA_Kernel_Py3.OdRxPropertyVariant_kString
    kBool = _ODA_Kernel_Py3.OdRxPropertyVariant_kBool
    kInt8 = _ODA_Kernel_Py3.OdRxPropertyVariant_kInt8
    kUInt8 = _ODA_Kernel_Py3.OdRxPropertyVariant_kUInt8
    kInt16 = _ODA_Kernel_Py3.OdRxPropertyVariant_kInt16
    kUInt16 = _ODA_Kernel_Py3.OdRxPropertyVariant_kUInt16
    kInt32 = _ODA_Kernel_Py3.OdRxPropertyVariant_kInt32
    kUInt32 = _ODA_Kernel_Py3.OdRxPropertyVariant_kUInt32
    kInt64 = _ODA_Kernel_Py3.OdRxPropertyVariant_kInt64
    kUInt64 = _ODA_Kernel_Py3.OdRxPropertyVariant_kUInt64
    kDouble = _ODA_Kernel_Py3.OdRxPropertyVariant_kDouble
    kAnsiString = _ODA_Kernel_Py3.OdRxPropertyVariant_kAnsiString
    kGePoint2d = _ODA_Kernel_Py3.OdRxPropertyVariant_kGePoint2d
    kGePoint3d = _ODA_Kernel_Py3.OdRxPropertyVariant_kGePoint3d
    kGeVector2d = _ODA_Kernel_Py3.OdRxPropertyVariant_kGeVector2d
    kGeVector3d = _ODA_Kernel_Py3.OdRxPropertyVariant_kGeVector3d
    kCmEntityColor = _ODA_Kernel_Py3.OdRxPropertyVariant_kCmEntityColor
    kCmTransparency = _ODA_Kernel_Py3.OdRxPropertyVariant_kCmTransparency
    kGeMatrix2d = _ODA_Kernel_Py3.OdRxPropertyVariant_kGeMatrix2d
    kGeMatrix3d = _ODA_Kernel_Py3.OdRxPropertyVariant_kGeMatrix3d
    kGeScale3d = _ODA_Kernel_Py3.OdRxPropertyVariant_kGeScale3d
    kTimeStamp = _ODA_Kernel_Py3.OdRxPropertyVariant_kTimeStamp
    kGeExtents2d = _ODA_Kernel_Py3.OdRxPropertyVariant_kGeExtents2d
    kGeExtents3d = _ODA_Kernel_Py3.OdRxPropertyVariant_kGeExtents3d
    kGeQuaternion = _ODA_Kernel_Py3.OdRxPropertyVariant_kGeQuaternion
    kGiLightAttenuation = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiLightAttenuation
    kGiSkyParameters = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiSkyParameters
    kGiShadowParameters = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiShadowParameters
    kGiColorRGB = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiColorRGB
    kGiMaterialColor = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiMaterialColor
    kGiMrExposureType = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiMrExposureType
    kGiMrShadowMode = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiMrShadowMode
    kGiMrFinalGatheringMode = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiMrFinalGatheringMode
    kGiMrDiagnosticMode = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiMrDiagnosticMode
    kGiMrDiagnosticPhotonMode = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiMrDiagnosticPhotonMode
    kGiMrDiagnosticBSPMode = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiMrDiagnosticBSPMode
    kGiMrExportMIMode = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiMrExportMIMode
    kGiMrTileOrder = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiMrTileOrder
    kGiLightingMode = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiLightingMode
    kGiFilterType = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiFilterType
    kCmEntityColor_ColorMethod = _ODA_Kernel_Py3.OdRxPropertyVariant_kCmEntityColor_ColorMethod
    kDb_LineWeight = _ODA_Kernel_Py3.OdRxPropertyVariant_kDb_LineWeight
    kDb_UnitsValue = _ODA_Kernel_Py3.OdRxPropertyVariant_kDb_UnitsValue
    kGiDgLinetypeModifiers_WidthMode = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiDgLinetypeModifiers_WidthMode
    kGiDgLinetypeModifiers_ShiftMode = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiDgLinetypeModifiers_ShiftMode
    kGiDgLinetypeModifiers_CornersMode = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiDgLinetypeModifiers_CornersMode
    kGe_OdGeKnotParameterization = _ODA_Kernel_Py3.OdRxPropertyVariant_kGe_OdGeKnotParameterization
    kGiLightAttenuation_AttenuationType = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiLightAttenuation_AttenuationType
    kGiDrawable_DrawableType = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiDrawable_DrawableType
    kGiShadowParameters_ShadowType = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiShadowParameters_ShadowType
    kGiShadowParameters_ExtendedLightShape = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiShadowParameters_ExtendedLightShape
    kGiViewportTraits_DefaultLightingType = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiViewportTraits_DefaultLightingType
    kGiMaterialTraits_LuminanceMode = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiMaterialTraits_LuminanceMode
    kGiMaterialTraits_GlobalIlluminationMode = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiMaterialTraits_GlobalIlluminationMode
    kGiMaterialTraits_FinalGatherMode = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiMaterialTraits_FinalGatherMode
    kGiMaterialTraits_ChannelFlags = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiMaterialTraits_ChannelFlags
    kGiMaterialTraits_Mode = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiMaterialTraits_Mode
    kGiMaterialTraits_IlluminationModel = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiMaterialTraits_IlluminationModel
    kGiVisualStyle_Type = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiVisualStyle_Type
    kGiVisualStyleProperties_FaceColorMode = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiVisualStyleProperties_FaceColorMode
    kGiVisualStyleProperties_EdgeModel = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiVisualStyleProperties_EdgeModel
    kGiFaceStyle_FaceColorMode = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiFaceStyle_FaceColorMode
    kGiEdgeStyle_EdgeModel = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiEdgeStyle_EdgeModel
    kGiToneOperatorParameters_ExteriorDaylightMode = _ODA_Kernel_Py3.OdRxPropertyVariant_kGiToneOperatorParameters_ExteriorDaylightMode
    kArray = _ODA_Kernel_Py3.OdRxPropertyVariant_kArray

    def varType(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_varType(self, *args)

    def type(self, *args) -> "OdRxPropertyVariant::Type":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_type(self, *args)

    def isArray(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_isArray(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdRxPropertyVariant_swiginit(self, _ODA_Kernel_Py3.new_OdRxPropertyVariant(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxPropertyVariant

    def getString(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getString(self, *args)

    def getAnsiString(self, *args) -> "OdAnsiString const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getAnsiString(self, *args)

    def getBool(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getBool(self, *args)

    def getInt8(self, *args) -> "OdInt8":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getInt8(self, *args)

    def getUInt8(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getUInt8(self, *args)

    def getInt16(self, *args) -> "OdInt16":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getInt16(self, *args)

    def getUInt16(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getUInt16(self, *args)

    def getInt32(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getInt32(self, *args)

    def getUInt32(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getUInt32(self, *args)

    def getInt64(self, *args) -> "OdInt64":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getInt64(self, *args)

    def getUInt64(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getUInt64(self, *args)

    def getDouble(self, *args) -> "double const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getDouble(self, *args)

    def getGePoint3d(self, *args) -> "OdGePoint3d const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGePoint3d(self, *args)

    def getGePoint2d(self, *args) -> "OdGePoint2d const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGePoint2d(self, *args)

    def getGeVector2d(self, *args) -> "OdGeVector2d const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGeVector2d(self, *args)

    def getGeVector3d(self, *args) -> "OdGeVector3d const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGeVector3d(self, *args)

    def getCmEntityColor(self, *args) -> "OdCmEntityColor const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getCmEntityColor(self, *args)

    def getCmTransparency(self, *args) -> "OdCmTransparency const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getCmTransparency(self, *args)

    def getGeMatrix2d(self, *args) -> "OdGeMatrix2d const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGeMatrix2d(self, *args)

    def getGeMatrix3d(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGeMatrix3d(self, *args)

    def getGeScale3d(self, *args) -> "OdGeScale3d const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGeScale3d(self, *args)

    def getTimeStamp(self, *args) -> "OdTimeStamp const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getTimeStamp(self, *args)

    def getGeExtents2d(self, *args) -> "OdGeExtents2d const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGeExtents2d(self, *args)

    def getGeExtents3d(self, *args) -> "OdGeExtents3d const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGeExtents3d(self, *args)

    def getGeQuaternion(self, *args) -> "OdGeQuaternion const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGeQuaternion(self, *args)

    def getGiLightAttenuation(self, *args) -> "OdGiLightAttenuation const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiLightAttenuation(self, *args)

    def getGiSkyParameters(self, *args) -> "OdGiSkyParameters const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiSkyParameters(self, *args)

    def getGiShadowParameters(self, *args) -> "OdGiShadowParameters const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiShadowParameters(self, *args)

    def getGiColorRGB(self, *args) -> "OdGiColorRGB const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiColorRGB(self, *args)

    def getGiMaterialColor(self, *args) -> "OdGiMaterialColor const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMaterialColor(self, *args)

    def getGiMrExposureType(self, *args) -> "OdGiMrExposureType":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMrExposureType(self, *args)

    def getGiMrShadowMode(self, *args) -> "OdGiMrShadowMode":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMrShadowMode(self, *args)

    def getGiMrFinalGatheringMode(self, *args) -> "OdGiMrFinalGatheringMode":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMrFinalGatheringMode(self, *args)

    def getGiMrDiagnosticMode(self, *args) -> "OdGiMrDiagnosticMode":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMrDiagnosticMode(self, *args)

    def getGiMrDiagnosticPhotonMode(self, *args) -> "OdGiMrDiagnosticPhotonMode":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMrDiagnosticPhotonMode(self, *args)

    def getGiMrDiagnosticBSPMode(self, *args) -> "OdGiMrDiagnosticBSPMode":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMrDiagnosticBSPMode(self, *args)

    def getGiMrExportMIMode(self, *args) -> "OdGiMrExportMIMode":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMrExportMIMode(self, *args)

    def getGiMrTileOrder(self, *args) -> "OdGiMrTileOrder":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMrTileOrder(self, *args)

    def getGiLightingMode(self, *args) -> "OdGiLightingMode":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiLightingMode(self, *args)

    def getGiFilterType(self, *args) -> "OdGiFilterType":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiFilterType(self, *args)

    def getCmEntityColor_ColorMethod(self, *args) -> "OdCmEntityColor::ColorMethod":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getCmEntityColor_ColorMethod(self, *args)

    def getDb_LineWeight(self, *args) -> "OdDb::LineWeight":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getDb_LineWeight(self, *args)

    def getDb_UnitsValue(self, *args) -> "OdDb::UnitsValue":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getDb_UnitsValue(self, *args)

    def getGiDgLinetypeModifiers_WidthMode(self, *args) -> "OdGiDgLinetypeModifiers::WidthMode":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiDgLinetypeModifiers_WidthMode(self, *args)

    def getGiDgLinetypeModifiers_ShiftMode(self, *args) -> "OdGiDgLinetypeModifiers::ShiftMode":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiDgLinetypeModifiers_ShiftMode(self, *args)

    def getGiDgLinetypeModifiers_CornersMode(self, *args) -> "OdGiDgLinetypeModifiers::CornersMode":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiDgLinetypeModifiers_CornersMode(self, *args)

    def getGe_OdGeKnotParameterization(self, *args) -> "OdGe::OdGeKnotParameterization":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGe_OdGeKnotParameterization(self, *args)

    def getGiLightAttenuation_AttenuationType(self, *args) -> "OdGiLightAttenuation::AttenuationType":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiLightAttenuation_AttenuationType(self, *args)

    def getGiDrawable_DrawableType(self, *args) -> "OdGiDrawable::DrawableType":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiDrawable_DrawableType(self, *args)

    def getGiShadowParameters_ShadowType(self, *args) -> "OdGiShadowParameters::ShadowType":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiShadowParameters_ShadowType(self, *args)

    def getGiShadowParameters_ExtendedLightShape(self, *args) -> "OdGiShadowParameters::ExtendedLightShape":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiShadowParameters_ExtendedLightShape(self, *args)

    def getGiViewportTraits_DefaultLightingType(self, *args) -> "OdGiViewportTraits::DefaultLightingType":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiViewportTraits_DefaultLightingType(self, *args)

    def getGiMaterialTraits_LuminanceMode(self, *args) -> "OdGiMaterialTraits::LuminanceMode":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMaterialTraits_LuminanceMode(self, *args)

    def getGiMaterialTraits_GlobalIlluminationMode(self, *args) -> "OdGiMaterialTraits::GlobalIlluminationMode":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMaterialTraits_GlobalIlluminationMode(self, *args)

    def getGiMaterialTraits_FinalGatherMode(self, *args) -> "OdGiMaterialTraits::FinalGatherMode":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMaterialTraits_FinalGatherMode(self, *args)

    def getGiMaterialTraits_ChannelFlags(self, *args) -> "OdGiMaterialTraits::ChannelFlags":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMaterialTraits_ChannelFlags(self, *args)

    def getGiMaterialTraits_Mode(self, *args) -> "OdGiMaterialTraits::Mode":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMaterialTraits_Mode(self, *args)

    def getGiMaterialTraits_IlluminationModel(self, *args) -> "OdGiMaterialTraits::IlluminationModel":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMaterialTraits_IlluminationModel(self, *args)

    def getGiVisualStyle_Type(self, *args) -> "OdGiVisualStyle::Type":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiVisualStyle_Type(self, *args)

    def getGiVisualStyleProperties_FaceColorMode(self, *args) -> "OdGiVisualStyleProperties::FaceColorMode":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiVisualStyleProperties_FaceColorMode(self, *args)

    def getGiVisualStyleProperties_EdgeModel(self, *args) -> "OdGiVisualStyleProperties::EdgeModel":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiVisualStyleProperties_EdgeModel(self, *args)

    def getGiFaceStyle_FaceColorMode(self, *args) -> "OdGiFaceStyle::FaceColorMode":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiFaceStyle_FaceColorMode(self, *args)

    def getGiEdgeStyle_EdgeModel(self, *args) -> "OdGiEdgeStyle::EdgeModel":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiEdgeStyle_EdgeModel(self, *args)

    def getGiToneOperatorParameters_ExteriorDaylightMode(self, *args) -> "OdGiToneOperatorParameters::ExteriorDaylightMode":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiToneOperatorParameters_ExteriorDaylightMode(self, *args)

    def getStringArray(self, *args) -> "OdStringArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getStringArray(self, *args)

    def getBoolArray(self, *args) -> "OdBoolArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getBoolArray(self, *args)

    def getInt8Array(self, *args) -> "OdInt8Array const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getInt8Array(self, *args)

    def getUInt8Array(self, *args) -> "OdUInt8Array const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getUInt8Array(self, *args)

    def getInt16Array(self, *args) -> "OdInt16Array const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getInt16Array(self, *args)

    def getUInt16Array(self, *args) -> "OdUInt16Array const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getUInt16Array(self, *args)

    def getInt32Array(self, *args) -> "OdInt32Array const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getInt32Array(self, *args)

    def getUInt32Array(self, *args) -> "OdUInt32Array const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getUInt32Array(self, *args)

    def getInt64Array(self, *args) -> "OdInt64Array const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getInt64Array(self, *args)

    def getUInt64Array(self, *args) -> "OdUInt64Array const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getUInt64Array(self, *args)

    def getDoubleArray(self, *args) -> "OdDoubleArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getDoubleArray(self, *args)

    def getGePoint3dArray(self, *args) -> "OdGePoint3dArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGePoint3dArray(self, *args)

    def getGePoint2dArray(self, *args) -> "OdGePoint2dArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGePoint2dArray(self, *args)

    def getGeVector2dArray(self, *args) -> "OdGeVector2dArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGeVector2dArray(self, *args)

    def getGeVector3dArray(self, *args) -> "OdGeVector3dArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGeVector3dArray(self, *args)

    def getCmEntityColorArray(self, *args) -> "OdCmEntityColorArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getCmEntityColorArray(self, *args)

    def getCmTransparencyArray(self, *args) -> "OdCmTransparencyArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getCmTransparencyArray(self, *args)

    def getGeMatrix2dArray(self, *args) -> "OdGeMatrix2dArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGeMatrix2dArray(self, *args)

    def getGeMatrix3dArray(self, *args) -> "OdGeMatrix3dArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGeMatrix3dArray(self, *args)

    def getGeScale3dArray(self, *args) -> "OdGeScale3dArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGeScale3dArray(self, *args)

    def getTimeStampArray(self, *args) -> "OdTimeStampArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getTimeStampArray(self, *args)

    def getGeExtents2dArray(self, *args) -> "OdGeExtents2dArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGeExtents2dArray(self, *args)

    def getGeExtents3dArray(self, *args) -> "OdGeExtents3dArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGeExtents3dArray(self, *args)

    def getGeQuaternionArray(self, *args) -> "OdGeQuaternionArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGeQuaternionArray(self, *args)

    def getGiLightAttenuationArray(self, *args) -> "OdGiLightAttenuationArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiLightAttenuationArray(self, *args)

    def getGiSkyParametersArray(self, *args) -> "OdGiSkyParametersArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiSkyParametersArray(self, *args)

    def getGiShadowParametersArray(self, *args) -> "OdGiShadowParametersArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiShadowParametersArray(self, *args)

    def getGiColorRGBArray(self, *args) -> "OdGiColorRGBArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiColorRGBArray(self, *args)

    def getGiMrExposureTypeArray(self, *args) -> "OdGiMrExposureTypeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMrExposureTypeArray(self, *args)

    def getGiMrShadowModeArray(self, *args) -> "OdGiMrShadowModeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMrShadowModeArray(self, *args)

    def getGiMrFinalGatheringModeArray(self, *args) -> "OdGiMrFinalGatheringModeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMrFinalGatheringModeArray(self, *args)

    def getGiMrDiagnosticModeArray(self, *args) -> "OdGiMrDiagnosticModeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMrDiagnosticModeArray(self, *args)

    def getGiMrDiagnosticPhotonModeArray(self, *args) -> "OdGiMrDiagnosticPhotonModeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMrDiagnosticPhotonModeArray(self, *args)

    def getGiMrDiagnosticBSPModeArray(self, *args) -> "OdGiMrDiagnosticBSPModeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMrDiagnosticBSPModeArray(self, *args)

    def getGiMrExportMIModeArray(self, *args) -> "OdGiMrExportMIModeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMrExportMIModeArray(self, *args)

    def getGiMrTileOrderArray(self, *args) -> "OdGiMrTileOrderArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMrTileOrderArray(self, *args)

    def getGiLightingModeArray(self, *args) -> "OdGiLightingModeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiLightingModeArray(self, *args)

    def getGiFilterTypeArray(self, *args) -> "OdGiFilterTypeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiFilterTypeArray(self, *args)

    def getGiMaterialColorArray(self, *args) -> "OdGiMaterialColorArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMaterialColorArray(self, *args)

    def getCmEntityColor_ColorMethodArray(self, *args) -> "OdCmEntityColor_ColorMethodArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getCmEntityColor_ColorMethodArray(self, *args)

    def getDb_LineWeightArray(self, *args) -> "OdDb_LineWeightArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getDb_LineWeightArray(self, *args)

    def getDb_UnitsValueArray(self, *args) -> "OdDb_UnitsValueArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getDb_UnitsValueArray(self, *args)

    def getGiDgLinetypeModifiers_WidthModeArray(self, *args) -> "OdGiDgLinetypeModifiers_WidthModeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiDgLinetypeModifiers_WidthModeArray(self, *args)

    def getGiDgLinetypeModifiers_ShiftModeArray(self, *args) -> "OdGiDgLinetypeModifiers_ShiftModeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiDgLinetypeModifiers_ShiftModeArray(self, *args)

    def getGiDgLinetypeModifiers_CornersModeArray(self, *args) -> "OdGiDgLinetypeModifiers_CornersModeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiDgLinetypeModifiers_CornersModeArray(self, *args)

    def getGe_OdGeKnotParameterizationArray(self, *args) -> "OdGe_OdGeKnotParameterizationArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGe_OdGeKnotParameterizationArray(self, *args)

    def getGiLightAttenuation_AttenuationTypeArray(self, *args) -> "OdGiLightAttenuation_AttenuationTypeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiLightAttenuation_AttenuationTypeArray(self, *args)

    def getGiDrawable_DrawableTypeArray(self, *args) -> "OdGiDrawable_DrawableTypeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiDrawable_DrawableTypeArray(self, *args)

    def getGiShadowParameters_ShadowTypeArray(self, *args) -> "OdGiShadowParameters_ShadowTypeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiShadowParameters_ShadowTypeArray(self, *args)

    def getGiShadowParameters_ExtendedLightShapeArray(self, *args) -> "OdGiShadowParameters_ExtendedLightShapeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiShadowParameters_ExtendedLightShapeArray(self, *args)

    def getGiViewportTraits_DefaultLightingTypeArray(self, *args) -> "OdGiViewportTraits_DefaultLightingTypeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiViewportTraits_DefaultLightingTypeArray(self, *args)

    def getGiMaterialTraits_LuminanceModeArray(self, *args) -> "OdGiMaterialTraits_LuminanceModeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMaterialTraits_LuminanceModeArray(self, *args)

    def getGiMaterialTraits_GlobalIlluminationModeArray(self, *args) -> "OdGiMaterialTraits_GlobalIlluminationModeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMaterialTraits_GlobalIlluminationModeArray(self, *args)

    def getGiMaterialTraits_FinalGatherModeArray(self, *args) -> "OdGiMaterialTraits_FinalGatherModeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMaterialTraits_FinalGatherModeArray(self, *args)

    def getGiMaterialTraits_ChannelFlagsArray(self, *args) -> "OdGiMaterialTraits_ChannelFlagsArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMaterialTraits_ChannelFlagsArray(self, *args)

    def getGiMaterialTraits_ModeArray(self, *args) -> "OdGiMaterialTraits_ModeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMaterialTraits_ModeArray(self, *args)

    def getGiMaterialTraits_IlluminationModelArray(self, *args) -> "OdGiMaterialTraits_IlluminationModelArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiMaterialTraits_IlluminationModelArray(self, *args)

    def getGiVisualStyle_TypeArray(self, *args) -> "OdGiVisualStyle_TypeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiVisualStyle_TypeArray(self, *args)

    def getGiVisualStyleProperties_FaceColorModeArray(self, *args) -> "OdGiVisualStyleProperties_FaceColorModeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiVisualStyleProperties_FaceColorModeArray(self, *args)

    def getGiVisualStyleProperties_EdgeModelArray(self, *args) -> "OdGiVisualStyleProperties_EdgeModelArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiVisualStyleProperties_EdgeModelArray(self, *args)

    def getGiFaceStyle_FaceColorModeArray(self, *args) -> "OdGiFaceStyle_FaceColorModeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiFaceStyle_FaceColorModeArray(self, *args)

    def getGiEdgeStyle_EdgeModelArray(self, *args) -> "OdGiEdgeStyle_EdgeModelArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiEdgeStyle_EdgeModelArray(self, *args)

    def getGiToneOperatorParameters_ExteriorDaylightModeArray(self, *args) -> "OdGiToneOperatorParameters_ExteriorDaylightModeArray const &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_getGiToneOperatorParameters_ExteriorDaylightModeArray(self, *args)

    def asStringArray(self, *args) -> "OdStringArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asStringArray(self, *args)

    def asBoolArray(self, *args) -> "OdBoolArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asBoolArray(self, *args)

    def asInt8Array(self, *args) -> "OdInt8Array &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asInt8Array(self, *args)

    def asUInt8Array(self, *args) -> "OdUInt8Array &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asUInt8Array(self, *args)

    def asInt16Array(self, *args) -> "OdInt16Array &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asInt16Array(self, *args)

    def asUInt16Array(self, *args) -> "OdUInt16Array &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asUInt16Array(self, *args)

    def asInt32Array(self, *args) -> "OdInt32Array &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asInt32Array(self, *args)

    def asUInt32Array(self, *args) -> "OdUInt32Array &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asUInt32Array(self, *args)

    def asInt64Array(self, *args) -> "OdInt64Array &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asInt64Array(self, *args)

    def asUInt64Array(self, *args) -> "OdUInt64Array &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asUInt64Array(self, *args)

    def asDoubleArray(self, *args) -> "OdDoubleArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asDoubleArray(self, *args)

    def asGePoint3dArray(self, *args) -> "OdGePoint3dArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGePoint3dArray(self, *args)

    def asGePoint2dArray(self, *args) -> "OdGePoint2dArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGePoint2dArray(self, *args)

    def asGeVector2dArray(self, *args) -> "OdGeVector2dArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGeVector2dArray(self, *args)

    def asGeVector3dArray(self, *args) -> "OdGeVector3dArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGeVector3dArray(self, *args)

    def asCmEntityColorArray(self, *args) -> "OdCmEntityColorArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asCmEntityColorArray(self, *args)

    def asCmTransparencyArray(self, *args) -> "OdCmTransparencyArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asCmTransparencyArray(self, *args)

    def asGeMatrix2dArray(self, *args) -> "OdGeMatrix2dArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGeMatrix2dArray(self, *args)

    def asGeMatrix3dArray(self, *args) -> "OdGeMatrix3dArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGeMatrix3dArray(self, *args)

    def asGeScale3dArray(self, *args) -> "OdGeScale3dArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGeScale3dArray(self, *args)

    def asTimeStampArray(self, *args) -> "OdTimeStampArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asTimeStampArray(self, *args)

    def asGeExtents2dArray(self, *args) -> "OdGeExtents2dArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGeExtents2dArray(self, *args)

    def asGeExtents3dArray(self, *args) -> "OdGeExtents3dArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGeExtents3dArray(self, *args)

    def asGeQuaternionArray(self, *args) -> "OdGeQuaternionArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGeQuaternionArray(self, *args)

    def asGiLightAttenuationArray(self, *args) -> "OdGiLightAttenuationArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiLightAttenuationArray(self, *args)

    def asGiSkyParametersArray(self, *args) -> "OdGiSkyParametersArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiSkyParametersArray(self, *args)

    def asGiShadowParametersArray(self, *args) -> "OdGiShadowParametersArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiShadowParametersArray(self, *args)

    def asGiColorRGBArray(self, *args) -> "OdGiColorRGBArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiColorRGBArray(self, *args)

    def asGiMrExposureTypeArray(self, *args) -> "OdGiMrExposureTypeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiMrExposureTypeArray(self, *args)

    def asGiMrShadowModeArray(self, *args) -> "OdGiMrShadowModeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiMrShadowModeArray(self, *args)

    def asGiMrFinalGatheringModeArray(self, *args) -> "OdGiMrFinalGatheringModeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiMrFinalGatheringModeArray(self, *args)

    def asGiMrDiagnosticModeArray(self, *args) -> "OdGiMrDiagnosticModeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiMrDiagnosticModeArray(self, *args)

    def asGiMrDiagnosticPhotonModeArray(self, *args) -> "OdGiMrDiagnosticPhotonModeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiMrDiagnosticPhotonModeArray(self, *args)

    def asGiMrDiagnosticBSPModeArray(self, *args) -> "OdGiMrDiagnosticBSPModeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiMrDiagnosticBSPModeArray(self, *args)

    def asGiMrExportMIModeArray(self, *args) -> "OdGiMrExportMIModeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiMrExportMIModeArray(self, *args)

    def asGiMrTileOrderArray(self, *args) -> "OdGiMrTileOrderArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiMrTileOrderArray(self, *args)

    def asGiLightingModeArray(self, *args) -> "OdGiLightingModeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiLightingModeArray(self, *args)

    def asGiFilterTypeArray(self, *args) -> "OdGiFilterTypeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiFilterTypeArray(self, *args)

    def asGiMaterialColorArray(self, *args) -> "OdGiMaterialColorArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiMaterialColorArray(self, *args)

    def asCmEntityColor_ColorMethodArray(self, *args) -> "OdCmEntityColor_ColorMethodArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asCmEntityColor_ColorMethodArray(self, *args)

    def asDb_LineWeightArray(self, *args) -> "OdDb_LineWeightArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asDb_LineWeightArray(self, *args)

    def asDb_UnitsValueArray(self, *args) -> "OdDb_UnitsValueArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asDb_UnitsValueArray(self, *args)

    def asGiDgLinetypeModifiers_WidthModeArray(self, *args) -> "OdGiDgLinetypeModifiers_WidthModeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiDgLinetypeModifiers_WidthModeArray(self, *args)

    def asGiDgLinetypeModifiers_ShiftModeArray(self, *args) -> "OdGiDgLinetypeModifiers_ShiftModeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiDgLinetypeModifiers_ShiftModeArray(self, *args)

    def asGiDgLinetypeModifiers_CornersModeArray(self, *args) -> "OdGiDgLinetypeModifiers_CornersModeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiDgLinetypeModifiers_CornersModeArray(self, *args)

    def asGe_OdGeKnotParameterizationArray(self, *args) -> "OdGe_OdGeKnotParameterizationArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGe_OdGeKnotParameterizationArray(self, *args)

    def asGiLightAttenuation_AttenuationTypeArray(self, *args) -> "OdGiLightAttenuation_AttenuationTypeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiLightAttenuation_AttenuationTypeArray(self, *args)

    def asGiDrawable_DrawableTypeArray(self, *args) -> "OdGiDrawable_DrawableTypeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiDrawable_DrawableTypeArray(self, *args)

    def asGiShadowParameters_ShadowTypeArray(self, *args) -> "OdGiShadowParameters_ShadowTypeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiShadowParameters_ShadowTypeArray(self, *args)

    def asGiShadowParameters_ExtendedLightShapeArray(self, *args) -> "OdGiShadowParameters_ExtendedLightShapeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiShadowParameters_ExtendedLightShapeArray(self, *args)

    def asGiViewportTraits_DefaultLightingTypeArray(self, *args) -> "OdGiViewportTraits_DefaultLightingTypeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiViewportTraits_DefaultLightingTypeArray(self, *args)

    def asGiMaterialTraits_LuminanceModeArray(self, *args) -> "OdGiMaterialTraits_LuminanceModeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiMaterialTraits_LuminanceModeArray(self, *args)

    def asGiMaterialTraits_GlobalIlluminationModeArray(self, *args) -> "OdGiMaterialTraits_GlobalIlluminationModeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiMaterialTraits_GlobalIlluminationModeArray(self, *args)

    def asGiMaterialTraits_FinalGatherModeArray(self, *args) -> "OdGiMaterialTraits_FinalGatherModeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiMaterialTraits_FinalGatherModeArray(self, *args)

    def asGiMaterialTraits_ChannelFlagsArray(self, *args) -> "OdGiMaterialTraits_ChannelFlagsArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiMaterialTraits_ChannelFlagsArray(self, *args)

    def asGiMaterialTraits_ModeArray(self, *args) -> "OdGiMaterialTraits_ModeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiMaterialTraits_ModeArray(self, *args)

    def asGiMaterialTraits_IlluminationModelArray(self, *args) -> "OdGiMaterialTraits_IlluminationModelArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiMaterialTraits_IlluminationModelArray(self, *args)

    def asGiVisualStyle_TypeArray(self, *args) -> "OdGiVisualStyle_TypeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiVisualStyle_TypeArray(self, *args)

    def asGiVisualStyleProperties_FaceColorModeArray(self, *args) -> "OdGiVisualStyleProperties_FaceColorModeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiVisualStyleProperties_FaceColorModeArray(self, *args)

    def asGiVisualStyleProperties_EdgeModelArray(self, *args) -> "OdGiVisualStyleProperties_EdgeModelArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiVisualStyleProperties_EdgeModelArray(self, *args)

    def asGiFaceStyle_FaceColorModeArray(self, *args) -> "OdGiFaceStyle_FaceColorModeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiFaceStyle_FaceColorModeArray(self, *args)

    def asGiEdgeStyle_EdgeModelArray(self, *args) -> "OdGiEdgeStyle_EdgeModelArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiEdgeStyle_EdgeModelArray(self, *args)

    def asGiToneOperatorParameters_ExteriorDaylightModeArray(self, *args) -> "OdGiToneOperatorParameters_ExteriorDaylightModeArray &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_asGiToneOperatorParameters_ExteriorDaylightModeArray(self, *args)

    def setString(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setString(self, *args)

    def setAnsiString(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setAnsiString(self, *args)

    def setBool(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setBool(self, *args)

    def setInt8(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setInt8(self, *args)

    def setUInt8(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setUInt8(self, *args)

    def setInt16(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setInt16(self, *args)

    def setUInt16(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setUInt16(self, *args)

    def setInt32(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setInt32(self, *args)

    def setUInt32(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setUInt32(self, *args)

    def setInt64(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setInt64(self, *args)

    def setUInt64(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setUInt64(self, *args)

    def setDouble(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setDouble(self, *args)

    def setGePoint3d(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGePoint3d(self, *args)

    def setGePoint2d(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGePoint2d(self, *args)

    def setGeVector2d(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGeVector2d(self, *args)

    def setGeVector3d(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGeVector3d(self, *args)

    def setCmEntityColor(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setCmEntityColor(self, *args)

    def setCmTransparency(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setCmTransparency(self, *args)

    def setGeMatrix2d(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGeMatrix2d(self, *args)

    def setGeMatrix3d(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGeMatrix3d(self, *args)

    def setGeScale3d(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGeScale3d(self, *args)

    def setTimeStamp(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setTimeStamp(self, *args)

    def setGeExtents2d(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGeExtents2d(self, *args)

    def setGeExtents3d(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGeExtents3d(self, *args)

    def setGeQuaternion(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGeQuaternion(self, *args)

    def setGiLightAttenuation(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiLightAttenuation(self, *args)

    def setGiSkyParameters(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiSkyParameters(self, *args)

    def setGiShadowParameters(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiShadowParameters(self, *args)

    def setGiColorRGB(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiColorRGB(self, *args)

    def setGiMaterialColor(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMaterialColor(self, *args)

    def setGiMrExposureType(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMrExposureType(self, *args)

    def setGiMrShadowMode(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMrShadowMode(self, *args)

    def setGiMrFinalGatheringMode(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMrFinalGatheringMode(self, *args)

    def setGiMrDiagnosticMode(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMrDiagnosticMode(self, *args)

    def setGiMrDiagnosticPhotonMode(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMrDiagnosticPhotonMode(self, *args)

    def setGiMrDiagnosticBSPMode(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMrDiagnosticBSPMode(self, *args)

    def setGiMrExportMIMode(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMrExportMIMode(self, *args)

    def setGiMrTileOrder(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMrTileOrder(self, *args)

    def setGiLightingMode(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiLightingMode(self, *args)

    def setGiFilterType(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiFilterType(self, *args)

    def setCmEntityColor_ColorMethod(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setCmEntityColor_ColorMethod(self, *args)

    def setDb_LineWeight(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setDb_LineWeight(self, *args)

    def setDb_UnitsValue(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setDb_UnitsValue(self, *args)

    def setGiDgLinetypeModifiers_WidthMode(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiDgLinetypeModifiers_WidthMode(self, *args)

    def setGiDgLinetypeModifiers_ShiftMode(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiDgLinetypeModifiers_ShiftMode(self, *args)

    def setGiDgLinetypeModifiers_CornersMode(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiDgLinetypeModifiers_CornersMode(self, *args)

    def setGe_OdGeKnotParameterization(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGe_OdGeKnotParameterization(self, *args)

    def setGiLightAttenuation_AttenuationType(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiLightAttenuation_AttenuationType(self, *args)

    def setGiDrawable_DrawableType(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiDrawable_DrawableType(self, *args)

    def setGiShadowParameters_ShadowType(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiShadowParameters_ShadowType(self, *args)

    def setGiShadowParameters_ExtendedLightShape(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiShadowParameters_ExtendedLightShape(self, *args)

    def setGiViewportTraits_DefaultLightingType(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiViewportTraits_DefaultLightingType(self, *args)

    def setGiMaterialTraits_LuminanceMode(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMaterialTraits_LuminanceMode(self, *args)

    def setGiMaterialTraits_GlobalIlluminationMode(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMaterialTraits_GlobalIlluminationMode(self, *args)

    def setGiMaterialTraits_FinalGatherMode(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMaterialTraits_FinalGatherMode(self, *args)

    def setGiMaterialTraits_ChannelFlags(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMaterialTraits_ChannelFlags(self, *args)

    def setGiMaterialTraits_Mode(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMaterialTraits_Mode(self, *args)

    def setGiMaterialTraits_IlluminationModel(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMaterialTraits_IlluminationModel(self, *args)

    def setGiVisualStyle_Type(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiVisualStyle_Type(self, *args)

    def setGiVisualStyleProperties_FaceColorMode(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiVisualStyleProperties_FaceColorMode(self, *args)

    def setGiVisualStyleProperties_EdgeModel(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiVisualStyleProperties_EdgeModel(self, *args)

    def setGiFaceStyle_FaceColorMode(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiFaceStyle_FaceColorMode(self, *args)

    def setGiEdgeStyle_EdgeModel(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiEdgeStyle_EdgeModel(self, *args)

    def setGiToneOperatorParameters_ExteriorDaylightMode(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiToneOperatorParameters_ExteriorDaylightMode(self, *args)

    def setStringArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setStringArray(self, *args)

    def setBoolArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setBoolArray(self, *args)

    def setInt8Array(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setInt8Array(self, *args)

    def setUInt8Array(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setUInt8Array(self, *args)

    def setInt16Array(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setInt16Array(self, *args)

    def setUInt16Array(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setUInt16Array(self, *args)

    def setInt32Array(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setInt32Array(self, *args)

    def setUInt32Array(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setUInt32Array(self, *args)

    def setInt64Array(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setInt64Array(self, *args)

    def setUInt64Array(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setUInt64Array(self, *args)

    def setDoubleArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setDoubleArray(self, *args)

    def setGePoint3dArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGePoint3dArray(self, *args)

    def setGePoint2dArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGePoint2dArray(self, *args)

    def setGeVector2dArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGeVector2dArray(self, *args)

    def setGeVector3dArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGeVector3dArray(self, *args)

    def setCmEntityColorArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setCmEntityColorArray(self, *args)

    def setCmTransparencyArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setCmTransparencyArray(self, *args)

    def setGeMatrix2dArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGeMatrix2dArray(self, *args)

    def setGeMatrix3dArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGeMatrix3dArray(self, *args)

    def setGeScale3dArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGeScale3dArray(self, *args)

    def setTimeStampArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setTimeStampArray(self, *args)

    def setGeExtents2dArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGeExtents2dArray(self, *args)

    def setGeExtents3dArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGeExtents3dArray(self, *args)

    def setGeQuaternionArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGeQuaternionArray(self, *args)

    def setGiLightAttenuationArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiLightAttenuationArray(self, *args)

    def setGiSkyParametersArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiSkyParametersArray(self, *args)

    def setGiShadowParametersArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiShadowParametersArray(self, *args)

    def setGiColorRGBArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiColorRGBArray(self, *args)

    def setGiMaterialColorArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMaterialColorArray(self, *args)

    def setGiMrExposureTypeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMrExposureTypeArray(self, *args)

    def setGiMrShadowModeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMrShadowModeArray(self, *args)

    def setGiMrFinalGatheringModeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMrFinalGatheringModeArray(self, *args)

    def setGiMrDiagnosticModeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMrDiagnosticModeArray(self, *args)

    def setGiMrDiagnosticPhotonModeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMrDiagnosticPhotonModeArray(self, *args)

    def setGiMrDiagnosticBSPModeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMrDiagnosticBSPModeArray(self, *args)

    def setGiMrExportMIModeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMrExportMIModeArray(self, *args)

    def setGiMrTileOrderArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMrTileOrderArray(self, *args)

    def setGiLightingModeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiLightingModeArray(self, *args)

    def setGiFilterTypeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiFilterTypeArray(self, *args)

    def setCmEntityColor_ColorMethodArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setCmEntityColor_ColorMethodArray(self, *args)

    def setDb_LineWeightArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setDb_LineWeightArray(self, *args)

    def setDb_UnitsValueArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setDb_UnitsValueArray(self, *args)

    def setGiDgLinetypeModifiers_WidthModeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiDgLinetypeModifiers_WidthModeArray(self, *args)

    def setGiDgLinetypeModifiers_ShiftModeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiDgLinetypeModifiers_ShiftModeArray(self, *args)

    def setGiDgLinetypeModifiers_CornersModeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiDgLinetypeModifiers_CornersModeArray(self, *args)

    def setGe_OdGeKnotParameterizationArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGe_OdGeKnotParameterizationArray(self, *args)

    def setGiLightAttenuation_AttenuationTypeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiLightAttenuation_AttenuationTypeArray(self, *args)

    def setGiDrawable_DrawableTypeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiDrawable_DrawableTypeArray(self, *args)

    def setGiShadowParameters_ShadowTypeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiShadowParameters_ShadowTypeArray(self, *args)

    def setGiShadowParameters_ExtendedLightShapeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiShadowParameters_ExtendedLightShapeArray(self, *args)

    def setGiViewportTraits_DefaultLightingTypeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiViewportTraits_DefaultLightingTypeArray(self, *args)

    def setGiMaterialTraits_LuminanceModeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMaterialTraits_LuminanceModeArray(self, *args)

    def setGiMaterialTraits_GlobalIlluminationModeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMaterialTraits_GlobalIlluminationModeArray(self, *args)

    def setGiMaterialTraits_FinalGatherModeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMaterialTraits_FinalGatherModeArray(self, *args)

    def setGiMaterialTraits_ChannelFlagsArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMaterialTraits_ChannelFlagsArray(self, *args)

    def setGiMaterialTraits_ModeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMaterialTraits_ModeArray(self, *args)

    def setGiMaterialTraits_IlluminationModelArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiMaterialTraits_IlluminationModelArray(self, *args)

    def setGiVisualStyle_TypeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiVisualStyle_TypeArray(self, *args)

    def setGiVisualStyleProperties_FaceColorModeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiVisualStyleProperties_FaceColorModeArray(self, *args)

    def setGiVisualStyleProperties_EdgeModelArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiVisualStyleProperties_EdgeModelArray(self, *args)

    def setGiFaceStyle_FaceColorModeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiFaceStyle_FaceColorModeArray(self, *args)

    def setGiEdgeStyle_EdgeModelArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiEdgeStyle_EdgeModelArray(self, *args)

    def setGiToneOperatorParameters_ExteriorDaylightModeArray(self, *args) -> "OdRxPropertyVariant &":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_setGiToneOperatorParameters_ExteriorDaylightModeArray(self, *args)

# Register OdRxPropertyVariant in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxPropertyVariant_swigregister(OdRxPropertyVariant)

def OdRxPropertyVariant_typeFactory(*args) -> "OdRxPropertyVariant::TypeFactory const *":
    return _ODA_Kernel_Py3.OdRxPropertyVariant_typeFactory(*args)

class OdRxPropertyVariant_TypeFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def construct(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_TypeFactory_construct(self, *args)

    def destroy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxPropertyVariant_TypeFactory_destroy(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxPropertyVariant_TypeFactory

# Register OdRxPropertyVariant_TypeFactory in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxPropertyVariant_TypeFactory_swigregister(OdRxPropertyVariant_TypeFactory)

class OdRxValue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdRxValue_swiginit(self, _ODA_Kernel_Py3.new_OdRxValue(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxValue

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxValue_isEmpty(self, *args)

    @staticmethod
    def empty(*args) -> "OdRxValue const &":
        return _ODA_Kernel_Py3.OdRxValue_empty(*args)

    def isVaries(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxValue_isVaries(self, *args)

    @staticmethod
    def varies(*args) -> "OdRxValue const &":
        return _ODA_Kernel_Py3.OdRxValue_varies(*args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxValue___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxValue___ne__(self, *args)

    def typePath(self, *args) -> "OdAnsiString const":
        return _ODA_Kernel_Py3.OdRxValue_typePath(self, *args)

    @staticmethod
    def unbox(*args) -> "OdRxValue *":
        return _ODA_Kernel_Py3.OdRxValue_unbox(*args)

    def getEnumTag(self, *args) -> "OdRxEnumTag const *":
        return _ODA_Kernel_Py3.OdRxValue_getEnumTag(self, *args)

    def serializeOut(self, *args) -> "size_t":
        return _ODA_Kernel_Py3.OdRxValue_serializeOut(self, *args)

    def serializeIn(self, *args) -> "size_t":
        return _ODA_Kernel_Py3.OdRxValue_serializeIn(self, *args)

# Register OdRxValue in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxValue_swigregister(OdRxValue)

def OdRxValue_empty(*args) -> "OdRxValue const &":
    return _ODA_Kernel_Py3.OdRxValue_empty(*args)

def OdRxValue_varies(*args) -> "OdRxValue const &":
    return _ODA_Kernel_Py3.OdRxValue_varies(*args)

def OdRxValue_unbox(*args) -> "OdRxValue *":
    return _ODA_Kernel_Py3.OdRxValue_unbox(*args)

class OdRxBoxedValue(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxBoxedValue >":
        return _ODA_Kernel_Py3.OdRxBoxedValue_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxBoxedValue_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxBoxedValue_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxBoxedValue_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxBoxedValue >":
        return _ODA_Kernel_Py3.OdRxBoxedValue_createObject(*args)

    def value(self, *args) -> "OdRxValue *":
        return _ODA_Kernel_Py3.OdRxBoxedValue_value(self, *args)

    @staticmethod
    def newBoxedValueOnHeap(*args) -> "OdRxBoxedValuePtr":
        return _ODA_Kernel_Py3.OdRxBoxedValue_newBoxedValueOnHeap(*args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdRxBoxedValue_clone(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxBoxedValue_copyFrom(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxBoxedValue

# Register OdRxBoxedValue in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxBoxedValue_swigregister(OdRxBoxedValue)

def OdRxBoxedValue_cast(*args) -> "OdSmartPtr< OdRxBoxedValue >":
    return _ODA_Kernel_Py3.OdRxBoxedValue_cast(*args)

def OdRxBoxedValue_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxBoxedValue_desc(*args)

def OdRxBoxedValue_createObject(*args) -> "OdSmartPtr< OdRxBoxedValue >":
    return _ODA_Kernel_Py3.OdRxBoxedValue_createObject(*args)

def OdRxBoxedValue_newBoxedValueOnHeap(*args) -> "OdRxBoxedValuePtr":
    return _ODA_Kernel_Py3.OdRxBoxedValue_newBoxedValueOnHeap(*args)

class OdRxBoxedValueOnStack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxBoxedValueOnStack >":
        return _ODA_Kernel_Py3.OdRxBoxedValueOnStack_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxBoxedValueOnStack_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxBoxedValueOnStack_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxBoxedValueOnStack_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxBoxedValueOnStack >":
        return _ODA_Kernel_Py3.OdRxBoxedValueOnStack_createObject(*args)

    def value(self, *args) -> "OdRxValue *":
        return _ODA_Kernel_Py3.OdRxBoxedValueOnStack_value(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxBoxedValueOnStack

# Register OdRxBoxedValueOnStack in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxBoxedValueOnStack_swigregister(OdRxBoxedValueOnStack)

def OdRxBoxedValueOnStack_cast(*args) -> "OdSmartPtr< OdRxBoxedValueOnStack >":
    return _ODA_Kernel_Py3.OdRxBoxedValueOnStack_cast(*args)

def OdRxBoxedValueOnStack_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxBoxedValueOnStack_desc(*args)

def OdRxBoxedValueOnStack_createObject(*args) -> "OdSmartPtr< OdRxBoxedValueOnStack >":
    return _ODA_Kernel_Py3.OdRxBoxedValueOnStack_createObject(*args)

class OdGeLinearEnt2d(OdGeCurve2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def intersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeLinearEnt2d_intersectWith(self, *args)

    def overlap(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeLinearEnt2d_overlap(self, *args)

    def isParallelTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeLinearEnt2d_isParallelTo(self, *args)

    def isPerpendicularTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeLinearEnt2d_isPerpendicularTo(self, *args)

    def isColinearTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeLinearEnt2d_isColinearTo(self, *args)

    def getPerpLine(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeLinearEnt2d_getPerpLine(self, *args)

    def pointOnLine(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeLinearEnt2d_pointOnLine(self, *args)

    def direction(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.OdGeLinearEnt2d_direction(self, *args)

    def getLine(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeLinearEnt2d_getLine(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeLinearEnt2d

# Register OdGeLinearEnt2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeLinearEnt2d_swigregister(OdGeLinearEnt2d)

class OdTfObjectReactor(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdTfObjectReactor >":
        return _ODA_Kernel_Py3.OdTfObjectReactor_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdTfObjectReactor_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdTfObjectReactor_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdTfObjectReactor_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdTfObjectReactor >":
        return _ODA_Kernel_Py3.OdTfObjectReactor_createObject(*args)

    def copied(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfObjectReactor_copied(self, *args)

    def erased(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfObjectReactor_erased(self, *args)

    def goodbye(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfObjectReactor_goodbye(self, *args)

    def openedForModify(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfObjectReactor_openedForModify(self, *args)

    def modified(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfObjectReactor_modified(self, *args)

    def modifiedGraphics(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfObjectReactor_modifiedGraphics(self, *args)

    def modifiedLinkages(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfObjectReactor_modifiedLinkages(self, *args)

    def subElementModified(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfObjectReactor_subElementModified(self, *args)

    def modifyUndone(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfObjectReactor_modifyUndone(self, *args)

    def unappended(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfObjectReactor_unappended(self, *args)

    def reappended(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfObjectReactor_reappended(self, *args)

    def closed(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfObjectReactor_closed(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdTfObjectReactor

# Register OdTfObjectReactor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdTfObjectReactor_swigregister(OdTfObjectReactor)

def OdTfObjectReactor_cast(*args) -> "OdSmartPtr< OdTfObjectReactor >":
    return _ODA_Kernel_Py3.OdTfObjectReactor_cast(*args)

def OdTfObjectReactor_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdTfObjectReactor_desc(*args)

def OdTfObjectReactor_createObject(*args) -> "OdSmartPtr< OdTfObjectReactor >":
    return _ODA_Kernel_Py3.OdTfObjectReactor_createObject(*args)

class OdTfPersistentReactor(OdTfObjectReactor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdTfPersistentReactor >":
        return _ODA_Kernel_Py3.OdTfPersistentReactor_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdTfPersistentReactor_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdTfPersistentReactor_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdTfPersistentReactor_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdTfPersistentReactor >":
        return _ODA_Kernel_Py3.OdTfPersistentReactor_createObject(*args)

    def recvPropagateModify(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfPersistentReactor_recvPropagateModify(self, *args)

    def xmitPropagateModify(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfPersistentReactor_xmitPropagateModify(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdTfPersistentReactor

# Register OdTfPersistentReactor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdTfPersistentReactor_swigregister(OdTfPersistentReactor)

def OdTfPersistentReactor_cast(*args) -> "OdSmartPtr< OdTfPersistentReactor >":
    return _ODA_Kernel_Py3.OdTfPersistentReactor_cast(*args)

def OdTfPersistentReactor_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdTfPersistentReactor_desc(*args)

def OdTfPersistentReactor_createObject(*args) -> "OdSmartPtr< OdTfPersistentReactor >":
    return _ODA_Kernel_Py3.OdTfPersistentReactor_createObject(*args)

class OdTfVariant(OdVariant):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def typeFactory(*args) -> "OdVariant::TypeFactory const *":
        return _ODA_Kernel_Py3.OdTfVariant_typeFactory(*args)
    kGUID = _ODA_Kernel_Py3.OdTfVariant_kGUID
    kEmpty = _ODA_Kernel_Py3.OdTfVariant_kEmpty
    kDEPRECARED0 = _ODA_Kernel_Py3.OdTfVariant_kDEPRECARED0
    kDbStubPtr = _ODA_Kernel_Py3.OdTfVariant_kDbStubPtr
    kRxObjectWeakPtr = _ODA_Kernel_Py3.OdTfVariant_kRxObjectWeakPtr
    kTuple = _ODA_Kernel_Py3.OdTfVariant_kTuple
    kNextType = _ODA_Kernel_Py3.OdTfVariant_kNextType

    @staticmethod
    def kVariantArray(*args) -> "OdTfVariant::Type":
        return _ODA_Kernel_Py3.OdTfVariant_kVariantArray(*args)

    @staticmethod
    def getItemType(*args) -> "OdTfVariant::Type":
        return _ODA_Kernel_Py3.OdTfVariant_getItemType(*args)

    @staticmethod
    def getDimsCount(*args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdTfVariant_getDimsCount(*args)

    @staticmethod
    def empty(*args) -> "OdTfVariant":
        return _ODA_Kernel_Py3.OdTfVariant_empty(*args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTfVariant_isEmpty(self, *args)

    def isVariantArray(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTfVariant_isVariantArray(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdTfVariant_swiginit(self, _ODA_Kernel_Py3.new_OdTfVariant(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdTfVariant

    def getGUID(self, *args) -> "OdGUID const &":
        return _ODA_Kernel_Py3.OdTfVariant_getGUID(self, *args)

    def getVariantArray(self, *args) -> "OdTfVariantArray const &":
        return _ODA_Kernel_Py3.OdTfVariant_getVariantArray(self, *args)

    def getDbStubPtr(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdTfVariant_getDbStubPtr(self, *args)

    def getRxObjectWeakPtr(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdTfVariant_getRxObjectWeakPtr(self, *args)

    def getVariantTuple(self, *args) -> "OdTfVariantTuple const &":
        return _ODA_Kernel_Py3.OdTfVariant_getVariantTuple(self, *args)

    def asVariantArray(self, *args) -> "OdTfVariantArray &":
        return _ODA_Kernel_Py3.OdTfVariant_asVariantArray(self, *args)

    def asVariantTuple(self, *args) -> "OdTfVariantTuple &":
        return _ODA_Kernel_Py3.OdTfVariant_asVariantTuple(self, *args)

    def setGUID(self, *args) -> "OdTfVariant &":
        return _ODA_Kernel_Py3.OdTfVariant_setGUID(self, *args)

    def setVariantArray(self, *args) -> "OdTfVariant &":
        return _ODA_Kernel_Py3.OdTfVariant_setVariantArray(self, *args)

    def setVariantTuple(self, *args) -> "OdTfVariant &":
        return _ODA_Kernel_Py3.OdTfVariant_setVariantTuple(self, *args)

    def setDbStubPtr(self, *args) -> "OdTfVariant &":
        return _ODA_Kernel_Py3.OdTfVariant_setDbStubPtr(self, *args)

    def setRxObjectWeakPtr(self, *args) -> "OdTfVariant &":
        return _ODA_Kernel_Py3.OdTfVariant_setRxObjectWeakPtr(self, *args)

# Register OdTfVariant in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdTfVariant_swigregister(OdTfVariant)

def OdTfVariant_typeFactory(*args) -> "OdVariant::TypeFactory const *":
    return _ODA_Kernel_Py3.OdTfVariant_typeFactory(*args)

def OdTfVariant_kVariantArray(*args) -> "OdTfVariant::Type":
    return _ODA_Kernel_Py3.OdTfVariant_kVariantArray(*args)

def OdTfVariant_getItemType(*args) -> "OdTfVariant::Type":
    return _ODA_Kernel_Py3.OdTfVariant_getItemType(*args)

def OdTfVariant_getDimsCount(*args) -> "OdUInt16":
    return _ODA_Kernel_Py3.OdTfVariant_getDimsCount(*args)

def OdTfVariant_empty(*args) -> "OdTfVariant":
    return _ODA_Kernel_Py3.OdTfVariant_empty(*args)

class OdGeLinearEnt3d(OdGeCurve3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def intersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeLinearEnt3d_intersectWith(self, *args)

    def projIntersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeLinearEnt3d_projIntersectWith(self, *args)

    def overlap(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeLinearEnt3d_overlap(self, *args)

    def isOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeLinearEnt3d_isOn(self, *args)

    def isParallelTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeLinearEnt3d_isParallelTo(self, *args)

    def isPerpendicularTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeLinearEnt3d_isPerpendicularTo(self, *args)

    def isColinearTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeLinearEnt3d_isColinearTo(self, *args)

    def getPerpPlane(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeLinearEnt3d_getPerpPlane(self, *args)

    def pointOnLine(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeLinearEnt3d_pointOnLine(self, *args)

    def direction(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeLinearEnt3d_direction(self, *args)

    def getLine(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeLinearEnt3d_getLine(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeLinearEnt3d

# Register OdGeLinearEnt3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeLinearEnt3d_swigregister(OdGeLinearEnt3d)

class OdErrorContext(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdErrorContext

    def description(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdErrorContext_description(self, *args)

    def code(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdErrorContext_code(self, *args)

    def completeDescription(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdErrorContext_completeDescription(self, *args)

    def getPreviousError(self, *args) -> "OdErrorContext *":
        return _ODA_Kernel_Py3.OdErrorContext_getPreviousError(self, *args)

    def setPreviousError(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdErrorContext_setPreviousError(self, *args)

# Register OdErrorContext in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdErrorContext_swigregister(OdErrorContext)

class OdMemoryStream(OdStreamBuf):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdMemoryStream >":
        return _ODA_Kernel_Py3.OdMemoryStream_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdMemoryStream_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdMemoryStream_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdMemoryStream_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdMemoryStream >":
        return _ODA_Kernel_Py3.OdMemoryStream_createObject(*args)

    @staticmethod
    def createNew(*args) -> "OdMemoryStreamPtr":
        return _ODA_Kernel_Py3.OdMemoryStream_createNew(*args)

    def pageDataSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdMemoryStream_pageDataSize(self, *args)

    def setPageDataSize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdMemoryStream_setPageDataSize(self, *args)

    def reserve(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdMemoryStream_reserve(self, *args)

    def fileName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdMemoryStream_fileName(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdMemoryStream

# Register OdMemoryStream in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdMemoryStream_swigregister(OdMemoryStream)

def OdMemoryStream_cast(*args) -> "OdSmartPtr< OdMemoryStream >":
    return _ODA_Kernel_Py3.OdMemoryStream_cast(*args)

def OdMemoryStream_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdMemoryStream_desc(*args)

def OdMemoryStream_createObject(*args) -> "OdSmartPtr< OdMemoryStream >":
    return _ODA_Kernel_Py3.OdMemoryStream_createObject(*args)

def OdMemoryStream_createNew(*args) -> "OdMemoryStreamPtr":
    return _ODA_Kernel_Py3.OdMemoryStream_createNew(*args)

class OdGiVisualStyleTraitsData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiVisualStyleTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiVisualStyleTraitsData(*args))

    def type(self, *args) -> "OdGiDrawable::DrawableType":
        return _ODA_Kernel_Py3.OdGiVisualStyleTraitsData_type(self, *args)

    def setOdGiVisualStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVisualStyleTraitsData_setOdGiVisualStyle(self, *args)

    def odgiVisualStyle(self, *args) -> "OdGiVisualStyle const &":
        return _ODA_Kernel_Py3.OdGiVisualStyleTraitsData_odgiVisualStyle(self, *args)

    def isOdGiVisualStyleSet(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiVisualStyleTraitsData_isOdGiVisualStyleSet(self, *args)

    def resetOdGiVisualStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVisualStyleTraitsData_resetOdGiVisualStyle(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiVisualStyleTraitsData___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiVisualStyleTraitsData___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiVisualStyleTraitsData

# Register OdGiVisualStyleTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiVisualStyleTraitsData_swigregister(OdGiVisualStyleTraitsData)

class OdGsNestedBackground(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def nestedBackgroundDisplay(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsNestedBackground_nestedBackgroundDisplay(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsNestedBackground

# Register OdGsNestedBackground in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsNestedBackground_swigregister(OdGsNestedBackground)

class OdGsBackground(OdRxObject, OdGsNestedBackground):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsBackground >":
        return _ODA_Kernel_Py3.OdGsBackground_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsBackground_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsBackground_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsBackground_queryX(self, *args)
    kSolidBackground = _ODA_Kernel_Py3.OdGsBackground_kSolidBackground
    kGradientBackground = _ODA_Kernel_Py3.OdGsBackground_kGradientBackground
    kImageBackground = _ODA_Kernel_Py3.OdGsBackground_kImageBackground
    kGroundPlaneBackground = _ODA_Kernel_Py3.OdGsBackground_kGroundPlaneBackground
    kSkyBackground = _ODA_Kernel_Py3.OdGsBackground_kSkyBackground
    kIBLBackground = _ODA_Kernel_Py3.OdGsBackground_kIBLBackground

    def type(self, *args) -> "OdGsBackground::BackgroundType":
        return _ODA_Kernel_Py3.OdGsBackground_type(self, *args)

    def display(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBackground_display(self, *args)

    def nestedBackgroundDisplay(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBackground_nestedBackgroundDisplay(self, *args)

    def setNestedBackground(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBackground_setNestedBackground(self, *args)

    def getNestedBackground(self, *args) -> "OdGsNestedBackground *":
        return _ODA_Kernel_Py3.OdGsBackground_getNestedBackground(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsBackground >":
        return _ODA_Kernel_Py3.OdGsBackground_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsBackground

# Register OdGsBackground in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsBackground_swigregister(OdGsBackground)

def OdGsBackground_cast(*args) -> "OdSmartPtr< OdGsBackground >":
    return _ODA_Kernel_Py3.OdGsBackground_cast(*args)

def OdGsBackground_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsBackground_desc(*args)

def OdGsBackground_createObject(*args) -> "OdSmartPtr< OdGsBackground >":
    return _ODA_Kernel_Py3.OdGsBackground_createObject(*args)

class OdGiBackgroundTraitsData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def type(self, *args) -> "OdGiDrawable::DrawableType":
        return _ODA_Kernel_Py3.OdGiBackgroundTraitsData_type(self, *args)

    @staticmethod
    def deleteBackgroundTraitsData(*args) -> "void":
        return _ODA_Kernel_Py3.OdGiBackgroundTraitsData_deleteBackgroundTraitsData(*args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBackgroundTraitsData___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBackgroundTraitsData___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiBackgroundTraitsData

# Register OdGiBackgroundTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiBackgroundTraitsData_swigregister(OdGiBackgroundTraitsData)

def OdGiBackgroundTraitsData_deleteBackgroundTraitsData(*args) -> "void":
    return _ODA_Kernel_Py3.OdGiBackgroundTraitsData_deleteBackgroundTraitsData(*args)

class OdGiSolidBackgroundTraitsData(OdGiBackgroundTraitsData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiSolidBackgroundTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiSolidBackgroundTraitsData(*args))

    def color(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiSolidBackgroundTraitsData_color(self, *args)

    def setColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSolidBackgroundTraitsData_setColor(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSolidBackgroundTraitsData___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSolidBackgroundTraitsData___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSolidBackgroundTraitsData

# Register OdGiSolidBackgroundTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSolidBackgroundTraitsData_swigregister(OdGiSolidBackgroundTraitsData)

class OdGiGradientBackgroundTraitsData(OdGiBackgroundTraitsData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiGradientBackgroundTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiGradientBackgroundTraitsData(*args))

    def colorTop(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraitsData_colorTop(self, *args)

    def setColorTop(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraitsData_setColorTop(self, *args)

    def colorMiddle(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraitsData_colorMiddle(self, *args)

    def setColorMiddle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraitsData_setColorMiddle(self, *args)

    def colorBottom(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraitsData_colorBottom(self, *args)

    def setColorBottom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraitsData_setColorBottom(self, *args)

    def horizon(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraitsData_horizon(self, *args)

    def height(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraitsData_height(self, *args)

    def rotation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraitsData_rotation(self, *args)

    def setHorizon(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraitsData_setHorizon(self, *args)

    def setHeight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraitsData_setHeight(self, *args)

    def setRotation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraitsData_setRotation(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraitsData___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiGradientBackgroundTraitsData___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiGradientBackgroundTraitsData

# Register OdGiGradientBackgroundTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiGradientBackgroundTraitsData_swigregister(OdGiGradientBackgroundTraitsData)

class OdGiImageBackgroundTraitsData(OdGiBackgroundTraitsData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiImageBackgroundTraitsData(*args))

    def imageFilename(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_imageFilename(self, *args)

    def setImageFilename(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_setImageFilename(self, *args)

    def fitToScreen(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_fitToScreen(self, *args)

    def maintainAspectRatio(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_maintainAspectRatio(self, *args)

    def useTiling(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_useTiling(self, *args)

    def setFitToScreen(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_setFitToScreen(self, *args)

    def setMaintainAspectRatio(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_setMaintainAspectRatio(self, *args)

    def setUseTiling(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_setUseTiling(self, *args)

    def setOffset(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_setOffset(self, *args)

    def xOffset(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_xOffset(self, *args)

    def yOffset(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_yOffset(self, *args)

    def setXOffset(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_setXOffset(self, *args)

    def setYOffset(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_setYOffset(self, *args)

    def setScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_setScale(self, *args)

    def xScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_xScale(self, *args)

    def yScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_yScale(self, *args)

    def setXScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_setXScale(self, *args)

    def setYScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_setYScale(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiImageBackgroundTraitsData___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiImageBackgroundTraitsData

# Register OdGiImageBackgroundTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiImageBackgroundTraitsData_swigregister(OdGiImageBackgroundTraitsData)

class OdGiGroundPlaneBackgroundTraitsData(OdGiBackgroundTraitsData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiGroundPlaneBackgroundTraitsData(*args))

    def colorSkyZenith(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraitsData_colorSkyZenith(self, *args)

    def setColorSkyZenith(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraitsData_setColorSkyZenith(self, *args)

    def colorSkyHorizon(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraitsData_colorSkyHorizon(self, *args)

    def setColorSkyHorizon(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraitsData_setColorSkyHorizon(self, *args)

    def colorUndergroundHorizon(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraitsData_colorUndergroundHorizon(self, *args)

    def setColorUndergroundHorizon(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraitsData_setColorUndergroundHorizon(self, *args)

    def colorUndergroundAzimuth(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraitsData_colorUndergroundAzimuth(self, *args)

    def setColorUndergroundAzimuth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraitsData_setColorUndergroundAzimuth(self, *args)

    def colorGroundPlaneNear(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraitsData_colorGroundPlaneNear(self, *args)

    def setColorGroundPlaneNear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraitsData_setColorGroundPlaneNear(self, *args)

    def colorGroundPlaneFar(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraitsData_colorGroundPlaneFar(self, *args)

    def setColorGroundPlaneFar(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraitsData_setColorGroundPlaneFar(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraitsData___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraitsData___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiGroundPlaneBackgroundTraitsData

# Register OdGiGroundPlaneBackgroundTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiGroundPlaneBackgroundTraitsData_swigregister(OdGiGroundPlaneBackgroundTraitsData)

class OdGiSkyBackgroundTraitsData(OdGiBackgroundTraitsData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiSkyBackgroundTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiSkyBackgroundTraitsData(*args))

    def skyParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyBackgroundTraitsData_skyParameters(self, *args)

    def setSkyParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSkyBackgroundTraitsData_setSkyParameters(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSkyBackgroundTraitsData___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSkyBackgroundTraitsData___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSkyBackgroundTraitsData

# Register OdGiSkyBackgroundTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSkyBackgroundTraitsData_swigregister(OdGiSkyBackgroundTraitsData)

class OdGiIBLBackgroundTraitsData(OdGiBackgroundTraitsData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiIBLBackgroundTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiIBLBackgroundTraitsData(*args))

    def isEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraitsData_isEnabled(self, *args)

    def enable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraitsData_enable(self, *args)

    def IBLFileName(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraitsData_IBLFileName(self, *args)

    def setIBLFileName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraitsData_setIBLFileName(self, *args)

    def rotation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraitsData_rotation(self, *args)

    def setRotation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraitsData_setRotation(self, *args)

    def displayImage(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraitsData_displayImage(self, *args)

    def setDisplayImage(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraitsData_setDisplayImage(self, *args)

    def secondaryBackground(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraitsData_secondaryBackground(self, *args)

    def setSecondaryBackground(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraitsData_setSecondaryBackground(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraitsData___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiIBLBackgroundTraitsData___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiIBLBackgroundTraitsData

# Register OdGiIBLBackgroundTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiIBLBackgroundTraitsData_swigregister(OdGiIBLBackgroundTraitsData)

class OdGiRenderEnvironmentTraitsData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiRenderEnvironmentTraitsData(*args))

    def setEnable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData_setEnable(self, *args)

    def enable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData_enable(self, *args)

    def setIsBackground(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData_setIsBackground(self, *args)

    def isBackground(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData_isBackground(self, *args)

    def setFogColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData_setFogColor(self, *args)

    def fogColor(self, *args) -> "OdCmEntityColor const &":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData_fogColor(self, *args)

    def setNearDistance(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData_setNearDistance(self, *args)

    def nearDistance(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData_nearDistance(self, *args)

    def setFarDistance(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData_setFarDistance(self, *args)

    def farDistance(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData_farDistance(self, *args)

    def setNearPercentage(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData_setNearPercentage(self, *args)

    def nearPercentage(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData_nearPercentage(self, *args)

    def setFarPercentage(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData_setFarPercentage(self, *args)

    def farPercentage(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData_farPercentage(self, *args)

    def setEnvironmentMap(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData_setEnvironmentMap(self, *args)

    def environmentMap(self, *args) -> "OdGiMaterialTexturePtr":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData_environmentMap(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRenderEnvironmentTraitsData

# Register OdGiRenderEnvironmentTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRenderEnvironmentTraitsData_swigregister(OdGiRenderEnvironmentTraitsData)

class OdGiRenderSettingsTraitsData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiRenderSettingsTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiRenderSettingsTraitsData(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRenderSettingsTraitsData

    def setMaterialEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraitsData_setMaterialEnabled(self, *args)

    def materialEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraitsData_materialEnabled(self, *args)

    def setTextureSampling(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraitsData_setTextureSampling(self, *args)

    def textureSampling(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraitsData_textureSampling(self, *args)

    def setBackFacesEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraitsData_setBackFacesEnabled(self, *args)

    def backFacesEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraitsData_backFacesEnabled(self, *args)

    def setShadowsEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraitsData_setShadowsEnabled(self, *args)

    def shadowsEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraitsData_shadowsEnabled(self, *args)

    def setDiagnosticBackgroundEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraitsData_setDiagnosticBackgroundEnabled(self, *args)

    def diagnosticBackgroundEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraitsData_diagnosticBackgroundEnabled(self, *args)

    def setModelScaleFactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraitsData_setModelScaleFactor(self, *args)

    def modelScaleFactor(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraitsData_modelScaleFactor(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraitsData___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRenderSettingsTraitsData___ne__(self, *args)

# Register OdGiRenderSettingsTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRenderSettingsTraitsData_swigregister(OdGiRenderSettingsTraitsData)

class OdGiMentalRayRenderSettingsTraitsData(OdGiRenderSettingsTraitsData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiMentalRayRenderSettingsTraitsData(*args))

    def setSampling(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setSampling(self, *args)

    def sampling(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_sampling(self, *args)

    def setSamplingFilter(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setSamplingFilter(self, *args)

    def samplingFilter(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_samplingFilter(self, *args)

    def setSamplingContrastColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setSamplingContrastColor(self, *args)

    def samplingContrastColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_samplingContrastColor(self, *args)

    def setShadowMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setShadowMode(self, *args)

    def shadowMode(self, *args) -> "OdGiMrShadowMode":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_shadowMode(self, *args)

    def setShadowMapEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setShadowMapEnabled(self, *args)

    def shadowMapEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_shadowMapEnabled(self, *args)

    def setRayTraceEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setRayTraceEnabled(self, *args)

    def rayTraceEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_rayTraceEnabled(self, *args)

    def setRayTraceDepth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setRayTraceDepth(self, *args)

    def rayTraceDepth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_rayTraceDepth(self, *args)

    def setGlobalIlluminationEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setGlobalIlluminationEnabled(self, *args)

    def globalIlluminationEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_globalIlluminationEnabled(self, *args)

    def setGISampleCount(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setGISampleCount(self, *args)

    def giSampleCount(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_giSampleCount(self, *args)

    def setGISampleRadiusEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setGISampleRadiusEnabled(self, *args)

    def giSampleRadiusEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_giSampleRadiusEnabled(self, *args)

    def setGISampleRadius(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setGISampleRadius(self, *args)

    def giSampleRadius(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_giSampleRadius(self, *args)

    def setGIPhotonsPerLight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setGIPhotonsPerLight(self, *args)

    def giPhotonsPerLight(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_giPhotonsPerLight(self, *args)

    def setPhotonTraceDepth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setPhotonTraceDepth(self, *args)

    def photonTraceDepth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_photonTraceDepth(self, *args)

    def setFinalGatheringEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setFinalGatheringEnabled(self, *args)

    def finalGatheringEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_finalGatheringEnabled(self, *args)

    def setFGRayCount(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setFGRayCount(self, *args)

    def fgRayCount(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_fgRayCount(self, *args)

    def setFGRadiusState(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setFGRadiusState(self, *args)

    def fgSampleRadiusState(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_fgSampleRadiusState(self, *args)

    def setFGSampleRadius(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setFGSampleRadius(self, *args)

    def fgSampleRadius(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_fgSampleRadius(self, *args)

    def setLightLuminanceScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setLightLuminanceScale(self, *args)

    def lightLuminanceScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_lightLuminanceScale(self, *args)

    def setDiagnosticMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setDiagnosticMode(self, *args)

    def diagnosticMode(self, *args) -> "OdGiMrDiagnosticMode":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_diagnosticMode(self, *args)

    def setDiagnosticGridMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setDiagnosticGridMode(self, *args)

    def diagnosticGridMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_diagnosticGridMode(self, *args)

    def setDiagnosticPhotonMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setDiagnosticPhotonMode(self, *args)

    def diagnosticPhotonMode(self, *args) -> "OdGiMrDiagnosticPhotonMode":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_diagnosticPhotonMode(self, *args)

    def setDiagnosticBSPMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setDiagnosticBSPMode(self, *args)

    def diagnosticBSPMode(self, *args) -> "OdGiMrDiagnosticBSPMode":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_diagnosticBSPMode(self, *args)

    def setExportMIEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setExportMIEnabled(self, *args)

    def exportMIEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_exportMIEnabled(self, *args)

    def setExportMIFileName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setExportMIFileName(self, *args)

    def exportMIFileName(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_exportMIFileName(self, *args)

    def setTileSize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setTileSize(self, *args)

    def tileSize(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_tileSize(self, *args)

    def setTileOrder(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setTileOrder(self, *args)

    def tileOrder(self, *args) -> "OdGiMrTileOrder":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_tileOrder(self, *args)

    def setMemoryLimit(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setMemoryLimit(self, *args)

    def memoryLimit(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_memoryLimit(self, *args)

    def setEnergyMultiplier(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setEnergyMultiplier(self, *args)

    def energyMultiplier(self, *args) -> "float":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_energyMultiplier(self, *args)

    def setProgressMonitor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setProgressMonitor(self, *args)

    def progressMonitor(self, *args) -> "void const *":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_progressMonitor(self, *args)

    def setExposureType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setExposureType(self, *args)

    def exposureType(self, *args) -> "OdGiMrExposureType":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_exposureType(self, *args)

    def setFinalGatheringMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setFinalGatheringMode(self, *args)

    def finalGatheringMode(self, *args) -> "OdGiMrFinalGatheringMode":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_finalGatheringMode(self, *args)

    def setShadowSamplingMultiplier(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setShadowSamplingMultiplier(self, *args)

    def shadowSamplingMultiplier(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_shadowSamplingMultiplier(self, *args)

    def setExportMIMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_setExportMIMode(self, *args)

    def exportMIMode(self, *args) -> "OdGiMrExportMIMode":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_exportMIMode(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData___ne__(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData___eq__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMentalRayRenderSettingsTraitsData

# Register OdGiMentalRayRenderSettingsTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMentalRayRenderSettingsTraitsData_swigregister(OdGiMentalRayRenderSettingsTraitsData)

class OdGiRapidRTRenderSettingsTraitsData(OdGiRenderSettingsTraitsData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiRapidRTRenderSettingsTraitsData(*args))

    def setQuitCondition(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraitsData_setQuitCondition(self, *args)

    def quitCondition(self, *args) -> "OdGiQuitCondition":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraitsData_quitCondition(self, *args)

    def setDesiredRenderLevel(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraitsData_setDesiredRenderLevel(self, *args)

    def desiredRenderLevel(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraitsData_desiredRenderLevel(self, *args)

    def setDesiredRenderTime(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraitsData_setDesiredRenderTime(self, *args)

    def desiredRenderTime(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraitsData_desiredRenderTime(self, *args)

    def setLightingMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraitsData_setLightingMode(self, *args)

    def lightingMode(self, *args) -> "OdGiLightingMode":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraitsData_lightingMode(self, *args)

    def setFilterType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraitsData_setFilterType(self, *args)

    def filterType(self, *args) -> "OdGiFilterType":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraitsData_filterType(self, *args)

    def setFilterWidth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraitsData_setFilterWidth(self, *args)

    def filterWidth(self, *args) -> "float":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraitsData_filterWidth(self, *args)

    def setFilterHeight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraitsData_setFilterHeight(self, *args)

    def filterHeight(self, *args) -> "float":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraitsData_filterHeight(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraitsData___ne__(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraitsData___eq__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRapidRTRenderSettingsTraitsData

# Register OdGiRapidRTRenderSettingsTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRapidRTRenderSettingsTraitsData_swigregister(OdGiRapidRTRenderSettingsTraitsData)

class OdGiCombinedRenderSettingsTraitsData(OdGiMentalRayRenderSettingsTraitsData, OdGiRapidRTRenderSettingsTraitsData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiCombinedRenderSettingsTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiCombinedRenderSettingsTraitsData(*args))
    kMentalRaySettings = _ODA_Kernel_Py3.OdGiCombinedRenderSettingsTraitsData_kMentalRaySettings
    kRapidRTSettings = _ODA_Kernel_Py3.OdGiCombinedRenderSettingsTraitsData_kRapidRTSettings

    def setKindOfRenderSettings(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiCombinedRenderSettingsTraitsData_setKindOfRenderSettings(self, *args)

    def kindOfRenderSettings(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiCombinedRenderSettingsTraitsData_kindOfRenderSettings(self, *args)

    def modifyKindOfRenderSettings(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiCombinedRenderSettingsTraitsData_modifyKindOfRenderSettings(self, *args)

    def hasMentalRayRenderSettings(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiCombinedRenderSettingsTraitsData_hasMentalRayRenderSettings(self, *args)

    def hasRapidRTRenderSettings(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiCombinedRenderSettingsTraitsData_hasRapidRTRenderSettings(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiCombinedRenderSettingsTraitsData___ne__(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiCombinedRenderSettingsTraitsData___eq__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiCombinedRenderSettingsTraitsData

# Register OdGiCombinedRenderSettingsTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiCombinedRenderSettingsTraitsData_swigregister(OdGiCombinedRenderSettingsTraitsData)

kNonOrthoView = _ODA_Kernel_Py3.kNonOrthoView
kTopView = _ODA_Kernel_Py3.kTopView
kBottomView = _ODA_Kernel_Py3.kBottomView
kFrontView = _ODA_Kernel_Py3.kFrontView
kBackView = _ODA_Kernel_Py3.kBackView
kLeftView = _ODA_Kernel_Py3.kLeftView
kRightView = _ODA_Kernel_Py3.kRightView
k2DOptimized = _ODA_Kernel_Py3.k2DOptimized
kWireframe = _ODA_Kernel_Py3.kWireframe
kHiddenLine = _ODA_Kernel_Py3.kHiddenLine
kFlatShaded = _ODA_Kernel_Py3.kFlatShaded
kGouraudShaded = _ODA_Kernel_Py3.kGouraudShaded
kFlatShadedWithWireframe = _ODA_Kernel_Py3.kFlatShadedWithWireframe
kGouraudShadedWithWireframe = _ODA_Kernel_Py3.kGouraudShadedWithWireframe
kMaxRenderMode = _ODA_Kernel_Py3.kMaxRenderMode
class OdGsGeomPortion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_pLayer = property(_ODA_Kernel_Py3.OdGsGeomPortion_m_pLayer_get, _ODA_Kernel_Py3.OdGsGeomPortion_m_pLayer_set)
    m_pGsMetafile = property(_ODA_Kernel_Py3.OdGsGeomPortion_m_pGsMetafile_get, _ODA_Kernel_Py3.OdGsGeomPortion_m_pGsMetafile_set)
    m_pNext = property(_ODA_Kernel_Py3.OdGsGeomPortion_m_pNext_get, _ODA_Kernel_Py3.OdGsGeomPortion_m_pNext_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsGeomPortion_swiginit(self, _ODA_Kernel_Py3.new_OdGsGeomPortion(*args))

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsGeomPortion_copyFrom(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsGeomPortion_clear(self, *args)

    def freeNestedPortions(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsGeomPortion_freeNestedPortions(self, *args)

    def isEmptyPortion(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsGeomPortion_isEmptyPortion(self, *args)

    def filterEmptyNestedPortions(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsGeomPortion_filterEmptyNestedPortions(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsGeomPortion

# Register OdGsGeomPortion in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsGeomPortion_swigregister(OdGsGeomPortion)

class OdGsEntityNode(OdGsNode, OdSiEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Alloc(*args) -> "void *":
        return _ODA_Kernel_Py3.OdGsEntityNode_Alloc(*args)

    @staticmethod
    def Free(*args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_Free(*args)

    @staticmethod
    def Realloc(*args) -> "void *":
        return _ODA_Kernel_Py3.OdGsEntityNode_Realloc(*args)
    kSkipCheckCompatible = _ODA_Kernel_Py3.OdGsEntityNode_kSkipCheckCompatible
    kCheckViewChanges = _ODA_Kernel_Py3.OdGsEntityNode_kCheckViewChanges
    kCheckCompatibleView = _ODA_Kernel_Py3.OdGsEntityNode_kCheckCompatibleView
    kFindCompatible = _ODA_Kernel_Py3.OdGsEntityNode_kFindCompatible

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsEntityNode >":
        return _ODA_Kernel_Py3.OdGsEntityNode_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsEntityNode_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsEntityNode_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsEntityNode_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsEntityNode >":
        return _ODA_Kernel_Py3.OdGsEntityNode_createObject(*args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsEntityNode_swiginit(self, _ODA_Kernel_Py3.new_OdGsEntityNode(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsEntityNode

    def setNextEntity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_setNextEntity(self, *args)

    def nextEntity(self, *args) -> "OdGsEntityNode const *":
        return _ODA_Kernel_Py3.OdGsEntityNode_nextEntity(self, *args)

    def numNextEntity(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsEntityNode_numNextEntity(self, *args)

    def enableMultipleNextEntities(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_enableMultipleNextEntities(self, *args)

    def updateVisible(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_updateVisible(self, *args)

    def awareFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsEntityNode_awareFlags(self, *args)

    def nodeType(self, *args) -> "ENodeType":
        return _ODA_Kernel_Py3.OdGsEntityNode_nodeType(self, *args)

    def isReference(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_isReference(self, *args)

    def isLight(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_isLight(self, *args)

    def isSelfReferential(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_isSelfReferential(self, *args)

    def select(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_select(self, *args)

    def invalidate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_invalidate(self, *args)

    def spatiallyIndexed(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_spatiallyIndexed(self, *args)

    def setSpatiallyIndexed(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_setSpatiallyIndexed(self, *args)

    def owned(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_owned(self, *args)

    def setOwned(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_setOwned(self, *args)

    def markedByUpdateManager(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_markedByUpdateManager(self, *args)

    def setMarkedByUpdateManager(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_setMarkedByUpdateManager(self, *args)

    def hasExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_hasExtents(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_isEmpty(self, *args)

    def hasFrozenLayers(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_hasFrozenLayers(self, *args)

    def markedToSkip(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_markedToSkip(self, *args)

    def markToSkip(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_markToSkip(self, *args)

    def markToSkipAll(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_markToSkipAll(self, *args)

    @staticmethod
    def markToSkipMask(*args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdGsEntityNode_markToSkipMask(*args)

    def destroy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_destroy(self, *args)

    def layersChanged(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_layersChanged(self, *args)

    def markedAsNonSelectable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_markedAsNonSelectable(self, *args)

    def markAsNonSelectable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_markAsNonSelectable(self, *args)

    def isMarkedSkipSelection(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_isMarkedSkipSelection(self, *args)

    def markSkipSelection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_markSkipSelection(self, *args)

    def isMarkedErased(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_isMarkedErased(self, *args)

    def markErased(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_markErased(self, *args)

    def isInWorkset(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_isInWorkset(self, *args)

    def setInWorkset(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_setInWorkset(self, *args)

    def isRegenOnDraw(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_isRegenOnDraw(self, *args)

    def setRegenOnDraw(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_setRegenOnDraw(self, *args)

    def isSingleThreaded(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_isSingleThreaded(self, *args)

    def setSingleThreaded(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_setSingleThreaded(self, *args)

    def skipDisplayClipping(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_skipDisplayClipping(self, *args)

    def setSkipDisplayClipping(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_setSkipDisplayClipping(self, *args)

    def isXref(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_isXref(self, *args)

    def highlight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_highlight(self, *args)

    def setHlBranch(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_setHlBranch(self, *args)

    def hlBranch(self, *args) -> "OdGsStateBranch const *":
        return _ODA_Kernel_Py3.OdGsEntityNode_hlBranch(self, *args)

    def hide(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_hide(self, *args)

    def setVisibilityBranch(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_setVisibilityBranch(self, *args)

    def visibilityBranch(self, *args) -> "OdGsStateBranch const *":
        return _ODA_Kernel_Py3.OdGsEntityNode_visibilityBranch(self, *args)

    def playAsGeometry(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_playAsGeometry(self, *args)

    def extents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_extents(self, *args)

    def getMaxLineweightUsed(self, *args) -> "OdDb::LineWeight":
        return _ODA_Kernel_Py3.OdGsEntityNode_getMaxLineweightUsed(self, *args)

    def addMaxLineweightUsed(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_addMaxLineweightUsed(self, *args)

    def setMaxLineweightUsed(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_setMaxLineweightUsed(self, *args)

    def entityUnerased(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_entityUnerased(self, *args)

    def setEntityUnerased(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_setEntityUnerased(self, *args)

    def isInvisible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_isInvisible(self, *args)

    def isExtentsOutOfModelSpace(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_isExtentsOutOfModelSpace(self, *args)

    def setExtentsOutOfModelSpace(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_setExtentsOutOfModelSpace(self, *args)

    def resetInvalidVpFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_resetInvalidVpFlag(self, *args)

    def setAsLightSourceOwner(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_setAsLightSourceOwner(self, *args)

    def isLightSourceOwner(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_isLightSourceOwner(self, *args)

    def isRequireRegenOnHighlightChange(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_isRequireRegenOnHighlightChange(self, *args)

    def makeStock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_makeStock(self, *args)

    def releaseStock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_releaseStock(self, *args)

    def propagateLayerChangesStock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_propagateLayerChangesStock(self, *args)

    def saveNodeState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_saveNodeState(self, *args)

    def loadNodeState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsEntityNode_loadNodeState(self, *args)

    def addContentToUpdateManager(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsEntityNode_addContentToUpdateManager(self, *args)

# Register OdGsEntityNode in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsEntityNode_swigregister(OdGsEntityNode)

def OdGsEntityNode_Alloc(*args) -> "void *":
    return _ODA_Kernel_Py3.OdGsEntityNode_Alloc(*args)

def OdGsEntityNode_Free(*args) -> "void":
    return _ODA_Kernel_Py3.OdGsEntityNode_Free(*args)

def OdGsEntityNode_Realloc(*args) -> "void *":
    return _ODA_Kernel_Py3.OdGsEntityNode_Realloc(*args)

def OdGsEntityNode_cast(*args) -> "OdSmartPtr< OdGsEntityNode >":
    return _ODA_Kernel_Py3.OdGsEntityNode_cast(*args)

def OdGsEntityNode_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsEntityNode_desc(*args)

def OdGsEntityNode_createObject(*args) -> "OdSmartPtr< OdGsEntityNode >":
    return _ODA_Kernel_Py3.OdGsEntityNode_createObject(*args)

def OdGsEntityNode_markToSkipMask(*args) -> "unsigned int":
    return _ODA_Kernel_Py3.OdGsEntityNode_markToSkipMask(*args)

class MetafileEx(OdGsUpdateManagerElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_MetafileEx

    def setDevice(self, *args) -> "void":
        return _ODA_Kernel_Py3.MetafileEx_setDevice(self, *args)

    def device(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.MetafileEx_device(self, *args)

    def setMetafileLength(self, *args) -> "void":
        return _ODA_Kernel_Py3.MetafileEx_setMetafileLength(self, *args)

    def metafileLength(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.MetafileEx_metafileLength(self, *args)

# Register MetafileEx in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.MetafileEx_swigregister(MetafileEx)

class MetafilePtrArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_MetafilePtrArray

    def __init__(self, *args):
        _ODA_Kernel_Py3.MetafilePtrArray_swiginit(self, _ODA_Kernel_Py3.new_MetafilePtrArray(*args))

# Register MetafilePtrArray in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.MetafilePtrArray_swigregister(MetafilePtrArray)

class MetafileHolder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kArray = _ODA_Kernel_Py3.MetafileHolder_kArray
    kVpDependent = _ODA_Kernel_Py3.MetafileHolder_kVpDependent
    kAwareFlagsRegenType = _ODA_Kernel_Py3.MetafileHolder_kAwareFlagsRegenType
    kRegenTypeStandard = _ODA_Kernel_Py3.MetafileHolder_kRegenTypeStandard
    kRegenTypeHideOrShade = _ODA_Kernel_Py3.MetafileHolder_kRegenTypeHideOrShade
    kRegenTypeRenderCommand = _ODA_Kernel_Py3.MetafileHolder_kRegenTypeRenderCommand
    kRegenTypeMask = _ODA_Kernel_Py3.MetafileHolder_kRegenTypeMask
    kDependentGeometry = _ODA_Kernel_Py3.MetafileHolder_kDependentGeometry
    kLayerDependent = _ODA_Kernel_Py3.MetafileHolder_kLayerDependent

    def __init__(self, *args):
        _ODA_Kernel_Py3.MetafileHolder_swiginit(self, _ODA_Kernel_Py3.new_MetafileHolder(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_MetafileHolder

    def isValid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.MetafileHolder_isValid(self, *args)

    def isArray(self, *args) -> "bool":
        return _ODA_Kernel_Py3.MetafileHolder_isArray(self, *args)

    def isVpDependent(self, *args) -> "bool":
        return _ODA_Kernel_Py3.MetafileHolder_isVpDependent(self, *args)

    def setVpDependent(self, *args) -> "void":
        return _ODA_Kernel_Py3.MetafileHolder_setVpDependent(self, *args)

    def isAwareFlagsRegenType(self, *args) -> "bool":
        return _ODA_Kernel_Py3.MetafileHolder_isAwareFlagsRegenType(self, *args)

    def isRegenTypeDependent(self, *args) -> "bool":
        return _ODA_Kernel_Py3.MetafileHolder_isRegenTypeDependent(self, *args)

    def setDependentGeometry(self, *args) -> "void":
        return _ODA_Kernel_Py3.MetafileHolder_setDependentGeometry(self, *args)

    def isDependentGeometry(self, *args) -> "bool":
        return _ODA_Kernel_Py3.MetafileHolder_isDependentGeometry(self, *args)

    def setLayerDependent(self, *args) -> "void":
        return _ODA_Kernel_Py3.MetafileHolder_setLayerDependent(self, *args)

    def isLayerDependent(self, *args) -> "bool":
        return _ODA_Kernel_Py3.MetafileHolder_isLayerDependent(self, *args)

    def getArray(self, *args) -> "OdGsEntityNode::MetafilePtrArray const &":
        return _ODA_Kernel_Py3.MetafileHolder_getArray(self, *args)

    def allocateArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.MetafileHolder_allocateArray(self, *args)

    def destroy(self, *args) -> "void":
        return _ODA_Kernel_Py3.MetafileHolder_destroy(self, *args)

    def checkValid(self, *args) -> "int":
        return _ODA_Kernel_Py3.MetafileHolder_checkValid(self, *args)

    def moveTo(self, *args) -> "void":
        return _ODA_Kernel_Py3.MetafileHolder_moveTo(self, *args)

    def awareFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.MetafileHolder_awareFlags(self, *args)

# Register MetafileHolder in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.MetafileHolder_swigregister(MetafileHolder)

class OdGiPixelBGRA32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiPixelBGRA32_swiginit(self, _ODA_Kernel_Py3.new_OdGiPixelBGRA32(*args))

    def getBGRA(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiPixelBGRA32_getBGRA(self, *args)

    def getRGBA(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiPixelBGRA32_getRGBA(self, *args)

    def blue(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdGiPixelBGRA32_blue(self, *args)

    def green(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdGiPixelBGRA32_green(self, *args)

    def red(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdGiPixelBGRA32_red(self, *args)

    def alpha(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdGiPixelBGRA32_alpha(self, *args)

    def setBGRA(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPixelBGRA32_setBGRA(self, *args)

    def setRGBA(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPixelBGRA32_setRGBA(self, *args)

    def setBlue(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPixelBGRA32_setBlue(self, *args)

    def setGreen(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPixelBGRA32_setGreen(self, *args)

    def setRed(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPixelBGRA32_setRed(self, *args)

    def setAlpha(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPixelBGRA32_setAlpha(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPixelBGRA32

# Register OdGiPixelBGRA32 in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPixelBGRA32_swigregister(OdGiPixelBGRA32)

class OdGiImageBGRA32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiImageBGRA32_swiginit(self, _ODA_Kernel_Py3.new_OdGiImageBGRA32(*args))

    def image(self, *args) -> "OdGiPixelBGRA32 *":
        return _ODA_Kernel_Py3.OdGiImageBGRA32_image(self, *args)

    def width(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiImageBGRA32_width(self, *args)

    def height(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiImageBGRA32_height(self, *args)

    def setImage(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiImageBGRA32_setImage(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiImageBGRA32

# Register OdGiImageBGRA32 in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiImageBGRA32_swigregister(OdGiImageBGRA32)

class OdRxDictionaryIterator(OdRxIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxDictionaryIterator >":
        return _ODA_Kernel_Py3.OdRxDictionaryIterator_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDictionaryIterator_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDictionaryIterator_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxDictionaryIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxDictionaryIterator >":
        return _ODA_Kernel_Py3.OdRxDictionaryIterator_createObject(*args)

    def getKey(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxDictionaryIterator_getKey(self, *args)

    def id(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdRxDictionaryIterator_id(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxDictionaryIterator

# Register OdRxDictionaryIterator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxDictionaryIterator_swigregister(OdRxDictionaryIterator)

def OdRxDictionaryIterator_cast(*args) -> "OdSmartPtr< OdRxDictionaryIterator >":
    return _ODA_Kernel_Py3.OdRxDictionaryIterator_cast(*args)

def OdRxDictionaryIterator_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxDictionaryIterator_desc(*args)

def OdRxDictionaryIterator_createObject(*args) -> "OdSmartPtr< OdRxDictionaryIterator >":
    return _ODA_Kernel_Py3.OdRxDictionaryIterator_createObject(*args)

class OdRxDictionary(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxDictionary >":
        return _ODA_Kernel_Py3.OdRxDictionary_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDictionary_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDictionary_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxDictionary_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxDictionary >":
        return _ODA_Kernel_Py3.OdRxDictionary_createObject(*args)

    def reserve(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxDictionary_reserve(self, *args)

    def getAt(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdRxDictionary_getAt(self, *args)

    def putAt(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdRxDictionary_putAt(self, *args)

    def resetKey(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxDictionary_resetKey(self, *args)

    def remove(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdRxDictionary_remove(self, *args)

    def removeAll(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxDictionary_removeAll(self, *args)

    def has(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxDictionary_has(self, *args)

    def idAt(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdRxDictionary_idAt(self, *args)

    def keyAt(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxDictionary_keyAt(self, *args)

    def numEntries(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdRxDictionary_numEntries(self, *args)

    def newIterator(self, *args) -> "OdRxDictionaryIteratorPtr":
        return _ODA_Kernel_Py3.OdRxDictionary_newIterator(self, *args)

    def isCaseSensitive(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxDictionary_isCaseSensitive(self, *args)

    def subDict(self, *args) -> "OdSmartPtr< OdRxDictionary >":
        return _ODA_Kernel_Py3.OdRxDictionary_subDict(self, *args)

    def subDictCr(self, *args) -> "OdSmartPtr< OdRxDictionary >":
        return _ODA_Kernel_Py3.OdRxDictionary_subDictCr(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxDictionary

# Register OdRxDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxDictionary_swigregister(OdRxDictionary)

def OdRxDictionary_cast(*args) -> "OdSmartPtr< OdRxDictionary >":
    return _ODA_Kernel_Py3.OdRxDictionary_cast(*args)

def OdRxDictionary_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxDictionary_desc(*args)

def OdRxDictionary_createObject(*args) -> "OdSmartPtr< OdRxDictionary >":
    return _ODA_Kernel_Py3.OdRxDictionary_createObject(*args)


def odrxSysRegistry(*args) -> "OdRxDictionary *":
    return _ODA_Kernel_Py3.odrxSysRegistry(*args)

def odrxClassDictionary(*args) -> "OdRxDictionaryPtr":
    return _ODA_Kernel_Py3.odrxClassDictionary(*args)

def odrxGetClassDesc(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.odrxGetClassDesc(*args)

def odrxSafeGetClassDesc(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.odrxSafeGetClassDesc(*args)

def odrxServiceDictionary(*args) -> "OdRxDictionaryPtr":
    return _ODA_Kernel_Py3.odrxServiceDictionary(*args)

def odrxCreateRxDictionary(*args) -> "OdRxDictionaryPtr":
    return _ODA_Kernel_Py3.odrxCreateRxDictionary(*args)

def odrxCreateSyncRxDictionary(*args) -> "OdRxDictionaryPtr":
    return _ODA_Kernel_Py3.odrxCreateSyncRxDictionary(*args)
class OdGsBaseVectorizeView(OdGsViewImpl):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsBaseVectorizeView

    @staticmethod
    def safeCast(*args) -> "OdGsBaseVectorizeView *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeView_safeCast(*args)

    def userGiContext(self, *args) -> "OdGiContext *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeView_userGiContext(self, *args)

    def setUserGiContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeView_setUserGiContext(self, *args)

    def update(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeView_update(self, *args)

    def select(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeView_select(self, *args)

    def viewExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeView_viewExtents(self, *args)

    def sceneDept(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeView_sceneDept(self, *args)

    def collide(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeView_collide(self, *args)

    def numVectorizers(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsBaseVectorizeView_numVectorizers(self, *args)

# Register OdGsBaseVectorizeView in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsBaseVectorizeView_swigregister(OdGsBaseVectorizeView)

def OdGsBaseVectorizeView_safeCast(*args) -> "OdGsBaseVectorizeView *":
    return _ODA_Kernel_Py3.OdGsBaseVectorizeView_safeCast(*args)

class OdGsWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsWriter_swiginit(self, _ODA_Kernel_Py3.new_OdGsWriter(*args))

    def extentsAccum(self, *args) -> "OdGsExtAccum &":
        return _ODA_Kernel_Py3.OdGsWriter_extentsAccum(self, *args)

    def gsModel(self, *args) -> "OdGsBaseModel *":
        return _ODA_Kernel_Py3.OdGsWriter_gsModel(self, *args)

    def isRecordingMetafile(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsWriter_isRecordingMetafile(self, *args)

    def currentGeomPortion(self, *args) -> "OdGsGeomPortion *":
        return _ODA_Kernel_Py3.OdGsWriter_currentGeomPortion(self, *args)

    def headGeomPortion(self, *args) -> "OdGsGeomPortion *":
        return _ODA_Kernel_Py3.OdGsWriter_headGeomPortion(self, *args)

    def beginMetafileRecording(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsWriter_beginMetafileRecording(self, *args)

    def endMetafileRecording(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsWriter_endMetafileRecording(self, *args)

    def onNestedDrawable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsWriter_onNestedDrawable(self, *args)

    def separateMetafile(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsWriter_separateMetafile(self, *args)

    def isLayerFrozen(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsWriter_isLayerFrozen(self, *args)

    def hasFrozenLayerBefore(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsWriter_hasFrozenLayerBefore(self, *args)
    m_pGsModel = property(_ODA_Kernel_Py3.OdGsWriter_m_pGsModel_get, _ODA_Kernel_Py3.OdGsWriter_m_pGsModel_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsWriter

# Register OdGsWriter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsWriter_swigregister(OdGsWriter)

class OdGsBaseVectorizer(OdGiBaseVectorizerImpl):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def draw(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_draw(self, *args)

    def gsWriter(self, *args) -> "OdGsWriter const &":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_gsWriter(self, *args)

    def gsExtentsAccum(self, *args) -> "OdGsExtAccum &":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_gsExtentsAccum(self, *args)

    def newGsMetafile(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_newGsMetafile(self, *args)

    def beginMetafile(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_beginMetafile(self, *args)

    def endMetafile(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_endMetafile(self, *args)

    def playMetafile(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_playMetafile(self, *args)

    def saveMetafile(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_saveMetafile(self, *args)

    def loadMetafile(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_loadMetafile(self, *args)

    def isMetafileEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_isMetafileEmpty(self, *args)

    def lastMetafileSize(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_lastMetafileSize(self, *args)

    def loadViewport(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_loadViewport(self, *args)

    def forceMetafilesDependence(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_forceMetafilesDependence(self, *args)

    def isViewRegenerated(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_isViewRegenerated(self, *args)

    def drawViewportFrame(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_drawViewportFrame(self, *args)

    def updateViewport(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_updateViewport(self, *args)

    def processMaterialNode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_processMaterialNode(self, *args)

    def saveMaterialCache(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_saveMaterialCache(self, *args)

    def loadMaterialCache(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_loadMaterialCache(self, *args)

    def addPointLight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_addPointLight(self, *args)

    def addSpotLight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_addSpotLight(self, *args)

    def addDistantLight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_addDistantLight(self, *args)

    def addWebLight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_addWebLight(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsBaseVectorizer

    def pushModelTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_pushModelTransform(self, *args)

    def popModelTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_popModelTransform(self, *args)

    def pushClipBoundary(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_pushClipBoundary(self, *args)

    def popClipBoundary(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_popClipBoundary(self, *args)

    def setEntityTraitsDataChanged(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_setEntityTraitsDataChanged(self, *args)

    def objectToDeviceMatrix(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_objectToDeviceMatrix(self, *args)

    def pushPaletteOverride(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_pushPaletteOverride(self, *args)

    def popPaletteOverride(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_popPaletteOverride(self, *args)

    def hasPaletteOverrides(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_hasPaletteOverrides(self, *args)

    def disableInfiniteGeomExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_disableInfiniteGeomExtents(self, *args)

    def sectionableGeomExtentsOnly(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_sectionableGeomExtentsOnly(self, *args)

    def setSectionableGeomExtentsOnly(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_setSectionableGeomExtentsOnly(self, *args)

    def playNestedMetafile(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_playNestedMetafile(self, *args)

    def metafilePlayMode(self, *args) -> "EMetafilePlayMode":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_metafilePlayMode(self, *args)
    kSharedRefTransform = _ODA_Kernel_Py3.OdGsBaseVectorizer_kSharedRefTransform
    kSharedRefUpdate = _ODA_Kernel_Py3.OdGsBaseVectorizer_kSharedRefUpdate
    kSharedRefSelect = _ODA_Kernel_Py3.OdGsBaseVectorizer_kSharedRefSelect

    def pushMetafileTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_pushMetafileTransform(self, *args)

    def popMetafileTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_popMetafileTransform(self, *args)

    def metafileTransform(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_metafileTransform(self, *args)

    def useSharedBlockReferences(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_useSharedBlockReferences(self, *args)

    def useMetafileAsGeometry(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_useMetafileAsGeometry(self, *args)

    def outputForMetafileGeometry(self, *args) -> "OdGiConveyorOutput &":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_outputForMetafileGeometry(self, *args)

    def setTransformForMetafileGeometry(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_setTransformForMetafileGeometry(self, *args)

    def getTransformForMetafileGeometry(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_getTransformForMetafileGeometry(self, *args)

    def reportUpdateError(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_reportUpdateError(self, *args)

    def gsLayerNode(self, *args) -> "OdGsLayerNode *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_gsLayerNode(self, *args)

    def isFaded(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_isFaded(self, *args)

    def fadingIntensity(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_fadingIntensity(self, *args)

    def isHighlighted(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_isHighlighted(self, *args)

    def isSelecting(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_isSelecting(self, *args)

    def isHidden(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_isHidden(self, *args)

    def setHidden(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_setHidden(self, *args)

    def isDragging(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_isDragging(self, *args)

    def gsExtentsOutput(self, *args) -> "OdGiConveyorOutput &":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_gsExtentsOutput(self, *args)

    def setAnalyticLinetypingCircles(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_setAnalyticLinetypingCircles(self, *args)

    def isAnalyticLinetypingCircles(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_isAnalyticLinetypingCircles(self, *args)

    def setAnalyticLinetypingComplexCurves(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_setAnalyticLinetypingComplexCurves(self, *args)

    def isAnalyticLinetypingComplexCurves(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_isAnalyticLinetypingComplexCurves(self, *args)

    def checkSelection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_checkSelection(self, *args)

    def handleSelectionByExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_handleSelectionByExtents(self, *args)

    def displayViewportProperties(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_displayViewportProperties(self, *args)

    def secondaryOutput(self, *args) -> "OdGiConveyorOutput &":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_secondaryOutput(self, *args)

    def setUp(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_setUp(self, *args)

    def beginViewVectorization(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_beginViewVectorization(self, *args)

    def endViewVectorization(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_endViewVectorization(self, *args)

    def onTraitsModified(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_onTraitsModified(self, *args)

    def deviation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_deviation(self, *args)

    def regenAbort(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_regenAbort(self, *args)

    def doDraw(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_doDraw(self, *args)

    def setSelectionMarker(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_setSelectionMarker(self, *args)

    def output(self, *args) -> "OdGiConveyorOutput &":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_output(self, *args)

    def setVisualStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_setVisualStyle(self, *args)

    def highlightedSubentities(self, *args) -> "OdGsMarkerSet const *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_highlightedSubentities(self, *args)

    def findHighlightedSubnodeBranch(self, *args) -> "OdGsStateBranch *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_findHighlightedSubnodeBranch(self, *args)

    def threadIndex(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_threadIndex(self, *args)

    def highlight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_highlight(self, *args)

    def currentHighlightBranch(self, *args) -> "OdGsStateBranch const *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_currentHighlightBranch(self, *args)

    def currentVisibilityBranch(self, *args) -> "OdGsStateBranch const *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_currentVisibilityBranch(self, *args)

    def findHiddenSubnodeBranch(self, *args) -> "OdGsStateBranch *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_findHiddenSubnodeBranch(self, *args)

    def activeLayerNode(self, *args) -> "OdGsLayerNode *":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_activeLayerNode(self, *args)

    def activeRenderType(self, *args) -> "OdGsModel::RenderType":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_activeRenderType(self, *args)

    def activeOverlay(self, *args) -> "OdGsOverlayId":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_activeOverlay(self, *args)

    def isSpatialIndexDisabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_isSpatialIndexDisabled(self, *args)

    def beginMetafileRecording(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_beginMetafileRecording(self, *args)

    def endMetafileRecording(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_endMetafileRecording(self, *args)

    def setAttributes(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_setAttributes(self, *args)
    m_pCurHltBr = property(_ODA_Kernel_Py3.OdGsBaseVectorizer_m_pCurHltBr_get, _ODA_Kernel_Py3.OdGsBaseVectorizer_m_pCurHltBr_set)
    m_pCurVisibilityBr = property(_ODA_Kernel_Py3.OdGsBaseVectorizer_m_pCurVisibilityBr_get, _ODA_Kernel_Py3.OdGsBaseVectorizer_m_pCurVisibilityBr_set)

    def currentSelectionStyle(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_currentSelectionStyle(self, *args)

    def hasSelectionStyle(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_hasSelectionStyle(self, *args)

    def highlightingPass(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_highlightingPass(self, *args)

    def setRenderAbort(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_setRenderAbort(self, *args)

    def renderAbort(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseVectorizer_renderAbort(self, *args)

# Register OdGsBaseVectorizer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsBaseVectorizer_swigregister(OdGsBaseVectorizer)

class BlockScopesCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def blockBegin(self, *args) -> "void":
        return _ODA_Kernel_Py3.BlockScopesCallback_blockBegin(self, *args)

    def blockEnd(self, *args) -> "void":
        return _ODA_Kernel_Py3.BlockScopesCallback_blockEnd(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_BlockScopesCallback

# Register BlockScopesCallback in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.BlockScopesCallback_swigregister(BlockScopesCallback)

class BrepBuilderErrorsHolder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kInvalidId = _ODA_Kernel_Py3.BrepBuilderErrorsHolder_kInvalidId

    def __init__(self, *args):
        _ODA_Kernel_Py3.BrepBuilderErrorsHolder_swiginit(self, _ODA_Kernel_Py3.new_BrepBuilderErrorsHolder(*args))
    m_errorCode = property(_ODA_Kernel_Py3.BrepBuilderErrorsHolder_m_errorCode_get, _ODA_Kernel_Py3.BrepBuilderErrorsHolder_m_errorCode_set)
    m_complexId = property(_ODA_Kernel_Py3.BrepBuilderErrorsHolder_m_complexId_get, _ODA_Kernel_Py3.BrepBuilderErrorsHolder_m_complexId_set)
    m_shellId = property(_ODA_Kernel_Py3.BrepBuilderErrorsHolder_m_shellId_get, _ODA_Kernel_Py3.BrepBuilderErrorsHolder_m_shellId_set)
    m_faceId = property(_ODA_Kernel_Py3.BrepBuilderErrorsHolder_m_faceId_get, _ODA_Kernel_Py3.BrepBuilderErrorsHolder_m_faceId_set)
    m_loopId = property(_ODA_Kernel_Py3.BrepBuilderErrorsHolder_m_loopId_get, _ODA_Kernel_Py3.BrepBuilderErrorsHolder_m_loopId_set)
    m_edgeId = property(_ODA_Kernel_Py3.BrepBuilderErrorsHolder_m_edgeId_get, _ODA_Kernel_Py3.BrepBuilderErrorsHolder_m_edgeId_set)
    m_coedgeId = property(_ODA_Kernel_Py3.BrepBuilderErrorsHolder_m_coedgeId_get, _ODA_Kernel_Py3.BrepBuilderErrorsHolder_m_coedgeId_set)
    m_errorMessage = property(_ODA_Kernel_Py3.BrepBuilderErrorsHolder_m_errorMessage_get, _ODA_Kernel_Py3.BrepBuilderErrorsHolder_m_errorMessage_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_BrepBuilderErrorsHolder

# Register BrepBuilderErrorsHolder in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.BrepBuilderErrorsHolder_swigregister(BrepBuilderErrorsHolder)

class OdBrepBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrepBuilder_swiginit(self, _ODA_Kernel_Py3.new_OdBrepBuilder(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrepBuilder
    kForward = _ODA_Kernel_Py3.OdBrepBuilder_kForward
    kReversed = _ODA_Kernel_Py3.OdBrepBuilder_kReversed

    def getType(self, *args) -> "BrepType":
        return _ODA_Kernel_Py3.OdBrepBuilder_getType(self, *args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepBuilder_set(self, *args)

    def addCoedge(self, *args) -> "BRepBuilderGeometryId":
        return _ODA_Kernel_Py3.OdBrepBuilder_addCoedge(self, *args)

    def addEdge(self, *args) -> "BRepBuilderGeometryId":
        return _ODA_Kernel_Py3.OdBrepBuilder_addEdge(self, *args)

    def addVertex(self, *args) -> "BRepBuilderGeometryId":
        return _ODA_Kernel_Py3.OdBrepBuilder_addVertex(self, *args)

    def addFace(self, *args) -> "BRepBuilderGeometryId":
        return _ODA_Kernel_Py3.OdBrepBuilder_addFace(self, *args)

    def addLoop(self, *args) -> "BRepBuilderGeometryId":
        return _ODA_Kernel_Py3.OdBrepBuilder_addLoop(self, *args)

    def addShell(self, *args) -> "BRepBuilderGeometryId":
        return _ODA_Kernel_Py3.OdBrepBuilder_addShell(self, *args)

    def addComplex(self, *args) -> "BRepBuilderGeometryId":
        return _ODA_Kernel_Py3.OdBrepBuilder_addComplex(self, *args)

    def allowRemovalOfProblematicFaces(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepBuilder_allowRemovalOfProblematicFaces(self, *args)

    def canAddGeometry(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilder_canAddGeometry(self, *args)

    def finishComplex(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepBuilder_finishComplex(self, *args)

    def finishShell(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepBuilder_finishShell(self, *args)

    def finishFace(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepBuilder_finishFace(self, *args)

    def finishLoop(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepBuilder_finishLoop(self, *args)

    def getResult(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdBrepBuilder_getResult(self, *args)

    def isPermittedSurfaceType(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilder_isPermittedSurfaceType(self, *args)

    def isResultAvailable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilder_isResultAvailable(self, *args)

    def isValidEdgeId(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilder_isValidEdgeId(self, *args)

    def isValidComplexId(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilder_isValidComplexId(self, *args)

    def isValidShellId(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilder_isValidShellId(self, *args)

    def isValidFaceId(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilder_isValidFaceId(self, *args)

    def isValidLoopId(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilder_isValidLoopId(self, *args)

    def removedSomeFaces(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilder_removedSomeFaces(self, *args)

    def setAllowShortEdges(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepBuilder_setAllowShortEdges(self, *args)

    def setFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepBuilder_setFlag(self, *args)

    def setFacesMaterial(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepBuilder_setFacesMaterial(self, *args)

    def setFaceMaterialMapping(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdBrepBuilder_setFaceMaterialMapping(self, *args)

    def setEdgeColor(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdBrepBuilder_setEdgeColor(self, *args)

    def setFaceColor(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdBrepBuilder_setFaceColor(self, *args)

    def finish(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdBrepBuilder_finish(self, *args)

    def setTag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepBuilder_setTag(self, *args)

    def enableValidator(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepBuilder_enableValidator(self, *args)

    def getValidationErrors(self, *args) -> "ValidationErrors const *":
        return _ODA_Kernel_Py3.OdBrepBuilder_getValidationErrors(self, *args)

    def isValid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilder_isValid(self, *args)

# Register OdBrepBuilder in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrepBuilder_swigregister(OdBrepBuilder)
OdBrepBuilder.kDefaultShellId = _ODA_Kernel_Py3.cvar.OdBrepBuilder_kDefaultShellId
OdBrepBuilder.kDefaultVertexId = _ODA_Kernel_Py3.cvar.OdBrepBuilder_kDefaultVertexId

class OdDbHostAppProgressMeter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbHostAppProgressMeter

    def start(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbHostAppProgressMeter_start(self, *args)

    def stop(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbHostAppProgressMeter_stop(self, *args)

    def meterProgress(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbHostAppProgressMeter_meterProgress(self, *args)

    def setLimit(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbHostAppProgressMeter_setLimit(self, *args)

# Register OdDbHostAppProgressMeter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbHostAppProgressMeter_swigregister(OdDbHostAppProgressMeter)

class OdGiMapperItemEntry(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiMapperItemEntry >":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiMapperItemEntry >":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_createObject(*args)

    def mapper(self, *args) -> "OdGiMapper const &":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_mapper(self, *args)

    def setMapper(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_setMapper(self, *args)

    def inputTransform(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_inputTransform(self, *args)

    def setInputTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_setInputTransform(self, *args)

    def deviceTransform(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_deviceTransform(self, *args)

    def setDeviceTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_setDeviceTransform(self, *args)

    def modelTransform(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_modelTransform(self, *args)

    def setModelTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_setModelTransform(self, *args)

    def objectTransform(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_objectTransform(self, *args)

    def outputTransform(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_outputTransform(self, *args)

    def setOutputTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_setOutputTransform(self, *args)

    def recomputeTransformations(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_recomputeTransformations(self, *args)
    kShellMapIt = _ODA_Kernel_Py3.OdGiMapperItemEntry_kShellMapIt
    kTriListMapIt = _ODA_Kernel_Py3.OdGiMapperItemEntry_kTriListMapIt
    kPolyIt = _ODA_Kernel_Py3.OdGiMapperItemEntry_kPolyIt

    def mapCoords(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_mapCoords(self, *args)

    def mapPredefinedCoords(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_mapPredefinedCoords(self, *args)

    def isEntityMapper(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_isEntityMapper(self, *args)

    def isObjectMatrixNeed(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_isObjectMatrixNeed(self, *args)

    def isModelMatrixNeed(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_isModelMatrixNeed(self, *args)

    def isDependsFromObjectMatrix(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_isDependsFromObjectMatrix(self, *args)

    def isVertexTransformRequired(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_isVertexTransformRequired(self, *args)

    def setVertexTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_setVertexTransform(self, *args)

    def setObjectTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperItemEntry_setObjectTransform(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMapperItemEntry

# Register OdGiMapperItemEntry in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMapperItemEntry_swigregister(OdGiMapperItemEntry)

def OdGiMapperItemEntry_cast(*args) -> "OdSmartPtr< OdGiMapperItemEntry >":
    return _ODA_Kernel_Py3.OdGiMapperItemEntry_cast(*args)

def OdGiMapperItemEntry_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiMapperItemEntry_desc(*args)

def OdGiMapperItemEntry_createObject(*args) -> "OdSmartPtr< OdGiMapperItemEntry >":
    return _ODA_Kernel_Py3.OdGiMapperItemEntry_createObject(*args)

class MapInputTriangle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    inPt = property(_ODA_Kernel_Py3.MapInputTriangle_inPt_get, _ODA_Kernel_Py3.MapInputTriangle_inPt_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.MapInputTriangle_swiginit(self, _ODA_Kernel_Py3.new_MapInputTriangle(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_MapInputTriangle

# Register MapInputTriangle in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.MapInputTriangle_swigregister(MapInputTriangle)

class MapOutputCoords(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    outCoord = property(_ODA_Kernel_Py3.MapOutputCoords_outCoord_get, _ODA_Kernel_Py3.MapOutputCoords_outCoord_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.MapOutputCoords_swiginit(self, _ODA_Kernel_Py3.new_MapOutputCoords(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_MapOutputCoords

# Register MapOutputCoords in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.MapOutputCoords_swigregister(MapOutputCoords)

class OdGiMapperItem(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiMapperItem >":
        return _ODA_Kernel_Py3.OdGiMapperItem_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMapperItem_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMapperItem_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiMapperItem_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiMapperItem >":
        return _ODA_Kernel_Py3.OdGiMapperItem_createObject(*args)

    def setDiffuseMapper(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperItem_setDiffuseMapper(self, *args)

    def diffuseMapper(self, *args) -> "OdGiMapperItemEntryPtr":
        return _ODA_Kernel_Py3.OdGiMapperItem_diffuseMapper(self, *args)

    def setMapper(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperItem_setMapper(self, *args)

    def setModelTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperItem_setModelTransform(self, *args)

    def setObjectTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperItem_setObjectTransform(self, *args)

    def setDeviceTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperItem_setDeviceTransform(self, *args)

    def isLastProcValid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMapperItem_isLastProcValid(self, *args)

    def isEntityMapper(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMapperItem_isEntityMapper(self, *args)

    def isObjectMatrixNeed(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMapperItem_isObjectMatrixNeed(self, *args)

    def isModelMatrixNeed(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMapperItem_isModelMatrixNeed(self, *args)

    def isDependsFromObjectMatrix(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMapperItem_isDependsFromObjectMatrix(self, *args)

    def isVertexTransformRequired(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMapperItem_isVertexTransformRequired(self, *args)

    def setVertexTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperItem_setVertexTransform(self, *args)

    def setInputTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperItem_setInputTransform(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMapperItem

# Register OdGiMapperItem in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMapperItem_swigregister(OdGiMapperItem)

def OdGiMapperItem_cast(*args) -> "OdSmartPtr< OdGiMapperItem >":
    return _ODA_Kernel_Py3.OdGiMapperItem_cast(*args)

def OdGiMapperItem_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiMapperItem_desc(*args)

def OdGiMapperItem_createObject(*args) -> "OdSmartPtr< OdGiMapperItem >":
    return _ODA_Kernel_Py3.OdGiMapperItem_createObject(*args)

class OdGiMapperRenderItem(OdGiMapperItem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiMapperRenderItem >":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiMapperRenderItem >":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_createObject(*args)

    def setDiffuseMapper(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_setDiffuseMapper(self, *args)

    def diffuseMapper(self, *args) -> "OdGiMapperItemEntryPtr":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_diffuseMapper(self, *args)

    def setSpecularMapper(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_setSpecularMapper(self, *args)

    def specularMapper(self, *args) -> "OdGiMapperItemEntryPtr":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_specularMapper(self, *args)

    def setReflectionMapper(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_setReflectionMapper(self, *args)

    def reflectionMapper(self, *args) -> "OdGiMapperItemEntryPtr":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_reflectionMapper(self, *args)

    def setOpacityMapper(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_setOpacityMapper(self, *args)

    def opacityMapper(self, *args) -> "OdGiMapperItemEntryPtr":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_opacityMapper(self, *args)

    def setBumpMapper(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_setBumpMapper(self, *args)

    def bumpMapper(self, *args) -> "OdGiMapperItemEntryPtr":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_bumpMapper(self, *args)

    def setRefractionMapper(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_setRefractionMapper(self, *args)

    def refractionMapper(self, *args) -> "OdGiMapperItemEntryPtr":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_refractionMapper(self, *args)

    def setNormalMapMapper(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_setNormalMapMapper(self, *args)

    def normalMapMapper(self, *args) -> "OdGiMapperItemEntryPtr":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_normalMapMapper(self, *args)

    def setEmissionMapper(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_setEmissionMapper(self, *args)

    def emissionMapper(self, *args) -> "OdGiMapperItemEntryPtr":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_emissionMapper(self, *args)

    def setMapper(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_setMapper(self, *args)

    def setModelTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_setModelTransform(self, *args)

    def setObjectTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_setObjectTransform(self, *args)

    def setDeviceTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_setDeviceTransform(self, *args)

    def isLastProcValid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_isLastProcValid(self, *args)

    def isEntityMapper(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_isEntityMapper(self, *args)

    def isObjectMatrixNeed(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_isObjectMatrixNeed(self, *args)

    def isModelMatrixNeed(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_isModelMatrixNeed(self, *args)

    def isDependsFromObjectMatrix(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_isDependsFromObjectMatrix(self, *args)

    def isVertexTransformRequired(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_isVertexTransformRequired(self, *args)

    def setVertexTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_setVertexTransform(self, *args)

    def setInputTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMapperRenderItem_setInputTransform(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMapperRenderItem

# Register OdGiMapperRenderItem in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMapperRenderItem_swigregister(OdGiMapperRenderItem)

def OdGiMapperRenderItem_cast(*args) -> "OdSmartPtr< OdGiMapperRenderItem >":
    return _ODA_Kernel_Py3.OdGiMapperRenderItem_cast(*args)

def OdGiMapperRenderItem_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiMapperRenderItem_desc(*args)

def OdGiMapperRenderItem_createObject(*args) -> "OdSmartPtr< OdGiMapperRenderItem >":
    return _ODA_Kernel_Py3.OdGiMapperRenderItem_createObject(*args)

class OdGiFill(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiFill >":
        return _ODA_Kernel_Py3.OdGiFill_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiFill_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiFill_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiFill_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiFill >":
        return _ODA_Kernel_Py3.OdGiFill_createObject(*args)

    def deviation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiFill_deviation(self, *args)

    def setDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFill_setDeviation(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFill_copyFrom(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFill___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFill___ne__(self, *args)

    def saveBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFill_saveBytes(self, *args)

    def loadBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFill_loadBytes(self, *args)

    @staticmethod
    def loadFill(*args) -> "OdSmartPtr< OdGiFill >":
        return _ODA_Kernel_Py3.OdGiFill_loadFill(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiFill

# Register OdGiFill in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiFill_swigregister(OdGiFill)

def OdGiFill_cast(*args) -> "OdSmartPtr< OdGiFill >":
    return _ODA_Kernel_Py3.OdGiFill_cast(*args)

def OdGiFill_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiFill_desc(*args)

def OdGiFill_createObject(*args) -> "OdSmartPtr< OdGiFill >":
    return _ODA_Kernel_Py3.OdGiFill_createObject(*args)

def OdGiFill_loadFill(*args) -> "OdSmartPtr< OdGiFill >":
    return _ODA_Kernel_Py3.OdGiFill_loadFill(*args)

class OdGiHatchPattern(OdGiFill):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiHatchPattern >":
        return _ODA_Kernel_Py3.OdGiHatchPattern_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiHatchPattern_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiHatchPattern_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiHatchPattern_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiHatchPattern >":
        return _ODA_Kernel_Py3.OdGiHatchPattern_createObject(*args)

    def patternLines(self, *args) -> "OdHatchPattern &":
        return _ODA_Kernel_Py3.OdGiHatchPattern_patternLines(self, *args)

    def setPatternLines(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHatchPattern_setPatternLines(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHatchPattern_copyFrom(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiHatchPattern___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiHatchPattern___ne__(self, *args)

    def saveBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHatchPattern_saveBytes(self, *args)

    def loadBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHatchPattern_loadBytes(self, *args)

    def isDraft(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiHatchPattern_isDraft(self, *args)

    def setDraft(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHatchPattern_setDraft(self, *args)

    def patternScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiHatchPattern_patternScale(self, *args)

    def setPatternScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHatchPattern_setPatternScale(self, *args)

    def isExternal(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiHatchPattern_isExternal(self, *args)

    def setExternal(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHatchPattern_setExternal(self, *args)

    def getPatternColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiHatchPattern_getPatternColor(self, *args)

    def setPatternColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHatchPattern_setPatternColor(self, *args)

    def getPatternLineWeight(self, *args) -> "OdDb::LineWeight":
        return _ODA_Kernel_Py3.OdGiHatchPattern_getPatternLineWeight(self, *args)

    def setPatternLineWeight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHatchPattern_setPatternLineWeight(self, *args)

    def getPatternTransparency(self, *args) -> "OdCmTransparency":
        return _ODA_Kernel_Py3.OdGiHatchPattern_getPatternTransparency(self, *args)

    def setPatternTransparency(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHatchPattern_setPatternTransparency(self, *args)

    def getNext(self, *args) -> "OdSmartPtr< OdGiHatchPattern >":
        return _ODA_Kernel_Py3.OdGiHatchPattern_getNext(self, *args)

    def setNext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHatchPattern_setNext(self, *args)

    def isAlignedToCenter(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiHatchPattern_isAlignedToCenter(self, *args)

    def setAlignedToCenter(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHatchPattern_setAlignedToCenter(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiHatchPattern_isEmpty(self, *args)

    def setEmpty(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHatchPattern_setEmpty(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiHatchPattern

# Register OdGiHatchPattern in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiHatchPattern_swigregister(OdGiHatchPattern)

def OdGiHatchPattern_cast(*args) -> "OdSmartPtr< OdGiHatchPattern >":
    return _ODA_Kernel_Py3.OdGiHatchPattern_cast(*args)

def OdGiHatchPattern_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiHatchPattern_desc(*args)

def OdGiHatchPattern_createObject(*args) -> "OdSmartPtr< OdGiHatchPattern >":
    return _ODA_Kernel_Py3.OdGiHatchPattern_createObject(*args)

class OdGiFillHatch(OdGiHatchPattern):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiFillHatch >":
        return _ODA_Kernel_Py3.OdGiFillHatch_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiFillHatch_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiFillHatch_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiFillHatch_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiFillHatch >":
        return _ODA_Kernel_Py3.OdGiFillHatch_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiFillHatch

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFillHatch_copyFrom(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFillHatch___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFillHatch___ne__(self, *args)
    kNotEvaluated = _ODA_Kernel_Py3.OdGiFillHatch_kNotEvaluated
    kEvaluated = _ODA_Kernel_Py3.OdGiFillHatch_kEvaluated
    kEvaluatedEmpty = _ODA_Kernel_Py3.OdGiFillHatch_kEvaluatedEmpty
    m_eData = property(_ODA_Kernel_Py3.OdGiFillHatch_m_eData_get, _ODA_Kernel_Py3.OdGiFillHatch_m_eData_set)

    def deviation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiFillHatch_deviation(self, *args)

    def viewRotation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiFillHatch_viewRotation(self, *args)

    def elevation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiFillHatch_elevation(self, *args)

    def hatchDensity(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiFillHatch_hatchDensity(self, *args)

    def pointLimit(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiFillHatch_pointLimit(self, *args)

    def maxDrawPoints(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiFillHatch_maxDrawPoints(self, *args)

    def smoothHatch(self, *args) -> "OdInt16":
        return _ODA_Kernel_Py3.OdGiFillHatch_smoothHatch(self, *args)

    def isSolidFill(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFillHatch_isSolidFill(self, *args)

    def isHatchTooDense(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFillHatch_isHatchTooDense(self, *args)

    def isGradientFill(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFillHatch_isGradientFill(self, *args)

    def isDrawCache(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFillHatch_isDrawCache(self, *args)

    def isMPolygon(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFillHatch_isMPolygon(self, *args)

    def isDBRO(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFillHatch_isDBRO(self, *args)

    def hasCache(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFillHatch_hasCache(self, *args)

    def getResult(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdGiFillHatch_getResult(self, *args)

    def getLoopsFlags(self, *args) -> "OdUInt32Array const":
        return _ODA_Kernel_Py3.OdGiFillHatch_getLoopsFlags(self, *args)

    def getLoopsMarker(self, *args) -> "OdUInt32Array const":
        return _ODA_Kernel_Py3.OdGiFillHatch_getLoopsMarker(self, *args)

    def getStyle(self, *args) -> "OdGeIslandStyle":
        return _ODA_Kernel_Py3.OdGiFillHatch_getStyle(self, *args)

    def getExtents(self, *args) -> "OdGeExtents3d":
        return _ODA_Kernel_Py3.OdGiFillHatch_getExtents(self, *args)

    def getTolerance(self, *args) -> "OdGeTol":
        return _ODA_Kernel_Py3.OdGiFillHatch_getTolerance(self, *args)

    def getPoints(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFillHatch_getPoints(self, *args)

    def patternLines(self, *args) -> "OdHatchPattern &":
        return _ODA_Kernel_Py3.OdGiFillHatch_patternLines(self, *args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFillHatch_set(self, *args)

    def setHatchTooDense(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFillHatch_setHatchTooDense(self, *args)

    def setResult(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFillHatch_setResult(self, *args)

    def setLoopsFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFillHatch_setLoopsFlags(self, *args)

    def setLoopsMarker(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFillHatch_setLoopsMarker(self, *args)

    def setExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFillHatch_setExtents(self, *args)

    def setDrawCache(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFillHatch_setDrawCache(self, *args)

    def setTolerance(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFillHatch_setTolerance(self, *args)

    def setPoints(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFillHatch_setPoints(self, *args)

# Register OdGiFillHatch in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiFillHatch_swigregister(OdGiFillHatch)

def OdGiFillHatch_cast(*args) -> "OdSmartPtr< OdGiFillHatch >":
    return _ODA_Kernel_Py3.OdGiFillHatch_cast(*args)

def OdGiFillHatch_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiFillHatch_desc(*args)

def OdGiFillHatch_createObject(*args) -> "OdSmartPtr< OdGiFillHatch >":
    return _ODA_Kernel_Py3.OdGiFillHatch_createObject(*args)

class OdGePointEnt2d(OdGeEntity2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def point2d(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGePointEnt2d_point2d(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGePointEnt2d

# Register OdGePointEnt2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGePointEnt2d_swigregister(OdGePointEnt2d)

class OdGeSplineEnt3d(OdGeCurve3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isRational(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeSplineEnt3d_isRational(self, *args)

    def degree(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeSplineEnt3d_degree(self, *args)

    def order(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeSplineEnt3d_order(self, *args)

    def numKnots(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeSplineEnt3d_numKnots(self, *args)

    def knots(self, *args) -> "OdGeKnotVector const &":
        return _ODA_Kernel_Py3.OdGeSplineEnt3d_knots(self, *args)

    def numControlPoints(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeSplineEnt3d_numControlPoints(self, *args)

    def continuityAtKnot(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeSplineEnt3d_continuityAtKnot(self, *args)

    def startParam(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeSplineEnt3d_startParam(self, *args)

    def endParam(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeSplineEnt3d_endParam(self, *args)

    def startPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeSplineEnt3d_startPoint(self, *args)

    def endPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeSplineEnt3d_endPoint(self, *args)

    def hasFitData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeSplineEnt3d_hasFitData(self, *args)

    def knotAt(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeSplineEnt3d_knotAt(self, *args)

    def setKnotAt(self, *args) -> "OdGeSplineEnt3d &":
        return _ODA_Kernel_Py3.OdGeSplineEnt3d_setKnotAt(self, *args)

    def controlPointAt(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeSplineEnt3d_controlPointAt(self, *args)

    def setControlPointAt(self, *args) -> "OdGeSplineEnt3d &":
        return _ODA_Kernel_Py3.OdGeSplineEnt3d_setControlPointAt(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeSplineEnt3d

# Register OdGeSplineEnt3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeSplineEnt3d_swigregister(OdGeSplineEnt3d)

kNothing = _ODA_Kernel_Py3.kNothing
kIsolines = _ODA_Kernel_Py3.kIsolines
kEdges = _ODA_Kernel_Py3.kEdges
kShells = _ODA_Kernel_Py3.kShells
kOrderedEdges = _ODA_Kernel_Py3.kOrderedEdges
kSurfIsolines = _ODA_Kernel_Py3.kSurfIsolines
kShellsWithoutWires = _ODA_Kernel_Py3.kShellsWithoutWires
kShellsWithoutWiresWithEdgeColors = _ODA_Kernel_Py3.kShellsWithoutWiresWithEdgeColors
kVertices = _ODA_Kernel_Py3.kVertices
kOptimizedShells = _ODA_Kernel_Py3.kOptimizedShells
class wrTriangulationParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    maxNumGridLines = property(_ODA_Kernel_Py3.wrTriangulationParams_maxNumGridLines_get, _ODA_Kernel_Py3.wrTriangulationParams_maxNumGridLines_set)
    maxFacetEdgeLength = property(_ODA_Kernel_Py3.wrTriangulationParams_maxFacetEdgeLength_get, _ODA_Kernel_Py3.wrTriangulationParams_maxFacetEdgeLength_set)
    normalTolerance = property(_ODA_Kernel_Py3.wrTriangulationParams_normalTolerance_get, _ODA_Kernel_Py3.wrTriangulationParams_normalTolerance_set)
    surfaceTolerance = property(_ODA_Kernel_Py3.wrTriangulationParams_surfaceTolerance_get, _ODA_Kernel_Py3.wrTriangulationParams_surfaceTolerance_set)
    gridAspectRatio = property(_ODA_Kernel_Py3.wrTriangulationParams_gridAspectRatio_get, _ODA_Kernel_Py3.wrTriangulationParams_gridAspectRatio_set)
    BetweenKnots = property(_ODA_Kernel_Py3.wrTriangulationParams_BetweenKnots_get, _ODA_Kernel_Py3.wrTriangulationParams_BetweenKnots_set)
    PointsPerEdge = property(_ODA_Kernel_Py3.wrTriangulationParams_PointsPerEdge_get, _ODA_Kernel_Py3.wrTriangulationParams_PointsPerEdge_set)
    bRecalculateSurfaceTolerance = property(_ODA_Kernel_Py3.wrTriangulationParams_bRecalculateSurfaceTolerance_get, _ODA_Kernel_Py3.wrTriangulationParams_bRecalculateSurfaceTolerance_set)
    bFastMode = property(_ODA_Kernel_Py3.wrTriangulationParams_bFastMode_get, _ODA_Kernel_Py3.wrTriangulationParams_bFastMode_set)
    bUseTesselation = property(_ODA_Kernel_Py3.wrTriangulationParams_bUseTesselation_get, _ODA_Kernel_Py3.wrTriangulationParams_bUseTesselation_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.wrTriangulationParams_swiginit(self, _ODA_Kernel_Py3.new_wrTriangulationParams(*args))

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.wrTriangulationParams___eq__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_wrTriangulationParams

# Register wrTriangulationParams in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.wrTriangulationParams_swigregister(wrTriangulationParams)

class OdBrMesh2d(OdBrMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrMesh2d_swiginit(self, _ODA_Kernel_Py3.new_OdBrMesh2d(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrMesh2d

# Register OdBrMesh2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrMesh2d_swigregister(OdBrMesh2d)

class OdBrElement2d(OdBrElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrElement2d_swiginit(self, _ODA_Kernel_Py3.new_OdBrElement2d(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrElement2d

    def getNormal(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrElement2d_getNormal(self, *args)

# Register OdBrElement2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrElement2d_swigregister(OdBrElement2d)

class OdBrTraverser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def done(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrTraverser_done(self, *args)

    def next(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrTraverser_next(self, *args)

    def restart(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrTraverser_restart(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrTraverser

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrTraverser_isEqualTo(self, *args)

    def isNull(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrTraverser_isNull(self, *args)

    def setValidationLevel(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrTraverser_setValidationLevel(self, *args)

    def getValidationLevel(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrTraverser_getValidationLevel(self, *args)

# Register OdBrTraverser in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrTraverser_swigregister(OdBrTraverser)

class OdGeNurbSurface(OdGeSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeNurbSurface_swiginit(self, _ODA_Kernel_Py3.new_OdGeNurbSurface(*args))

    def isRationalInU(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbSurface_isRationalInU(self, *args)

    def isPeriodicInU(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbSurface_isPeriodicInU(self, *args)

    def isRationalInV(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbSurface_isRationalInV(self, *args)

    def isPeriodicInV(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbSurface_isPeriodicInV(self, *args)

    def singularityInU(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeNurbSurface_singularityInU(self, *args)

    def singularityInV(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeNurbSurface_singularityInV(self, *args)

    def degreeInU(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeNurbSurface_degreeInU(self, *args)

    def numControlPointsInU(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeNurbSurface_numControlPointsInU(self, *args)

    def degreeInV(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeNurbSurface_degreeInV(self, *args)

    def numControlPointsInV(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeNurbSurface_numControlPointsInV(self, *args)

    def getControlPoints(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbSurface_getControlPoints(self, *args)

    def getWeights(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbSurface_getWeights(self, *args)

    def numKnotsInU(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeNurbSurface_numKnotsInU(self, *args)

    def getUKnots(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbSurface_getUKnots(self, *args)

    def numKnotsInV(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeNurbSurface_numKnotsInV(self, *args)

    def getVKnots(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbSurface_getVKnots(self, *args)

    def getDefinition(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbSurface_getDefinition(self, *args)

    def set(self, *args) -> "OdGeNurbSurface &":
        return _ODA_Kernel_Py3.OdGeNurbSurface_set(self, *args)

    def setFitData(self, *args) -> "OdGeNurbSurface &":
        return _ODA_Kernel_Py3.OdGeNurbSurface_setFitData(self, *args)

    def computeVIsoLine(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbSurface_computeVIsoLine(self, *args)

    def computeUIsoLine(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbSurface_computeUIsoLine(self, *args)

    def paramOfPrec(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeNurbSurface_paramOfPrec(self, *args)

    def loc(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeNurbSurface_loc(self, *args)

    @staticmethod
    def convertFrom(*args) -> "OdGeNurbSurface *":
        return _ODA_Kernel_Py3.OdGeNurbSurface_convertFrom(*args)
    kLowerU = _ODA_Kernel_Py3.OdGeNurbSurface_kLowerU
    kUpperU = _ODA_Kernel_Py3.OdGeNurbSurface_kUpperU
    kLowerV = _ODA_Kernel_Py3.OdGeNurbSurface_kLowerV
    kUpperV = _ODA_Kernel_Py3.OdGeNurbSurface_kUpperV

    def joinWith(self, *args) -> "OdGeNurbSurface &":
        return _ODA_Kernel_Py3.OdGeNurbSurface_joinWith(self, *args)

    def elevateDegree(self, *args) -> "OdGeNurbSurface &":
        return _ODA_Kernel_Py3.OdGeNurbSurface_elevateDegree(self, *args)

    def insertKnot(self, *args) -> "OdGeNurbSurface &":
        return _ODA_Kernel_Py3.OdGeNurbSurface_insertKnot(self, *args)

    def knotAt(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeNurbSurface_knotAt(self, *args)

    def controlPointAt(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeNurbSurface_controlPointAt(self, *args)

    def setControlPointAt(self, *args) -> "OdGeNurbSurface &":
        return _ODA_Kernel_Py3.OdGeNurbSurface_setControlPointAt(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeNurbSurface

# Register OdGeNurbSurface in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeNurbSurface_swigregister(OdGeNurbSurface)

def OdGeNurbSurface_convertFrom(*args) -> "OdGeNurbSurface *":
    return _ODA_Kernel_Py3.OdGeNurbSurface_convertFrom(*args)

class OdBrVertex(OdBrEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdBrVertex_getPoint(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrVertex_swiginit(self, _ODA_Kernel_Py3.new_OdBrVertex(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrVertex

# Register OdBrVertex in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrVertex_swigregister(OdBrVertex)

kInpDefault = _ODA_Kernel_Py3.kInpDefault
kInpDisallowEmpty = _ODA_Kernel_Py3.kInpDisallowEmpty
kInpDisallowOther = _ODA_Kernel_Py3.kInpDisallowOther
kInpThrowEmpty = _ODA_Kernel_Py3.kInpThrowEmpty
kInpThrowOther = _ODA_Kernel_Py3.kInpThrowOther
kInpNonZero = _ODA_Kernel_Py3.kInpNonZero
kInpNonNeg = _ODA_Kernel_Py3.kInpNonNeg
kInpThrowEmptyInQuotes = _ODA_Kernel_Py3.kInpThrowEmptyInQuotes
kGfpForOpen = _ODA_Kernel_Py3.kGfpForOpen
kGfpForSave = _ODA_Kernel_Py3.kGfpForSave
kGfpOverwritePrompt = _ODA_Kernel_Py3.kGfpOverwritePrompt
kGstDefault = _ODA_Kernel_Py3.kGstDefault
kGstNoSpaces = _ODA_Kernel_Py3.kGstNoSpaces
kGstAllowSpaces = _ODA_Kernel_Py3.kGstAllowSpaces
kGstNoEmpty = _ODA_Kernel_Py3.kGstNoEmpty
kGptDefault = _ODA_Kernel_Py3.kGptDefault
kGdsDefault = _ODA_Kernel_Py3.kGdsDefault
kGinDefault = _ODA_Kernel_Py3.kGinDefault
kGrlDefault = _ODA_Kernel_Py3.kGrlDefault
kGanDefault = _ODA_Kernel_Py3.kGanDefault
kGptNoLimCheck = _ODA_Kernel_Py3.kGptNoLimCheck
kGptNoUCS = _ODA_Kernel_Py3.kGptNoUCS
kGptRubberBand = _ODA_Kernel_Py3.kGptRubberBand
kGptRectFrame = _ODA_Kernel_Py3.kGptRectFrame
kGptBeginDrag = _ODA_Kernel_Py3.kGptBeginDrag
kGptEndDrag = _ODA_Kernel_Py3.kGptEndDrag
kGptNoOSnap = _ODA_Kernel_Py3.kGptNoOSnap
kGanFromLastPoint = _ODA_Kernel_Py3.kGanFromLastPoint
kGdsFromLastPoint = _ODA_Kernel_Py3.kGdsFromLastPoint
kGanNoAngBase = _ODA_Kernel_Py3.kGanNoAngBase
kGds2d = _ODA_Kernel_Py3.kGds2d
kGdsSignedDist = _ODA_Kernel_Py3.kGdsSignedDist
kGdsPerpDist = _ODA_Kernel_Py3.kGdsPerpDist
kGdsNoZero = _ODA_Kernel_Py3.kGdsNoZero
kGinNoZero = _ODA_Kernel_Py3.kGinNoZero
kGrlNoZero = _ODA_Kernel_Py3.kGrlNoZero
kGanNoZero = _ODA_Kernel_Py3.kGanNoZero
kGdsNoNeg = _ODA_Kernel_Py3.kGdsNoNeg
kGinNoNeg = _ODA_Kernel_Py3.kGinNoNeg
kGrlNoNeg = _ODA_Kernel_Py3.kGrlNoNeg
kSelDefault = _ODA_Kernel_Py3.kSelDefault
kSelPickLastPoint = _ODA_Kernel_Py3.kSelPickLastPoint
kSelSingleEntity = _ODA_Kernel_Py3.kSelSingleEntity
kSelIgnorePickFirst = _ODA_Kernel_Py3.kSelIgnorePickFirst
kSelSinglePass = _ODA_Kernel_Py3.kSelSinglePass
kSelAllowEmpty = _ODA_Kernel_Py3.kSelAllowEmpty
kSelRemove = _ODA_Kernel_Py3.kSelRemove
kSelLeaveHighlighted = _ODA_Kernel_Py3.kSelLeaveHighlighted
kSelAllowInactSpaces = _ODA_Kernel_Py3.kSelAllowInactSpaces
kSelAllowObjects = _ODA_Kernel_Py3.kSelAllowObjects
kSelAllowPSVP = _ODA_Kernel_Py3.kSelAllowPSVP
kSelAllowSubents = _ODA_Kernel_Py3.kSelAllowSubents
kSelAllowLocked = _ODA_Kernel_Py3.kSelAllowLocked
kSelAllowSubentsAlways = _ODA_Kernel_Py3.kSelAllowSubentsAlways
class OdEdInputTracker(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdEdInputTracker >":
        return _ODA_Kernel_Py3.OdEdInputTracker_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdInputTracker_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdInputTracker_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdEdInputTracker_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdEdInputTracker >":
        return _ODA_Kernel_Py3.OdEdInputTracker_createObject(*args)

    def addDrawables(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdEdInputTracker_addDrawables(self, *args)

    def removeDrawables(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdInputTracker_removeDrawables(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdInputTracker

# Register OdEdInputTracker in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdInputTracker_swigregister(OdEdInputTracker)

def OdEdInputTracker_cast(*args) -> "OdSmartPtr< OdEdInputTracker >":
    return _ODA_Kernel_Py3.OdEdInputTracker_cast(*args)

def OdEdInputTracker_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdEdInputTracker_desc(*args)

def OdEdInputTracker_createObject(*args) -> "OdSmartPtr< OdEdInputTracker >":
    return _ODA_Kernel_Py3.OdEdInputTracker_createObject(*args)

class OdEdIntegerTracker(OdEdInputTracker):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdEdIntegerTracker >":
        return _ODA_Kernel_Py3.OdEdIntegerTracker_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdIntegerTracker_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdIntegerTracker_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdEdIntegerTracker_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdEdIntegerTracker >":
        return _ODA_Kernel_Py3.OdEdIntegerTracker_createObject(*args)

    def setValue(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdIntegerTracker_setValue(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdIntegerTracker

# Register OdEdIntegerTracker in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdIntegerTracker_swigregister(OdEdIntegerTracker)

def OdEdIntegerTracker_cast(*args) -> "OdSmartPtr< OdEdIntegerTracker >":
    return _ODA_Kernel_Py3.OdEdIntegerTracker_cast(*args)

def OdEdIntegerTracker_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdEdIntegerTracker_desc(*args)

def OdEdIntegerTracker_createObject(*args) -> "OdSmartPtr< OdEdIntegerTracker >":
    return _ODA_Kernel_Py3.OdEdIntegerTracker_createObject(*args)

class OdEdRealTracker(OdEdInputTracker):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdEdRealTracker >":
        return _ODA_Kernel_Py3.OdEdRealTracker_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdRealTracker_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdRealTracker_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdEdRealTracker_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdEdRealTracker >":
        return _ODA_Kernel_Py3.OdEdRealTracker_createObject(*args)

    def setValue(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdRealTracker_setValue(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdRealTracker

# Register OdEdRealTracker in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdRealTracker_swigregister(OdEdRealTracker)

def OdEdRealTracker_cast(*args) -> "OdSmartPtr< OdEdRealTracker >":
    return _ODA_Kernel_Py3.OdEdRealTracker_cast(*args)

def OdEdRealTracker_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdEdRealTracker_desc(*args)

def OdEdRealTracker_createObject(*args) -> "OdSmartPtr< OdEdRealTracker >":
    return _ODA_Kernel_Py3.OdEdRealTracker_createObject(*args)

class OdEdStringTracker(OdEdInputTracker):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdEdStringTracker >":
        return _ODA_Kernel_Py3.OdEdStringTracker_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdStringTracker_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdStringTracker_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdEdStringTracker_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdEdStringTracker >":
        return _ODA_Kernel_Py3.OdEdStringTracker_createObject(*args)

    def setValue(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdStringTracker_setValue(self, *args)

    def setCursor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdStringTracker_setCursor(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdStringTracker

# Register OdEdStringTracker in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdStringTracker_swigregister(OdEdStringTracker)

def OdEdStringTracker_cast(*args) -> "OdSmartPtr< OdEdStringTracker >":
    return _ODA_Kernel_Py3.OdEdStringTracker_cast(*args)

def OdEdStringTracker_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdEdStringTracker_desc(*args)

def OdEdStringTracker_createObject(*args) -> "OdSmartPtr< OdEdStringTracker >":
    return _ODA_Kernel_Py3.OdEdStringTracker_createObject(*args)

class OdEdPointTracker(OdEdInputTracker):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdEdPointTracker >":
        return _ODA_Kernel_Py3.OdEdPointTracker_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdPointTracker_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdPointTracker_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdEdPointTracker_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdEdPointTracker >":
        return _ODA_Kernel_Py3.OdEdPointTracker_createObject(*args)

    def setValue(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdPointTracker_setValue(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdPointTracker

# Register OdEdPointTracker in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdPointTracker_swigregister(OdEdPointTracker)

def OdEdPointTracker_cast(*args) -> "OdSmartPtr< OdEdPointTracker >":
    return _ODA_Kernel_Py3.OdEdPointTracker_cast(*args)

def OdEdPointTracker_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdEdPointTracker_desc(*args)

def OdEdPointTracker_createObject(*args) -> "OdSmartPtr< OdEdPointTracker >":
    return _ODA_Kernel_Py3.OdEdPointTracker_createObject(*args)

class OdEdPointDefTracker(OdEdPointTracker):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdEdPointDefTracker >":
        return _ODA_Kernel_Py3.OdEdPointDefTracker_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdPointDefTracker_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdPointDefTracker_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdEdPointDefTracker_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdEdPointDefTracker >":
        return _ODA_Kernel_Py3.OdEdPointDefTracker_createObject(*args)

    def basePoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdEdPointDefTracker_basePoint(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdPointDefTracker

# Register OdEdPointDefTracker in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdPointDefTracker_swigregister(OdEdPointDefTracker)

def OdEdPointDefTracker_cast(*args) -> "OdSmartPtr< OdEdPointDefTracker >":
    return _ODA_Kernel_Py3.OdEdPointDefTracker_cast(*args)

def OdEdPointDefTracker_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdEdPointDefTracker_desc(*args)

def OdEdPointDefTracker_createObject(*args) -> "OdSmartPtr< OdEdPointDefTracker >":
    return _ODA_Kernel_Py3.OdEdPointDefTracker_createObject(*args)

class OdEdColorTracker(OdEdInputTracker):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdEdColorTracker >":
        return _ODA_Kernel_Py3.OdEdColorTracker_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdColorTracker_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdColorTracker_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdEdColorTracker_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdEdColorTracker >":
        return _ODA_Kernel_Py3.OdEdColorTracker_createObject(*args)

    def setValue(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdColorTracker_setValue(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdColorTracker

# Register OdEdColorTracker in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdColorTracker_swigregister(OdEdColorTracker)

def OdEdColorTracker_cast(*args) -> "OdSmartPtr< OdEdColorTracker >":
    return _ODA_Kernel_Py3.OdEdColorTracker_cast(*args)

def OdEdColorTracker_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdEdColorTracker_desc(*args)

def OdEdColorTracker_createObject(*args) -> "OdSmartPtr< OdEdColorTracker >":
    return _ODA_Kernel_Py3.OdEdColorTracker_createObject(*args)

class OdEdException(OdError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdException

# Register OdEdException in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdException_swigregister(OdEdException)

class OdEdCancel(OdEdException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdEdCancel_swiginit(self, _ODA_Kernel_Py3.new_OdEdCancel(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdCancel

# Register OdEdCancel in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdCancel_swigregister(OdEdCancel)

class OdEdKeyword(OdEdException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdEdKeyword_swiginit(self, _ODA_Kernel_Py3.new_OdEdKeyword(*args))

    def keywordIndex(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdEdKeyword_keywordIndex(self, *args)

    def keyword(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdEdKeyword_keyword(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdKeyword

# Register OdEdKeyword in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdKeyword_swigregister(OdEdKeyword)

class OdEdOtherInput(OdEdCancel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdEdOtherInput_swiginit(self, _ODA_Kernel_Py3.new_OdEdOtherInput(*args))

    def string(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdEdOtherInput_string(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdOtherInput

# Register OdEdOtherInput in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdOtherInput_swigregister(OdEdOtherInput)

class OdEdEmptyInput(OdEdCancel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdEdEmptyInput_swiginit(self, _ODA_Kernel_Py3.new_OdEdEmptyInput(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdEmptyInput

# Register OdEdEmptyInput in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdEmptyInput_swigregister(OdEdEmptyInput)

class OdEdUserIO(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdEdUserIO >":
        return _ODA_Kernel_Py3.OdEdUserIO_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdUserIO_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdUserIO_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdEdUserIO_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdEdUserIO >":
        return _ODA_Kernel_Py3.OdEdUserIO_createObject(*args)

    def interactive(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdEdUserIO_interactive(self, *args)

    def getKeyword(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdEdUserIO_getKeyword(self, *args)

    def getInt(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdEdUserIO_getInt(self, *args)

    def getReal(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdEdUserIO_getReal(self, *args)

    def getString(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdEdUserIO_getString(self, *args)

    def putString(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdUserIO_putString(self, *args)

    def getCmColor(self, *args) -> "OdSharedPtr< OdCmColorBase >":
        return _ODA_Kernel_Py3.OdEdUserIO_getCmColor(self, *args)

    def getFilePath(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdEdUserIO_getFilePath(self, *args)

    def putError(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdUserIO_putError(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdUserIO

# Register OdEdUserIO in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdUserIO_swigregister(OdEdUserIO)

def OdEdUserIO_cast(*args) -> "OdSmartPtr< OdEdUserIO >":
    return _ODA_Kernel_Py3.OdEdUserIO_cast(*args)

def OdEdUserIO_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdEdUserIO_desc(*args)

def OdEdUserIO_createObject(*args) -> "OdSmartPtr< OdEdUserIO >":
    return _ODA_Kernel_Py3.OdEdUserIO_createObject(*args)

class OdRxPropertyBase(OdRxMember):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxPropertyBase >":
        return _ODA_Kernel_Py3.OdRxPropertyBase_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxPropertyBase_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxPropertyBase_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxPropertyBase_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxPropertyBase >":
        return _ODA_Kernel_Py3.OdRxPropertyBase_createObject(*args)

    def isReadOnly(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxPropertyBase_isReadOnly(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxPropertyBase

# Register OdRxPropertyBase in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxPropertyBase_swigregister(OdRxPropertyBase)

def OdRxPropertyBase_cast(*args) -> "OdSmartPtr< OdRxPropertyBase >":
    return _ODA_Kernel_Py3.OdRxPropertyBase_cast(*args)

def OdRxPropertyBase_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxPropertyBase_desc(*args)

def OdRxPropertyBase_createObject(*args) -> "OdSmartPtr< OdRxPropertyBase >":
    return _ODA_Kernel_Py3.OdRxPropertyBase_createObject(*args)

class OdRxProperty(OdRxPropertyBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxProperty >":
        return _ODA_Kernel_Py3.OdRxProperty_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxProperty_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxProperty_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxProperty_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxProperty >":
        return _ODA_Kernel_Py3.OdRxProperty_createObject(*args)

    def getValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxProperty_getValue(self, *args)

    def setValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxProperty_setValue(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxProperty

# Register OdRxProperty in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxProperty_swigregister(OdRxProperty)

def OdRxProperty_cast(*args) -> "OdSmartPtr< OdRxProperty >":
    return _ODA_Kernel_Py3.OdRxProperty_cast(*args)

def OdRxProperty_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxProperty_desc(*args)

def OdRxProperty_createObject(*args) -> "OdSmartPtr< OdRxProperty >":
    return _ODA_Kernel_Py3.OdRxProperty_createObject(*args)

class OdRxPropertyOverrule(OdRxMemberOverrule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxPropertyOverrule >":
        return _ODA_Kernel_Py3.OdRxPropertyOverrule_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxPropertyOverrule_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxPropertyOverrule_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxPropertyOverrule_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxPropertyOverrule >":
        return _ODA_Kernel_Py3.OdRxPropertyOverrule_createObject(*args)

    def getValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxPropertyOverrule_getValue(self, *args)

    def setValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxPropertyOverrule_setValue(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxPropertyOverrule

# Register OdRxPropertyOverrule in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxPropertyOverrule_swigregister(OdRxPropertyOverrule)

def OdRxPropertyOverrule_cast(*args) -> "OdSmartPtr< OdRxPropertyOverrule >":
    return _ODA_Kernel_Py3.OdRxPropertyOverrule_cast(*args)

def OdRxPropertyOverrule_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxPropertyOverrule_desc(*args)

def OdRxPropertyOverrule_createObject(*args) -> "OdSmartPtr< OdRxPropertyOverrule >":
    return _ODA_Kernel_Py3.OdRxPropertyOverrule_createObject(*args)

class OdRxPromotingQueryContext(OdRxMemberQueryContext):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxPromotingQueryContext >":
        return _ODA_Kernel_Py3.OdRxPromotingQueryContext_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxPromotingQueryContext_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxPromotingQueryContext_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxPromotingQueryContext_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxPromotingQueryContext >":
        return _ODA_Kernel_Py3.OdRxPromotingQueryContext_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxPromotingQueryContext

# Register OdRxPromotingQueryContext in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxPromotingQueryContext_swigregister(OdRxPromotingQueryContext)

def OdRxPromotingQueryContext_cast(*args) -> "OdSmartPtr< OdRxPromotingQueryContext >":
    return _ODA_Kernel_Py3.OdRxPromotingQueryContext_cast(*args)

def OdRxPromotingQueryContext_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxPromotingQueryContext_desc(*args)

def OdRxPromotingQueryContext_createObject(*args) -> "OdSmartPtr< OdRxPromotingQueryContext >":
    return _ODA_Kernel_Py3.OdRxPromotingQueryContext_createObject(*args)

class OdRxValueIterator(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxValueIterator >":
        return _ODA_Kernel_Py3.OdRxValueIterator_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxValueIterator_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxValueIterator_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxValueIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxValueIterator >":
        return _ODA_Kernel_Py3.OdRxValueIterator_createObject(*args)

    def done(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxValueIterator_done(self, *args)

    def next(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxValueIterator_next(self, *args)

    def current(self, *args) -> "OdRxValue":
        return _ODA_Kernel_Py3.OdRxValueIterator_current(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxValueIterator

# Register OdRxValueIterator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxValueIterator_swigregister(OdRxValueIterator)

def OdRxValueIterator_cast(*args) -> "OdSmartPtr< OdRxValueIterator >":
    return _ODA_Kernel_Py3.OdRxValueIterator_cast(*args)

def OdRxValueIterator_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxValueIterator_desc(*args)

def OdRxValueIterator_createObject(*args) -> "OdSmartPtr< OdRxValueIterator >":
    return _ODA_Kernel_Py3.OdRxValueIterator_createObject(*args)

class OdRxCollectionProperty(OdRxPropertyBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxCollectionProperty >":
        return _ODA_Kernel_Py3.OdRxCollectionProperty_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxCollectionProperty_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxCollectionProperty_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxCollectionProperty_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxCollectionProperty >":
        return _ODA_Kernel_Py3.OdRxCollectionProperty_createObject(*args)

    def newValueIterator(self, *args) -> "OdRxValueIteratorPtr":
        return _ODA_Kernel_Py3.OdRxCollectionProperty_newValueIterator(self, *args)

    def tryGetCount(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxCollectionProperty_tryGetCount(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxCollectionProperty

# Register OdRxCollectionProperty in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxCollectionProperty_swigregister(OdRxCollectionProperty)

def OdRxCollectionProperty_cast(*args) -> "OdSmartPtr< OdRxCollectionProperty >":
    return _ODA_Kernel_Py3.OdRxCollectionProperty_cast(*args)

def OdRxCollectionProperty_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxCollectionProperty_desc(*args)

def OdRxCollectionProperty_createObject(*args) -> "OdSmartPtr< OdRxCollectionProperty >":
    return _ODA_Kernel_Py3.OdRxCollectionProperty_createObject(*args)

class OdRxCollectionPropertyOverrule(OdRxMemberOverrule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxCollectionPropertyOverrule >":
        return _ODA_Kernel_Py3.OdRxCollectionPropertyOverrule_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxCollectionPropertyOverrule_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxCollectionPropertyOverrule_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxCollectionPropertyOverrule_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxCollectionPropertyOverrule >":
        return _ODA_Kernel_Py3.OdRxCollectionPropertyOverrule_createObject(*args)

    def newValueIterator(self, *args) -> "OdRxValueIterator *":
        return _ODA_Kernel_Py3.OdRxCollectionPropertyOverrule_newValueIterator(self, *args)

    def tryGetCount(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxCollectionPropertyOverrule_tryGetCount(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxCollectionPropertyOverrule

# Register OdRxCollectionPropertyOverrule in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxCollectionPropertyOverrule_swigregister(OdRxCollectionPropertyOverrule)

def OdRxCollectionPropertyOverrule_cast(*args) -> "OdSmartPtr< OdRxCollectionPropertyOverrule >":
    return _ODA_Kernel_Py3.OdRxCollectionPropertyOverrule_cast(*args)

def OdRxCollectionPropertyOverrule_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxCollectionPropertyOverrule_desc(*args)

def OdRxCollectionPropertyOverrule_createObject(*args) -> "OdSmartPtr< OdRxCollectionPropertyOverrule >":
    return _ODA_Kernel_Py3.OdRxCollectionPropertyOverrule_createObject(*args)

class OdRxIndexedProperty(OdRxCollectionProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxIndexedProperty >":
        return _ODA_Kernel_Py3.OdRxIndexedProperty_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxIndexedProperty_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxIndexedProperty_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxIndexedProperty_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxIndexedProperty >":
        return _ODA_Kernel_Py3.OdRxIndexedProperty_createObject(*args)

    def getValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxIndexedProperty_getValue(self, *args)

    def setValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxIndexedProperty_setValue(self, *args)

    def insertValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxIndexedProperty_insertValue(self, *args)

    def removeValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxIndexedProperty_removeValue(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxIndexedProperty

# Register OdRxIndexedProperty in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxIndexedProperty_swigregister(OdRxIndexedProperty)

def OdRxIndexedProperty_cast(*args) -> "OdSmartPtr< OdRxIndexedProperty >":
    return _ODA_Kernel_Py3.OdRxIndexedProperty_cast(*args)

def OdRxIndexedProperty_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxIndexedProperty_desc(*args)

def OdRxIndexedProperty_createObject(*args) -> "OdSmartPtr< OdRxIndexedProperty >":
    return _ODA_Kernel_Py3.OdRxIndexedProperty_createObject(*args)

class OdRxDictionaryProperty(OdRxCollectionProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxDictionaryProperty >":
        return _ODA_Kernel_Py3.OdRxDictionaryProperty_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDictionaryProperty_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDictionaryProperty_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxDictionaryProperty_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxDictionaryProperty >":
        return _ODA_Kernel_Py3.OdRxDictionaryProperty_createObject(*args)

    def getValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxDictionaryProperty_getValue(self, *args)

    def setValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxDictionaryProperty_setValue(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxDictionaryProperty

# Register OdRxDictionaryProperty in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxDictionaryProperty_swigregister(OdRxDictionaryProperty)

def OdRxDictionaryProperty_cast(*args) -> "OdSmartPtr< OdRxDictionaryProperty >":
    return _ODA_Kernel_Py3.OdRxDictionaryProperty_cast(*args)

def OdRxDictionaryProperty_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxDictionaryProperty_desc(*args)

def OdRxDictionaryProperty_createObject(*args) -> "OdSmartPtr< OdRxDictionaryProperty >":
    return _ODA_Kernel_Py3.OdRxDictionaryProperty_createObject(*args)

class OdRxSubProperty(OdRxProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def isReadOnly(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxSubProperty_isReadOnly(self, *args)

    def subGetValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxSubProperty_subGetValue(self, *args)

    def subSetValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxSubProperty_subSetValue(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxSubProperty

# Register OdRxSubProperty in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxSubProperty_swigregister(OdRxSubProperty)

class OdRxSubPropertyOfIndexedProperty(OdRxIndexedProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def createObject(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRxSubPropertyOfIndexedProperty_createObject(*args)

    def subGetValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxSubPropertyOfIndexedProperty_subGetValue(self, *args)

    def subSetValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxSubPropertyOfIndexedProperty_subSetValue(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxSubPropertyOfIndexedProperty

# Register OdRxSubPropertyOfIndexedProperty in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxSubPropertyOfIndexedProperty_swigregister(OdRxSubPropertyOfIndexedProperty)

def OdRxSubPropertyOfIndexedProperty_createObject(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdRxSubPropertyOfIndexedProperty_createObject(*args)

class OdRxIndexedSubProperty(OdRxIndexedProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def createObject(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRxIndexedSubProperty_createObject(*args)

    def subGetValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxIndexedSubProperty_subGetValue(self, *args)

    def subSetValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxIndexedSubProperty_subSetValue(self, *args)

    def subInsertValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxIndexedSubProperty_subInsertValue(self, *args)

    def subRemoveValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxIndexedSubProperty_subRemoveValue(self, *args)

    def subNewValueIterator(self, *args) -> "OdRxValueIteratorPtr":
        return _ODA_Kernel_Py3.OdRxIndexedSubProperty_subNewValueIterator(self, *args)

    def subTryGetCount(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxIndexedSubProperty_subTryGetCount(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxIndexedSubProperty

# Register OdRxIndexedSubProperty in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxIndexedSubProperty_swigregister(OdRxIndexedSubProperty)

def OdRxIndexedSubProperty_createObject(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdRxIndexedSubProperty_createObject(*args)

eHT1 = _ODA_Kernel_Py3.eHT1
eHT2 = _ODA_Kernel_Py3.eHT2
eHT3 = _ODA_Kernel_Py3.eHT3
eCURRENT = _ODA_Kernel_Py3.eCURRENT
eDatabase = _ODA_Kernel_Py3.eDatabase
eModel = _ODA_Kernel_Py3.eModel
eBlock = _ODA_Kernel_Py3.eBlock
eBlockReference = _ODA_Kernel_Py3.eBlockReference
eEntity = _ODA_Kernel_Py3.eEntity
eHidden = _ODA_Kernel_Py3.eHidden
class PropertyInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.PropertyInfo_swiginit(self, _ODA_Kernel_Py3.new_PropertyInfo(*args))
    name = property(_ODA_Kernel_Py3.PropertyInfo_name_get, _ODA_Kernel_Py3.PropertyInfo_name_set)
    localizedName = property(_ODA_Kernel_Py3.PropertyInfo_localizedName_get, _ODA_Kernel_Py3.PropertyInfo_localizedName_set)
    uiPlacement = property(_ODA_Kernel_Py3.PropertyInfo_uiPlacement_get, _ODA_Kernel_Py3.PropertyInfo_uiPlacement_set)
    weight = property(_ODA_Kernel_Py3.PropertyInfo_weight_get, _ODA_Kernel_Py3.PropertyInfo_weight_set)
    value = property(_ODA_Kernel_Py3.PropertyInfo_value_get, _ODA_Kernel_Py3.PropertyInfo_value_set)
    subProperties = property(_ODA_Kernel_Py3.PropertyInfo_subProperties_get, _ODA_Kernel_Py3.PropertyInfo_subProperties_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PropertyInfo

# Register PropertyInfo in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PropertyInfo_swigregister(PropertyInfo)

class OdRxModelTreeBaseNode(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxModelTreeBaseNode >":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNode_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNode_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNode_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNode_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxModelTreeBaseNode >":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNode_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxModelTreeBaseNode

    def getNodeName(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNode_getNodeName(self, *args)

    def getUniqueSourceID(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNode_getUniqueSourceID(self, *args)

    def getUniqueDBID(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNode_getUniqueDBID(self, *args)

    def getNodeType(self, *args) -> "HierarchyTreeObjectType":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNode_getNodeType(self, *args)

    def getParents(self, *args) -> "OdRxModelTreeBaseNodeRawPtrArray const &":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNode_getParents(self, *args)

    def getChildren(self, *args) -> "OdRxModelTreeBaseNodePtrArray const &":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNode_getChildren(self, *args)

    def getProperties(self, *args) -> "OdArray< PropertyInfo > const &":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNode_getProperties(self, *args)

# Register OdRxModelTreeBaseNode in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxModelTreeBaseNode_swigregister(OdRxModelTreeBaseNode)

def OdRxModelTreeBaseNode_cast(*args) -> "OdSmartPtr< OdRxModelTreeBaseNode >":
    return _ODA_Kernel_Py3.OdRxModelTreeBaseNode_cast(*args)

def OdRxModelTreeBaseNode_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxModelTreeBaseNode_desc(*args)

def OdRxModelTreeBaseNode_createObject(*args) -> "OdSmartPtr< OdRxModelTreeBaseNode >":
    return _ODA_Kernel_Py3.OdRxModelTreeBaseNode_createObject(*args)

class OdBaseHierarchyTreeFiler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBaseHierarchyTreeFiler

    def rdBool(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_rdBool(self, *args)

    def rdDouble(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_rdDouble(self, *args)

    def rdInt8(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_rdInt8(self, *args)

    def rdUInt8(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_rdUInt8(self, *args)

    def rdInt16(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_rdInt16(self, *args)

    def rdUInt16(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_rdUInt16(self, *args)

    def rdInt32(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_rdInt32(self, *args)

    def rdUInt32(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_rdUInt32(self, *args)

    def rdInt64(self, *args) -> "OdInt64":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_rdInt64(self, *args)

    def rdUInt64(self, *args) -> "OdInt64":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_rdUInt64(self, *args)

    def rdString(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_rdString(self, *args)

    def rdAnsiString(self, *args) -> "OdAnsiString":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_rdAnsiString(self, *args)

    def rdGePoint2d(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_rdGePoint2d(self, *args)

    def rdGePoint3d(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_rdGePoint3d(self, *args)

    def rdGeVector2d(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_rdGeVector2d(self, *args)

    def rdGeVector3d(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_rdGeVector3d(self, *args)

    def rdCmEntityColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_rdCmEntityColor(self, *args)

    def rdCmTransparency(self, *args) -> "OdCmTransparency":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_rdCmTransparency(self, *args)

    def wrBool(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_wrBool(self, *args)

    def wrDouble(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_wrDouble(self, *args)

    def wrInt8(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_wrInt8(self, *args)

    def wrUInt8(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_wrUInt8(self, *args)

    def wrInt16(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_wrInt16(self, *args)

    def wrUInt16(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_wrUInt16(self, *args)

    def wrInt32(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_wrInt32(self, *args)

    def wrUInt32(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_wrUInt32(self, *args)

    def wrInt64(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_wrInt64(self, *args)

    def wrUInt64(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_wrUInt64(self, *args)

    def wrString(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_wrString(self, *args)

    def wrAnsiString(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_wrAnsiString(self, *args)

    def wrGePoint2d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_wrGePoint2d(self, *args)

    def wrGePoint3d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_wrGePoint3d(self, *args)

    def wrGeVector2d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_wrGeVector2d(self, *args)

    def wrGeVector3d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_wrGeVector3d(self, *args)

    def wrCmEntityColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_wrCmEntityColor(self, *args)

    def wrCmTransparency(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_wrCmTransparency(self, *args)

# Register OdBaseHierarchyTreeFiler in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBaseHierarchyTreeFiler_swigregister(OdBaseHierarchyTreeFiler)

class OdIBrEntity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrEntity

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrEntity_isEqualTo(self, *args)

    def isNull(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrEntity_isNull(self, *args)

    def isValid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrEntity_isValid(self, *args)

    def getBrep(self, *args) -> "OdIBrFile *":
        return _ODA_Kernel_Py3.OdIBrEntity_getBrep(self, *args)

    def checkEntity(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrEntity_checkEntity(self, *args)

    def getSubentPath(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrEntity_getSubentPath(self, *args)

    def getMassProps(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrEntity_getMassProps(self, *args)

    def getVolume(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrEntity_getVolume(self, *args)

    def getSurfaceArea(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrEntity_getSurfaceArea(self, *args)

    def getPerimeterLength(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrEntity_getPerimeterLength(self, *args)

    def getBoundBlock(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrEntity_getBoundBlock(self, *args)

    def getPointContainment(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrEntity_getPointContainment(self, *args)

    def getLineContainment(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrEntity_getLineContainment(self, *args)

    def getFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdIBrEntity_getFlags(self, *args)

    def getGsMarker(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrEntity_getGsMarker(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdIBrEntity_swiginit(self, _ODA_Kernel_Py3.new_OdIBrEntity(*args))

# Register OdIBrEntity in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrEntity_swigregister(OdIBrEntity)

class OdIBrMeshEntity(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getEntityAssociated(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrMeshEntity_getEntityAssociated(self, *args)

    def brepChanged(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrMeshEntity_brepChanged(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrMeshEntity

# Register OdIBrMeshEntity in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrMeshEntity_swigregister(OdIBrMeshEntity)

class OdGeSplineEnt2d(OdGeCurve2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isRational(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeSplineEnt2d_isRational(self, *args)

    def degree(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeSplineEnt2d_degree(self, *args)

    def order(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeSplineEnt2d_order(self, *args)

    def numKnots(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeSplineEnt2d_numKnots(self, *args)

    def knots(self, *args) -> "OdGeKnotVector const &":
        return _ODA_Kernel_Py3.OdGeSplineEnt2d_knots(self, *args)

    def numControlPoints(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeSplineEnt2d_numControlPoints(self, *args)

    def continuityAtKnot(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeSplineEnt2d_continuityAtKnot(self, *args)

    def startParam(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeSplineEnt2d_startParam(self, *args)

    def endParam(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeSplineEnt2d_endParam(self, *args)

    def startPoint(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeSplineEnt2d_startPoint(self, *args)

    def endPoint(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeSplineEnt2d_endPoint(self, *args)

    def hasFitData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeSplineEnt2d_hasFitData(self, *args)

    def knotAt(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeSplineEnt2d_knotAt(self, *args)

    def setKnotAt(self, *args) -> "OdGeSplineEnt2d &":
        return _ODA_Kernel_Py3.OdGeSplineEnt2d_setKnotAt(self, *args)

    def controlPointAt(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeSplineEnt2d_controlPointAt(self, *args)

    def setControlPointAt(self, *args) -> "OdGeSplineEnt2d &":
        return _ODA_Kernel_Py3.OdGeSplineEnt2d_setControlPointAt(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeSplineEnt2d

# Register OdGeSplineEnt2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeSplineEnt2d_swigregister(OdGeSplineEnt2d)

class OdGeLineSeg2d(OdGeLinearEnt2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeLineSeg2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeLineSeg2d(*args))

    def set(self, *args) -> "OdGeLineSeg2d &":
        return _ODA_Kernel_Py3.OdGeLineSeg2d_set(self, *args)

    def getBisector(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeLineSeg2d_getBisector(self, *args)

    def baryComb(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeLineSeg2d_baryComb(self, *args)

    def startPoint(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeLineSeg2d_startPoint(self, *args)

    def endPoint(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeLineSeg2d_endPoint(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeLineSeg2d

# Register OdGeLineSeg2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeLineSeg2d_swigregister(OdGeLineSeg2d)

class OdAuxData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdAuxData_swiginit(self, _ODA_Kernel_Py3.new_OdAuxData(*args))

    def getPtr(self, *args) -> "void const *":
        return _ODA_Kernel_Py3.OdAuxData_getPtr(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdAuxData

# Register OdAuxData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdAuxData_swigregister(OdAuxData)

class Data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _n = property(_ODA_Kernel_Py3.Data__n_get, _ODA_Kernel_Py3.Data__n_set)
    _p = property(_ODA_Kernel_Py3.Data__p_get, _ODA_Kernel_Py3.Data__p_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.Data_swiginit(self, _ODA_Kernel_Py3.new_Data(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_Data

# Register Data in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.Data_swigregister(Data)

kOdDbIdAllBits = _ODA_Kernel_Py3.kOdDbIdAllBits
class OdTfAttributesContainer(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdTfAttributesContainer >":
        return _ODA_Kernel_Py3.OdTfAttributesContainer_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdTfAttributesContainer_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdTfAttributesContainer_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdTfAttributesContainer_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdTfAttributesContainer >":
        return _ODA_Kernel_Py3.OdTfAttributesContainer_createObject(*args)

    def owner(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdTfAttributesContainer_owner(self, *args)

    def find(self, *args) -> "OdTfAttribute const *":
        return _ODA_Kernel_Py3.OdTfAttributesContainer_find(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdTfAttributesContainer

# Register OdTfAttributesContainer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdTfAttributesContainer_swigregister(OdTfAttributesContainer)

def OdTfAttributesContainer_cast(*args) -> "OdSmartPtr< OdTfAttributesContainer >":
    return _ODA_Kernel_Py3.OdTfAttributesContainer_cast(*args)

def OdTfAttributesContainer_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdTfAttributesContainer_desc(*args)

def OdTfAttributesContainer_createObject(*args) -> "OdSmartPtr< OdTfAttributesContainer >":
    return _ODA_Kernel_Py3.OdTfAttributesContainer_createObject(*args)

class OdTfPropertiesContainer(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdTfPropertiesContainer >":
        return _ODA_Kernel_Py3.OdTfPropertiesContainer_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdTfPropertiesContainer_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdTfPropertiesContainer_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdTfPropertiesContainer_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdTfPropertiesContainer >":
        return _ODA_Kernel_Py3.OdTfPropertiesContainer_createObject(*args)

    def owner(self, *args) -> "OdTfClass *":
        return _ODA_Kernel_Py3.OdTfPropertiesContainer_owner(self, *args)

    def size(self, *args) -> "OdTfPropertiesContainer::size_type":
        return _ODA_Kernel_Py3.OdTfPropertiesContainer_size(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTfPropertiesContainer_contains(self, *args)

    def find(self, *args) -> "OdTfProperty const *":
        return _ODA_Kernel_Py3.OdTfPropertiesContainer_find(self, *args)

    def index(self, *args) -> "OdTfPropertiesContainer::size_type":
        return _ODA_Kernel_Py3.OdTfPropertiesContainer_index(self, *args)

    def unique(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTfPropertiesContainer_unique(self, *args)

    def iterator(self, *args) -> "OdRxIteratorPtr":
        return _ODA_Kernel_Py3.OdTfPropertiesContainer_iterator(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdTfPropertiesContainer

# Register OdTfPropertiesContainer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdTfPropertiesContainer_swigregister(OdTfPropertiesContainer)

def OdTfPropertiesContainer_cast(*args) -> "OdSmartPtr< OdTfPropertiesContainer >":
    return _ODA_Kernel_Py3.OdTfPropertiesContainer_cast(*args)

def OdTfPropertiesContainer_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdTfPropertiesContainer_desc(*args)

def OdTfPropertiesContainer_createObject(*args) -> "OdSmartPtr< OdTfPropertiesContainer >":
    return _ODA_Kernel_Py3.OdTfPropertiesContainer_createObject(*args)

class OdTfClass(OdRxClass):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdTfClass >":
        return _ODA_Kernel_Py3.OdTfClass_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdTfClass_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdTfClass_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdTfClass_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdTfClass >":
        return _ODA_Kernel_Py3.OdTfClass_createObject(*args)

    @staticmethod
    def rxInit(*args) -> "void":
        return _ODA_Kernel_Py3.OdTfClass_rxInit(*args)

    @staticmethod
    def rxUninit(*args) -> "void":
        return _ODA_Kernel_Py3.OdTfClass_rxUninit(*args)

    def attributes(self, *args) -> "OdTfAttributesContainerPtr const":
        return _ODA_Kernel_Py3.OdTfClass_attributes(self, *args)

    def properties(self, *args) -> "OdTfPropertiesContainerPtr const":
        return _ODA_Kernel_Py3.OdTfClass_properties(self, *args)

    def allProperties(self, *args) -> "OdTfPropertiesContainerPtr const":
        return _ODA_Kernel_Py3.OdTfClass_allProperties(self, *args)

    def tfParent(self, *args) -> "OdTfClass *":
        return _ODA_Kernel_Py3.OdTfClass_tfParent(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdTfClass

# Register OdTfClass in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdTfClass_swigregister(OdTfClass)

def OdTfClass_cast(*args) -> "OdSmartPtr< OdTfClass >":
    return _ODA_Kernel_Py3.OdTfClass_cast(*args)

def OdTfClass_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdTfClass_desc(*args)

def OdTfClass_createObject(*args) -> "OdSmartPtr< OdTfClass >":
    return _ODA_Kernel_Py3.OdTfClass_createObject(*args)

def OdTfClass_rxInit(*args) -> "void":
    return _ODA_Kernel_Py3.OdTfClass_rxInit(*args)

def OdTfClass_rxUninit(*args) -> "void":
    return _ODA_Kernel_Py3.OdTfClass_rxUninit(*args)

class OdTfProperty(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdTfProperty >":
        return _ODA_Kernel_Py3.OdTfProperty_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdTfProperty_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdTfProperty_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdTfProperty_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdTfProperty >":
        return _ODA_Kernel_Py3.OdTfProperty_createObject(*args)

    def owner(self, *args) -> "OdTfClass *":
        return _ODA_Kernel_Py3.OdTfProperty_owner(self, *args)

    def type(self, *args) -> "OdTfVariant::Type":
        return _ODA_Kernel_Py3.OdTfProperty_type(self, *args)

    def name(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdTfProperty_name(self, *args)

    def attributes(self, *args) -> "OdTfAttributesContainerPtr":
        return _ODA_Kernel_Py3.OdTfProperty_attributes(self, *args)

    def defaultItemValue(self, *args) -> "OdTfVariant":
        return _ODA_Kernel_Py3.OdTfProperty_defaultItemValue(self, *args)

    def getValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdTfProperty_getValue(self, *args)

    def setValue(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdTfProperty_setValue(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdTfProperty

# Register OdTfProperty in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdTfProperty_swigregister(OdTfProperty)

def OdTfProperty_cast(*args) -> "OdSmartPtr< OdTfProperty >":
    return _ODA_Kernel_Py3.OdTfProperty_cast(*args)

def OdTfProperty_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdTfProperty_desc(*args)

def OdTfProperty_createObject(*args) -> "OdSmartPtr< OdTfProperty >":
    return _ODA_Kernel_Py3.OdTfProperty_createObject(*args)

class OdTfAttribute(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdTfAttribute >":
        return _ODA_Kernel_Py3.OdTfAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdTfAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdTfAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdTfAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdTfAttribute >":
        return _ODA_Kernel_Py3.OdTfAttribute_createObject(*args)

    def owner(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdTfAttribute_owner(self, *args)

    def name(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdTfAttribute_name(self, *args)

    def value(self, *args) -> "OdTfVariant":
        return _ODA_Kernel_Py3.OdTfAttribute_value(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdTfAttribute

# Register OdTfAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdTfAttribute_swigregister(OdTfAttribute)

def OdTfAttribute_cast(*args) -> "OdSmartPtr< OdTfAttribute >":
    return _ODA_Kernel_Py3.OdTfAttribute_cast(*args)

def OdTfAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdTfAttribute_desc(*args)

def OdTfAttribute_createObject(*args) -> "OdSmartPtr< OdTfAttribute >":
    return _ODA_Kernel_Py3.OdTfAttribute_createObject(*args)

class OdTfObject(OdGiDrawable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdTfObject >":
        return _ODA_Kernel_Py3.OdTfObject_cast(*args)

    @staticmethod
    def desc(*args) -> "OdTfClass *":
        return _ODA_Kernel_Py3.OdTfObject_desc(*args)

    def isA(self, *args) -> "OdTfClass *":
        return _ODA_Kernel_Py3.OdTfObject_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdTfObject_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdTfObject >":
        return _ODA_Kernel_Py3.OdTfObject_createObject(*args)

    def getOwner(self, *args) -> "OdTfObject const *":
        return _ODA_Kernel_Py3.OdTfObject_getOwner(self, *args)

    def getProperty(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdTfObject_getProperty(self, *args)

    def setProperty(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdTfObject_setProperty(self, *args)

    def addReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfObject_addReactor(self, *args)

    def removeReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfObject_removeReactor(self, *args)

    def addPersistentReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfObject_addPersistentReactor(self, *args)

    def removePersistentReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfObject_removePersistentReactor(self, *args)

    def hasPersistentReactor(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTfObject_hasPersistentReactor(self, *args)

    def getPersistentReactors(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfObject_getPersistentReactors(self, *args)

    def getTransientReactors(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfObject_getTransientReactors(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdTfObject

# Register OdTfObject in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdTfObject_swigregister(OdTfObject)

def OdTfObject_cast(*args) -> "OdSmartPtr< OdTfObject >":
    return _ODA_Kernel_Py3.OdTfObject_cast(*args)

def OdTfObject_desc(*args) -> "OdTfClass *":
    return _ODA_Kernel_Py3.OdTfObject_desc(*args)

def OdTfObject_createObject(*args) -> "OdSmartPtr< OdTfObject >":
    return _ODA_Kernel_Py3.OdTfObject_createObject(*args)


def newOdTfClass(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.newOdTfClass(*args)

def createOdTfClass(*args) -> "OdTfClass *":
    return _ODA_Kernel_Py3.createOdTfClass(*args)

def initOdTfClass(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.initOdTfClass(*args)

def newOdTfProperty(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.newOdTfProperty(*args)

def createOdTfProperty(*args) -> "OdTfProperty *":
    return _ODA_Kernel_Py3.createOdTfProperty(*args)

def initOdTfProperty(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.initOdTfProperty(*args)

def newOdTfAttribute(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.newOdTfAttribute(*args)
class OdGeRay3d(OdGeLinearEnt3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeRay3d_swiginit(self, _ODA_Kernel_Py3.new_OdGeRay3d(*args))

    def set(self, *args) -> "OdGeRay3d &":
        return _ODA_Kernel_Py3.OdGeRay3d_set(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeRay3d

# Register OdGeRay3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeRay3d_swigregister(OdGeRay3d)

class OdSiShapePlane(OdSiShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_pointOnPlane = property(_ODA_Kernel_Py3.OdSiShapePlane_m_pointOnPlane_get, _ODA_Kernel_Py3.OdSiShapePlane_m_pointOnPlane_set)
    m_planeNormal = property(_ODA_Kernel_Py3.OdSiShapePlane_m_planeNormal_get, _ODA_Kernel_Py3.OdSiShapePlane_m_planeNormal_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdSiShapePlane_swiginit(self, _ODA_Kernel_Py3.new_OdSiShapePlane(*args))

    def signedDistanceTo(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdSiShapePlane_signedDistanceTo(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSiShapePlane_contains(self, *args)

    def intersects(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSiShapePlane_intersects(self, *args)

    def clone(self, *args) -> "OdSiShape *":
        return _ODA_Kernel_Py3.OdSiShapePlane_clone(self, *args)

    def transform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiShapePlane_transform(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdSiShapePlane

# Register OdSiShapePlane in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdSiShapePlane_swigregister(OdSiShapePlane)

class OdSiHalfSpace(OdSiShapePlane):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdSiHalfSpace_swiginit(self, _ODA_Kernel_Py3.new_OdSiHalfSpace(*args))

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiHalfSpace_copyFrom(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSiHalfSpace_contains(self, *args)

    def clone(self, *args) -> "OdSiShape *":
        return _ODA_Kernel_Py3.OdSiHalfSpace_clone(self, *args)

    def intersects(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSiHalfSpace_intersects(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdSiHalfSpace

# Register OdSiHalfSpace in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdSiHalfSpace_swigregister(OdSiHalfSpace)

class OdRxDLinkerReactor(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxDLinkerReactor >":
        return _ODA_Kernel_Py3.OdRxDLinkerReactor_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDLinkerReactor_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDLinkerReactor_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxDLinkerReactor_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxDLinkerReactor >":
        return _ODA_Kernel_Py3.OdRxDLinkerReactor_createObject(*args)

    def rxAppWillBeLoaded(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxDLinkerReactor_rxAppWillBeLoaded(self, *args)

    def rxAppLoaded(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxDLinkerReactor_rxAppLoaded(self, *args)

    def rxAppLoadAborted(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxDLinkerReactor_rxAppLoadAborted(self, *args)

    def rxAppWillBeUnloaded(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxDLinkerReactor_rxAppWillBeUnloaded(self, *args)

    def rxAppUnloaded(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxDLinkerReactor_rxAppUnloaded(self, *args)

    def rxAppUnloadAborted(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxDLinkerReactor_rxAppUnloadAborted(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxDLinkerReactor

# Register OdRxDLinkerReactor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxDLinkerReactor_swigregister(OdRxDLinkerReactor)

def OdRxDLinkerReactor_cast(*args) -> "OdSmartPtr< OdRxDLinkerReactor >":
    return _ODA_Kernel_Py3.OdRxDLinkerReactor_cast(*args)

def OdRxDLinkerReactor_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxDLinkerReactor_desc(*args)

def OdRxDLinkerReactor_createObject(*args) -> "OdSmartPtr< OdRxDLinkerReactor >":
    return _ODA_Kernel_Py3.OdRxDLinkerReactor_createObject(*args)

kTxds = _ODA_Kernel_Py3.kTxds
kTsbf = _ODA_Kernel_Py3.kTsbf
class OdTfSchemaManagerInterface(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def registerSchema(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTfSchemaManagerInterface_registerSchema(self, *args)

    def convertSchema(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfSchemaManagerInterface_convertSchema(self, *args)

    def unloadSchema(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfSchemaManagerInterface_unloadSchema(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdTfSchemaManagerInterface

# Register OdTfSchemaManagerInterface in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdTfSchemaManagerInterface_swigregister(OdTfSchemaManagerInterface)

class OdByteData(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdByteData_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdByteData_queryX(self, *args)

    def readAt(self, *args) -> "OdByteData::SizeType":
        return _ODA_Kernel_Py3.OdByteData_readAt(self, *args)

    def writeAt(self, *args) -> "OdByteData::SizeType":
        return _ODA_Kernel_Py3.OdByteData_writeAt(self, *args)

    def size(self, *args) -> "OdByteData::SizeType":
        return _ODA_Kernel_Py3.OdByteData_size(self, *args)

    def resize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdByteData_resize(self, *args)

    def flush(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdByteData_flush(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdByteData

# Register OdByteData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdByteData_swigregister(OdByteData)

class OdOleStorageError(OdError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdOleStorageError_swiginit(self, _ODA_Kernel_Py3.new_OdOleStorageError(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdOleStorageError

# Register OdOleStorageError in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdOleStorageError_swigregister(OdOleStorageError)

class OdOleStorage(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdOleStorage_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdOleStorage_queryX(self, *args)

    def init(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdOleStorage_init(self, *args)

    def rawData(self, *args) -> "OdByteDataPtr":
        return _ODA_Kernel_Py3.OdOleStorage_rawData(self, *args)

    def openStream(self, *args) -> "OdStreamBufPtr":
        return _ODA_Kernel_Py3.OdOleStorage_openStream(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdOleStorage

# Register OdOleStorage in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdOleStorage_swigregister(OdOleStorage)

class OdOleItemInitStream(OdStreamBuf):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdOleItemInitStream >":
        return _ODA_Kernel_Py3.OdOleItemInitStream_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdOleItemInitStream_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdOleItemInitStream_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdOleItemInitStream_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdOleItemInitStream >":
        return _ODA_Kernel_Py3.OdOleItemInitStream_createObject(*args)

    def frameId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdOleItemInitStream_frameId(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdOleItemInitStream

# Register OdOleItemInitStream in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdOleItemInitStream_swigregister(OdOleItemInitStream)

def OdOleItemInitStream_cast(*args) -> "OdSmartPtr< OdOleItemInitStream >":
    return _ODA_Kernel_Py3.OdOleItemInitStream_cast(*args)

def OdOleItemInitStream_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdOleItemInitStream_desc(*args)

def OdOleItemInitStream_createObject(*args) -> "OdSmartPtr< OdOleItemInitStream >":
    return _ODA_Kernel_Py3.OdOleItemInitStream_createObject(*args)

class OdOleItemHandler(OdGiSelfGdiDrawable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdOleItemHandler >":
        return _ODA_Kernel_Py3.OdOleItemHandler_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdOleItemHandler_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdOleItemHandler_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdOleItemHandler_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdOleItemHandler >":
        return _ODA_Kernel_Py3.OdOleItemHandler_createObject(*args)

    def load(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdOleItemHandler_load(self, *args)

    def save(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdOleItemHandler_save(self, *args)

    def getCompoundDocumentDataSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdOleItemHandler_getCompoundDocumentDataSize(self, *args)

    def getCompoundDocument(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdOleItemHandler_getCompoundDocument(self, *args)

    def setCompoundDocument(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdOleItemHandler_setCompoundDocument(self, *args)
    kUnknown = _ODA_Kernel_Py3.OdOleItemHandler_kUnknown
    kLink = _ODA_Kernel_Py3.OdOleItemHandler_kLink
    kEmbedded = _ODA_Kernel_Py3.OdOleItemHandler_kEmbedded
    kStatic = _ODA_Kernel_Py3.OdOleItemHandler_kStatic

    def type(self, *args) -> "OdOleItemHandler::Type":
        return _ODA_Kernel_Py3.OdOleItemHandler_type(self, *args)
    kContent = _ODA_Kernel_Py3.OdOleItemHandler_kContent
    kThumbnail = _ODA_Kernel_Py3.OdOleItemHandler_kThumbnail
    kIcon = _ODA_Kernel_Py3.OdOleItemHandler_kIcon
    kDocPrint = _ODA_Kernel_Py3.OdOleItemHandler_kDocPrint

    def drawAspect(self, *args) -> "OdOleItemHandler::DvAspect":
        return _ODA_Kernel_Py3.OdOleItemHandler_drawAspect(self, *args)

    def linkName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdOleItemHandler_linkName(self, *args)

    def linkPath(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdOleItemHandler_linkPath(self, *args)

    def userType(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdOleItemHandler_userType(self, *args)

    def setDrawAspect(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdOleItemHandler_setDrawAspect(self, *args)
    kMonochrome = _ODA_Kernel_Py3.OdOleItemHandler_kMonochrome
    kLowGraphics = _ODA_Kernel_Py3.OdOleItemHandler_kLowGraphics
    kHighGraphics = _ODA_Kernel_Py3.OdOleItemHandler_kHighGraphics
    kAutomatic = _ODA_Kernel_Py3.OdOleItemHandler_kAutomatic

    def outputQuality(self, *args) -> "OdOleItemHandler::PlotQuality":
        return _ODA_Kernel_Py3.OdOleItemHandler_outputQuality(self, *args)

    def setOutputQuality(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdOleItemHandler_setOutputQuality(self, *args)

    def getOleClientItem(self, *args) -> "COleClientItem *":
        return _ODA_Kernel_Py3.OdOleItemHandler_getOleClientItem(self, *args)

    def embedRaster(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdOleItemHandler_embedRaster(self, *args)

    def getRaster(self, *args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdOleItemHandler_getRaster(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdOleItemHandler

# Register OdOleItemHandler in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdOleItemHandler_swigregister(OdOleItemHandler)

def OdOleItemHandler_cast(*args) -> "OdSmartPtr< OdOleItemHandler >":
    return _ODA_Kernel_Py3.OdOleItemHandler_cast(*args)

def OdOleItemHandler_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdOleItemHandler_desc(*args)

def OdOleItemHandler_createObject(*args) -> "OdSmartPtr< OdOleItemHandler >":
    return _ODA_Kernel_Py3.OdOleItemHandler_createObject(*args)

class OdRxDynamicLinker(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxDynamicLinker >":
        return _ODA_Kernel_Py3.OdRxDynamicLinker_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDynamicLinker_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDynamicLinker_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxDynamicLinker_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxDynamicLinker >":
        return _ODA_Kernel_Py3.OdRxDynamicLinker_createObject(*args)

    def addReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxDynamicLinker_addReactor(self, *args)

    def removeReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxDynamicLinker_removeReactor(self, *args)

    def loadModule(self, *args) -> "OdRxModulePtr":
        return _ODA_Kernel_Py3.OdRxDynamicLinker_loadModule(self, *args)

    def unloadModule(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxDynamicLinker_unloadModule(self, *args)

    def unloadUnreferenced(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxDynamicLinker_unloadUnreferenced(self, *args)

    def loadApp(self, *args) -> "OdRxModulePtr":
        return _ODA_Kernel_Py3.OdRxDynamicLinker_loadApp(self, *args)

    def sysServices(self, *args) -> "OdRxSystemServicesPtr":
        return _ODA_Kernel_Py3.OdRxDynamicLinker_sysServices(self, *args)

    def sysRegistry(self, *args) -> "OdRxDictionaryPtr":
        return _ODA_Kernel_Py3.OdRxDynamicLinker_sysRegistry(self, *args)

    def loadModuleObj(self, *args) -> "OdRxModule *":
        return _ODA_Kernel_Py3.OdRxDynamicLinker_loadModuleObj(self, *args)

    def getModuleCount(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdRxDynamicLinker_getModuleCount(self, *args)

    def getModule(self, *args) -> "OdRxModulePtr":
        return _ODA_Kernel_Py3.OdRxDynamicLinker_getModule(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxDynamicLinker

# Register OdRxDynamicLinker in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxDynamicLinker_swigregister(OdRxDynamicLinker)

def OdRxDynamicLinker_cast(*args) -> "OdSmartPtr< OdRxDynamicLinker >":
    return _ODA_Kernel_Py3.OdRxDynamicLinker_cast(*args)

def OdRxDynamicLinker_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxDynamicLinker_desc(*args)

def OdRxDynamicLinker_createObject(*args) -> "OdSmartPtr< OdRxDynamicLinker >":
    return _ODA_Kernel_Py3.OdRxDynamicLinker_createObject(*args)


def odrxDynamicLinker(*args) -> "OdRxDynamicLinker *":
    return _ODA_Kernel_Py3.odrxDynamicLinker(*args)

def odrxLoadApp(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.odrxLoadApp(*args)

def odrxSafeLoadApp(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.odrxSafeLoadApp(*args)
class OdMemoryStreamDummyBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdMemoryStreamDummyBase_swiginit(self, _ODA_Kernel_Py3.new_OdMemoryStreamDummyBase(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdMemoryStreamDummyBase

# Register OdMemoryStreamDummyBase in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdMemoryStreamDummyBase_swigregister(OdMemoryStreamDummyBase)

class OdGsRenderEnvironmentProperties(OdGsProperties):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsRenderEnvironmentProperties >":
        return _ODA_Kernel_Py3.OdGsRenderEnvironmentProperties_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsRenderEnvironmentProperties_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsRenderEnvironmentProperties_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsRenderEnvironmentProperties_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsRenderEnvironmentProperties >":
        return _ODA_Kernel_Py3.OdGsRenderEnvironmentProperties_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsRenderEnvironmentProperties

    def renderEnvironmentTraitsData(self, *args) -> "OdGiRenderEnvironmentTraitsData *":
        return _ODA_Kernel_Py3.OdGsRenderEnvironmentProperties_renderEnvironmentTraitsData(self, *args)

    def isTraitsModified(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsRenderEnvironmentProperties_isTraitsModified(self, *args)

    def clearTraits(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsRenderEnvironmentProperties_clearTraits(self, *args)

    def propertiesType(self, *args) -> "OdGsProperties::PropertiesType":
        return _ODA_Kernel_Py3.OdGsRenderEnvironmentProperties_propertiesType(self, *args)

    def propertiesForType(self, *args) -> "OdSmartPtr< OdGsProperties >":
        return _ODA_Kernel_Py3.OdGsRenderEnvironmentProperties_propertiesForType(self, *args)

    def update(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsRenderEnvironmentProperties_update(self, *args)

    def display(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsRenderEnvironmentProperties_display(self, *args)

# Register OdGsRenderEnvironmentProperties in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsRenderEnvironmentProperties_swigregister(OdGsRenderEnvironmentProperties)

def OdGsRenderEnvironmentProperties_cast(*args) -> "OdSmartPtr< OdGsRenderEnvironmentProperties >":
    return _ODA_Kernel_Py3.OdGsRenderEnvironmentProperties_cast(*args)

def OdGsRenderEnvironmentProperties_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsRenderEnvironmentProperties_desc(*args)

def OdGsRenderEnvironmentProperties_createObject(*args) -> "OdSmartPtr< OdGsRenderEnvironmentProperties >":
    return _ODA_Kernel_Py3.OdGsRenderEnvironmentProperties_createObject(*args)

class OdGsRenderSettingsProperties(OdGsProperties):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsRenderSettingsProperties >":
        return _ODA_Kernel_Py3.OdGsRenderSettingsProperties_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsRenderSettingsProperties_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsRenderSettingsProperties_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsRenderSettingsProperties_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsRenderSettingsProperties >":
        return _ODA_Kernel_Py3.OdGsRenderSettingsProperties_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsRenderSettingsProperties

    def renderSettingsTraitsData(self, *args) -> "OdGiRenderSettingsTraitsData *":
        return _ODA_Kernel_Py3.OdGsRenderSettingsProperties_renderSettingsTraitsData(self, *args)

    def hasMentalRayRenderSettings(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsRenderSettingsProperties_hasMentalRayRenderSettings(self, *args)

    def mentalRayRenderSettingsTraitsData(self, *args) -> "OdGiMentalRayRenderSettingsTraitsData *":
        return _ODA_Kernel_Py3.OdGsRenderSettingsProperties_mentalRayRenderSettingsTraitsData(self, *args)

    def hasRapidRTRenderSettings(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsRenderSettingsProperties_hasRapidRTRenderSettings(self, *args)

    def rapidRTRenderSettingsTraitsData(self, *args) -> "OdGiRapidRTRenderSettingsTraitsData *":
        return _ODA_Kernel_Py3.OdGsRenderSettingsProperties_rapidRTRenderSettingsTraitsData(self, *args)

    def isTraitsModified(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsRenderSettingsProperties_isTraitsModified(self, *args)

    def clearTraits(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsRenderSettingsProperties_clearTraits(self, *args)

    def propertiesType(self, *args) -> "OdGsProperties::PropertiesType":
        return _ODA_Kernel_Py3.OdGsRenderSettingsProperties_propertiesType(self, *args)

    def propertiesForType(self, *args) -> "OdSmartPtr< OdGsProperties >":
        return _ODA_Kernel_Py3.OdGsRenderSettingsProperties_propertiesForType(self, *args)

    def update(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsRenderSettingsProperties_update(self, *args)

    def display(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsRenderSettingsProperties_display(self, *args)

# Register OdGsRenderSettingsProperties in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsRenderSettingsProperties_swigregister(OdGsRenderSettingsProperties)

def OdGsRenderSettingsProperties_cast(*args) -> "OdSmartPtr< OdGsRenderSettingsProperties >":
    return _ODA_Kernel_Py3.OdGsRenderSettingsProperties_cast(*args)

def OdGsRenderSettingsProperties_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsRenderSettingsProperties_desc(*args)

def OdGsRenderSettingsProperties_createObject(*args) -> "OdSmartPtr< OdGsRenderSettingsProperties >":
    return _ODA_Kernel_Py3.OdGsRenderSettingsProperties_createObject(*args)

class OdGsVisualStyleProperties(OdGsProperties):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsVisualStyleProperties >":
        return _ODA_Kernel_Py3.OdGsVisualStyleProperties_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsVisualStyleProperties_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsVisualStyleProperties_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsVisualStyleProperties_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsVisualStyleProperties >":
        return _ODA_Kernel_Py3.OdGsVisualStyleProperties_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsVisualStyleProperties

    def visualStyleTraitsData(self, *args) -> "OdGiVisualStyleTraitsData *":
        return _ODA_Kernel_Py3.OdGsVisualStyleProperties_visualStyleTraitsData(self, *args)

    def isTraitsModified(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsVisualStyleProperties_isTraitsModified(self, *args)

    def clearTraits(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsVisualStyleProperties_clearTraits(self, *args)

    def propertiesType(self, *args) -> "OdGsProperties::PropertiesType":
        return _ODA_Kernel_Py3.OdGsVisualStyleProperties_propertiesType(self, *args)

    def propertiesForType(self, *args) -> "OdSmartPtr< OdGsProperties >":
        return _ODA_Kernel_Py3.OdGsVisualStyleProperties_propertiesForType(self, *args)

    def update(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsVisualStyleProperties_update(self, *args)

    def display(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsVisualStyleProperties_display(self, *args)

# Register OdGsVisualStyleProperties in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsVisualStyleProperties_swigregister(OdGsVisualStyleProperties)

def OdGsVisualStyleProperties_cast(*args) -> "OdSmartPtr< OdGsVisualStyleProperties >":
    return _ODA_Kernel_Py3.OdGsVisualStyleProperties_cast(*args)

def OdGsVisualStyleProperties_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsVisualStyleProperties_desc(*args)

def OdGsVisualStyleProperties_createObject(*args) -> "OdSmartPtr< OdGsVisualStyleProperties >":
    return _ODA_Kernel_Py3.OdGsVisualStyleProperties_createObject(*args)

class OdGsBackgroundProperties(OdGsProperties):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsBackgroundProperties >":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsBackgroundProperties >":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsBackgroundProperties

    def solidBackgroundTraitsData(self, *args) -> "OdGiSolidBackgroundTraitsData *":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_solidBackgroundTraitsData(self, *args)

    def gradientBackgroundTraitsData(self, *args) -> "OdGiGradientBackgroundTraitsData *":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_gradientBackgroundTraitsData(self, *args)

    def imageBackgroundTraitsData(self, *args) -> "OdGiImageBackgroundTraitsData *":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_imageBackgroundTraitsData(self, *args)

    def groundPlaneBackgroundTraitsData(self, *args) -> "OdGiGroundPlaneBackgroundTraitsData *":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_groundPlaneBackgroundTraitsData(self, *args)

    def skyBackgroundTraitsData(self, *args) -> "OdGiSkyBackgroundTraitsData *":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_skyBackgroundTraitsData(self, *args)

    def iblBackgroundTraitsData(self, *args) -> "OdGiIBLBackgroundTraitsData *":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_iblBackgroundTraitsData(self, *args)

    def backgroundTraitsData(self, *args) -> "OdGiBackgroundTraitsData *":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_backgroundTraitsData(self, *args)

    def backgroundType(self, *args) -> "OdGiDrawable::DrawableType":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_backgroundType(self, *args)

    def secondaryBackground(self, *args) -> "OdGsBackgroundProperties *":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_secondaryBackground(self, *args)

    def isTraitsModified(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_isTraitsModified(self, *args)

    def clearTraits(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_clearTraits(self, *args)

    def propertiesType(self, *args) -> "OdGsProperties::PropertiesType":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_propertiesType(self, *args)

    def propertiesForType(self, *args) -> "OdSmartPtr< OdGsProperties >":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_propertiesForType(self, *args)

    def update(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_update(self, *args)

    def display(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBackgroundProperties_display(self, *args)

# Register OdGsBackgroundProperties in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsBackgroundProperties_swigregister(OdGsBackgroundProperties)

def OdGsBackgroundProperties_cast(*args) -> "OdSmartPtr< OdGsBackgroundProperties >":
    return _ODA_Kernel_Py3.OdGsBackgroundProperties_cast(*args)

def OdGsBackgroundProperties_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsBackgroundProperties_desc(*args)

def OdGsBackgroundProperties_createObject(*args) -> "OdSmartPtr< OdGsBackgroundProperties >":
    return _ODA_Kernel_Py3.OdGsBackgroundProperties_createObject(*args)

class OdGiViewportTraitsData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiViewportTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiViewportTraitsData(*args))

    def type(self, *args) -> "OdGiDrawable::DrawableType":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_type(self, *args)

    def setBackground(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_setBackground(self, *args)

    def background(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_background(self, *args)

    def setDefaultLightingOn(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_setDefaultLightingOn(self, *args)

    def isDefaultLightingOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_isDefaultLightingOn(self, *args)

    def setDefaultLightingType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_setDefaultLightingType(self, *args)

    def defaultLightingType(self, *args) -> "OdGiViewportTraits::DefaultLightingType":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_defaultLightingType(self, *args)

    def userDefinedLightDirection(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_userDefinedLightDirection(self, *args)

    def setUserDefinedLightDirection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_setUserDefinedLightDirection(self, *args)

    def defaultLightingIntensity(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_defaultLightingIntensity(self, *args)

    def setDefaultLightingIntensity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_setDefaultLightingIntensity(self, *args)

    def defaultLightingColor(self, *args) -> "OdCmEntityColor const &":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_defaultLightingColor(self, *args)

    def setDefaultLightingColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_setDefaultLightingColor(self, *args)

    def defaultLightingShadowParameters(self, *args) -> "OdGiShadowParameters const &":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_defaultLightingShadowParameters(self, *args)

    def setDefaultLightingShadowParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_setDefaultLightingShadowParameters(self, *args)

    def setAmbientLightColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_setAmbientLightColor(self, *args)

    def ambientLightColor(self, *args) -> "OdCmEntityColor const &":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_ambientLightColor(self, *args)

    def setBrightness(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_setBrightness(self, *args)

    def brightness(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_brightness(self, *args)

    def setContrast(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_setContrast(self, *args)

    def contrast(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_contrast(self, *args)

    def setRenderEnvironment(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_setRenderEnvironment(self, *args)

    def renderEnvironment(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_renderEnvironment(self, *args)

    def setRenderSettings(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_setRenderSettings(self, *args)

    def renderSettings(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_renderSettings(self, *args)

    def setVisualStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_setVisualStyle(self, *args)

    def visualStyle(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_visualStyle(self, *args)

    def setToneOperatorParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_setToneOperatorParameters(self, *args)

    def toneOperatorParameters(self, *args) -> "OdGiToneOperatorParameters const &":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_toneOperatorParameters(self, *args)

    @staticmethod
    def compareToneOps(*args) -> "OdGiToneOperatorParametersPtr &, OdGiToneOperatorParametersPtr &":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData_compareToneOps(*args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiViewportTraitsData___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiViewportTraitsData

# Register OdGiViewportTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiViewportTraitsData_swigregister(OdGiViewportTraitsData)

def OdGiViewportTraitsData_compareToneOps(*args) -> "OdGiToneOperatorParametersPtr &, OdGiToneOperatorParametersPtr &":
    return _ODA_Kernel_Py3.OdGiViewportTraitsData_compareToneOps(*args)

class Volume(OdSiShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.Volume_swiginit(self, _ODA_Kernel_Py3.new_Volume(*args))

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.Volume_contains(self, *args)

    def intersects(self, *args) -> "bool":
        return _ODA_Kernel_Py3.Volume_intersects(self, *args)

    def clone(self, *args) -> "OdSiShape *":
        return _ODA_Kernel_Py3.Volume_clone(self, *args)

    def transform(self, *args) -> "void":
        return _ODA_Kernel_Py3.Volume_transform(self, *args)

    @staticmethod
    def fovToPlane(*args) -> "double":
        return _ODA_Kernel_Py3.Volume_fovToPlane(*args)

    @staticmethod
    def fovFromPlane(*args) -> "double":
        return _ODA_Kernel_Py3.Volume_fovFromPlane(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_Volume

# Register Volume in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.Volume_swigregister(Volume)

def Volume_fovToPlane(*args) -> "double":
    return _ODA_Kernel_Py3.Volume_fovToPlane(*args)

def Volume_fovFromPlane(*args) -> "double":
    return _ODA_Kernel_Py3.Volume_fovFromPlane(*args)

class BBox(OdGeBoundBlock3d, OdSiShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    k2dExtents = _ODA_Kernel_Py3.BBox_k2dExtents
    k3dExtents = _ODA_Kernel_Py3.BBox_k3dExtents

    @staticmethod
    def explodeExtent(*args) -> "OdSi::BBox::ExtentsType":
        return _ODA_Kernel_Py3.BBox_explodeExtent(*args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.BBox_contains(self, *args)

    def intersects(self, *args) -> "bool":
        return _ODA_Kernel_Py3.BBox_intersects(self, *args)

    def clone(self, *args) -> "OdSiShape *":
        return _ODA_Kernel_Py3.BBox_clone(self, *args)

    def transform(self, *args) -> "void":
        return _ODA_Kernel_Py3.BBox_transform(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.BBox_swiginit(self, _ODA_Kernel_Py3.new_BBox(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_BBox

# Register BBox in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.BBox_swigregister(BBox)

def BBox_explodeExtent(*args) -> "OdSi::BBox::ExtentsType":
    return _ODA_Kernel_Py3.BBox_explodeExtent(*args)

class OdGsLayerNode(OdGsNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsLayerNode >":
        return _ODA_Kernel_Py3.OdGsLayerNode_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsLayerNode_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsLayerNode_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsLayerNode_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsLayerNode >":
        return _ODA_Kernel_Py3.OdGsLayerNode_createObject(*args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsLayerNode_swiginit(self, _ODA_Kernel_Py3.new_OdGsLayerNode(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsLayerNode

    def destroy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsLayerNode_destroy(self, *args)

    def layerTraits(self, *args) -> "OdGiLayerTraitsData const &":
        return _ODA_Kernel_Py3.OdGsLayerNode_layerTraits(self, *args)

    def reserveLayerTraits(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsLayerNode_reserveLayerTraits(self, *args)

    def isDirty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsLayerNode_isDirty(self, *args)

    def setDirty(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsLayerNode_setDirty(self, *args)

    def isUpToDate(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsLayerNode_isUpToDate(self, *args)

    def isValidCache(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsLayerNode_isValidCache(self, *args)

    def setCacheUpToDate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsLayerNode_setCacheUpToDate(self, *args)

    def isInvalidated(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsLayerNode_isInvalidated(self, *args)

    def isVpDep(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsLayerNode_isVpDep(self, *args)

    def nodeType(self, *args) -> "ENodeType":
        return _ODA_Kernel_Py3.OdGsLayerNode_nodeType(self, *args)

    def isVpFrozen(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsLayerNode_isVpFrozen(self, *args)

    def isFrozen(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsLayerNode_isFrozen(self, *args)

    def invalidate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsLayerNode_invalidate(self, *args)

    def isTraitsCompatible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsLayerNode_isTraitsCompatible(self, *args)

    def saveNodeState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsLayerNode_saveNodeState(self, *args)

    def loadNodeState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsLayerNode_loadNodeState(self, *args)

# Register OdGsLayerNode in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsLayerNode_swigregister(OdGsLayerNode)

def OdGsLayerNode_cast(*args) -> "OdSmartPtr< OdGsLayerNode >":
    return _ODA_Kernel_Py3.OdGsLayerNode_cast(*args)

def OdGsLayerNode_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsLayerNode_desc(*args)

def OdGsLayerNode_createObject(*args) -> "OdSmartPtr< OdGsLayerNode >":
    return _ODA_Kernel_Py3.OdGsLayerNode_createObject(*args)

class OdGiLayerTraitsTakerView(OdGiLayerTraitsTaker, OdGiViewport):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def viewport(self, *args) -> "OdGiViewport &":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_viewport(self, *args)

    def sequenceNumber(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_sequenceNumber(self, *args)

    def isValidId(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_isValidId(self, *args)

    def viewportObjectId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_viewportObjectId(self, *args)

    def getModelToEyeTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_getModelToEyeTransform(self, *args)

    def getEyeToModelTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_getEyeToModelTransform(self, *args)

    def getWorldToEyeTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_getWorldToEyeTransform(self, *args)

    def getEyeToWorldTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_getEyeToWorldTransform(self, *args)

    def isPerspective(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_isPerspective(self, *args)

    def doPerspective(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_doPerspective(self, *args)

    def doInversePerspective(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_doInversePerspective(self, *args)

    def getNumPixelsInUnitSquare(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_getNumPixelsInUnitSquare(self, *args)

    def getCameraLocation(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_getCameraLocation(self, *args)

    def getCameraTarget(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_getCameraTarget(self, *args)

    def getCameraUpVector(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_getCameraUpVector(self, *args)

    def viewDir(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_viewDir(self, *args)

    def viewportId(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_viewportId(self, *args)

    def acadWindowId(self, *args) -> "OdInt16":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_acadWindowId(self, *args)

    def getViewportDcCorners(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_getViewportDcCorners(self, *args)

    def getFrontAndBackClipValues(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_getFrontAndBackClipValues(self, *args)

    def linetypeScaleMultiplier(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_linetypeScaleMultiplier(self, *args)

    def linetypeGenerationCriteria(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_linetypeGenerationCriteria(self, *args)

    def layerVisible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_layerVisible(self, *args)

    def deviation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_deviation(self, *args)

    def numberOfIsolines(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_numberOfIsolines(self, *args)

    def regenType(self, *args) -> "OdGiRegenType":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_regenType(self, *args)

    def regenAbort(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_regenAbort(self, *args)

    def context(self, *args) -> "OdGiContext *":
        return _ODA_Kernel_Py3.OdGiLayerTraitsTakerView_context(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLayerTraitsTakerView

# Register OdGiLayerTraitsTakerView in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLayerTraitsTakerView_swigregister(OdGiLayerTraitsTakerView)

class OdAbstractViewPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdAbstractViewPE >":
        return _ODA_Kernel_Py3.OdAbstractViewPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdAbstractViewPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdAbstractViewPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdAbstractViewPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdAbstractViewPE >":
        return _ODA_Kernel_Py3.OdAbstractViewPE_createObject(*args)

    def lowerLeftCorner(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdAbstractViewPE_lowerLeftCorner(self, *args)

    def upperRightCorner(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdAbstractViewPE_upperRightCorner(self, *args)

    def setViewport(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAbstractViewPE_setViewport(self, *args)

    def hasViewport(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdAbstractViewPE_hasViewport(self, *args)

    def target(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdAbstractViewPE_target(self, *args)

    def direction(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdAbstractViewPE_direction(self, *args)

    def upVector(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdAbstractViewPE_upVector(self, *args)

    def fieldWidth(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdAbstractViewPE_fieldWidth(self, *args)

    def fieldHeight(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdAbstractViewPE_fieldHeight(self, *args)

    def isPerspective(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdAbstractViewPE_isPerspective(self, *args)

    def viewOffset(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.OdAbstractViewPE_viewOffset(self, *args)

    def hasViewOffset(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdAbstractViewPE_hasViewOffset(self, *args)

    def viewTwist(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdAbstractViewPE_viewTwist(self, *args)

    def setLensLength(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAbstractViewPE_setLensLength(self, *args)

    def lensLength(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdAbstractViewPE_lensLength(self, *args)

    def isFrontClipOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdAbstractViewPE_isFrontClipOn(self, *args)

    def setFrontClipOn(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAbstractViewPE_setFrontClipOn(self, *args)

    def isBackClipOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdAbstractViewPE_isBackClipOn(self, *args)

    def setBackClipOn(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAbstractViewPE_setBackClipOn(self, *args)

    def isFrontClipAtEyeOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdAbstractViewPE_isFrontClipAtEyeOn(self, *args)

    def setFrontClipAtEyeOn(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAbstractViewPE_setFrontClipAtEyeOn(self, *args)

    def frontClipDistance(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdAbstractViewPE_frontClipDistance(self, *args)

    def setFrontClipDistance(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAbstractViewPE_setFrontClipDistance(self, *args)

    def backClipDistance(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdAbstractViewPE_backClipDistance(self, *args)

    def setBackClipDistance(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAbstractViewPE_setBackClipDistance(self, *args)

    def setRenderMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAbstractViewPE_setRenderMode(self, *args)

    def renderMode(self, *args) -> "OdDb::RenderMode":
        return _ODA_Kernel_Py3.OdAbstractViewPE_renderMode(self, *args)

    def setVisualStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAbstractViewPE_setVisualStyle(self, *args)

    def visualStyle(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdAbstractViewPE_visualStyle(self, *args)

    def setBackground(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAbstractViewPE_setBackground(self, *args)

    def background(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdAbstractViewPE_background(self, *args)

    def isDefaultLightingOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdAbstractViewPE_isDefaultLightingOn(self, *args)

    def setDefaultLightingOn(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAbstractViewPE_setDefaultLightingOn(self, *args)

    def defaultLightingType(self, *args) -> "OdGiViewportTraits::DefaultLightingType":
        return _ODA_Kernel_Py3.OdAbstractViewPE_defaultLightingType(self, *args)

    def setDefaultLightingType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAbstractViewPE_setDefaultLightingType(self, *args)

    def frozenLayers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAbstractViewPE_frozenLayers(self, *args)

    def setFrozenLayers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAbstractViewPE_setFrozenLayers(self, *args)

    def setView(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAbstractViewPE_setView(self, *args)

    def hasUcs(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdAbstractViewPE_hasUcs(self, *args)

    def orthoUcs(self, *args) -> "OdDb::OrthographicView":
        return _ODA_Kernel_Py3.OdAbstractViewPE_orthoUcs(self, *args)

    def ucsName(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdAbstractViewPE_ucsName(self, *args)

    def getUcs(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAbstractViewPE_getUcs(self, *args)

    def elevation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdAbstractViewPE_elevation(self, *args)

    def setElevation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAbstractViewPE_setElevation(self, *args)

    def setUcs(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAbstractViewPE_setUcs(self, *args)

    def viewExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdAbstractViewPE_viewExtents(self, *args)

    def plotExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdAbstractViewPE_plotExtents(self, *args)

    def zoomExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdAbstractViewPE_zoomExtents(self, *args)

    def worldToEye(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdAbstractViewPE_worldToEye(self, *args)

    def eyeToWorld(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdAbstractViewPE_eyeToWorld(self, *args)

    def isPlotting(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdAbstractViewPE_isPlotting(self, *args)

    def plotDataObject(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdAbstractViewPE_plotDataObject(self, *args)

    def applyPlotSettings(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdAbstractViewPE_applyPlotSettings(self, *args)

    def annotationScale(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdAbstractViewPE_annotationScale(self, *args)

    def compatibleCopyObject(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdAbstractViewPE_compatibleCopyObject(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdAbstractViewPE

# Register OdAbstractViewPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdAbstractViewPE_swigregister(OdAbstractViewPE)

def OdAbstractViewPE_cast(*args) -> "OdSmartPtr< OdAbstractViewPE >":
    return _ODA_Kernel_Py3.OdAbstractViewPE_cast(*args)

def OdAbstractViewPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdAbstractViewPE_desc(*args)

def OdAbstractViewPE_createObject(*args) -> "OdSmartPtr< OdAbstractViewPE >":
    return _ODA_Kernel_Py3.OdAbstractViewPE_createObject(*args)

class OdGsBlockRefNodeDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsBlockRefNodeDesc_swiginit(self, _ODA_Kernel_Py3.new_OdGsBlockRefNodeDesc(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsBlockRefNodeDesc

    def __lt__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockRefNodeDesc___lt__(self, *args)

    def scale(self, *args) -> "OdGeScale3d const &":
        return _ODA_Kernel_Py3.OdGsBlockRefNodeDesc_scale(self, *args)

    def save(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockRefNodeDesc_save(self, *args)

    def load(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockRefNodeDesc_load(self, *args)

# Register OdGsBlockRefNodeDesc in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsBlockRefNodeDesc_swigregister(OdGsBlockRefNodeDesc)

class OdSiRecursiveVisitor(OdSiVisitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def query(self, *args) -> "OdSiShape const *":
        return _ODA_Kernel_Py3.OdSiRecursiveVisitor_query(self, *args)

    def resetQuery(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiRecursiveVisitor_resetQuery(self, *args)

    def worldToNode(self, *args) -> "OdGeMatrix3d const *":
        return _ODA_Kernel_Py3.OdSiRecursiveVisitor_worldToNode(self, *args)

    def setWorldToNode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiRecursiveVisitor_setWorldToNode(self, *args)

    def nodeToWorld(self, *args) -> "OdGeMatrix3d const *":
        return _ODA_Kernel_Py3.OdSiRecursiveVisitor_nodeToWorld(self, *args)

    def setNodeToWorld(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiRecursiveVisitor_setNodeToWorld(self, *args)

    def worldToModel(self, *args) -> "OdGeMatrix3d const *":
        return _ODA_Kernel_Py3.OdSiRecursiveVisitor_worldToModel(self, *args)

    def setWorldToModel(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiRecursiveVisitor_setWorldToModel(self, *args)

    def modelToWorld(self, *args) -> "OdGeMatrix3d const *":
        return _ODA_Kernel_Py3.OdSiRecursiveVisitor_modelToWorld(self, *args)

    def setModelToWorld(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiRecursiveVisitor_setModelToWorld(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdSiRecursiveVisitor

# Register OdSiRecursiveVisitor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdSiRecursiveVisitor_swigregister(OdSiRecursiveVisitor)

class OdGsAwareFlagsArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsAwareFlagsArray_swiginit(self, _ODA_Kernel_Py3.new_OdGsAwareFlagsArray(*args))

    def setChildrenUpToDate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsAwareFlagsArray_setChildrenUpToDate(self, *args)

    def childrenUpToDate(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsAwareFlagsArray_childrenUpToDate(self, *args)

    def get(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsAwareFlagsArray_get(self, *args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsAwareFlagsArray_set(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsAwareFlagsArray_clear(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsAwareFlagsArray_isEmpty(self, *args)

    def numAwareFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsAwareFlagsArray_numAwareFlags(self, *args)

    def areInvalid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsAwareFlagsArray_areInvalid(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsAwareFlagsArray

# Register OdGsAwareFlagsArray in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsAwareFlagsArray_swigregister(OdGsAwareFlagsArray)

class OdGsBlockReferenceNodeImpl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def invalidate(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNodeImpl_invalidate(self, *args)

    def destroy(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNodeImpl_destroy(self, *args)

    def destroySubitems(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNodeImpl_destroySubitems(self, *args)

    def select(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNodeImpl_select(self, *args)

    def highlight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNodeImpl_highlight(self, *args)

    def firstEntity(self, *args) -> "OdGsEntityNode *":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNodeImpl_firstEntity(self, *args)

    def playAsGeometry(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNodeImpl_playAsGeometry(self, *args)

    def isSharedReference(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNodeImpl_isSharedReference(self, *args)

    def isSharedDefinition(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNodeImpl_isSharedDefinition(self, *args)

    def layersChanged(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNodeImpl_layersChanged(self, *args)

    def makeStock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNodeImpl_makeStock(self, *args)

    def releaseStock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNodeImpl_releaseStock(self, *args)

    def propagateLayerChangesStock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNodeImpl_propagateLayerChangesStock(self, *args)

    def saveNodeImplState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNodeImpl_saveNodeImplState(self, *args)

    def loadNodeImplState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNodeImpl_loadNodeImplState(self, *args)

    def postprocessNodeImplLoading(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNodeImpl_postprocessNodeImplLoading(self, *args)

# Register OdGsBlockReferenceNodeImpl in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsBlockReferenceNodeImpl_swigregister(OdGsBlockReferenceNodeImpl)

class OdGsBlockReferenceNode(OdGsEntityNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsBlockReferenceNode >":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsBlockReferenceNode >":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_createObject(*args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsBlockReferenceNode_swiginit(self, _ODA_Kernel_Py3.new_OdGsBlockReferenceNode(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsBlockReferenceNode

    def isValid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_isValid(self, *args)

    def setValid(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_setValid(self, *args)

    def excludeFromViewExt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_excludeFromViewExt(self, *args)

    def setExcludeFromViewExt(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_setExcludeFromViewExt(self, *args)

    def isForceNotEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_isForceNotEmpty(self, *args)

    def setForceNotEmpty(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_setForceNotEmpty(self, *args)

    def isReference(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_isReference(self, *args)

    def isSelfReferential(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_isSelfReferential(self, *args)

    def layersChanged(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_layersChanged(self, *args)

    def propagateLayerChanges(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_propagateLayerChanges(self, *args)

    def invalidate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_invalidate(self, *args)

    def destroy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_destroy(self, *args)

    def destroySubitems(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_destroySubitems(self, *args)

    def select(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_select(self, *args)

    def awareFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_awareFlags(self, *args)

    def awareFlagsAreInvalid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_awareFlagsAreInvalid(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_isEmpty(self, *args)

    def firstEntity(self, *args) -> "OdGsEntityNode *":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_firstEntity(self, *args)

    def firstAttrib(self, *args) -> "OdGsEntityNode *":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_firstAttrib(self, *args)

    def blockNode(self, *args) -> "OdGsBlockNode *":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_blockNode(self, *args)

    def clearBlockNode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_clearBlockNode(self, *args)

    def makeStock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_makeStock(self, *args)

    def releaseStock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_releaseStock(self, *args)

    def propagateLayerChangesStock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_propagateLayerChangesStock(self, *args)

    def updateBlockNode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_updateBlockNode(self, *args)

    def sharedDefinition(self, *args) -> "void *":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_sharedDefinition(self, *args)

    def isMInsert(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_isMInsert(self, *args)

    @staticmethod
    def create(*args) -> "OdGsBlockReferenceNode *":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_create(*args)

    def doDisplay(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_doDisplay(self, *args)

    def doSelect(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_doSelect(self, *args)

    def spatialQuery(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_spatialQuery(self, *args)

    def getSharedTransform(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockReferenceNode_getSharedTransform(self, *args)

# Register OdGsBlockReferenceNode in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsBlockReferenceNode_swigregister(OdGsBlockReferenceNode)

def OdGsBlockReferenceNode_cast(*args) -> "OdSmartPtr< OdGsBlockReferenceNode >":
    return _ODA_Kernel_Py3.OdGsBlockReferenceNode_cast(*args)

def OdGsBlockReferenceNode_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsBlockReferenceNode_desc(*args)

def OdGsBlockReferenceNode_createObject(*args) -> "OdSmartPtr< OdGsBlockReferenceNode >":
    return _ODA_Kernel_Py3.OdGsBlockReferenceNode_createObject(*args)

def OdGsBlockReferenceNode_create(*args) -> "OdGsBlockReferenceNode *":
    return _ODA_Kernel_Py3.OdGsBlockReferenceNode_create(*args)

class OdGsMInsertBlockNode(OdGsBlockReferenceNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsMInsertBlockNode >":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsMInsertBlockNode >":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_createObject(*args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsMInsertBlockNode_swiginit(self, _ODA_Kernel_Py3.new_OdGsMInsertBlockNode(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsMInsertBlockNode

    def invalidate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_invalidate(self, *args)

    def destroy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_destroy(self, *args)

    def destroySubitems(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_destroySubitems(self, *args)

    def highlight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_highlight(self, *args)

    def firstEntity(self, *args) -> "OdGsEntityNode *":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_firstEntity(self, *args)

    def layersChanged(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_layersChanged(self, *args)

    def playAsGeometry(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_playAsGeometry(self, *args)

    def makeStock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_makeStock(self, *args)

    def releaseStock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_releaseStock(self, *args)

    def propagateLayerChangesStock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_propagateLayerChangesStock(self, *args)

    def isMInsert(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_isMInsert(self, *args)

    def firstAttrib(self, *args) -> "OdGsEntityNode *&":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_firstAttrib(self, *args)

    def stretchExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_stretchExtents(self, *args)

    def setParams(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_setParams(self, *args)

    def doDisplay(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_doDisplay(self, *args)

    def doSelect(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsMInsertBlockNode_doSelect(self, *args)

# Register OdGsMInsertBlockNode in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsMInsertBlockNode_swigregister(OdGsMInsertBlockNode)

def OdGsMInsertBlockNode_cast(*args) -> "OdSmartPtr< OdGsMInsertBlockNode >":
    return _ODA_Kernel_Py3.OdGsMInsertBlockNode_cast(*args)

def OdGsMInsertBlockNode_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsMInsertBlockNode_desc(*args)

def OdGsMInsertBlockNode_createObject(*args) -> "OdSmartPtr< OdGsMInsertBlockNode >":
    return _ODA_Kernel_Py3.OdGsMInsertBlockNode_createObject(*args)

class OdGiLightTraitsData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    kInvalidLight = _ODA_Kernel_Py3.OdGiLightTraitsData_kInvalidLight

    @staticmethod
    def drawableLightType(*args) -> "OdGiLightTraitsData::LightType":
        return _ODA_Kernel_Py3.OdGiLightTraitsData_drawableLightType(*args)

    def isOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLightTraitsData_isOn(self, *args)

    def setOn(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightTraitsData_setOn(self, *args)

    def intensity(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiLightTraitsData_intensity(self, *args)

    def setIntensity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightTraitsData_setIntensity(self, *args)

    def color(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.OdGiLightTraitsData_color(self, *args)

    def setColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightTraitsData_setColor(self, *args)

    def shadowParameters(self, *args) -> "OdGiShadowParameters":
        return _ODA_Kernel_Py3.OdGiLightTraitsData_shadowParameters(self, *args)

    def setShadowParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightTraitsData_setShadowParameters(self, *args)

    def type(self, *args) -> "OdGiLightTraitsData::LightType":
        return _ODA_Kernel_Py3.OdGiLightTraitsData_type(self, *args)

    def save(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightTraitsData_save(self, *args)

    def load(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightTraitsData_load(self, *args)

    @staticmethod
    def deleteLightTraitsData(*args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightTraitsData_deleteLightTraitsData(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLightTraitsData

# Register OdGiLightTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLightTraitsData_swigregister(OdGiLightTraitsData)

def OdGiLightTraitsData_drawableLightType(*args) -> "OdGiLightTraitsData::LightType":
    return _ODA_Kernel_Py3.OdGiLightTraitsData_drawableLightType(*args)

def OdGiLightTraitsData_deleteLightTraitsData(*args) -> "void":
    return _ODA_Kernel_Py3.OdGiLightTraitsData_deleteLightTraitsData(*args)

class OdGiPointLightTraitsData(OdGiLightTraitsData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiPointLightTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiPointLightTraitsData(*args))

    def position(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGiPointLightTraitsData_position(self, *args)

    def setPosition(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointLightTraitsData_setPosition(self, *args)

    def attenuation(self, *args) -> "OdGiLightAttenuation":
        return _ODA_Kernel_Py3.OdGiPointLightTraitsData_attenuation(self, *args)

    def setAttenuation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointLightTraitsData_setAttenuation(self, *args)

    def physicalIntensity(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiPointLightTraitsData_physicalIntensity(self, *args)

    def setPhysicalIntensity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointLightTraitsData_setPhysicalIntensity(self, *args)

    def lampColor(self, *args) -> "OdGiColorRGB":
        return _ODA_Kernel_Py3.OdGiPointLightTraitsData_lampColor(self, *args)

    def setLampColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointLightTraitsData_setLampColor(self, *args)

    def hasTarget(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPointLightTraitsData_hasTarget(self, *args)

    def setHasTarget(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointLightTraitsData_setHasTarget(self, *args)

    def targetLocation(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGiPointLightTraitsData_targetLocation(self, *args)

    def setTargetLocation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointLightTraitsData_setTargetLocation(self, *args)

    def setHemisphericalDistribution(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointLightTraitsData_setHemisphericalDistribution(self, *args)

    def hemisphericalDistribution(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPointLightTraitsData_hemisphericalDistribution(self, *args)

    def save(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointLightTraitsData_save(self, *args)

    def load(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointLightTraitsData_load(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPointLightTraitsData

# Register OdGiPointLightTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPointLightTraitsData_swigregister(OdGiPointLightTraitsData)

class OdGiSpotLightTraitsData(OdGiLightTraitsData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiSpotLightTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiSpotLightTraitsData(*args))

    def position(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGiSpotLightTraitsData_position(self, *args)

    def setPosition(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSpotLightTraitsData_setPosition(self, *args)

    def target(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGiSpotLightTraitsData_target(self, *args)

    def setTarget(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSpotLightTraitsData_setTarget(self, *args)

    def attenuation(self, *args) -> "OdGiLightAttenuation":
        return _ODA_Kernel_Py3.OdGiSpotLightTraitsData_attenuation(self, *args)

    def setAttenuation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSpotLightTraitsData_setAttenuation(self, *args)

    def setHotspotAndFalloff(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSpotLightTraitsData_setHotspotAndFalloff(self, *args)

    def hotspot(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSpotLightTraitsData_hotspot(self, *args)

    def falloff(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSpotLightTraitsData_falloff(self, *args)

    def physicalIntensity(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiSpotLightTraitsData_physicalIntensity(self, *args)

    def setPhysicalIntensity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSpotLightTraitsData_setPhysicalIntensity(self, *args)

    def lampColor(self, *args) -> "OdGiColorRGB":
        return _ODA_Kernel_Py3.OdGiSpotLightTraitsData_lampColor(self, *args)

    def setLampColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSpotLightTraitsData_setLampColor(self, *args)

    def save(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSpotLightTraitsData_save(self, *args)

    def load(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSpotLightTraitsData_load(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSpotLightTraitsData

# Register OdGiSpotLightTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSpotLightTraitsData_swigregister(OdGiSpotLightTraitsData)

class OdGiDistantLightTraitsData(OdGiLightTraitsData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiDistantLightTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiDistantLightTraitsData(*args))

    def direction(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGiDistantLightTraitsData_direction(self, *args)

    def setDirection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDistantLightTraitsData_setDirection(self, *args)

    def isSunlight(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDistantLightTraitsData_isSunlight(self, *args)

    def setSunlight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDistantLightTraitsData_setSunlight(self, *args)

    def physicalIntensity(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiDistantLightTraitsData_physicalIntensity(self, *args)

    def setPhysicalIntensity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDistantLightTraitsData_setPhysicalIntensity(self, *args)

    def lampColor(self, *args) -> "OdGiColorRGB":
        return _ODA_Kernel_Py3.OdGiDistantLightTraitsData_lampColor(self, *args)

    def setLampColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDistantLightTraitsData_setLampColor(self, *args)

    def skyParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDistantLightTraitsData_skyParameters(self, *args)

    def setSkyParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDistantLightTraitsData_setSkyParameters(self, *args)

    def save(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDistantLightTraitsData_save(self, *args)

    def load(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDistantLightTraitsData_load(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDistantLightTraitsData

# Register OdGiDistantLightTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDistantLightTraitsData_swigregister(OdGiDistantLightTraitsData)

class OdGiWebLightTraitsData(OdGiPointLightTraitsData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiWebLightTraitsData_swiginit(self, _ODA_Kernel_Py3.new_OdGiWebLightTraitsData(*args))

    def webFile(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdGiWebLightTraitsData_webFile(self, *args)

    def setWebFile(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWebLightTraitsData_setWebFile(self, *args)

    def webRotation(self, *args) -> "OdGeVector3d const &":
        return _ODA_Kernel_Py3.OdGiWebLightTraitsData_webRotation(self, *args)

    def setWebRotation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWebLightTraitsData_setWebRotation(self, *args)

    def webFlux(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiWebLightTraitsData_webFlux(self, *args)

    def setWebFlux(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWebLightTraitsData_setWebFlux(self, *args)

    def webFileType(self, *args) -> "OdGiWebLightTraits::WebFileType":
        return _ODA_Kernel_Py3.OdGiWebLightTraitsData_webFileType(self, *args)

    def setWebFileType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWebLightTraitsData_setWebFileType(self, *args)

    def webSymmetry(self, *args) -> "OdGiWebLightTraits::WebSymmetry":
        return _ODA_Kernel_Py3.OdGiWebLightTraitsData_webSymmetry(self, *args)

    def setWebSymmetry(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWebLightTraitsData_setWebSymmetry(self, *args)

    def webHorzAng90to270(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiWebLightTraitsData_webHorzAng90to270(self, *args)

    def setWebHorzAng90to270(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWebLightTraitsData_setWebHorzAng90to270(self, *args)

    def save(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWebLightTraitsData_save(self, *args)

    def load(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiWebLightTraitsData_load(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiWebLightTraitsData

# Register OdGiWebLightTraitsData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiWebLightTraitsData_swigregister(OdGiWebLightTraitsData)

class OdGiLightTraitsVpDepData(OdGiLightTraitsData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiLightTraitsVpDepData_swiginit(self, _ODA_Kernel_Py3.new_OdGiLightTraitsVpDepData(*args))

    def viewportId(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDepData_viewportId(self, *args)

    def setViewportId(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDepData_setViewportId(self, *args)

    def viewportObjectId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDepData_viewportObjectId(self, *args)

    def setViewportObjectId(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDepData_setViewportObjectId(self, *args)

    def vpDepOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDepData_vpDepOn(self, *args)

    def setVpDepOn(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDepData_setVpDepOn(self, *args)

    def vpDepDimming(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDepData_vpDepDimming(self, *args)

    def setVpDepDimming(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDepData_setVpDepDimming(self, *args)

    def save(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDepData_save(self, *args)

    def load(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLightTraitsVpDepData_load(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLightTraitsVpDepData

# Register OdGiLightTraitsVpDepData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLightTraitsVpDepData_swigregister(OdGiLightTraitsVpDepData)

class OdGiMaterialTextureData(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiMaterialTextureData >":
        return _ODA_Kernel_Py3.OdGiMaterialTextureData_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMaterialTextureData_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMaterialTextureData_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiMaterialTextureData_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiMaterialTextureData >":
        return _ODA_Kernel_Py3.OdGiMaterialTextureData_createObject(*args)

    def setTextureData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTextureData_setTextureData(self, *args)

    def textureData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTextureData_textureData(self, *args)

    def haveData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialTextureData_haveData(self, *args)

    @staticmethod
    def createDefaultTextureDataImplementation(*args) -> "OdSmartPtr< OdGiMaterialTextureData >":
        return _ODA_Kernel_Py3.OdGiMaterialTextureData_createDefaultTextureDataImplementation(*args)

    @staticmethod
    def defaultTextureDataImplementationDesc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMaterialTextureData_defaultTextureDataImplementationDesc(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMaterialTextureData

# Register OdGiMaterialTextureData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMaterialTextureData_swigregister(OdGiMaterialTextureData)

def OdGiMaterialTextureData_cast(*args) -> "OdSmartPtr< OdGiMaterialTextureData >":
    return _ODA_Kernel_Py3.OdGiMaterialTextureData_cast(*args)

def OdGiMaterialTextureData_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiMaterialTextureData_desc(*args)

def OdGiMaterialTextureData_createObject(*args) -> "OdSmartPtr< OdGiMaterialTextureData >":
    return _ODA_Kernel_Py3.OdGiMaterialTextureData_createObject(*args)

def OdGiMaterialTextureData_createDefaultTextureDataImplementation(*args) -> "OdSmartPtr< OdGiMaterialTextureData >":
    return _ODA_Kernel_Py3.OdGiMaterialTextureData_createDefaultTextureDataImplementation(*args)

def OdGiMaterialTextureData_defaultTextureDataImplementationDesc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiMaterialTextureData_defaultTextureDataImplementationDesc(*args)

class DevDataVariant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DevDataVariantType_Void = _ODA_Kernel_Py3.DevDataVariant_DevDataVariantType_Void
    DevDataVariantType_Ptr = _ODA_Kernel_Py3.DevDataVariant_DevDataVariantType_Ptr
    DevDataVariantType_RxObject = _ODA_Kernel_Py3.DevDataVariant_DevDataVariantType_RxObject

    def __init__(self, *args):
        _ODA_Kernel_Py3.DevDataVariant_swiginit(self, _ODA_Kernel_Py3.new_DevDataVariant(*args))

    def type(self, *args) -> "OdGiMaterialTextureData::DevDataVariant::DevDataVariantType":
        return _ODA_Kernel_Py3.DevDataVariant_type(self, *args)

    def getPtr(self, *args) -> "void *":
        return _ODA_Kernel_Py3.DevDataVariant_getPtr(self, *args)

    def getRxObject(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.DevDataVariant_getRxObject(self, *args)

    def setPtr(self, *args) -> "OdGiMaterialTextureData::DevDataVariant &":
        return _ODA_Kernel_Py3.DevDataVariant_setPtr(self, *args)

    def setRxObject(self, *args) -> "OdGiMaterialTextureData::DevDataVariant &":
        return _ODA_Kernel_Py3.DevDataVariant_setRxObject(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.DevDataVariant_clear(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_DevDataVariant

# Register DevDataVariant in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.DevDataVariant_swigregister(DevDataVariant)

class OdGiMaterialTextureLoadPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiMaterialTextureLoadPE >":
        return _ODA_Kernel_Py3.OdGiMaterialTextureLoadPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMaterialTextureLoadPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMaterialTextureLoadPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiMaterialTextureLoadPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiMaterialTextureLoadPE >":
        return _ODA_Kernel_Py3.OdGiMaterialTextureLoadPE_createObject(*args)

    def startTextureLoading(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTextureLoadPE_startTextureLoading(self, *args)

    def textureLoaded(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTextureLoadPE_textureLoaded(self, *args)

    def textureLoadingFailed(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTextureLoadPE_textureLoadingFailed(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMaterialTextureLoadPE

# Register OdGiMaterialTextureLoadPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMaterialTextureLoadPE_swigregister(OdGiMaterialTextureLoadPE)

def OdGiMaterialTextureLoadPE_cast(*args) -> "OdSmartPtr< OdGiMaterialTextureLoadPE >":
    return _ODA_Kernel_Py3.OdGiMaterialTextureLoadPE_cast(*args)

def OdGiMaterialTextureLoadPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiMaterialTextureLoadPE_desc(*args)

def OdGiMaterialTextureLoadPE_createObject(*args) -> "OdSmartPtr< OdGiMaterialTextureLoadPE >":
    return _ODA_Kernel_Py3.OdGiMaterialTextureLoadPE_createObject(*args)

class OdGiMaterialTextureLoaderExt(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiMaterialTextureLoaderExt >":
        return _ODA_Kernel_Py3.OdGiMaterialTextureLoaderExt_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMaterialTextureLoaderExt_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMaterialTextureLoaderExt_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiMaterialTextureLoaderExt_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiMaterialTextureLoaderExt >":
        return _ODA_Kernel_Py3.OdGiMaterialTextureLoaderExt_createObject(*args)

    def allowTextureLoading(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialTextureLoaderExt_allowTextureLoading(self, *args)

    def loadTexture(self, *args) -> "OdGiMaterialTextureDataPtr":
        return _ODA_Kernel_Py3.OdGiMaterialTextureLoaderExt_loadTexture(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMaterialTextureLoaderExt

# Register OdGiMaterialTextureLoaderExt in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMaterialTextureLoaderExt_swigregister(OdGiMaterialTextureLoaderExt)

def OdGiMaterialTextureLoaderExt_cast(*args) -> "OdSmartPtr< OdGiMaterialTextureLoaderExt >":
    return _ODA_Kernel_Py3.OdGiMaterialTextureLoaderExt_cast(*args)

def OdGiMaterialTextureLoaderExt_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiMaterialTextureLoaderExt_desc(*args)

def OdGiMaterialTextureLoaderExt_createObject(*args) -> "OdSmartPtr< OdGiMaterialTextureLoaderExt >":
    return _ODA_Kernel_Py3.OdGiMaterialTextureLoaderExt_createObject(*args)

class OdGiMaterialTextureManager(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiMaterialTextureManager >":
        return _ODA_Kernel_Py3.OdGiMaterialTextureManager_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMaterialTextureManager_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMaterialTextureManager_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiMaterialTextureManager_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiMaterialTextureManager >":
        return _ODA_Kernel_Py3.OdGiMaterialTextureManager_createObject(*args)
    kFileTexturesOnly = _ODA_Kernel_Py3.OdGiMaterialTextureManager_kFileTexturesOnly
    kFileAndProceduralTextures = _ODA_Kernel_Py3.OdGiMaterialTextureManager_kFileAndProceduralTextures
    kDisable = _ODA_Kernel_Py3.OdGiMaterialTextureManager_kDisable

    def setManageType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTextureManager_setManageType(self, *args)

    def manageType(self, *args) -> "OdGiMaterialTextureManager::ManageType":
        return _ODA_Kernel_Py3.OdGiMaterialTextureManager_manageType(self, *args)

    def setMaterialLoaderExt(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTextureManager_setMaterialLoaderExt(self, *args)

    def materialLoaderExt(self, *args) -> "OdGiMaterialTextureLoaderExtPtr":
        return _ODA_Kernel_Py3.OdGiMaterialTextureManager_materialLoaderExt(self, *args)

    def searchTexture(self, *args) -> "OdGiMaterialTextureDataPtr":
        return _ODA_Kernel_Py3.OdGiMaterialTextureManager_searchTexture(self, *args)

    def tryToLoad(self, *args) -> "OdGiMaterialTextureDataPtr":
        return _ODA_Kernel_Py3.OdGiMaterialTextureManager_tryToLoad(self, *args)

    def linkTexture(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTextureManager_linkTexture(self, *args)

    def isAvailable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialTextureManager_isAvailable(self, *args)

    def unlinkTexture(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTextureManager_unlinkTexture(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTextureManager_clear(self, *args)

    def numTextureEntries(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiMaterialTextureManager_numTextureEntries(self, *args)

    def textureEntryKey(self, *args) -> "OdGiMaterialTexturePtr":
        return _ODA_Kernel_Py3.OdGiMaterialTextureManager_textureEntryKey(self, *args)

    def textureEntryData(self, *args) -> "OdGiMaterialTextureDataPtr":
        return _ODA_Kernel_Py3.OdGiMaterialTextureManager_textureEntryData(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMaterialTextureManager

# Register OdGiMaterialTextureManager in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMaterialTextureManager_swigregister(OdGiMaterialTextureManager)

def OdGiMaterialTextureManager_cast(*args) -> "OdSmartPtr< OdGiMaterialTextureManager >":
    return _ODA_Kernel_Py3.OdGiMaterialTextureManager_cast(*args)

def OdGiMaterialTextureManager_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiMaterialTextureManager_desc(*args)

def OdGiMaterialTextureManager_createObject(*args) -> "OdSmartPtr< OdGiMaterialTextureManager >":
    return _ODA_Kernel_Py3.OdGiMaterialTextureManager_createObject(*args)

class OdGiMaterialTextureEntry(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiMaterialTextureEntry >":
        return _ODA_Kernel_Py3.OdGiMaterialTextureEntry_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMaterialTextureEntry_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMaterialTextureEntry_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiMaterialTextureEntry_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiMaterialTextureEntry >":
        return _ODA_Kernel_Py3.OdGiMaterialTextureEntry_createObject(*args)

    def textureData(self, *args) -> "OdGiMaterialTextureDataPtr":
        return _ODA_Kernel_Py3.OdGiMaterialTextureEntry_textureData(self, *args)

    def isTextureInitialized(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialTextureEntry_isTextureInitialized(self, *args)

    def proceduralTextureWidth(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiMaterialTextureEntry_proceduralTextureWidth(self, *args)

    def setProceduralTextureWidth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTextureEntry_setProceduralTextureWidth(self, *args)

    def proceduralTextureHeight(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiMaterialTextureEntry_proceduralTextureHeight(self, *args)

    def setProceduralTextureHeight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTextureEntry_setProceduralTextureHeight(self, *args)

    def setProceduralTextureResolution(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTextureEntry_setProceduralTextureResolution(self, *args)

    def proceduralTextureQuality(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiMaterialTextureEntry_proceduralTextureQuality(self, *args)

    def setProceduralTextureQuality(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTextureEntry_setProceduralTextureQuality(self, *args)

    def setGiMaterialTexture(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialTextureEntry_setGiMaterialTexture(self, *args)

    def setTextureData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialTextureEntry_setTextureData(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMaterialTextureEntry

# Register OdGiMaterialTextureEntry in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMaterialTextureEntry_swigregister(OdGiMaterialTextureEntry)

def OdGiMaterialTextureEntry_cast(*args) -> "OdSmartPtr< OdGiMaterialTextureEntry >":
    return _ODA_Kernel_Py3.OdGiMaterialTextureEntry_cast(*args)

def OdGiMaterialTextureEntry_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiMaterialTextureEntry_desc(*args)

def OdGiMaterialTextureEntry_createObject(*args) -> "OdSmartPtr< OdGiMaterialTextureEntry >":
    return _ODA_Kernel_Py3.OdGiMaterialTextureEntry_createObject(*args)

class OdGiMaterialItem(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiMaterialItem >":
        return _ODA_Kernel_Py3.OdGiMaterialItem_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMaterialItem_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMaterialItem_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiMaterialItem_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiMaterialItem >":
        return _ODA_Kernel_Py3.OdGiMaterialItem_createObject(*args)

    def diffuseTexture(self, *args) -> "OdGiMaterialTextureEntryPtr":
        return _ODA_Kernel_Py3.OdGiMaterialItem_diffuseTexture(self, *args)

    def createDiffuseTexture(self, *args) -> "OdGiMaterialTextureEntryPtr":
        return _ODA_Kernel_Py3.OdGiMaterialItem_createDiffuseTexture(self, *args)

    def removeDiffuseTexture(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialItem_removeDiffuseTexture(self, *args)

    def haveDiffuseTexture(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialItem_haveDiffuseTexture(self, *args)

    def cachedData(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiMaterialItem_cachedData(self, *args)

    def setCachedData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialItem_setCachedData(self, *args)

    def materialId(self, *args) -> "OdDbStub const *":
        return _ODA_Kernel_Py3.OdGiMaterialItem_materialId(self, *args)

    def setMaterialId(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialItem_setMaterialId(self, *args)

    def isMaterialIdValid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialItem_isMaterialIdValid(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMaterialItem

# Register OdGiMaterialItem in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMaterialItem_swigregister(OdGiMaterialItem)

def OdGiMaterialItem_cast(*args) -> "OdSmartPtr< OdGiMaterialItem >":
    return _ODA_Kernel_Py3.OdGiMaterialItem_cast(*args)

def OdGiMaterialItem_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiMaterialItem_desc(*args)

def OdGiMaterialItem_createObject(*args) -> "OdSmartPtr< OdGiMaterialItem >":
    return _ODA_Kernel_Py3.OdGiMaterialItem_createObject(*args)

class OdGiMaterialRenderItem(OdGiMaterialItem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiMaterialRenderItem >":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiMaterialRenderItem >":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_createObject(*args)

    def specularTexture(self, *args) -> "OdGiMaterialTextureEntryPtr":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_specularTexture(self, *args)

    def createSpecularTexture(self, *args) -> "OdGiMaterialTextureEntryPtr":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_createSpecularTexture(self, *args)

    def removeSpecularTexture(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_removeSpecularTexture(self, *args)

    def haveSpecularTexture(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_haveSpecularTexture(self, *args)

    def reflectionTexture(self, *args) -> "OdGiMaterialTextureEntryPtr":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_reflectionTexture(self, *args)

    def createReflectionTexture(self, *args) -> "OdGiMaterialTextureEntryPtr":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_createReflectionTexture(self, *args)

    def removeReflectionTexture(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_removeReflectionTexture(self, *args)

    def haveReflectionTexture(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_haveReflectionTexture(self, *args)

    def opacityTexture(self, *args) -> "OdGiMaterialTextureEntryPtr":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_opacityTexture(self, *args)

    def createOpacityTexture(self, *args) -> "OdGiMaterialTextureEntryPtr":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_createOpacityTexture(self, *args)

    def removeOpacityTexture(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_removeOpacityTexture(self, *args)

    def haveOpacityTexture(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_haveOpacityTexture(self, *args)

    def bumpTexture(self, *args) -> "OdGiMaterialTextureEntryPtr":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_bumpTexture(self, *args)

    def createBumpTexture(self, *args) -> "OdGiMaterialTextureEntryPtr":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_createBumpTexture(self, *args)

    def removeBumpTexture(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_removeBumpTexture(self, *args)

    def haveBumpTexture(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_haveBumpTexture(self, *args)

    def refractionTexture(self, *args) -> "OdGiMaterialTextureEntryPtr":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_refractionTexture(self, *args)

    def createRefractionTexture(self, *args) -> "OdGiMaterialTextureEntryPtr":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_createRefractionTexture(self, *args)

    def removeRefractionTexture(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_removeRefractionTexture(self, *args)

    def haveRefractionTexture(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_haveRefractionTexture(self, *args)

    def normalMapTexture(self, *args) -> "OdGiMaterialTextureEntryPtr":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_normalMapTexture(self, *args)

    def createNormalMapTexture(self, *args) -> "OdGiMaterialTextureEntryPtr":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_createNormalMapTexture(self, *args)

    def removeNormalMapTexture(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_removeNormalMapTexture(self, *args)

    def haveNormalMapTexture(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_haveNormalMapTexture(self, *args)

    def emissionTexture(self, *args) -> "OdGiMaterialTextureEntryPtr":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_emissionTexture(self, *args)

    def createEmissionTexture(self, *args) -> "OdGiMaterialTextureEntryPtr":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_createEmissionTexture(self, *args)

    def removeEmissionTexture(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_removeEmissionTexture(self, *args)

    def haveEmissionTexture(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMaterialRenderItem_haveEmissionTexture(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMaterialRenderItem

# Register OdGiMaterialRenderItem in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMaterialRenderItem_swigregister(OdGiMaterialRenderItem)

def OdGiMaterialRenderItem_cast(*args) -> "OdSmartPtr< OdGiMaterialRenderItem >":
    return _ODA_Kernel_Py3.OdGiMaterialRenderItem_cast(*args)

def OdGiMaterialRenderItem_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiMaterialRenderItem_desc(*args)

def OdGiMaterialRenderItem_createObject(*args) -> "OdSmartPtr< OdGiMaterialRenderItem >":
    return _ODA_Kernel_Py3.OdGiMaterialRenderItem_createObject(*args)

class OdGsBaseDeviceMTHelpers(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kSyncDeviceAccess = _ODA_Kernel_Py3.OdGsBaseDeviceMTHelpers_kSyncDeviceAccess
    kSyncDeviceResource = _ODA_Kernel_Py3.OdGsBaseDeviceMTHelpers_kSyncDeviceResource
    kSyncRasterCache = _ODA_Kernel_Py3.OdGsBaseDeviceMTHelpers_kSyncRasterCache
    kSyncTextureCache = _ODA_Kernel_Py3.OdGsBaseDeviceMTHelpers_kSyncTextureCache
    kSyncCount = _ODA_Kernel_Py3.OdGsBaseDeviceMTHelpers_kSyncCount

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsBaseDeviceMTHelpers_swiginit(self, _ODA_Kernel_Py3.new_OdGsBaseDeviceMTHelpers(*args))

    def lock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseDeviceMTHelpers_lock(self, *args)

    def unlock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseDeviceMTHelpers_unlock(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsBaseDeviceMTHelpers

# Register OdGsBaseDeviceMTHelpers in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsBaseDeviceMTHelpers_swigregister(OdGsBaseDeviceMTHelpers)

class OdGsBaseDeviceMTSyncHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsBaseDeviceMTSyncHelper_swiginit(self, _ODA_Kernel_Py3.new_OdGsBaseDeviceMTSyncHelper(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsBaseDeviceMTSyncHelper

# Register OdGsBaseDeviceMTSyncHelper in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsBaseDeviceMTSyncHelper_swigregister(OdGsBaseDeviceMTSyncHelper)

kMDIEnabled = _ODA_Kernel_Py3.kMDIEnabled
kSDIUserEnforced = _ODA_Kernel_Py3.kSDIUserEnforced
kSDIAppEnforced = _ODA_Kernel_Py3.kSDIAppEnforced
kSDIUserAndAppEnforced = _ODA_Kernel_Py3.kSDIUserAndAppEnforced
kProd_ACAD = _ODA_Kernel_Py3.kProd_ACAD
kProd_LT = _ODA_Kernel_Py3.kProd_LT
kProd_OEM = _ODA_Kernel_Py3.kProd_OEM
kProd_OdDb = _ODA_Kernel_Py3.kProd_OdDb
class OdDbBaseHostAppServices(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbBaseHostAppServices >":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbBaseHostAppServices >":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_createObject(*args)
    kDrawingOpen = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kDrawingOpen
    kXrefResolution = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kXrefResolution
    kRasterResolution = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kRasterResolution
    kDefault = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kDefault
    kFontFile = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kFontFile
    kCompiledShapeFile = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kCompiledShapeFile
    kTrueTypeFontFile = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kTrueTypeFontFile
    kEmbeddedImageFile = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kEmbeddedImageFile
    kXRefDrawing = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kXRefDrawing
    kPatternFile = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kPatternFile
    kTXApplication = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kTXApplication
    kFontMapFile = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kFontMapFile
    kUnderlayFile = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kUnderlayFile
    kTextureMapFile = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kTextureMapFile
    kPhotometricWebFile = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kPhotometricWebFile
    kAssetLibXMLFile = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kAssetLibXMLFile
    kUseSoftwareHLR = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kUseSoftwareHLR
    kFor2dExportRender = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kFor2dExportRender
    kFor2dExportRenderHLR = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kFor2dExportRenderHLR
    kForThumbnail = _ODA_Kernel_Py3.OdDbBaseHostAppServices_kForThumbnail

    def findFile(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_findFile(self, *args)

    def newProgressMeter(self, *args) -> "OdDbHostAppProgressMeter *":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_newProgressMeter(self, *args)

    def releaseProgressMeter(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_releaseProgressMeter(self, *args)

    def program(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_program(self, *args)

    def product(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_product(self, *args)

    def companyName(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_companyName(self, *args)

    def prodcode(self, *args) -> "ProdIdCode":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_prodcode(self, *args)

    def releaseMajorMinorString(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_releaseMajorMinorString(self, *args)

    def releaseMajorVersion(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_releaseMajorVersion(self, *args)

    def releaseMinorVersion(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_releaseMinorVersion(self, *args)

    def versionString(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_versionString(self, *args)

    def warning(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_warning(self, *args)

    def getErrorDescription(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_getErrorDescription(self, *args)

    def newUndoController(self, *args) -> "OdDbUndoControllerPtr":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_newUndoController(self, *args)

    def newUndoStream(self, *args) -> "OdStreamBufPtr":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_newUndoStream(self, *args)

    def auditPrintReport(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_auditPrintReport(self, *args)

    def ttfFileNameByDescriptor(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_ttfFileNameByDescriptor(self, *args)

    def getAlternateFontName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_getAlternateFontName(self, *args)

    def getFontMapFileName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_getFontMapFileName(self, *args)

    def getPreferableFont(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_getPreferableFont(self, *args)

    def getSubstituteFont(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_getSubstituteFont(self, *args)

    def getSubstituteFontByChar(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_getSubstituteFontByChar(self, *args)

    def getSystemFontFolders(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_getSystemFontFolders(self, *args)

    def collectFilePathsInDirectory(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_collectFilePathsInDirectory(self, *args)

    def fileDialog(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_fileDialog(self, *args)

    def gsBitmapDevice(self, *args) -> "OdGsDevicePtr":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_gsBitmapDevice(self, *args)

    def getTempPath(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_getTempPath(self, *args)

    def getMtMode(self, *args) -> "OdInt16":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_getMtMode(self, *args)

    def numThreads(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_numThreads(self, *args)

    def brepBuilder(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_brepBuilder(self, *args)

    def getEnv(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_getEnv(self, *args)

    def setEnv(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_setEnv(self, *args)

    def getAppUserName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseHostAppServices_getAppUserName(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbBaseHostAppServices

# Register OdDbBaseHostAppServices in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbBaseHostAppServices_swigregister(OdDbBaseHostAppServices)

def OdDbBaseHostAppServices_cast(*args) -> "OdSmartPtr< OdDbBaseHostAppServices >":
    return _ODA_Kernel_Py3.OdDbBaseHostAppServices_cast(*args)

def OdDbBaseHostAppServices_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbBaseHostAppServices_desc(*args)

def OdDbBaseHostAppServices_createObject(*args) -> "OdSmartPtr< OdDbBaseHostAppServices >":
    return _ODA_Kernel_Py3.OdDbBaseHostAppServices_createObject(*args)

class OdGiGeometrySimplifier(OdGiConveyorGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiGeometrySimplifier_swiginit(self, _ODA_Kernel_Py3.new_OdGiGeometrySimplifier(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiGeometrySimplifier

    def setDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_setDeviation(self, *args)

    def renderMode(self, *args) -> "OdGsView::RenderMode":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_renderMode(self, *args)

    def setDrawContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_setDrawContext(self, *args)

    def drawContext(self, *args) -> "OdGiConveyorContext const *":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_drawContext(self, *args)

    def polygonOut(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_polygonOut(self, *args)

    def setVertexData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_setVertexData(self, *args)

    def vertexDataCount(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_vertexDataCount(self, *args)

    def vertexDataList(self, *args) -> "OdGePoint3d const *":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_vertexDataList(self, *args)

    def vertexData(self, *args) -> "OdGiVertexData const *":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_vertexData(self, *args)

    def baseSubEntMarker(self, *args) -> "OdGsMarker":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_baseSubEntMarker(self, *args)

    def polylineOutEdgeVisibility(self, *args) -> "OdGiVisibility":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_polylineOutEdgeVisibility(self, *args)

    def plineProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_plineProc(self, *args)

    def polylineProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_polylineProc(self, *args)

    def polygonProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_polygonProc(self, *args)

    def xlineProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_xlineProc(self, *args)

    def rayProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_rayProc(self, *args)

    def meshProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_meshProc(self, *args)

    def generateMeshWires(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_generateMeshWires(self, *args)

    def generateMeshFaces(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_generateMeshFaces(self, *args)

    def meshFaceOut(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_meshFaceOut(self, *args)

    def filledShellProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_filledShellProc(self, *args)

    def shellProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_shellProc(self, *args)

    def generateShellWires(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_generateShellWires(self, *args)

    def generateShellFaces(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_generateShellFaces(self, *args)

    def shellFaceOut(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_shellFaceOut(self, *args)

    def triangleOut(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_triangleOut(self, *args)

    def generateShellFacets(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_generateShellFacets(self, *args)

    def facetOut(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_facetOut(self, *args)

    def circleProc2(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_circleProc2(self, *args)

    def circleProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_circleProc(self, *args)

    def circularArcProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_circularArcProc(self, *args)

    def textProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_textProc(self, *args)

    def textProc2(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_textProc2(self, *args)

    def shapeProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_shapeProc(self, *args)

    def nurbsProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_nurbsProc(self, *args)

    def ellipArcProc(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_ellipArcProc(self, *args)

    def rasterImageProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_rasterImageProc(self, *args)

    def initTexture(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_initTexture(self, *args)

    def uninitTexture(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_uninitTexture(self, *args)

    def metafileProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_metafileProc(self, *args)

    def polypointProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_polypointProc(self, *args)

    def rowOfDotsProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_rowOfDotsProc(self, *args)

    def pointCloudProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_pointCloudProc(self, *args)

    def edgeProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_edgeProc(self, *args)

    def polylineOut(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_polylineOut(self, *args)

    def convertMeshToShell(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_convertMeshToShell(self, *args)

    def ttfPolyDrawProc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_ttfPolyDrawProc(self, *args)

    def subdivideShellByVertexLimit(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_subdivideShellByVertexLimit(self, *args)

    def generateShellFill(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiGeometrySimplifier_generateShellFill(self, *args)

# Register OdGiGeometrySimplifier in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiGeometrySimplifier_swigregister(OdGiGeometrySimplifier)

class OdGiFillData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiFillData_swiginit(self, _ODA_Kernel_Py3.new_OdGiFillData(*args))

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFillData_set(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiFillData
    m_lweight = property(_ODA_Kernel_Py3.OdGiFillData_m_lweight_get, _ODA_Kernel_Py3.OdGiFillData_m_lweight_set)
    m_fillType = property(_ODA_Kernel_Py3.OdGiFillData_m_fillType_get, _ODA_Kernel_Py3.OdGiFillData_m_fillType_set)
    m_fillNormal = property(_ODA_Kernel_Py3.OdGiFillData_m_fillNormal_get, _ODA_Kernel_Py3.OdGiFillData_m_fillNormal_set)
    m_pFillNormal = property(_ODA_Kernel_Py3.OdGiFillData_m_pFillNormal_get, _ODA_Kernel_Py3.OdGiFillData_m_pFillNormal_set)
    m_pTraits = property(_ODA_Kernel_Py3.OdGiFillData_m_pTraits_get, _ODA_Kernel_Py3.OdGiFillData_m_pTraits_set)
    m_pDrawCtx = property(_ODA_Kernel_Py3.OdGiFillData_m_pDrawCtx_get, _ODA_Kernel_Py3.OdGiFillData_m_pDrawCtx_set)

# Register OdGiFillData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiFillData_swigregister(OdGiFillData)

class OdGePointEnt3d(OdGeEntity3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def point3d(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGePointEnt3d_point3d(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGePointEnt3d

# Register OdGePointEnt3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGePointEnt3d_swigregister(OdGePointEnt3d)

class OdGePointOnCurve2d(OdGePointEnt2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGePointOnCurve2d_swiginit(self, _ODA_Kernel_Py3.new_OdGePointOnCurve2d(*args))

    def curve(self, *args) -> "OdGeCurve2d const *":
        return _ODA_Kernel_Py3.OdGePointOnCurve2d_curve(self, *args)

    def parameter(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGePointOnCurve2d_parameter(self, *args)

    def point(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGePointOnCurve2d_point(self, *args)

    def deriv(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.OdGePointOnCurve2d_deriv(self, *args)

    def isSingular(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePointOnCurve2d_isSingular(self, *args)

    def curvature(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePointOnCurve2d_curvature(self, *args)

    def setCurve(self, *args) -> "OdGePointOnCurve2d &":
        return _ODA_Kernel_Py3.OdGePointOnCurve2d_setCurve(self, *args)

    def setParameter(self, *args) -> "OdGePointOnCurve2d &":
        return _ODA_Kernel_Py3.OdGePointOnCurve2d_setParameter(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGePointOnCurve2d

# Register OdGePointOnCurve2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGePointOnCurve2d_swigregister(OdGePointOnCurve2d)

class OdGePolyline3d(OdGeSplineEnt3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGePolyline3d_swiginit(self, _ODA_Kernel_Py3.new_OdGePolyline3d(*args))

    def numFitPoints(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGePolyline3d_numFitPoints(self, *args)

    def fitPointAt(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGePolyline3d_fitPointAt(self, *args)

    def setFitPointAt(self, *args) -> "OdGeSplineEnt3d &":
        return _ODA_Kernel_Py3.OdGePolyline3d_setFitPointAt(self, *args)

    def evalPointSeg(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGePolyline3d_evalPointSeg(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGePolyline3d

# Register OdGePolyline3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGePolyline3d_swigregister(OdGePolyline3d)

class OdDbSelectionMethod(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbSelectionMethod >":
        return _ODA_Kernel_Py3.OdDbSelectionMethod_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbSelectionMethod_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbSelectionMethod_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbSelectionMethod_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbSelectionMethod >":
        return _ODA_Kernel_Py3.OdDbSelectionMethod_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbSelectionMethod

# Register OdDbSelectionMethod in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbSelectionMethod_swigregister(OdDbSelectionMethod)

def OdDbSelectionMethod_cast(*args) -> "OdSmartPtr< OdDbSelectionMethod >":
    return _ODA_Kernel_Py3.OdDbSelectionMethod_cast(*args)

def OdDbSelectionMethod_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbSelectionMethod_desc(*args)

def OdDbSelectionMethod_createObject(*args) -> "OdSmartPtr< OdDbSelectionMethod >":
    return _ODA_Kernel_Py3.OdDbSelectionMethod_createObject(*args)

class OdDbVisualSelection(OdDbSelectionMethod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbVisualSelection >":
        return _ODA_Kernel_Py3.OdDbVisualSelection_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbVisualSelection_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbVisualSelection_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbVisualSelection_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbVisualSelection >":
        return _ODA_Kernel_Py3.OdDbVisualSelection_createObject(*args)
    kPoint = _ODA_Kernel_Py3.OdDbVisualSelection_kPoint
    kBox = _ODA_Kernel_Py3.OdDbVisualSelection_kBox
    kWindow = _ODA_Kernel_Py3.OdDbVisualSelection_kWindow
    kCrossing = _ODA_Kernel_Py3.OdDbVisualSelection_kCrossing
    kFence = _ODA_Kernel_Py3.OdDbVisualSelection_kFence
    kWPoly = _ODA_Kernel_Py3.OdDbVisualSelection_kWPoly
    kCPoly = _ODA_Kernel_Py3.OdDbVisualSelection_kCPoly
    kDisableSubents = _ODA_Kernel_Py3.OdDbVisualSelection_kDisableSubents
    kEnableSubents = _ODA_Kernel_Py3.OdDbVisualSelection_kEnableSubents
    kIncludeViewport = _ODA_Kernel_Py3.OdDbVisualSelection_kIncludeViewport
    kNestedEntities = _ODA_Kernel_Py3.OdDbVisualSelection_kNestedEntities

    def viewport(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbVisualSelection_viewport(self, *args)

    def points(self, *args) -> "OdGePoint3dArray":
        return _ODA_Kernel_Py3.OdDbVisualSelection_points(self, *args)

    def mode(self, *args) -> "OdDbVisualSelection::Mode":
        return _ODA_Kernel_Py3.OdDbVisualSelection_mode(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbVisualSelection

# Register OdDbVisualSelection in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbVisualSelection_swigregister(OdDbVisualSelection)

def OdDbVisualSelection_cast(*args) -> "OdSmartPtr< OdDbVisualSelection >":
    return _ODA_Kernel_Py3.OdDbVisualSelection_cast(*args)

def OdDbVisualSelection_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbVisualSelection_desc(*args)

def OdDbVisualSelection_createObject(*args) -> "OdSmartPtr< OdDbVisualSelection >":
    return _ODA_Kernel_Py3.OdDbVisualSelection_createObject(*args)

class OdSelectionSetIterator(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdSelectionSetIterator >":
        return _ODA_Kernel_Py3.OdSelectionSetIterator_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdSelectionSetIterator_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdSelectionSetIterator_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdSelectionSetIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdSelectionSetIterator >":
        return _ODA_Kernel_Py3.OdSelectionSetIterator_createObject(*args)

    def method(self, *args) -> "OdDbSelectionMethodPtr":
        return _ODA_Kernel_Py3.OdSelectionSetIterator_method(self, *args)

    def done(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSelectionSetIterator_done(self, *args)

    def next(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSelectionSetIterator_next(self, *args)

    def subentCount(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdSelectionSetIterator_subentCount(self, *args)

    def getSubentity(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSelectionSetIterator_getSubentity(self, *args)

    def id(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdSelectionSetIterator_id(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdSelectionSetIterator

# Register OdSelectionSetIterator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdSelectionSetIterator_swigregister(OdSelectionSetIterator)

def OdSelectionSetIterator_cast(*args) -> "OdSmartPtr< OdSelectionSetIterator >":
    return _ODA_Kernel_Py3.OdSelectionSetIterator_cast(*args)

def OdSelectionSetIterator_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdSelectionSetIterator_desc(*args)

def OdSelectionSetIterator_createObject(*args) -> "OdSmartPtr< OdSelectionSetIterator >":
    return _ODA_Kernel_Py3.OdSelectionSetIterator_createObject(*args)

class OdSelectionSet(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdSelectionSet >":
        return _ODA_Kernel_Py3.OdSelectionSet_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdSelectionSet_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdSelectionSet_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdSelectionSet_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdSelectionSet >":
        return _ODA_Kernel_Py3.OdSelectionSet_createObject(*args)

    def baseDatabase(self, *args) -> "OdRxObject const *":
        return _ODA_Kernel_Py3.OdSelectionSet_baseDatabase(self, *args)

    def newIterator(self, *args) -> "OdSelectionSetIteratorPtr":
        return _ODA_Kernel_Py3.OdSelectionSet_newIterator(self, *args)

    def numEntities(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdSelectionSet_numEntities(self, *args)

    def subentCount(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdSelectionSet_subentCount(self, *args)

    def append(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSelectionSet_append(self, *args)

    def remove(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSelectionSet_remove(self, *args)

    def isMember(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSelectionSet_isMember(self, *args)

    def method(self, *args) -> "OdDbSelectionMethodPtr":
        return _ODA_Kernel_Py3.OdSelectionSet_method(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSelectionSet_clear(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdSelectionSet

# Register OdSelectionSet in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdSelectionSet_swigregister(OdSelectionSet)

def OdSelectionSet_cast(*args) -> "OdSmartPtr< OdSelectionSet >":
    return _ODA_Kernel_Py3.OdSelectionSet_cast(*args)

def OdSelectionSet_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdSelectionSet_desc(*args)

def OdSelectionSet_createObject(*args) -> "OdSmartPtr< OdSelectionSet >":
    return _ODA_Kernel_Py3.OdSelectionSet_createObject(*args)

class wrRenderFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def filterFace(self, *args) -> "bool":
        return _ODA_Kernel_Py3.wrRenderFilter_filterFace(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_wrRenderFilter

# Register wrRenderFilter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.wrRenderFilter_swigregister(wrRenderFilter)

class OdBrepRenderer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrepRenderer

    def setBrep(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepRenderer_setBrep(self, *args)

    def enableCaching(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepRenderer_enableCaching(self, *args)

    def disableCaching(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepRenderer_disableCaching(self, *args)

    def isCachingEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepRenderer_isCachingEnabled(self, *args)

    def setTriangulationParams(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepRenderer_setTriangulationParams(self, *args)

    def getTriangulationParams(self, *args) -> "wrTriangulationParams const *":
        return _ODA_Kernel_Py3.OdBrepRenderer_getTriangulationParams(self, *args)

    def draw(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepRenderer_draw(self, *args)

    def drawSilhouettes(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepRenderer_drawSilhouettes(self, *args)

    def transformBy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepRenderer_transformBy(self, *args)

    def drawFace(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepRenderer_drawFace(self, *args)

    def getFaceMesh(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepRenderer_getFaceMesh(self, *args)

    def getExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepRenderer_getExtents(self, *args)

    def setFaceFilter(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepRenderer_setFaceFilter(self, *args)

    def getPtSurface(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepRenderer_getPtSurface(self, *args)

# Register OdBrepRenderer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrepRenderer_swigregister(OdBrepRenderer)

class NumIsolines(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    numU = property(_ODA_Kernel_Py3.NumIsolines_numU_get, _ODA_Kernel_Py3.NumIsolines_numU_set)
    numV = property(_ODA_Kernel_Py3.NumIsolines_numV_get, _ODA_Kernel_Py3.NumIsolines_numV_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.NumIsolines_swiginit(self, _ODA_Kernel_Py3.new_NumIsolines(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_NumIsolines

# Register NumIsolines in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.NumIsolines_swigregister(NumIsolines)

class OdBrLoop(OdBrEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrLoop_swiginit(self, _ODA_Kernel_Py3.new_OdBrLoop(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrLoop

    def getFace(self, *args) -> "OdBrFace":
        return _ODA_Kernel_Py3.OdBrLoop_getFace(self, *args)

    def getType(self, *args) -> "BrLoopType":
        return _ODA_Kernel_Py3.OdBrLoop_getType(self, *args)

# Register OdBrLoop in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrLoop_swigregister(OdBrLoop)

class OdBrNode(OdBrMeshEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrNode_swiginit(self, _ODA_Kernel_Py3.new_OdBrNode(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrNode

    def getPoint(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrNode_getPoint(self, *args)

# Register OdBrNode in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrNode_swigregister(OdBrNode)

class OdBrMesh2dElement2dTraverser(OdBrTraverser):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrMesh2dElement2dTraverser_swiginit(self, _ODA_Kernel_Py3.new_OdBrMesh2dElement2dTraverser(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrMesh2dElement2dTraverser

    def setMeshAndElement(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMesh2dElement2dTraverser_setMeshAndElement(self, *args)

    def setMesh(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMesh2dElement2dTraverser_setMesh(self, *args)

    def getMesh(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMesh2dElement2dTraverser_getMesh(self, *args)

    def setElement(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMesh2dElement2dTraverser_setElement(self, *args)

    def getElement(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrMesh2dElement2dTraverser_getElement(self, *args)

# Register OdBrMesh2dElement2dTraverser in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrMesh2dElement2dTraverser_swigregister(OdBrMesh2dElement2dTraverser)

class OdBrShell(OdBrEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrShell_swiginit(self, _ODA_Kernel_Py3.new_OdBrShell(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrShell

    def getComplex(self, *args) -> "OdBrComplex":
        return _ODA_Kernel_Py3.OdBrShell_getComplex(self, *args)

    def getType(self, *args) -> "BrShellType":
        return _ODA_Kernel_Py3.OdBrShell_getType(self, *args)

# Register OdBrShell in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrShell_swigregister(OdBrShell)

class OdBrFace(OdBrEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getSurfaceAsNurb(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrFace_getSurfaceAsNurb(self, *args)

    def getSurface(self, *args) -> "OdGeSurface *":
        return _ODA_Kernel_Py3.OdBrFace_getSurface(self, *args)

    def getSurfaceType(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrFace_getSurfaceType(self, *args)

    def getArea(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrFace_getArea(self, *args)

    def getOrientToSurface(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrFace_getOrientToSurface(self, *args)

    def getColor(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrFace_getColor(self, *args)

    def getMaterialID(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrFace_getMaterialID(self, *args)

    def getMaterialString(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrFace_getMaterialString(self, *args)
    kInheritProjection = _ODA_Kernel_Py3.OdBrFace_kInheritProjection
    kPlanar = _ODA_Kernel_Py3.OdBrFace_kPlanar
    kBox = _ODA_Kernel_Py3.OdBrFace_kBox
    kCylinder = _ODA_Kernel_Py3.OdBrFace_kCylinder
    kSphere = _ODA_Kernel_Py3.OdBrFace_kSphere
    kInheritTiling = _ODA_Kernel_Py3.OdBrFace_kInheritTiling
    kTile = _ODA_Kernel_Py3.OdBrFace_kTile
    kCrop = _ODA_Kernel_Py3.OdBrFace_kCrop
    kClamp = _ODA_Kernel_Py3.OdBrFace_kClamp
    kMirror = _ODA_Kernel_Py3.OdBrFace_kMirror
    kInheritAutoTransform = _ODA_Kernel_Py3.OdBrFace_kInheritAutoTransform
    kNone = _ODA_Kernel_Py3.OdBrFace_kNone
    kObject = _ODA_Kernel_Py3.OdBrFace_kObject
    kModel = _ODA_Kernel_Py3.OdBrFace_kModel

    def getMaterialMapper(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrFace_getMaterialMapper(self, *args)

    def getFillPatternId(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrFace_getFillPatternId(self, *args)

    def getFillingAttributes(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrFace_getFillingAttributes(self, *args)

    def getExtraFillingAttributes(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrFace_getExtraFillingAttributes(self, *args)

    def getFill(self, *args) -> "OdGiFill const *":
        return _ODA_Kernel_Py3.OdBrFace_getFill(self, *args)

    def getFirstFaceRegion(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrFace_getFirstFaceRegion(self, *args)

    def getNextFaceRegion(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrFace_getNextFaceRegion(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrFace_swiginit(self, _ODA_Kernel_Py3.new_OdBrFace(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrFace

# Register OdBrFace in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrFace_swigregister(OdBrFace)

class OdBrEdge(OdBrEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getVertex2(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrEdge_getVertex2(self, *args)

    def getVertex1(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrEdge_getVertex1(self, *args)

    def getCurveType(self, *args) -> "OdGe::EntityId":
        return _ODA_Kernel_Py3.OdBrEdge_getCurveType(self, *args)

    def getCurve(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrEdge_getCurve(self, *args)

    def getCurveAsNurb(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrEdge_getCurveAsNurb(self, *args)

    def getOrientToCurve(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrEdge_getOrientToCurve(self, *args)

    def getColor(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrEdge_getColor(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrEdge_swiginit(self, _ODA_Kernel_Py3.new_OdBrEdge(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrEdge

# Register OdBrEdge in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrEdge_swigregister(OdBrEdge)

class OdBrComplex(OdBrEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrComplex_swiginit(self, _ODA_Kernel_Py3.new_OdBrComplex(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrComplex

# Register OdBrComplex in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrComplex_swigregister(OdBrComplex)

class OdBrBrep(OdBrEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrBrep_set(self, *args)

    def isValid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrBrep_isValid(self, *args)

    def getTransformation(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrBrep_getTransformation(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrBrep_swiginit(self, _ODA_Kernel_Py3.new_OdBrBrep(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrBrep

# Register OdBrBrep in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrBrep_swigregister(OdBrBrep)

kAfVerMask = _ODA_Kernel_Py3.kAfVerMask
kAfVerInvalid = _ODA_Kernel_Py3.kAfVerInvalid
kAfVerAny = _ODA_Kernel_Py3.kAfVerAny
kAfVerUnknown = _ODA_Kernel_Py3.kAfVerUnknown
kAfVer105 = _ODA_Kernel_Py3.kAfVer105
kAfVer106 = _ODA_Kernel_Py3.kAfVer106
kAfVer107 = _ODA_Kernel_Py3.kAfVer107
kAfVer200 = _ODA_Kernel_Py3.kAfVer200
kAfVer201 = _ODA_Kernel_Py3.kAfVer201
kAfVer400 = _ODA_Kernel_Py3.kAfVer400
kAfVer500 = _ODA_Kernel_Py3.kAfVer500
kAfVer600 = _ODA_Kernel_Py3.kAfVer600
kAfVer700 = _ODA_Kernel_Py3.kAfVer700
kAfVer1000 = _ODA_Kernel_Py3.kAfVer1000
kAfVer1100 = _ODA_Kernel_Py3.kAfVer1100
kAfVer20800 = _ODA_Kernel_Py3.kAfVer20800
kAfVer21200 = _ODA_Kernel_Py3.kAfVer21200
kAfVer21500 = _ODA_Kernel_Py3.kAfVer21500
kAfVer21600 = _ODA_Kernel_Py3.kAfVer21600
kAfVer21700 = _ODA_Kernel_Py3.kAfVer21700
kAfVer21800 = _ODA_Kernel_Py3.kAfVer21800
kAfVer22300 = _ODA_Kernel_Py3.kAfVer22300
kAfLastVersion = _ODA_Kernel_Py3.kAfLastVersion
kAfTypeMask = _ODA_Kernel_Py3.kAfTypeMask
kAfTypeInvalid = _ODA_Kernel_Py3.kAfTypeInvalid
kAfTypeAny = _ODA_Kernel_Py3.kAfTypeAny
kAfTypeUnknown = _ODA_Kernel_Py3.kAfTypeUnknown
kAfTypeASCII = _ODA_Kernel_Py3.kAfTypeASCII
kAfTypeBinary = _ODA_Kernel_Py3.kAfTypeBinary
kAfTypeIndexed = _ODA_Kernel_Py3.kAfTypeIndexed
kAfTypeVerInvalid = _ODA_Kernel_Py3.kAfTypeVerInvalid
kAfTypeVerAny = _ODA_Kernel_Py3.kAfTypeVerAny
kAfTypeVerUnknown = _ODA_Kernel_Py3.kAfTypeVerUnknown
kAf_ASCII_Any = _ODA_Kernel_Py3.kAf_ASCII_Any
kAf_ASCII_106 = _ODA_Kernel_Py3.kAf_ASCII_106
kAf_ASCII_400 = _ODA_Kernel_Py3.kAf_ASCII_400
kAf_ASCII_500 = _ODA_Kernel_Py3.kAf_ASCII_500
kAf_ASCII_600 = _ODA_Kernel_Py3.kAf_ASCII_600
kAf_ASCII_700 = _ODA_Kernel_Py3.kAf_ASCII_700
kAf_ASCII_20800 = _ODA_Kernel_Py3.kAf_ASCII_20800
kAf_ASCII_21200 = _ODA_Kernel_Py3.kAf_ASCII_21200
kAf_ASCII_21500 = _ODA_Kernel_Py3.kAf_ASCII_21500
kAf_Binary_Any = _ODA_Kernel_Py3.kAf_Binary_Any
kAf_Binary_106 = _ODA_Kernel_Py3.kAf_Binary_106
kAf_Binary_400 = _ODA_Kernel_Py3.kAf_Binary_400
kAf_Binary_500 = _ODA_Kernel_Py3.kAf_Binary_500
kAf_Binary_600 = _ODA_Kernel_Py3.kAf_Binary_600
kAf_Binary_700 = _ODA_Kernel_Py3.kAf_Binary_700
kAf_Binary_20800 = _ODA_Kernel_Py3.kAf_Binary_20800
kAf_Binary_21200 = _ODA_Kernel_Py3.kAf_Binary_21200
kAf_Binary_21500 = _ODA_Kernel_Py3.kAf_Binary_21500
kUndefinedDataType = _ODA_Kernel_Py3.kUndefinedDataType
kSurfaceExtrude_CMark = _ODA_Kernel_Py3.kSurfaceExtrude_CMark
kSphere_CMark = _ODA_Kernel_Py3.kSphere_CMark
kRevolvedSurface_CMark = _ODA_Kernel_Py3.kRevolvedSurface_CMark
kSolidExtrude_CMark = _ODA_Kernel_Py3.kSolidExtrude_CMark
kSphereSlice_CMark = _ODA_Kernel_Py3.kSphereSlice_CMark
kRevolvedSurface_CMark_Any = _ODA_Kernel_Py3.kRevolvedSurface_CMark_Any
kPlaneSurface_CLine = _ODA_Kernel_Py3.kPlaneSurface_CLine
kSolidExtrude_CLCM = _ODA_Kernel_Py3.kSolidExtrude_CLCM
kPlaneSurface_CLine56 = _ODA_Kernel_Py3.kPlaneSurface_CLine56
kLoftedSurface_CLine58 = _ODA_Kernel_Py3.kLoftedSurface_CLine58
kLoftedSurface_CLine60 = _ODA_Kernel_Py3.kLoftedSurface_CLine60
kSolidBox_CLine = _ODA_Kernel_Py3.kSolidBox_CLine
kExtendCL = _ODA_Kernel_Py3.kExtendCL
kExtrudeSurface_TopOrBottom_CLine = _ODA_Kernel_Py3.kExtrudeSurface_TopOrBottom_CLine
kExtrudeSurface_Side_CLine = _ODA_Kernel_Py3.kExtrudeSurface_Side_CLine
kUndefinedDataTypeArrFirst = _ODA_Kernel_Py3.kUndefinedDataTypeArrFirst
kArrFirstSurfaceExtrude_CMark = _ODA_Kernel_Py3.kArrFirstSurfaceExtrude_CMark
kArrFirstSolidExtrude_CMark = _ODA_Kernel_Py3.kArrFirstSolidExtrude_CMark
kArrPlaneSurface_CLine56 = _ODA_Kernel_Py3.kArrPlaneSurface_CLine56
kArrSolidExtrude_CLCM = _ODA_Kernel_Py3.kArrSolidExtrude_CLCM
kArrSolidBox_CLine = _ODA_Kernel_Py3.kArrSolidBox_CLine
kArrExtendCL = _ODA_Kernel_Py3.kArrExtendCL
kArrExtrudeSurface_CLine = _ODA_Kernel_Py3.kArrExtrudeSurface_CLine
kBoolUnite = _ODA_Kernel_Py3.kBoolUnite
kBoolIntersect = _ODA_Kernel_Py3.kBoolIntersect
kBoolSubtract = _ODA_Kernel_Py3.kBoolSubtract
kConvNone = _ODA_Kernel_Py3.kConvNone
kConvAcisColors = _ODA_Kernel_Py3.kConvAcisColors
kConvAndReplaceColors = _ODA_Kernel_Py3.kConvAndReplaceColors
ABSTREAM_BINARY = _ODA_Kernel_Py3.ABSTREAM_BINARY
ABSTREAM_BINARY_ASM = _ODA_Kernel_Py3.ABSTREAM_BINARY_ASM
AB_TYPE_LENGTH = _ODA_Kernel_Py3.AB_TYPE_LENGTH
kFileRead = _ODA_Kernel_Py3.kFileRead
kFileWrite = _ODA_Kernel_Py3.kFileWrite
kFileTmp = _ODA_Kernel_Py3.kFileTmp
kFileDelete = _ODA_Kernel_Py3.kFileDelete
kNoFlushWhenClosed = _ODA_Kernel_Py3.kNoFlushWhenClosed
kShareDenyReadWrite = _ODA_Kernel_Py3.kShareDenyReadWrite
kShareDenyWrite = _ODA_Kernel_Py3.kShareDenyWrite
kShareDenyRead = _ODA_Kernel_Py3.kShareDenyRead
kShareDenyNo = _ODA_Kernel_Py3.kShareDenyNo
kCreateNew = _ODA_Kernel_Py3.kCreateNew
kCreateAlways = _ODA_Kernel_Py3.kCreateAlways
kOpenExisting = _ODA_Kernel_Py3.kOpenExisting
kOpenAlways = _ODA_Kernel_Py3.kOpenAlways
kTruncateExisting = _ODA_Kernel_Py3.kTruncateExisting
kUserId = _ODA_Kernel_Py3.kUserId
kUserName = _ODA_Kernel_Py3.kUserName
class OdError_FileException(OdError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdError_FileException_swiginit(self, _ODA_Kernel_Py3.new_OdError_FileException(*args))

    def getFileName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdError_FileException_getFileName(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdError_FileException

# Register OdError_FileException in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdError_FileException_swigregister(OdError_FileException)

class OdError_FileNotFound(OdError_FileException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdError_FileNotFound_swiginit(self, _ODA_Kernel_Py3.new_OdError_FileNotFound(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdError_FileNotFound

# Register OdError_FileNotFound in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdError_FileNotFound_swigregister(OdError_FileNotFound)

class OdError_CantOpenFile(OdError_FileException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdError_CantOpenFile_swiginit(self, _ODA_Kernel_Py3.new_OdError_CantOpenFile(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdError_CantOpenFile

# Register OdError_CantOpenFile in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdError_CantOpenFile_swigregister(OdError_CantOpenFile)

class OdError_FileWriteError(OdError_FileException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdError_FileWriteError_swiginit(self, _ODA_Kernel_Py3.new_OdError_FileWriteError(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdError_FileWriteError

# Register OdError_FileWriteError in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdError_FileWriteError_swigregister(OdError_FileWriteError)

class OdError_InvalidIndex(OdError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdError_InvalidIndex_swiginit(self, _ODA_Kernel_Py3.new_OdError_InvalidIndex(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdError_InvalidIndex

# Register OdError_InvalidIndex in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdError_InvalidIndex_swigregister(OdError_InvalidIndex)

class OdError_InvalidKey(OdError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdError_InvalidKey_swiginit(self, _ODA_Kernel_Py3.new_OdError_InvalidKey(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdError_InvalidKey

# Register OdError_InvalidKey in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdError_InvalidKey_swigregister(OdError_InvalidKey)

class OdRxSystemServices(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def createFile(self, *args) -> "OdStreamBufPtr":
        return _ODA_Kernel_Py3.OdRxSystemServices_createFile(self, *args)

    def accessFile(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxSystemServices_accessFile(self, *args)

    def getFileCTime(self, *args) -> "OdInt64":
        return _ODA_Kernel_Py3.OdRxSystemServices_getFileCTime(self, *args)

    def getFileMTime(self, *args) -> "OdInt64":
        return _ODA_Kernel_Py3.OdRxSystemServices_getFileMTime(self, *args)

    def getFileSize(self, *args) -> "OdInt64":
        return _ODA_Kernel_Py3.OdRxSystemServices_getFileSize(self, *args)

    def systemCodePage(self, *args) -> "OdCodePageId":
        return _ODA_Kernel_Py3.OdRxSystemServices_systemCodePage(self, *args)

    def createGuid(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxSystemServices_createGuid(self, *args)

    def loadModule(self, *args) -> "OdRxModule *":
        return _ODA_Kernel_Py3.OdRxSystemServices_loadModule(self, *args)

    def unloadModule(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxSystemServices_unloadModule(self, *args)

    def findModule(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxSystemServices_findModule(self, *args)

    def warning(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxSystemServices_warning(self, *args)

    @staticmethod
    def loadModuleLib(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRxSystemServices_loadModuleLib(*args)

    def initModelerLibrary(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxSystemServices_initModelerLibrary(self, *args)

    def uninitModelerLibrary(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxSystemServices_uninitModelerLibrary(self, *args)

    def getEnvVar(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxSystemServices_getEnvVar(self, *args)

    def setEnvVar(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxSystemServices_setEnvVar(self, *args)

    def getTemporaryPath(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxSystemServices_getTemporaryPath(self, *args)

    def getUserName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxSystemServices_getUserName(self, *args)

    def getTempFileName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxSystemServices_getTempFileName(self, *args)

    @staticmethod
    def __new(*args) -> "PyObject *":
        return _ODA_Kernel_Py3.OdRxSystemServices___new(*args)

    def __init__(self):
        this = _ODA_Kernel_Py3.OdRxSystemServices___new(self)
        try:
          self.this.append(this)
        except:
          self.this = this

    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxSystemServices
    def __disown__(self):
        self.this.disown()
        _ODA_Kernel_Py3.disown_OdRxSystemServices(self)
        return weakref.proxy(self)

# Register OdRxSystemServices in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxSystemServices_swigregister(OdRxSystemServices)

def OdRxSystemServices_loadModuleLib(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdRxSystemServices_loadModuleLib(*args)

def OdRxSystemServices___new(*args) -> "PyObject *":
    return _ODA_Kernel_Py3.OdRxSystemServices___new(*args)


def odrxSystemServices(*args) -> "OdRxSystemServices *":
    return _ODA_Kernel_Py3.odrxSystemServices(*args)
class OdEdBaseIO(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getString(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdEdBaseIO_getString(self, *args)

    def putString(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdBaseIO_putString(self, *args)

    def getPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdEdBaseIO_getPoint(self, *args)
    kLeftButtonIsDown = _ODA_Kernel_Py3.OdEdBaseIO_kLeftButtonIsDown
    kRightButtonIsDown = _ODA_Kernel_Py3.OdEdBaseIO_kRightButtonIsDown
    kShiftIsDown = _ODA_Kernel_Py3.OdEdBaseIO_kShiftIsDown
    kControlIsDown = _ODA_Kernel_Py3.OdEdBaseIO_kControlIsDown
    kMiddleButtonIsDown = _ODA_Kernel_Py3.OdEdBaseIO_kMiddleButtonIsDown

    def getKeyState(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdEdBaseIO_getKeyState(self, *args)

    def putError(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdBaseIO_putError(self, *args)

    def interactive(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdEdBaseIO_interactive(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdBaseIO

# Register OdEdBaseIO in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdBaseIO_swigregister(OdEdBaseIO)

class OdDbUndoControllerRecord(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbUndoControllerRecord >":
        return _ODA_Kernel_Py3.OdDbUndoControllerRecord_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbUndoControllerRecord_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbUndoControllerRecord_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbUndoControllerRecord_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbUndoControllerRecord >":
        return _ODA_Kernel_Py3.OdDbUndoControllerRecord_createObject(*args)

    def options(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdDbUndoControllerRecord_options(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbUndoControllerRecord

# Register OdDbUndoControllerRecord in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbUndoControllerRecord_swigregister(OdDbUndoControllerRecord)

def OdDbUndoControllerRecord_cast(*args) -> "OdSmartPtr< OdDbUndoControllerRecord >":
    return _ODA_Kernel_Py3.OdDbUndoControllerRecord_cast(*args)

def OdDbUndoControllerRecord_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbUndoControllerRecord_desc(*args)

def OdDbUndoControllerRecord_createObject(*args) -> "OdSmartPtr< OdDbUndoControllerRecord >":
    return _ODA_Kernel_Py3.OdDbUndoControllerRecord_createObject(*args)

class OdDbUndoController(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kDefault = _ODA_Kernel_Py3.OdDbUndoController_kDefault
    kBlockBegin = _ODA_Kernel_Py3.OdDbUndoController_kBlockBegin
    kBlockEnd = _ODA_Kernel_Py3.OdDbUndoController_kBlockEnd
    kMarker = _ODA_Kernel_Py3.OdDbUndoController_kMarker

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbUndoController >":
        return _ODA_Kernel_Py3.OdDbUndoController_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbUndoController_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbUndoController_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbUndoController_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbUndoController >":
        return _ODA_Kernel_Py3.OdDbUndoController_createObject(*args)

    def pushData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbUndoController_pushData(self, *args)

    def hasData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbUndoController_hasData(self, *args)

    def popData(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdDbUndoController_popData(self, *args)

    def newRecordStackIterator(self, *args) -> "OdRxIteratorPtr":
        return _ODA_Kernel_Py3.OdDbUndoController_newRecordStackIterator(self, *args)

    def clearData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbUndoController_clearData(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbUndoController

# Register OdDbUndoController in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbUndoController_swigregister(OdDbUndoController)

def OdDbUndoController_cast(*args) -> "OdSmartPtr< OdDbUndoController >":
    return _ODA_Kernel_Py3.OdDbUndoController_cast(*args)

def OdDbUndoController_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbUndoController_desc(*args)

def OdDbUndoController_createObject(*args) -> "OdSmartPtr< OdDbUndoController >":
    return _ODA_Kernel_Py3.OdDbUndoController_createObject(*args)

class OdRxAttribute(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxAttribute >":
        return _ODA_Kernel_Py3.OdRxAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxAttribute >":
        return _ODA_Kernel_Py3.OdRxAttribute_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxAttribute

# Register OdRxAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxAttribute_swigregister(OdRxAttribute)

def OdRxAttribute_cast(*args) -> "OdSmartPtr< OdRxAttribute >":
    return _ODA_Kernel_Py3.OdRxAttribute_cast(*args)

def OdRxAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxAttribute_desc(*args)

def OdRxAttribute_createObject(*args) -> "OdSmartPtr< OdRxAttribute >":
    return _ODA_Kernel_Py3.OdRxAttribute_createObject(*args)

class OdRxAttributeCollection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdRxAttributeCollection_swiginit(self, _ODA_Kernel_Py3.new_OdRxAttributeCollection(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxAttributeCollection

    def count(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdRxAttributeCollection_count(self, *args)

    def getAt(self, *args) -> "OdRxAttribute *":
        return _ODA_Kernel_Py3.OdRxAttributeCollection_getAt(self, *args)

    def get(self, *args) -> "OdRxAttribute *":
        return _ODA_Kernel_Py3.OdRxAttributeCollection_get(self, *args)

    def add(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxAttributeCollection_add(self, *args)

    def override(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxAttributeCollection_override(self, *args)

    def remove(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxAttributeCollection_remove(self, *args)

# Register OdRxAttributeCollection in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxAttributeCollection_swigregister(OdRxAttributeCollection)

class OdRxResourceLoader(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxResourceLoader_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxResourceLoader_queryX(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxResourceLoader

# Register OdRxResourceLoader in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxResourceLoader_swigregister(OdRxResourceLoader)

class OdRxLocalizedNameAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxLocalizedNameAttribute >":
        return _ODA_Kernel_Py3.OdRxLocalizedNameAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxLocalizedNameAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxLocalizedNameAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxLocalizedNameAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdRxAttributePtr":
        return _ODA_Kernel_Py3.OdRxLocalizedNameAttribute_createObject(*args)

    @staticmethod
    def getLocalizedName(*args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxLocalizedNameAttribute_getLocalizedName(*args)

    def id(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdRxLocalizedNameAttribute_id(self, *args)

    def sourceHint(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdRxLocalizedNameAttribute_sourceHint(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxLocalizedNameAttribute

# Register OdRxLocalizedNameAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxLocalizedNameAttribute_swigregister(OdRxLocalizedNameAttribute)

def OdRxLocalizedNameAttribute_cast(*args) -> "OdSmartPtr< OdRxLocalizedNameAttribute >":
    return _ODA_Kernel_Py3.OdRxLocalizedNameAttribute_cast(*args)

def OdRxLocalizedNameAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxLocalizedNameAttribute_desc(*args)

def OdRxLocalizedNameAttribute_createObject(*args) -> "OdRxAttributePtr":
    return _ODA_Kernel_Py3.OdRxLocalizedNameAttribute_createObject(*args)

def OdRxLocalizedNameAttribute_getLocalizedName(*args) -> "OdString":
    return _ODA_Kernel_Py3.OdRxLocalizedNameAttribute_getLocalizedName(*args)

class OdRxAlternateLocalizedNameAttribute(OdRxLocalizedNameAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxAlternateLocalizedNameAttribute >":
        return _ODA_Kernel_Py3.OdRxAlternateLocalizedNameAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxAlternateLocalizedNameAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxAlternateLocalizedNameAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxAlternateLocalizedNameAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdRxAttributePtr":
        return _ODA_Kernel_Py3.OdRxAlternateLocalizedNameAttribute_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxAlternateLocalizedNameAttribute

# Register OdRxAlternateLocalizedNameAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxAlternateLocalizedNameAttribute_swigregister(OdRxAlternateLocalizedNameAttribute)

def OdRxAlternateLocalizedNameAttribute_cast(*args) -> "OdSmartPtr< OdRxAlternateLocalizedNameAttribute >":
    return _ODA_Kernel_Py3.OdRxAlternateLocalizedNameAttribute_cast(*args)

def OdRxAlternateLocalizedNameAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxAlternateLocalizedNameAttribute_desc(*args)

def OdRxAlternateLocalizedNameAttribute_createObject(*args) -> "OdRxAttributePtr":
    return _ODA_Kernel_Py3.OdRxAlternateLocalizedNameAttribute_createObject(*args)

class OdRxUiPlacementAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxUiPlacementAttribute >":
        return _ODA_Kernel_Py3.OdRxUiPlacementAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxUiPlacementAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxUiPlacementAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxUiPlacementAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRxUiPlacementAttribute_createObject(*args)

    @staticmethod
    def getCategory(*args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxUiPlacementAttribute_getCategory(*args)

    @staticmethod
    def getWeight(*args) -> "float":
        return _ODA_Kernel_Py3.OdRxUiPlacementAttribute_getWeight(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxUiPlacementAttribute

# Register OdRxUiPlacementAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxUiPlacementAttribute_swigregister(OdRxUiPlacementAttribute)

def OdRxUiPlacementAttribute_cast(*args) -> "OdSmartPtr< OdRxUiPlacementAttribute >":
    return _ODA_Kernel_Py3.OdRxUiPlacementAttribute_cast(*args)

def OdRxUiPlacementAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxUiPlacementAttribute_desc(*args)

def OdRxUiPlacementAttribute_createObject(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdRxUiPlacementAttribute_createObject(*args)

def OdRxUiPlacementAttribute_getCategory(*args) -> "OdString":
    return _ODA_Kernel_Py3.OdRxUiPlacementAttribute_getCategory(*args)

def OdRxUiPlacementAttribute_getWeight(*args) -> "float":
    return _ODA_Kernel_Py3.OdRxUiPlacementAttribute_getWeight(*args)

class OdRxLMVAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxLMVAttribute >":
        return _ODA_Kernel_Py3.OdRxLMVAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxLMVAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxLMVAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxLMVAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxLMVAttribute >":
        return _ODA_Kernel_Py3.OdRxLMVAttribute_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxLMVAttribute

# Register OdRxLMVAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxLMVAttribute_swigregister(OdRxLMVAttribute)

def OdRxLMVAttribute_cast(*args) -> "OdSmartPtr< OdRxLMVAttribute >":
    return _ODA_Kernel_Py3.OdRxLMVAttribute_cast(*args)

def OdRxLMVAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxLMVAttribute_desc(*args)

def OdRxLMVAttribute_createObject(*args) -> "OdSmartPtr< OdRxLMVAttribute >":
    return _ODA_Kernel_Py3.OdRxLMVAttribute_createObject(*args)

class OdRxDescriptionAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxDescriptionAttribute >":
        return _ODA_Kernel_Py3.OdRxDescriptionAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDescriptionAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDescriptionAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxDescriptionAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRxDescriptionAttribute_createObject(*args)

    @staticmethod
    def getDescription(*args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxDescriptionAttribute_getDescription(*args)

    def id(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdRxDescriptionAttribute_id(self, *args)

    def sourceHint(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdRxDescriptionAttribute_sourceHint(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxDescriptionAttribute

# Register OdRxDescriptionAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxDescriptionAttribute_swigregister(OdRxDescriptionAttribute)

def OdRxDescriptionAttribute_cast(*args) -> "OdSmartPtr< OdRxDescriptionAttribute >":
    return _ODA_Kernel_Py3.OdRxDescriptionAttribute_cast(*args)

def OdRxDescriptionAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxDescriptionAttribute_desc(*args)

def OdRxDescriptionAttribute_createObject(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdRxDescriptionAttribute_createObject(*args)

def OdRxDescriptionAttribute_getDescription(*args) -> "OdString":
    return _ODA_Kernel_Py3.OdRxDescriptionAttribute_getDescription(*args)

class OdRxRefersToAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxRefersToAttribute >":
        return _ODA_Kernel_Py3.OdRxRefersToAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxRefersToAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxRefersToAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxRefersToAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRxRefersToAttribute_createObject(*args)

    def path(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxRefersToAttribute_path(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxRefersToAttribute

# Register OdRxRefersToAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxRefersToAttribute_swigregister(OdRxRefersToAttribute)

def OdRxRefersToAttribute_cast(*args) -> "OdSmartPtr< OdRxRefersToAttribute >":
    return _ODA_Kernel_Py3.OdRxRefersToAttribute_cast(*args)

def OdRxRefersToAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxRefersToAttribute_desc(*args)

def OdRxRefersToAttribute_createObject(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdRxRefersToAttribute_createObject(*args)

class OdRxCOMAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxCOMAttribute >":
        return _ODA_Kernel_Py3.OdRxCOMAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxCOMAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxCOMAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxCOMAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRxCOMAttribute_createObject(*args)

    def name(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxCOMAttribute_name(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxCOMAttribute

# Register OdRxCOMAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxCOMAttribute_swigregister(OdRxCOMAttribute)

def OdRxCOMAttribute_cast(*args) -> "OdSmartPtr< OdRxCOMAttribute >":
    return _ODA_Kernel_Py3.OdRxCOMAttribute_cast(*args)

def OdRxCOMAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxCOMAttribute_desc(*args)

def OdRxCOMAttribute_createObject(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdRxCOMAttribute_createObject(*args)

class OdRxFilePathAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxFilePathAttribute >":
        return _ODA_Kernel_Py3.OdRxFilePathAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxFilePathAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxFilePathAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxFilePathAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxFilePathAttribute >":
        return _ODA_Kernel_Py3.OdRxFilePathAttribute_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxFilePathAttribute

# Register OdRxFilePathAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxFilePathAttribute_swigregister(OdRxFilePathAttribute)

def OdRxFilePathAttribute_cast(*args) -> "OdSmartPtr< OdRxFilePathAttribute >":
    return _ODA_Kernel_Py3.OdRxFilePathAttribute_cast(*args)

def OdRxFilePathAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxFilePathAttribute_desc(*args)

def OdRxFilePathAttribute_createObject(*args) -> "OdSmartPtr< OdRxFilePathAttribute >":
    return _ODA_Kernel_Py3.OdRxFilePathAttribute_createObject(*args)

class OdRxFlagsAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxFlagsAttribute >":
        return _ODA_Kernel_Py3.OdRxFlagsAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxFlagsAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxFlagsAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxFlagsAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxFlagsAttribute >":
        return _ODA_Kernel_Py3.OdRxFlagsAttribute_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxFlagsAttribute

# Register OdRxFlagsAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxFlagsAttribute_swigregister(OdRxFlagsAttribute)

def OdRxFlagsAttribute_cast(*args) -> "OdSmartPtr< OdRxFlagsAttribute >":
    return _ODA_Kernel_Py3.OdRxFlagsAttribute_cast(*args)

def OdRxFlagsAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxFlagsAttribute_desc(*args)

def OdRxFlagsAttribute_createObject(*args) -> "OdSmartPtr< OdRxFlagsAttribute >":
    return _ODA_Kernel_Py3.OdRxFlagsAttribute_createObject(*args)

class OdRxUnitTypeAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kUnitless = _ODA_Kernel_Py3.OdRxUnitTypeAttribute_kUnitless
    kDistance = _ODA_Kernel_Py3.OdRxUnitTypeAttribute_kDistance
    kAngle = _ODA_Kernel_Py3.OdRxUnitTypeAttribute_kAngle
    kArea = _ODA_Kernel_Py3.OdRxUnitTypeAttribute_kArea
    kVolume = _ODA_Kernel_Py3.OdRxUnitTypeAttribute_kVolume
    kCurrency = _ODA_Kernel_Py3.OdRxUnitTypeAttribute_kCurrency
    kPercentage = _ODA_Kernel_Py3.OdRxUnitTypeAttribute_kPercentage
    kAngleNotTransformed = _ODA_Kernel_Py3.OdRxUnitTypeAttribute_kAngleNotTransformed

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxUnitTypeAttribute >":
        return _ODA_Kernel_Py3.OdRxUnitTypeAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxUnitTypeAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxUnitTypeAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxUnitTypeAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdRxAttributePtr":
        return _ODA_Kernel_Py3.OdRxUnitTypeAttribute_createObject(*args)

    def unitType(self, *args) -> "OdRxUnitTypeAttribute::UnitType":
        return _ODA_Kernel_Py3.OdRxUnitTypeAttribute_unitType(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxUnitTypeAttribute

# Register OdRxUnitTypeAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxUnitTypeAttribute_swigregister(OdRxUnitTypeAttribute)

def OdRxUnitTypeAttribute_cast(*args) -> "OdSmartPtr< OdRxUnitTypeAttribute >":
    return _ODA_Kernel_Py3.OdRxUnitTypeAttribute_cast(*args)

def OdRxUnitTypeAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxUnitTypeAttribute_desc(*args)

def OdRxUnitTypeAttribute_createObject(*args) -> "OdRxAttributePtr":
    return _ODA_Kernel_Py3.OdRxUnitTypeAttribute_createObject(*args)

class OdRxUseDialogForReferredCollectionAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxUseDialogForReferredCollectionAttribute >":
        return _ODA_Kernel_Py3.OdRxUseDialogForReferredCollectionAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxUseDialogForReferredCollectionAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxUseDialogForReferredCollectionAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxUseDialogForReferredCollectionAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxUseDialogForReferredCollectionAttribute >":
        return _ODA_Kernel_Py3.OdRxUseDialogForReferredCollectionAttribute_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxUseDialogForReferredCollectionAttribute

# Register OdRxUseDialogForReferredCollectionAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxUseDialogForReferredCollectionAttribute_swigregister(OdRxUseDialogForReferredCollectionAttribute)

def OdRxUseDialogForReferredCollectionAttribute_cast(*args) -> "OdSmartPtr< OdRxUseDialogForReferredCollectionAttribute >":
    return _ODA_Kernel_Py3.OdRxUseDialogForReferredCollectionAttribute_cast(*args)

def OdRxUseDialogForReferredCollectionAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxUseDialogForReferredCollectionAttribute_desc(*args)

def OdRxUseDialogForReferredCollectionAttribute_createObject(*args) -> "OdSmartPtr< OdRxUseDialogForReferredCollectionAttribute >":
    return _ODA_Kernel_Py3.OdRxUseDialogForReferredCollectionAttribute_createObject(*args)

class OdRxUiCascadingContextMenuAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxUiCascadingContextMenuAttribute >":
        return _ODA_Kernel_Py3.OdRxUiCascadingContextMenuAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxUiCascadingContextMenuAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxUiCascadingContextMenuAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxUiCascadingContextMenuAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxUiCascadingContextMenuAttribute >":
        return _ODA_Kernel_Py3.OdRxUiCascadingContextMenuAttribute_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxUiCascadingContextMenuAttribute

# Register OdRxUiCascadingContextMenuAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxUiCascadingContextMenuAttribute_swigregister(OdRxUiCascadingContextMenuAttribute)

def OdRxUiCascadingContextMenuAttribute_cast(*args) -> "OdSmartPtr< OdRxUiCascadingContextMenuAttribute >":
    return _ODA_Kernel_Py3.OdRxUiCascadingContextMenuAttribute_cast(*args)

def OdRxUiCascadingContextMenuAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxUiCascadingContextMenuAttribute_desc(*args)

def OdRxUiCascadingContextMenuAttribute_createObject(*args) -> "OdSmartPtr< OdRxUiCascadingContextMenuAttribute >":
    return _ODA_Kernel_Py3.OdRxUiCascadingContextMenuAttribute_createObject(*args)

class OdRxCumulativeAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxCumulativeAttribute >":
        return _ODA_Kernel_Py3.OdRxCumulativeAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxCumulativeAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxCumulativeAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxCumulativeAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRxCumulativeAttribute_createObject(*args)

    def type(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxCumulativeAttribute_type(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxCumulativeAttribute

# Register OdRxCumulativeAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxCumulativeAttribute_swigregister(OdRxCumulativeAttribute)

def OdRxCumulativeAttribute_cast(*args) -> "OdSmartPtr< OdRxCumulativeAttribute >":
    return _ODA_Kernel_Py3.OdRxCumulativeAttribute_cast(*args)

def OdRxCumulativeAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxCumulativeAttribute_desc(*args)

def OdRxCumulativeAttribute_createObject(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdRxCumulativeAttribute_createObject(*args)

class OdRxAffinityAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxAffinityAttribute >":
        return _ODA_Kernel_Py3.OdRxAffinityAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxAffinityAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxAffinityAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxAffinityAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRxAffinityAttribute_createObject(*args)

    def name(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxAffinityAttribute_name(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxAffinityAttribute

# Register OdRxAffinityAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxAffinityAttribute_swigregister(OdRxAffinityAttribute)

def OdRxAffinityAttribute_cast(*args) -> "OdSmartPtr< OdRxAffinityAttribute >":
    return _ODA_Kernel_Py3.OdRxAffinityAttribute_cast(*args)

def OdRxAffinityAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxAffinityAttribute_desc(*args)

def OdRxAffinityAttribute_createObject(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdRxAffinityAttribute_createObject(*args)

class OdRxTypePromotionAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxTypePromotionAttribute >":
        return _ODA_Kernel_Py3.OdRxTypePromotionAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxTypePromotionAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxTypePromotionAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxTypePromotionAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRxTypePromotionAttribute_createObject(*args)

    def properties(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxTypePromotionAttribute_properties(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxTypePromotionAttribute

# Register OdRxTypePromotionAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxTypePromotionAttribute_swigregister(OdRxTypePromotionAttribute)

def OdRxTypePromotionAttribute_cast(*args) -> "OdSmartPtr< OdRxTypePromotionAttribute >":
    return _ODA_Kernel_Py3.OdRxTypePromotionAttribute_cast(*args)

def OdRxTypePromotionAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxTypePromotionAttribute_desc(*args)

def OdRxTypePromotionAttribute_createObject(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdRxTypePromotionAttribute_createObject(*args)

class OdRxUnionTypeAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxUnionTypeAttribute >":
        return _ODA_Kernel_Py3.OdRxUnionTypeAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxUnionTypeAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxUnionTypeAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxUnionTypeAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRxUnionTypeAttribute_createObject(*args)

    def typenames(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxUnionTypeAttribute_typenames(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxUnionTypeAttribute

# Register OdRxUnionTypeAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxUnionTypeAttribute_swigregister(OdRxUnionTypeAttribute)

def OdRxUnionTypeAttribute_cast(*args) -> "OdSmartPtr< OdRxUnionTypeAttribute >":
    return _ODA_Kernel_Py3.OdRxUnionTypeAttribute_cast(*args)

def OdRxUnionTypeAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxUnionTypeAttribute_desc(*args)

def OdRxUnionTypeAttribute_createObject(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdRxUnionTypeAttribute_createObject(*args)

class OdRxDefaultValueAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxDefaultValueAttribute >":
        return _ODA_Kernel_Py3.OdRxDefaultValueAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDefaultValueAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDefaultValueAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxDefaultValueAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdRxAttributePtr":
        return _ODA_Kernel_Py3.OdRxDefaultValueAttribute_createObject(*args)

    def value(self, *args) -> "OdRxValue const &":
        return _ODA_Kernel_Py3.OdRxDefaultValueAttribute_value(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxDefaultValueAttribute

# Register OdRxDefaultValueAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxDefaultValueAttribute_swigregister(OdRxDefaultValueAttribute)

def OdRxDefaultValueAttribute_cast(*args) -> "OdSmartPtr< OdRxDefaultValueAttribute >":
    return _ODA_Kernel_Py3.OdRxDefaultValueAttribute_cast(*args)

def OdRxDefaultValueAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxDefaultValueAttribute_desc(*args)

def OdRxDefaultValueAttribute_createObject(*args) -> "OdRxAttributePtr":
    return _ODA_Kernel_Py3.OdRxDefaultValueAttribute_createObject(*args)

class OdRxHierarchyLevelAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxHierarchyLevelAttribute >":
        return _ODA_Kernel_Py3.OdRxHierarchyLevelAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxHierarchyLevelAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxHierarchyLevelAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxHierarchyLevelAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRxHierarchyLevelAttribute_createObject(*args)

    def defaultValue(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxHierarchyLevelAttribute_defaultValue(self, *args)

    def value(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxHierarchyLevelAttribute_value(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxHierarchyLevelAttribute

# Register OdRxHierarchyLevelAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxHierarchyLevelAttribute_swigregister(OdRxHierarchyLevelAttribute)

def OdRxHierarchyLevelAttribute_cast(*args) -> "OdSmartPtr< OdRxHierarchyLevelAttribute >":
    return _ODA_Kernel_Py3.OdRxHierarchyLevelAttribute_cast(*args)

def OdRxHierarchyLevelAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxHierarchyLevelAttribute_desc(*args)

def OdRxHierarchyLevelAttribute_createObject(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdRxHierarchyLevelAttribute_createObject(*args)

class OdRxDisplayAsAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxDisplayAsAttribute >":
        return _ODA_Kernel_Py3.OdRxDisplayAsAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDisplayAsAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDisplayAsAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxDisplayAsAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRxDisplayAsAttribute_createObject(*args)

    def propertyName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxDisplayAsAttribute_propertyName(self, *args)

    def getDisplayValue(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxDisplayAsAttribute_getDisplayValue(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxDisplayAsAttribute

# Register OdRxDisplayAsAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxDisplayAsAttribute_swigregister(OdRxDisplayAsAttribute)

def OdRxDisplayAsAttribute_cast(*args) -> "OdSmartPtr< OdRxDisplayAsAttribute >":
    return _ODA_Kernel_Py3.OdRxDisplayAsAttribute_cast(*args)

def OdRxDisplayAsAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxDisplayAsAttribute_desc(*args)

def OdRxDisplayAsAttribute_createObject(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdRxDisplayAsAttribute_createObject(*args)

class OdRxDynamicAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxDynamicAttribute >":
        return _ODA_Kernel_Py3.OdRxDynamicAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDynamicAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDynamicAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxDynamicAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRxDynamicAttribute_createObject(*args)

    def getName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxDynamicAttribute_getName(self, *args)

    def getValue(self, *args) -> "OdRxValue &":
        return _ODA_Kernel_Py3.OdRxDynamicAttribute_getValue(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxDynamicAttribute

# Register OdRxDynamicAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxDynamicAttribute_swigregister(OdRxDynamicAttribute)

def OdRxDynamicAttribute_cast(*args) -> "OdSmartPtr< OdRxDynamicAttribute >":
    return _ODA_Kernel_Py3.OdRxDynamicAttribute_cast(*args)

def OdRxDynamicAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxDynamicAttribute_desc(*args)

def OdRxDynamicAttribute_createObject(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdRxDynamicAttribute_createObject(*args)

class OdRxDynamicCollectionAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxDynamicCollectionAttribute >":
        return _ODA_Kernel_Py3.OdRxDynamicCollectionAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDynamicCollectionAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxDynamicCollectionAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxDynamicCollectionAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxDynamicCollectionAttribute >":
        return _ODA_Kernel_Py3.OdRxDynamicCollectionAttribute_createObject(*args)

    def count(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdRxDynamicCollectionAttribute_count(self, *args)

    def getAt(self, *args) -> "OdRxDynamicAttribute *":
        return _ODA_Kernel_Py3.OdRxDynamicCollectionAttribute_getAt(self, *args)

    def getByName(self, *args) -> "OdRxDynamicAttribute *":
        return _ODA_Kernel_Py3.OdRxDynamicCollectionAttribute_getByName(self, *args)

    def add(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxDynamicCollectionAttribute_add(self, *args)

    def remove(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxDynamicCollectionAttribute_remove(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxDynamicCollectionAttribute

# Register OdRxDynamicCollectionAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxDynamicCollectionAttribute_swigregister(OdRxDynamicCollectionAttribute)

def OdRxDynamicCollectionAttribute_cast(*args) -> "OdSmartPtr< OdRxDynamicCollectionAttribute >":
    return _ODA_Kernel_Py3.OdRxDynamicCollectionAttribute_cast(*args)

def OdRxDynamicCollectionAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxDynamicCollectionAttribute_desc(*args)

def OdRxDynamicCollectionAttribute_createObject(*args) -> "OdSmartPtr< OdRxDynamicCollectionAttribute >":
    return _ODA_Kernel_Py3.OdRxDynamicCollectionAttribute_createObject(*args)

class OdRxGenerateDynamicPropertiesAttribute(OdRxAttribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxGenerateDynamicPropertiesAttribute >":
        return _ODA_Kernel_Py3.OdRxGenerateDynamicPropertiesAttribute_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxGenerateDynamicPropertiesAttribute_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxGenerateDynamicPropertiesAttribute_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxGenerateDynamicPropertiesAttribute_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxGenerateDynamicPropertiesAttribute >":
        return _ODA_Kernel_Py3.OdRxGenerateDynamicPropertiesAttribute_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxGenerateDynamicPropertiesAttribute

# Register OdRxGenerateDynamicPropertiesAttribute in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxGenerateDynamicPropertiesAttribute_swigregister(OdRxGenerateDynamicPropertiesAttribute)

def OdRxGenerateDynamicPropertiesAttribute_cast(*args) -> "OdSmartPtr< OdRxGenerateDynamicPropertiesAttribute >":
    return _ODA_Kernel_Py3.OdRxGenerateDynamicPropertiesAttribute_cast(*args)

def OdRxGenerateDynamicPropertiesAttribute_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxGenerateDynamicPropertiesAttribute_desc(*args)

def OdRxGenerateDynamicPropertiesAttribute_createObject(*args) -> "OdSmartPtr< OdRxGenerateDynamicPropertiesAttribute >":
    return _ODA_Kernel_Py3.OdRxGenerateDynamicPropertiesAttribute_createObject(*args)

class OdRxModelHierarchyTreeBase(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxModelHierarchyTreeBase >":
        return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBase_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBase_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBase_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBase_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxModelHierarchyTreeBase >":
        return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBase_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxModelHierarchyTreeBase

    def createDatabaseHierarchyTree(self, *args) -> "OdRxModelTreeBaseNodePtr":
        return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBase_createDatabaseHierarchyTree(self, *args)

    def getDatabaseNode(self, *args) -> "OdRxModelTreeBaseNodePtr":
        return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBase_getDatabaseNode(self, *args)

    def getNodeProperties(self, *args) -> "OdArray< PropertyInfo > const &":
        return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBase_getNodeProperties(self, *args)

    def serialize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBase_serialize(self, *args)

    def deserialize(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBase_deserialize(self, *args)

# Register OdRxModelHierarchyTreeBase in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxModelHierarchyTreeBase_swigregister(OdRxModelHierarchyTreeBase)

def OdRxModelHierarchyTreeBase_cast(*args) -> "OdSmartPtr< OdRxModelHierarchyTreeBase >":
    return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBase_cast(*args)

def OdRxModelHierarchyTreeBase_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBase_desc(*args)

def OdRxModelHierarchyTreeBase_createObject(*args) -> "OdSmartPtr< OdRxModelHierarchyTreeBase >":
    return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBase_createObject(*args)

class OdBrepBuilderFillerParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrepBuilderFillerParams_swiginit(self, _ODA_Kernel_Py3.new_OdBrepBuilderFillerParams(*args))

    def setSkipNullSurface(self, *args) -> "OdBrepBuilderFillerParams &":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_setSkipNullSurface(self, *args)

    def isSkipNullSurface(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_isSkipNullSurface(self, *args)

    def setSkipCoedge2dCurve(self, *args) -> "OdBrepBuilderFillerParams &":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_setSkipCoedge2dCurve(self, *args)

    def isSkipCoedge2dCurve(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_isSkipCoedge2dCurve(self, *args)

    def setSkipCheckLoopType(self, *args) -> "OdBrepBuilderFillerParams &":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_setSkipCheckLoopType(self, *args)

    def isSkipCheckLoopType(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_isSkipCheckLoopType(self, *args)

    def setGenerateExplicitLoops(self, *args) -> "OdBrepBuilderFillerParams &":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_setGenerateExplicitLoops(self, *args)

    def isGenerateExplicitLoops(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_isGenerateExplicitLoops(self, *args)

    def setMakeEllipMajorGreaterMinor(self, *args) -> "OdBrepBuilderFillerParams &":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_setMakeEllipMajorGreaterMinor(self, *args)

    def isMakeEllipMajorGreaterMinor(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_isMakeEllipMajorGreaterMinor(self, *args)

    def setIgnoreComplexShell(self, *args) -> "OdBrepBuilderFillerParams &":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_setIgnoreComplexShell(self, *args)

    def isIgnoreComplexShell(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_isIgnoreComplexShell(self, *args)

    def setGenerateVertices(self, *args) -> "OdBrepBuilderFillerParams &":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_setGenerateVertices(self, *args)

    def isGenerateVertices(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_isGenerateVertices(self, *args)

    def setMake2dIntervalInclude3d(self, *args) -> "OdBrepBuilderFillerParams &":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_setMake2dIntervalInclude3d(self, *args)

    def isMake2dIntervalInclude3d(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_isMake2dIntervalInclude3d(self, *args)

    def setCheckShellsConnectivity(self, *args) -> "OdBrepBuilderFillerParams &":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_setCheckShellsConnectivity(self, *args)

    def isCheckShellsConnectivity(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_isCheckShellsConnectivity(self, *args)

    def setSetFaceGsMarkersTags(self, *args) -> "OdBrepBuilderFillerParams &":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_setSetFaceGsMarkersTags(self, *args)

    def isSetFaceGsMarkersTags(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_isSetFaceGsMarkersTags(self, *args)

    def setSetEdgeGsMarkersTags(self, *args) -> "OdBrepBuilderFillerParams &":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_setSetEdgeGsMarkersTags(self, *args)

    def isSetEdgeGsMarkersTags(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_isSetEdgeGsMarkersTags(self, *args)

    def setSetVertexGsMarkersTags(self, *args) -> "OdBrepBuilderFillerParams &":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_setSetVertexGsMarkersTags(self, *args)

    def isSetVertexGsMarkersTags(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_isSetVertexGsMarkersTags(self, *args)

    def setUseFaceRegions(self, *args) -> "OdBrepBuilderFillerParams &":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_setUseFaceRegions(self, *args)

    def isUseFaceRegions(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_isUseFaceRegions(self, *args)

    def setFixFaceRegionsConnections(self, *args) -> "OdBrepBuilderFillerParams &":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_setFixFaceRegionsConnections(self, *args)

    def isFixFaceRegionsConnections(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_isFixFaceRegionsConnections(self, *args)

    def setupFor(self, *args) -> "OdBrepBuilderFillerParams &":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_setupFor(self, *args)

    def sourceDb(self, *args) -> "OdDbBaseDatabase *":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_sourceDb(self, *args)

    def sourceBrepType(self, *args) -> "OdBrepBuilderFillerParams::BrepType":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_sourceBrepType(self, *args)

    def destinationDb(self, *args) -> "OdDbBaseDatabase *":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_destinationDb(self, *args)

    def destinationBrepType(self, *args) -> "OdBrepBuilderFillerParams::BrepType":
        return _ODA_Kernel_Py3.OdBrepBuilderFillerParams_destinationBrepType(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrepBuilderFillerParams

# Register OdBrepBuilderFillerParams in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrepBuilderFillerParams_swigregister(OdBrepBuilderFillerParams)

class OdIMaterialAndColorHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIMaterialAndColorHelper

    def getFaceVisualInfo(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdIMaterialAndColorHelper_getFaceVisualInfo(self, *args)

    def getEdgeVisualInfo(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdIMaterialAndColorHelper_getEdgeVisualInfo(self, *args)

# Register OdIMaterialAndColorHelper in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIMaterialAndColorHelper_swigregister(OdIMaterialAndColorHelper)

class OdIBrLoop(OdIBrEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getFace(self, *args) -> "OdIBrFace const *":
        return _ODA_Kernel_Py3.OdIBrLoop_getFace(self, *args)

    def next(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrLoop_next(self, *args)

    def find(self, *args) -> "OdIBrCoedge const *":
        return _ODA_Kernel_Py3.OdIBrLoop_find(self, *args)

    def getParamCurve(self, *args) -> "OdGeCurve2d *":
        return _ODA_Kernel_Py3.OdIBrLoop_getParamCurve(self, *args)

    def getParamCurveAsNurb(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrLoop_getParamCurveAsNurb(self, *args)

    def getOrientedCurve(self, *args) -> "OdGeCurve3d *":
        return _ODA_Kernel_Py3.OdIBrLoop_getOrientedCurve(self, *args)

    def getOrientedCurveAsNurb(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrLoop_getOrientedCurveAsNurb(self, *args)

    def getEdgeOrientToLoop(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrLoop_getEdgeOrientToLoop(self, *args)

    def getType(self, *args) -> "BrLoopType":
        return _ODA_Kernel_Py3.OdIBrLoop_getType(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrLoop

# Register OdIBrLoop in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrLoop_swigregister(OdIBrLoop)

class OdIBrEdge(OdIBrEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getVertex1(self, *args) -> "OdIBrVertex *":
        return _ODA_Kernel_Py3.OdIBrEdge_getVertex1(self, *args)

    def getVertex2(self, *args) -> "OdIBrVertex *":
        return _ODA_Kernel_Py3.OdIBrEdge_getVertex2(self, *args)

    def getCurveType(self, *args) -> "OdGe::EntityId":
        return _ODA_Kernel_Py3.OdIBrEdge_getCurveType(self, *args)

    def getGeCurve(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrEdge_getGeCurve(self, *args)

    def getCurveAsNurb(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrEdge_getCurveAsNurb(self, *args)

    def getOrientToCurve(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrEdge_getOrientToCurve(self, *args)

    def next(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrEdge_next(self, *args)

    def hasColor(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrEdge_hasColor(self, *args)

    def getTrueColor(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrEdge_getTrueColor(self, *args)

    def getColorIndex(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrEdge_getColorIndex(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrEdge

# Register OdIBrEdge in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrEdge_swigregister(OdIBrEdge)

class OdIBrCoedge(OdIBrEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getEdge(self, *args) -> "OdIBrEdge const *":
        return _ODA_Kernel_Py3.OdIBrCoedge_getEdge(self, *args)

    def getLoop(self, *args) -> "OdIBrLoop const *":
        return _ODA_Kernel_Py3.OdIBrCoedge_getLoop(self, *args)

    def nextOnEdge(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrCoedge_nextOnEdge(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrCoedge

# Register OdIBrCoedge in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrCoedge_swigregister(OdIBrCoedge)

class OdIBaseTraverser(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBaseTraverser

    def done(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBaseTraverser_done(self, *args)

    def next(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBaseTraverser_next(self, *args)

    def restart(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBaseTraverser_restart(self, *args)

    def isNull(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBaseTraverser_isNull(self, *args)

# Register OdIBaseTraverser in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBaseTraverser_swigregister(OdIBaseTraverser)

class OdIBrMeshControl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrMeshControl

    def setMaxSubdivisions(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrMeshControl_setMaxSubdivisions(self, *args)

    def getMaxSubdivisions(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrMeshControl_getMaxSubdivisions(self, *args)

    def setMaxNodeSpacing(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrMeshControl_setMaxNodeSpacing(self, *args)

    def getMaxNodeSpacing(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrMeshControl_getMaxNodeSpacing(self, *args)

    def setAngTol(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrMeshControl_setAngTol(self, *args)

    def getAngTol(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrMeshControl_getAngTol(self, *args)

    def setDistTol(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrMeshControl_setDistTol(self, *args)

    def getDistTol(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrMeshControl_getDistTol(self, *args)

# Register OdIBrMeshControl in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrMeshControl_swigregister(OdIBrMeshControl)

class OdIBrMesh(OdIBrMeshEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrMesh

# Register OdIBrMesh in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrMesh_swigregister(OdIBrMesh)

class OdIBrElement(OdIBrMeshEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrElement

# Register OdIBrElement in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrElement_swigregister(OdIBrElement)

class OdGeSegmentChain2d(OdGeSplineEnt2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeSegmentChain2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeSegmentChain2d(*args))

    def setClosed(self, *args) -> "OdGeSegmentChain2d &":
        return _ODA_Kernel_Py3.OdGeSegmentChain2d_setClosed(self, *args)

    def bulges(self, *args) -> "OdGeDoubleArray &":
        return _ODA_Kernel_Py3.OdGeSegmentChain2d_bulges(self, *args)

    def getBulges(self, *args) -> "OdGeDoubleArray const &":
        return _ODA_Kernel_Py3.OdGeSegmentChain2d_getBulges(self, *args)

    def vertices(self, *args) -> "OdGePoint2dArray &":
        return _ODA_Kernel_Py3.OdGeSegmentChain2d_vertices(self, *args)

    def getVertices(self, *args) -> "OdGePoint2dArray const &":
        return _ODA_Kernel_Py3.OdGeSegmentChain2d_getVertices(self, *args)

    def hasBulges(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeSegmentChain2d_hasBulges(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeSegmentChain2d

# Register OdGeSegmentChain2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeSegmentChain2d_swigregister(OdGeSegmentChain2d)

class OdPolyPolygon3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdPolyPolygon3d_swiginit(self, _ODA_Kernel_Py3.new_OdPolyPolygon3d(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdPolyPolygon3d

    def newContour(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPolyPolygon3d_newContour(self, *args)

    def addToCurrentContour(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPolyPolygon3d_addToCurrentContour(self, *args)

    def removeLastContour(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPolyPolygon3d_removeLastContour(self, *args)

    def setGrowLength(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPolyPolygon3d_setGrowLength(self, *args)

    def setGrowLenght(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPolyPolygon3d_setGrowLenght(self, *args)

    def points(self, *args) -> "OdGePoint3dArray const &":
        return _ODA_Kernel_Py3.OdPolyPolygon3d_points(self, *args)

    def counts(self, *args) -> "OdInt32Array const &":
        return _ODA_Kernel_Py3.OdPolyPolygon3d_counts(self, *args)

# Register OdPolyPolygon3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdPolyPolygon3d_swigregister(OdPolyPolygon3d)

class OdGeBoundBlock2d(OdGeEntity2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeBoundBlock2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeBoundBlock2d(*args))

    def getMinMaxPoints(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeBoundBlock2d_getMinMaxPoints(self, *args)

    def get(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeBoundBlock2d_get(self, *args)

    def set(self, *args) -> "OdGeBoundBlock2d &":
        return _ODA_Kernel_Py3.OdGeBoundBlock2d_set(self, *args)

    def extend(self, *args) -> "OdGeBoundBlock2d &":
        return _ODA_Kernel_Py3.OdGeBoundBlock2d_extend(self, *args)

    def swell(self, *args) -> "OdGeBoundBlock2d &":
        return _ODA_Kernel_Py3.OdGeBoundBlock2d_swell(self, *args)

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeBoundBlock2d_contains(self, *args)

    def isDisjoint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeBoundBlock2d_isDisjoint(self, *args)

    def isBox(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeBoundBlock2d_isBox(self, *args)

    def setToBox(self, *args) -> "OdGeBoundBlock2d &":
        return _ODA_Kernel_Py3.OdGeBoundBlock2d_setToBox(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeBoundBlock2d

# Register OdGeBoundBlock2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeBoundBlock2d_swigregister(OdGeBoundBlock2d)

class OdGeCircArc3d(OdGeCurve3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeCircArc3d_swiginit(self, _ODA_Kernel_Py3.new_OdGeCircArc3d(*args))

    def closestPointToPlane(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeCircArc3d_closestPointToPlane(self, *args)

    def intersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCircArc3d_intersectWith(self, *args)

    def projIntersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCircArc3d_projIntersectWith(self, *args)

    def tangent(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCircArc3d_tangent(self, *args)

    def getPlane(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCircArc3d_getPlane(self, *args)

    def isInside(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCircArc3d_isInside(self, *args)

    def center(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeCircArc3d_center(self, *args)

    def normal(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeCircArc3d_normal(self, *args)

    def refVec(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeCircArc3d_refVec(self, *args)

    def radius(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCircArc3d_radius(self, *args)

    def startAng(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCircArc3d_startAng(self, *args)

    def endAng(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCircArc3d_endAng(self, *args)

    def startPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeCircArc3d_startPoint(self, *args)

    def endPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeCircArc3d_endPoint(self, *args)

    def setCenter(self, *args) -> "OdGeCircArc3d &":
        return _ODA_Kernel_Py3.OdGeCircArc3d_setCenter(self, *args)

    def setAxes(self, *args) -> "OdGeCircArc3d &":
        return _ODA_Kernel_Py3.OdGeCircArc3d_setAxes(self, *args)

    def setRadius(self, *args) -> "OdGeCircArc3d &":
        return _ODA_Kernel_Py3.OdGeCircArc3d_setRadius(self, *args)

    def setAngles(self, *args) -> "OdGeCircArc3d &":
        return _ODA_Kernel_Py3.OdGeCircArc3d_setAngles(self, *args)

    def set(self, *args) -> "OdGeCircArc3d &":
        return _ODA_Kernel_Py3.OdGeCircArc3d_set(self, *args)

    def getGeomExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCircArc3d_getGeomExtents(self, *args)

    def joinWith(self, *args) -> "OdGeCircArc3d &":
        return _ODA_Kernel_Py3.OdGeCircArc3d_joinWith(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeCircArc3d

# Register OdGeCircArc3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeCircArc3d_swigregister(OdGeCircArc3d)

kOdDbIdModified = _ODA_Kernel_Py3.kOdDbIdModified
kOdDbIdErased = _ODA_Kernel_Py3.kOdDbIdErased
kOdDbIdProcessed = _ODA_Kernel_Py3.kOdDbIdProcessed
kOdDbIdLoading = _ODA_Kernel_Py3.kOdDbIdLoading
kOdDbIdTruncXref = _ODA_Kernel_Py3.kOdDbIdTruncXref
kOdDbIdOwned = _ODA_Kernel_Py3.kOdDbIdOwned
kOdDbIdReferenced = _ODA_Kernel_Py3.kOdDbIdReferenced
kOdDbIdJustAppended = _ODA_Kernel_Py3.kOdDbIdJustAppended
kOdDbIdUserMask = _ODA_Kernel_Py3.kOdDbIdUserMask
kErasedPermanently = _ODA_Kernel_Py3.kErasedPermanently
kObjectLeftOnDisk = _ODA_Kernel_Py3.kObjectLeftOnDisk
kObjectSameOnDisk = _ODA_Kernel_Py3.kObjectSameOnDisk
kObjectPageOnDisk = _ODA_Kernel_Py3.kObjectPageOnDisk
kOdDbIdMapping = _ODA_Kernel_Py3.kOdDbIdMapping
kOdDbIdMapFlag = _ODA_Kernel_Py3.kOdDbIdMapFlag
kOdDbIdMapOwnerXlated = _ODA_Kernel_Py3.kOdDbIdMapOwnerXlated
kOdDbIdMapCloned = _ODA_Kernel_Py3.kOdDbIdMapCloned
kOdDbIdMapPrimary = _ODA_Kernel_Py3.kOdDbIdMapPrimary
kOdDbIdMapMask = _ODA_Kernel_Py3.kOdDbIdMapMask
kOdDbIdMappingMask = _ODA_Kernel_Py3.kOdDbIdMappingMask
kOdDbIdRedirected = _ODA_Kernel_Py3.kOdDbIdRedirected
kOdDbIdNoAutoLock = _ODA_Kernel_Py3.kOdDbIdNoAutoLock
kOdDbObjectLocked = _ODA_Kernel_Py3.kOdDbObjectLocked
kComposeForLoadCalled = _ODA_Kernel_Py3.kComposeForLoadCalled
kOdDatabaseFlag = _ODA_Kernel_Py3.kOdDatabaseFlag
kOdDbIdBlkChgIterFlag = _ODA_Kernel_Py3.kOdDbIdBlkChgIterFlag
kOdDbIdNdxUpdtDataFlag = _ODA_Kernel_Py3.kOdDbIdNdxUpdtDataFlag
kOdDbIdSingleAuxData = _ODA_Kernel_Py3.kOdDbIdSingleAuxData
kOdDbIdIndexData = _ODA_Kernel_Py3.kOdDbIdIndexData
kOdDbIdMappingData = _ODA_Kernel_Py3.kOdDbIdMappingData
kOdDbIdPaging = _ODA_Kernel_Py3.kOdDbIdPaging
kOdDbNullTransResident = _ODA_Kernel_Py3.kOdDbNullTransResident
class OdDbStub(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbStub

    def database(self, *args) -> "OdDbBaseDatabase *":
        return _ODA_Kernel_Py3.OdDbStub_database(self, *args)

    def getHandle(self, *args) -> "OdDbHandle const &":
        return _ODA_Kernel_Py3.OdDbStub_getHandle(self, *args)

    def getObject(self, *args) -> "OdRxObjectPtr &":
        return _ODA_Kernel_Py3.OdDbStub_getObject(self, *args)

    def setObject(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbStub_setObject(self, *args)

    def lockObject(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbStub_lockObject(self, *args)

    def unlockObject(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbStub_unlockObject(self, *args)

    def isObjectLocked(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbStub_isObjectLocked(self, *args)

    def owner(self, *args) -> "OdDbStub const *":
        return _ODA_Kernel_Py3.OdDbStub_owner(self, *args)

    def setOwner(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbStub_setOwner(self, *args)

# Register OdDbStub in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbStub_swigregister(OdDbStub)

def oddbSwapHandles(*args) -> "void":
    return _ODA_Kernel_Py3.oddbSwapHandles(*args)

class OdDbStubFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbStubFactory

    def createStub(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdDbStubFactory_createStub(self, *args)

    def freeStub(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbStubFactory_freeStub(self, *args)

# Register OdDbStubFactory in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbStubFactory_swigregister(OdDbStubFactory)

class OdDbStubAutoLock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdDbStubAutoLock_swiginit(self, _ODA_Kernel_Py3.new_OdDbStubAutoLock(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbStubAutoLock

# Register OdDbStubAutoLock in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbStubAutoLock_swigregister(OdDbStubAutoLock)

class OdGsCacheRedirectionNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsCacheRedirectionNode_swiginit(self, _ODA_Kernel_Py3.new_OdGsCacheRedirectionNode(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsCacheRedirectionNode

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsCacheRedirectionNode >":
        return _ODA_Kernel_Py3.OdGsCacheRedirectionNode_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsCacheRedirectionNode_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsCacheRedirectionNode_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsCacheRedirectionNode_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsCache >":
        return _ODA_Kernel_Py3.OdGsCacheRedirectionNode_createObject(*args)

    def numNodes(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsCacheRedirectionNode_numNodes(self, *args)

    def gsNodeAt(self, *args) -> "OdGsCache *":
        return _ODA_Kernel_Py3.OdGsCacheRedirectionNode_gsNodeAt(self, *args)

    def setGsNodeAt(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsCacheRedirectionNode_setGsNodeAt(self, *args)

    def model(self, *args) -> "OdGsModel *":
        return _ODA_Kernel_Py3.OdGsCacheRedirectionNode_model(self, *args)

    def setDrawableNull(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsCacheRedirectionNode_setDrawableNull(self, *args)

    def extents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsCacheRedirectionNode_extents(self, *args)

# Register OdGsCacheRedirectionNode in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsCacheRedirectionNode_swigregister(OdGsCacheRedirectionNode)

def OdGsCacheRedirectionNode_cast(*args) -> "OdSmartPtr< OdGsCacheRedirectionNode >":
    return _ODA_Kernel_Py3.OdGsCacheRedirectionNode_cast(*args)

def OdGsCacheRedirectionNode_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsCacheRedirectionNode_desc(*args)

def OdGsCacheRedirectionNode_createObject(*args) -> "OdSmartPtr< OdGsCache >":
    return _ODA_Kernel_Py3.OdGsCacheRedirectionNode_createObject(*args)


def odgsGetGsCacheRedirectionManager(*args) -> "OdGsCacheRedirectionManager *":
    return _ODA_Kernel_Py3.odgsGetGsCacheRedirectionManager(*args)
class OdThumbnailImage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_ODA_Kernel_Py3.OdThumbnailImage_header_get, _ODA_Kernel_Py3.OdThumbnailImage_header_set)
    bmp = property(_ODA_Kernel_Py3.OdThumbnailImage_bmp_get, _ODA_Kernel_Py3.OdThumbnailImage_bmp_set)
    wmf = property(_ODA_Kernel_Py3.OdThumbnailImage_wmf_get, _ODA_Kernel_Py3.OdThumbnailImage_wmf_set)
    png = property(_ODA_Kernel_Py3.OdThumbnailImage_png_get, _ODA_Kernel_Py3.OdThumbnailImage_png_set)

    def hasHeader(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdThumbnailImage_hasHeader(self, *args)

    def hasBmp(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdThumbnailImage_hasBmp(self, *args)

    def hasWmf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdThumbnailImage_hasWmf(self, *args)

    def hasPng(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdThumbnailImage_hasPng(self, *args)

    def getNumEntries(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdThumbnailImage_getNumEntries(self, *args)

    def convPngToBmp(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdThumbnailImage_convPngToBmp(self, *args)

    def convBmpToPng(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdThumbnailImage_convBmpToPng(self, *args)

    def setImageData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdThumbnailImage_setImageData(self, *args)

    def getImageData(self, *args) -> "void const *":
        return _ODA_Kernel_Py3.OdThumbnailImage_getImageData(self, *args)

    def setRasterImage(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdThumbnailImage_setRasterImage(self, *args)

    def getRasterImage(self, *args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdThumbnailImage_getRasterImage(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdThumbnailImage_swiginit(self, _ODA_Kernel_Py3.new_OdThumbnailImage(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdThumbnailImage

# Register OdThumbnailImage in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdThumbnailImage_swigregister(OdThumbnailImage)

class OdTfDatabase(OdTfObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdTfDatabase >":
        return _ODA_Kernel_Py3.OdTfDatabase_cast(*args)

    @staticmethod
    def desc(*args) -> "OdTfClass *":
        return _ODA_Kernel_Py3.OdTfDatabase_desc(*args)

    def isA(self, *args) -> "OdTfClass *":
        return _ODA_Kernel_Py3.OdTfDatabase_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdTfDatabase_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdTfDatabase >":
        return _ODA_Kernel_Py3.OdTfDatabase_createObject(*args)

    def getHandle(self, *args) -> "OdDbHandle":
        return _ODA_Kernel_Py3.OdTfDatabase_getHandle(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdTfDatabase

# Register OdTfDatabase in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdTfDatabase_swigregister(OdTfDatabase)

def OdTfDatabase_cast(*args) -> "OdSmartPtr< OdTfDatabase >":
    return _ODA_Kernel_Py3.OdTfDatabase_cast(*args)

def OdTfDatabase_desc(*args) -> "OdTfClass *":
    return _ODA_Kernel_Py3.OdTfDatabase_desc(*args)

def OdTfDatabase_createObject(*args) -> "OdSmartPtr< OdTfDatabase >":
    return _ODA_Kernel_Py3.OdTfDatabase_createObject(*args)

class OdTfFiler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def database(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdTfFiler_database(self, *args)

    def seek(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_seek(self, *args)

    def tell(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdTfFiler_tell(self, *args)

    def rdBool(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTfFiler_rdBool(self, *args)

    def rdString(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdTfFiler_rdString(self, *args)

    def rdBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_rdBytes(self, *args)

    def rdInt8(self, *args) -> "OdInt8":
        return _ODA_Kernel_Py3.OdTfFiler_rdInt8(self, *args)

    def rdUInt8(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdTfFiler_rdUInt8(self, *args)

    def rdInt16(self, *args) -> "OdInt16":
        return _ODA_Kernel_Py3.OdTfFiler_rdInt16(self, *args)

    def rdInt32(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdTfFiler_rdInt32(self, *args)

    def rdInt64(self, *args) -> "OdInt64":
        return _ODA_Kernel_Py3.OdTfFiler_rdInt64(self, *args)

    def rdDouble(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdTfFiler_rdDouble(self, *args)

    def rdDbHandle(self, *args) -> "OdDbHandle":
        return _ODA_Kernel_Py3.OdTfFiler_rdDbHandle(self, *args)

    def rdSoftOwnershipId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdTfFiler_rdSoftOwnershipId(self, *args)

    def rdHardOwnershipId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdTfFiler_rdHardOwnershipId(self, *args)

    def rdHardPointerId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdTfFiler_rdHardPointerId(self, *args)

    def rdSoftPointerId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdTfFiler_rdSoftPointerId(self, *args)

    def rdPoint2d(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdTfFiler_rdPoint2d(self, *args)

    def rdPoint3d(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdTfFiler_rdPoint3d(self, *args)

    def rdVector2d(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.OdTfFiler_rdVector2d(self, *args)

    def rdVector3d(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdTfFiler_rdVector3d(self, *args)

    def rdScale3d(self, *args) -> "OdGeScale3d":
        return _ODA_Kernel_Py3.OdTfFiler_rdScale3d(self, *args)

    def wrBool(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrBool(self, *args)

    def wrString(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrString(self, *args)

    def wrBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrBytes(self, *args)

    def wrInt8(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrInt8(self, *args)

    def wrUInt8(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrUInt8(self, *args)

    def wrInt16(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrInt16(self, *args)

    def wrInt32(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrInt32(self, *args)

    def wrInt64(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrInt64(self, *args)

    def wrDouble(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrDouble(self, *args)

    def wrDbHandle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrDbHandle(self, *args)

    def wrSoftOwnershipId(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrSoftOwnershipId(self, *args)

    def wrHardOwnershipId(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrHardOwnershipId(self, *args)

    def wrSoftPointerId(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrSoftPointerId(self, *args)

    def wrHardPointerId(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrHardPointerId(self, *args)

    def wrPoint2d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrPoint2d(self, *args)

    def wrPoint3d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrPoint3d(self, *args)

    def wrVector2d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrVector2d(self, *args)

    def wrVector3d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrVector3d(self, *args)

    def wrScale3d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrScale3d(self, *args)

    def wrSubobject(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrSubobject(self, *args)

    def rdSubobject(self, *args) -> "char const *":
        return _ODA_Kernel_Py3.OdTfFiler_rdSubobject(self, *args)

    def wrDateTime(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_wrDateTime(self, *args)

    def rdDateTime(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfFiler_rdDateTime(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdTfFiler

# Register OdTfFiler in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdTfFiler_swigregister(OdTfFiler)

class OdTfObjectPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdTfObjectPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdTfObjectPE_queryX(self, *args)

    def schemaVersion(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdTfObjectPE_schemaVersion(self, *args)

    def schema(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdTfObjectPE_schema(self, *args)

    def _in(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTfObjectPE__in(self, *args)

    def out(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTfObjectPE_out(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdTfObjectPE

# Register OdTfObjectPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdTfObjectPE_swigregister(OdTfObjectPE)

Element = _ODA_Kernel_Py3.Element
Condition = _ODA_Kernel_Py3.Condition
Array = _ODA_Kernel_Py3.Array
version = _ODA_Kernel_Py3.version
EndClass = _ODA_Kernel_Py3.EndClass
Mark = _ODA_Kernel_Py3.Mark
EndTagMask = _ODA_Kernel_Py3.EndTagMask
originalVersion = _ODA_Kernel_Py3.originalVersion
addInVersion = _ODA_Kernel_Py3.addInVersion
deletedInVersion = _ODA_Kernel_Py3.deletedInVersion
isCacheValue = _ODA_Kernel_Py3.isCacheValue
isBreak = _ODA_Kernel_Py3.isBreak
isTableName = _ODA_Kernel_Py3.isTableName
isContextData = _ODA_Kernel_Py3.isContextData
isTableQueue = _ODA_Kernel_Py3.isTableQueue
isTableCache = _ODA_Kernel_Py3.isTableCache
TableQueue = _ODA_Kernel_Py3.TableQueue
isSum = _ODA_Kernel_Py3.isSum
isMarkCondition = _ODA_Kernel_Py3.isMarkCondition
isOwner = _ODA_Kernel_Py3.isOwner
dwgVer = _ODA_Kernel_Py3.dwgVer
breakValue = _ODA_Kernel_Py3.breakValue
increaseOn = _ODA_Kernel_Py3.increaseOn
decreaseOn = _ODA_Kernel_Py3.decreaseOn
kTrue = _ODA_Kernel_Py3.kTrue
kFalse = _ODA_Kernel_Py3.kFalse
kNot = _ODA_Kernel_Py3.kNot
kAnd = _ODA_Kernel_Py3.kAnd
kLessThan = _ODA_Kernel_Py3.kLessThan
kGreaterThan = _ODA_Kernel_Py3.kGreaterThan
increaseIn = _ODA_Kernel_Py3.increaseIn
reduceIn = _ODA_Kernel_Py3.reduceIn
limitLen = _ODA_Kernel_Py3.limitLen
countBytes = _ODA_Kernel_Py3.countBytes
mul = _ODA_Kernel_Py3.mul
value = _ODA_Kernel_Py3.value
cacheValue = _ODA_Kernel_Py3.cacheValue
Subclass = _ODA_Kernel_Py3.Subclass
Bool = _ODA_Kernel_Py3.Bool
Byte = _ODA_Kernel_Py3.Byte
Short = _ODA_Kernel_Py3.Short
Int = _ODA_Kernel_Py3.Int
UnsignedByte = _ODA_Kernel_Py3.UnsignedByte
UnsignedShort = _ODA_Kernel_Py3.UnsignedShort
UnsignedInt = _ODA_Kernel_Py3.UnsignedInt
Long = _ODA_Kernel_Py3.Long
Double = _ODA_Kernel_Py3.Double
HexBinary = _ODA_Kernel_Py3.HexBinary
String = _ODA_Kernel_Py3.String
Handle = _ODA_Kernel_Py3.Handle
SoftOwnershipId = _ODA_Kernel_Py3.SoftOwnershipId
HardOwnershipId = _ODA_Kernel_Py3.HardOwnershipId
SoftPointerId = _ODA_Kernel_Py3.SoftPointerId
HardPointerId = _ODA_Kernel_Py3.HardPointerId
Point2d = _ODA_Kernel_Py3.Point2d
Point3d = _ODA_Kernel_Py3.Point3d
Vector2d = _ODA_Kernel_Py3.Vector2d
Vector3d = _ODA_Kernel_Py3.Vector3d
Scale3d = _ODA_Kernel_Py3.Scale3d
DateTime = _ODA_Kernel_Py3.DateTime
DataEnd = _ODA_Kernel_Py3.DataEnd
Table = _ODA_Kernel_Py3.Table
Empty = _ODA_Kernel_Py3.Empty
DoubleWithDefault = _ODA_Kernel_Py3.DoubleWithDefault
kTextLeft = _ODA_Kernel_Py3.kTextLeft
kTextCenter = _ODA_Kernel_Py3.kTextCenter
kTextRight = _ODA_Kernel_Py3.kTextRight
kTextAlign = _ODA_Kernel_Py3.kTextAlign
kTextMid = _ODA_Kernel_Py3.kTextMid
kTextFit = _ODA_Kernel_Py3.kTextFit
kTextBase = _ODA_Kernel_Py3.kTextBase
kTextBottom = _ODA_Kernel_Py3.kTextBottom
kTextVertMid = _ODA_Kernel_Py3.kTextVertMid
kTextTop = _ODA_Kernel_Py3.kTextTop
kAtLeast = _ODA_Kernel_Py3.kAtLeast
kExactly = _ODA_Kernel_Py3.kExactly
class OdSiShapeRay(OdSiShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_pointStart = property(_ODA_Kernel_Py3.OdSiShapeRay_m_pointStart_get, _ODA_Kernel_Py3.OdSiShapeRay_m_pointStart_set)
    m_vecDir = property(_ODA_Kernel_Py3.OdSiShapeRay_m_vecDir_get, _ODA_Kernel_Py3.OdSiShapeRay_m_vecDir_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdSiShapeRay_swiginit(self, _ODA_Kernel_Py3.new_OdSiShapeRay(*args))

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSiShapeRay_contains(self, *args)

    def intersects(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSiShapeRay_intersects(self, *args)

    def clone(self, *args) -> "OdSiShape *":
        return _ODA_Kernel_Py3.OdSiShapeRay_clone(self, *args)

    def transform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiShapeRay_transform(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdSiShapeRay

# Register OdSiShapeRay in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdSiShapeRay_swigregister(OdSiShapeRay)

class OdSiShapeBoundPlane(OdSiShapePlane):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_bounds = property(_ODA_Kernel_Py3.OdSiShapeBoundPlane_m_bounds_get, _ODA_Kernel_Py3.OdSiShapeBoundPlane_m_bounds_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdSiShapeBoundPlane_swiginit(self, _ODA_Kernel_Py3.new_OdSiShapeBoundPlane(*args))

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSiShapeBoundPlane_contains(self, *args)

    def intersects(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSiShapeBoundPlane_intersects(self, *args)

    def clone(self, *args) -> "OdSiShape *":
        return _ODA_Kernel_Py3.OdSiShapeBoundPlane_clone(self, *args)

    def transform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSiShapeBoundPlane_transform(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdSiShapeBoundPlane

# Register OdSiShapeBoundPlane in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdSiShapeBoundPlane_swigregister(OdSiShapeBoundPlane)

class Extent3d(OdGeExtents3d, OdSiShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def contains(self, *args) -> "bool":
        return _ODA_Kernel_Py3.Extent3d_contains(self, *args)

    def intersects(self, *args) -> "bool":
        return _ODA_Kernel_Py3.Extent3d_intersects(self, *args)
    left = _ODA_Kernel_Py3.Extent3d_left
    upon = _ODA_Kernel_Py3.Extent3d_upon
    right = _ODA_Kernel_Py3.Extent3d_right

    def makeHalf(self, *args) -> "void":
        return _ODA_Kernel_Py3.Extent3d_makeHalf(self, *args)

    def makeDouble(self, *args) -> "void":
        return _ODA_Kernel_Py3.Extent3d_makeDouble(self, *args)

    def makeCube(self, *args) -> "void":
        return _ODA_Kernel_Py3.Extent3d_makeCube(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.Extent3d_swiginit(self, _ODA_Kernel_Py3.new_Extent3d(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_Extent3d

# Register Extent3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.Extent3d_swigregister(Extent3d)

class OdRxVoidStore(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def createVoidStore(*args) -> "OdRxVoidStorePtr":
        return _ODA_Kernel_Py3.OdRxVoidStore_createVoidStore(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxVoidStore
    m_pVoid = property(_ODA_Kernel_Py3.OdRxVoidStore_m_pVoid_get, _ODA_Kernel_Py3.OdRxVoidStore_m_pVoid_set)

# Register OdRxVoidStore in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxVoidStore_swigregister(OdRxVoidStore)

def OdRxVoidStore_createVoidStore(*args) -> "OdRxVoidStorePtr":
    return _ODA_Kernel_Py3.OdRxVoidStore_createVoidStore(*args)

class OdApcThread(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def asyncProcCall(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcThread_asyncProcCall(self, *args)

    def wait(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcThread_wait(self, *args)

    def getId(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdApcThread_getId(self, *args)

    def hasException(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdApcThread_hasException(self, *args)

    def processException(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcThread_processException(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdApcThread

# Register OdApcThread in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdApcThread_swigregister(OdApcThread)

class OdApcAtom(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def apcEntryPoint(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcAtom_apcEntryPoint(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdApcAtom

# Register OdApcAtom in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdApcAtom_swigregister(OdApcAtom)

class OdApcObjectPool(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def reserve(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcObjectPool_reserve(self, *args)

    def take(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdApcObjectPool_take(self, *args)

    def put(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcObjectPool_put(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdApcObjectPool

# Register OdApcObjectPool in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdApcObjectPool_swigregister(OdApcObjectPool)

class OdApcQueue(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def framework(self, *args) -> "OdRxThreadPoolService &":
        return _ODA_Kernel_Py3.OdApcQueue_framework(self, *args)

    def setAtomPoolRef(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcQueue_setAtomPoolRef(self, *args)

    def addEntryPoint(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcQueue_addEntryPoint(self, *args)

    def wait(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcQueue_wait(self, *args)

    def executeMainThreadAction(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcQueue_executeMainThreadAction(self, *args)

    def numThreads(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdApcQueue_numThreads(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdApcQueue

# Register OdApcQueue in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdApcQueue_swigregister(OdApcQueue)

class OdApcDataReadWriteDispatcher(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def enter(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcDataReadWriteDispatcher_enter(self, *args)

    def leave(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcDataReadWriteDispatcher_leave(self, *args)

    def lock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcDataReadWriteDispatcher_lock(self, *args)

    def unlock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcDataReadWriteDispatcher_unlock(self, *args)

    def lockFromInside(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcDataReadWriteDispatcher_lockFromInside(self, *args)

    def unlockFromInside(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcDataReadWriteDispatcher_unlockFromInside(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdApcDataReadWriteDispatcher

# Register OdApcDataReadWriteDispatcher in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdApcDataReadWriteDispatcher_swigregister(OdApcDataReadWriteDispatcher)

class OdApcEvent(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcEvent_set(self, *args)

    def reset(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcEvent_reset(self, *args)

    def wait(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcEvent_wait(self, *args)

    def waitAndReset(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcEvent_waitAndReset(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdApcEvent

# Register OdApcEvent in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdApcEvent_swigregister(OdApcEvent)

class OdApcGateway(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def lockByMain(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcGateway_lockByMain(self, *args)

    def waitByMain(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcGateway_waitByMain(self, *args)

    def unlockByMain(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcGateway_unlockByMain(self, *args)

    def passBySecondary(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcGateway_passBySecondary(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdApcGateway

# Register OdApcGateway in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdApcGateway_swigregister(OdApcGateway)

class OdApcLoopedGateway(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def init(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcLoopedGateway_init(self, *args)

    def passByMain(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcLoopedGateway_passByMain(self, *args)

    def waitByMain(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcLoopedGateway_waitByMain(self, *args)

    def passByMainNoWait(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcLoopedGateway_passByMainNoWait(self, *args)

    def passBySecondary(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcLoopedGateway_passBySecondary(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdApcLoopedGateway

# Register OdApcLoopedGateway in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdApcLoopedGateway_swigregister(OdApcLoopedGateway)

kStQueueNoFlags = _ODA_Kernel_Py3.kStQueueNoFlags
kStQueueExecByMain = _ODA_Kernel_Py3.kStQueueExecByMain
kStQueueForceTopLevel = _ODA_Kernel_Py3.kStQueueForceTopLevel
kStQueueLastFlag = _ODA_Kernel_Py3.kStQueueLastFlag
kMtQueueNoFlags = _ODA_Kernel_Py3.kMtQueueNoFlags
kMtQueueForceNewThreads = _ODA_Kernel_Py3.kMtQueueForceNewThreads
kMtQueueAllowExecByMain = _ODA_Kernel_Py3.kMtQueueAllowExecByMain
kMtQueueForceTopLevel = _ODA_Kernel_Py3.kMtQueueForceTopLevel
kMtQueueLastFlag = _ODA_Kernel_Py3.kMtQueueLastFlag
class OdRxThreadPoolService(OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxThreadPoolService >":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxThreadPoolService >":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_createObject(*args)

    def numCPUs(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_numCPUs(self, *args)

    def numPhysicalCores(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_numPhysicalCores(self, *args)

    def numThreads(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_numThreads(self, *args)

    def numFreeThreads(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_numFreeThreads(self, *args)

    def newThread(self, *args) -> "OdApcThreadPtr":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_newThread(self, *args)

    def newSTQueue(self, *args) -> "OdApcQueuePtr":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_newSTQueue(self, *args)

    def newMTQueue(self, *args) -> "OdApcQueuePtr":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_newMTQueue(self, *args)

    def newObjectPool(self, *args) -> "OdApcObjectPoolPtr":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_newObjectPool(self, *args)

    def newEvent(self, *args) -> "OdApcEventPtr":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_newEvent(self, *args)

    def newGateway(self, *args) -> "OdApcGatewayPtr":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_newGateway(self, *args)

    def newLoopedGateway(self, *args) -> "OdApcLoopedGatewayPtr":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_newLoopedGateway(self, *args)

    def executeMainThreadAction(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_executeMainThreadAction(self, *args)

    def registerExternalThreads(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_registerExternalThreads(self, *args)

    def unregisterExternalThreads(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_unregisterExternalThreads(self, *args)

    def externalThreadStart(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_externalThreadStart(self, *args)

    def externalThreadStop(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_externalThreadStop(self, *args)

    def setExternalMainThreadFunc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_setExternalMainThreadFunc(self, *args)

    def getExternalMainThreadFunc(self, *args) -> "ExecuteMainThreadFunc":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_getExternalMainThreadFunc(self, *args)

    def getMainThreadId(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_getMainThreadId(self, *args)

    def getCurrentThreadId(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_getCurrentThreadId(self, *args)

    def isMainThread(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxThreadPoolService_isMainThread(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxThreadPoolService

# Register OdRxThreadPoolService in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxThreadPoolService_swigregister(OdRxThreadPoolService)

def OdRxThreadPoolService_cast(*args) -> "OdSmartPtr< OdRxThreadPoolService >":
    return _ODA_Kernel_Py3.OdRxThreadPoolService_cast(*args)

def OdRxThreadPoolService_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxThreadPoolService_desc(*args)

def OdRxThreadPoolService_createObject(*args) -> "OdSmartPtr< OdRxThreadPoolService >":
    return _ODA_Kernel_Py3.OdRxThreadPoolService_createObject(*args)

class OdApcQueueHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdApcQueueHelper_swiginit(self, _ODA_Kernel_Py3.new_OdApcQueueHelper(*args))

    def initST(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcQueueHelper_initST(self, *args)

    def initMT(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcQueueHelper_initMT(self, *args)

    def call(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcQueueHelper_call(self, *args)

    def setAtomPoolRef(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcQueueHelper_setAtomPoolRef(self, *args)

    def wait(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcQueueHelper_wait(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdApcQueueHelper

# Register OdApcQueueHelper in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdApcQueueHelper_swigregister(OdApcQueueHelper)

class OdApcQueueHelperArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def initST(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcQueueHelperArray_initST(self, *args)

    def wait(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdApcQueueHelperArray_wait(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdApcQueueHelperArray_swiginit(self, _ODA_Kernel_Py3.new_OdApcQueueHelperArray(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdApcQueueHelperArray

# Register OdApcQueueHelperArray in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdApcQueueHelperArray_swigregister(OdApcQueueHelperArray)

class OdAsyncForEachBase(OdApcAtom):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def for_each(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAsyncForEachBase_for_each(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdAsyncForEachBase

# Register OdAsyncForEachBase in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdAsyncForEachBase_swigregister(OdAsyncForEachBase)

lit_ = _ODA_Kernel_Py3.lit_
lit_0 = _ODA_Kernel_Py3.lit_0
lit_1 = _ODA_Kernel_Py3.lit_1
lit_2 = _ODA_Kernel_Py3.lit_2
lit_3 = _ODA_Kernel_Py3.lit_3
lit_4 = _ODA_Kernel_Py3.lit_4
lit_5 = _ODA_Kernel_Py3.lit_5
lit_6 = _ODA_Kernel_Py3.lit_6
lit_7 = _ODA_Kernel_Py3.lit_7
lit_8 = _ODA_Kernel_Py3.lit_8
lit_9 = _ODA_Kernel_Py3.lit_9
lit_A = _ODA_Kernel_Py3.lit_A
lit_B = _ODA_Kernel_Py3.lit_B
lit_C = _ODA_Kernel_Py3.lit_C
lit_D = _ODA_Kernel_Py3.lit_D
lit_E = _ODA_Kernel_Py3.lit_E
lit_F = _ODA_Kernel_Py3.lit_F
lit_G = _ODA_Kernel_Py3.lit_G
lit_H = _ODA_Kernel_Py3.lit_H
lit_I = _ODA_Kernel_Py3.lit_I
lit_J = _ODA_Kernel_Py3.lit_J
lit_K = _ODA_Kernel_Py3.lit_K
lit_L = _ODA_Kernel_Py3.lit_L
lit_M = _ODA_Kernel_Py3.lit_M
lit_N = _ODA_Kernel_Py3.lit_N
lit_O = _ODA_Kernel_Py3.lit_O
lit_P = _ODA_Kernel_Py3.lit_P
lit_Q = _ODA_Kernel_Py3.lit_Q
lit_R = _ODA_Kernel_Py3.lit_R
lit_S = _ODA_Kernel_Py3.lit_S
lit_T = _ODA_Kernel_Py3.lit_T
lit_U = _ODA_Kernel_Py3.lit_U
lit_V = _ODA_Kernel_Py3.lit_V
lit_W = _ODA_Kernel_Py3.lit_W
lit_X = _ODA_Kernel_Py3.lit_X
lit_Y = _ODA_Kernel_Py3.lit_Y
lit_Z = _ODA_Kernel_Py3.lit_Z
lit_a = _ODA_Kernel_Py3.lit_a
lit_b = _ODA_Kernel_Py3.lit_b
lit_c = _ODA_Kernel_Py3.lit_c
lit_d = _ODA_Kernel_Py3.lit_d
lit_e = _ODA_Kernel_Py3.lit_e
lit_f = _ODA_Kernel_Py3.lit_f
lit_g = _ODA_Kernel_Py3.lit_g
lit_h = _ODA_Kernel_Py3.lit_h
lit_i = _ODA_Kernel_Py3.lit_i
lit_j = _ODA_Kernel_Py3.lit_j
lit_k = _ODA_Kernel_Py3.lit_k
lit_l = _ODA_Kernel_Py3.lit_l
lit_m = _ODA_Kernel_Py3.lit_m
lit_n = _ODA_Kernel_Py3.lit_n
lit_o = _ODA_Kernel_Py3.lit_o
lit_p = _ODA_Kernel_Py3.lit_p
lit_q = _ODA_Kernel_Py3.lit_q
lit_r = _ODA_Kernel_Py3.lit_r
lit_s = _ODA_Kernel_Py3.lit_s
lit_t = _ODA_Kernel_Py3.lit_t
lit_u = _ODA_Kernel_Py3.lit_u
lit_v = _ODA_Kernel_Py3.lit_v
lit_w = _ODA_Kernel_Py3.lit_w
lit_x = _ODA_Kernel_Py3.lit_x
lit_y = _ODA_Kernel_Py3.lit_y
lit_z = _ODA_Kernel_Py3.lit_z
class OdRxRasterServices(OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kUnknown = _ODA_Kernel_Py3.OdRxRasterServices_kUnknown
    kBMP = _ODA_Kernel_Py3.OdRxRasterServices_kBMP
    kICO = _ODA_Kernel_Py3.OdRxRasterServices_kICO
    kJPEG = _ODA_Kernel_Py3.OdRxRasterServices_kJPEG
    kJNG = _ODA_Kernel_Py3.OdRxRasterServices_kJNG
    kKOALA = _ODA_Kernel_Py3.OdRxRasterServices_kKOALA
    kLBM = _ODA_Kernel_Py3.OdRxRasterServices_kLBM
    kIFF = _ODA_Kernel_Py3.OdRxRasterServices_kIFF
    kMNG = _ODA_Kernel_Py3.OdRxRasterServices_kMNG
    kPBM = _ODA_Kernel_Py3.OdRxRasterServices_kPBM
    kPBMRAW = _ODA_Kernel_Py3.OdRxRasterServices_kPBMRAW
    kPCD = _ODA_Kernel_Py3.OdRxRasterServices_kPCD
    kPCX = _ODA_Kernel_Py3.OdRxRasterServices_kPCX
    kPGM = _ODA_Kernel_Py3.OdRxRasterServices_kPGM
    kPGMRAW = _ODA_Kernel_Py3.OdRxRasterServices_kPGMRAW
    kPNG = _ODA_Kernel_Py3.OdRxRasterServices_kPNG
    kPPM = _ODA_Kernel_Py3.OdRxRasterServices_kPPM
    kPPMRAW = _ODA_Kernel_Py3.OdRxRasterServices_kPPMRAW
    kRAS = _ODA_Kernel_Py3.OdRxRasterServices_kRAS
    kTARGA = _ODA_Kernel_Py3.OdRxRasterServices_kTARGA
    kTIFF = _ODA_Kernel_Py3.OdRxRasterServices_kTIFF
    kWBMP = _ODA_Kernel_Py3.OdRxRasterServices_kWBMP
    kPSD = _ODA_Kernel_Py3.OdRxRasterServices_kPSD
    kCUT = _ODA_Kernel_Py3.OdRxRasterServices_kCUT
    kXBM = _ODA_Kernel_Py3.OdRxRasterServices_kXBM
    kXPM = _ODA_Kernel_Py3.OdRxRasterServices_kXPM
    kDDS = _ODA_Kernel_Py3.OdRxRasterServices_kDDS
    kGIF = _ODA_Kernel_Py3.OdRxRasterServices_kGIF
    kHDR = _ODA_Kernel_Py3.OdRxRasterServices_kHDR
    kFAXG3 = _ODA_Kernel_Py3.OdRxRasterServices_kFAXG3
    kSGI = _ODA_Kernel_Py3.OdRxRasterServices_kSGI
    kEXR = _ODA_Kernel_Py3.OdRxRasterServices_kEXR
    kJ2K = _ODA_Kernel_Py3.OdRxRasterServices_kJ2K
    kJP2 = _ODA_Kernel_Py3.OdRxRasterServices_kJP2
    kPFM = _ODA_Kernel_Py3.OdRxRasterServices_kPFM
    kPICT = _ODA_Kernel_Py3.OdRxRasterServices_kPICT
    kRAW = _ODA_Kernel_Py3.OdRxRasterServices_kRAW
    kLoadFmt = _ODA_Kernel_Py3.OdRxRasterServices_kLoadFmt
    kNoTIFFRotation = _ODA_Kernel_Py3.OdRxRasterServices_kNoTIFFRotation
    kTransparentColor = _ODA_Kernel_Py3.OdRxRasterServices_kTransparentColor
    kJpegQuality = _ODA_Kernel_Py3.OdRxRasterServices_kJpegQuality
    kTiffCompression = _ODA_Kernel_Py3.OdRxRasterServices_kTiffCompression
    kTiffCompressionDeflate = _ODA_Kernel_Py3.OdRxRasterServices_kTiffCompressionDeflate
    kTiffCompressionLzw = _ODA_Kernel_Py3.OdRxRasterServices_kTiffCompressionLzw
    kTiffCompressionJpeg = _ODA_Kernel_Py3.OdRxRasterServices_kTiffCompressionJpeg
    kTiffCompressionCCITTFax3 = _ODA_Kernel_Py3.OdRxRasterServices_kTiffCompressionCCITTFax3
    kTiffCompressionCCITTFax4 = _ODA_Kernel_Py3.OdRxRasterServices_kTiffCompressionCCITTFax4
    kTiffCompressionEmbedded = _ODA_Kernel_Py3.OdRxRasterServices_kTiffCompressionEmbedded
    kDithering = _ODA_Kernel_Py3.OdRxRasterServices_kDithering
    kDitheringFS = _ODA_Kernel_Py3.OdRxRasterServices_kDitheringFS
    kDitheringBayer4x4 = _ODA_Kernel_Py3.OdRxRasterServices_kDitheringBayer4x4
    kDitheringBayer8x8 = _ODA_Kernel_Py3.OdRxRasterServices_kDitheringBayer8x8
    kDitheringBayer16x16 = _ODA_Kernel_Py3.OdRxRasterServices_kDitheringBayer16x16
    kDitheringCluster6x6 = _ODA_Kernel_Py3.OdRxRasterServices_kDitheringCluster6x6
    kDitheringCluster8x8 = _ODA_Kernel_Py3.OdRxRasterServices_kDitheringCluster8x8
    kDitheringCluster16x16 = _ODA_Kernel_Py3.OdRxRasterServices_kDitheringCluster16x16
    kRescale = _ODA_Kernel_Py3.OdRxRasterServices_kRescale
    kRescaleBox = _ODA_Kernel_Py3.OdRxRasterServices_kRescaleBox
    kRescaleBicubic = _ODA_Kernel_Py3.OdRxRasterServices_kRescaleBicubic
    kRescaleBilinear = _ODA_Kernel_Py3.OdRxRasterServices_kRescaleBilinear
    kRescaleBspline = _ODA_Kernel_Py3.OdRxRasterServices_kRescaleBspline
    kRescaleCatmullrom = _ODA_Kernel_Py3.OdRxRasterServices_kRescaleCatmullrom
    kRescaleLanczos3 = _ODA_Kernel_Py3.OdRxRasterServices_kRescaleLanczos3
    kRescaleWidth = _ODA_Kernel_Py3.OdRxRasterServices_kRescaleWidth
    kRescaleHeight = _ODA_Kernel_Py3.OdRxRasterServices_kRescaleHeight
    kQuantizeNone = _ODA_Kernel_Py3.OdRxRasterServices_kQuantizeNone
    kQuantizeWU = _ODA_Kernel_Py3.OdRxRasterServices_kQuantizeWU
    kQuantizeNN = _ODA_Kernel_Py3.OdRxRasterServices_kQuantizeNN
    kQuantizeLFP = _ODA_Kernel_Py3.OdRxRasterServices_kQuantizeLFP

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxRasterServices >":
        return _ODA_Kernel_Py3.OdRxRasterServices_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxRasterServices_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxRasterServices_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxRasterServices_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxRasterServices >":
        return _ODA_Kernel_Py3.OdRxRasterServices_createObject(*args)

    def loadRasterImage(self, *args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdRxRasterServices_loadRasterImage(self, *args)

    def createRasterImage(self, *args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdRxRasterServices_createRasterImage(self, *args)

    def saveRasterImage(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxRasterServices_saveRasterImage(self, *args)

    def convertRasterImage(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxRasterServices_convertRasterImage(self, *args)

    def getRasterImageTypes(self, *args) -> "OdUInt32Array":
        return _ODA_Kernel_Py3.OdRxRasterServices_getRasterImageTypes(self, *args)

    def isRasterImageTypeSupported(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxRasterServices_isRasterImageTypeSupported(self, *args)

    def mapTypeToExtension(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxRasterServices_mapTypeToExtension(self, *args)

    def mapExtensionToType(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdRxRasterServices_mapExtensionToType(self, *args)

    def getImageFormat(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdRxRasterServices_getImageFormat(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxRasterServices

# Register OdRxRasterServices in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxRasterServices_swigregister(OdRxRasterServices)

def OdRxRasterServices_cast(*args) -> "OdSmartPtr< OdRxRasterServices >":
    return _ODA_Kernel_Py3.OdRxRasterServices_cast(*args)

def OdRxRasterServices_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxRasterServices_desc(*args)

def OdRxRasterServices_createObject(*args) -> "OdSmartPtr< OdRxRasterServices >":
    return _ODA_Kernel_Py3.OdRxRasterServices_createObject(*args)

class OdRxProtocolReactor(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxProtocolReactor >":
        return _ODA_Kernel_Py3.OdRxProtocolReactor_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxProtocolReactor_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxProtocolReactor_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxProtocolReactor_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxProtocolReactor >":
        return _ODA_Kernel_Py3.OdRxProtocolReactor_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxProtocolReactor

# Register OdRxProtocolReactor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxProtocolReactor_swigregister(OdRxProtocolReactor)

def OdRxProtocolReactor_cast(*args) -> "OdSmartPtr< OdRxProtocolReactor >":
    return _ODA_Kernel_Py3.OdRxProtocolReactor_cast(*args)

def OdRxProtocolReactor_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxProtocolReactor_desc(*args)

def OdRxProtocolReactor_createObject(*args) -> "OdSmartPtr< OdRxProtocolReactor >":
    return _ODA_Kernel_Py3.OdRxProtocolReactor_createObject(*args)

class OdRxProtocolReactorIterator(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxProtocolReactorIterator >":
        return _ODA_Kernel_Py3.OdRxProtocolReactorIterator_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorIterator_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorIterator_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxProtocolReactorIterator >":
        return _ODA_Kernel_Py3.OdRxProtocolReactorIterator_createObject(*args)

    def reactorClass(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorIterator_reactorClass(self, *args)

    def start(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxProtocolReactorIterator_start(self, *args)

    def next(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxProtocolReactorIterator_next(self, *args)

    def done(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxProtocolReactorIterator_done(self, *args)

    def object(self, *args) -> "OdRxProtocolReactor *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorIterator_object(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxProtocolReactorIterator

# Register OdRxProtocolReactorIterator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxProtocolReactorIterator_swigregister(OdRxProtocolReactorIterator)

def OdRxProtocolReactorIterator_cast(*args) -> "OdSmartPtr< OdRxProtocolReactorIterator >":
    return _ODA_Kernel_Py3.OdRxProtocolReactorIterator_cast(*args)

def OdRxProtocolReactorIterator_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxProtocolReactorIterator_desc(*args)

def OdRxProtocolReactorIterator_createObject(*args) -> "OdSmartPtr< OdRxProtocolReactorIterator >":
    return _ODA_Kernel_Py3.OdRxProtocolReactorIterator_createObject(*args)

class OdRxProtocolReactorList(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxProtocolReactorList >":
        return _ODA_Kernel_Py3.OdRxProtocolReactorList_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorList_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorList_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorList_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxProtocolReactorList >":
        return _ODA_Kernel_Py3.OdRxProtocolReactorList_createObject(*args)

    def reactorClass(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorList_reactorClass(self, *args)

    def addReactor(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxProtocolReactorList_addReactor(self, *args)

    def removeReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxProtocolReactorList_removeReactor(self, *args)

    def newIterator(self, *args) -> "OdRxProtocolReactorIteratorPtr":
        return _ODA_Kernel_Py3.OdRxProtocolReactorList_newIterator(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxProtocolReactorList

# Register OdRxProtocolReactorList in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxProtocolReactorList_swigregister(OdRxProtocolReactorList)

def OdRxProtocolReactorList_cast(*args) -> "OdSmartPtr< OdRxProtocolReactorList >":
    return _ODA_Kernel_Py3.OdRxProtocolReactorList_cast(*args)

def OdRxProtocolReactorList_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxProtocolReactorList_desc(*args)

def OdRxProtocolReactorList_createObject(*args) -> "OdSmartPtr< OdRxProtocolReactorList >":
    return _ODA_Kernel_Py3.OdRxProtocolReactorList_createObject(*args)

class OdRxProtocolReactorListIterator(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxProtocolReactorListIterator >":
        return _ODA_Kernel_Py3.OdRxProtocolReactorListIterator_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorListIterator_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorListIterator_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorListIterator_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxProtocolReactorListIterator >":
        return _ODA_Kernel_Py3.OdRxProtocolReactorListIterator_createObject(*args)

    def start(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxProtocolReactorListIterator_start(self, *args)

    def next(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxProtocolReactorListIterator_next(self, *args)

    def done(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxProtocolReactorListIterator_done(self, *args)

    def object(self, *args) -> "OdRxProtocolReactorList *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorListIterator_object(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxProtocolReactorListIterator

# Register OdRxProtocolReactorListIterator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxProtocolReactorListIterator_swigregister(OdRxProtocolReactorListIterator)

def OdRxProtocolReactorListIterator_cast(*args) -> "OdSmartPtr< OdRxProtocolReactorListIterator >":
    return _ODA_Kernel_Py3.OdRxProtocolReactorListIterator_cast(*args)

def OdRxProtocolReactorListIterator_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxProtocolReactorListIterator_desc(*args)

def OdRxProtocolReactorListIterator_createObject(*args) -> "OdSmartPtr< OdRxProtocolReactorListIterator >":
    return _ODA_Kernel_Py3.OdRxProtocolReactorListIterator_createObject(*args)

class OdRxProtocolReactorManager(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxProtocolReactorManager >":
        return _ODA_Kernel_Py3.OdRxProtocolReactorManager_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorManager_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorManager_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorManager_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxProtocolReactorManager >":
        return _ODA_Kernel_Py3.OdRxProtocolReactorManager_createObject(*args)

    def createReactorList(self, *args) -> "OdRxProtocolReactorList *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorManager_createReactorList(self, *args)

    def newIterator(self, *args) -> "OdRxProtocolReactorListIteratorPtr":
        return _ODA_Kernel_Py3.OdRxProtocolReactorManager_newIterator(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxProtocolReactorManager

# Register OdRxProtocolReactorManager in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxProtocolReactorManager_swigregister(OdRxProtocolReactorManager)

def OdRxProtocolReactorManager_cast(*args) -> "OdSmartPtr< OdRxProtocolReactorManager >":
    return _ODA_Kernel_Py3.OdRxProtocolReactorManager_cast(*args)

def OdRxProtocolReactorManager_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxProtocolReactorManager_desc(*args)

def OdRxProtocolReactorManager_createObject(*args) -> "OdSmartPtr< OdRxProtocolReactorManager >":
    return _ODA_Kernel_Py3.OdRxProtocolReactorManager_createObject(*args)

class OdRxProtocolReactorManagerFactory(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxProtocolReactorManagerFactory >":
        return _ODA_Kernel_Py3.OdRxProtocolReactorManagerFactory_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorManagerFactory_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorManagerFactory_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorManagerFactory_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxProtocolReactorManagerFactory >":
        return _ODA_Kernel_Py3.OdRxProtocolReactorManagerFactory_createObject(*args)

    def createReactorManager(self, *args) -> "OdRxProtocolReactorManager *":
        return _ODA_Kernel_Py3.OdRxProtocolReactorManagerFactory_createReactorManager(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxProtocolReactorManagerFactory

# Register OdRxProtocolReactorManagerFactory in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxProtocolReactorManagerFactory_swigregister(OdRxProtocolReactorManagerFactory)

def OdRxProtocolReactorManagerFactory_cast(*args) -> "OdSmartPtr< OdRxProtocolReactorManagerFactory >":
    return _ODA_Kernel_Py3.OdRxProtocolReactorManagerFactory_cast(*args)

def OdRxProtocolReactorManagerFactory_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxProtocolReactorManagerFactory_desc(*args)

def OdRxProtocolReactorManagerFactory_createObject(*args) -> "OdSmartPtr< OdRxProtocolReactorManagerFactory >":
    return _ODA_Kernel_Py3.OdRxProtocolReactorManagerFactory_createObject(*args)

kAnnotations = _ODA_Kernel_Py3.kAnnotations
kLCDText = _ODA_Kernel_Py3.kLCDText
kNoNativeText = _ODA_Kernel_Py3.kNoNativeText
kGrayScale = _ODA_Kernel_Py3.kGrayScale
kReverseByteOrder = _ODA_Kernel_Py3.kReverseByteOrder
kDebugInfo = _ODA_Kernel_Py3.kDebugInfo
kNoCatch = _ODA_Kernel_Py3.kNoCatch
kLimitImageCache = _ODA_Kernel_Py3.kLimitImageCache
kForceHalfTone = _ODA_Kernel_Py3.kForceHalfTone
kPrinting = _ODA_Kernel_Py3.kPrinting
kDisableAAforText = _ODA_Kernel_Py3.kDisableAAforText
kDisableAAforImage = _ODA_Kernel_Py3.kDisableAAforImage
kDisableAAforGeom = _ODA_Kernel_Py3.kDisableAAforGeom
class pdf_layer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    layer_name = property(_ODA_Kernel_Py3.pdf_layer_layer_name_get, _ODA_Kernel_Py3.pdf_layer_layer_name_set)
    is_on = property(_ODA_Kernel_Py3.pdf_layer_is_on_get, _ODA_Kernel_Py3.pdf_layer_is_on_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.pdf_layer_swiginit(self, _ODA_Kernel_Py3.new_pdf_layer(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_pdf_layer

# Register pdf_layer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.pdf_layer_swigregister(pdf_layer)

class OdPdf2ImageConversionParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdPdf2ImageConversionParams_swiginit(self, _ODA_Kernel_Py3.new_OdPdf2ImageConversionParams(*args))
    bg_color = property(_ODA_Kernel_Py3.OdPdf2ImageConversionParams_bg_color_get, _ODA_Kernel_Py3.OdPdf2ImageConversionParams_bg_color_set)
    dpi = property(_ODA_Kernel_Py3.OdPdf2ImageConversionParams_dpi_get, _ODA_Kernel_Py3.OdPdf2ImageConversionParams_dpi_set)
    flags = property(_ODA_Kernel_Py3.OdPdf2ImageConversionParams_flags_get, _ODA_Kernel_Py3.OdPdf2ImageConversionParams_flags_set)
    layers = property(_ODA_Kernel_Py3.OdPdf2ImageConversionParams_layers_get, _ODA_Kernel_Py3.OdPdf2ImageConversionParams_layers_set)
    cropArea = property(_ODA_Kernel_Py3.OdPdf2ImageConversionParams_cropArea_get, _ODA_Kernel_Py3.OdPdf2ImageConversionParams_cropArea_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdPdf2ImageConversionParams

# Register OdPdf2ImageConversionParams in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdPdf2ImageConversionParams_swigregister(OdPdf2ImageConversionParams)

class OdPdf2ImageConverter(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdPdf2ImageConverter >":
        return _ODA_Kernel_Py3.OdPdf2ImageConverter_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdPdf2ImageConverter_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdPdf2ImageConverter_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdPdf2ImageConverter_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdPdf2ImageConverter >":
        return _ODA_Kernel_Py3.OdPdf2ImageConverter_createObject(*args)

    def loadPdf(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdPdf2ImageConverter_loadPdf(self, *args)

    def isLoaded(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdPdf2ImageConverter_isLoaded(self, *args)

    def getFilename(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdPdf2ImageConverter_getFilename(self, *args)

    def getPagesCount(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdPdf2ImageConverter_getPagesCount(self, *args)

    def setActivePage(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdPdf2ImageConverter_setActivePage(self, *args)

    def getActivePage(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdPdf2ImageConverter_getActivePage(self, *args)

    def getLayers(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdPdf2ImageConverter_getLayers(self, *args)

    def getPageSize(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdPdf2ImageConverter_getPageSize(self, *args)

    def convertPdf(self, *args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdPdf2ImageConverter_convertPdf(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdPdf2ImageConverter

# Register OdPdf2ImageConverter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdPdf2ImageConverter_swigregister(OdPdf2ImageConverter)

def OdPdf2ImageConverter_cast(*args) -> "OdSmartPtr< OdPdf2ImageConverter >":
    return _ODA_Kernel_Py3.OdPdf2ImageConverter_cast(*args)

def OdPdf2ImageConverter_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdPdf2ImageConverter_desc(*args)

def OdPdf2ImageConverter_createObject(*args) -> "OdSmartPtr< OdPdf2ImageConverter >":
    return _ODA_Kernel_Py3.OdPdf2ImageConverter_createObject(*args)

class OdRxPdfToRasterServices(OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxPdfToRasterServices >":
        return _ODA_Kernel_Py3.OdRxPdfToRasterServices_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxPdfToRasterServices_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxPdfToRasterServices_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxPdfToRasterServices_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxPdfToRasterServices >":
        return _ODA_Kernel_Py3.OdRxPdfToRasterServices_createObject(*args)

    def createConverter(self, *args) -> "OdPdf2ImageConverterPtr":
        return _ODA_Kernel_Py3.OdRxPdfToRasterServices_createConverter(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxPdfToRasterServices

# Register OdRxPdfToRasterServices in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxPdfToRasterServices_swigregister(OdRxPdfToRasterServices)

def OdRxPdfToRasterServices_cast(*args) -> "OdSmartPtr< OdRxPdfToRasterServices >":
    return _ODA_Kernel_Py3.OdRxPdfToRasterServices_cast(*args)

def OdRxPdfToRasterServices_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxPdfToRasterServices_desc(*args)

def OdRxPdfToRasterServices_createObject(*args) -> "OdSmartPtr< OdRxPdfToRasterServices >":
    return _ODA_Kernel_Py3.OdRxPdfToRasterServices_createObject(*args)


def odrxMultiCast(*args) -> "OdUInt32":
    return _ODA_Kernel_Py3.odrxMultiCast(*args)

def odrxMultiCastObject(*args) -> "OdUInt32":
    return _ODA_Kernel_Py3.odrxMultiCastObject(*args)

def odrxMultiCastX(*args) -> "OdUInt32":
    return _ODA_Kernel_Py3.odrxMultiCastX(*args)

def odrxMultiCastFwd_(*args) -> "OdRxObjectPtr &":
    return _ODA_Kernel_Py3.odrxMultiCastFwd_(*args)

def odrxMultiCastFwd(*args) -> "OdRxObjectPtr &":
    return _ODA_Kernel_Py3.odrxMultiCastFwd(*args)

def odrxMultiCastFwdXPrior_(*args) -> "OdRxObjectPtr &":
    return _ODA_Kernel_Py3.odrxMultiCastFwdXPrior_(*args)

def odrxMultiCastFwdXPrior(*args) -> "OdRxObjectPtr &":
    return _ODA_Kernel_Py3.odrxMultiCastFwdXPrior(*args)

def odrxMultiCastFwdObject_(*args) -> "OdUInt32":
    return _ODA_Kernel_Py3.odrxMultiCastFwdObject_(*args)

def odrxMultiCastFwdObject(*args) -> "OdUInt32":
    return _ODA_Kernel_Py3.odrxMultiCastFwdObject(*args)

def odrxMultiCastFwdX_(*args) -> "OdRxObjectPtr &":
    return _ODA_Kernel_Py3.odrxMultiCastFwdX_(*args)

def odrxMultiCastFwdX(*args) -> "OdRxObjectPtr &":
    return _ODA_Kernel_Py3.odrxMultiCastFwdX(*args)

def odrxMultiCastBk(*args) -> "OdRxObjectPtr &":
    return _ODA_Kernel_Py3.odrxMultiCastBk(*args)

def odrxMultiCastBkXPrior(*args) -> "OdRxObjectPtr &":
    return _ODA_Kernel_Py3.odrxMultiCastBkXPrior(*args)

def odrxMultiCastBkObject(*args) -> "OdUInt32":
    return _ODA_Kernel_Py3.odrxMultiCastBkObject(*args)

def odrxMultiCastBkX(*args) -> "OdRxObjectPtr &":
    return _ODA_Kernel_Py3.odrxMultiCastBkX(*args)
class OdRxMethod(OdRxMember):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxMethod >":
        return _ODA_Kernel_Py3.OdRxMethod_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxMethod_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxMethod_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxMethod_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRxMethod >":
        return _ODA_Kernel_Py3.OdRxMethod_createObject(*args)

    def invoke(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxMethod_invoke(self, *args)

    def isExecutable(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxMethod_isExecutable(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxMethod

# Register OdRxMethod in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxMethod_swigregister(OdRxMethod)

def OdRxMethod_cast(*args) -> "OdSmartPtr< OdRxMethod >":
    return _ODA_Kernel_Py3.OdRxMethod_cast(*args)

def OdRxMethod_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxMethod_desc(*args)

def OdRxMethod_createObject(*args) -> "OdSmartPtr< OdRxMethod >":
    return _ODA_Kernel_Py3.OdRxMethod_createObject(*args)


def odrxInitialize(*args) -> "bool":
    return _ODA_Kernel_Py3.odrxInitialize(*args)

def odrxUninitialize(*args) -> "void":
    return _ODA_Kernel_Py3.odrxUninitialize(*args)

def odActivate(*args) -> "OdAnsiString const &, OdAnsiString const &":
    return _ODA_Kernel_Py3.odActivate(*args)

def odCleanUpStaticData(*args) -> "void":
    return _ODA_Kernel_Py3.odCleanUpStaticData(*args)
ODRX_STATIC_MODULE_PATH = _ODA_Kernel_Py3.ODRX_STATIC_MODULE_PATH
class OdRxPropDesc(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def name(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdRxPropDesc_name(self, *args)

    def prop_get(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdRxPropDesc_prop_get(self, *args)

    def prop_put(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxPropDesc_prop_put(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxPropDesc

# Register OdRxPropDesc in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxPropDesc_swigregister(OdRxPropDesc)

class OdRxCategory(OdRxMember):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRxCategory >":
        return _ODA_Kernel_Py3.OdRxCategory_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxCategory_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRxCategory_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRxCategory_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRxCategory_createObject(*args)

    def removeChild(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxCategory_removeChild(self, *args)

    def findDescendant(self, *args) -> "OdRxCategory *":
        return _ODA_Kernel_Py3.OdRxCategory_findDescendant(self, *args)

    @staticmethod
    def rootCategory(*args) -> "OdRxCategory *":
        return _ODA_Kernel_Py3.OdRxCategory_rootCategory(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxCategory

# Register OdRxCategory in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxCategory_swigregister(OdRxCategory)

def OdRxCategory_cast(*args) -> "OdSmartPtr< OdRxCategory >":
    return _ODA_Kernel_Py3.OdRxCategory_cast(*args)

def OdRxCategory_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRxCategory_desc(*args)

def OdRxCategory_createObject(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdRxCategory_createObject(*args)

def OdRxCategory_rootCategory(*args) -> "OdRxCategory *":
    return _ODA_Kernel_Py3.OdRxCategory_rootCategory(*args)

class OdRasterConvertPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRasterConvertPE >":
        return _ODA_Kernel_Py3.OdRasterConvertPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRasterConvertPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRasterConvertPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRasterConvertPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRasterConvertPE >":
        return _ODA_Kernel_Py3.OdRasterConvertPE_createObject(*args)

    def convertImage(self, *args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdRasterConvertPE_convertImage(self, *args)
    kDwgBehaviour = _ODA_Kernel_Py3.OdRasterConvertPE_kDwgBehaviour
    kDgnBehaviour = _ODA_Kernel_Py3.OdRasterConvertPE_kDgnBehaviour

    def setAdjustmentsBehaviour(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRasterConvertPE_setAdjustmentsBehaviour(self, *args)

    def adjustmentsBehaviour(self, *args) -> "OdRasterConvertPE::AdjustmentsBehaviour":
        return _ODA_Kernel_Py3.OdRasterConvertPE_adjustmentsBehaviour(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRasterConvertPE

# Register OdRasterConvertPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRasterConvertPE_swigregister(OdRasterConvertPE)

def OdRasterConvertPE_cast(*args) -> "OdSmartPtr< OdRasterConvertPE >":
    return _ODA_Kernel_Py3.OdRasterConvertPE_cast(*args)

def OdRasterConvertPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRasterConvertPE_desc(*args)

def OdRasterConvertPE_createObject(*args) -> "OdSmartPtr< OdRasterConvertPE >":
    return _ODA_Kernel_Py3.OdRasterConvertPE_createObject(*args)

class OdRasterProcessingServices(OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdRasterProcessingServices >":
        return _ODA_Kernel_Py3.OdRasterProcessingServices_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRasterProcessingServices_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdRasterProcessingServices_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdRasterProcessingServices_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdRasterProcessingServices >":
        return _ODA_Kernel_Py3.OdRasterProcessingServices_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRasterProcessingServices

# Register OdRasterProcessingServices in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRasterProcessingServices_swigregister(OdRasterProcessingServices)

def OdRasterProcessingServices_cast(*args) -> "OdSmartPtr< OdRasterProcessingServices >":
    return _ODA_Kernel_Py3.OdRasterProcessingServices_cast(*args)

def OdRasterProcessingServices_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdRasterProcessingServices_desc(*args)

def OdRasterProcessingServices_createObject(*args) -> "OdSmartPtr< OdRasterProcessingServices >":
    return _ODA_Kernel_Py3.OdRasterProcessingServices_createObject(*args)

class OdRawByteData(OdByteData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def init(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRawByteData_init(self, *args)

    def bytesLeft(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdRawByteData_bytesLeft(self, *args)

    def read(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRawByteData_read(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRawByteData

# Register OdRawByteData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRawByteData_swigregister(OdRawByteData)

kA3DLooseCompression = _ODA_Kernel_Py3.kA3DLooseCompression
kA3DMeddiumCompression = _ODA_Kernel_Py3.kA3DMeddiumCompression
kA3DHighCompression = _ODA_Kernel_Py3.kA3DHighCompression
PDF3D_ENUMS_PRCRenderingMode_kDefaultMode = _ODA_Kernel_Py3.PDF3D_ENUMS_PRCRenderingMode_kDefaultMode
PDF3D_ENUMS_PRCRenderingMode_kSolid = _ODA_Kernel_Py3.PDF3D_ENUMS_PRCRenderingMode_kSolid
PDF3D_ENUMS_PRCRenderingMode_kSolidWireframe = _ODA_Kernel_Py3.PDF3D_ENUMS_PRCRenderingMode_kSolidWireframe
PDF3D_ENUMS_PRCRenderingMode_kSolidOutline = _ODA_Kernel_Py3.PDF3D_ENUMS_PRCRenderingMode_kSolidOutline
PDF3D_ENUMS_PRCRenderingMode_kBoundingBox = _ODA_Kernel_Py3.PDF3D_ENUMS_PRCRenderingMode_kBoundingBox
PDF3D_ENUMS_PRCRenderingMode_kTransparent = _ODA_Kernel_Py3.PDF3D_ENUMS_PRCRenderingMode_kTransparent
PDF3D_ENUMS_PRCRenderingMode_kTransparentWireframe = _ODA_Kernel_Py3.PDF3D_ENUMS_PRCRenderingMode_kTransparentWireframe
PDF3D_ENUMS_PRCRenderingMode_kTransparentBoundingBox = _ODA_Kernel_Py3.PDF3D_ENUMS_PRCRenderingMode_kTransparentBoundingBox
PDF3D_ENUMS_PRCRenderingMode_kTransparentBoundingBoxOutline = _ODA_Kernel_Py3.PDF3D_ENUMS_PRCRenderingMode_kTransparentBoundingBoxOutline
PDF3D_ENUMS_PRCRenderingMode_kIllustration = _ODA_Kernel_Py3.PDF3D_ENUMS_PRCRenderingMode_kIllustration
PDF3D_ENUMS_PRCRenderingMode_kShadedIllustration = _ODA_Kernel_Py3.PDF3D_ENUMS_PRCRenderingMode_kShadedIllustration
PDF3D_ENUMS_PRCRenderingMode_kWireframe = _ODA_Kernel_Py3.PDF3D_ENUMS_PRCRenderingMode_kWireframe
PDF3D_ENUMS_PRCRenderingMode_kShadedWireframe = _ODA_Kernel_Py3.PDF3D_ENUMS_PRCRenderingMode_kShadedWireframe
PDF3D_ENUMS_PRCRenderingMode_kHiddenWireframe = _ODA_Kernel_Py3.PDF3D_ENUMS_PRCRenderingMode_kHiddenWireframe
PDF3D_ENUMS_PRCRenderingMode_kVertices = _ODA_Kernel_Py3.PDF3D_ENUMS_PRCRenderingMode_kVertices
PDF3D_ENUMS_PRCRenderingMode_kShadedVertices = _ODA_Kernel_Py3.PDF3D_ENUMS_PRCRenderingMode_kShadedVertices
class OdOleItemHandlerBase(OdOleItemHandler):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdOleItemHandlerBase >":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdOleItemHandlerBase >":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_createObject(*args)

    def load(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_load(self, *args)

    def save(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_save(self, *args)

    def draw(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_draw(self, *args)

    def type(self, *args) -> "OdOleItemHandler::Type":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_type(self, *args)

    def linkName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_linkName(self, *args)

    def linkPath(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_linkPath(self, *args)

    def userType(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_userType(self, *args)

    def drawAspect(self, *args) -> "OdOleItemHandler::DvAspect":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_drawAspect(self, *args)

    def setDrawAspect(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_setDrawAspect(self, *args)

    def itemId(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_itemId(self, *args)

    def setItemId(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_setItemId(self, *args)

    def adviseType(self, *args) -> "OdOleItemHandler::DvAspect":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_adviseType(self, *args)

    def setAdviseType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_setAdviseType(self, *args)

    def monikerAssigned(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_monikerAssigned(self, *args)

    def setMonikerAssigned(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_setMonikerAssigned(self, *args)

    def oleVersion(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_oleVersion(self, *args)

    def setOleVersion(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_setOleVersion(self, *args)

    def outputQuality(self, *args) -> "OdOleItemHandler::PlotQuality":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_outputQuality(self, *args)

    def setOutputQuality(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_setOutputQuality(self, *args)

    def getOleClientItem(self, *args) -> "COleClientItem *":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_getOleClientItem(self, *args)

    def embedRaster(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_embedRaster(self, *args)

    def getRaster(self, *args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_getRaster(self, *args)

    def getWmfData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdOleItemHandlerBase_getWmfData(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdOleItemHandlerBase

# Register OdOleItemHandlerBase in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdOleItemHandlerBase_swigregister(OdOleItemHandlerBase)

def OdOleItemHandlerBase_cast(*args) -> "OdSmartPtr< OdOleItemHandlerBase >":
    return _ODA_Kernel_Py3.OdOleItemHandlerBase_cast(*args)

def OdOleItemHandlerBase_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdOleItemHandlerBase_desc(*args)

def OdOleItemHandlerBase_createObject(*args) -> "OdSmartPtr< OdOleItemHandlerBase >":
    return _ODA_Kernel_Py3.OdOleItemHandlerBase_createObject(*args)

class OdOleItemSimplestHandler(OdOleItemHandlerBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getCompoundDocumentDataSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdOleItemSimplestHandler_getCompoundDocumentDataSize(self, *args)

    def getCompoundDocument(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdOleItemSimplestHandler_getCompoundDocument(self, *args)

    def setCompoundDocument(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdOleItemSimplestHandler_setCompoundDocument(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdOleItemSimplestHandler

# Register OdOleItemSimplestHandler in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdOleItemSimplestHandler_swigregister(OdOleItemSimplestHandler)


def odutWcMatchNoCase(*args) -> "bool":
    return _ODA_Kernel_Py3.odutWcMatchNoCase(*args)

def odutWcMatch(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.odutWcMatch(*args)

def odutWcReplace(*args) -> "OdString const &, OdString const &, OdString const &, OdString &":
    return _ODA_Kernel_Py3.odutWcReplace(*args)

def OdClearFontTable(*args) -> "void":
    return _ODA_Kernel_Py3.OdClearFontTable(*args)
class OdTrueTypeFontBase(OdFont):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdTrueTypeFontBase >":
        return _ODA_Kernel_Py3.OdTrueTypeFontBase_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdTrueTypeFontBase_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdTrueTypeFontBase_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdTrueTypeFontBase_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdTrueTypeFontBase >":
        return _ODA_Kernel_Py3.OdTrueTypeFontBase_createObject(*args)

    def getGlyphIndexes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTrueTypeFontBase_getGlyphIndexes(self, *args)

    def isSupportExtendedLayouting(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTrueTypeFontBase_isSupportExtendedLayouting(self, *args)

    def isSupportReorder(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTrueTypeFontBase_isSupportReorder(self, *args)

    def getSubstituteFontByChar(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdTrueTypeFontBase_getSubstituteFontByChar(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdTrueTypeFontBase

# Register OdTrueTypeFontBase in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdTrueTypeFontBase_swigregister(OdTrueTypeFontBase)

def OdTrueTypeFontBase_cast(*args) -> "OdSmartPtr< OdTrueTypeFontBase >":
    return _ODA_Kernel_Py3.OdTrueTypeFontBase_cast(*args)

def OdTrueTypeFontBase_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdTrueTypeFontBase_desc(*args)

def OdTrueTypeFontBase_createObject(*args) -> "OdSmartPtr< OdTrueTypeFontBase >":
    return _ODA_Kernel_Py3.OdTrueTypeFontBase_createObject(*args)

class OdTimeProvider(OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getTimeFromServer(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTimeProvider_getTimeFromServer(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdTimeProvider

# Register OdTimeProvider in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdTimeProvider_swigregister(OdTimeProvider)

class OdRandomGen(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRandomGen

    def clone(self, *args) -> "OdRandomGen *":
        return _ODA_Kernel_Py3.OdRandomGen_clone(self, *args)

    def setSeed(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRandomGen_setSeed(self, *args)

    def getSeed(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdRandomGen_getSeed(self, *args)

    def getRange(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRandomGen_getRange(self, *args)

    def generate(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdRandomGen_generate(self, *args)

# Register OdRandomGen in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRandomGen_swigregister(OdRandomGen)

class OdRandom(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRandom

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdRandom_swiginit(self, _ODA_Kernel_Py3.new_OdRandom(*args))

    def generator(self, *args) -> "OdRandomGen const &":
        return _ODA_Kernel_Py3.OdRandom_generator(self, *args)

    def genUInt64(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdRandom_genUInt64(self, *args)

    def genInt64(self, *args) -> "OdInt64":
        return _ODA_Kernel_Py3.OdRandom_genInt64(self, *args)

    def genUInt(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdRandom_genUInt(self, *args)

    def genInt(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdRandom_genInt(self, *args)

    def genBool(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRandom_genBool(self, *args)

    def genDouble(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdRandom_genDouble(self, *args)

# Register OdRandom in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRandom_swigregister(OdRandom)

class OdRandomGenMinstd(OdRandomGen):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdRandomGenMinstd_swiginit(self, _ODA_Kernel_Py3.new_OdRandomGenMinstd(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRandomGenMinstd

    def clone(self, *args) -> "OdRandomGenMinstd *":
        return _ODA_Kernel_Py3.OdRandomGenMinstd_clone(self, *args)

    def setSeed(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRandomGenMinstd_setSeed(self, *args)

    def getSeed(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdRandomGenMinstd_getSeed(self, *args)

    def getRange(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRandomGenMinstd_getRange(self, *args)

    def generate(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdRandomGenMinstd_generate(self, *args)

# Register OdRandomGenMinstd in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRandomGenMinstd_swigregister(OdRandomGenMinstd)

class OdPlatformStreamer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def rdInt16(*args) -> "OdInt16":
        return _ODA_Kernel_Py3.OdPlatformStreamer_rdInt16(*args)

    @staticmethod
    def rdUInt16(*args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdPlatformStreamer_rdUInt16(*args)

    @staticmethod
    def rdInt32(*args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdPlatformStreamer_rdInt32(*args)

    @staticmethod
    def rdInt64(*args) -> "OdInt64":
        return _ODA_Kernel_Py3.OdPlatformStreamer_rdInt64(*args)

    @staticmethod
    def rdFloat(*args) -> "float":
        return _ODA_Kernel_Py3.OdPlatformStreamer_rdFloat(*args)

    @staticmethod
    def rdDouble(*args) -> "double":
        return _ODA_Kernel_Py3.OdPlatformStreamer_rdDouble(*args)

    @staticmethod
    def rd2Doubles(*args) -> "void":
        return _ODA_Kernel_Py3.OdPlatformStreamer_rd2Doubles(*args)

    @staticmethod
    def rd3Doubles(*args) -> "void":
        return _ODA_Kernel_Py3.OdPlatformStreamer_rd3Doubles(*args)

    @staticmethod
    def rdDoubles(*args) -> "void":
        return _ODA_Kernel_Py3.OdPlatformStreamer_rdDoubles(*args)

    @staticmethod
    def wrInt16(*args) -> "void":
        return _ODA_Kernel_Py3.OdPlatformStreamer_wrInt16(*args)

    @staticmethod
    def wrUInt16(*args) -> "void":
        return _ODA_Kernel_Py3.OdPlatformStreamer_wrUInt16(*args)

    @staticmethod
    def wrInt32(*args) -> "void":
        return _ODA_Kernel_Py3.OdPlatformStreamer_wrInt32(*args)

    @staticmethod
    def wrInt64(*args) -> "void":
        return _ODA_Kernel_Py3.OdPlatformStreamer_wrInt64(*args)

    @staticmethod
    def wrFloat(*args) -> "void":
        return _ODA_Kernel_Py3.OdPlatformStreamer_wrFloat(*args)

    @staticmethod
    def wrDouble(*args) -> "void":
        return _ODA_Kernel_Py3.OdPlatformStreamer_wrDouble(*args)

    @staticmethod
    def wr2Doubles(*args) -> "void":
        return _ODA_Kernel_Py3.OdPlatformStreamer_wr2Doubles(*args)

    @staticmethod
    def wr3Doubles(*args) -> "void":
        return _ODA_Kernel_Py3.OdPlatformStreamer_wr3Doubles(*args)

    @staticmethod
    def wrDoubles(*args) -> "void":
        return _ODA_Kernel_Py3.OdPlatformStreamer_wrDoubles(*args)

    @staticmethod
    def getUnicodeStrFromBuffer(*args) -> "OdString":
        return _ODA_Kernel_Py3.OdPlatformStreamer_getUnicodeStrFromBuffer(*args)

    @staticmethod
    def putUnicodeStrToBuffer(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdPlatformStreamer_putUnicodeStrToBuffer(*args)

    @staticmethod
    def wrString(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdPlatformStreamer_wrString(*args)

    @staticmethod
    def rdString(*args) -> "OdString":
        return _ODA_Kernel_Py3.OdPlatformStreamer_rdString(*args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdPlatformStreamer_swiginit(self, _ODA_Kernel_Py3.new_OdPlatformStreamer(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdPlatformStreamer

# Register OdPlatformStreamer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdPlatformStreamer_swigregister(OdPlatformStreamer)

def OdPlatformStreamer_rdInt16(*args) -> "OdInt16":
    return _ODA_Kernel_Py3.OdPlatformStreamer_rdInt16(*args)

def OdPlatformStreamer_rdUInt16(*args) -> "OdUInt16":
    return _ODA_Kernel_Py3.OdPlatformStreamer_rdUInt16(*args)

def OdPlatformStreamer_rdInt32(*args) -> "OdInt32":
    return _ODA_Kernel_Py3.OdPlatformStreamer_rdInt32(*args)

def OdPlatformStreamer_rdInt64(*args) -> "OdInt64":
    return _ODA_Kernel_Py3.OdPlatformStreamer_rdInt64(*args)

def OdPlatformStreamer_rdFloat(*args) -> "float":
    return _ODA_Kernel_Py3.OdPlatformStreamer_rdFloat(*args)

def OdPlatformStreamer_rdDouble(*args) -> "double":
    return _ODA_Kernel_Py3.OdPlatformStreamer_rdDouble(*args)

def OdPlatformStreamer_rd2Doubles(*args) -> "void":
    return _ODA_Kernel_Py3.OdPlatformStreamer_rd2Doubles(*args)

def OdPlatformStreamer_rd3Doubles(*args) -> "void":
    return _ODA_Kernel_Py3.OdPlatformStreamer_rd3Doubles(*args)

def OdPlatformStreamer_rdDoubles(*args) -> "void":
    return _ODA_Kernel_Py3.OdPlatformStreamer_rdDoubles(*args)

def OdPlatformStreamer_wrInt16(*args) -> "void":
    return _ODA_Kernel_Py3.OdPlatformStreamer_wrInt16(*args)

def OdPlatformStreamer_wrUInt16(*args) -> "void":
    return _ODA_Kernel_Py3.OdPlatformStreamer_wrUInt16(*args)

def OdPlatformStreamer_wrInt32(*args) -> "void":
    return _ODA_Kernel_Py3.OdPlatformStreamer_wrInt32(*args)

def OdPlatformStreamer_wrInt64(*args) -> "void":
    return _ODA_Kernel_Py3.OdPlatformStreamer_wrInt64(*args)

def OdPlatformStreamer_wrFloat(*args) -> "void":
    return _ODA_Kernel_Py3.OdPlatformStreamer_wrFloat(*args)

def OdPlatformStreamer_wrDouble(*args) -> "void":
    return _ODA_Kernel_Py3.OdPlatformStreamer_wrDouble(*args)

def OdPlatformStreamer_wr2Doubles(*args) -> "void":
    return _ODA_Kernel_Py3.OdPlatformStreamer_wr2Doubles(*args)

def OdPlatformStreamer_wr3Doubles(*args) -> "void":
    return _ODA_Kernel_Py3.OdPlatformStreamer_wr3Doubles(*args)

def OdPlatformStreamer_wrDoubles(*args) -> "void":
    return _ODA_Kernel_Py3.OdPlatformStreamer_wrDoubles(*args)

def OdPlatformStreamer_getUnicodeStrFromBuffer(*args) -> "OdString":
    return _ODA_Kernel_Py3.OdPlatformStreamer_getUnicodeStrFromBuffer(*args)

def OdPlatformStreamer_putUnicodeStrToBuffer(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdPlatformStreamer_putUnicodeStrToBuffer(*args)

def OdPlatformStreamer_wrString(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdPlatformStreamer_wrString(*args)

def OdPlatformStreamer_rdString(*args) -> "OdString":
    return _ODA_Kernel_Py3.OdPlatformStreamer_rdString(*args)

class OdPerfTimerBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdPerfTimerBase

    def initialize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPerfTimerBase_initialize(self, *args)

    def destroy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPerfTimerBase_destroy(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPerfTimerBase_clear(self, *args)

    def start(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPerfTimerBase_start(self, *args)

    def stop(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPerfTimerBase_stop(self, *args)

    def countedSec(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdPerfTimerBase_countedSec(self, *args)

    def countedMSec(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdPerfTimerBase_countedMSec(self, *args)

    def permanentSec(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdPerfTimerBase_permanentSec(self, *args)

    def permanentMSec(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdPerfTimerBase_permanentMSec(self, *args)

    def isStarted(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdPerfTimerBase_isStarted(self, *args)

    @staticmethod
    def createTiming(*args) -> "OdPerfTimerBase *":
        return _ODA_Kernel_Py3.OdPerfTimerBase_createTiming(*args)

    @staticmethod
    def destroyTiming(*args) -> "void":
        return _ODA_Kernel_Py3.OdPerfTimerBase_destroyTiming(*args)

# Register OdPerfTimerBase in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdPerfTimerBase_swigregister(OdPerfTimerBase)

def OdPerfTimerBase_createTiming(*args) -> "OdPerfTimerBase *":
    return _ODA_Kernel_Py3.OdPerfTimerBase_createTiming(*args)

def OdPerfTimerBase_destroyTiming(*args) -> "void":
    return _ODA_Kernel_Py3.OdPerfTimerBase_destroyTiming(*args)

class OdPerfTimerWrapper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdPerfTimerWrapper_swiginit(self, _ODA_Kernel_Py3.new_OdPerfTimerWrapper(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdPerfTimerWrapper

    def getTimer(self, *args) -> "OdPerfTimerBase *":
        return _ODA_Kernel_Py3.OdPerfTimerWrapper_getTimer(self, *args)

# Register OdPerfTimerWrapper in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdPerfTimerWrapper_swigregister(OdPerfTimerWrapper)

class OdLoggerBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def logMessage(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdLoggerBase_logMessage(self, *args)

    def logWarning(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdLoggerBase_logWarning(self, *args)

    def logError(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdLoggerBase_logError(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdLoggerBase

# Register OdLoggerBase in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdLoggerBase_swigregister(OdLoggerBase)

class OdFontServices(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdFontServices >":
        return _ODA_Kernel_Py3.OdFontServices_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdFontServices_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdFontServices_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdFontServices_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdFontServices >":
        return _ODA_Kernel_Py3.OdFontServices_createObject(*args)

    def loadStyleRec(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdFontServices_loadStyleRec(self, *args)

    def getFontFilePath(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdFontServices_getFontFilePath(self, *args)

    def getBigFontFilePath(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdFontServices_getBigFontFilePath(self, *args)

    def defaultFont(self, *args) -> "OdFontPtr":
        return _ODA_Kernel_Py3.OdFontServices_defaultFont(self, *args)

    def getTTFParamFromFile(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdFontServices_getTTFParamFromFile(self, *args)

    def ttfFileNameByDescriptor(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdFontServices_ttfFileNameByDescriptor(self, *args)

    def getSystemFontFolders(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdFontServices_getSystemFontFolders(self, *args)

    def collectFilePathsInDirectory(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdFontServices_collectFilePathsInDirectory(self, *args)

    def iFindFile(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdFontServices_iFindFile(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdFontServices

# Register OdFontServices in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdFontServices_swigregister(OdFontServices)

def OdFontServices_cast(*args) -> "OdSmartPtr< OdFontServices >":
    return _ODA_Kernel_Py3.OdFontServices_cast(*args)

def OdFontServices_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdFontServices_desc(*args)

def OdFontServices_createObject(*args) -> "OdSmartPtr< OdFontServices >":
    return _ODA_Kernel_Py3.OdFontServices_createObject(*args)

class OdError_WithId(OdError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdError_WithId_swiginit(self, _ODA_Kernel_Py3.new_OdError_WithId(*args))

    def getObjectId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdError_WithId_getObjectId(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdError_WithId

# Register OdError_WithId in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdError_WithId_swigregister(OdError_WithId)

class OdCertParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sCertSubject = property(_ODA_Kernel_Py3.OdCertParameters_sCertSubject_get, _ODA_Kernel_Py3.OdCertParameters_sCertSubject_set)
    sCertIssuer = property(_ODA_Kernel_Py3.OdCertParameters_sCertIssuer_get, _ODA_Kernel_Py3.OdCertParameters_sCertIssuer_set)
    sCertSerialNum = property(_ODA_Kernel_Py3.OdCertParameters_sCertSerialNum_get, _ODA_Kernel_Py3.OdCertParameters_sCertSerialNum_set)
    m_CertValidFrom = property(_ODA_Kernel_Py3.OdCertParameters_m_CertValidFrom_get, _ODA_Kernel_Py3.OdCertParameters_m_CertValidFrom_set)
    m_CertValidTo = property(_ODA_Kernel_Py3.OdCertParameters_m_CertValidTo_get, _ODA_Kernel_Py3.OdCertParameters_m_CertValidTo_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdCertParameters_swiginit(self, _ODA_Kernel_Py3.new_OdCertParameters(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdCertParameters

# Register OdCertParameters in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdCertParameters_swigregister(OdCertParameters)

class OdDwfxSignatureHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDwfxSignatureHandler
    kSuccess = _ODA_Kernel_Py3.OdDwfxSignatureHandler_kSuccess
    kInvalidSignature = _ODA_Kernel_Py3.OdDwfxSignatureHandler_kInvalidSignature
    kCertificateChainProblem = _ODA_Kernel_Py3.OdDwfxSignatureHandler_kCertificateChainProblem
    kNotSigned = _ODA_Kernel_Py3.OdDwfxSignatureHandler_kNotSigned

    def setCertParameters(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDwfxSignatureHandler_setCertParameters(self, *args)

    def signPackage(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDwfxSignatureHandler_signPackage(self, *args)

    def removeExistingSignature(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDwfxSignatureHandler_removeExistingSignature(self, *args)

    def validatePackageSignature(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDwfxSignatureHandler_validatePackageSignature(self, *args)

# Register OdDwfxSignatureHandler in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDwfxSignatureHandler_swigregister(OdDwfxSignatureHandler)

class OdDwfxSignatureHandlerModule(OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getDwfxSignatureHandler(self, *args) -> "OdDwfxSignatureHandlerPtr":
        return _ODA_Kernel_Py3.OdDwfxSignatureHandlerModule_getDwfxSignatureHandler(self, *args)

    def getSuitableCertificatesList(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdDwfxSignatureHandlerModule_getSuitableCertificatesList(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDwfxSignatureHandlerModule

# Register OdDwfxSignatureHandlerModule in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDwfxSignatureHandlerModule_swigregister(OdDwfxSignatureHandlerModule)

class OdCertificateShortDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_CertSubject = property(_ODA_Kernel_Py3.OdCertificateShortDesc_m_CertSubject_get, _ODA_Kernel_Py3.OdCertificateShortDesc_m_CertSubject_set)
    m_CertIssuer = property(_ODA_Kernel_Py3.OdCertificateShortDesc_m_CertIssuer_get, _ODA_Kernel_Py3.OdCertificateShortDesc_m_CertIssuer_set)
    m_CertSerialNum = property(_ODA_Kernel_Py3.OdCertificateShortDesc_m_CertSerialNum_get, _ODA_Kernel_Py3.OdCertificateShortDesc_m_CertSerialNum_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdCertificateShortDesc_swiginit(self, _ODA_Kernel_Py3.new_OdCertificateShortDesc(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdCertificateShortDesc

# Register OdCertificateShortDesc in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdCertificateShortDesc_swigregister(OdCertificateShortDesc)

class OdCertificateDescription(OdCertificateShortDesc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_CertValidFrom = property(_ODA_Kernel_Py3.OdCertificateDescription_m_CertValidFrom_get, _ODA_Kernel_Py3.OdCertificateDescription_m_CertValidFrom_set)
    m_CertValidTo = property(_ODA_Kernel_Py3.OdCertificateDescription_m_CertValidTo_get, _ODA_Kernel_Py3.OdCertificateDescription_m_CertValidTo_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdCertificateDescription_swiginit(self, _ODA_Kernel_Py3.new_OdCertificateDescription(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdCertificateDescription

# Register OdCertificateDescription in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdCertificateDescription_swigregister(OdCertificateDescription)

class OdCertificateObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdCertificateObject

    def getCertDescription(self, *args) -> "OdCertificateDescription":
        return _ODA_Kernel_Py3.OdCertificateObject_getCertDescription(self, *args)

    def isTrusted(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCertificateObject_isTrusted(self, *args)

# Register OdCertificateObject in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdCertificateObject_swigregister(OdCertificateObject)

class OdSubjectKeyIdAttrib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdSubjectKeyIdAttrib

    def getData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdSubjectKeyIdAttrib_getData(self, *args)

# Register OdSubjectKeyIdAttrib in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdSubjectKeyIdAttrib_swigregister(OdSubjectKeyIdAttrib)

class OdCryptSignMessagePara(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdCryptSignMessagePara

# Register OdCryptSignMessagePara in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdCryptSignMessagePara_swigregister(OdCryptSignMessagePara)

class OdSignatureBaseDescription(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdSignatureBaseDescription
    m_certDesc = property(_ODA_Kernel_Py3.OdSignatureBaseDescription_m_certDesc_get, _ODA_Kernel_Py3.OdSignatureBaseDescription_m_certDesc_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdSignatureBaseDescription_swiginit(self, _ODA_Kernel_Py3.new_OdSignatureBaseDescription(*args))

# Register OdSignatureBaseDescription in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdSignatureBaseDescription_swigregister(OdSignatureBaseDescription)

class OdCryptoServices(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdCryptoServices >":
        return _ODA_Kernel_Py3.OdCryptoServices_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdCryptoServices_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdCryptoServices_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdCryptoServices_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdCryptoServices >":
        return _ODA_Kernel_Py3.OdCryptoServices_createObject(*args)

    def getPersonalCertsWithTrustedStatus(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdCryptoServices_getPersonalCertsWithTrustedStatus(self, *args)

    def getCertObjByShortDesc(self, *args) -> "OdCertificateObjectPtr":
        return _ODA_Kernel_Py3.OdCryptoServices_getCertObjByShortDesc(self, *args)
    kSuccess = _ODA_Kernel_Py3.OdCryptoServices_kSuccess
    kHasNoSignature = _ODA_Kernel_Py3.OdCryptoServices_kHasNoSignature
    kBadSignature = _ODA_Kernel_Py3.OdCryptoServices_kBadSignature
    kCertificateChainProblem = _ODA_Kernel_Py3.OdCryptoServices_kCertificateChainProblem
    kBadAlgId = _ODA_Kernel_Py3.OdCryptoServices_kBadAlgId
    kNoSigner = _ODA_Kernel_Py3.OdCryptoServices_kNoSigner
    kUnexpectedMsgType = _ODA_Kernel_Py3.OdCryptoServices_kUnexpectedMsgType
    kInvalidArg = _ODA_Kernel_Py3.OdCryptoServices_kInvalidArg
    kUnknownError = _ODA_Kernel_Py3.OdCryptoServices_kUnknownError

    def newSubjectKeyIdentifierAttr(self, *args) -> "OdSubjectKeyIdAttribPtr":
        return _ODA_Kernel_Py3.OdCryptoServices_newSubjectKeyIdentifierAttr(self, *args)

    def newCryptSignMessagePara(self, *args) -> "OdCryptSignMessageParaPtr":
        return _ODA_Kernel_Py3.OdCryptoServices_newCryptSignMessagePara(self, *args)

    def generateDetachedSignature(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCryptoServices_generateDetachedSignature(self, *args)

    def verifyDetachedSignature(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCryptoServices_verifyDetachedSignature(self, *args)

    def getCertFromDetachedSignature(self, *args) -> "OdCertificateObjectPtr":
        return _ODA_Kernel_Py3.OdCryptoServices_getCertFromDetachedSignature(self, *args)

    def getSubjectKeyIdFromDetachedSignature(self, *args) -> "OdSubjectKeyIdAttribPtr":
        return _ODA_Kernel_Py3.OdCryptoServices_getSubjectKeyIdFromDetachedSignature(self, *args)

    def initSessionKeyToEncryptData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCryptoServices_initSessionKeyToEncryptData(self, *args)

    def resetSessionKeyToEncryptData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCryptoServices_resetSessionKeyToEncryptData(self, *args)

    def encryptData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCryptoServices_encryptData(self, *args)

    def decryptData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCryptoServices_decryptData(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdCryptoServices

# Register OdCryptoServices in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdCryptoServices_swigregister(OdCryptoServices)

def OdCryptoServices_cast(*args) -> "OdSmartPtr< OdCryptoServices >":
    return _ODA_Kernel_Py3.OdCryptoServices_cast(*args)

def OdCryptoServices_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdCryptoServices_desc(*args)

def OdCryptoServices_createObject(*args) -> "OdSmartPtr< OdCryptoServices >":
    return _ODA_Kernel_Py3.OdCryptoServices_createObject(*args)


def getMIFIndex(*args) -> "int":
    return _ODA_Kernel_Py3.getMIFIndex(*args)

def isMBCBCodepage(*args) -> "bool":
    return _ODA_Kernel_Py3.isMBCBCodepage(*args)

def isMIFCodepage(*args) -> "bool":
    return _ODA_Kernel_Py3.isMIFCodepage(*args)

def checkTheSameCP(*args) -> "OdCodePageId":
    return _ODA_Kernel_Py3.checkTheSameCP(*args)
class OdBlob(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def rdBool(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBlob_rdBool(self, *args)

    def wrBool(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBlob_wrBool(self, *args)

    def rdInt8(self, *args) -> "OdInt8":
        return _ODA_Kernel_Py3.OdBlob_rdInt8(self, *args)

    def wrInt8(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBlob_wrInt8(self, *args)

    def rdInt16(self, *args) -> "OdInt16":
        return _ODA_Kernel_Py3.OdBlob_rdInt16(self, *args)

    def wrInt16(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBlob_wrInt16(self, *args)

    def rdInt32(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdBlob_rdInt32(self, *args)

    def wrInt32(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBlob_wrInt32(self, *args)

    def rdInt64(self, *args) -> "OdInt64":
        return _ODA_Kernel_Py3.OdBlob_rdInt64(self, *args)

    def wrInt64(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBlob_wrInt64(self, *args)

    def rdDouble(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdBlob_rdDouble(self, *args)

    def wrDouble(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBlob_wrDouble(self, *args)

    def rdPoint3d(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdBlob_rdPoint3d(self, *args)

    def wrPoint3d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBlob_wrPoint3d(self, *args)

    def rdVector3d(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdBlob_rdVector3d(self, *args)

    def wrVector3d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBlob_wrVector3d(self, *args)

    def rdAddress(self, *args) -> "void *":
        return _ODA_Kernel_Py3.OdBlob_rdAddress(self, *args)

    def wrAddress(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBlob_wrAddress(self, *args)

    def rdBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBlob_rdBytes(self, *args)

    def wrBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBlob_wrBytes(self, *args)

    def rdPoints2d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBlob_rdPoints2d(self, *args)

    def wrPoints2d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBlob_wrPoints2d(self, *args)

    def rdPoints3d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBlob_rdPoints3d(self, *args)

    def wrPoints3d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBlob_wrPoints3d(self, *args)

    def wrDoubles(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBlob_wrDoubles(self, *args)

    def rdDoubles(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBlob_rdDoubles(self, *args)

    def rdObjectIds(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBlob_rdObjectIds(self, *args)

    def rdObjectId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdBlob_rdObjectId(self, *args)

    def wrObjectId(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBlob_wrObjectId(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBlob

# Register OdBlob in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBlob_swigregister(OdBlob)

class OdAuditInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kSilent = _ODA_Kernel_Py3.OdAuditInfo_kSilent
    kCmdLine = _ODA_Kernel_Py3.OdAuditInfo_kCmdLine
    kFile = _ODA_Kernel_Py3.OdAuditInfo_kFile
    kBoth = _ODA_Kernel_Py3.OdAuditInfo_kBoth

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdAuditInfo_swiginit(self, _ODA_Kernel_Py3.new_OdAuditInfo(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdAuditInfo

    def fixErrors(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdAuditInfo_fixErrors(self, *args)

    def setFixErrors(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAuditInfo_setFixErrors(self, *args)

    def numErrors(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdAuditInfo_numErrors(self, *args)

    def numFixes(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdAuditInfo_numFixes(self, *args)

    def errorsFound(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAuditInfo_errorsFound(self, *args)

    def errorsFixed(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAuditInfo_errorsFixed(self, *args)

    def errorsSkip(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAuditInfo_errorsSkip(self, *args)

    def printError(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAuditInfo_printError(self, *args)

    def printInfo(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAuditInfo_printInfo(self, *args)

    def requestRegen(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAuditInfo_requestRegen(self, *args)

    def resetNumEntities(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAuditInfo_resetNumEntities(self, *args)

    def incNumEntities(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAuditInfo_incNumEntities(self, *args)

    def numEntities(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdAuditInfo_numEntities(self, *args)

    def getLastInfo(self, *args) -> "OdAuditInfo::MsgInfo const &":
        return _ODA_Kernel_Py3.OdAuditInfo_getLastInfo(self, *args)

    def setLastInfo(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAuditInfo_setLastInfo(self, *args)

    def setPrintDest(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdAuditInfo_setPrintDest(self, *args)

    def getPrintDest(self, *args) -> "OdAuditInfo::PrintDest":
        return _ODA_Kernel_Py3.OdAuditInfo_getPrintDest(self, *args)

# Register OdAuditInfo in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdAuditInfo_swigregister(OdAuditInfo)

class MsgInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    strName = property(_ODA_Kernel_Py3.MsgInfo_strName_get, _ODA_Kernel_Py3.MsgInfo_strName_set)
    strValue = property(_ODA_Kernel_Py3.MsgInfo_strValue_get, _ODA_Kernel_Py3.MsgInfo_strValue_set)
    strValidation = property(_ODA_Kernel_Py3.MsgInfo_strValidation_get, _ODA_Kernel_Py3.MsgInfo_strValidation_set)
    strDefaultValue = property(_ODA_Kernel_Py3.MsgInfo_strDefaultValue_get, _ODA_Kernel_Py3.MsgInfo_strDefaultValue_set)
    bIsError = property(_ODA_Kernel_Py3.MsgInfo_bIsError_get, _ODA_Kernel_Py3.MsgInfo_bIsError_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.MsgInfo_swiginit(self, _ODA_Kernel_Py3.new_MsgInfo(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_MsgInfo

# Register MsgInfo in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.MsgInfo_swigregister(MsgInfo)


def odrxRegisterAuditInfoDestructorCallback(*args) -> "void":
    return _ODA_Kernel_Py3.odrxRegisterAuditInfoDestructorCallback(*args)

def odrxUnregisterAuditInfoDestructorCallback(*args) -> "void":
    return _ODA_Kernel_Py3.odrxUnregisterAuditInfoDestructorCallback(*args)
APPNAME_ODAMFC = _ODA_Kernel_Py3.APPNAME_ODAMFC
APPNAME_ODADGN = _ODA_Kernel_Py3.APPNAME_ODADGN
APPNAME_ODAPRC = _ODA_Kernel_Py3.APPNAME_ODAPRC
APPNAME_ODABIM = _ODA_Kernel_Py3.APPNAME_ODABIM
class OdMaterialResolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdMaterialResolver_swiginit(self, _ODA_Kernel_Py3.new_OdMaterialResolver(*args))

    def database(self, *args) -> "OdDbBaseDatabase *":
        return _ODA_Kernel_Py3.OdMaterialResolver_database(self, *args)

    def setDatabase(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdMaterialResolver_setDatabase(self, *args)

    def map(self, *args) -> "OdMaterialResolver::OdIdIdMap const &":
        return _ODA_Kernel_Py3.OdMaterialResolver_map(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdMaterialResolver_clear(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdMaterialResolver_isEmpty(self, *args)

    def getPair(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdMaterialResolver_getPair(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdMaterialResolver

# Register OdMaterialResolver in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdMaterialResolver_swigregister(OdMaterialResolver)

kOnProxyDetection = _ODA_Kernel_Py3.kOnProxyDetection
kOnTeighaStartup = _ODA_Kernel_Py3.kOnTeighaStartup
kOnCommandInvocation = _ODA_Kernel_Py3.kOnCommandInvocation
kOnLoadRequest = _ODA_Kernel_Py3.kOnLoadRequest
kLoadDisabled = _ODA_Kernel_Py3.kLoadDisabled
kTransparentlyLoadable = _ODA_Kernel_Py3.kTransparentlyLoadable

def lineWeightIndex(*args) -> "int":
    return _ODA_Kernel_Py3.lineWeightIndex(*args)

def lineWeightByIndex(*args) -> "OdDb::LineWeight":
    return _ODA_Kernel_Py3.lineWeightByIndex(*args)
class OdGsViewportProperties(OdGsProperties):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsViewportProperties >":
        return _ODA_Kernel_Py3.OdGsViewportProperties_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsViewportProperties_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsViewportProperties_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsViewportProperties_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsViewportProperties >":
        return _ODA_Kernel_Py3.OdGsViewportProperties_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsViewportProperties

    def viewportTraitsData(self, *args) -> "OdGiViewportTraitsData *":
        return _ODA_Kernel_Py3.OdGsViewportProperties_viewportTraitsData(self, *args)

    def isTraitsModified(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsViewportProperties_isTraitsModified(self, *args)

    def clearTraits(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewportProperties_clearTraits(self, *args)

    def propertiesType(self, *args) -> "OdGsProperties::PropertiesType":
        return _ODA_Kernel_Py3.OdGsViewportProperties_propertiesType(self, *args)

    def propertiesForType(self, *args) -> "OdSmartPtr< OdGsProperties >":
        return _ODA_Kernel_Py3.OdGsViewportProperties_propertiesForType(self, *args)

    def update(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewportProperties_update(self, *args)

    def display(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsViewportProperties_display(self, *args)

# Register OdGsViewportProperties in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsViewportProperties_swigregister(OdGsViewportProperties)

def OdGsViewportProperties_cast(*args) -> "OdSmartPtr< OdGsViewportProperties >":
    return _ODA_Kernel_Py3.OdGsViewportProperties_cast(*args)

def OdGsViewportProperties_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsViewportProperties_desc(*args)

def OdGsViewportProperties_createObject(*args) -> "OdSmartPtr< OdGsViewportProperties >":
    return _ODA_Kernel_Py3.OdGsViewportProperties_createObject(*args)

class OdGsSpatialQuery(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsSpatialQuery_swiginit(self, _ODA_Kernel_Py3.new_OdGsSpatialQuery(*args))

    def build(self, *args) -> "OdSiShape const &":
        return _ODA_Kernel_Py3.OdGsSpatialQuery_build(self, *args)

    def getBBox(self, *args) -> "OdSi::BBox const &":
        return _ODA_Kernel_Py3.OdGsSpatialQuery_getBBox(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsSpatialQuery

# Register OdGsSpatialQuery in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsSpatialQuery_swigregister(OdGsSpatialQuery)

class OdGsPageParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsPageParams

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsPageParams_swiginit(self, _ODA_Kernel_Py3.new_OdGsPageParams(*args))

    def getPaperWidth(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsPageParams_getPaperWidth(self, *args)

    def getPaperHeight(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsPageParams_getPaperHeight(self, *args)

    def getLeftMargin(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsPageParams_getLeftMargin(self, *args)

    def getRightMargin(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsPageParams_getRightMargin(self, *args)

    def getTopMargin(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsPageParams_getTopMargin(self, *args)

    def getBottomMargin(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsPageParams_getBottomMargin(self, *args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsPageParams_set(self, *args)

    def scale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsPageParams_scale(self, *args)

# Register OdGsPageParams in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsPageParams_swigregister(OdGsPageParams)

class OdGsMaterialNode(OdGsNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsMaterialNode >":
        return _ODA_Kernel_Py3.OdGsMaterialNode_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsMaterialNode_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsMaterialNode_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsMaterialNode_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsMaterialNode >":
        return _ODA_Kernel_Py3.OdGsMaterialNode_createObject(*args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsMaterialNode_swiginit(self, _ODA_Kernel_Py3.new_OdGsMaterialNode(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsMaterialNode

    def destroy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMaterialNode_destroy(self, *args)

    def materialTraits(self, *args) -> "OdGiMaterialTraitsData const &":
        return _ODA_Kernel_Py3.OdGsMaterialNode_materialTraits(self, *args)

    def onModified(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMaterialNode_onModified(self, *args)

    def invalidate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMaterialNode_invalidate(self, *args)

    def invalidateModule(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMaterialNode_invalidateModule(self, *args)

    def nextNode(self, *args) -> "OdGsMaterialNode *":
        return _ODA_Kernel_Py3.OdGsMaterialNode_nextNode(self, *args)

    def prevNode(self, *args) -> "OdGsMaterialNode *":
        return _ODA_Kernel_Py3.OdGsMaterialNode_prevNode(self, *args)

    def setNextNode(self, *args) -> "OdGsMaterialNode *":
        return _ODA_Kernel_Py3.OdGsMaterialNode_setNextNode(self, *args)

    def setPrevNode(self, *args) -> "OdGsMaterialNode *":
        return _ODA_Kernel_Py3.OdGsMaterialNode_setPrevNode(self, *args)

    def isDataModified(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsMaterialNode_isDataModified(self, *args)

    def isCachedDataModified(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsMaterialNode_isCachedDataModified(self, *args)

    def setCachedDataUpdated(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMaterialNode_setCachedDataUpdated(self, *args)

    def cachedData(self, *args) -> "OdRxObject const *":
        return _ODA_Kernel_Py3.OdGsMaterialNode_cachedData(self, *args)

    def setCachedData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsMaterialNode_setCachedData(self, *args)

    def cacheMutex(self, *args) -> "OdMutexPtr &":
        return _ODA_Kernel_Py3.OdGsMaterialNode_cacheMutex(self, *args)

    def nodeType(self, *args) -> "ENodeType":
        return _ODA_Kernel_Py3.OdGsMaterialNode_nodeType(self, *args)

    def saveNodeState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsMaterialNode_saveNodeState(self, *args)

    def loadNodeState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsMaterialNode_loadNodeState(self, *args)

# Register OdGsMaterialNode in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsMaterialNode_swigregister(OdGsMaterialNode)

def OdGsMaterialNode_cast(*args) -> "OdSmartPtr< OdGsMaterialNode >":
    return _ODA_Kernel_Py3.OdGsMaterialNode_cast(*args)

def OdGsMaterialNode_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsMaterialNode_desc(*args)

def OdGsMaterialNode_createObject(*args) -> "OdSmartPtr< OdGsMaterialNode >":
    return _ODA_Kernel_Py3.OdGsMaterialNode_createObject(*args)

class OdGsLightNode(OdGsEntityNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsLightNode >":
        return _ODA_Kernel_Py3.OdGsLightNode_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsLightNode_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsLightNode_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsLightNode_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsLightNode >":
        return _ODA_Kernel_Py3.OdGsLightNode_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsLightNode

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsLightNode_swiginit(self, _ODA_Kernel_Py3.new_OdGsLightNode(*args))

    def setModelTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsLightNode_setModelTransform(self, *args)

    def modelTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGsLightNode_modelTransform(self, *args)

    def getLightOwner(self, *args) -> "OdGsNode *":
        return _ODA_Kernel_Py3.OdGsLightNode_getLightOwner(self, *args)

    def lightType(self, *args) -> "OdGiLightTraitsData::LightType":
        return _ODA_Kernel_Py3.OdGsLightNode_lightType(self, *args)

    def isLight(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsLightNode_isLight(self, *args)

    def pointLightTraitsData(self, *args) -> "OdGiPointLightTraitsData *":
        return _ODA_Kernel_Py3.OdGsLightNode_pointLightTraitsData(self, *args)

    def spotLightTraitsData(self, *args) -> "OdGiSpotLightTraitsData *":
        return _ODA_Kernel_Py3.OdGsLightNode_spotLightTraitsData(self, *args)

    def distantLightTraitsData(self, *args) -> "OdGiDistantLightTraitsData *":
        return _ODA_Kernel_Py3.OdGsLightNode_distantLightTraitsData(self, *args)

    def webLightTraitsData(self, *args) -> "OdGiWebLightTraitsData *":
        return _ODA_Kernel_Py3.OdGsLightNode_webLightTraitsData(self, *args)

    def lightTraitsData(self, *args) -> "OdGiLightTraitsData *":
        return _ODA_Kernel_Py3.OdGsLightNode_lightTraitsData(self, *args)

    def invalidate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsLightNode_invalidate(self, *args)

    def saveClientNodeState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsLightNode_saveClientNodeState(self, *args)

    def loadClientNodeState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsLightNode_loadClientNodeState(self, *args)

    def updateViewportDependent(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsLightNode_updateViewportDependent(self, *args)

    @staticmethod
    def drawableIsLight(*args) -> "bool":
        return _ODA_Kernel_Py3.OdGsLightNode_drawableIsLight(*args)

# Register OdGsLightNode in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsLightNode_swigregister(OdGsLightNode)

def OdGsLightNode_cast(*args) -> "OdSmartPtr< OdGsLightNode >":
    return _ODA_Kernel_Py3.OdGsLightNode_cast(*args)

def OdGsLightNode_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsLightNode_desc(*args)

def OdGsLightNode_createObject(*args) -> "OdSmartPtr< OdGsLightNode >":
    return _ODA_Kernel_Py3.OdGsLightNode_createObject(*args)

def OdGsLightNode_drawableIsLight(*args) -> "bool":
    return _ODA_Kernel_Py3.OdGsLightNode_drawableIsLight(*args)

class OdGsLight(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsLight >":
        return _ODA_Kernel_Py3.OdGsLight_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsLight_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsLight_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsLight_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsLight >":
        return _ODA_Kernel_Py3.OdGsLight_createObject(*args)
    kPointLight = _ODA_Kernel_Py3.OdGsLight_kPointLight
    kDistantLight = _ODA_Kernel_Py3.OdGsLight_kDistantLight
    kSpotlight = _ODA_Kernel_Py3.OdGsLight_kSpotlight
    kAttenNone = _ODA_Kernel_Py3.OdGsLight_kAttenNone
    kAttenInverseLinear = _ODA_Kernel_Py3.OdGsLight_kAttenInverseLinear
    kAttenInverseSquare = _ODA_Kernel_Py3.OdGsLight_kAttenInverseSquare

    def type(self, *args) -> "OdGsLight::LightType":
        return _ODA_Kernel_Py3.OdGsLight_type(self, *args)

    def position(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGsLight_position(self, *args)

    def target(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGsLight_target(self, *args)

    def direction(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGsLight_direction(self, *args)

    def color(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGsLight_color(self, *args)

    def intensity(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGsLight_intensity(self, *args)

    def attenuation(self, *args) -> "OdGsLight::LightAttenuation":
        return _ODA_Kernel_Py3.OdGsLight_attenuation(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsLight

# Register OdGsLight in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsLight_swigregister(OdGsLight)

def OdGsLight_cast(*args) -> "OdSmartPtr< OdGsLight >":
    return _ODA_Kernel_Py3.OdGsLight_cast(*args)

def OdGsLight_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsLight_desc(*args)

def OdGsLight_createObject(*args) -> "OdSmartPtr< OdGsLight >":
    return _ODA_Kernel_Py3.OdGsLight_createObject(*args)

class OdGsEmptyMetafileCache(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsEmptyMetafileCache_swiginit(self, _ODA_Kernel_Py3.new_OdGsEmptyMetafileCache(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsEmptyMetafileCache

# Register OdGsEmptyMetafileCache in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsEmptyMetafileCache_swigregister(OdGsEmptyMetafileCache)

class OdGsDrawCancelException(OdError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsDrawCancelException_swiginit(self, _ODA_Kernel_Py3.new_OdGsDrawCancelException(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsDrawCancelException

# Register OdGsDrawCancelException in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsDrawCancelException_swigregister(OdGsDrawCancelException)

class OdGsDbRootLinkage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsDbRootLinkage_swiginit(self, _ODA_Kernel_Py3.new_OdGsDbRootLinkage(*args))

    @staticmethod
    def initialize(*args) -> "void":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_initialize(*args)

    @staticmethod
    def uninitialize(*args) -> "void":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_uninitialize(*args)

    @staticmethod
    def isInitialized(*args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_isInitialized(*args)

    @staticmethod
    def isInitializedAny(*args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_isInitializedAny(*args)

    @staticmethod
    def getDbBaseDatabasePEClass(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseDatabasePEClass(*args)

    @staticmethod
    def getDbBaseDatabasePE(*args) -> "OdDbBaseDatabasePE *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseDatabasePE(*args)

    @staticmethod
    def getDbBaseDatabasePEForDrawable(*args) -> "OdDbBaseDatabasePE *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseDatabasePEForDrawable(*args)

    @staticmethod
    def getDbBaseHostAppServicesClass(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseHostAppServicesClass(*args)

    @staticmethod
    def getDbBaseHostAppServices(*args) -> "OdDbBaseHostAppServices *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseHostAppServices(*args)

    @staticmethod
    def getDatabaseDbBaseHostAppServices(*args) -> "OdDbBaseHostAppServices *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDatabaseDbBaseHostAppServices(*args)

    @staticmethod
    def displayWarning(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_displayWarning(*args)

    @staticmethod
    def getDbBaseLayerPEClass(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseLayerPEClass(*args)

    @staticmethod
    def getDbBaseLayerPE(*args) -> "OdDbBaseLayerPE *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseLayerPE(*args)

    @staticmethod
    def getDbBaseVisualStylePEClass(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseVisualStylePEClass(*args)

    @staticmethod
    def getDbBaseVisualStylePE(*args) -> "OdDbBaseVisualStylePE *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseVisualStylePE(*args)

    @staticmethod
    def getDbBaseAnnotationScalePEClass(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseAnnotationScalePEClass(*args)

    @staticmethod
    def getDbBaseAnnotationScalePE(*args) -> "OdDbBaseAnnotationScalePE *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseAnnotationScalePE(*args)

    @staticmethod
    def getDbBaseMaterialPEClass(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseMaterialPEClass(*args)

    @staticmethod
    def getDbBaseMaterialPE(*args) -> "OdDbBaseMaterialPE *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseMaterialPE(*args)

    @staticmethod
    def getDbBaseLayoutPEClass(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseLayoutPEClass(*args)

    @staticmethod
    def getDbBaseLayoutPE(*args) -> "OdDbBaseLayoutPE *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseLayoutPE(*args)

    @staticmethod
    def isLayoutDrawable(*args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_isLayoutDrawable(*args)

    @staticmethod
    def getAbstractViewPEClass(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getAbstractViewPEClass(*args)

    @staticmethod
    def getAbstractViewPE(*args) -> "OdAbstractViewPE *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getAbstractViewPE(*args)

    @staticmethod
    def getDbBaseBlockPEClass(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseBlockPEClass(*args)

    @staticmethod
    def getDbBaseBlockPE(*args) -> "OdDbBaseBlockPE *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseBlockPE(*args)

    @staticmethod
    def getDbBaseBlockRefPEClass(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseBlockRefPEClass(*args)

    @staticmethod
    def getDbBaseBlockRefPE(*args) -> "OdDbBaseBlockRefPE *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseBlockRefPE(*args)

    @staticmethod
    def isBlockRefDrawable(*args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_isBlockRefDrawable(*args)

    @staticmethod
    def getDbBaseSortEntsPEClass(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseSortEntsPEClass(*args)

    @staticmethod
    def getDbBaseSortEntsPE(*args) -> "OdDbBaseSortEntsPE *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseSortEntsPE(*args)

    @staticmethod
    def getDbBaseLongTransactionPEClass(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseLongTransactionPEClass(*args)

    @staticmethod
    def getDbBaseLongTransactionPE(*args) -> "OdDbBaseLongTransactionPE *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseLongTransactionPE(*args)

    @staticmethod
    def getDbBaseHatchPEClass(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseHatchPEClass(*args)

    @staticmethod
    def getDbBaseHatchPE(*args) -> "OdDbBaseHatchPE *":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseHatchPE(*args)

    @staticmethod
    def isHatchDrawable(*args) -> "bool":
        return _ODA_Kernel_Py3.OdGsDbRootLinkage_isHatchDrawable(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsDbRootLinkage

# Register OdGsDbRootLinkage in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsDbRootLinkage_swigregister(OdGsDbRootLinkage)

def OdGsDbRootLinkage_initialize(*args) -> "void":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_initialize(*args)

def OdGsDbRootLinkage_uninitialize(*args) -> "void":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_uninitialize(*args)

def OdGsDbRootLinkage_isInitialized(*args) -> "bool":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_isInitialized(*args)

def OdGsDbRootLinkage_isInitializedAny(*args) -> "bool":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_isInitializedAny(*args)

def OdGsDbRootLinkage_getDbBaseDatabasePEClass(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseDatabasePEClass(*args)

def OdGsDbRootLinkage_getDbBaseDatabasePE(*args) -> "OdDbBaseDatabasePE *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseDatabasePE(*args)

def OdGsDbRootLinkage_getDbBaseDatabasePEForDrawable(*args) -> "OdDbBaseDatabasePE *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseDatabasePEForDrawable(*args)

def OdGsDbRootLinkage_getDbBaseHostAppServicesClass(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseHostAppServicesClass(*args)

def OdGsDbRootLinkage_getDbBaseHostAppServices(*args) -> "OdDbBaseHostAppServices *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseHostAppServices(*args)

def OdGsDbRootLinkage_getDatabaseDbBaseHostAppServices(*args) -> "OdDbBaseHostAppServices *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDatabaseDbBaseHostAppServices(*args)

def OdGsDbRootLinkage_displayWarning(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_displayWarning(*args)

def OdGsDbRootLinkage_getDbBaseLayerPEClass(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseLayerPEClass(*args)

def OdGsDbRootLinkage_getDbBaseLayerPE(*args) -> "OdDbBaseLayerPE *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseLayerPE(*args)

def OdGsDbRootLinkage_getDbBaseVisualStylePEClass(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseVisualStylePEClass(*args)

def OdGsDbRootLinkage_getDbBaseVisualStylePE(*args) -> "OdDbBaseVisualStylePE *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseVisualStylePE(*args)

def OdGsDbRootLinkage_getDbBaseAnnotationScalePEClass(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseAnnotationScalePEClass(*args)

def OdGsDbRootLinkage_getDbBaseAnnotationScalePE(*args) -> "OdDbBaseAnnotationScalePE *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseAnnotationScalePE(*args)

def OdGsDbRootLinkage_getDbBaseMaterialPEClass(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseMaterialPEClass(*args)

def OdGsDbRootLinkage_getDbBaseMaterialPE(*args) -> "OdDbBaseMaterialPE *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseMaterialPE(*args)

def OdGsDbRootLinkage_getDbBaseLayoutPEClass(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseLayoutPEClass(*args)

def OdGsDbRootLinkage_getDbBaseLayoutPE(*args) -> "OdDbBaseLayoutPE *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseLayoutPE(*args)

def OdGsDbRootLinkage_isLayoutDrawable(*args) -> "bool":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_isLayoutDrawable(*args)

def OdGsDbRootLinkage_getAbstractViewPEClass(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getAbstractViewPEClass(*args)

def OdGsDbRootLinkage_getAbstractViewPE(*args) -> "OdAbstractViewPE *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getAbstractViewPE(*args)

def OdGsDbRootLinkage_getDbBaseBlockPEClass(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseBlockPEClass(*args)

def OdGsDbRootLinkage_getDbBaseBlockPE(*args) -> "OdDbBaseBlockPE *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseBlockPE(*args)

def OdGsDbRootLinkage_getDbBaseBlockRefPEClass(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseBlockRefPEClass(*args)

def OdGsDbRootLinkage_getDbBaseBlockRefPE(*args) -> "OdDbBaseBlockRefPE *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseBlockRefPE(*args)

def OdGsDbRootLinkage_isBlockRefDrawable(*args) -> "bool":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_isBlockRefDrawable(*args)

def OdGsDbRootLinkage_getDbBaseSortEntsPEClass(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseSortEntsPEClass(*args)

def OdGsDbRootLinkage_getDbBaseSortEntsPE(*args) -> "OdDbBaseSortEntsPE *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseSortEntsPE(*args)

def OdGsDbRootLinkage_getDbBaseLongTransactionPEClass(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseLongTransactionPEClass(*args)

def OdGsDbRootLinkage_getDbBaseLongTransactionPE(*args) -> "OdDbBaseLongTransactionPE *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseLongTransactionPE(*args)

def OdGsDbRootLinkage_getDbBaseHatchPEClass(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseHatchPEClass(*args)

def OdGsDbRootLinkage_getDbBaseHatchPE(*args) -> "OdDbBaseHatchPE *":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_getDbBaseHatchPE(*args)

def OdGsDbRootLinkage_isHatchDrawable(*args) -> "bool":
    return _ODA_Kernel_Py3.OdGsDbRootLinkage_isHatchDrawable(*args)


def odgsDbGetDatabase(*args) -> "OdDbBaseDatabase *":
    return _ODA_Kernel_Py3.odgsDbGetDatabase(*args)

def odgsDbGetOwner(*args) -> "OdDbStub *":
    return _ODA_Kernel_Py3.odgsDbGetOwner(*args)

def odgsDbRedirectID(*args) -> "OdDbStub *":
    return _ODA_Kernel_Py3.odgsDbRedirectID(*args)

def odgsDbObjectIDRedirected(*args) -> "bool":
    return _ODA_Kernel_Py3.odgsDbObjectIDRedirected(*args)

def odgsDbObjectIDSetRedirected(*args) -> "void":
    return _ODA_Kernel_Py3.odgsDbObjectIDSetRedirected(*args)

def odgsDbObjectIDSetLockingFlag(*args) -> "void":
    return _ODA_Kernel_Py3.odgsDbObjectIDSetLockingFlag(*args)

def odgsDbObjectIDRedirectedDatabase(*args) -> "OdDbBaseDatabase *":
    return _ODA_Kernel_Py3.odgsDbObjectIDRedirectedDatabase(*args)

def odgsDbObjectIDErased(*args) -> "bool":
    return _ODA_Kernel_Py3.odgsDbObjectIDErased(*args)
class OdGsContainerNode(OdGsNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def hasVpData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsContainerNode_hasVpData(self, *args)

    def numVpData(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsContainerNode_numVpData(self, *args)

    def isAttached(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsContainerNode_isAttached(self, *args)

    def setEntityListsInvalid(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_setEntityListsInvalid(self, *args)

    def viewportId(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsContainerNode_viewportId(self, *args)

    def isVpDepCache(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsContainerNode_isVpDepCache(self, *args)

    def setVpDepCache(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_setVpDepCache(self, *args)

    def setEntityListValid(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_setEntityListValid(self, *args)

    def childrenUpToDate(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsContainerNode_childrenUpToDate(self, *args)

    def needRegen(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsContainerNode_needRegen(self, *args)

    def addChildNode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_addChildNode(self, *args)

    def turnOnLights(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_turnOnLights(self, *args)

    def nodeType(self, *args) -> "ENodeType":
        return _ODA_Kernel_Py3.OdGsContainerNode_nodeType(self, *args)

    def firstEntityNode(self, *args) -> "OdGsEntityNode const *":
        return _ODA_Kernel_Py3.OdGsContainerNode_firstEntityNode(self, *args)

    def lastEntityNode(self, *args) -> "OdGsEntityNode const *":
        return _ODA_Kernel_Py3.OdGsContainerNode_lastEntityNode(self, *args)

    def lightNodesList(self, *args) -> "OdList< OdGsLightNode * > const &":
        return _ODA_Kernel_Py3.OdGsContainerNode_lightNodesList(self, *args)

    def awareFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsContainerNode_awareFlags(self, *args)

    def setAwareFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_setAwareFlags(self, *args)

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsContainerNode >":
        return _ODA_Kernel_Py3.OdGsContainerNode_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsContainerNode_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsContainerNode_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsContainerNode_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsContainerNode >":
        return _ODA_Kernel_Py3.OdGsContainerNode_createObject(*args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsContainerNode_swiginit(self, _ODA_Kernel_Py3.new_OdGsContainerNode(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsContainerNode

    def entityListValid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsContainerNode_entityListValid(self, *args)

    def allEntityListsValid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsContainerNode_allEntityListsValid(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsContainerNode_isEmpty(self, *args)

    def setChildrenUpToDate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_setChildrenUpToDate(self, *args)

    def childrenRegenDraw(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsContainerNode_childrenRegenDraw(self, *args)

    def setChildrenRegenDraw(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_setChildrenRegenDraw(self, *args)

    def addChild(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_addChild(self, *args)

    def removeLights(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_removeLights(self, *args)

    def removeChild(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_removeChild(self, *args)

    def updateVisible(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_updateVisible(self, *args)

    def spatialIndex(self, *args) -> "OdSiSpatialIndex const &":
        return _ODA_Kernel_Py3.OdGsContainerNode_spatialIndex(self, *args)

    def invalidate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_invalidate(self, *args)

    def currViewChanges(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsContainerNode_currViewChanges(self, *args)

    def extents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsContainerNode_extents(self, *args)

    def propagateInvalidVpFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_propagateInvalidVpFlag(self, *args)

    def checkWorkset(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsContainerNode_checkWorkset(self, *args)

    def setCheckWorkset(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_setCheckWorkset(self, *args)

    def findCompatibleCache(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsContainerNode_findCompatibleCache(self, *args)

    def highlightSubnodes(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsContainerNode_highlightSubnodes(self, *args)

    def destroy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_destroy(self, *args)

    def destroySubitems(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_destroySubitems(self, *args)

    def realExtents(self, *args) -> "OdGsUpdateExtents const &":
        return _ODA_Kernel_Py3.OdGsContainerNode_realExtents(self, *args)

    def setRealExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_setRealExtents(self, *args)

    def addViewRef(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_addViewRef(self, *args)

    def removeViewRef(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_removeViewRef(self, *args)

    def viewRefs(self, *args) -> "ViewRefs const &":
        return _ODA_Kernel_Py3.OdGsContainerNode_viewRefs(self, *args)

    def stock(self, *args) -> "StockProps const &":
        return _ODA_Kernel_Py3.OdGsContainerNode_stock(self, *args)

    def makeStock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_makeStock(self, *args)

    def releaseStock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_releaseStock(self, *args)

    def propagateLayerChangesStock(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_propagateLayerChangesStock(self, *args)

    def saveNodeState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsContainerNode_saveNodeState(self, *args)

    def loadNodeState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsContainerNode_loadNodeState(self, *args)

    def postprocessNodeLoading(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsContainerNode_postprocessNodeLoading(self, *args)

    def removeErased(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_removeErased(self, *args)

    def numberOfChildren(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGsContainerNode_numberOfChildren(self, *args)

    def numberOfChildrenST(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsContainerNode_numberOfChildrenST(self, *args)

    def numberOfChildrenErased(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsContainerNode_numberOfChildrenErased(self, *args)
    m_nodesMutex = property(_ODA_Kernel_Py3.OdGsContainerNode_m_nodesMutex_get)

    def addContentToUpdateManager(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsContainerNode_addContentToUpdateManager(self, *args)

# Register OdGsContainerNode in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsContainerNode_swigregister(OdGsContainerNode)

def OdGsContainerNode_cast(*args) -> "OdSmartPtr< OdGsContainerNode >":
    return _ODA_Kernel_Py3.OdGsContainerNode_cast(*args)

def OdGsContainerNode_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsContainerNode_desc(*args)

def OdGsContainerNode_createObject(*args) -> "OdSmartPtr< OdGsContainerNode >":
    return _ODA_Kernel_Py3.OdGsContainerNode_createObject(*args)

class OdGsBlockNode(OdGsNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGsBlockNode >":
        return _ODA_Kernel_Py3.OdGsBlockNode_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsBlockNode_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsBlockNode_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsBlockNode_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGsBlockNode >":
        return _ODA_Kernel_Py3.OdGsBlockNode_createObject(*args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsBlockNode_swiginit(self, _ODA_Kernel_Py3.new_OdGsBlockNode(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsBlockNode

    def setUnloaded(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockNode_setUnloaded(self, *args)

    def isUnloaded(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockNode_isUnloaded(self, *args)

    def setModelTfDependent(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockNode_setModelTfDependent(self, *args)

    def isModelTfDependent(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockNode_isModelTfDependent(self, *args)

    def nodeType(self, *args) -> "ENodeType":
        return _ODA_Kernel_Py3.OdGsBlockNode_nodeType(self, *args)

    def invalidate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockNode_invalidate(self, *args)

    def extents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockNode_extents(self, *args)

    def propagateLayerChanges(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockNode_propagateLayerChanges(self, *args)

    def destroy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockNode_destroy(self, *args)

    def invalidateShared(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockNode_invalidateShared(self, *args)

    def invalidateSharedSubents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockNode_invalidateSharedSubents(self, *args)

    def invalidateSharedRegenDraw(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockNode_invalidateSharedRegenDraw(self, *args)

    def invalidateSharedSectionable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockNode_invalidateSharedSectionable(self, *args)

    def invalidateSharedAwareFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBlockNode_invalidateSharedAwareFlags(self, *args)

    def saveNodeState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockNode_saveNodeState(self, *args)

    def loadNodeState(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockNode_loadNodeState(self, *args)

    def postprocessNodeLoading(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBlockNode_postprocessNodeLoading(self, *args)

# Register OdGsBlockNode in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsBlockNode_swigregister(OdGsBlockNode)

def OdGsBlockNode_cast(*args) -> "OdSmartPtr< OdGsBlockNode >":
    return _ODA_Kernel_Py3.OdGsBlockNode_cast(*args)

def OdGsBlockNode_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGsBlockNode_desc(*args)

def OdGsBlockNode_createObject(*args) -> "OdSmartPtr< OdGsBlockNode >":
    return _ODA_Kernel_Py3.OdGsBlockNode_createObject(*args)

class OdGsPalette(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsPalette_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsPalette_queryX(self, *args)

    def numColors(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsPalette_numColors(self, *args)

    def setNumColors(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsPalette_setNumColors(self, *args)

    def setColorAt(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsPalette_setColorAt(self, *args)

    def colorAt(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsPalette_colorAt(self, *args)

    def setColors(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsPalette_setColors(self, *args)

    def getColors(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsPalette_getColors(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsPalette

# Register OdGsPalette in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsPalette_swigregister(OdGsPalette)

class OdGsBitMap(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGsBitMap_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGsBitMap_queryX(self, *args)

    def width(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsBitMap_width(self, *args)

    def height(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsBitMap_height(self, *args)

    def bitPerPixel(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdGsBitMap_bitPerPixel(self, *args)

    def create(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBitMap_create(self, *args)

    def bitDataSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsBitMap_bitDataSize(self, *args)

    def bytePerLine(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGsBitMap_bytePerLine(self, *args)

    def bits(self, *args) -> "OdUInt8 const *":
        return _ODA_Kernel_Py3.OdGsBitMap_bits(self, *args)

    def setBits(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBitMap_setBits(self, *args)

    def palette(self, *args) -> "OdGsPalette const *":
        return _ODA_Kernel_Py3.OdGsBitMap_palette(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsBitMap

# Register OdGsBitMap in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsBitMap_swigregister(OdGsBitMap)

class OdGsMaterialTextureDataFiler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def saveClientMaterialTextureData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsMaterialTextureDataFiler_saveClientMaterialTextureData(self, *args)

    def loadClientMaterialTextureData(self, *args) -> "OdGiMaterialTextureDataPtr":
        return _ODA_Kernel_Py3.OdGsMaterialTextureDataFiler_loadClientMaterialTextureData(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsMaterialTextureDataFiler_swiginit(self, _ODA_Kernel_Py3.new_OdGsMaterialTextureDataFiler(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsMaterialTextureDataFiler

# Register OdGsMaterialTextureDataFiler in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsMaterialTextureDataFiler_swigregister(OdGsMaterialTextureDataFiler)

class OdGsLightsAccumulationContainter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_accumulatedLightsData = property(_ODA_Kernel_Py3.OdGsLightsAccumulationContainter_m_accumulatedLightsData_get, _ODA_Kernel_Py3.OdGsLightsAccumulationContainter_m_accumulatedLightsData_set)
    m_lightsAccumMutex = property(_ODA_Kernel_Py3.OdGsLightsAccumulationContainter_m_lightsAccumMutex_get, _ODA_Kernel_Py3.OdGsLightsAccumulationContainter_m_lightsAccumMutex_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGsLightsAccumulationContainter_swiginit(self, _ODA_Kernel_Py3.new_OdGsLightsAccumulationContainter(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsLightsAccumulationContainter

    def has(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsLightsAccumulationContainter_has(self, *args)

    def append(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsLightsAccumulationContainter_append(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsLightsAccumulationContainter_clear(self, *args)

# Register OdGsLightsAccumulationContainter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsLightsAccumulationContainter_swigregister(OdGsLightsAccumulationContainter)

class OdGsBaseMaterialVectorizer(OdGsBaseVectorizer, OdGsMaterialTextureDataFiler):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kProcessMappers = _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_kProcessMappers
    kProcessMaterials = _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_kProcessMaterials
    kProcessMappersAndMaterials = _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_kProcessMappersAndMaterials
    kMappersForRender = _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_kMappersForRender
    kMaterialsForRender = _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_kMaterialsForRender
    kMappersAndMaterialsForRender = _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_kMappersAndMaterialsForRender
    kProcessForRender = _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_kProcessForRender
    kEnableDelayCache = _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_kEnableDelayCache
    kInternal = _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_kInternal
    kUser = _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_kUser
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsBaseMaterialVectorizer

    def onTraitsModified(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_onTraitsModified(self, *args)

    def beginMetafile(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_beginMetafile(self, *args)

    def endMetafile(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_endMetafile(self, *args)

    def beginViewVectorization(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_beginViewVectorization(self, *args)

    def endViewVectorization(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_endViewVectorization(self, *args)

    def processMaterialNode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_processMaterialNode(self, *args)

    def saveMaterialCache(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_saveMaterialCache(self, *args)

    def loadMaterialCache(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_loadMaterialCache(self, *args)

    def doDraw(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_doDraw(self, *args)

    def beginLightsAccumulation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_beginLightsAccumulation(self, *args)

    def playAccumulatedLights(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_playAccumulatedLights(self, *args)

    def getAccumulatedLights(self, *args) -> "OdGsLightsAccumulationContainter &":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_getAccumulatedLights(self, *args)

    def isLightsAccumulation(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_isLightsAccumulation(self, *args)

    def addPointLight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_addPointLight(self, *args)

    def addSpotLight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_addSpotLight(self, *args)

    def addDistantLight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_addDistantLight(self, *args)

    def addWebLight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_addWebLight(self, *args)

    def currentMaterial(self, *args) -> "OdGiMaterialItemPtr":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_currentMaterial(self, *args)

    def isMaterialEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_isMaterialEnabled(self, *args)

    def isMaterialAvailable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_isMaterialAvailable(self, *args)

    def resetCurrentMaterial(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_resetCurrentMaterial(self, *args)

    def currentMapper(self, *args) -> "OdGiMapperItemPtr":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_currentMapper(self, *args)

    def resetCurrentMapper(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_resetCurrentMapper(self, *args)

    def isMapperEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_isMapperEnabled(self, *args)

    def isMapperAvailable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_isMapperAvailable(self, *args)

    def isMappingDelayed(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_isMappingDelayed(self, *args)

    def getDeviceMapperMatrix(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_getDeviceMapperMatrix(self, *args)

    def skipMaterialProcess(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_skipMaterialProcess(self, *args)

    def nullMaterialStub(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_nullMaterialStub(self, *args)

    def fillMaterialCache(self, *args) -> "OdGiMaterialItemPtr":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_fillMaterialCache(self, *args)

    def renderMaterialCache(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_renderMaterialCache(self, *args)

    def playDelayCacheEntry(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_playDelayCacheEntry(self, *args)

    def appendDelayCacheEntry(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_appendDelayCacheEntry(self, *args)

    def mapperChangedForDelayCache(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_mapperChangedForDelayCache(self, *args)

    def delayCacheProcessed(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_delayCacheProcessed(self, *args)

    def saveMaterialItem(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_saveMaterialItem(self, *args)

    def loadMaterialItem(self, *args) -> "OdGiMaterialItemPtr":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_loadMaterialItem(self, *args)

    @staticmethod
    def saveMaterialTexture(*args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_saveMaterialTexture(*args)

    @staticmethod
    def loadMaterialTexture(*args) -> "OdGiMaterialTexturePtr":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_loadMaterialTexture(*args)

    @staticmethod
    def saveMaterialTextureManager(*args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_saveMaterialTextureManager(*args)

    @staticmethod
    def loadMaterialTextureManager(*args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_loadMaterialTextureManager(*args)

    def saveClientMaterialCache(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_saveClientMaterialCache(self, *args)

    def loadClientMaterialCache(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_loadClientMaterialCache(self, *args)

# Register OdGsBaseMaterialVectorizer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_swigregister(OdGsBaseMaterialVectorizer)

def OdGsBaseMaterialVectorizer_saveMaterialTexture(*args) -> "bool":
    return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_saveMaterialTexture(*args)

def OdGsBaseMaterialVectorizer_loadMaterialTexture(*args) -> "OdGiMaterialTexturePtr":
    return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_loadMaterialTexture(*args)

def OdGsBaseMaterialVectorizer_saveMaterialTextureManager(*args) -> "bool":
    return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_saveMaterialTextureManager(*args)

def OdGsBaseMaterialVectorizer_loadMaterialTextureManager(*args) -> "bool":
    return _ODA_Kernel_Py3.OdGsBaseMaterialVectorizer_loadMaterialTextureManager(*args)

class DelayCacheEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.DelayCacheEntry_swiginit(self, _ODA_Kernel_Py3.new_DelayCacheEntry(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_DelayCacheEntry
    m_pNext = property(_ODA_Kernel_Py3.DelayCacheEntry_m_pNext_get, _ODA_Kernel_Py3.DelayCacheEntry_m_pNext_set)

    def internalType(self, *args) -> "OdGsBaseMaterialVectorizer::DelayCacheEntryType":
        return _ODA_Kernel_Py3.DelayCacheEntry_internalType(self, *args)

    def nextEntry(self, *args) -> "OdGsBaseMaterialVectorizer::DelayCacheEntry *":
        return _ODA_Kernel_Py3.DelayCacheEntry_nextEntry(self, *args)

    def setNextEntry(self, *args) -> "void":
        return _ODA_Kernel_Py3.DelayCacheEntry_setNextEntry(self, *args)

    def play(self, *args) -> "void":
        return _ODA_Kernel_Py3.DelayCacheEntry_play(self, *args)

# Register DelayCacheEntry in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.DelayCacheEntry_swigregister(DelayCacheEntry)

class OdGsBaseMaterialViewPC(OdGsBaseMaterialVectorizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsBaseMaterialViewPC

# Register OdGsBaseMaterialViewPC in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsBaseMaterialViewPC_swigregister(OdGsBaseMaterialViewPC)

class OdGsBaseMaterialView(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGsBaseMaterialView

# Register OdGsBaseMaterialView in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGsBaseMaterialView_swigregister(OdGsBaseMaterialView)


def odFNV32HashBuf(*args) -> "OdUInt32":
    return _ODA_Kernel_Py3.odFNV32HashBuf(*args)

def odFNV32HashStr(*args) -> "OdUInt32":
    return _ODA_Kernel_Py3.odFNV32HashStr(*args)

def odFNV32aHashBuf(*args) -> "OdUInt32":
    return _ODA_Kernel_Py3.odFNV32aHashBuf(*args)

def odFNV32aHashStr(*args) -> "OdUInt32":
    return _ODA_Kernel_Py3.odFNV32aHashStr(*args)

def odFNV64HashBuf(*args) -> "OdUInt64":
    return _ODA_Kernel_Py3.odFNV64HashBuf(*args)

def odFNV64HashStr(*args) -> "OdUInt64":
    return _ODA_Kernel_Py3.odFNV64HashStr(*args)

def odFNV64aHashBuf(*args) -> "OdUInt64":
    return _ODA_Kernel_Py3.odFNV64aHashBuf(*args)

def odFNV64aHashStr(*args) -> "OdUInt64":
    return _ODA_Kernel_Py3.odFNV64aHashStr(*args)
class OdGiVisualStyleDataContainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiVisualStyleDataContainer

    def faceStyle(self, *args) -> "OdGiFaceStyle const &":
        return _ODA_Kernel_Py3.OdGiVisualStyleDataContainer_faceStyle(self, *args)

    def edgeStyle(self, *args) -> "OdGiEdgeStyle const &":
        return _ODA_Kernel_Py3.OdGiVisualStyleDataContainer_edgeStyle(self, *args)

    def displayStyle(self, *args) -> "OdGiDisplayStyle const &":
        return _ODA_Kernel_Py3.OdGiVisualStyleDataContainer_displayStyle(self, *args)

    def setFaceStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVisualStyleDataContainer_setFaceStyle(self, *args)

    def setEdgeStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVisualStyleDataContainer_setEdgeStyle(self, *args)

    def setDisplayStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVisualStyleDataContainer_setDisplayStyle(self, *args)

    def setType(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiVisualStyleDataContainer_setType(self, *args)

    def type(self, *args) -> "Type":
        return _ODA_Kernel_Py3.OdGiVisualStyleDataContainer_type(self, *args)

    def setTrait(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiVisualStyleDataContainer_setTrait(self, *args)

    def trait(self, *args) -> "OdGiVariantPtr":
        return _ODA_Kernel_Py3.OdGiVisualStyleDataContainer_trait(self, *args)

    def operation(self, *args) -> "Operation":
        return _ODA_Kernel_Py3.OdGiVisualStyleDataContainer_operation(self, *args)

# Register OdGiVisualStyleDataContainer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiVisualStyleDataContainer_swigregister(OdGiVisualStyleDataContainer)

class OdCmColorBaseAdapt(OdCmColorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_pVar = property(_ODA_Kernel_Py3.OdCmColorBaseAdapt_m_pVar_get, _ODA_Kernel_Py3.OdCmColorBaseAdapt_m_pVar_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdCmColorBaseAdapt_swiginit(self, _ODA_Kernel_Py3.new_OdCmColorBaseAdapt(*args))

    def setBase(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_setBase(self, *args)

    def base(self, *args) -> "OdGiVariant *":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_base(self, *args)

    def entColor(self, *args) -> "OdCmEntityColor const &":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_entColor(self, *args)

    def colorMethod(self, *args) -> "OdCmEntityColor::ColorMethod":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_colorMethod(self, *args)

    def setColorMethod(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_setColorMethod(self, *args)

    def isByColor(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_isByColor(self, *args)

    def isByLayer(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_isByLayer(self, *args)

    def isByBlock(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_isByBlock(self, *args)

    def isByACI(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_isByACI(self, *args)

    def isForeground(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_isForeground(self, *args)

    def isByDgnIndex(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_isByDgnIndex(self, *args)

    def color(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_color(self, *args)

    def setColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_setColor(self, *args)

    def setRGB(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_setRGB(self, *args)

    def setRed(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_setRed(self, *args)

    def setGreen(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_setGreen(self, *args)

    def setBlue(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_setBlue(self, *args)

    def red(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_red(self, *args)

    def green(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_green(self, *args)

    def blue(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_blue(self, *args)

    def colorIndex(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_colorIndex(self, *args)

    def setColorIndex(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_setColorIndex(self, *args)

    def setNames(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_setNames(self, *args)

    def colorName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_colorName(self, *args)

    def bookName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_bookName(self, *args)

    def colorNameForDisplay(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdCmColorBaseAdapt_colorNameForDisplay(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdCmColorBaseAdapt

# Register OdCmColorBaseAdapt in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdCmColorBaseAdapt_swigregister(OdCmColorBaseAdapt)

class OdGiFaceStyleDataContainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiFaceStyleDataContainer

    def setBase(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceStyleDataContainer_setBase(self, *args)

    def base(self, *args) -> "OdGiVisualStyle *":
        return _ODA_Kernel_Py3.OdGiFaceStyleDataContainer_base(self, *args)

    def setLightingModel(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceStyleDataContainer_setLightingModel(self, *args)

    def lightingModel(self, *args) -> "LightingModel":
        return _ODA_Kernel_Py3.OdGiFaceStyleDataContainer_lightingModel(self, *args)

    def setLightingQuality(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceStyleDataContainer_setLightingQuality(self, *args)

    def lightingQuality(self, *args) -> "LightingQuality":
        return _ODA_Kernel_Py3.OdGiFaceStyleDataContainer_lightingQuality(self, *args)

    def setFaceColorMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceStyleDataContainer_setFaceColorMode(self, *args)

    def faceColorMode(self, *args) -> "FaceColorMode":
        return _ODA_Kernel_Py3.OdGiFaceStyleDataContainer_faceColorMode(self, *args)

    def setFaceModifiers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceStyleDataContainer_setFaceModifiers(self, *args)

    def setFaceModifierFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceStyleDataContainer_setFaceModifierFlag(self, *args)

    def faceModifiers(self, *args) -> "unsigned long":
        return _ODA_Kernel_Py3.OdGiFaceStyleDataContainer_faceModifiers(self, *args)

    def isFaceModifierFlagSet(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFaceStyleDataContainer_isFaceModifierFlagSet(self, *args)

    def setOpacityLevel(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceStyleDataContainer_setOpacityLevel(self, *args)

    def opacityLevel(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiFaceStyleDataContainer_opacityLevel(self, *args)

    def setSpecularAmount(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceStyleDataContainer_setSpecularAmount(self, *args)

    def specularAmount(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiFaceStyleDataContainer_specularAmount(self, *args)

    def setMonoColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceStyleDataContainer_setMonoColor(self, *args)

    def monoColor(self, *args) -> "OdCmColorBase &":
        return _ODA_Kernel_Py3.OdGiFaceStyleDataContainer_monoColor(self, *args)

# Register OdGiFaceStyleDataContainer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiFaceStyleDataContainer_swigregister(OdGiFaceStyleDataContainer)

class OdGiEdgeStyleDataContainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiEdgeStyleDataContainer

    def setBase(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setBase(self, *args)

    def base(self, *args) -> "OdGiVisualStyle *":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_base(self, *args)

    def setEdgeModel(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setEdgeModel(self, *args)

    def edgeModel(self, *args) -> "EdgeModel":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_edgeModel(self, *args)

    def setEdgeStyles(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setEdgeStyles(self, *args)

    def setEdgeStyleFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setEdgeStyleFlag(self, *args)

    def edgeStyles(self, *args) -> "unsigned long":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_edgeStyles(self, *args)

    def isEdgeStyleFlagSet(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_isEdgeStyleFlagSet(self, *args)

    def setIntersectionColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setIntersectionColor(self, *args)

    def intersectionColor(self, *args) -> "OdCmColorBase &":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_intersectionColor(self, *args)

    def setObscuredColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setObscuredColor(self, *args)

    def obscuredColor(self, *args) -> "OdCmColorBase &":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_obscuredColor(self, *args)

    def setObscuredLinetype(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setObscuredLinetype(self, *args)

    def obscuredLinetype(self, *args) -> "LineType":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_obscuredLinetype(self, *args)

    def setIntersectionLinetype(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setIntersectionLinetype(self, *args)

    def intersectionLinetype(self, *args) -> "LineType":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_intersectionLinetype(self, *args)

    def setCreaseAngle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setCreaseAngle(self, *args)

    def creaseAngle(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_creaseAngle(self, *args)

    def setEdgeModifiers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setEdgeModifiers(self, *args)

    def setEdgeModifierFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setEdgeModifierFlag(self, *args)

    def edgeModifiers(self, *args) -> "unsigned long":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_edgeModifiers(self, *args)

    def isEdgeModifierFlagSet(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_isEdgeModifierFlagSet(self, *args)

    def setEdgeColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setEdgeColor(self, *args)

    def edgeColor(self, *args) -> "OdCmColorBase &":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_edgeColor(self, *args)

    def setOpacityLevel(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setOpacityLevel(self, *args)

    def opacityLevel(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_opacityLevel(self, *args)

    def setEdgeWidth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setEdgeWidth(self, *args)

    def edgeWidth(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_edgeWidth(self, *args)

    def setOverhangAmount(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setOverhangAmount(self, *args)

    def overhangAmount(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_overhangAmount(self, *args)

    def setJitterAmount(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setJitterAmount(self, *args)

    def jitterAmount(self, *args) -> "JitterAmount":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_jitterAmount(self, *args)

    def setWiggleAmount(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setWiggleAmount(self, *args)

    def wiggleAmount(self, *args) -> "WiggleAmount":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_wiggleAmount(self, *args)

    def setSilhouetteColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setSilhouetteColor(self, *args)

    def silhouetteColor(self, *args) -> "OdCmColorBase &":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_silhouetteColor(self, *args)

    def setSilhouetteWidth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setSilhouetteWidth(self, *args)

    def silhouetteWidth(self, *args) -> "short":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_silhouetteWidth(self, *args)

    def setHaloGap(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setHaloGap(self, *args)

    def haloGap(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_haloGap(self, *args)

    def setIsolines(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setIsolines(self, *args)

    def isolines(self, *args) -> "unsigned short":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_isolines(self, *args)

    def setHidePrecision(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setHidePrecision(self, *args)

    def hidePrecision(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_hidePrecision(self, *args)

    def setEdgeStyleApply(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_setEdgeStyleApply(self, *args)

    def edgeStyleApply(self, *args) -> "EdgeStyleApply":
        return _ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_edgeStyleApply(self, *args)

# Register OdGiEdgeStyleDataContainer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiEdgeStyleDataContainer_swigregister(OdGiEdgeStyleDataContainer)

class OdGiDisplayStyleDataContainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDisplayStyleDataContainer

    def setBase(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDisplayStyleDataContainer_setBase(self, *args)

    def base(self, *args) -> "OdGiVisualStyle *":
        return _ODA_Kernel_Py3.OdGiDisplayStyleDataContainer_base(self, *args)

    def setDisplaySettings(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDisplayStyleDataContainer_setDisplaySettings(self, *args)

    def setDisplaySettingsFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDisplayStyleDataContainer_setDisplaySettingsFlag(self, *args)

    def displaySettings(self, *args) -> "unsigned long":
        return _ODA_Kernel_Py3.OdGiDisplayStyleDataContainer_displaySettings(self, *args)

    def isDisplaySettingsFlagSet(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDisplayStyleDataContainer_isDisplaySettingsFlagSet(self, *args)

    def setBrightness(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDisplayStyleDataContainer_setBrightness(self, *args)

    def brightness(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiDisplayStyleDataContainer_brightness(self, *args)

    def setShadowType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDisplayStyleDataContainer_setShadowType(self, *args)

    def shadowType(self, *args) -> "ShadowType":
        return _ODA_Kernel_Py3.OdGiDisplayStyleDataContainer_shadowType(self, *args)

# Register OdGiDisplayStyleDataContainer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDisplayStyleDataContainer_swigregister(OdGiDisplayStyleDataContainer)


def odgiCalculateTriangleShellLoops(*args) -> "bool":
    return _ODA_Kernel_Py3.odgiCalculateTriangleShellLoops(*args)
class OdGiTransientManager(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiTransientManager >":
        return _ODA_Kernel_Py3.OdGiTransientManager_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiTransientManager_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiTransientManager_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiTransientManager_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiTransientManager >":
        return _ODA_Kernel_Py3.OdGiTransientManager_createObject(*args)
    kOdGiMain = _ODA_Kernel_Py3.OdGiTransientManager_kOdGiMain
    kOdGiSprite = _ODA_Kernel_Py3.OdGiTransientManager_kOdGiSprite
    kOdGiDirectShortTerm = _ODA_Kernel_Py3.OdGiTransientManager_kOdGiDirectShortTerm
    kOdGiHighlight = _ODA_Kernel_Py3.OdGiTransientManager_kOdGiHighlight
    kOdGiDirectTopmost = _ODA_Kernel_Py3.OdGiTransientManager_kOdGiDirectTopmost
    kOdGiContrast = _ODA_Kernel_Py3.OdGiTransientManager_kOdGiContrast
    kOdGiDrawingModeCount = _ODA_Kernel_Py3.OdGiTransientManager_kOdGiDrawingModeCount

    def addTransient(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiTransientManager_addTransient(self, *args)

    def eraseTransient(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiTransientManager_eraseTransient(self, *args)

    def eraseTransients(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiTransientManager_eraseTransients(self, *args)

    def updateTransient(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTransientManager_updateTransient(self, *args)

    def addChildTransient(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiTransientManager_addChildTransient(self, *args)

    def eraseChildTransient(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiTransientManager_eraseChildTransient(self, *args)

    def updateChildTransient(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTransientManager_updateChildTransient(self, *args)

    def getFreeSubDrawingMode(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiTransientManager_getFreeSubDrawingMode(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiTransientManager

# Register OdGiTransientManager in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiTransientManager_swigregister(OdGiTransientManager)

def OdGiTransientManager_cast(*args) -> "OdSmartPtr< OdGiTransientManager >":
    return _ODA_Kernel_Py3.OdGiTransientManager_cast(*args)

def OdGiTransientManager_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiTransientManager_desc(*args)

def OdGiTransientManager_createObject(*args) -> "OdSmartPtr< OdGiTransientManager >":
    return _ODA_Kernel_Py3.OdGiTransientManager_createObject(*args)


def odgiGetTransientManager(*args) -> "OdGiTransientManager *":
    return _ODA_Kernel_Py3.odgiGetTransientManager(*args)

def odgiSetTransientManager(*args) -> "void":
    return _ODA_Kernel_Py3.odgiSetTransientManager(*args)
class OdGiTransientManagerPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiTransientManagerPE >":
        return _ODA_Kernel_Py3.OdGiTransientManagerPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiTransientManagerPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiTransientManagerPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiTransientManagerPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiTransientManagerPE >":
        return _ODA_Kernel_Py3.OdGiTransientManagerPE_createObject(*args)

    def transientManager(self, *args) -> "OdGiTransientManager *":
        return _ODA_Kernel_Py3.OdGiTransientManagerPE_transientManager(self, *args)

    def setTransientManager(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTransientManagerPE_setTransientManager(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiTransientManagerPE

# Register OdGiTransientManagerPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiTransientManagerPE_swigregister(OdGiTransientManagerPE)

def OdGiTransientManagerPE_cast(*args) -> "OdSmartPtr< OdGiTransientManagerPE >":
    return _ODA_Kernel_Py3.OdGiTransientManagerPE_cast(*args)

def OdGiTransientManagerPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiTransientManagerPE_desc(*args)

def OdGiTransientManagerPE_createObject(*args) -> "OdSmartPtr< OdGiTransientManagerPE >":
    return _ODA_Kernel_Py3.OdGiTransientManagerPE_createObject(*args)

class OdGiSubEntityTraitsDataSaver(OdGiSubEntityTraitsData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiSubEntityTraitsDataSaver_swiginit(self, _ODA_Kernel_Py3.new_OdGiSubEntityTraitsDataSaver(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSubEntityTraitsDataSaver

    def setMapper(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsDataSaver_setMapper(self, *args)

    def setLineStyleModifiers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsDataSaver_setLineStyleModifiers(self, *args)

    def setFill(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSubEntityTraitsDataSaver_setFill(self, *args)

# Register OdGiSubEntityTraitsDataSaver in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSubEntityTraitsDataSaver_swigregister(OdGiSubEntityTraitsDataSaver)

class OdGiSpatialFilter(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiSpatialFilter >":
        return _ODA_Kernel_Py3.OdGiSpatialFilter_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSpatialFilter_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSpatialFilter_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiSpatialFilter_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiSpatialFilter >":
        return _ODA_Kernel_Py3.OdGiSpatialFilter_createObject(*args)

    def input(self, *args) -> "OdGiConveyorInput &":
        return _ODA_Kernel_Py3.OdGiSpatialFilter_input(self, *args)

    def insideOutput(self, *args) -> "OdGiConveyorOutput &":
        return _ODA_Kernel_Py3.OdGiSpatialFilter_insideOutput(self, *args)

    def intersectsOutput(self, *args) -> "OdGiConveyorOutput &":
        return _ODA_Kernel_Py3.OdGiSpatialFilter_intersectsOutput(self, *args)

    def disjointOutput(self, *args) -> "OdGiConveyorOutput &":
        return _ODA_Kernel_Py3.OdGiSpatialFilter_disjointOutput(self, *args)
    kNullGeometry = property(_ODA_Kernel_Py3.OdGiSpatialFilter_kNullGeometry_get, _ODA_Kernel_Py3.OdGiSpatialFilter_kNullGeometry_set)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSpatialFilter_set(self, *args)

    def get(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSpatialFilter_get(self, *args)

    def isSimplifyOpt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSpatialFilter_isSimplifyOpt(self, *args)

    def setDrawContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSpatialFilter_setDrawContext(self, *args)

    def setDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSpatialFilter_setDeviation(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSpatialFilter

# Register OdGiSpatialFilter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSpatialFilter_swigregister(OdGiSpatialFilter)

def OdGiSpatialFilter_cast(*args) -> "OdSmartPtr< OdGiSpatialFilter >":
    return _ODA_Kernel_Py3.OdGiSpatialFilter_cast(*args)

def OdGiSpatialFilter_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiSpatialFilter_desc(*args)

def OdGiSpatialFilter_createObject(*args) -> "OdSmartPtr< OdGiSpatialFilter >":
    return _ODA_Kernel_Py3.OdGiSpatialFilter_createObject(*args)

class OdGiEdgeDataStorage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiEdgeDataStorage_swiginit(self, _ODA_Kernel_Py3.new_OdGiEdgeDataStorage(*args))

    def colorsArray(self, *args) -> "OdUInt16Array &":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_colorsArray(self, *args)

    def setColorsArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_setColorsArray(self, *args)

    def resizeColorsArray(self, *args) -> "OdUInt16 *":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_resizeColorsArray(self, *args)

    def trueColorsArray(self, *args) -> "OdCmEntityColorArray &":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_trueColorsArray(self, *args)

    def setTrueColorsArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_setTrueColorsArray(self, *args)

    def resizeTrueColorsArray(self, *args) -> "OdCmEntityColor *":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_resizeTrueColorsArray(self, *args)

    def layerIdsArray(self, *args) -> "OdDbStubPtrArray &":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_layerIdsArray(self, *args)

    def setLayersArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_setLayersArray(self, *args)

    def resizeLayerIdsArray(self, *args) -> "OdDbStub **":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_resizeLayerIdsArray(self, *args)

    def linetypeIdsArray(self, *args) -> "OdDbStubPtrArray &":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_linetypeIdsArray(self, *args)

    def setLinetypesArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_setLinetypesArray(self, *args)

    def resizeLinetypeIdsArray(self, *args) -> "OdDbStub **":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_resizeLinetypeIdsArray(self, *args)

    def selectionMarkersArray(self, *args) -> "OdGsMarkerArray &":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_selectionMarkersArray(self, *args)

    def setSelectionMarkersArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_setSelectionMarkersArray(self, *args)

    def resizeSelectionMarkersArray(self, *args) -> "OdGsMarker *":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_resizeSelectionMarkersArray(self, *args)

    def visibilityArray(self, *args) -> "OdUInt8Array &":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_visibilityArray(self, *args)

    def setVisibilityArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_setVisibilityArray(self, *args)

    def resizeVisibilityArray(self, *args) -> "OdUInt8 *":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_resizeVisibilityArray(self, *args)

    def cloneData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_cloneData(self, *args)

    def resetPointers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_resetPointers(self, *args)

    def setPointersArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_setPointersArray(self, *args)

    def clearArrays(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_clearArrays(self, *args)

    def deleteArrays(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_deleteArrays(self, *args)

    def reserveArrays(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_reserveArrays(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiEdgeDataStorage_copyFrom(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiEdgeDataStorage

# Register OdGiEdgeDataStorage in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiEdgeDataStorage_swigregister(OdGiEdgeDataStorage)

class OdGiFaceDataStorage(OdGiFaceData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiFaceDataStorage_swiginit(self, _ODA_Kernel_Py3.new_OdGiFaceDataStorage(*args))

    def colorsArray(self, *args) -> "OdUInt16Array &":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_colorsArray(self, *args)

    def setColorsArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_setColorsArray(self, *args)

    def resizeColorsArray(self, *args) -> "OdUInt16 *":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_resizeColorsArray(self, *args)

    def trueColorsArray(self, *args) -> "OdCmEntityColorArray &":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_trueColorsArray(self, *args)

    def setTrueColorsArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_setTrueColorsArray(self, *args)

    def resizeTrueColorsArray(self, *args) -> "OdCmEntityColor *":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_resizeTrueColorsArray(self, *args)

    def layerIdsArray(self, *args) -> "OdDbStubPtrArray &":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_layerIdsArray(self, *args)

    def setLayersArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_setLayersArray(self, *args)

    def resizeLayerIdsArray(self, *args) -> "OdDbStub **":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_resizeLayerIdsArray(self, *args)

    def selectionMarkersArray(self, *args) -> "OdGsMarkerArray &":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_selectionMarkersArray(self, *args)

    def setSelectionMarkersArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_setSelectionMarkersArray(self, *args)

    def resizeSelectionMarkersArray(self, *args) -> "OdGsMarker *":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_resizeSelectionMarkersArray(self, *args)

    def normalsArray(self, *args) -> "OdGeVector3dArray &":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_normalsArray(self, *args)

    def setNormalsArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_setNormalsArray(self, *args)

    def resizeNormalsArray(self, *args) -> "OdGeVector3d *":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_resizeNormalsArray(self, *args)

    def visibilityArray(self, *args) -> "OdUInt8Array &":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_visibilityArray(self, *args)

    def setVisibilityArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_setVisibilityArray(self, *args)

    def resizeVisibilityArray(self, *args) -> "OdUInt8 *":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_resizeVisibilityArray(self, *args)

    def materialsArray(self, *args) -> "OdDbStubPtrArray &":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_materialsArray(self, *args)

    def setMaterialsArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_setMaterialsArray(self, *args)

    def resizeMaterialsArray(self, *args) -> "OdDbStub **":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_resizeMaterialsArray(self, *args)

    def mappersArray(self, *args) -> "OdGiFaceDataStorage::OdGiMapperArray &":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_mappersArray(self, *args)

    def setMappersArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_setMappersArray(self, *args)

    def resizeMappersArray(self, *args) -> "OdGiMapper *":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_resizeMappersArray(self, *args)

    def transparencyArray(self, *args) -> "OdCmTransparencyArray &":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_transparencyArray(self, *args)

    def setTransparencyArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_setTransparencyArray(self, *args)

    def resizeTransparencyArray(self, *args) -> "OdCmTransparency *":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_resizeTransparencyArray(self, *args)

    def cloneData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_cloneData(self, *args)

    def resetPointers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_resetPointers(self, *args)

    def setPointersArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_setPointersArray(self, *args)

    def clearArrays(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_clearArrays(self, *args)

    def deleteArrays(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_deleteArrays(self, *args)

    def reserveArrays(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_reserveArrays(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFaceDataStorage_copyFrom(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiFaceDataStorage

# Register OdGiFaceDataStorage in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiFaceDataStorage_swigregister(OdGiFaceDataStorage)

class OdGiVertexDataStorage(OdGiVertexData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiVertexDataStorage_swiginit(self, _ODA_Kernel_Py3.new_OdGiVertexDataStorage(*args))

    def normalsArray(self, *args) -> "OdGeVector3dArray &":
        return _ODA_Kernel_Py3.OdGiVertexDataStorage_normalsArray(self, *args)

    def setNormalsArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVertexDataStorage_setNormalsArray(self, *args)

    def resizeNormalsArray(self, *args) -> "OdGeVector3d *":
        return _ODA_Kernel_Py3.OdGiVertexDataStorage_resizeNormalsArray(self, *args)

    def trueColorsArray(self, *args) -> "OdCmEntityColorArray &":
        return _ODA_Kernel_Py3.OdGiVertexDataStorage_trueColorsArray(self, *args)

    def setTrueColorsArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVertexDataStorage_setTrueColorsArray(self, *args)

    def resizeTrueColorsArray(self, *args) -> "OdCmEntityColor *":
        return _ODA_Kernel_Py3.OdGiVertexDataStorage_resizeTrueColorsArray(self, *args)

    def mappingCoordsArray(self, *args) -> "OdGePoint3dArray &":
        return _ODA_Kernel_Py3.OdGiVertexDataStorage_mappingCoordsArray(self, *args)

    def setMappingCoordsArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVertexDataStorage_setMappingCoordsArray(self, *args)

    def resizeMappingCoordsArray(self, *args) -> "OdGePoint3d *":
        return _ODA_Kernel_Py3.OdGiVertexDataStorage_resizeMappingCoordsArray(self, *args)

    def cloneData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVertexDataStorage_cloneData(self, *args)

    def resetPointers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVertexDataStorage_resetPointers(self, *args)

    def setPointersArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVertexDataStorage_setPointersArray(self, *args)

    def clearArrays(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVertexDataStorage_clearArrays(self, *args)

    def deleteArrays(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVertexDataStorage_deleteArrays(self, *args)

    def reserveArrays(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVertexDataStorage_reserveArrays(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiVertexDataStorage_copyFrom(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiVertexDataStorage

# Register OdGiVertexDataStorage in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiVertexDataStorage_swigregister(OdGiVertexDataStorage)

class OdGiShmDataStorage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiShmDataStorage_swiginit(self, _ODA_Kernel_Py3.new_OdGiShmDataStorage(*args))

    def setVertexList(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_setVertexList(self, *args)

    def vertexList(self, *args) -> "OdGePoint3d const *":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_vertexList(self, *args)

    def vertexListArray(self, *args) -> "OdGePoint3dArray &":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_vertexListArray(self, *args)

    def setVertexListArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_setVertexListArray(self, *args)

    def resizeVertexListArray(self, *args) -> "OdGePoint3d *":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_resizeVertexListArray(self, *args)

    def setFaceList(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_setFaceList(self, *args)

    def faceList(self, *args) -> "OdInt32 const *":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_faceList(self, *args)

    def faceListArray(self, *args) -> "OdInt32Array &":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_faceListArray(self, *args)

    def setFaceListArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_setFaceListArray(self, *args)

    def resizeFaceListArray(self, *args) -> "OdInt32 *":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_resizeFaceListArray(self, *args)

    def setEdgeData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_setEdgeData(self, *args)

    def edgeData(self, *args) -> "OdGiEdgeData const *":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_edgeData(self, *args)

    def edgeDataStorage(self, *args) -> "OdGiEdgeDataStorage &":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_edgeDataStorage(self, *args)

    def setEdgeDataStorage(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_setEdgeDataStorage(self, *args)

    def resetEdgeData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_resetEdgeData(self, *args)

    def cloneEdgeData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_cloneEdgeData(self, *args)

    def setFaceData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_setFaceData(self, *args)

    def faceData(self, *args) -> "OdGiFaceData const *":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_faceData(self, *args)

    def faceDataStorage(self, *args) -> "OdGiFaceDataStorage &":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_faceDataStorage(self, *args)

    def setFaceDataStorage(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_setFaceDataStorage(self, *args)

    def resetFaceData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_resetFaceData(self, *args)

    def cloneFaceData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_cloneFaceData(self, *args)

    def setVertexData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_setVertexData(self, *args)

    def vertexData(self, *args) -> "OdGiVertexData const *":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_vertexData(self, *args)

    def vertexDataStorage(self, *args) -> "OdGiVertexDataStorage &":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_vertexDataStorage(self, *args)

    def setVertexDataStorage(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_setVertexDataStorage(self, *args)

    def resetVertexData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_resetVertexData(self, *args)

    def cloneVertexData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_cloneVertexData(self, *args)

    def resetPointers(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_resetPointers(self, *args)

    def setPointersArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_setPointersArray(self, *args)

    def clearArrays(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_clearArrays(self, *args)

    def deleteArrays(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShmDataStorage_deleteArrays(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiShmDataStorage

# Register OdGiShmDataStorage in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiShmDataStorage_swigregister(OdGiShmDataStorage)

class OdGiShellToolkit(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kUnifyVertices = _ODA_Kernel_Py3.OdGiShellToolkit_kUnifyVertices
    kTriangulateHoles = _ODA_Kernel_Py3.OdGiShellToolkit_kTriangulateHoles
    kForceTriangulation = _ODA_Kernel_Py3.OdGiShellToolkit_kForceTriangulation

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiShellToolkit >":
        return _ODA_Kernel_Py3.OdGiShellToolkit_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiShellToolkit_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiShellToolkit_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiShellToolkit_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiShellToolkit >":
        return _ODA_Kernel_Py3.OdGiShellToolkit_createObject(*args)

    @staticmethod
    def create(*args) -> "OdSmartPtr< OdGiShellToolkit >":
        return _ODA_Kernel_Py3.OdGiShellToolkit_create(*args)

    def addShell(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShellToolkit_addShell(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShellToolkit_clear(self, *args)

    def hasDupilcateVertices(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShellToolkit_hasDupilcateVertices(self, *args)

    def numSharpEdges(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiShellToolkit_numSharpEdges(self, *args)

    def numSingularEdges(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiShellToolkit_numSingularEdges(self, *args)

    def numDegeneratedFaces(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiShellToolkit_numDegeneratedFaces(self, *args)

    def hasDuplicateFaces(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShellToolkit_hasDuplicateFaces(self, *args)

    def checkFacesOrientation(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShellToolkit_checkFacesOrientation(self, *args)

    def unifyVertices(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShellToolkit_unifyVertices(self, *args)

    def removeDegenerateFaces(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShellToolkit_removeDegenerateFaces(self, *args)

    def removeDuplicateFaces(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShellToolkit_removeDuplicateFaces(self, *args)

    def fixFaceOrientation(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShellToolkit_fixFaceOrientation(self, *args)

    def tolerance(self, *args) -> "OdGeTol const &":
        return _ODA_Kernel_Py3.OdGiShellToolkit_tolerance(self, *args)

    def numVertices(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiShellToolkit_numVertices(self, *args)

    def vertices(self, *args) -> "OdGePoint3d const *":
        return _ODA_Kernel_Py3.OdGiShellToolkit_vertices(self, *args)

    def faceListSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiShellToolkit_faceListSize(self, *args)

    def faceList(self, *args) -> "OdInt32 const *":
        return _ODA_Kernel_Py3.OdGiShellToolkit_faceList(self, *args)

    def getSharpEdges(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShellToolkit_getSharpEdges(self, *args)

    def getSingularEdges(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShellToolkit_getSingularEdges(self, *args)

    def getIncorrectOrientedFaces(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShellToolkit_getIncorrectOrientedFaces(self, *args)

    def getOriginalFaceDescription(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShellToolkit_getOriginalFaceDescription(self, *args)

    def filterEdgesByCreaseAngle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShellToolkit_filterEdgesByCreaseAngle(self, *args)

    def numNonTriangleFaces(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiShellToolkit_numNonTriangleFaces(self, *args)

    def triangulate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShellToolkit_triangulate(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiShellToolkit

# Register OdGiShellToolkit in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiShellToolkit_swigregister(OdGiShellToolkit)

def OdGiShellToolkit_cast(*args) -> "OdSmartPtr< OdGiShellToolkit >":
    return _ODA_Kernel_Py3.OdGiShellToolkit_cast(*args)

def OdGiShellToolkit_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiShellToolkit_desc(*args)

def OdGiShellToolkit_createObject(*args) -> "OdSmartPtr< OdGiShellToolkit >":
    return _ODA_Kernel_Py3.OdGiShellToolkit_createObject(*args)

def OdGiShellToolkit_create(*args) -> "OdSmartPtr< OdGiShellToolkit >":
    return _ODA_Kernel_Py3.OdGiShellToolkit_create(*args)

class OdGiShellFaceOrientationCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def isFaceOrientedCorrectly(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShellFaceOrientationCallback_isFaceOrientedCorrectly(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiShellFaceOrientationCallback_swiginit(self, _ODA_Kernel_Py3.new_OdGiShellFaceOrientationCallback(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiShellFaceOrientationCallback

# Register OdGiShellFaceOrientationCallback in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiShellFaceOrientationCallback_swigregister(OdGiShellFaceOrientationCallback)

class OdGiShellOriginalFaceDescription(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nShell = property(_ODA_Kernel_Py3.OdGiShellOriginalFaceDescription_nShell_get, _ODA_Kernel_Py3.OdGiShellOriginalFaceDescription_nShell_set)
    nOffset = property(_ODA_Kernel_Py3.OdGiShellOriginalFaceDescription_nOffset_get, _ODA_Kernel_Py3.OdGiShellOriginalFaceDescription_nOffset_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiShellOriginalFaceDescription_swiginit(self, _ODA_Kernel_Py3.new_OdGiShellOriginalFaceDescription(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiShellOriginalFaceDescription

# Register OdGiShellOriginalFaceDescription in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiShellOriginalFaceDescription_swigregister(OdGiShellOriginalFaceDescription)

class OdGiShellFaceDescription(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nOffset = property(_ODA_Kernel_Py3.OdGiShellFaceDescription_nOffset_get, _ODA_Kernel_Py3.OdGiShellFaceDescription_nOffset_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiShellFaceDescription_swiginit(self, _ODA_Kernel_Py3.new_OdGiShellFaceDescription(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiShellFaceDescription

# Register OdGiShellFaceDescription in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiShellFaceDescription_swigregister(OdGiShellFaceDescription)

class OdGiShellEdgeDescription(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    face = property(_ODA_Kernel_Py3.OdGiShellEdgeDescription_face_get, _ODA_Kernel_Py3.OdGiShellEdgeDescription_face_set)
    nEdge = property(_ODA_Kernel_Py3.OdGiShellEdgeDescription_nEdge_get, _ODA_Kernel_Py3.OdGiShellEdgeDescription_nEdge_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiShellEdgeDescription_swiginit(self, _ODA_Kernel_Py3.new_OdGiShellEdgeDescription(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiShellEdgeDescription

# Register OdGiShellEdgeDescription in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiShellEdgeDescription_swigregister(OdGiShellEdgeDescription)

class OdGiShellFaceIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiShellFaceIterator_swiginit(self, _ODA_Kernel_Py3.new_OdGiShellFaceIterator(*args))

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiShellFaceIterator_set(self, *args)

    def faceListPos(self, *args) -> "OdInt32 const *":
        return _ODA_Kernel_Py3.OdGiShellFaceIterator_faceListPos(self, *args)

    def __ref__(self, *args) -> "OdGePoint3d const &":
        return _ODA_Kernel_Py3.OdGiShellFaceIterator___ref__(self, *args)

    def __deref__(self, *args) -> "OdGePoint3d const *":
        return _ODA_Kernel_Py3.OdGiShellFaceIterator___deref__(self, *args)

    def __iadd__(self, *args) -> "OdGiShellFaceIterator &":
        return _ODA_Kernel_Py3.OdGiShellFaceIterator___iadd__(self, *args)

    def __isub__(self, *args) -> "OdGiShellFaceIterator &":
        return _ODA_Kernel_Py3.OdGiShellFaceIterator___isub__(self, *args)

    def __sub__(self, *args) -> "OdGiShellFaceIterator":
        return _ODA_Kernel_Py3.OdGiShellFaceIterator___sub__(self, *args)

    def __lt__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShellFaceIterator___lt__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiShellFaceIterator
    kOrigin = property(_ODA_Kernel_Py3.OdGiShellFaceIterator_kOrigin_get)

    def convert2d(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGiShellFaceIterator_convert2d(self, *args)

    def __mul__(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGiShellFaceIterator___mul__(self, *args)

    def __truediv__(self, *args):
        return _ODA_Kernel_Py3.OdGiShellFaceIterator___truediv__(self, *args)
    __div__ = __truediv__



    def __add__(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGiShellFaceIterator___add__(self, *args)

    def distanceTo(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiShellFaceIterator_distanceTo(self, *args)

    def distanceSqrdTo(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiShellFaceIterator_distanceSqrdTo(self, *args)

    def project(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGiShellFaceIterator_project(self, *args)

    def orthoProject(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGiShellFaceIterator_orthoProject(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShellFaceIterator___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShellFaceIterator___ne__(self, *args)

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiShellFaceIterator_isEqualTo(self, *args)
    x = property(_ODA_Kernel_Py3.OdGiShellFaceIterator_x_get)
    y = property(_ODA_Kernel_Py3.OdGiShellFaceIterator_y_get)
    z = property(_ODA_Kernel_Py3.OdGiShellFaceIterator_z_get)

# Register OdGiShellFaceIterator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiShellFaceIterator_swigregister(OdGiShellFaceIterator)

class OdGiSelectProc(OdGiConveyorNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kCheckMarkerOnChange = _ODA_Kernel_Py3.OdGiSelectProc_kCheckMarkerOnChange
    kCheckMarkerOnViewModeChange = _ODA_Kernel_Py3.OdGiSelectProc_kCheckMarkerOnViewModeChange
    kCheckMarkerFinish = _ODA_Kernel_Py3.OdGiSelectProc_kCheckMarkerFinish

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiSelectProc >":
        return _ODA_Kernel_Py3.OdGiSelectProc_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSelectProc_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSelectProc_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiSelectProc_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiSelectProc >":
        return _ODA_Kernel_Py3.OdGiSelectProc_createObject(*args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSelectProc_set(self, *args)

    def get(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSelectProc_get(self, *args)

    def check_n_fire_selected(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSelectProc_check_n_fire_selected(self, *args)

    def setDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSelectProc_setDeviation(self, *args)

    def setDrawContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSelectProc_setDrawContext(self, *args)

    @staticmethod
    def supportsSubentitySelection(*args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSelectProc_supportsSubentitySelection(*args)

    def handleSelectionByExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSelectProc_handleSelectionByExtents(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSelectProc

# Register OdGiSelectProc in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSelectProc_swigregister(OdGiSelectProc)

def OdGiSelectProc_cast(*args) -> "OdSmartPtr< OdGiSelectProc >":
    return _ODA_Kernel_Py3.OdGiSelectProc_cast(*args)

def OdGiSelectProc_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiSelectProc_desc(*args)

def OdGiSelectProc_createObject(*args) -> "OdSmartPtr< OdGiSelectProc >":
    return _ODA_Kernel_Py3.OdGiSelectProc_createObject(*args)

def OdGiSelectProc_supportsSubentitySelection(*args) -> "bool":
    return _ODA_Kernel_Py3.OdGiSelectProc_supportsSubentitySelection(*args)

class OdGiSelector(OdGiConveyorNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiSelector >":
        return _ODA_Kernel_Py3.OdGiSelector_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSelector_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSelector_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiSelector_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiSelector >":
        return _ODA_Kernel_Py3.OdGiSelector_createObject(*args)

    def setDrawContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSelector_setDrawContext(self, *args)

    def setReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSelector_setReactor(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSelector

# Register OdGiSelector in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSelector_swigregister(OdGiSelector)

def OdGiSelector_cast(*args) -> "OdSmartPtr< OdGiSelector >":
    return _ODA_Kernel_Py3.OdGiSelector_cast(*args)

def OdGiSelector_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiSelector_desc(*args)

def OdGiSelector_createObject(*args) -> "OdSmartPtr< OdGiSelector >":
    return _ODA_Kernel_Py3.OdGiSelector_createObject(*args)

class OdGiSelectionStyle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiSelectionStyle_swiginit(self, _ODA_Kernel_Py3.new_OdGiSelectionStyle(*args))

    def styleFor(self, *args) -> "OdGiSelectionStyle::StyleEntry const &":
        return _ODA_Kernel_Py3.OdGiSelectionStyle_styleFor(self, *args)

    def sync3d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSelectionStyle_sync3d(self, *args)

    def sync2d(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSelectionStyle_sync2d(self, *args)

    def exchangeTopBottom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSelectionStyle_exchangeTopBottom(self, *args)

    def setOnTopOfDepth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSelectionStyle_setOnTopOfDepth(self, *args)

    def isOnTopOfDepth(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSelectionStyle_isOnTopOfDepth(self, *args)

    def setByDefault(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSelectionStyle_setByDefault(self, *args)

    def setAsDisabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSelectionStyle_setAsDisabled(self, *args)

    def setForStippling(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSelectionStyle_setForStippling(self, *args)

    def setForColorMasking(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSelectionStyle_setForColorMasking(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSelectionStyle

# Register OdGiSelectionStyle in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSelectionStyle_swigregister(OdGiSelectionStyle)

class ColorMask(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.ColorMask_swiginit(self, _ODA_Kernel_Py3.new_ColorMask(*args))

    def color(self, *args) -> "OdCmEntityColor const &":
        return _ODA_Kernel_Py3.ColorMask_color(self, *args)

    def setTransparency(self, *args) -> "void":
        return _ODA_Kernel_Py3.ColorMask_setTransparency(self, *args)

    def transparency(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.ColorMask_transparency(self, *args)

    def setColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.ColorMask_setColor(self, *args)

    def isVisible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ColorMask_isVisible(self, *args)

    def isOpaque(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ColorMask_isOpaque(self, *args)

    def reset(self, *args) -> "void":
        return _ODA_Kernel_Py3.ColorMask_reset(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ColorMask___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ColorMask___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_ColorMask

# Register ColorMask in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.ColorMask_swigregister(ColorMask)

class ElementStyle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.ElementStyle_swiginit(self, _ODA_Kernel_Py3.new_ElementStyle(*args))

    def setVisible(self, *args) -> "void":
        return _ODA_Kernel_Py3.ElementStyle_setVisible(self, *args)

    def isVisible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ElementStyle_isVisible(self, *args)

    def enablePattern(self, *args) -> "void":
        return _ODA_Kernel_Py3.ElementStyle_enablePattern(self, *args)

    def isPatternEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ElementStyle_isPatternEnabled(self, *args)

    def enableColorMasking(self, *args) -> "void":
        return _ODA_Kernel_Py3.ElementStyle_enableColorMasking(self, *args)

    def isColorMaskingEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ElementStyle_isColorMaskingEnabled(self, *args)

    def colorMask(self, *args) -> "OdGiSelectionStyle::ColorMask &":
        return _ODA_Kernel_Py3.ElementStyle_colorMask(self, *args)

    def isOnTopOfDepth(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ElementStyle_isOnTopOfDepth(self, *args)

    def hasEffect(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ElementStyle_hasEffect(self, *args)

    def setByDefault(self, *args) -> "void":
        return _ODA_Kernel_Py3.ElementStyle_setByDefault(self, *args)

    def setAsDisabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.ElementStyle_setAsDisabled(self, *args)

    def setForStippling(self, *args) -> "void":
        return _ODA_Kernel_Py3.ElementStyle_setForStippling(self, *args)

    def setForColorMasking(self, *args) -> "void":
        return _ODA_Kernel_Py3.ElementStyle_setForColorMasking(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ElementStyle___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ElementStyle___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_ElementStyle

# Register ElementStyle in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.ElementStyle_swigregister(ElementStyle)

class EdgeStyle(ElementStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kExistEdges = _ODA_Kernel_Py3.EdgeStyle_kExistEdges
    kIsolineEdges = _ODA_Kernel_Py3.EdgeStyle_kIsolineEdges
    kContourEdges = _ODA_Kernel_Py3.EdgeStyle_kContourEdges

    def __init__(self, *args):
        _ODA_Kernel_Py3.EdgeStyle_swiginit(self, _ODA_Kernel_Py3.new_EdgeStyle(*args))

    def setMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.EdgeStyle_setMode(self, *args)

    def mode(self, *args) -> "OdGiSelectionStyle::EdgeStyle::Mode":
        return _ODA_Kernel_Py3.EdgeStyle_mode(self, *args)

    def setLineWeightExtension(self, *args) -> "void":
        return _ODA_Kernel_Py3.EdgeStyle_setLineWeightExtension(self, *args)

    def lineWeightExtension(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.EdgeStyle_lineWeightExtension(self, *args)

    def hasLineWeightExtension(self, *args) -> "bool":
        return _ODA_Kernel_Py3.EdgeStyle_hasLineWeightExtension(self, *args)

    def hasEffect(self, *args) -> "bool":
        return _ODA_Kernel_Py3.EdgeStyle_hasEffect(self, *args)

    def setByDefault(self, *args) -> "void":
        return _ODA_Kernel_Py3.EdgeStyle_setByDefault(self, *args)

    def setAsDisabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.EdgeStyle_setAsDisabled(self, *args)

    def setForStippling(self, *args) -> "void":
        return _ODA_Kernel_Py3.EdgeStyle_setForStippling(self, *args)

    def setForColorMasking(self, *args) -> "void":
        return _ODA_Kernel_Py3.EdgeStyle_setForColorMasking(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.EdgeStyle___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.EdgeStyle___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_EdgeStyle

# Register EdgeStyle in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.EdgeStyle_swigregister(EdgeStyle)

class StyleEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def edgeStyle(self, *args) -> "OdGiSelectionStyle::EdgeStyle const &":
        return _ODA_Kernel_Py3.StyleEntry_edgeStyle(self, *args)

    def faceStyle(self, *args) -> "OdGiSelectionStyle::FaceStyle const &":
        return _ODA_Kernel_Py3.StyleEntry_faceStyle(self, *args)

    def isOnTopOfDepth(self, *args) -> "bool":
        return _ODA_Kernel_Py3.StyleEntry_isOnTopOfDepth(self, *args)

    def isVisible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.StyleEntry_isVisible(self, *args)

    def hasEffect(self, *args) -> "bool":
        return _ODA_Kernel_Py3.StyleEntry_hasEffect(self, *args)

    def setByDefault(self, *args) -> "void":
        return _ODA_Kernel_Py3.StyleEntry_setByDefault(self, *args)

    def setAsDisabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.StyleEntry_setAsDisabled(self, *args)

    def setForStippling(self, *args) -> "void":
        return _ODA_Kernel_Py3.StyleEntry_setForStippling(self, *args)

    def setForColorMasking(self, *args) -> "void":
        return _ODA_Kernel_Py3.StyleEntry_setForColorMasking(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.StyleEntry___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.StyleEntry___ne__(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.StyleEntry_swiginit(self, _ODA_Kernel_Py3.new_StyleEntry(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_StyleEntry

# Register StyleEntry in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.StyleEntry_swigregister(StyleEntry)

class OdGiSectionGeometry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiSectionGeometry_swiginit(self, _ODA_Kernel_Py3.new_OdGiSectionGeometry(*args))

    def foregroundFaceTransparency(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiSectionGeometry_foregroundFaceTransparency(self, *args)

    def foregroundEdgeTransparency(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiSectionGeometry_foregroundEdgeTransparency(self, *args)

    def intBoundaryEnts(self, *args) -> "OdGiDrawablePtrArray &":
        return _ODA_Kernel_Py3.OdGiSectionGeometry_intBoundaryEnts(self, *args)

    def intFillEnts(self, *args) -> "OdGiDrawablePtrArray &":
        return _ODA_Kernel_Py3.OdGiSectionGeometry_intFillEnts(self, *args)

    def backgroundEnts(self, *args) -> "OdGiDrawablePtrArray &":
        return _ODA_Kernel_Py3.OdGiSectionGeometry_backgroundEnts(self, *args)

    def foregroundEnts(self, *args) -> "OdGiDrawablePtrArray &":
        return _ODA_Kernel_Py3.OdGiSectionGeometry_foregroundEnts(self, *args)

    def setForegroundTransparency(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSectionGeometry_setForegroundTransparency(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSectionGeometry

# Register OdGiSectionGeometry in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSectionGeometry_swigregister(OdGiSectionGeometry)

class OdGiSectionGeometryMap(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiSectionGeometryMap >":
        return _ODA_Kernel_Py3.OdGiSectionGeometryMap_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSectionGeometryMap_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSectionGeometryMap_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiSectionGeometryMap_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiSectionGeometryMap >":
        return _ODA_Kernel_Py3.OdGiSectionGeometryMap_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSectionGeometryMap

    def getAt(self, *args) -> "OdGiSectionGeometry *":
        return _ODA_Kernel_Py3.OdGiSectionGeometryMap_getAt(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiSectionGeometryMap_clear(self, *args)

# Register OdGiSectionGeometryMap in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSectionGeometryMap_swigregister(OdGiSectionGeometryMap)

def OdGiSectionGeometryMap_cast(*args) -> "OdSmartPtr< OdGiSectionGeometryMap >":
    return _ODA_Kernel_Py3.OdGiSectionGeometryMap_cast(*args)

def OdGiSectionGeometryMap_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiSectionGeometryMap_desc(*args)

def OdGiSectionGeometryMap_createObject(*args) -> "OdSmartPtr< OdGiSectionGeometryMap >":
    return _ODA_Kernel_Py3.OdGiSectionGeometryMap_createObject(*args)

class OdGiSectionGeometryManager(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kForceLiveSectionSettings = _ODA_Kernel_Py3.OdGiSectionGeometryManager_kForceLiveSectionSettings
    kIntersectionAsRegion = _ODA_Kernel_Py3.OdGiSectionGeometryManager_kIntersectionAsRegion
    kKeepResultsTransformed = _ODA_Kernel_Py3.OdGiSectionGeometryManager_kKeepResultsTransformed

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiSectionGeometryManager >":
        return _ODA_Kernel_Py3.OdGiSectionGeometryManager_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSectionGeometryManager_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiSectionGeometryManager_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiSectionGeometryManager_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiSectionGeometryManager >":
        return _ODA_Kernel_Py3.OdGiSectionGeometryManager_createObject(*args)

    def getLiveSection(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiSectionGeometryManager_getLiveSection(self, *args)

    def createLiveSection(self, *args) -> "OdGiDrawablePtr":
        return _ODA_Kernel_Py3.OdGiSectionGeometryManager_createLiveSection(self, *args)

    def isLiveSection(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSectionGeometryManager_isLiveSection(self, *args)

    def generateSectionGeometry(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiSectionGeometryManager_generateSectionGeometry(self, *args)

    def createSectionGeometryMap(self, *args) -> "OdGiSectionGeometryMapPtr":
        return _ODA_Kernel_Py3.OdGiSectionGeometryManager_createSectionGeometryMap(self, *args)

    def classifyExtentsRelativelySection(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiSectionGeometryManager_classifyExtentsRelativelySection(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiSectionGeometryManager

# Register OdGiSectionGeometryManager in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiSectionGeometryManager_swigregister(OdGiSectionGeometryManager)

def OdGiSectionGeometryManager_cast(*args) -> "OdSmartPtr< OdGiSectionGeometryManager >":
    return _ODA_Kernel_Py3.OdGiSectionGeometryManager_cast(*args)

def OdGiSectionGeometryManager_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiSectionGeometryManager_desc(*args)

def OdGiSectionGeometryManager_createObject(*args) -> "OdSmartPtr< OdGiSectionGeometryManager >":
    return _ODA_Kernel_Py3.OdGiSectionGeometryManager_createObject(*args)

class OdGiRectIntersDetector(OdGiConveyorNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiRectIntersDetector >":
        return _ODA_Kernel_Py3.OdGiRectIntersDetector_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRectIntersDetector_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRectIntersDetector_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiRectIntersDetector_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiRectIntersDetector >":
        return _ODA_Kernel_Py3.OdGiRectIntersDetector_createObject(*args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRectIntersDetector_set(self, *args)

    def get(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRectIntersDetector_get(self, *args)

    def setDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRectIntersDetector_setDeviation(self, *args)

    def setDrawContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRectIntersDetector_setDrawContext(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRectIntersDetector

# Register OdGiRectIntersDetector in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRectIntersDetector_swigregister(OdGiRectIntersDetector)

def OdGiRectIntersDetector_cast(*args) -> "OdSmartPtr< OdGiRectIntersDetector >":
    return _ODA_Kernel_Py3.OdGiRectIntersDetector_cast(*args)

def OdGiRectIntersDetector_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiRectIntersDetector_desc(*args)

def OdGiRectIntersDetector_createObject(*args) -> "OdSmartPtr< OdGiRectIntersDetector >":
    return _ODA_Kernel_Py3.OdGiRectIntersDetector_createObject(*args)

class OdGiRasterImageDesc(OdGiRasterImageParam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRasterImageDesc

    @staticmethod
    def createObject(*args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_createObject(*args)

    def setFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_setFrom(self, *args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_clone(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_copyFrom(self, *args)

    def pixelWidth(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_pixelWidth(self, *args)

    def pixelHeight(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_pixelHeight(self, *args)

    def colorDepth(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_colorDepth(self, *args)

    def numColors(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_numColors(self, *args)

    def color(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_color(self, *args)

    def paletteDataSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_paletteDataSize(self, *args)

    def paletteData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_paletteData(self, *args)

    def scanLineSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_scanLineSize(self, *args)

    def scanLines(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_scanLines(self, *args)

    def scanLinesAlignment(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_scanLinesAlignment(self, *args)

    def defaultResolution(self, *args) -> "OdGiRasterImage::Units":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_defaultResolution(self, *args)

    def setPixelWidth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_setPixelWidth(self, *args)

    def setPixelHeight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_setPixelHeight(self, *args)

    def setColorDepth(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_setColorDepth(self, *args)

    def pixelFormat(self, *args) -> "OdGiRasterImage::PixelFormatInfo &":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_pixelFormat(self, *args)

    def setPalette(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_setPalette(self, *args)

    def setScanLinesAlignment(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_setScanLinesAlignment(self, *args)

    def setDefaultResolution(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_setDefaultResolution(self, *args)

    def supportedParams(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_supportedParams(self, *args)

    def imageSource(self, *args) -> "OdGiRasterImage::ImageSource":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_imageSource(self, *args)

    def setImageSource(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_setImageSource(self, *args)

    def sourceFileName(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_sourceFileName(self, *args)

    def setSourceFileName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_setSourceFileName(self, *args)

    def transparencyMode(self, *args) -> "OdGiRasterImage::TransparencyMode":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_transparencyMode(self, *args)

    def setTransparencyMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageDesc_setTransparencyMode(self, *args)

# Register OdGiRasterImageDesc in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRasterImageDesc_swigregister(OdGiRasterImageDesc)

def OdGiRasterImageDesc_createObject(*args) -> "OdGiRasterImagePtr":
    return _ODA_Kernel_Py3.OdGiRasterImageDesc_createObject(*args)

class OdGiRasterImageBGRA32(OdGiRasterImageParam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRasterImageBGRA32

    @staticmethod
    def createObject(*args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_createObject(*args)

    def pixelWidth(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_pixelWidth(self, *args)

    def pixelHeight(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_pixelHeight(self, *args)

    def colorDepth(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_colorDepth(self, *args)

    def numColors(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_numColors(self, *args)

    def color(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_color(self, *args)

    def paletteDataSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_paletteDataSize(self, *args)

    def paletteData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_paletteData(self, *args)

    def scanLineSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_scanLineSize(self, *args)

    def scanLines(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_scanLines(self, *args)

    def pixelFormat(self, *args) -> "OdGiRasterImage::PixelFormatInfo":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_pixelFormat(self, *args)

    def scanLinesAlignment(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_scanLinesAlignment(self, *args)

    def defaultResolution(self, *args) -> "OdGiRasterImage::Units":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_defaultResolution(self, *args)

    def supportedParams(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_supportedParams(self, *args)

    def imageSource(self, *args) -> "OdGiRasterImage::ImageSource":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_imageSource(self, *args)

    def transparencyMode(self, *args) -> "OdGiRasterImage::TransparencyMode":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_transparencyMode(self, *args)

    def setTransparencyMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_setTransparencyMode(self, *args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_clone(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_copyFrom(self, *args)

# Register OdGiRasterImageBGRA32 in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRasterImageBGRA32_swigregister(OdGiRasterImageBGRA32)

def OdGiRasterImageBGRA32_createObject(*args) -> "OdGiRasterImagePtr":
    return _ODA_Kernel_Py3.OdGiRasterImageBGRA32_createObject(*args)

class OdGiRasterImageBGRA32Holder(OdGiRasterImageBGRA32):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRasterImageBGRA32Holder

    @staticmethod
    def createObject(*args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32Holder_createObject(*args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32Holder_clone(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32Holder_copyFrom(self, *args)

# Register OdGiRasterImageBGRA32Holder in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRasterImageBGRA32Holder_swigregister(OdGiRasterImageBGRA32Holder)

def OdGiRasterImageBGRA32Holder_createObject(*args) -> "OdGiRasterImagePtr":
    return _ODA_Kernel_Py3.OdGiRasterImageBGRA32Holder_createObject(*args)

class OdGiRasterImageBGRA32Copy(OdGiRasterImageBGRA32Holder):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRasterImageBGRA32Copy

    @staticmethod
    def createObject(*args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32Copy_createObject(*args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32Copy_clone(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageBGRA32Copy_copyFrom(self, *args)

# Register OdGiRasterImageBGRA32Copy in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRasterImageBGRA32Copy_swigregister(OdGiRasterImageBGRA32Copy)

def OdGiRasterImageBGRA32Copy_createObject(*args) -> "OdGiRasterImagePtr":
    return _ODA_Kernel_Py3.OdGiRasterImageBGRA32Copy_createObject(*args)

class OdGiRasterImageHolder(OdGiRasterImageParam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRasterImageHolder

    def setFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_setFrom(self, *args)

    @staticmethod
    def createObject(*args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_createObject(*args)

    def pixelWidth(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_pixelWidth(self, *args)

    def pixelHeight(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_pixelHeight(self, *args)

    def defaultResolution(self, *args) -> "OdGiRasterImage::Units":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_defaultResolution(self, *args)

    def colorDepth(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_colorDepth(self, *args)

    def numColors(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_numColors(self, *args)

    def color(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_color(self, *args)

    def paletteDataSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_paletteDataSize(self, *args)

    def paletteData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_paletteData(self, *args)

    def scanLineSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_scanLineSize(self, *args)

    def scanLines(self, *args) -> "OdUInt8 const *":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_scanLines(self, *args)

    def pixelFormat(self, *args) -> "OdGiRasterImage::PixelFormatInfo":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_pixelFormat(self, *args)

    def scanLinesAlignment(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_scanLinesAlignment(self, *args)

    def transparentColor(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_transparentColor(self, *args)

    def imageSource(self, *args) -> "OdGiRasterImage::ImageSource":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_imageSource(self, *args)

    def sourceFileName(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_sourceFileName(self, *args)

    def transparencyMode(self, *args) -> "OdGiRasterImage::TransparencyMode":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_transparencyMode(self, *args)

    def supportedParams(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_supportedParams(self, *args)

    def setImageSource(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_setImageSource(self, *args)

    def setSourceFileName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_setSourceFileName(self, *args)

    def setTransparencyMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_setTransparencyMode(self, *args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_clone(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageHolder_copyFrom(self, *args)

# Register OdGiRasterImageHolder in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRasterImageHolder_swigregister(OdGiRasterImageHolder)

def OdGiRasterImageHolder_createObject(*args) -> "OdGiRasterImagePtr":
    return _ODA_Kernel_Py3.OdGiRasterImageHolder_createObject(*args)

class OdGiRasterImageWrapper(OdGiRasterImageParam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRasterImageWrapper

    def setOriginal(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_setOriginal(self, *args)

    def original(self, *args) -> "OdGiRasterImage const *":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_original(self, *args)

    def cloneOriginal(self, *args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_cloneOriginal(self, *args)

    def pixelWidth(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_pixelWidth(self, *args)

    def pixelHeight(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_pixelHeight(self, *args)

    def defaultResolution(self, *args) -> "OdGiRasterImage::Units":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_defaultResolution(self, *args)

    def colorDepth(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_colorDepth(self, *args)

    def numColors(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_numColors(self, *args)

    def color(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_color(self, *args)

    def paletteDataSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_paletteDataSize(self, *args)

    def paletteData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_paletteData(self, *args)

    def scanLineSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_scanLineSize(self, *args)

    def scanLines(self, *args) -> "OdUInt8 const *":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_scanLines(self, *args)

    def pixelFormat(self, *args) -> "OdGiRasterImage::PixelFormatInfo":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_pixelFormat(self, *args)

    def scanLinesAlignment(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_scanLinesAlignment(self, *args)

    def transparentColor(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_transparentColor(self, *args)

    def imageSource(self, *args) -> "OdGiRasterImage::ImageSource":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_imageSource(self, *args)

    def sourceFileName(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_sourceFileName(self, *args)

    def transparencyMode(self, *args) -> "OdGiRasterImage::TransparencyMode":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_transparencyMode(self, *args)

    def supportedParams(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_supportedParams(self, *args)

    def setImageSource(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_setImageSource(self, *args)

    def setSourceFileName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_setSourceFileName(self, *args)

    def setTransparencyMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_setTransparencyMode(self, *args)

    def imp(self, *args) -> "void *":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_imp(self, *args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_clone(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageWrapper_copyFrom(self, *args)

# Register OdGiRasterImageWrapper in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRasterImageWrapper_swigregister(OdGiRasterImageWrapper)

class OdGiBitonalRasterTransformer(OdGiRasterImageWrapper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiBitonalRasterTransformer

    @staticmethod
    def createObject(*args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdGiBitonalRasterTransformer_createObject(*args)

    def setOriginal(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBitonalRasterTransformer_setOriginal(self, *args)

    def numColors(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiBitonalRasterTransformer_numColors(self, *args)

    def color(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGiBitonalRasterTransformer_color(self, *args)

    def paletteDataSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiBitonalRasterTransformer_paletteDataSize(self, *args)

    def paletteData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBitonalRasterTransformer_paletteData(self, *args)

    def pixelFormat(self, *args) -> "OdGiRasterImage::PixelFormatInfo":
        return _ODA_Kernel_Py3.OdGiBitonalRasterTransformer_pixelFormat(self, *args)

    def transparentColor(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiBitonalRasterTransformer_transparentColor(self, *args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiBitonalRasterTransformer_clone(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiBitonalRasterTransformer_copyFrom(self, *args)

# Register OdGiBitonalRasterTransformer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiBitonalRasterTransformer_swigregister(OdGiBitonalRasterTransformer)

def OdGiBitonalRasterTransformer_createObject(*args) -> "OdGiRasterImagePtr":
    return _ODA_Kernel_Py3.OdGiBitonalRasterTransformer_createObject(*args)

class OdGiUpsideDownRasterTransformer(OdGiRasterImageWrapper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiUpsideDownRasterTransformer

    @staticmethod
    def createObject(*args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdGiUpsideDownRasterTransformer_createObject(*args)

    def scanLines(self, *args) -> "OdUInt8 const *":
        return _ODA_Kernel_Py3.OdGiUpsideDownRasterTransformer_scanLines(self, *args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiUpsideDownRasterTransformer_clone(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiUpsideDownRasterTransformer_copyFrom(self, *args)

# Register OdGiUpsideDownRasterTransformer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiUpsideDownRasterTransformer_swigregister(OdGiUpsideDownRasterTransformer)

def OdGiUpsideDownRasterTransformer_createObject(*args) -> "OdGiRasterImagePtr":
    return _ODA_Kernel_Py3.OdGiUpsideDownRasterTransformer_createObject(*args)

class OdGiLeftToRightRasterTransformer(OdGiRasterImageWrapper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLeftToRightRasterTransformer

    @staticmethod
    def createObject(*args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdGiLeftToRightRasterTransformer_createObject(*args)

    def scanLines(self, *args) -> "OdUInt8 const *":
        return _ODA_Kernel_Py3.OdGiLeftToRightRasterTransformer_scanLines(self, *args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiLeftToRightRasterTransformer_clone(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLeftToRightRasterTransformer_copyFrom(self, *args)

# Register OdGiLeftToRightRasterTransformer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLeftToRightRasterTransformer_swigregister(OdGiLeftToRightRasterTransformer)

def OdGiLeftToRightRasterTransformer_createObject(*args) -> "OdGiRasterImagePtr":
    return _ODA_Kernel_Py3.OdGiLeftToRightRasterTransformer_createObject(*args)

class OdGiInversionRasterTransformer(OdGiRasterImageWrapper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiInversionRasterTransformer

    @staticmethod
    def createObject(*args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdGiInversionRasterTransformer_createObject(*args)

    def color(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGiInversionRasterTransformer_color(self, *args)

    def paletteData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiInversionRasterTransformer_paletteData(self, *args)

    def scanLines(self, *args) -> "OdUInt8 const *":
        return _ODA_Kernel_Py3.OdGiInversionRasterTransformer_scanLines(self, *args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiInversionRasterTransformer_clone(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiInversionRasterTransformer_copyFrom(self, *args)

# Register OdGiInversionRasterTransformer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiInversionRasterTransformer_swigregister(OdGiInversionRasterTransformer)

def OdGiInversionRasterTransformer_createObject(*args) -> "OdGiRasterImagePtr":
    return _ODA_Kernel_Py3.OdGiInversionRasterTransformer_createObject(*args)

class OdGiGrayscaleRasterTransformer(OdGiInversionRasterTransformer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiGrayscaleRasterTransformer

    @staticmethod
    def createObject(*args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdGiGrayscaleRasterTransformer_createObject(*args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiGrayscaleRasterTransformer_clone(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGrayscaleRasterTransformer_copyFrom(self, *args)

# Register OdGiGrayscaleRasterTransformer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiGrayscaleRasterTransformer_swigregister(OdGiGrayscaleRasterTransformer)

def OdGiGrayscaleRasterTransformer_createObject(*args) -> "OdGiRasterImagePtr":
    return _ODA_Kernel_Py3.OdGiGrayscaleRasterTransformer_createObject(*args)

class OdGiTintRasterTransformer(OdGiInversionRasterTransformer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiTintRasterTransformer

    @staticmethod
    def createObject(*args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdGiTintRasterTransformer_createObject(*args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiTintRasterTransformer_clone(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiTintRasterTransformer_copyFrom(self, *args)

# Register OdGiTintRasterTransformer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiTintRasterTransformer_swigregister(OdGiTintRasterTransformer)

def OdGiTintRasterTransformer_createObject(*args) -> "OdGiRasterImagePtr":
    return _ODA_Kernel_Py3.OdGiTintRasterTransformer_createObject(*args)

class OdGiMonochromaticRasterTransformer(OdGiGrayscaleRasterTransformer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMonochromaticRasterTransformer

    @staticmethod
    def createObject(*args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdGiMonochromaticRasterTransformer_createObject(*args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiMonochromaticRasterTransformer_clone(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMonochromaticRasterTransformer_copyFrom(self, *args)

    def setThreshold(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMonochromaticRasterTransformer_setThreshold(self, *args)

    def threshold(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGiMonochromaticRasterTransformer_threshold(self, *args)

# Register OdGiMonochromaticRasterTransformer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMonochromaticRasterTransformer_swigregister(OdGiMonochromaticRasterTransformer)

def OdGiMonochromaticRasterTransformer_createObject(*args) -> "OdGiRasterImagePtr":
    return _ODA_Kernel_Py3.OdGiMonochromaticRasterTransformer_createObject(*args)

class OdGiRasterImageAlphaChannelAdder(OdGiRasterImageParam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRasterImageAlphaChannelAdder

    @staticmethod
    def createObject(*args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_createObject(*args)

    def scanLineSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_scanLineSize(self, *args)

    def scanLines(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_scanLines(self, *args)

    def pixelWidth(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_pixelWidth(self, *args)

    def pixelHeight(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_pixelHeight(self, *args)

    def colorDepth(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_colorDepth(self, *args)

    def numColors(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_numColors(self, *args)

    def color(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_color(self, *args)

    def paletteDataSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_paletteDataSize(self, *args)

    def paletteData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_paletteData(self, *args)

    def pixelFormat(self, *args) -> "OdGiRasterImage::PixelFormatInfo":
        return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_pixelFormat(self, *args)

    def scanLinesAlignment(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_scanLinesAlignment(self, *args)

    def defaultResolution(self, *args) -> "OdGiRasterImage::Units":
        return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_defaultResolution(self, *args)

    def supportedParams(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_supportedParams(self, *args)

    def imageSource(self, *args) -> "OdGiRasterImage::ImageSource":
        return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_imageSource(self, *args)

    def transparencyMode(self, *args) -> "OdGiRasterImage::TransparencyMode":
        return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_transparencyMode(self, *args)

    def setTransparencyMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_setTransparencyMode(self, *args)

    def clone(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_clone(self, *args)

    def copyFrom(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_copyFrom(self, *args)

# Register OdGiRasterImageAlphaChannelAdder in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_swigregister(OdGiRasterImageAlphaChannelAdder)

def OdGiRasterImageAlphaChannelAdder_createObject(*args) -> "OdGiRasterImagePtr":
    return _ODA_Kernel_Py3.OdGiRasterImageAlphaChannelAdder_createObject(*args)

class OdGiRasterImageLoaderPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiRasterImageLoaderPE >":
        return _ODA_Kernel_Py3.OdGiRasterImageLoaderPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRasterImageLoaderPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRasterImageLoaderPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiRasterImageLoaderPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiRasterImageLoaderPE >":
        return _ODA_Kernel_Py3.OdGiRasterImageLoaderPE_createObject(*args)

    def loadRasterImage(self, *args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdGiRasterImageLoaderPE_loadRasterImage(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRasterImageLoaderPE

# Register OdGiRasterImageLoaderPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRasterImageLoaderPE_swigregister(OdGiRasterImageLoaderPE)

def OdGiRasterImageLoaderPE_cast(*args) -> "OdSmartPtr< OdGiRasterImageLoaderPE >":
    return _ODA_Kernel_Py3.OdGiRasterImageLoaderPE_cast(*args)

def OdGiRasterImageLoaderPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiRasterImageLoaderPE_desc(*args)

def OdGiRasterImageLoaderPE_createObject(*args) -> "OdSmartPtr< OdGiRasterImageLoaderPE >":
    return _ODA_Kernel_Py3.OdGiRasterImageLoaderPE_createObject(*args)

class OdGiRasterImageLoader(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiRasterImageLoader >":
        return _ODA_Kernel_Py3.OdGiRasterImageLoader_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRasterImageLoader_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiRasterImageLoader_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiRasterImageLoader_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiRasterImageLoader >":
        return _ODA_Kernel_Py3.OdGiRasterImageLoader_createObject(*args)

    def loadRasterImage(self, *args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdGiRasterImageLoader_loadRasterImage(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiRasterImageLoader

# Register OdGiRasterImageLoader in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiRasterImageLoader_swigregister(OdGiRasterImageLoader)

def OdGiRasterImageLoader_cast(*args) -> "OdSmartPtr< OdGiRasterImageLoader >":
    return _ODA_Kernel_Py3.OdGiRasterImageLoader_cast(*args)

def OdGiRasterImageLoader_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiRasterImageLoader_desc(*args)

def OdGiRasterImageLoader_createObject(*args) -> "OdSmartPtr< OdGiRasterImageLoader >":
    return _ODA_Kernel_Py3.OdGiRasterImageLoader_createObject(*args)

class OdGiDataExtractor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def registerDataBegin(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDataExtractor_registerDataBegin(self, *args)

    def registerDataEnd(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDataExtractor_registerDataEnd(self, *args)

    def tell(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdGiDataExtractor_tell(self, *args)

    def beginExtraction(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDataExtractor_beginExtraction(self, *args)

    def endExtraction(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDataExtractor_endExtraction(self, *args)

    def seekFromLocalOffset(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDataExtractor_seekFromLocalOffset(self, *args)

    def extractBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDataExtractor_extractBytes(self, *args)

    def extractDouble(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiDataExtractor_extractDouble(self, *args)

    def extractInt64(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiDataExtractor_extractInt64(self, *args)

    def extractInt32(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiDataExtractor_extractInt32(self, *args)

    def extractInt16(self, *args) -> "OdInt16":
        return _ODA_Kernel_Py3.OdGiDataExtractor_extractInt16(self, *args)

    def extractByte(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdGiDataExtractor_extractByte(self, *args)

    def extractBool(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDataExtractor_extractBool(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDataExtractor

# Register OdGiDataExtractor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDataExtractor_swigregister(OdGiDataExtractor)

class OdGiProgressiveMeshVertexData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kVertexDataNormals = _ODA_Kernel_Py3.OdGiProgressiveMeshVertexData_kVertexDataNormals
    kVertexDataColors = _ODA_Kernel_Py3.OdGiProgressiveMeshVertexData_kVertexDataColors
    kVertexDataUVs = _ODA_Kernel_Py3.OdGiProgressiveMeshVertexData_kVertexDataUVs
    normals = property(_ODA_Kernel_Py3.OdGiProgressiveMeshVertexData_normals_get, _ODA_Kernel_Py3.OdGiProgressiveMeshVertexData_normals_set)
    colors = property(_ODA_Kernel_Py3.OdGiProgressiveMeshVertexData_colors_get, _ODA_Kernel_Py3.OdGiProgressiveMeshVertexData_colors_set)
    UV = property(_ODA_Kernel_Py3.OdGiProgressiveMeshVertexData_UV_get, _ODA_Kernel_Py3.OdGiProgressiveMeshVertexData_UV_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiProgressiveMeshVertexData_swiginit(self, _ODA_Kernel_Py3.new_OdGiProgressiveMeshVertexData(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiProgressiveMeshVertexData

# Register OdGiProgressiveMeshVertexData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiProgressiveMeshVertexData_swigregister(OdGiProgressiveMeshVertexData)

class OdGiProgressiveMeshFaceData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kFaceDataMaterials = _ODA_Kernel_Py3.OdGiProgressiveMeshFaceData_kFaceDataMaterials
    kFaceDataColors = _ODA_Kernel_Py3.OdGiProgressiveMeshFaceData_kFaceDataColors
    kFaceDataNormals = _ODA_Kernel_Py3.OdGiProgressiveMeshFaceData_kFaceDataNormals
    materials = property(_ODA_Kernel_Py3.OdGiProgressiveMeshFaceData_materials_get, _ODA_Kernel_Py3.OdGiProgressiveMeshFaceData_materials_set)
    colors = property(_ODA_Kernel_Py3.OdGiProgressiveMeshFaceData_colors_get, _ODA_Kernel_Py3.OdGiProgressiveMeshFaceData_colors_set)
    normals = property(_ODA_Kernel_Py3.OdGiProgressiveMeshFaceData_normals_get, _ODA_Kernel_Py3.OdGiProgressiveMeshFaceData_normals_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiProgressiveMeshFaceData_swiginit(self, _ODA_Kernel_Py3.new_OdGiProgressiveMeshFaceData(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiProgressiveMeshFaceData

# Register OdGiProgressiveMeshFaceData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiProgressiveMeshFaceData_swigregister(OdGiProgressiveMeshFaceData)

class OdGiProgressiveMeshEdgeData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kEdgeDataVisibilities = _ODA_Kernel_Py3.OdGiProgressiveMeshEdgeData_kEdgeDataVisibilities
    visibilities = property(_ODA_Kernel_Py3.OdGiProgressiveMeshEdgeData_visibilities_get, _ODA_Kernel_Py3.OdGiProgressiveMeshEdgeData_visibilities_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiProgressiveMeshEdgeData_swiginit(self, _ODA_Kernel_Py3.new_OdGiProgressiveMeshEdgeData(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiProgressiveMeshEdgeData

# Register OdGiProgressiveMeshEdgeData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiProgressiveMeshEdgeData_swigregister(OdGiProgressiveMeshEdgeData)

class OdGiProgressiveMeshObjectIdConverter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def dbStubToInt(self, *args) -> "OdInt64":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshObjectIdConverter_dbStubToInt(self, *args)

    def intToDbStub(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshObjectIdConverter_intToDbStub(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiProgressiveMeshObjectIdConverter

# Register OdGiProgressiveMeshObjectIdConverter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiProgressiveMeshObjectIdConverter_swigregister(OdGiProgressiveMeshObjectIdConverter)

class OdGiProgressiveMeshAutoLODSelectCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def selectLOD(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshAutoLODSelectCallback_selectLOD(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiProgressiveMeshAutoLODSelectCallback

# Register OdGiProgressiveMeshAutoLODSelectCallback in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiProgressiveMeshAutoLODSelectCallback_swigregister(OdGiProgressiveMeshAutoLODSelectCallback)

class OdGiProgressiveMeshAutoLODSelectOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiProgressiveMeshAutoLODSelectOptions_swiginit(self, _ODA_Kernel_Py3.new_OdGiProgressiveMeshAutoLODSelectOptions(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiProgressiveMeshAutoLODSelectOptions

    def maxPixels(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshAutoLODSelectOptions_maxPixels(self, *args)

    def setMaxPixels(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshAutoLODSelectOptions_setMaxPixels(self, *args)

    def minPixels(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshAutoLODSelectOptions_minPixels(self, *args)

    def setMinPixels(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshAutoLODSelectOptions_setMinPixels(self, *args)

# Register OdGiProgressiveMeshAutoLODSelectOptions in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiProgressiveMeshAutoLODSelectOptions_swigregister(OdGiProgressiveMeshAutoLODSelectOptions)

class OdGiProgressiveMesh(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kVersion1 = _ODA_Kernel_Py3.OdGiProgressiveMesh_kVersion1
    kVersion2 = _ODA_Kernel_Py3.OdGiProgressiveMesh_kVersion2
    kVersionActual = _ODA_Kernel_Py3.OdGiProgressiveMesh_kVersionActual
    kCustom = _ODA_Kernel_Py3.OdGiProgressiveMesh_kCustom
    kSqrInterpolation = _ODA_Kernel_Py3.OdGiProgressiveMesh_kSqrInterpolation
    kSqrtInterpolation = _ODA_Kernel_Py3.OdGiProgressiveMesh_kSqrtInterpolation

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiProgressiveMesh >":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiProgressiveMesh >":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_createObject(*args)

    def obtainShell(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_obtainShell(self, *args)

    def obtainVertexData(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_obtainVertexData(self, *args)

    def obtainFaceData(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_obtainFaceData(self, *args)

    def obtainEdgeData(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_obtainEdgeData(self, *args)

    def numLODs(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_numLODs(self, *args)

    def currentLOD(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_currentLOD(self, *args)

    def setLOD(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_setLOD(self, *args)

    def selectLOD(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_selectLOD(self, *args)

    def autoSelectLODOptions(self, *args) -> "OdGiProgressiveMeshAutoLODSelectOptions const &":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_autoSelectLODOptions(self, *args)

    def setAutoSelectLODOptions(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_setAutoSelectLODOptions(self, *args)

    def setCustomLODAutoSelectCallback(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_setCustomLODAutoSelectCallback(self, *args)

    def getCustomLODAutoSelectCallback(self, *args) -> "OdGiProgressiveMeshAutoLODSelectCallback *":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_getCustomLODAutoSelectCallback(self, *args)

    def numFaces(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_numFaces(self, *args)

    def numVertices(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_numVertices(self, *args)

    def extents(self, *args) -> "OdGeExtents3d const &":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_extents(self, *args)

    def write(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_write(self, *args)

    def isInPartialMode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_isInPartialMode(self, *args)

    def endPartialMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_endPartialMode(self, *args)

    def getObjectSize(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdGiProgressiveMesh_getObjectSize(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiProgressiveMesh

# Register OdGiProgressiveMesh in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiProgressiveMesh_swigregister(OdGiProgressiveMesh)

def OdGiProgressiveMesh_cast(*args) -> "OdSmartPtr< OdGiProgressiveMesh >":
    return _ODA_Kernel_Py3.OdGiProgressiveMesh_cast(*args)

def OdGiProgressiveMesh_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiProgressiveMesh_desc(*args)

def OdGiProgressiveMesh_createObject(*args) -> "OdSmartPtr< OdGiProgressiveMesh >":
    return _ODA_Kernel_Py3.OdGiProgressiveMesh_createObject(*args)

class OdGiProgressiveMeshGeneratorOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_swiginit(self, _ODA_Kernel_Py3.new_OdGiProgressiveMeshGeneratorOptions(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiProgressiveMeshGeneratorOptions

    def minVertices(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_minVertices(self, *args)

    def setMinVertices(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_setMinVertices(self, *args)

    def minFaces(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_minFaces(self, *args)

    def setMinFaces(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_setMinFaces(self, *args)

    def worstDiherial(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_worstDiherial(self, *args)

    def setWorstDiherial(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_setWorstDiherial(self, *args)

    def smallestCost(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_smallestCost(self, *args)

    def setSmallestCost(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_setSmallestCost(self, *args)

    def worstCost(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_worstCost(self, *args)

    def setWorstCost(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_setWorstCost(self, *args)

    def infinity(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_infinity(self, *args)

    def setInfinity(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_setInfinity(self, *args)

    def getFitNormals(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_getFitNormals(self, *args)

    def normalErrorFactor(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_normalErrorFactor(self, *args)

    def setFitNormals(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_setFitNormals(self, *args)

    def getFitColors(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_getFitColors(self, *args)

    def colorErrorFactor(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_colorErrorFactor(self, *args)

    def setFitColors(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_setFitColors(self, *args)

    def sharpEdgesScaleFactor(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_sharpEdgesScaleFactor(self, *args)

    def setSharpEdgesScaleFactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_setSharpEdgesScaleFactor(self, *args)

    def nextCostThresholdFactor(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_nextCostThresholdFactor(self, *args)

    def setNextCostThresholdFactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_setNextCostThresholdFactor(self, *args)

    def getDiffMaxPenalty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_getDiffMaxPenalty(self, *args)

    def diffMaxPenaltyFactor(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_diffMaxPenaltyFactor(self, *args)

    def setDiffMaxPenalty(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_setDiffMaxPenalty(self, *args)

    def getSumPenalty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_getSumPenalty(self, *args)

    def sumPenaltyFactor(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_sumPenaltyFactor(self, *args)

    def setSumPenalty(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_setSumPenalty(self, *args)

    def strictSharp(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_strictSharp(self, *args)

    def numFaceSamplePoints(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_numFaceSamplePoints(self, *args)

    def setNumFaceSamplePoints(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_setNumFaceSamplePoints(self, *args)

# Register OdGiProgressiveMeshGeneratorOptions in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiProgressiveMeshGeneratorOptions_swigregister(OdGiProgressiveMeshGeneratorOptions)

class OdGiProgressiveMeshGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kStatus_Ok = _ODA_Kernel_Py3.OdGiProgressiveMeshGenerator_kStatus_Ok
    kStatus_DegenerateFacesIgnored = _ODA_Kernel_Py3.OdGiProgressiveMeshGenerator_kStatus_DegenerateFacesIgnored
    kStatus_NonManifoldFacesIgnored = _ODA_Kernel_Py3.OdGiProgressiveMeshGenerator_kStatus_NonManifoldFacesIgnored
    kStatus_InvalidFacesIgnored = _ODA_Kernel_Py3.OdGiProgressiveMeshGenerator_kStatus_InvalidFacesIgnored
    kStatus_ZeroNormalFacesIgnored = _ODA_Kernel_Py3.OdGiProgressiveMeshGenerator_kStatus_ZeroNormalFacesIgnored
    kStatus_NonTriangleFaceTriangulated = _ODA_Kernel_Py3.OdGiProgressiveMeshGenerator_kStatus_NonTriangleFaceTriangulated

    @staticmethod
    def createObject(*args) -> "OdGiProgressiveMeshGenerator *":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGenerator_createObject(*args)

    def setupInitialShell(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGenerator_setupInitialShell(self, *args)

    def buildProgressiveMesh(self, *args) -> "OdGiProgressiveMeshPtr":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGenerator_buildProgressiveMesh(self, *args)

    def createProgressiveMeshFrom(self, *args) -> "OdGiProgressiveMeshPtr":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGenerator_createProgressiveMeshFrom(self, *args)

    def createPartialProgressiveMeshFrom(self, *args) -> "OdGiProgressiveMeshPtr":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGenerator_createPartialProgressiveMeshFrom(self, *args)

    def options(self, *args) -> "OdGiProgressiveMeshGeneratorOptions &":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGenerator_options(self, *args)

    def setOptions(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshGenerator_setOptions(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiProgressiveMeshGenerator

# Register OdGiProgressiveMeshGenerator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiProgressiveMeshGenerator_swigregister(OdGiProgressiveMeshGenerator)

def OdGiProgressiveMeshGenerator_createObject(*args) -> "OdGiProgressiveMeshGenerator *":
    return _ODA_Kernel_Py3.OdGiProgressiveMeshGenerator_createObject(*args)

class OdGiProgressiveMeshEx(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiProgressiveMeshEx >":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiProgressiveMeshEx >":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_createObject(*args)

    def obtainShell(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_obtainShell(self, *args)

    def obtainVertexData(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_obtainVertexData(self, *args)

    def obtainFaceData(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_obtainFaceData(self, *args)

    def obtainEdgeData(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_obtainEdgeData(self, *args)

    def numLODs(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_numLODs(self, *args)

    def currentLOD(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_currentLOD(self, *args)

    def setLOD(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_setLOD(self, *args)

    def numFaces(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_numFaces(self, *args)

    def numVertices(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_numVertices(self, *args)

    def extents(self, *args) -> "OdGeExtents3d const &":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_extents(self, *args)

    def write(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_write(self, *args)

    def isProgressiveMeshGenerated(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_isProgressiveMeshGenerated(self, *args)

    def setupInitialShell(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_setupInitialShell(self, *args)

    def buildProgressiveMesh(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_buildProgressiveMesh(self, *args)

    def readProgressiveMeshExFrom(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_readProgressiveMeshExFrom(self, *args)

    def readPartialProgressiveMeshExFrom(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_readPartialProgressiveMeshExFrom(self, *args)

    def options(self, *args) -> "OdGiProgressiveMeshGeneratorOptions &":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_options(self, *args)

    def setOptions(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_setOptions(self, *args)

    def setGenerationAbortFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_setGenerationAbortFlags(self, *args)

    def generationAbortFlags(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_generationAbortFlags(self, *args)

    def setProgressiveMesh(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_setProgressiveMesh(self, *args)

    def progressiveMesh(self, *args) -> "OdGiProgressiveMeshPtr":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_progressiveMesh(self, *args)

    def hasData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_hasData(self, *args)

    def getObjectSize(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_getObjectSize(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiProgressiveMeshEx

# Register OdGiProgressiveMeshEx in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiProgressiveMeshEx_swigregister(OdGiProgressiveMeshEx)

def OdGiProgressiveMeshEx_cast(*args) -> "OdSmartPtr< OdGiProgressiveMeshEx >":
    return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_cast(*args)

def OdGiProgressiveMeshEx_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_desc(*args)

def OdGiProgressiveMeshEx_createObject(*args) -> "OdSmartPtr< OdGiProgressiveMeshEx >":
    return _ODA_Kernel_Py3.OdGiProgressiveMeshEx_createObject(*args)

class OdGiProceduralGeneratorPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiProceduralGeneratorPE >":
        return _ODA_Kernel_Py3.OdGiProceduralGeneratorPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiProceduralGeneratorPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiProceduralGeneratorPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiProceduralGeneratorPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiProceduralGeneratorPE >":
        return _ODA_Kernel_Py3.OdGiProceduralGeneratorPE_createObject(*args)

    def generateProceduralTexture(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiProceduralGeneratorPE_generateProceduralTexture(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiProceduralGeneratorPE

# Register OdGiProceduralGeneratorPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiProceduralGeneratorPE_swigregister(OdGiProceduralGeneratorPE)

def OdGiProceduralGeneratorPE_cast(*args) -> "OdSmartPtr< OdGiProceduralGeneratorPE >":
    return _ODA_Kernel_Py3.OdGiProceduralGeneratorPE_cast(*args)

def OdGiProceduralGeneratorPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiProceduralGeneratorPE_desc(*args)

def OdGiProceduralGeneratorPE_createObject(*args) -> "OdSmartPtr< OdGiProceduralGeneratorPE >":
    return _ODA_Kernel_Py3.OdGiProceduralGeneratorPE_createObject(*args)

class OdGiGradientGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kLinearInterpolation = _ODA_Kernel_Py3.OdGiGradientGenerator_kLinearInterpolation
    kExpInterpolation = _ODA_Kernel_Py3.OdGiGradientGenerator_kExpInterpolation
    kInvExpInterpolation = _ODA_Kernel_Py3.OdGiGradientGenerator_kInvExpInterpolation
    kCosInterpolation = _ODA_Kernel_Py3.OdGiGradientGenerator_kCosInterpolation
    kClampMode = _ODA_Kernel_Py3.OdGiGradientGenerator_kClampMode
    kWrapMode = _ODA_Kernel_Py3.OdGiGradientGenerator_kWrapMode

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiGradientGenerator_swiginit(self, _ODA_Kernel_Py3.new_OdGiGradientGenerator(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiGradientGenerator

    def createColorArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientGenerator_createColorArray(self, *args)

    def createColorArrayFilled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientGenerator_createColorArrayFilled(self, *args)

    def copyGradient(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientGenerator_copyGradient(self, *args)

    def createGradient(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientGenerator_createGradient(self, *args)

    def fillInterval(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientGenerator_fillInterval(self, *args)

    def generateInterval(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientGenerator_generateInterval(self, *args)

    def colorsCount(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiGradientGenerator_colorsCount(self, *args)

    def colorAt(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGiGradientGenerator_colorAt(self, *args)

    def isInitialized(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiGradientGenerator_isInitialized(self, *args)

    def asArray(self, *args) -> "OdUInt32Array const &":
        return _ODA_Kernel_Py3.OdGiGradientGenerator_asArray(self, *args)

    def setAddressMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientGenerator_setAddressMode(self, *args)

    def addressMode(self, *args) -> "OdGiGradientGenerator::AddressMode":
        return _ODA_Kernel_Py3.OdGiGradientGenerator_addressMode(self, *args)

    @staticmethod
    def interpolateColor(*args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdGiGradientGenerator_interpolateColor(*args)

    @staticmethod
    def createSpectrumGradient(*args) -> "OdGiGradientGenerator":
        return _ODA_Kernel_Py3.OdGiGradientGenerator_createSpectrumGradient(*args)

    def appendGradient(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientGenerator_appendGradient(self, *args)

    def __iadd__(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGradientGenerator___iadd__(self, *args)

# Register OdGiGradientGenerator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiGradientGenerator_swigregister(OdGiGradientGenerator)

def OdGiGradientGenerator_interpolateColor(*args) -> "ODCOLORREF":
    return _ODA_Kernel_Py3.OdGiGradientGenerator_interpolateColor(*args)

def OdGiGradientGenerator_createSpectrumGradient(*args) -> "OdGiGradientGenerator":
    return _ODA_Kernel_Py3.OdGiGradientGenerator_createSpectrumGradient(*args)

class OdGiProceduralGenerator(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiProceduralGenerator >":
        return _ODA_Kernel_Py3.OdGiProceduralGenerator_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiProceduralGenerator_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiProceduralGenerator_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiProceduralGenerator_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiProceduralGenerator >":
        return _ODA_Kernel_Py3.OdGiProceduralGenerator_createObject(*args)

    def generateProceduralTexture(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiProceduralGenerator_generateProceduralTexture(self, *args)

    def generateProceduralWood(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProceduralGenerator_generateProceduralWood(self, *args)

    def generateProceduralMarble(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProceduralGenerator_generateProceduralMarble(self, *args)

    def setColorGradient(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiProceduralGenerator_setColorGradient(self, *args)

    def colorGradient(self, *args) -> "OdGiGradientGenerator const &":
        return _ODA_Kernel_Py3.OdGiProceduralGenerator_colorGradient(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiProceduralGenerator

# Register OdGiProceduralGenerator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiProceduralGenerator_swigregister(OdGiProceduralGenerator)

def OdGiProceduralGenerator_cast(*args) -> "OdSmartPtr< OdGiProceduralGenerator >":
    return _ODA_Kernel_Py3.OdGiProceduralGenerator_cast(*args)

def OdGiProceduralGenerator_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiProceduralGenerator_desc(*args)

def OdGiProceduralGenerator_createObject(*args) -> "OdSmartPtr< OdGiProceduralGenerator >":
    return _ODA_Kernel_Py3.OdGiProceduralGenerator_createObject(*args)

class OdGiPolyline(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiPolyline >":
        return _ODA_Kernel_Py3.OdGiPolyline_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPolyline_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPolyline_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiPolyline_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiPolyline >":
        return _ODA_Kernel_Py3.OdGiPolyline_createObject(*args)
    kLine = _ODA_Kernel_Py3.OdGiPolyline_kLine
    kArc = _ODA_Kernel_Py3.OdGiPolyline_kArc
    kCoincident = _ODA_Kernel_Py3.OdGiPolyline_kCoincident
    kPoint = _ODA_Kernel_Py3.OdGiPolyline_kPoint
    kEmpty = _ODA_Kernel_Py3.OdGiPolyline_kEmpty

    def numVerts(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdGiPolyline_numVerts(self, *args)

    def isClosed(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPolyline_isClosed(self, *args)

    def normal(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGiPolyline_normal(self, *args)

    def thickness(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiPolyline_thickness(self, *args)

    def getConstantWidth(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiPolyline_getConstantWidth(self, *args)

    def hasWidth(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPolyline_hasWidth(self, *args)

    def hasPlinegen(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPolyline_hasPlinegen(self, *args)

    def elevation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiPolyline_elevation(self, *args)

    def segType(self, *args) -> "OdGiPolyline::SegType":
        return _ODA_Kernel_Py3.OdGiPolyline_segType(self, *args)

    def getLineSegAt(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPolyline_getLineSegAt(self, *args)

    def getArcSegAt(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPolyline_getArcSegAt(self, *args)

    def getPointAt(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPolyline_getPointAt(self, *args)

    def getBulgeAt(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiPolyline_getBulgeAt(self, *args)

    def getWidthsAt(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPolyline_getWidthsAt(self, *args)

    def getDbPolyline(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdGiPolyline_getDbPolyline(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPolyline

# Register OdGiPolyline in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPolyline_swigregister(OdGiPolyline)

def OdGiPolyline_cast(*args) -> "OdSmartPtr< OdGiPolyline >":
    return _ODA_Kernel_Py3.OdGiPolyline_cast(*args)

def OdGiPolyline_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiPolyline_desc(*args)

def OdGiPolyline_createObject(*args) -> "OdSmartPtr< OdGiPolyline >":
    return _ODA_Kernel_Py3.OdGiPolyline_createObject(*args)

class OdGiPointCloud(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kVertexComponent = _ODA_Kernel_Py3.OdGiPointCloud_kVertexComponent
    kColorComponent = _ODA_Kernel_Py3.OdGiPointCloud_kColorComponent
    kNormalComponent = _ODA_Kernel_Py3.OdGiPointCloud_kNormalComponent
    kNumComponents = _ODA_Kernel_Py3.OdGiPointCloud_kNumComponents
    kTransparencyComponent = _ODA_Kernel_Py3.OdGiPointCloud_kTransparencyComponent
    kNumExtraComponents = _ODA_Kernel_Py3.OdGiPointCloud_kNumExtraComponents
    kNoComponents = _ODA_Kernel_Py3.OdGiPointCloud_kNoComponents
    kColors = _ODA_Kernel_Py3.OdGiPointCloud_kColors
    kTransparencies = _ODA_Kernel_Py3.OdGiPointCloud_kTransparencies
    kNormals = _ODA_Kernel_Py3.OdGiPointCloud_kNormals
    kDataSizeByte = _ODA_Kernel_Py3.OdGiPointCloud_kDataSizeByte
    kDataSizeWord = _ODA_Kernel_Py3.OdGiPointCloud_kDataSizeWord
    kDataSizeFloat = _ODA_Kernel_Py3.OdGiPointCloud_kDataSizeFloat
    kDataSizeDouble = _ODA_Kernel_Py3.OdGiPointCloud_kDataSizeDouble
    kLastComponentFlag = _ODA_Kernel_Py3.OdGiPointCloud_kLastComponentFlag
    kAsyncCall = _ODA_Kernel_Py3.OdGiPointCloud_kAsyncCall
    kPartialData = _ODA_Kernel_Py3.OdGiPointCloud_kPartialData
    kLastFlag = _ODA_Kernel_Py3.OdGiPointCloud_kLastFlag

    @staticmethod
    def addDataSizeFlags(*args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiPointCloud_addDataSizeFlags(*args)

    @staticmethod
    def getDataSizeFlags(*args) -> "OdGiPointCloud::DataSize":
        return _ODA_Kernel_Py3.OdGiPointCloud_getDataSizeFlags(*args)

    @staticmethod
    def getDefaultDataSizeFlags(*args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiPointCloud_getDefaultDataSizeFlags(*args)

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiPointCloud >":
        return _ODA_Kernel_Py3.OdGiPointCloud_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPointCloud_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPointCloud_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiPointCloud_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiPointCloud >":
        return _ODA_Kernel_Py3.OdGiPointCloud_createObject(*args)

    def totalPointsCount(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiPointCloud_totalPointsCount(self, *args)

    def componentsMask(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiPointCloud_componentsMask(self, *args)

    def supportFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiPointCloud_supportFlags(self, *args)

    def globalTransform(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdGiPointCloud_globalTransform(self, *args)

    def defaultPointSize(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdGiPointCloud_defaultPointSize(self, *args)

    def getExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPointCloud_getExtents(self, *args)

    def calculateExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPointCloud_calculateExtents(self, *args)

    def isDataCompatible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPointCloud_isDataCompatible(self, *args)

    def updatePointsData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPointCloud_updatePointsData(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPointCloud

# Register OdGiPointCloud in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPointCloud_swigregister(OdGiPointCloud)

def OdGiPointCloud_addDataSizeFlags(*args) -> "OdUInt32":
    return _ODA_Kernel_Py3.OdGiPointCloud_addDataSizeFlags(*args)

def OdGiPointCloud_getDataSizeFlags(*args) -> "OdGiPointCloud::DataSize":
    return _ODA_Kernel_Py3.OdGiPointCloud_getDataSizeFlags(*args)

def OdGiPointCloud_getDefaultDataSizeFlags(*args) -> "OdUInt32":
    return _ODA_Kernel_Py3.OdGiPointCloud_getDefaultDataSizeFlags(*args)

def OdGiPointCloud_cast(*args) -> "OdSmartPtr< OdGiPointCloud >":
    return _ODA_Kernel_Py3.OdGiPointCloud_cast(*args)

def OdGiPointCloud_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiPointCloud_desc(*args)

def OdGiPointCloud_createObject(*args) -> "OdSmartPtr< OdGiPointCloud >":
    return _ODA_Kernel_Py3.OdGiPointCloud_createObject(*args)

class Components(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_component = property(_ODA_Kernel_Py3.Components_m_component_get, _ODA_Kernel_Py3.Components_m_component_set)
    m_nPoints = property(_ODA_Kernel_Py3.Components_m_nPoints_get, _ODA_Kernel_Py3.Components_m_nPoints_set)

    def hasComponent(self, *args) -> "bool":
        return _ODA_Kernel_Py3.Components_hasComponent(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.Components_swiginit(self, _ODA_Kernel_Py3.new_Components(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_Components

# Register Components in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.Components_swigregister(Components)

class ComponentsRaw(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_pComponent = property(_ODA_Kernel_Py3.ComponentsRaw_m_pComponent_get, _ODA_Kernel_Py3.ComponentsRaw_m_pComponent_set)
    m_nPoints = property(_ODA_Kernel_Py3.ComponentsRaw_m_nPoints_get, _ODA_Kernel_Py3.ComponentsRaw_m_nPoints_set)

    def hasComponent(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ComponentsRaw_hasComponent(self, *args)

    def fromComponents(self, *args) -> "OdGiPointCloud::ComponentsRaw &":
        return _ODA_Kernel_Py3.ComponentsRaw_fromComponents(self, *args)

    def construct(self, *args) -> "OdGiPointCloud::ComponentsRaw &":
        return _ODA_Kernel_Py3.ComponentsRaw_construct(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.ComponentsRaw_swiginit(self, _ODA_Kernel_Py3.new_ComponentsRaw(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_ComponentsRaw

# Register ComponentsRaw in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.ComponentsRaw_swigregister(ComponentsRaw)

class OdGiPointCloudFilter(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiPointCloudFilter >":
        return _ODA_Kernel_Py3.OdGiPointCloudFilter_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPointCloudFilter_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPointCloudFilter_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiPointCloudFilter_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiPointCloudFilter >":
        return _ODA_Kernel_Py3.OdGiPointCloudFilter_createObject(*args)

    def attachFilter(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointCloudFilter_attachFilter(self, *args)

    def detachFilter(self, *args) -> "OdGiPointCloudFilterPtr":
        return _ODA_Kernel_Py3.OdGiPointCloudFilter_detachFilter(self, *args)

    def filterPoints(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPointCloudFilter_filterPoints(self, *args)

    def filterBoundingBox(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPointCloudFilter_filterBoundingBox(self, *args)

    def extractTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGiPointCloudFilter_extractTransform(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPointCloudFilter

# Register OdGiPointCloudFilter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPointCloudFilter_swigregister(OdGiPointCloudFilter)

def OdGiPointCloudFilter_cast(*args) -> "OdSmartPtr< OdGiPointCloudFilter >":
    return _ODA_Kernel_Py3.OdGiPointCloudFilter_cast(*args)

def OdGiPointCloudFilter_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiPointCloudFilter_desc(*args)

def OdGiPointCloudFilter_createObject(*args) -> "OdSmartPtr< OdGiPointCloudFilter >":
    return _ODA_Kernel_Py3.OdGiPointCloudFilter_createObject(*args)

class OdGiPointCloudXformFilter(OdGiPointCloudFilter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiPointCloudXformFilter >":
        return _ODA_Kernel_Py3.OdGiPointCloudXformFilter_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPointCloudXformFilter_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPointCloudXformFilter_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiPointCloudXformFilter_queryX(self, *args)

    def setXform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointCloudXformFilter_setXform(self, *args)

    def addXform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointCloudXformFilter_addXform(self, *args)

    def getXform(self, *args) -> "OdGeMatrix3d const &":
        return _ODA_Kernel_Py3.OdGiPointCloudXformFilter_getXform(self, *args)

    def resetXform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointCloudXformFilter_resetXform(self, *args)

    def hasXform(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPointCloudXformFilter_hasXform(self, *args)

    def accessXform(self, *args) -> "OdGeMatrix3d &":
        return _ODA_Kernel_Py3.OdGiPointCloudXformFilter_accessXform(self, *args)

    @staticmethod
    def createObject(*args) -> "OdGiPointCloudFilterPtr":
        return _ODA_Kernel_Py3.OdGiPointCloudXformFilter_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPointCloudXformFilter

# Register OdGiPointCloudXformFilter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPointCloudXformFilter_swigregister(OdGiPointCloudXformFilter)

def OdGiPointCloudXformFilter_cast(*args) -> "OdSmartPtr< OdGiPointCloudXformFilter >":
    return _ODA_Kernel_Py3.OdGiPointCloudXformFilter_cast(*args)

def OdGiPointCloudXformFilter_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiPointCloudXformFilter_desc(*args)

def OdGiPointCloudXformFilter_createObject(*args) -> "OdGiPointCloudFilterPtr":
    return _ODA_Kernel_Py3.OdGiPointCloudXformFilter_createObject(*args)

class OdGiPointCloudComponentsFilter(OdGiPointCloudFilter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiPointCloudComponentsFilter >":
        return _ODA_Kernel_Py3.OdGiPointCloudComponentsFilter_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPointCloudComponentsFilter_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPointCloudComponentsFilter_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiPointCloudComponentsFilter_queryX(self, *args)

    def setComponentsRequest(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointCloudComponentsFilter_setComponentsRequest(self, *args)

    def componentsRequest(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiPointCloudComponentsFilter_componentsRequest(self, *args)

    def components(self, *args) -> "OdGiPointCloud::ComponentsArray &":
        return _ODA_Kernel_Py3.OdGiPointCloudComponentsFilter_components(self, *args)

    @staticmethod
    def createObject(*args) -> "OdGiPointCloudFilterPtr":
        return _ODA_Kernel_Py3.OdGiPointCloudComponentsFilter_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPointCloudComponentsFilter

# Register OdGiPointCloudComponentsFilter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPointCloudComponentsFilter_swigregister(OdGiPointCloudComponentsFilter)

def OdGiPointCloudComponentsFilter_cast(*args) -> "OdSmartPtr< OdGiPointCloudComponentsFilter >":
    return _ODA_Kernel_Py3.OdGiPointCloudComponentsFilter_cast(*args)

def OdGiPointCloudComponentsFilter_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiPointCloudComponentsFilter_desc(*args)

def OdGiPointCloudComponentsFilter_createObject(*args) -> "OdGiPointCloudFilterPtr":
    return _ODA_Kernel_Py3.OdGiPointCloudComponentsFilter_createObject(*args)

class OdGiPointCloudReceiver(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiPointCloudReceiver >":
        return _ODA_Kernel_Py3.OdGiPointCloudReceiver_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPointCloudReceiver_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPointCloudReceiver_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiPointCloudReceiver_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiPointCloudReceiver >":
        return _ODA_Kernel_Py3.OdGiPointCloudReceiver_createObject(*args)

    def addPoints(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPointCloudReceiver_addPoints(self, *args)

    def removePoints(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPointCloudReceiver_removePoints(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPointCloudReceiver

# Register OdGiPointCloudReceiver in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPointCloudReceiver_swigregister(OdGiPointCloudReceiver)
kGiPointCloudNegativeCellId = cvar.kGiPointCloudNegativeCellId

def OdGiPointCloudReceiver_cast(*args) -> "OdSmartPtr< OdGiPointCloudReceiver >":
    return _ODA_Kernel_Py3.OdGiPointCloudReceiver_cast(*args)

def OdGiPointCloudReceiver_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiPointCloudReceiver_desc(*args)

def OdGiPointCloudReceiver_createObject(*args) -> "OdSmartPtr< OdGiPointCloudReceiver >":
    return _ODA_Kernel_Py3.OdGiPointCloudReceiver_createObject(*args)

class OdGiPointCloudExtentsReceiver(OdGiPointCloudReceiver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiPointCloudExtentsReceiver >":
        return _ODA_Kernel_Py3.OdGiPointCloudExtentsReceiver_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPointCloudExtentsReceiver_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPointCloudExtentsReceiver_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiPointCloudExtentsReceiver_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdGiPointCloudReceiverPtr":
        return _ODA_Kernel_Py3.OdGiPointCloudExtentsReceiver_createObject(*args)

    def getExtents(self, *args) -> "OdGeExtents3d const &":
        return _ODA_Kernel_Py3.OdGiPointCloudExtentsReceiver_getExtents(self, *args)

    def resetExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPointCloudExtentsReceiver_resetExtents(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPointCloudExtentsReceiver

# Register OdGiPointCloudExtentsReceiver in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPointCloudExtentsReceiver_swigregister(OdGiPointCloudExtentsReceiver)

def OdGiPointCloudExtentsReceiver_cast(*args) -> "OdSmartPtr< OdGiPointCloudExtentsReceiver >":
    return _ODA_Kernel_Py3.OdGiPointCloudExtentsReceiver_cast(*args)

def OdGiPointCloudExtentsReceiver_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiPointCloudExtentsReceiver_desc(*args)

def OdGiPointCloudExtentsReceiver_createObject(*args) -> "OdGiPointCloudReceiverPtr":
    return _ODA_Kernel_Py3.OdGiPointCloudExtentsReceiver_createObject(*args)

class OdGiPsLinetypes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kPsDefs = _ODA_Kernel_Py3.OdGiPsLinetypes_kPsDefs
    kGiDefs = _ODA_Kernel_Py3.OdGiPsLinetypes_kGiDefs
    kGDIDefs = _ODA_Kernel_Py3.OdGiPsLinetypes_kGDIDefs
    kOpenGLDefs = _ODA_Kernel_Py3.OdGiPsLinetypes_kOpenGLDefs

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiPsLinetypes_swiginit(self, _ODA_Kernel_Py3.new_OdGiPsLinetypes(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPsLinetypes

    def isInitialized(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPsLinetypes_isInitialized(self, *args)

    def initialize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPsLinetypes_initialize(self, *args)

    def uninitialize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPsLinetypes_uninitialize(self, *args)

    def getPsDefinitions(self, *args) -> "OdGiPsLinetypes::PsLinetypeDef const *":
        return _ODA_Kernel_Py3.OdGiPsLinetypes_getPsDefinitions(self, *args)

    def getPsDefinition(self, *args) -> "OdGiPsLinetypes::PsLinetypeDef const &":
        return _ODA_Kernel_Py3.OdGiPsLinetypes_getPsDefinition(self, *args)

    def getGiDefinitions(self, *args) -> "OdArray< OdGiLinetype > const &":
        return _ODA_Kernel_Py3.OdGiPsLinetypes_getGiDefinitions(self, *args)

    def getGiDefinition(self, *args) -> "OdGiLinetype const &":
        return _ODA_Kernel_Py3.OdGiPsLinetypes_getGiDefinition(self, *args)

    def rasterizeLinetype(self, *args) -> "OdUInt8Array":
        return _ODA_Kernel_Py3.OdGiPsLinetypes_rasterizeLinetype(self, *args)

    def rasterizeLinetypeImage(self, *args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdGiPsLinetypes_rasterizeLinetypeImage(self, *args)

    def getGDIDefinitions(self, *args) -> "OdGiPsLinetypes::PsLinetypeGDI const *":
        return _ODA_Kernel_Py3.OdGiPsLinetypes_getGDIDefinitions(self, *args)

    def getGDIDefinition(self, *args) -> "OdGiPsLinetypes::PsLinetypeGDI const &":
        return _ODA_Kernel_Py3.OdGiPsLinetypes_getGDIDefinition(self, *args)

    def getOpenGLDefinitions(self, *args) -> "OdGiPsLinetypes::PsLinetypeOGL const *":
        return _ODA_Kernel_Py3.OdGiPsLinetypes_getOpenGLDefinitions(self, *args)

    def getOpenGLDefinition(self, *args) -> "OdGiPsLinetypes::PsLinetypeOGL const &":
        return _ODA_Kernel_Py3.OdGiPsLinetypes_getOpenGLDefinition(self, *args)

# Register OdGiPsLinetypes in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPsLinetypes_swigregister(OdGiPsLinetypes)

class PsLinetypeDef(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_numDashes = property(_ODA_Kernel_Py3.PsLinetypeDef_m_numDashes_get, _ODA_Kernel_Py3.PsLinetypeDef_m_numDashes_set)
    m_dashLength = property(_ODA_Kernel_Py3.PsLinetypeDef_m_dashLength_get, _ODA_Kernel_Py3.PsLinetypeDef_m_dashLength_set)

    def patternLength(self, *args) -> "double":
        return _ODA_Kernel_Py3.PsLinetypeDef_patternLength(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.PsLinetypeDef_swiginit(self, _ODA_Kernel_Py3.new_PsLinetypeDef(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PsLinetypeDef

# Register PsLinetypeDef in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PsLinetypeDef_swigregister(PsLinetypeDef)

class PsLinetypeGDI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_numDashes = property(_ODA_Kernel_Py3.PsLinetypeGDI_m_numDashes_get, _ODA_Kernel_Py3.PsLinetypeGDI_m_numDashes_set)
    m_dashLength = property(_ODA_Kernel_Py3.PsLinetypeGDI_m_dashLength_get, _ODA_Kernel_Py3.PsLinetypeGDI_m_dashLength_set)

    def patternLength(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.PsLinetypeGDI_patternLength(self, *args)

    def clean(self, *args) -> "void":
        return _ODA_Kernel_Py3.PsLinetypeGDI_clean(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.PsLinetypeGDI_swiginit(self, _ODA_Kernel_Py3.new_PsLinetypeGDI(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PsLinetypeGDI

# Register PsLinetypeGDI in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PsLinetypeGDI_swigregister(PsLinetypeGDI)

class PsLinetypeOGL(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_patternLength = property(_ODA_Kernel_Py3.PsLinetypeOGL_m_patternLength_get, _ODA_Kernel_Py3.PsLinetypeOGL_m_patternLength_set)
    m_pattern = property(_ODA_Kernel_Py3.PsLinetypeOGL_m_pattern_get, _ODA_Kernel_Py3.PsLinetypeOGL_m_pattern_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.PsLinetypeOGL_swiginit(self, _ODA_Kernel_Py3.new_PsLinetypeOGL(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PsLinetypeOGL

# Register PsLinetypeOGL in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PsLinetypeOGL_swigregister(PsLinetypeOGL)


def odgiGetPsLinetypesManager(*args) -> "OdGiPsLinetypes &":
    return _ODA_Kernel_Py3.odgiGetPsLinetypesManager(*args)
class OdGiPsFillstyles(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiPsFillstyles_swiginit(self, _ODA_Kernel_Py3.new_OdGiPsFillstyles(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPsFillstyles

    def getGiDefinitions(self, *args) -> "OdHatchPattern const *":
        return _ODA_Kernel_Py3.OdGiPsFillstyles_getGiDefinitions(self, *args)

    def getGiDefinition(self, *args) -> "OdHatchPattern const &":
        return _ODA_Kernel_Py3.OdGiPsFillstyles_getGiDefinition(self, *args)

    def rasterizeFillstyle(self, *args) -> "OdUInt8Array":
        return _ODA_Kernel_Py3.OdGiPsFillstyles_rasterizeFillstyle(self, *args)

    def rasterizeFillstyleImage(self, *args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdGiPsFillstyles_rasterizeFillstyleImage(self, *args)

# Register OdGiPsFillstyles in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPsFillstyles_swigregister(OdGiPsFillstyles)


def odgiGetPsFillstylesManager(*args) -> "OdGiPsFillstyles &":
    return _ODA_Kernel_Py3.odgiGetPsFillstylesManager(*args)
class OdGiPlotGenerator(OdGiConveyorNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiPlotGenerator >":
        return _ODA_Kernel_Py3.OdGiPlotGenerator_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPlotGenerator_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPlotGenerator_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiPlotGenerator_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiPlotGenerator >":
        return _ODA_Kernel_Py3.OdGiPlotGenerator_createObject(*args)

    def setDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPlotGenerator_setDeviation(self, *args)

    def setDrawContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPlotGenerator_setDrawContext(self, *args)

    def enable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPlotGenerator_enable(self, *args)

    def enabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPlotGenerator_enabled(self, *args)

    def dot_per_inch(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiPlotGenerator_dot_per_inch(self, *args)

    def dot_per_mm(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiPlotGenerator_dot_per_mm(self, *args)

    def setPlotStyle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPlotGenerator_setPlotStyle(self, *args)

    def setExternalPolylineOut(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPlotGenerator_setExternalPolylineOut(self, *args)

    def externalPolylineOut(self, *args) -> "OdGiPlotGenerator::PolylineOut *":
        return _ODA_Kernel_Py3.OdGiPlotGenerator_externalPolylineOut(self, *args)

    def setExternalEllipseOut(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPlotGenerator_setExternalEllipseOut(self, *args)

    def externalEllipseOut(self, *args) -> "OdGiPlotGenerator::EllipseOut *":
        return _ODA_Kernel_Py3.OdGiPlotGenerator_externalEllipseOut(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPlotGenerator

# Register OdGiPlotGenerator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPlotGenerator_swigregister(OdGiPlotGenerator)

def OdGiPlotGenerator_cast(*args) -> "OdSmartPtr< OdGiPlotGenerator >":
    return _ODA_Kernel_Py3.OdGiPlotGenerator_cast(*args)

def OdGiPlotGenerator_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiPlotGenerator_desc(*args)

def OdGiPlotGenerator_createObject(*args) -> "OdSmartPtr< OdGiPlotGenerator >":
    return _ODA_Kernel_Py3.OdGiPlotGenerator_createObject(*args)

class PolylineOut(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def plotGeneratorPolylineOut(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PolylineOut_plotGeneratorPolylineOut(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PolylineOut

# Register PolylineOut in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PolylineOut_swigregister(PolylineOut)

class EllipseOut(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def plotGeneratorEllipseOut(self, *args) -> "bool":
        return _ODA_Kernel_Py3.EllipseOut_plotGeneratorEllipseOut(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_EllipseOut

# Register EllipseOut in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.EllipseOut_swigregister(EllipseOut)

class OdGiPlineContourCalcEmptyInheritance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def pline(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPlineContourCalcEmptyInheritance_pline(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiPlineContourCalcEmptyInheritance_swiginit(self, _ODA_Kernel_Py3.new_OdGiPlineContourCalcEmptyInheritance(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPlineContourCalcEmptyInheritance

# Register OdGiPlineContourCalcEmptyInheritance in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPlineContourCalcEmptyInheritance_swigregister(OdGiPlineContourCalcEmptyInheritance)

class OdGiPlineContourCalcSimplifierInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def plineCalcShellWires(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPlineContourCalcSimplifierInterface_plineCalcShellWires(self, *args)

    def dropPlineCalcShellWires(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPlineContourCalcSimplifierInterface_dropPlineCalcShellWires(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPlineContourCalcSimplifierInterface

# Register OdGiPlineContourCalcSimplifierInterface in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPlineContourCalcSimplifierInterface_swigregister(OdGiPlineContourCalcSimplifierInterface)

class OdGiPlineContourCalcNonSimplifierInheritance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiPlineContourCalcNonSimplifierInheritance_swiginit(self, _ODA_Kernel_Py3.new_OdGiPlineContourCalcNonSimplifierInheritance(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPlineContourCalcNonSimplifierInheritance

# Register OdGiPlineContourCalcNonSimplifierInheritance in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPlineContourCalcNonSimplifierInheritance_swigregister(OdGiPlineContourCalcNonSimplifierInheritance)

class OdGiXYProjector(OdGiConveyorNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiXYProjector >":
        return _ODA_Kernel_Py3.OdGiXYProjector_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiXYProjector_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiXYProjector_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiXYProjector_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiXYProjector >":
        return _ODA_Kernel_Py3.OdGiXYProjector_createObject(*args)

    def enable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiXYProjector_enable(self, *args)

    def disable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiXYProjector_disable(self, *args)

    def isEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiXYProjector_isEnabled(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiXYProjector

# Register OdGiXYProjector in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiXYProjector_swigregister(OdGiXYProjector)

def OdGiXYProjector_cast(*args) -> "OdSmartPtr< OdGiXYProjector >":
    return _ODA_Kernel_Py3.OdGiXYProjector_cast(*args)

def OdGiXYProjector_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiXYProjector_desc(*args)

def OdGiXYProjector_createObject(*args) -> "OdSmartPtr< OdGiXYProjector >":
    return _ODA_Kernel_Py3.OdGiXYProjector_createObject(*args)

class OdGiPlaneProjector(OdGiConveyorNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiPlaneProjector >":
        return _ODA_Kernel_Py3.OdGiPlaneProjector_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPlaneProjector_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPlaneProjector_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiPlaneProjector_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiPlaneProjector >":
        return _ODA_Kernel_Py3.OdGiPlaneProjector_createObject(*args)

    def enable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPlaneProjector_enable(self, *args)

    def disable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPlaneProjector_disable(self, *args)

    def isEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPlaneProjector_isEnabled(self, *args)

    def setPlane(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPlaneProjector_setPlane(self, *args)

    def plane(self, *args) -> "OdGePlane const &":
        return _ODA_Kernel_Py3.OdGiPlaneProjector_plane(self, *args)

    def projectionDirection(self, *args) -> "OdGeVector3d const &":
        return _ODA_Kernel_Py3.OdGiPlaneProjector_projectionDirection(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPlaneProjector

# Register OdGiPlaneProjector in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPlaneProjector_swigregister(OdGiPlaneProjector)

def OdGiPlaneProjector_cast(*args) -> "OdSmartPtr< OdGiPlaneProjector >":
    return _ODA_Kernel_Py3.OdGiPlaneProjector_cast(*args)

def OdGiPlaneProjector_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiPlaneProjector_desc(*args)

def OdGiPlaneProjector_createObject(*args) -> "OdSmartPtr< OdGiPlaneProjector >":
    return _ODA_Kernel_Py3.OdGiPlaneProjector_createObject(*args)

class OdGiPerspectivePreprocessor(OdGiConveyorNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiPerspectivePreprocessor >":
        return _ODA_Kernel_Py3.OdGiPerspectivePreprocessor_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPerspectivePreprocessor_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiPerspectivePreprocessor_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiPerspectivePreprocessor_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiPerspectivePreprocessor >":
        return _ODA_Kernel_Py3.OdGiPerspectivePreprocessor_createObject(*args)

    def setDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPerspectivePreprocessor_setDeviation(self, *args)

    def setDrawContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPerspectivePreprocessor_setDrawContext(self, *args)

    def enable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiPerspectivePreprocessor_enable(self, *args)

    def enabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiPerspectivePreprocessor_enabled(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiPerspectivePreprocessor

# Register OdGiPerspectivePreprocessor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiPerspectivePreprocessor_swigregister(OdGiPerspectivePreprocessor)

def OdGiPerspectivePreprocessor_cast(*args) -> "OdSmartPtr< OdGiPerspectivePreprocessor >":
    return _ODA_Kernel_Py3.OdGiPerspectivePreprocessor_cast(*args)

def OdGiPerspectivePreprocessor_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiPerspectivePreprocessor_desc(*args)

def OdGiPerspectivePreprocessor_createObject(*args) -> "OdSmartPtr< OdGiPerspectivePreprocessor >":
    return _ODA_Kernel_Py3.OdGiPerspectivePreprocessor_createObject(*args)

class OdGiOrthoPrismIntersector(OdGiConveyorNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiOrthoPrismIntersector >":
        return _ODA_Kernel_Py3.OdGiOrthoPrismIntersector_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiOrthoPrismIntersector_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiOrthoPrismIntersector_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiOrthoPrismIntersector_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiOrthoPrismIntersector >":
        return _ODA_Kernel_Py3.OdGiOrthoPrismIntersector_createObject(*args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoPrismIntersector_set(self, *args)

    def get(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoPrismIntersector_get(self, *args)

    def setDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoPrismIntersector_setDeviation(self, *args)

    def setDrawContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoPrismIntersector_setDrawContext(self, *args)

    def clipStatus(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiOrthoPrismIntersector_clipStatus(self, *args)

    def clearClipStatus(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoPrismIntersector_clearClipStatus(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiOrthoPrismIntersector

# Register OdGiOrthoPrismIntersector in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiOrthoPrismIntersector_swigregister(OdGiOrthoPrismIntersector)

def OdGiOrthoPrismIntersector_cast(*args) -> "OdSmartPtr< OdGiOrthoPrismIntersector >":
    return _ODA_Kernel_Py3.OdGiOrthoPrismIntersector_cast(*args)

def OdGiOrthoPrismIntersector_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiOrthoPrismIntersector_desc(*args)

def OdGiOrthoPrismIntersector_createObject(*args) -> "OdSmartPtr< OdGiOrthoPrismIntersector >":
    return _ODA_Kernel_Py3.OdGiOrthoPrismIntersector_createObject(*args)

class OdGiOrthoClipperEx(OdGiOrthoClipper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiOrthoClipperEx >":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiOrthoClipperEx >":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_createObject(*args)

    def get(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_get(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_isEmpty(self, *args)

    def isInverted(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_isInverted(self, *args)

    def isExtended(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_isExtended(self, *args)

    def isSingleClipStage(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_isSingleClipStage(self, *args)

    def isEmptyClipSet(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_isEmptyClipSet(self, *args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_set(self, *args)

    def getType(self, *args) -> "OdGiAbstractClipBoundary::BoundaryType":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_getType(self, *args)

    def enableAnalyticCurvesClipping(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_enableAnalyticCurvesClipping(self, *args)

    def isAnalyticCurvesClippingEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_isAnalyticCurvesClippingEnabled(self, *args)

    def enable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_enable(self, *args)

    def disable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_disable(self, *args)

    def enabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_enabled(self, *args)
    kPolyClipLimit = _ODA_Kernel_Py3.OdGiOrthoClipperEx_kPolyClipLimit
    kNumClipLimits = _ODA_Kernel_Py3.OdGiOrthoClipperEx_kNumClipLimits

    def setLimit(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_setLimit(self, *args)

    def getLimit(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_getLimit(self, *args)
    kCSNoFlags = _ODA_Kernel_Py3.OdGiOrthoClipperEx_kCSNoFlags
    kCSDisabled = _ODA_Kernel_Py3.OdGiOrthoClipperEx_kCSDisabled
    kCSInverted = _ODA_Kernel_Py3.OdGiOrthoClipperEx_kCSInverted
    kCSEnableSections = _ODA_Kernel_Py3.OdGiOrthoClipperEx_kCSEnableSections
    kCSEnableCutting = _ODA_Kernel_Py3.OdGiOrthoClipperEx_kCSEnableCutting
    kCSPassNonSections = _ODA_Kernel_Py3.OdGiOrthoClipperEx_kCSPassNonSections
    kCCDontClassify = _ODA_Kernel_Py3.OdGiOrthoClipperEx_kCCDontClassify
    kCCClassifiedByInclusion = _ODA_Kernel_Py3.OdGiOrthoClipperEx_kCCClassifiedByInclusion
    kCCClassifiedByInteger = _ODA_Kernel_Py3.OdGiOrthoClipperEx_kCCClassifiedByInteger
    kCCClassifiedByOrder = _ODA_Kernel_Py3.OdGiOrthoClipperEx_kCCClassifiedByOrder
    kCCClassifiedByNormal = _ODA_Kernel_Py3.OdGiOrthoClipperEx_kCCClassifiedByNormal
    kCCClassifiedByXor = _ODA_Kernel_Py3.OdGiOrthoClipperEx_kCCClassifiedByXor
    kCCClassifiedBySignedXor = _ODA_Kernel_Py3.OdGiOrthoClipperEx_kCCClassifiedBySignedXor

    def pushClipStage(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_pushClipStage(self, *args)

    def popClipStage(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_popClipStage(self, *args)

    def clearClipping(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_clearClipping(self, *args)

    def clearTemporaryArrays(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_clearTemporaryArrays(self, *args)

    def numClipStages(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_numClipStages(self, *args)

    def classifyClipStage(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_classifyClipStage(self, *args)

    def isClipStageSectionable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_isClipStageSectionable(self, *args)

    def isClipStageCuttable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_isClipStageCuttable(self, *args)

    def getClipStage(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_getClipStage(self, *args)

    def enableClipStage(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_enableClipStage(self, *args)

    def isClipStageEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_isClipStageEnabled(self, *args)

    def clipStatus(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_clipStatus(self, *args)

    def clearClipStatus(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_clearClipStatus(self, *args)
    kStatusInvisible = _ODA_Kernel_Py3.OdGiOrthoClipperEx_kStatusInvisible
    kStatusClipped = _ODA_Kernel_Py3.OdGiOrthoClipperEx_kStatusClipped
    kStatusVisible = _ODA_Kernel_Py3.OdGiOrthoClipperEx_kStatusVisible

    def checkPointVisibility(self, *args) -> "OdGiOrthoClipperEx::VisibilityStatus":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_checkPointVisibility(self, *args)

    def checkSphereVisibility(self, *args) -> "OdGiOrthoClipperEx::VisibilityStatus":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_checkSphereVisibility(self, *args)

    def checkExtentsVisibility(self, *args) -> "OdGiOrthoClipperEx::VisibilityStatus":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_checkExtentsVisibility(self, *args)

    def checkBoundsVisibility(self, *args) -> "OdGiOrthoClipperEx::VisibilityStatus":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_checkBoundsVisibility(self, *args)

    def enableLogging(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_enableLogging(self, *args)

    def disableLogging(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_disableLogging(self, *args)

    def isLoggingEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_isLoggingEnabled(self, *args)

    def sectionOutput(self, *args) -> "OdGiConveyorOutput &":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_sectionOutput(self, *args)

    def cuttingOutput(self, *args) -> "OdGiConveyorOutput &":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_cuttingOutput(self, *args)

    def nativeClippingGeometryInterface(self, *args) -> "OdGiClippedGeometryOutput::ClippedGeometryOutputInterface *":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_nativeClippingGeometryInterface(self, *args)

    def flushSection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_flushSection(self, *args)

    def setSkipExtentsCheck(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_setSkipExtentsCheck(self, *args)

    def setTextsNoClip(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiOrthoClipperEx_setTextsNoClip(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiOrthoClipperEx

# Register OdGiOrthoClipperEx in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiOrthoClipperEx_swigregister(OdGiOrthoClipperEx)

def OdGiOrthoClipperEx_cast(*args) -> "OdSmartPtr< OdGiOrthoClipperEx >":
    return _ODA_Kernel_Py3.OdGiOrthoClipperEx_cast(*args)

def OdGiOrthoClipperEx_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiOrthoClipperEx_desc(*args)

def OdGiOrthoClipperEx_createObject(*args) -> "OdSmartPtr< OdGiOrthoClipperEx >":
    return _ODA_Kernel_Py3.OdGiOrthoClipperEx_createObject(*args)

class TolOverride(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_tolOverride = property(_ODA_Kernel_Py3.TolOverride_m_tolOverride_get, _ODA_Kernel_Py3.TolOverride_m_tolOverride_set)
    kNoOverride = _ODA_Kernel_Py3.TolOverride_kNoOverride
    kAbsolute = _ODA_Kernel_Py3.TolOverride_kAbsolute
    kMultiplier = _ODA_Kernel_Py3.TolOverride_kMultiplier
    kAddition = _ODA_Kernel_Py3.TolOverride_kAddition
    m_overrideType = property(_ODA_Kernel_Py3.TolOverride_m_overrideType_get, _ODA_Kernel_Py3.TolOverride_m_overrideType_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.TolOverride_swiginit(self, _ODA_Kernel_Py3.new_TolOverride(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_TolOverride

# Register TolOverride in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.TolOverride_swigregister(TolOverride)

class PolyTolOverride(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_clipTolOverride = property(_ODA_Kernel_Py3.PolyTolOverride_m_clipTolOverride_get, _ODA_Kernel_Py3.PolyTolOverride_m_clipTolOverride_set)
    m_localTolOverride = property(_ODA_Kernel_Py3.PolyTolOverride_m_localTolOverride_get, _ODA_Kernel_Py3.PolyTolOverride_m_localTolOverride_set)
    m_sectionTolOverride = property(_ODA_Kernel_Py3.PolyTolOverride_m_sectionTolOverride_get, _ODA_Kernel_Py3.PolyTolOverride_m_sectionTolOverride_set)
    m_boundaryTolOverride = property(_ODA_Kernel_Py3.PolyTolOverride_m_boundaryTolOverride_get, _ODA_Kernel_Py3.PolyTolOverride_m_boundaryTolOverride_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.PolyTolOverride_swiginit(self, _ODA_Kernel_Py3.new_PolyTolOverride(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PolyTolOverride

# Register PolyTolOverride in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PolyTolOverride_swigregister(PolyTolOverride)

class ClipPlane(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_origin = property(_ODA_Kernel_Py3.ClipPlane_m_origin_get, _ODA_Kernel_Py3.ClipPlane_m_origin_set)
    m_normal = property(_ODA_Kernel_Py3.ClipPlane_m_normal_get, _ODA_Kernel_Py3.ClipPlane_m_normal_set)
    kNoMark = _ODA_Kernel_Py3.ClipPlane_kNoMark
    kMarkLower = _ODA_Kernel_Py3.ClipPlane_kMarkLower
    kMarkUpper = _ODA_Kernel_Py3.ClipPlane_kMarkUpper
    m_markType = property(_ODA_Kernel_Py3.ClipPlane_m_markType_get, _ODA_Kernel_Py3.ClipPlane_m_markType_set)
    m_clipTolOverride = property(_ODA_Kernel_Py3.ClipPlane_m_clipTolOverride_get, _ODA_Kernel_Py3.ClipPlane_m_clipTolOverride_set)
    m_sectionTolOverride = property(_ODA_Kernel_Py3.ClipPlane_m_sectionTolOverride_get, _ODA_Kernel_Py3.ClipPlane_m_sectionTolOverride_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.ClipPlane_swiginit(self, _ODA_Kernel_Py3.new_ClipPlane(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_ClipPlane

# Register ClipPlane in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.ClipPlane_swigregister(ClipPlane)

class OdGiMultipleClippedOutputExt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def selectClipOutput(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMultipleClippedOutputExt_selectClipOutput(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMultipleClippedOutputExt

# Register OdGiMultipleClippedOutputExt in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMultipleClippedOutputExt_swigregister(OdGiMultipleClippedOutputExt)

class OdGiClippedGeometryConnector(OdGiConveyorNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiClippedGeometryConnector >":
        return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiClippedGeometryConnector >":
        return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_createObject(*args)

    def setClippedGeometryOutput(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_setClippedGeometryOutput(self, *args)

    def getClippedGeometryOutput(self, *args) -> "OdGiClippedGeometryOutput *":
        return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_getClippedGeometryOutput(self, *args)

    def hasClippedGeometryOutput(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_hasClippedGeometryOutput(self, *args)

    def setDrawContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_setDrawContext(self, *args)

    def setExternalClippedGeometryOutputInterface(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_setExternalClippedGeometryOutputInterface(self, *args)

    def clippedGeometryOutputInterface(self, *args) -> "OdGiClippedGeometryOutput::ClippedGeometryOutputInterface &":
        return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_clippedGeometryOutputInterface(self, *args)

    def setClippedGeometryOutputSkip(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_setClippedGeometryOutputSkip(self, *args)

    def isClippedGeometryOutputSkipping(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_isClippedGeometryOutputSkipping(self, *args)

    def disableGeometryOutput(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_disableGeometryOutput(self, *args)

    def isGeometryOutputDisabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_isGeometryOutputDisabled(self, *args)

    def isClosedSectionsOutputEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_isClosedSectionsOutputEnabled(self, *args)

    def isOpenedSectionsOutputEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_isOpenedSectionsOutputEnabled(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiClippedGeometryConnector

# Register OdGiClippedGeometryConnector in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiClippedGeometryConnector_swigregister(OdGiClippedGeometryConnector)

def OdGiClippedGeometryConnector_cast(*args) -> "OdSmartPtr< OdGiClippedGeometryConnector >":
    return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_cast(*args)

def OdGiClippedGeometryConnector_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_desc(*args)

def OdGiClippedGeometryConnector_createObject(*args) -> "OdSmartPtr< OdGiClippedGeometryConnector >":
    return _ODA_Kernel_Py3.OdGiClippedGeometryConnector_createObject(*args)

class OdGiNoiseGenerator(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiNoiseGenerator >":
        return _ODA_Kernel_Py3.OdGiNoiseGenerator_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiNoiseGenerator_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiNoiseGenerator_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiNoiseGenerator_queryX(self, *args)

    def initSeed(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiNoiseGenerator_initSeed(self, *args)

    def noise1d(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiNoiseGenerator_noise1d(self, *args)

    def noise2d(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiNoiseGenerator_noise2d(self, *args)

    def noise3d(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiNoiseGenerator_noise3d(self, *args)

    def noise(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiNoiseGenerator_noise(self, *args)

    def turbulence(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiNoiseGenerator_turbulence(self, *args)

    def oNoise(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiNoiseGenerator_oNoise(self, *args)

    def fBm(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiNoiseGenerator_fBm(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiNoiseGenerator >":
        return _ODA_Kernel_Py3.OdGiNoiseGenerator_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiNoiseGenerator

# Register OdGiNoiseGenerator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiNoiseGenerator_swigregister(OdGiNoiseGenerator)

def OdGiNoiseGenerator_cast(*args) -> "OdSmartPtr< OdGiNoiseGenerator >":
    return _ODA_Kernel_Py3.OdGiNoiseGenerator_cast(*args)

def OdGiNoiseGenerator_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiNoiseGenerator_desc(*args)

def OdGiNoiseGenerator_createObject(*args) -> "OdSmartPtr< OdGiNoiseGenerator >":
    return _ODA_Kernel_Py3.OdGiNoiseGenerator_createObject(*args)

class OdGiGeometryMetafile(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiGeometryMetafile >":
        return _ODA_Kernel_Py3.OdGiGeometryMetafile_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiGeometryMetafile_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiGeometryMetafile_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiGeometryMetafile_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiGeometryMetafile >":
        return _ODA_Kernel_Py3.OdGiGeometryMetafile_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiGeometryMetafile

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometryMetafile_clear(self, *args)

    def play(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometryMetafile_play(self, *args)

    def metafileSize(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdGiGeometryMetafile_metafileSize(self, *args)

    def setRecords(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometryMetafile_setRecords(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiGeometryMetafile_isEmpty(self, *args)

    def firstRecord(self, *args) -> "OdGiGeometryMetafile::Record *":
        return _ODA_Kernel_Py3.OdGiGeometryMetafile_firstRecord(self, *args)

    def lastRecord(self, *args) -> "OdGiGeometryMetafile::Record *":
        return _ODA_Kernel_Py3.OdGiGeometryMetafile_lastRecord(self, *args)

# Register OdGiGeometryMetafile in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiGeometryMetafile_swigregister(OdGiGeometryMetafile)

def OdGiGeometryMetafile_cast(*args) -> "OdSmartPtr< OdGiGeometryMetafile >":
    return _ODA_Kernel_Py3.OdGiGeometryMetafile_cast(*args)

def OdGiGeometryMetafile_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiGeometryMetafile_desc(*args)

def OdGiGeometryMetafile_createObject(*args) -> "OdSmartPtr< OdGiGeometryMetafile >":
    return _ODA_Kernel_Py3.OdGiGeometryMetafile_createObject(*args)

class Record(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_Record

    def tail(self, *args) -> "OdGiGeometryMetafile::Record const *":
        return _ODA_Kernel_Py3.Record_tail(self, *args)

    def setTail(self, *args) -> "void":
        return _ODA_Kernel_Py3.Record_setTail(self, *args)

    def deleteList(self, *args) -> "void":
        return _ODA_Kernel_Py3.Record_deleteList(self, *args)

    def play(self, *args) -> "void":
        return _ODA_Kernel_Py3.Record_play(self, *args)

    def recordSize(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.Record_recordSize(self, *args)

# Register Record in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.Record_swigregister(Record)

class OdGiMetafiler(OdGiConveyorNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiMetafiler >":
        return _ODA_Kernel_Py3.OdGiMetafiler_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMetafiler_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMetafiler_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiMetafiler_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiMetafiler >":
        return _ODA_Kernel_Py3.OdGiMetafiler_createObject(*args)

    def setMetafile(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMetafiler_setMetafile(self, *args)

    def metafile(self, *args) -> "OdGiGeometryMetafile *":
        return _ODA_Kernel_Py3.OdGiMetafiler_metafile(self, *args)

    def exchangeMetafile(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMetafiler_exchangeMetafile(self, *args)

    def setDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMetafiler_setDeviation(self, *args)

    def setDrawContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMetafiler_setDrawContext(self, *args)
    kUnknown = _ODA_Kernel_Py3.OdGiMetafiler_kUnknown
    kModel = _ODA_Kernel_Py3.OdGiMetafiler_kModel
    kWorld = _ODA_Kernel_Py3.OdGiMetafiler_kWorld
    kEye = _ODA_Kernel_Py3.OdGiMetafiler_kEye
    kDevice = _ODA_Kernel_Py3.OdGiMetafiler_kDevice

    def setCoordinatesType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMetafiler_setCoordinatesType(self, *args)

    def coordinatesType(self, *args) -> "OdGiMetafiler::CoordType":
        return _ODA_Kernel_Py3.OdGiMetafiler_coordinatesType(self, *args)

    def saveTraits(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiMetafiler_saveTraits(self, *args)

    def flush(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMetafiler_flush(self, *args)

    def add(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMetafiler_add(self, *args)
    kTextAsText = _ODA_Kernel_Py3.OdGiMetafiler_kTextAsText
    kNurbsAsNurbs = _ODA_Kernel_Py3.OdGiMetafiler_kNurbsAsNurbs
    kPlineAsPline = _ODA_Kernel_Py3.OdGiMetafiler_kPlineAsPline
    kDisableImageConversion = _ODA_Kernel_Py3.OdGiMetafiler_kDisableImageConversion

    def setOptions(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiMetafiler_setOptions(self, *args)

    def options(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiMetafiler_options(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMetafiler

# Register OdGiMetafiler in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMetafiler_swigregister(OdGiMetafiler)

def OdGiMetafiler_cast(*args) -> "OdSmartPtr< OdGiMetafiler >":
    return _ODA_Kernel_Py3.OdGiMetafiler_cast(*args)

def OdGiMetafiler_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiMetafiler_desc(*args)

def OdGiMetafiler_createObject(*args) -> "OdSmartPtr< OdGiMetafiler >":
    return _ODA_Kernel_Py3.OdGiMetafiler_createObject(*args)

class OdGiMetafile(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiMetafile >":
        return _ODA_Kernel_Py3.OdGiMetafile_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMetafile_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiMetafile_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiMetafile_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiMetafile >":
        return _ODA_Kernel_Py3.OdGiMetafile_createObject(*args)

    def dataSize(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiMetafile_dataSize(self, *args)

    def bitsData(self, *args) -> "OdUInt8 const *":
        return _ODA_Kernel_Py3.OdGiMetafile_bitsData(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiMetafile

# Register OdGiMetafile in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiMetafile_swigregister(OdGiMetafile)

def OdGiMetafile_cast(*args) -> "OdSmartPtr< OdGiMetafile >":
    return _ODA_Kernel_Py3.OdGiMetafile_cast(*args)

def OdGiMetafile_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiMetafile_desc(*args)

def OdGiMetafile_createObject(*args) -> "OdSmartPtr< OdGiMetafile >":
    return _ODA_Kernel_Py3.OdGiMetafile_createObject(*args)

class OdGiLocalDrawableDesc(OdGiDrawableDesc, OdGiPathNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _pPlaceToRestore = property(_ODA_Kernel_Py3.OdGiLocalDrawableDesc__pPlaceToRestore_get, _ODA_Kernel_Py3.OdGiLocalDrawableDesc__pPlaceToRestore_set)
    _nSelectionMarker = property(_ODA_Kernel_Py3.OdGiLocalDrawableDesc__nSelectionMarker_get, _ODA_Kernel_Py3.OdGiLocalDrawableDesc__nSelectionMarker_set)
    _xModelToWorld = property(_ODA_Kernel_Py3.OdGiLocalDrawableDesc__xModelToWorld_get, _ODA_Kernel_Py3.OdGiLocalDrawableDesc__xModelToWorld_set)
    _pxModelToWorld = property(_ODA_Kernel_Py3.OdGiLocalDrawableDesc__pxModelToWorld_get, _ODA_Kernel_Py3.OdGiLocalDrawableDesc__pxModelToWorld_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiLocalDrawableDesc_swiginit(self, _ODA_Kernel_Py3.new_OdGiLocalDrawableDesc(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiLocalDrawableDesc

    def parent(self, *args) -> "OdGiPathNode const *":
        return _ODA_Kernel_Py3.OdGiLocalDrawableDesc_parent(self, *args)

    def persistentDrawableId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiLocalDrawableDesc_persistentDrawableId(self, *args)

    def transientDrawable(self, *args) -> "OdGiDrawable const *":
        return _ODA_Kernel_Py3.OdGiLocalDrawableDesc_transientDrawable(self, *args)

    def selectionMarker(self, *args) -> "OdGsMarker":
        return _ODA_Kernel_Py3.OdGiLocalDrawableDesc_selectionMarker(self, *args)

    def modelToWorld(self, *args) -> "OdGeMatrix3d const *":
        return _ODA_Kernel_Py3.OdGiLocalDrawableDesc_modelToWorld(self, *args)

    def setModelToWorld(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiLocalDrawableDesc_setModelToWorld(self, *args)

# Register OdGiLocalDrawableDesc in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiLocalDrawableDesc_swigregister(OdGiLocalDrawableDesc)

class OdGiHlrResults(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiHlrResults >":
        return _ODA_Kernel_Py3.OdGiHlrResults_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiHlrResults_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiHlrResults_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiHlrResults_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiHlrResults >":
        return _ODA_Kernel_Py3.OdGiHlrResults_createObject(*args)

    def next(self, *args) -> "OdGiHlrResults::Data const *":
        return _ODA_Kernel_Py3.OdGiHlrResults_next(self, *args)

    def start(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHlrResults_start(self, *args)

    def currentDrawablePath(self, *args) -> "OdDbStubPtrArray":
        return _ODA_Kernel_Py3.OdGiHlrResults_currentDrawablePath(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiHlrResults

# Register OdGiHlrResults in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiHlrResults_swigregister(OdGiHlrResults)

def OdGiHlrResults_cast(*args) -> "OdSmartPtr< OdGiHlrResults >":
    return _ODA_Kernel_Py3.OdGiHlrResults_cast(*args)

def OdGiHlrResults_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiHlrResults_desc(*args)

def OdGiHlrResults_createObject(*args) -> "OdSmartPtr< OdGiHlrResults >":
    return _ODA_Kernel_Py3.OdGiHlrResults_createObject(*args)

class Traits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    plotStyle = property(_ODA_Kernel_Py3.Traits_plotStyle_get, _ODA_Kernel_Py3.Traits_plotStyle_set)
    selMarker = property(_ODA_Kernel_Py3.Traits_selMarker_get, _ODA_Kernel_Py3.Traits_selMarker_set)
    color = property(_ODA_Kernel_Py3.Traits_color_get, _ODA_Kernel_Py3.Traits_color_set)
    obscuredColor = property(_ODA_Kernel_Py3.Traits_obscuredColor_get, _ODA_Kernel_Py3.Traits_obscuredColor_set)
    lineWeight = property(_ODA_Kernel_Py3.Traits_lineWeight_get, _ODA_Kernel_Py3.Traits_lineWeight_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.Traits_swiginit(self, _ODA_Kernel_Py3.new_Traits(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_Traits

# Register Traits in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.Traits_swigregister(Traits)

class OdGiHlrResults_Data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pTraits = property(_ODA_Kernel_Py3.OdGiHlrResults_Data_pTraits_get, _ODA_Kernel_Py3.OdGiHlrResults_Data_pTraits_set)
    visible = property(_ODA_Kernel_Py3.OdGiHlrResults_Data_visible_get, _ODA_Kernel_Py3.OdGiHlrResults_Data_visible_set)
    hidden = property(_ODA_Kernel_Py3.OdGiHlrResults_Data_hidden_get, _ODA_Kernel_Py3.OdGiHlrResults_Data_hidden_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiHlrResults_Data_swiginit(self, _ODA_Kernel_Py3.new_OdGiHlrResults_Data(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiHlrResults_Data

# Register OdGiHlrResults_Data in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiHlrResults_Data_swigregister(OdGiHlrResults_Data)

class OdGiHLRContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getObscuredColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHLRContext_getObscuredColor(self, *args)

    def beginHiddenOutput(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHLRContext_beginHiddenOutput(self, *args)

    def endHiddenOutput(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHLRContext_endHiddenOutput(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiHLRContext_swiginit(self, _ODA_Kernel_Py3.new_OdGiHLRContext(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiHLRContext

# Register OdGiHLRContext in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiHLRContext_swigregister(OdGiHLRContext)

class OdGiHLRemover(OdGiConveyorNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiHLRemover >":
        return _ODA_Kernel_Py3.OdGiHLRemover_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiHLRemover_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiHLRemover_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiHLRemover_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiHLRemover >":
        return _ODA_Kernel_Py3.OdGiHLRemover_createObject(*args)

    def setDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHLRemover_setDeviation(self, *args)

    def setDrawContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHLRemover_setDrawContext(self, *args)

    def process(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHLRemover_process(self, *args)

    def enable(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHLRemover_enable(self, *args)

    def enabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiHLRemover_enabled(self, *args)

    def invertZ(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHLRemover_invertZ(self, *args)

    def zInverted(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiHLRemover_zInverted(self, *args)

    def hlrResults(self, *args) -> "OdGiHlrResultsPtr":
        return _ODA_Kernel_Py3.OdGiHLRemover_hlrResults(self, *args)

    def freeResults(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHLRemover_freeResults(self, *args)

    def keepHidden(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHLRemover_keepHidden(self, *args)

    def hiddenKept(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiHLRemover_hiddenKept(self, *args)

    def currentDrawablePath(self, *args) -> "OdDbStubPtrArray":
        return _ODA_Kernel_Py3.OdGiHLRemover_currentDrawablePath(self, *args)

    def setCurrentDrawablePath(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHLRemover_setCurrentDrawablePath(self, *args)

    def setHLRemoverContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiHLRemover_setHLRemoverContext(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiHLRemover

# Register OdGiHLRemover in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiHLRemover_swigregister(OdGiHLRemover)

def OdGiHLRemover_cast(*args) -> "OdSmartPtr< OdGiHLRemover >":
    return _ODA_Kernel_Py3.OdGiHLRemover_cast(*args)

def OdGiHLRemover_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiHLRemover_desc(*args)

def OdGiHLRemover_createObject(*args) -> "OdSmartPtr< OdGiHLRemover >":
    return _ODA_Kernel_Py3.OdGiHLRemover_createObject(*args)

class OdGiGeometryRecorderPlayer(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiGeometryRecorderPlayer >":
        return _ODA_Kernel_Py3.OdGiGeometryRecorderPlayer_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiGeometryRecorderPlayer_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiGeometryRecorderPlayer_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiGeometryRecorderPlayer_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiGeometryRecorderPlayer >":
        return _ODA_Kernel_Py3.OdGiGeometryRecorderPlayer_createObject(*args)

    def recorderGeometry(self, *args) -> "OdGiConveyorGeometry &":
        return _ODA_Kernel_Py3.OdGiGeometryRecorderPlayer_recorderGeometry(self, *args)

    def play(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometryRecorderPlayer_play(self, *args)

    def rewind(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiGeometryRecorderPlayer_rewind(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiGeometryRecorderPlayer

# Register OdGiGeometryRecorderPlayer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiGeometryRecorderPlayer_swigregister(OdGiGeometryRecorderPlayer)

def OdGiGeometryRecorderPlayer_cast(*args) -> "OdSmartPtr< OdGiGeometryRecorderPlayer >":
    return _ODA_Kernel_Py3.OdGiGeometryRecorderPlayer_cast(*args)

def OdGiGeometryRecorderPlayer_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiGeometryRecorderPlayer_desc(*args)

def OdGiGeometryRecorderPlayer_createObject(*args) -> "OdSmartPtr< OdGiGeometryRecorderPlayer >":
    return _ODA_Kernel_Py3.OdGiGeometryRecorderPlayer_createObject(*args)

class OdGiFastExtCalcViewportDrawImpl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

# Register OdGiFastExtCalcViewportDrawImpl in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiFastExtCalcViewportDrawImpl_swigregister(OdGiFastExtCalcViewportDrawImpl)

class OdGiFastExtCalc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def resetExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_resetExtents(self, *args)

    def getExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_getExtents(self, *args)

    def setDrawInvisible(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_setDrawInvisible(self, *args)

    def isDrawInvisible(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_isDrawInvisible(self, *args)

    def setDrawInvisibleNested(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_setDrawInvisibleNested(self, *args)

    def isDrawInvisibleNested(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_isDrawInvisibleNested(self, *args)

    def resetFirstDrawFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_resetFirstDrawFlag(self, *args)

    def setViewportDrawEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_setViewportDrawEnabled(self, *args)

    def isViewportDrawEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_isViewportDrawEnabled(self, *args)

    def getWorldDraw(self, *args) -> "OdGiWorldDraw *":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_getWorldDraw(self, *args)

    def getViewportDraw(self, *args) -> "OdGiViewportDraw *":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_getViewportDraw(self, *args)

    def getWorldGeometry(self, *args) -> "OdGiWorldGeometry *":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_getWorldGeometry(self, *args)

    def getViewportGeometry(self, *args) -> "OdGiViewportGeometry *":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_getViewportGeometry(self, *args)

    def regenAbort(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_regenAbort(self, *args)

    def deviation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_deviation(self, *args)

    def regenType(self, *args) -> "OdGiRegenType":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_regenType(self, *args)

    def circle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_circle(self, *args)

    def circularArc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_circularArc(self, *args)

    def polyline(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_polyline(self, *args)

    def polygon(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_polygon(self, *args)

    def pline(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_pline(self, *args)

    def shape(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_shape(self, *args)

    def text(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_text(self, *args)

    def xline(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_xline(self, *args)

    def ray(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_ray(self, *args)

    def nurbs(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_nurbs(self, *args)

    def ellipArc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_ellipArc(self, *args)

    def mesh(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_mesh(self, *args)

    def shell(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_shell(self, *args)

    def worldLine(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_worldLine(self, *args)

    def image(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_image(self, *args)

    def edge(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_edge(self, *args)

    def polypoint(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_polypoint(self, *args)

    def polyPolygon(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_polyPolygon(self, *args)

    def rowOfDots(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_rowOfDots(self, *args)

    def pointCloud(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_pointCloud(self, *args)

    def setExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_setExtents(self, *args)

    def pushClipBoundary(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_pushClipBoundary(self, *args)

    def popClipBoundary(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_popClipBoundary(self, *args)

    def pushModelTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_pushModelTransform(self, *args)

    def popModelTransform(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_popModelTransform(self, *args)

    def draw(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiFastExtCalc_draw(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiFastExtCalc

# Register OdGiFastExtCalc in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiFastExtCalc_swigregister(OdGiFastExtCalc)

class OdGiFaceEdgeDataTraitsSaverBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiFaceEdgeDataTraitsSaverBase

# Register OdGiFaceEdgeDataTraitsSaverBase in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiFaceEdgeDataTraitsSaverBase_swigregister(OdGiFaceEdgeDataTraitsSaverBase)

class OdGiFaceDataTraitsSaver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiFaceDataTraitsSaver_swiginit(self, _ODA_Kernel_Py3.new_OdGiFaceDataTraitsSaver(*args))

    def onExit(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFaceDataTraitsSaver_onExit(self, *args)

    def needExit(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFaceDataTraitsSaver_needExit(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiFaceDataTraitsSaver

    def setFaceTraits(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFaceDataTraitsSaver_setFaceTraits(self, *args)

    def hasData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFaceDataTraitsSaver_hasData(self, *args)

# Register OdGiFaceDataTraitsSaver in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiFaceDataTraitsSaver_swigregister(OdGiFaceDataTraitsSaver)

class OdGiEdgeDataTraitsSaver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiEdgeDataTraitsSaver_swiginit(self, _ODA_Kernel_Py3.new_OdGiEdgeDataTraitsSaver(*args))

    def onExit(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiEdgeDataTraitsSaver_onExit(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiEdgeDataTraitsSaver

    def setEdgeTraits(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiEdgeDataTraitsSaver_setEdgeTraits(self, *args)

    def hasData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiEdgeDataTraitsSaver_hasData(self, *args)

# Register OdGiEdgeDataTraitsSaver in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiEdgeDataTraitsSaver_swigregister(OdGiEdgeDataTraitsSaver)

class OdGiFaceEdgeDataTraitsSaver(OdGiFaceDataTraitsSaver, OdGiEdgeDataTraitsSaver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiFaceEdgeDataTraitsSaver_swiginit(self, _ODA_Kernel_Py3.new_OdGiFaceEdgeDataTraitsSaver(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiFaceEdgeDataTraitsSaver

    def hasData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiFaceEdgeDataTraitsSaver_hasData(self, *args)

# Register OdGiFaceEdgeDataTraitsSaver in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiFaceEdgeDataTraitsSaver_swigregister(OdGiFaceEdgeDataTraitsSaver)

class OdGiExtentsSpaceObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getID(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdGiExtentsSpaceObject_getID(self, *args)

    def setID(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtentsSpaceObject_setID(self, *args)

    def isInExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiExtentsSpaceObject_isInExtents(self, *args)

    def isEqual(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiExtentsSpaceObject_isEqual(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiExtentsSpaceObject

# Register OdGiExtentsSpaceObject in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiExtentsSpaceObject_swigregister(OdGiExtentsSpaceObject)

class OdGiExtents3dSpacePoint(OdGiExtentsSpaceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_pt = property(_ODA_Kernel_Py3.OdGiExtents3dSpacePoint_m_pt_get, _ODA_Kernel_Py3.OdGiExtents3dSpacePoint_m_pt_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiExtents3dSpacePoint_swiginit(self, _ODA_Kernel_Py3.new_OdGiExtents3dSpacePoint(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiExtents3dSpacePoint

    def addEdge(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtents3dSpacePoint_addEdge(self, *args)

    def addInvisible(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtents3dSpacePoint_addInvisible(self, *args)

    def removeInvisible(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtents3dSpacePoint_removeInvisible(self, *args)

    def isInExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiExtents3dSpacePoint_isInExtents(self, *args)

    def isEqual(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiExtents3dSpacePoint_isEqual(self, *args)

    def getPower(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdGiExtents3dSpacePoint_getPower(self, *args)

    def getEdges(self, *args) -> "std::set< OdUInt64 > const *":
        return _ODA_Kernel_Py3.OdGiExtents3dSpacePoint_getEdges(self, *args)

    def getInvisilbeEdges(self, *args) -> "std::set< OdUInt64 > const *":
        return _ODA_Kernel_Py3.OdGiExtents3dSpacePoint_getInvisilbeEdges(self, *args)

    def setVisited(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtents3dSpacePoint_setVisited(self, *args)

    def isVisited(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiExtents3dSpacePoint_isVisited(self, *args)

# Register OdGiExtents3dSpacePoint in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiExtents3dSpacePoint_swigregister(OdGiExtents3dSpacePoint)

class OdGiExtents3dSpaceEdge(OdGiExtentsSpaceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_iVert1 = property(_ODA_Kernel_Py3.OdGiExtents3dSpaceEdge_m_iVert1_get, _ODA_Kernel_Py3.OdGiExtents3dSpaceEdge_m_iVert1_set)
    m_iVert2 = property(_ODA_Kernel_Py3.OdGiExtents3dSpaceEdge_m_iVert2_get, _ODA_Kernel_Py3.OdGiExtents3dSpaceEdge_m_iVert2_set)
    m_bVisited = property(_ODA_Kernel_Py3.OdGiExtents3dSpaceEdge_m_bVisited_get, _ODA_Kernel_Py3.OdGiExtents3dSpaceEdge_m_bVisited_set)
    m_bIsVisible = property(_ODA_Kernel_Py3.OdGiExtents3dSpaceEdge_m_bIsVisible_get, _ODA_Kernel_Py3.OdGiExtents3dSpaceEdge_m_bIsVisible_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiExtents3dSpaceEdge_swiginit(self, _ODA_Kernel_Py3.new_OdGiExtents3dSpaceEdge(*args))

    def setVisited(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtents3dSpaceEdge_setVisited(self, *args)

    def isVisited(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiExtents3dSpaceEdge_isVisited(self, *args)

    def getSecondVertex(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdGiExtents3dSpaceEdge_getSecondVertex(self, *args)

    def isInExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiExtents3dSpaceEdge_isInExtents(self, *args)

    def isEqual(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiExtents3dSpaceEdge_isEqual(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiExtents3dSpaceEdge

# Register OdGiExtents3dSpaceEdge in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiExtents3dSpaceEdge_swigregister(OdGiExtents3dSpaceEdge)

class OdGiExtents3dSpaceChainPolyline(OdGiExtentsSpaceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiExtents3dSpaceChainPolyline_swiginit(self, _ODA_Kernel_Py3.new_OdGiExtents3dSpaceChainPolyline(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiExtents3dSpaceChainPolyline

    def addVertex(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtents3dSpaceChainPolyline_addVertex(self, *args)

    def getNumberOfVertices(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdGiExtents3dSpaceChainPolyline_getNumberOfVertices(self, *args)

    def getNumberOfVertices_closed(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdGiExtents3dSpaceChainPolyline_getNumberOfVertices_closed(self, *args)

    def getPoints(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtents3dSpaceChainPolyline_getPoints(self, *args)

    def getPoints_closed(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiExtents3dSpaceChainPolyline_getPoints_closed(self, *args)

    def isInExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiExtents3dSpaceChainPolyline_isInExtents(self, *args)

    def isEqual(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiExtents3dSpaceChainPolyline_isEqual(self, *args)

# Register OdGiExtents3dSpaceChainPolyline in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiExtents3dSpaceChainPolyline_swigregister(OdGiExtents3dSpaceChainPolyline)

class OdGiExtents3dSpaceUtils(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiExtents3dSpaceUtils_swiginit(self, _ODA_Kernel_Py3.new_OdGiExtents3dSpaceUtils(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiExtents3dSpaceUtils

# Register OdGiExtents3dSpaceUtils in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiExtents3dSpaceUtils_swigregister(OdGiExtents3dSpaceUtils)

class OdGiDrawablePESelectionReactor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kNotImplemented = _ODA_Kernel_Py3.OdGiDrawablePESelectionReactor_kNotImplemented
    kContinue = _ODA_Kernel_Py3.OdGiDrawablePESelectionReactor_kContinue
    kBreak = _ODA_Kernel_Py3.OdGiDrawablePESelectionReactor_kBreak

    def selected(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiDrawablePESelectionReactor_selected(self, *args)

    def hasOutOfSelection(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdGiDrawablePESelectionReactor_hasOutOfSelection(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiDrawablePESelectionReactor_swiginit(self, _ODA_Kernel_Py3.new_OdGiDrawablePESelectionReactor(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDrawablePESelectionReactor

# Register OdGiDrawablePESelectionReactor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDrawablePESelectionReactor_swigregister(OdGiDrawablePESelectionReactor)

class OdGiDrawableSelectPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiDrawableSelectPE >":
        return _ODA_Kernel_Py3.OdGiDrawableSelectPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiDrawableSelectPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiDrawableSelectPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiDrawableSelectPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiDrawableSelectPE >":
        return _ODA_Kernel_Py3.OdGiDrawableSelectPE_createObject(*args)

    def canSelect(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiDrawableSelectPE_canSelect(self, *args)

    def select(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiDrawableSelectPE_select(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiDrawableSelectPE

# Register OdGiDrawableSelectPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiDrawableSelectPE_swigregister(OdGiDrawableSelectPE)

def OdGiDrawableSelectPE_cast(*args) -> "OdSmartPtr< OdGiDrawableSelectPE >":
    return _ODA_Kernel_Py3.OdGiDrawableSelectPE_cast(*args)

def OdGiDrawableSelectPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiDrawableSelectPE_desc(*args)

def OdGiDrawableSelectPE_createObject(*args) -> "OdSmartPtr< OdGiDrawableSelectPE >":
    return _ODA_Kernel_Py3.OdGiDrawableSelectPE_createObject(*args)

class OdGiCollideProc(OdGiConveyorNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiCollideProc >":
        return _ODA_Kernel_Py3.OdGiCollideProc_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiCollideProc_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiCollideProc_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiCollideProc_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiCollideProc >":
        return _ODA_Kernel_Py3.OdGiCollideProc_createObject(*args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiCollideProc_set(self, *args)

    def setDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiCollideProc_setDeviation(self, *args)

    def setDrawContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiCollideProc_setDrawContext(self, *args)

    def setLinePrimitivesChecking(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiCollideProc_setLinePrimitivesChecking(self, *args)

    def linePrimitivesChecking(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiCollideProc_linePrimitivesChecking(self, *args)
    kAnalyticNone = _ODA_Kernel_Py3.OdGiCollideProc_kAnalyticNone
    kAnaliticCircles = _ODA_Kernel_Py3.OdGiCollideProc_kAnaliticCircles
    kAnalyticComplexCurves = _ODA_Kernel_Py3.OdGiCollideProc_kAnalyticComplexCurves

    def enableAnalyticMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiCollideProc_enableAnalyticMode(self, *args)

    def analitycMode(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdGiCollideProc_analitycMode(self, *args)
    kPhaseGatherInputData = _ODA_Kernel_Py3.OdGiCollideProc_kPhaseGatherInputData
    kPhaseDetectIntersections = _ODA_Kernel_Py3.OdGiCollideProc_kPhaseDetectIntersections

    def setNoFilter(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiCollideProc_setNoFilter(self, *args)

    def noFilter(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiCollideProc_noFilter(self, *args)

    def setProcessingPhase(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiCollideProc_setProcessingPhase(self, *args)

    def processingPhase(self, *args) -> "OdGiCollideProc::ProcessingPhase":
        return _ODA_Kernel_Py3.OdGiCollideProc_processingPhase(self, *args)

    def extents(self, *args) -> "OdGeExtents3d const &":
        return _ODA_Kernel_Py3.OdGiCollideProc_extents(self, *args)

    def setInputDrawables(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiCollideProc_setInputDrawables(self, *args)

    def setCheckWithDrawables(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiCollideProc_setCheckWithDrawables(self, *args)

    def processTriangles(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiCollideProc_processTriangles(self, *args)

    def setExtentsExtension(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiCollideProc_setExtentsExtension(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiCollideProc

# Register OdGiCollideProc in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiCollideProc_swigregister(OdGiCollideProc)

def OdGiCollideProc_cast(*args) -> "OdSmartPtr< OdGiCollideProc >":
    return _ODA_Kernel_Py3.OdGiCollideProc_cast(*args)

def OdGiCollideProc_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiCollideProc_desc(*args)

def OdGiCollideProc_createObject(*args) -> "OdSmartPtr< OdGiCollideProc >":
    return _ODA_Kernel_Py3.OdGiCollideProc_createObject(*args)

class OdGiBrep(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdGiBrep >":
        return _ODA_Kernel_Py3.OdGiBrep_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiBrep_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdGiBrep_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdGiBrep_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdGiBrep >":
        return _ODA_Kernel_Py3.OdGiBrep_createObject(*args)

    def brep(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBrep_brep(self, *args)

    def worldDraw(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiBrep_worldDraw(self, *args)

    def database(self, *args) -> "OdDbBaseDatabase *":
        return _ODA_Kernel_Py3.OdGiBrep_database(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiBrep

# Register OdGiBrep in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiBrep_swigregister(OdGiBrep)

def OdGiBrep_cast(*args) -> "OdSmartPtr< OdGiBrep >":
    return _ODA_Kernel_Py3.OdGiBrep_cast(*args)

def OdGiBrep_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdGiBrep_desc(*args)

def OdGiBrep_createObject(*args) -> "OdSmartPtr< OdGiBrep >":
    return _ODA_Kernel_Py3.OdGiBrep_createObject(*args)

class OdGiAnnoScaleSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGiAnnoScaleSet_swiginit(self, _ODA_Kernel_Py3.new_OdGiAnnoScaleSet(*args))

    def __lt__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGiAnnoScaleSet___lt__(self, *args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiAnnoScaleSet_set(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGiAnnoScaleSet_clear(self, *args)

    def annoScaleIds(self, *args) -> "OdDbStubPtrArray const &":
        return _ODA_Kernel_Py3.OdGiAnnoScaleSet_annoScaleIds(self, *args)

    def defaultId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdGiAnnoScaleSet_defaultId(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGiAnnoScaleSet

# Register OdGiAnnoScaleSet in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGiAnnoScaleSet_swigregister(OdGiAnnoScaleSet)


def moveIntoValidInter(*args) -> "void":
    return _ODA_Kernel_Py3.moveIntoValidInter(*args)

def makeInterValid(*args) -> "void":
    return _ODA_Kernel_Py3.makeInterValid(*args)
class int3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.int3_swiginit(self, _ODA_Kernel_Py3.new_int3(*args))

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.int3_set(self, *args)
    val = property(_ODA_Kernel_Py3.int3_val_get, _ODA_Kernel_Py3.int3_val_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_int3

# Register int3 in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.int3_swigregister(int3)

class OdGeTr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeTr_swiginit(self, _ODA_Kernel_Py3.new_OdGeTr(*args))

    def replaceNb(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeTr_replaceNb(self, *args)
    tr = property(_ODA_Kernel_Py3.OdGeTr_tr_get, _ODA_Kernel_Py3.OdGeTr_tr_set)
    nb = property(_ODA_Kernel_Py3.OdGeTr_nb_get, _ODA_Kernel_Py3.OdGeTr_nb_set)
    tagFace = property(_ODA_Kernel_Py3.OdGeTr_tagFace_get, _ODA_Kernel_Py3.OdGeTr_tagFace_set)
    tagEdge = property(_ODA_Kernel_Py3.OdGeTr_tagEdge_get, _ODA_Kernel_Py3.OdGeTr_tagEdge_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeTr

# Register OdGeTr in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeTr_swigregister(OdGeTr)

class OdGeMesh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getExtents(self, *args) -> "OdGeExtents3d":
        return _ODA_Kernel_Py3.OdGeMesh_getExtents(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeMesh

    def distanceTo(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeMesh_distanceTo(self, *args)

    def checkMeshMismatch(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeMesh_checkMeshMismatch(self, *args)
    m_aVx = property(_ODA_Kernel_Py3.OdGeMesh_m_aVx_get, _ODA_Kernel_Py3.OdGeMesh_m_aVx_set)
    m_aVxTag = property(_ODA_Kernel_Py3.OdGeMesh_m_aVxTag_get, _ODA_Kernel_Py3.OdGeMesh_m_aVxTag_set)
    m_tagMesh = property(_ODA_Kernel_Py3.OdGeMesh_m_tagMesh_get, _ODA_Kernel_Py3.OdGeMesh_m_tagMesh_set)

# Register OdGeMesh in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeMesh_swigregister(OdGeMesh)

class OdGeTrMesh(OdGeMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def distanceTo(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeTrMesh_distanceTo(self, *args)

    def checkMeshMismatch(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeTrMesh_checkMeshMismatch(self, *args)

    def trNormal(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeTrMesh_trNormal(self, *args)

    def vxNormal(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeTrMesh_vxNormal(self, *args)

    def walkNextTr(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeTrMesh_walkNextTr(self, *args)

    def walkAroundVertex(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeTrMesh_walkAroundVertex(self, *args)

    def getCoEdge(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeTrMesh_getCoEdge(self, *args)

    def fillNbLinks(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeTrMesh_fillNbLinks(self, *args)

    def removeDegenerateTriangles(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeTrMesh_removeDegenerateTriangles(self, *args)

    def append(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeTrMesh_append(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeTrMesh_clear(self, *args)

    def fillVxToTr(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeTrMesh_fillVxToTr(self, *args)

    def removeUnusedVertices(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeTrMesh_removeUnusedVertices(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeTrMesh_swiginit(self, _ODA_Kernel_Py3.new_OdGeTrMesh(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeTrMesh

# Register OdGeTrMesh in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeTrMesh_swigregister(OdGeTrMesh)

class VertexPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.VertexPair_swiginit(self, _ODA_Kernel_Py3.new_VertexPair(*args))

    def isPresent(self, *args) -> "bool":
        return _ODA_Kernel_Py3.VertexPair_isPresent(self, *args)

    def equal(self, *args) -> "bool":
        return _ODA_Kernel_Py3.VertexPair_equal(self, *args)
    m_cost = property(_ODA_Kernel_Py3.VertexPair_m_cost_get, _ODA_Kernel_Py3.VertexPair_m_cost_set)
    m_edge = property(_ODA_Kernel_Py3.VertexPair_m_edge_get, _ODA_Kernel_Py3.VertexPair_m_edge_set)
    m_newVx = property(_ODA_Kernel_Py3.VertexPair_m_newVx_get, _ODA_Kernel_Py3.VertexPair_m_newVx_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_VertexPair

# Register VertexPair in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.VertexPair_swigregister(VertexPair)

class VertexPairKey(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_cost = property(_ODA_Kernel_Py3.VertexPairKey_m_cost_get, _ODA_Kernel_Py3.VertexPairKey_m_cost_set)
    m_ind = property(_ODA_Kernel_Py3.VertexPairKey_m_ind_get, _ODA_Kernel_Py3.VertexPairKey_m_ind_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.VertexPairKey_swiginit(self, _ODA_Kernel_Py3.new_VertexPairKey(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_VertexPairKey

# Register VertexPairKey in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.VertexPairKey_swigregister(VertexPairKey)

class GeSimplificationBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_GeSimplificationBase

# Register GeSimplificationBase in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.GeSimplificationBase_swigregister(GeSimplificationBase)

class GeTrngSimplification(GeSimplificationBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.GeTrngSimplification_swiginit(self, _ODA_Kernel_Py3.new_GeTrngSimplification(*args))

    def reset(self, *args) -> "void":
        return _ODA_Kernel_Py3.GeTrngSimplification_reset(self, *args)

    def algo(self, *args) -> "void":
        return _ODA_Kernel_Py3.GeTrngSimplification_algo(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_GeTrngSimplification

# Register GeTrngSimplification in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.GeTrngSimplification_swigregister(GeTrngSimplification)


def triangulateProfile(*args) -> "bool":
    return _ODA_Kernel_Py3.triangulateProfile(*args)

def compareMeshes(*args) -> "bool":
    return _ODA_Kernel_Py3.compareMeshes(*args)
class OdGeTorus(OdGeSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeTorus_swiginit(self, _ODA_Kernel_Py3.new_OdGeTorus(*args))

    def majorRadius(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeTorus_majorRadius(self, *args)

    def minorRadius(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeTorus_minorRadius(self, *args)

    def getAnglesInU(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeTorus_getAnglesInU(self, *args)

    def getAnglesInV(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeTorus_getAnglesInV(self, *args)

    def center(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeTorus_center(self, *args)

    def axisOfSymmetry(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeTorus_axisOfSymmetry(self, *args)

    def refAxis(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeTorus_refAxis(self, *args)

    def isOuterNormal(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeTorus_isOuterNormal(self, *args)

    def setMajorRadius(self, *args) -> "OdGeTorus &":
        return _ODA_Kernel_Py3.OdGeTorus_setMajorRadius(self, *args)

    def setMinorRadius(self, *args) -> "OdGeTorus &":
        return _ODA_Kernel_Py3.OdGeTorus_setMinorRadius(self, *args)

    def setAnglesInU(self, *args) -> "OdGeTorus &":
        return _ODA_Kernel_Py3.OdGeTorus_setAnglesInU(self, *args)

    def setAnglesInV(self, *args) -> "OdGeTorus &":
        return _ODA_Kernel_Py3.OdGeTorus_setAnglesInV(self, *args)

    def set(self, *args) -> "OdGeTorus &":
        return _ODA_Kernel_Py3.OdGeTorus_set(self, *args)

    def intersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeTorus_intersectWith(self, *args)

    def isLemon(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeTorus_isLemon(self, *args)

    def isApple(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeTorus_isApple(self, *args)

    def isVortex(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeTorus_isVortex(self, *args)

    def isDoughnut(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeTorus_isDoughnut(self, *args)

    def isDegenerate(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeTorus_isDegenerate(self, *args)

    def isHollow(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeTorus_isHollow(self, *args)

    def isReverseV(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeTorus_isReverseV(self, *args)

    def setReverseV(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeTorus_setReverseV(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeTorus

# Register OdGeTorus in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeTorus_swigregister(OdGeTorus)

class OdGeSurfSurfInt(OdGeEntity3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeSurfSurfInt_swiginit(self, _ODA_Kernel_Py3.new_OdGeSurfSurfInt(*args))

    def surface1(self, *args) -> "OdGeSurface const *":
        return _ODA_Kernel_Py3.OdGeSurfSurfInt_surface1(self, *args)

    def surface2(self, *args) -> "OdGeSurface const *":
        return _ODA_Kernel_Py3.OdGeSurfSurfInt_surface2(self, *args)

    def tolerance(self, *args) -> "OdGeTol":
        return _ODA_Kernel_Py3.OdGeSurfSurfInt_tolerance(self, *args)

    def numResults(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeSurfSurfInt_numResults(self, *args)

    def numIntPoints(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeSurfSurfInt_numIntPoints(self, *args)

    def intCurve(self, *args) -> "OdGeCurve3d *":
        return _ODA_Kernel_Py3.OdGeSurfSurfInt_intCurve(self, *args)

    def intParamCurve(self, *args) -> "OdGeCurve2d *":
        return _ODA_Kernel_Py3.OdGeSurfSurfInt_intParamCurve(self, *args)

    def intPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeSurfSurfInt_intPoint(self, *args)

    def getIntPointParams(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeSurfSurfInt_getIntPointParams(self, *args)

    def getIntConfigs(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeSurfSurfInt_getIntConfigs(self, *args)

    def numIntCurves(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeSurfSurfInt_numIntCurves(self, *args)

    def getDimension(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeSurfSurfInt_getDimension(self, *args)

    def getType(self, *args) -> "OdGe::ssiType":
        return _ODA_Kernel_Py3.OdGeSurfSurfInt_getType(self, *args)

    def haveOverlap(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeSurfSurfInt_haveOverlap(self, *args)

    def set(self, *args) -> "OdGeSurfSurfInt &":
        return _ODA_Kernel_Py3.OdGeSurfSurfInt_set(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeSurfSurfInt

# Register OdGeSurfSurfInt in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeSurfSurfInt_swigregister(OdGeSurfSurfInt)

class OdGeSurfaceCurve2dTo3d(OdGeCurve3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kCurveCopy = _ODA_Kernel_Py3.OdGeSurfaceCurve2dTo3d_kCurveCopy
    kCurveOwn = _ODA_Kernel_Py3.OdGeSurfaceCurve2dTo3d_kCurveOwn
    kCurveReference = _ODA_Kernel_Py3.OdGeSurfaceCurve2dTo3d_kCurveReference
    kSurfaceCopy = _ODA_Kernel_Py3.OdGeSurfaceCurve2dTo3d_kSurfaceCopy
    kSurfaceOwn = _ODA_Kernel_Py3.OdGeSurfaceCurve2dTo3d_kSurfaceOwn
    kSurfaceReference = _ODA_Kernel_Py3.OdGeSurfaceCurve2dTo3d_kSurfaceReference
    kCopy = _ODA_Kernel_Py3.OdGeSurfaceCurve2dTo3d_kCopy
    kOwn = _ODA_Kernel_Py3.OdGeSurfaceCurve2dTo3d_kOwn
    kReference = _ODA_Kernel_Py3.OdGeSurfaceCurve2dTo3d_kReference
    kCurveMask = _ODA_Kernel_Py3.OdGeSurfaceCurve2dTo3d_kCurveMask
    kSurfaceMask = _ODA_Kernel_Py3.OdGeSurfaceCurve2dTo3d_kSurfaceMask

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeSurfaceCurve2dTo3d_swiginit(self, _ODA_Kernel_Py3.new_OdGeSurfaceCurve2dTo3d(*args))

    def curve(self, *args) -> "OdGeCurve2d const *":
        return _ODA_Kernel_Py3.OdGeSurfaceCurve2dTo3d_curve(self, *args)

    def surface(self, *args) -> "OdGeSurface const *":
        return _ODA_Kernel_Py3.OdGeSurfaceCurve2dTo3d_surface(self, *args)

    def getGeomExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeSurfaceCurve2dTo3d_getGeomExtents(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeSurfaceCurve2dTo3d

# Register OdGeSurfaceCurve2dTo3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeSurfaceCurve2dTo3d_swigregister(OdGeSurfaceCurve2dTo3d)

class OdGeSpunSurf(OdGeSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeSpunSurf_swiginit(self, _ODA_Kernel_Py3.new_OdGeSpunSurf(*args))

    def getProfile(self, *args) -> "OdGeCurve3d const *":
        return _ODA_Kernel_Py3.OdGeSpunSurf_getProfile(self, *args)

    def getBasePoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeSpunSurf_getBasePoint(self, *args)

    def getAxis(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeSpunSurf_getAxis(self, *args)

    def getRef(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeSpunSurf_getRef(self, *args)

    def setAngles(self, *args) -> "OdGeSpunSurf &":
        return _ODA_Kernel_Py3.OdGeSpunSurf_setAngles(self, *args)

    def setRef(self, *args) -> "OdGeSpunSurf &":
        return _ODA_Kernel_Py3.OdGeSpunSurf_setRef(self, *args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeSpunSurf_set(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeSpunSurf

# Register OdGeSpunSurf in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeSpunSurf_swigregister(OdGeSpunSurf)

class OdGeShell(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeShell_swiginit(self, _ODA_Kernel_Py3.new_OdGeShell(*args))
    vertices = property(_ODA_Kernel_Py3.OdGeShell_vertices_get, _ODA_Kernel_Py3.OdGeShell_vertices_set)
    faces = property(_ODA_Kernel_Py3.OdGeShell_faces_get, _ODA_Kernel_Py3.OdGeShell_faces_set)
    edgeColors = property(_ODA_Kernel_Py3.OdGeShell_edgeColors_get, _ODA_Kernel_Py3.OdGeShell_edgeColors_set)
    edgeTrueColors = property(_ODA_Kernel_Py3.OdGeShell_edgeTrueColors_get, _ODA_Kernel_Py3.OdGeShell_edgeTrueColors_set)
    edgeLayers = property(_ODA_Kernel_Py3.OdGeShell_edgeLayers_get, _ODA_Kernel_Py3.OdGeShell_edgeLayers_set)
    edgeLinetypes = property(_ODA_Kernel_Py3.OdGeShell_edgeLinetypes_get, _ODA_Kernel_Py3.OdGeShell_edgeLinetypes_set)
    edgeSelectionMarkers = property(_ODA_Kernel_Py3.OdGeShell_edgeSelectionMarkers_get, _ODA_Kernel_Py3.OdGeShell_edgeSelectionMarkers_set)
    edgeVisibilities = property(_ODA_Kernel_Py3.OdGeShell_edgeVisibilities_get, _ODA_Kernel_Py3.OdGeShell_edgeVisibilities_set)
    faceColors = property(_ODA_Kernel_Py3.OdGeShell_faceColors_get, _ODA_Kernel_Py3.OdGeShell_faceColors_set)
    faceTrueColors = property(_ODA_Kernel_Py3.OdGeShell_faceTrueColors_get, _ODA_Kernel_Py3.OdGeShell_faceTrueColors_set)
    faceLayers = property(_ODA_Kernel_Py3.OdGeShell_faceLayers_get, _ODA_Kernel_Py3.OdGeShell_faceLayers_set)
    faceNormals = property(_ODA_Kernel_Py3.OdGeShell_faceNormals_get, _ODA_Kernel_Py3.OdGeShell_faceNormals_set)
    faceSelectionMarkers = property(_ODA_Kernel_Py3.OdGeShell_faceSelectionMarkers_get, _ODA_Kernel_Py3.OdGeShell_faceSelectionMarkers_set)
    faceVisibilities = property(_ODA_Kernel_Py3.OdGeShell_faceVisibilities_get, _ODA_Kernel_Py3.OdGeShell_faceVisibilities_set)
    faceMaterials = property(_ODA_Kernel_Py3.OdGeShell_faceMaterials_get, _ODA_Kernel_Py3.OdGeShell_faceMaterials_set)
    faceMappers = property(_ODA_Kernel_Py3.OdGeShell_faceMappers_get, _ODA_Kernel_Py3.OdGeShell_faceMappers_set)
    faceTransparencies = property(_ODA_Kernel_Py3.OdGeShell_faceTransparencies_get, _ODA_Kernel_Py3.OdGeShell_faceTransparencies_set)
    textureCoords = property(_ODA_Kernel_Py3.OdGeShell_textureCoords_get, _ODA_Kernel_Py3.OdGeShell_textureCoords_set)
    vertexNormals = property(_ODA_Kernel_Py3.OdGeShell_vertexNormals_get, _ODA_Kernel_Py3.OdGeShell_vertexNormals_set)

    def addVertex(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeShell_addVertex(self, *args)

    def endFace(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeShell_endFace(self, *args)

    def startFace(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeShell_startFace(self, *args)

    def addFaceVertex(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeShell_addFaceVertex(self, *args)

    def draw(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeShell_draw(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeShell

# Register OdGeShell in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeShell_swigregister(OdGeShell)

class OdGeScale2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeScale2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeScale2d(*args))

    def setToProduct(self, *args) -> "OdGeScale2d &":
        return _ODA_Kernel_Py3.OdGeScale2d_setToProduct(self, *args)

    def __imul__(self, *args) -> "OdGeScale2d &":
        return _ODA_Kernel_Py3.OdGeScale2d___imul__(self, *args)

    def invert(self, *args) -> "OdGeScale2d &":
        return _ODA_Kernel_Py3.OdGeScale2d_invert(self, *args)

    def isProportional(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeScale2d_isProportional(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeScale2d___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeScale2d___ne__(self, *args)

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeScale2d_isEqualTo(self, *args)

    def getMatrix(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeScale2d_getMatrix(self, *args)

    def extractScale(self, *args) -> "OdGeScale2d &":
        return _ODA_Kernel_Py3.OdGeScale2d_extractScale(self, *args)

    def removeScale(self, *args) -> "OdGeScale2d &":
        return _ODA_Kernel_Py3.OdGeScale2d_removeScale(self, *args)
    sx = property(_ODA_Kernel_Py3.OdGeScale2d_sx_get, _ODA_Kernel_Py3.OdGeScale2d_sx_set)
    sy = property(_ODA_Kernel_Py3.OdGeScale2d_sy_get, _ODA_Kernel_Py3.OdGeScale2d_sy_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeScale2d

# Register OdGeScale2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeScale2d_swigregister(OdGeScale2d)

class OdGeRuled(OdGeSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeRuled_swiginit(self, _ODA_Kernel_Py3.new_OdGeRuled(*args))

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeRuled_set(self, *args)

    def getProfileCurve(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdGeRuled_getProfileCurve(self, *args)

    def getPoint(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdGeRuled_getPoint(self, *args)

    def setEnvelope(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeRuled_setEnvelope(self, *args)

    def getEnvelope(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeRuled_getEnvelope(self, *args)

    def hasFirstProfilePoint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeRuled_hasFirstProfilePoint(self, *args)

    def hasSecondProfilePoint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeRuled_hasSecondProfilePoint(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeRuled

# Register OdGeRuled in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeRuled_swigregister(OdGeRuled)

class OdGeRevolvedSurface(OdGeSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeRevolvedSurface_swiginit(self, _ODA_Kernel_Py3.new_OdGeRevolvedSurface(*args))

    def getProfile(self, *args) -> "OdGeCurve3d const &":
        return _ODA_Kernel_Py3.OdGeRevolvedSurface_getProfile(self, *args)

    def getBasePoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeRevolvedSurface_getBasePoint(self, *args)

    def getAxis(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeRevolvedSurface_getAxis(self, *args)

    def getRef(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeRevolvedSurface_getRef(self, *args)

    def getAngles(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeRevolvedSurface_getAngles(self, *args)

    def setAngles(self, *args) -> "OdGeRevolvedSurface &":
        return _ODA_Kernel_Py3.OdGeRevolvedSurface_setAngles(self, *args)

    def setRef(self, *args) -> "OdGeRevolvedSurface &":
        return _ODA_Kernel_Py3.OdGeRevolvedSurface_setRef(self, *args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeRevolvedSurface_set(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeRevolvedSurface

# Register OdGeRevolvedSurface in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeRevolvedSurface_swigregister(OdGeRevolvedSurface)

class OdGeRay2d(OdGeLinearEnt2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeRay2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeRay2d(*args))

    def set(self, *args) -> "OdGeRay2d &":
        return _ODA_Kernel_Py3.OdGeRay2d_set(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeRay2d

# Register OdGeRay2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeRay2d_swigregister(OdGeRay2d)

class OdGePosition3d(OdGePointEnt3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGePosition3d_swiginit(self, _ODA_Kernel_Py3.new_OdGePosition3d(*args))

    def set(self, *args) -> "OdGePosition3d &":
        return _ODA_Kernel_Py3.OdGePosition3d_set(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGePosition3d

# Register OdGePosition3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGePosition3d_swigregister(OdGePosition3d)

class OdGePosition2d(OdGePointEnt2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGePosition2d_swiginit(self, _ODA_Kernel_Py3.new_OdGePosition2d(*args))

    def set(self, *args) -> "OdGePosition2d &":
        return _ODA_Kernel_Py3.OdGePosition2d_set(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGePosition2d

# Register OdGePosition2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGePosition2d_swigregister(OdGePosition2d)

class OdGePolyline2d(OdGeSplineEnt2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGePolyline2d_swiginit(self, _ODA_Kernel_Py3.new_OdGePolyline2d(*args))

    def numFitPoints(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGePolyline2d_numFitPoints(self, *args)

    def fitPointAt(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGePolyline2d_fitPointAt(self, *args)

    def setFitPointAt(self, *args) -> "OdGeSplineEnt2d &":
        return _ODA_Kernel_Py3.OdGePolyline2d_setFitPointAt(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGePolyline2d

# Register OdGePolyline2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGePolyline2d_swigregister(OdGePolyline2d)

class OdGePointOnSurface(OdGePointEnt3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGePointOnSurface_swiginit(self, _ODA_Kernel_Py3.new_OdGePointOnSurface(*args))

    def surface(self, *args) -> "OdGeSurface const *":
        return _ODA_Kernel_Py3.OdGePointOnSurface_surface(self, *args)

    def parameter(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGePointOnSurface_parameter(self, *args)

    def point(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGePointOnSurface_point(self, *args)

    def normal(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGePointOnSurface_normal(self, *args)

    def uDeriv(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGePointOnSurface_uDeriv(self, *args)

    def vDeriv(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGePointOnSurface_vDeriv(self, *args)

    def mixedPartial(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGePointOnSurface_mixedPartial(self, *args)

    def tangentVector(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGePointOnSurface_tangentVector(self, *args)

    def inverseTangentVector(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.OdGePointOnSurface_inverseTangentVector(self, *args)

    def setSurface(self, *args) -> "OdGePointOnSurface &":
        return _ODA_Kernel_Py3.OdGePointOnSurface_setSurface(self, *args)

    def setParameter(self, *args) -> "OdGePointOnSurface &":
        return _ODA_Kernel_Py3.OdGePointOnSurface_setParameter(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGePointOnSurface

# Register OdGePointOnSurface in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGePointOnSurface_swigregister(OdGePointOnSurface)

class OdGePointOnCurve3d(OdGePointEnt3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGePointOnCurve3d_swiginit(self, _ODA_Kernel_Py3.new_OdGePointOnCurve3d(*args))

    def curve(self, *args) -> "OdGeCurve3d const *":
        return _ODA_Kernel_Py3.OdGePointOnCurve3d_curve(self, *args)

    def parameter(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGePointOnCurve3d_parameter(self, *args)

    def point(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGePointOnCurve3d_point(self, *args)

    def deriv(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGePointOnCurve3d_deriv(self, *args)

    def isSingular(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePointOnCurve3d_isSingular(self, *args)

    def curvature(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGePointOnCurve3d_curvature(self, *args)

    def setCurve(self, *args) -> "OdGePointOnCurve3d &":
        return _ODA_Kernel_Py3.OdGePointOnCurve3d_setCurve(self, *args)

    def setParameter(self, *args) -> "OdGePointOnCurve3d &":
        return _ODA_Kernel_Py3.OdGePointOnCurve3d_setParameter(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGePointOnCurve3d

# Register OdGePointOnCurve3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGePointOnCurve3d_swigregister(OdGePointOnCurve3d)

class OdGeOffsetSurface(OdGeSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeOffsetSurface_swiginit(self, _ODA_Kernel_Py3.new_OdGeOffsetSurface(*args))

    def isPlane(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeOffsetSurface_isPlane(self, *args)

    def isBoundedPlane(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeOffsetSurface_isBoundedPlane(self, *args)

    def isSphere(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeOffsetSurface_isSphere(self, *args)

    def isCylinder(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeOffsetSurface_isCylinder(self, *args)

    def isCone(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeOffsetSurface_isCone(self, *args)

    def isEllipCylinder(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeOffsetSurface_isEllipCylinder(self, *args)

    def isEllipCone(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeOffsetSurface_isEllipCone(self, *args)

    def isTorus(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeOffsetSurface_isTorus(self, *args)

    def getSurface(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeOffsetSurface_getSurface(self, *args)

    def getConstructionSurface(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeOffsetSurface_getConstructionSurface(self, *args)

    def offsetDist(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeOffsetSurface_offsetDist(self, *args)

    def set(self, *args) -> "OdGeOffsetSurface &":
        return _ODA_Kernel_Py3.OdGeOffsetSurface_set(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeOffsetSurface

# Register OdGeOffsetSurface in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeOffsetSurface_swigregister(OdGeOffsetSurface)

class OdGeOffsetCurve3d(OdGeCurve3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeOffsetCurve3d_swiginit(self, _ODA_Kernel_Py3.new_OdGeOffsetCurve3d(*args))

    def curve(self, *args) -> "OdGeCurve3d const *":
        return _ODA_Kernel_Py3.OdGeOffsetCurve3d_curve(self, *args)

    def normal(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeOffsetCurve3d_normal(self, *args)

    def offsetDistance(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeOffsetCurve3d_offsetDistance(self, *args)

    def paramDirection(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeOffsetCurve3d_paramDirection(self, *args)

    def transformation(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdGeOffsetCurve3d_transformation(self, *args)

    def setCurve(self, *args) -> "OdGeOffsetCurve3d &":
        return _ODA_Kernel_Py3.OdGeOffsetCurve3d_setCurve(self, *args)

    def setNormal(self, *args) -> "OdGeOffsetCurve3d &":
        return _ODA_Kernel_Py3.OdGeOffsetCurve3d_setNormal(self, *args)

    def setOffsetDistance(self, *args) -> "OdGeOffsetCurve3d &":
        return _ODA_Kernel_Py3.OdGeOffsetCurve3d_setOffsetDistance(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeOffsetCurve3d

# Register OdGeOffsetCurve3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeOffsetCurve3d_swigregister(OdGeOffsetCurve3d)

class OdGeOffsetCurve2d(OdGeCurve2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeOffsetCurve2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeOffsetCurve2d(*args))

    def curve(self, *args) -> "OdGeCurve2d const *":
        return _ODA_Kernel_Py3.OdGeOffsetCurve2d_curve(self, *args)

    def offsetDistance(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeOffsetCurve2d_offsetDistance(self, *args)

    def paramDirection(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeOffsetCurve2d_paramDirection(self, *args)

    def transformation(self, *args) -> "OdGeMatrix2d":
        return _ODA_Kernel_Py3.OdGeOffsetCurve2d_transformation(self, *args)

    def setCurve(self, *args) -> "OdGeOffsetCurve2d &":
        return _ODA_Kernel_Py3.OdGeOffsetCurve2d_setCurve(self, *args)

    def setOffsetDistance(self, *args) -> "OdGeOffsetCurve2d &":
        return _ODA_Kernel_Py3.OdGeOffsetCurve2d_setOffsetDistance(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeOffsetCurve2d

# Register OdGeOffsetCurve2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeOffsetCurve2d_swigregister(OdGeOffsetCurve2d)

class OdGeNurbCurve3d(OdGeSplineEnt3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeNurbCurve3d_swiginit(self, _ODA_Kernel_Py3.new_OdGeNurbCurve3d(*args))

    def numFitPoints(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_numFitPoints(self, *args)

    def getFitKnotParameterization(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_getFitKnotParameterization(self, *args)

    def getFitPointAt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_getFitPointAt(self, *args)

    def getFitTolerance(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_getFitTolerance(self, *args)

    def getFitTangents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_getFitTangents(self, *args)

    def getFitData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_getFitData(self, *args)

    def getDefinitionData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_getDefinitionData(self, *args)

    def numWeights(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_numWeights(self, *args)

    def weightAt(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_weightAt(self, *args)

    def setWeightAt(self, *args) -> "OdGeNurbCurve3d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_setWeightAt(self, *args)

    def evalMode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_evalMode(self, *args)

    def getParamsOfC1Discontinuity(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_getParamsOfC1Discontinuity(self, *args)

    def getParamsOfG1Discontinuity(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_getParamsOfG1Discontinuity(self, *args)

    def setFitPointAt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_setFitPointAt(self, *args)

    def addFitPointAt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_addFitPointAt(self, *args)

    def deleteFitPointAt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_deleteFitPointAt(self, *args)

    def addControlPointAt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_addControlPointAt(self, *args)

    def deleteControlPointAt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_deleteControlPointAt(self, *args)

    def setFitKnotParameterization(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_setFitKnotParameterization(self, *args)

    def setFitTolerance(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_setFitTolerance(self, *args)

    def setFitTangents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_setFitTangents(self, *args)

    def setFitData(self, *args) -> "OdGeNurbCurve3d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_setFitData(self, *args)

    def purgeFitData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_purgeFitData(self, *args)

    def addKnot(self, *args) -> "OdGeNurbCurve3d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_addKnot(self, *args)

    def insertKnot(self, *args) -> "OdGeNurbCurve3d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_insertKnot(self, *args)

    def setEvalMode(self, *args) -> "OdGeNurbCurve3d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_setEvalMode(self, *args)

    def joinWith(self, *args) -> "OdGeNurbCurve3d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_joinWith(self, *args)

    def hardTrimByParams(self, *args) -> "OdGeNurbCurve3d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_hardTrimByParams(self, *args)

    def makeRational(self, *args) -> "OdGeNurbCurve3d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_makeRational(self, *args)

    def makeClosed(self, *args) -> "OdGeNurbCurve3d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_makeClosed(self, *args)

    def makePeriodic(self, *args) -> "OdGeNurbCurve3d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_makePeriodic(self, *args)

    def makeNonPeriodic(self, *args) -> "OdGeNurbCurve3d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_makeNonPeriodic(self, *args)

    def makeOpen(self, *args) -> "OdGeNurbCurve3d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_makeOpen(self, *args)

    def elevateDegree(self, *args) -> "OdGeNurbCurve3d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_elevateDegree(self, *args)

    def evalPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_evalPoint(self, *args)

    def evalPointDivider(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_evalPointDivider(self, *args)

    def set(self, *args) -> "OdGeNurbCurve3d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_set(self, *args)

    def buildFitData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_buildFitData(self, *args)

    @staticmethod
    def convertFrom(*args) -> "OdGeNurbCurve3d *":
        return _ODA_Kernel_Py3.OdGeNurbCurve3d_convertFrom(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeNurbCurve3d

# Register OdGeNurbCurve3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeNurbCurve3d_swigregister(OdGeNurbCurve3d)

def OdGeNurbCurve3d_convertFrom(*args) -> "OdGeNurbCurve3d *":
    return _ODA_Kernel_Py3.OdGeNurbCurve3d_convertFrom(*args)

class OdGeNurbCurve2d(OdGeSplineEnt2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeNurbCurve2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeNurbCurve2d(*args))

    def numFitPoints(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_numFitPoints(self, *args)

    def getFitKnotParameterization(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_getFitKnotParameterization(self, *args)

    def getFitPointAt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_getFitPointAt(self, *args)

    def getFitTolerance(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_getFitTolerance(self, *args)

    def getFitTangents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_getFitTangents(self, *args)

    def getFitData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_getFitData(self, *args)

    def getDefinitionData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_getDefinitionData(self, *args)

    def numWeights(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_numWeights(self, *args)

    def weightAt(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_weightAt(self, *args)

    def setWeightAt(self, *args) -> "OdGeNurbCurve2d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_setWeightAt(self, *args)

    def evalMode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_evalMode(self, *args)

    def getParamsOfC1Discontinuity(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_getParamsOfC1Discontinuity(self, *args)

    def getParamsOfG1Discontinuity(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_getParamsOfG1Discontinuity(self, *args)

    def setFitPointAt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_setFitPointAt(self, *args)

    def addFitPointAt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_addFitPointAt(self, *args)

    def deleteFitPointAt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_deleteFitPointAt(self, *args)

    def addControlPointAt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_addControlPointAt(self, *args)

    def deleteControlPointAt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_deleteControlPointAt(self, *args)

    def setFitKnotParameterization(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_setFitKnotParameterization(self, *args)

    def setFitTolerance(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_setFitTolerance(self, *args)

    def setFitTangents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_setFitTangents(self, *args)

    def setFitData(self, *args) -> "OdGeNurbCurve2d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_setFitData(self, *args)

    def purgeFitData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_purgeFitData(self, *args)

    def addKnot(self, *args) -> "OdGeNurbCurve2d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_addKnot(self, *args)

    def insertKnot(self, *args) -> "OdGeNurbCurve2d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_insertKnot(self, *args)

    def setEvalMode(self, *args) -> "OdGeNurbCurve2d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_setEvalMode(self, *args)

    def joinWith(self, *args) -> "OdGeNurbCurve2d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_joinWith(self, *args)

    def hardTrimByParams(self, *args) -> "OdGeNurbCurve2d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_hardTrimByParams(self, *args)

    def makeRational(self, *args) -> "OdGeNurbCurve2d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_makeRational(self, *args)

    def makeClosed(self, *args) -> "OdGeNurbCurve2d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_makeClosed(self, *args)

    def makePeriodic(self, *args) -> "OdGeNurbCurve2d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_makePeriodic(self, *args)

    def makeNonPeriodic(self, *args) -> "OdGeNurbCurve2d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_makeNonPeriodic(self, *args)

    def makeOpen(self, *args) -> "OdGeNurbCurve2d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_makeOpen(self, *args)

    def elevateDegree(self, *args) -> "OdGeNurbCurve2d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_elevateDegree(self, *args)

    def intersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_intersectWith(self, *args)

    def set(self, *args) -> "OdGeNurbCurve2d &":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_set(self, *args)

    @staticmethod
    def convertFrom(*args) -> "OdGeNurbCurve2d *":
        return _ODA_Kernel_Py3.OdGeNurbCurve2d_convertFrom(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeNurbCurve2d

# Register OdGeNurbCurve2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeNurbCurve2d_swigregister(OdGeNurbCurve2d)

def OdGeNurbCurve2d_convertFrom(*args) -> "OdGeNurbCurve2d *":
    return _ODA_Kernel_Py3.OdGeNurbCurve2d_convertFrom(*args)

class OdGeLineSeg3d(OdGeLinearEnt3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeLineSeg3d_swiginit(self, _ODA_Kernel_Py3.new_OdGeLineSeg3d(*args))

    def getBisector(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeLineSeg3d_getBisector(self, *args)

    def baryComb(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeLineSeg3d_baryComb(self, *args)

    def startPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeLineSeg3d_startPoint(self, *args)

    def endPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeLineSeg3d_endPoint(self, *args)

    def set(self, *args) -> "OdGeLineSeg3d &":
        return _ODA_Kernel_Py3.OdGeLineSeg3d_set(self, *args)

    def getDistanceToVector(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeLineSeg3d_getDistanceToVector(self, *args)

    def joinWith(self, *args) -> "OdGeLineSeg3d &":
        return _ODA_Kernel_Py3.OdGeLineSeg3d_joinWith(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeLineSeg3d

# Register OdGeLineSeg3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeLineSeg3d_swigregister(OdGeLineSeg3d)

class OdGeLine3d(OdGeLinearEnt3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeLine3d_swiginit(self, _ODA_Kernel_Py3.new_OdGeLine3d(*args))

    def set(self, *args) -> "OdGeLine3d &":
        return _ODA_Kernel_Py3.OdGeLine3d_set(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeLine3d

# Register OdGeLine3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeLine3d_swigregister(OdGeLine3d)
OdGeLine3d.kXAxis = _ODA_Kernel_Py3.cvar.OdGeLine3d_kXAxis
OdGeLine3d.kYAxis = _ODA_Kernel_Py3.cvar.OdGeLine3d_kYAxis
OdGeLine3d.kZAxis = _ODA_Kernel_Py3.cvar.OdGeLine3d_kZAxis

class OdGeLine2d(OdGeLinearEnt2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeLine2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeLine2d(*args))

    def set(self, *args) -> "OdGeLine2d &":
        return _ODA_Kernel_Py3.OdGeLine2d_set(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeLine2d

# Register OdGeLine2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeLine2d_swigregister(OdGeLine2d)
OdGeLine2d.kXAxis = _ODA_Kernel_Py3.cvar.OdGeLine2d_kXAxis
OdGeLine2d.kYAxis = _ODA_Kernel_Py3.cvar.OdGeLine2d_kYAxis

class OdGeExternalSurface(OdGeSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeExternalSurface_swiginit(self, _ODA_Kernel_Py3.new_OdGeExternalSurface(*args))

    def getExternalSurface(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeExternalSurface_getExternalSurface(self, *args)

    def externalSurfaceKind(self, *args) -> "OdGe::ExternalEntityKind":
        return _ODA_Kernel_Py3.OdGeExternalSurface_externalSurfaceKind(self, *args)

    def isPlane(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalSurface_isPlane(self, *args)

    def isSphere(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalSurface_isSphere(self, *args)

    def isCylinder(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalSurface_isCylinder(self, *args)

    def isCone(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalSurface_isCone(self, *args)

    def isEllipCylinder(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalSurface_isEllipCylinder(self, *args)

    def isEllipCone(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalSurface_isEllipCone(self, *args)

    def isTorus(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalSurface_isTorus(self, *args)

    def isNurbSurface(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalSurface_isNurbSurface(self, *args)

    def isDefined(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalSurface_isDefined(self, *args)

    def isNativeSurface(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalSurface_isNativeSurface(self, *args)

    def set(self, *args) -> "OdGeExternalSurface &":
        return _ODA_Kernel_Py3.OdGeExternalSurface_set(self, *args)

    def isOwnerOfSurface(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalSurface_isOwnerOfSurface(self, *args)

    def setToOwnSurface(self, *args) -> "OdGeExternalSurface &":
        return _ODA_Kernel_Py3.OdGeExternalSurface_setToOwnSurface(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeExternalSurface

# Register OdGeExternalSurface in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeExternalSurface_swigregister(OdGeExternalSurface)

class OdGeExternalCurve3d(OdGeCurve3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeExternalCurve3d_swiginit(self, _ODA_Kernel_Py3.new_OdGeExternalCurve3d(*args))

    def isLine(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalCurve3d_isLine(self, *args)

    def isRay(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalCurve3d_isRay(self, *args)

    def isLineSeg(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalCurve3d_isLineSeg(self, *args)

    def isCircArc(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalCurve3d_isCircArc(self, *args)

    def isEllipArc(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalCurve3d_isEllipArc(self, *args)

    def isNurbCurve(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalCurve3d_isNurbCurve(self, *args)

    def isDefined(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalCurve3d_isDefined(self, *args)

    def isNativeCurve(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalCurve3d_isNativeCurve(self, *args)

    def getExternalCurve(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeExternalCurve3d_getExternalCurve(self, *args)

    def externalCurveKind(self, *args) -> "OdGe::ExternalEntityKind":
        return _ODA_Kernel_Py3.OdGeExternalCurve3d_externalCurveKind(self, *args)

    def set(self, *args) -> "OdGeExternalCurve3d &":
        return _ODA_Kernel_Py3.OdGeExternalCurve3d_set(self, *args)

    def isOwnerOfCurve(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalCurve3d_isOwnerOfCurve(self, *args)

    def setToOwnCurve(self, *args) -> "OdGeExternalCurve3d &":
        return _ODA_Kernel_Py3.OdGeExternalCurve3d_setToOwnCurve(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeExternalCurve3d

# Register OdGeExternalCurve3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeExternalCurve3d_swigregister(OdGeExternalCurve3d)

class OdGeExternalCurve2d(OdGeCurve2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeExternalCurve2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeExternalCurve2d(*args))

    def isNurbCurve(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalCurve2d_isNurbCurve(self, *args)

    def isDefined(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalCurve2d_isDefined(self, *args)

    def getExternalCurve(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeExternalCurve2d_getExternalCurve(self, *args)

    def externalCurveKind(self, *args) -> "OdGe::ExternalEntityKind":
        return _ODA_Kernel_Py3.OdGeExternalCurve2d_externalCurveKind(self, *args)

    def set(self, *args) -> "OdGeExternalCurve2d &":
        return _ODA_Kernel_Py3.OdGeExternalCurve2d_set(self, *args)

    def isOwnerOfCurve(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalCurve2d_isOwnerOfCurve(self, *args)

    def setToOwnCurve(self, *args) -> "OdGeExternalCurve2d &":
        return _ODA_Kernel_Py3.OdGeExternalCurve2d_setToOwnCurve(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeExternalCurve2d

# Register OdGeExternalCurve2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeExternalCurve2d_swigregister(OdGeExternalCurve2d)

class OdGeExternalBoundedSurface(OdGeSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeExternalBoundedSurface_swiginit(self, _ODA_Kernel_Py3.new_OdGeExternalBoundedSurface(*args))

    def externalSurfaceKind(self, *args) -> "OdGe::ExternalEntityKind":
        return _ODA_Kernel_Py3.OdGeExternalBoundedSurface_externalSurfaceKind(self, *args)

    def isDefined(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalBoundedSurface_isDefined(self, *args)

    def getExternalSurface(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeExternalBoundedSurface_getExternalSurface(self, *args)

    def getBaseSurface(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeExternalBoundedSurface_getBaseSurface(self, *args)

    def isPlane(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalBoundedSurface_isPlane(self, *args)

    def isSphere(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalBoundedSurface_isSphere(self, *args)

    def isCylinder(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalBoundedSurface_isCylinder(self, *args)

    def isCone(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalBoundedSurface_isCone(self, *args)

    def isEllipCylinder(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalBoundedSurface_isEllipCylinder(self, *args)

    def isEllipCone(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalBoundedSurface_isEllipCone(self, *args)

    def isTorus(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalBoundedSurface_isTorus(self, *args)

    def isNurbs(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalBoundedSurface_isNurbs(self, *args)

    def isExternalSurface(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalBoundedSurface_isExternalSurface(self, *args)

    def numContours(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeExternalBoundedSurface_numContours(self, *args)

    def set(self, *args) -> "OdGeExternalBoundedSurface &":
        return _ODA_Kernel_Py3.OdGeExternalBoundedSurface_set(self, *args)

    def isOwnerOfSurface(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeExternalBoundedSurface_isOwnerOfSurface(self, *args)

    def setToOwnSurface(self, *args) -> "OdGeExternalBoundedSurface &":
        return _ODA_Kernel_Py3.OdGeExternalBoundedSurface_setToOwnSurface(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeExternalBoundedSurface

# Register OdGeExternalBoundedSurface in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeExternalBoundedSurface_swigregister(OdGeExternalBoundedSurface)


def calcLoopIncludeOrder(*args) -> "OdResult":
    return _ODA_Kernel_Py3.calcLoopIncludeOrder(*args)
class OdGeEllipArc3d(OdGeCurve3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeEllipArc3d_swiginit(self, _ODA_Kernel_Py3.new_OdGeEllipArc3d(*args))

    def closestPointToPlane(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_closestPointToPlane(self, *args)

    def intersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_intersectWith(self, *args)

    def projIntersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_projIntersectWith(self, *args)

    def getPlane(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_getPlane(self, *args)

    def isCircular(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_isCircular(self, *args)

    def isInside(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_isInside(self, *args)

    def center(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_center(self, *args)

    def minorRadius(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_minorRadius(self, *args)

    def majorRadius(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_majorRadius(self, *args)

    def minorAxis(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_minorAxis(self, *args)

    def majorAxis(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_majorAxis(self, *args)

    def normal(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_normal(self, *args)

    def startAng(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_startAng(self, *args)

    def endAng(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_endAng(self, *args)

    def startPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_startPoint(self, *args)

    def endPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_endPoint(self, *args)

    def setCenter(self, *args) -> "OdGeEllipArc3d &":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_setCenter(self, *args)

    def setMinorRadius(self, *args) -> "OdGeEllipArc3d &":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_setMinorRadius(self, *args)

    def setMajorRadius(self, *args) -> "OdGeEllipArc3d &":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_setMajorRadius(self, *args)

    def setAxes(self, *args) -> "OdGeEllipArc3d &":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_setAxes(self, *args)

    def setAngles(self, *args) -> "OdGeEllipArc3d &":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_setAngles(self, *args)

    def set(self, *args) -> "OdGeEllipArc3d &":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_set(self, *args)

    def orthogonalizeAxes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_orthogonalizeAxes(self, *args)

    def tangentAt(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_tangentAt(self, *args)

    def getGeomExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_getGeomExtents(self, *args)

    def inverseTangent(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_inverseTangent(self, *args)

    def inverseTangentPlane(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_inverseTangentPlane(self, *args)

    def joinWith(self, *args) -> "OdGeEllipArc3d &":
        return _ODA_Kernel_Py3.OdGeEllipArc3d_joinWith(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeEllipArc3d

# Register OdGeEllipArc3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeEllipArc3d_swigregister(OdGeEllipArc3d)

class OdGeEllipArc2d(OdGeCurve2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeEllipArc2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeEllipArc2d(*args))

    def intersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_intersectWith(self, *args)

    def isCircular(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_isCircular(self, *args)

    def isInside(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_isInside(self, *args)

    def center(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_center(self, *args)

    def minorRadius(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_minorRadius(self, *args)

    def majorRadius(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_majorRadius(self, *args)

    def minorAxis(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_minorAxis(self, *args)

    def majorAxis(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_majorAxis(self, *args)

    def startAng(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_startAng(self, *args)

    def endAng(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_endAng(self, *args)

    def startPoint(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_startPoint(self, *args)

    def endPoint(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_endPoint(self, *args)

    def isClockWise(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_isClockWise(self, *args)

    def setCenter(self, *args) -> "OdGeEllipArc2d &":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_setCenter(self, *args)

    def setMinorRadius(self, *args) -> "OdGeEllipArc2d &":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_setMinorRadius(self, *args)

    def setMajorRadius(self, *args) -> "OdGeEllipArc2d &":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_setMajorRadius(self, *args)

    def setAxes(self, *args) -> "OdGeEllipArc2d &":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_setAxes(self, *args)

    def setAngles(self, *args) -> "OdGeEllipArc2d &":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_setAngles(self, *args)

    def set(self, *args) -> "OdGeEllipArc2d &":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_set(self, *args)

    def getGeomExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_getGeomExtents(self, *args)

    def inverseTangent(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeEllipArc2d_inverseTangent(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeEllipArc2d

# Register OdGeEllipArc2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeEllipArc2d_swigregister(OdGeEllipArc2d)


def calibrateAngle(*args) -> "double":
    return _ODA_Kernel_Py3.calibrateAngle(*args)

def angleFromParam(*args) -> "double":
    return _ODA_Kernel_Py3.angleFromParam(*args)

def paramFromAngle(*args) -> "double":
    return _ODA_Kernel_Py3.paramFromAngle(*args)
class OdGeCylinder(OdGeSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeCylinder_swiginit(self, _ODA_Kernel_Py3.new_OdGeCylinder(*args))

    def radius(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCylinder_radius(self, *args)

    def origin(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeCylinder_origin(self, *args)

    def getAngles(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCylinder_getAngles(self, *args)

    def getHeight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCylinder_getHeight(self, *args)

    def heightAt(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCylinder_heightAt(self, *args)

    def axisOfSymmetry(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeCylinder_axisOfSymmetry(self, *args)

    def refAxis(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeCylinder_refAxis(self, *args)

    def isOuterNormal(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCylinder_isOuterNormal(self, *args)

    def isClosed(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCylinder_isClosed(self, *args)

    def setRadius(self, *args) -> "OdGeCylinder &":
        return _ODA_Kernel_Py3.OdGeCylinder_setRadius(self, *args)

    def setAngles(self, *args) -> "OdGeCylinder &":
        return _ODA_Kernel_Py3.OdGeCylinder_setAngles(self, *args)

    def setHeight(self, *args) -> "OdGeCylinder &":
        return _ODA_Kernel_Py3.OdGeCylinder_setHeight(self, *args)

    def set(self, *args) -> "OdGeCylinder &":
        return _ODA_Kernel_Py3.OdGeCylinder_set(self, *args)

    def intersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCylinder_intersectWith(self, *args)

    def setIsOuterNormal(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCylinder_setIsOuterNormal(self, *args)

    def getUParamScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCylinder_getUParamScale(self, *args)

    def setUParamScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCylinder_setUParamScale(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeCylinder

# Register OdGeCylinder in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeCylinder_swigregister(OdGeCylinder)

class OdGeCurveSurfInt(OdGeEntity3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeCurveSurfInt_swiginit(self, _ODA_Kernel_Py3.new_OdGeCurveSurfInt(*args))

    def curve(self, *args) -> "OdGeCurve3d const *":
        return _ODA_Kernel_Py3.OdGeCurveSurfInt_curve(self, *args)

    def surface(self, *args) -> "OdGeSurface const *":
        return _ODA_Kernel_Py3.OdGeCurveSurfInt_surface(self, *args)

    def tolerance(self, *args) -> "OdGeTol":
        return _ODA_Kernel_Py3.OdGeCurveSurfInt_tolerance(self, *args)

    def numResults(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeCurveSurfInt_numResults(self, *args)

    def getDimension(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeCurveSurfInt_getDimension(self, *args)

    def numIntPoints(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeCurveSurfInt_numIntPoints(self, *args)

    def intPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeCurveSurfInt_intPoint(self, *args)

    def getIntParams(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurveSurfInt_getIntParams(self, *args)

    def getPointOnCurve(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurveSurfInt_getPointOnCurve(self, *args)

    def getPointOnSurface(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurveSurfInt_getPointOnSurface(self, *args)

    def getIntConfigs(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurveSurfInt_getIntConfigs(self, *args)

    def overlapCount(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeCurveSurfInt_overlapCount(self, *args)

    def getOverlapRange(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurveSurfInt_getOverlapRange(self, *args)

    def intParamCurve(self, *args) -> "OdGeCurve2d *":
        return _ODA_Kernel_Py3.OdGeCurveSurfInt_intParamCurve(self, *args)

    def set(self, *args) -> "OdGeCurveSurfInt &":
        return _ODA_Kernel_Py3.OdGeCurveSurfInt_set(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeCurveSurfInt

# Register OdGeCurveSurfInt in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeCurveSurfInt_swigregister(OdGeCurveSurfInt)

class OdGeCurveCurveInt3d(OdGeEntity3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeCurveCurveInt3d_swiginit(self, _ODA_Kernel_Py3.new_OdGeCurveCurveInt3d(*args))

    def curve1(self, *args) -> "OdGeCurve3d const *":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_curve1(self, *args)

    def curve2(self, *args) -> "OdGeCurve3d const *":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_curve2(self, *args)

    def getIntRanges(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_getIntRanges(self, *args)

    def planeNormal(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_planeNormal(self, *args)

    def tolerance(self, *args) -> "OdGeTol":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_tolerance(self, *args)

    def numIntPoints(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_numIntPoints(self, *args)

    def intPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_intPoint(self, *args)

    def getIntParams(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_getIntParams(self, *args)

    def getPointOnCurve1(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_getPointOnCurve1(self, *args)

    def getPointOnCurve2(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_getPointOnCurve2(self, *args)

    def getIntConfigs(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_getIntConfigs(self, *args)

    def isTangential(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_isTangential(self, *args)

    def isTransversal(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_isTransversal(self, *args)

    def intPointTol(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_intPointTol(self, *args)

    def overlapCount(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_overlapCount(self, *args)

    def overlapDirection(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_overlapDirection(self, *args)

    def getOverlapRanges(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_getOverlapRanges(self, *args)

    def changeCurveOrder(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_changeCurveOrder(self, *args)

    def orderWrt1(self, *args) -> "OdGeCurveCurveInt3d &":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_orderWrt1(self, *args)

    def orderWrt2(self, *args) -> "OdGeCurveCurveInt3d &":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_orderWrt2(self, *args)

    def set(self, *args) -> "OdGeCurveCurveInt3d &":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt3d_set(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeCurveCurveInt3d

# Register OdGeCurveCurveInt3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeCurveCurveInt3d_swigregister(OdGeCurveCurveInt3d)

class OdGeCurveCurveInt2d(OdGeEntity2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeCurveCurveInt2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeCurveCurveInt2d(*args))

    def curve1(self, *args) -> "OdGeCurve2d const *":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_curve1(self, *args)

    def curve2(self, *args) -> "OdGeCurve2d const *":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_curve2(self, *args)

    def getIntRanges(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_getIntRanges(self, *args)

    def tolerance(self, *args) -> "OdGeTol":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_tolerance(self, *args)

    def numIntPoints(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_numIntPoints(self, *args)

    def intPoint(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_intPoint(self, *args)

    def getIntParams(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_getIntParams(self, *args)

    def getPointOnCurve1(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_getPointOnCurve1(self, *args)

    def getPointOnCurve2(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_getPointOnCurve2(self, *args)

    def getIntConfigs(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_getIntConfigs(self, *args)

    def isTangential(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_isTangential(self, *args)

    def isTransversal(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_isTransversal(self, *args)

    def intPointTol(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_intPointTol(self, *args)

    def overlapCount(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_overlapCount(self, *args)

    def overlapDirection(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_overlapDirection(self, *args)

    def getOverlapRanges(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_getOverlapRanges(self, *args)

    def changeCurveOrder(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_changeCurveOrder(self, *args)

    def orderWrt1(self, *args) -> "OdGeCurveCurveInt2d &":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_orderWrt1(self, *args)

    def orderWrt2(self, *args) -> "OdGeCurveCurveInt2d &":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_orderWrt2(self, *args)

    def set(self, *args) -> "OdGeCurveCurveInt2d &":
        return _ODA_Kernel_Py3.OdGeCurveCurveInt2d_set(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeCurveCurveInt2d

# Register OdGeCurveCurveInt2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeCurveCurveInt2d_swigregister(OdGeCurveCurveInt2d)

class OdGeCurveBoundary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeCurveBoundary_swiginit(self, _ODA_Kernel_Py3.new_OdGeCurveBoundary(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeCurveBoundary

    def isDegenerate(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurveBoundary_isDegenerate(self, *args)

    def numElements(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeCurveBoundary_numElements(self, *args)

    def set(self, *args) -> "OdGeCurveBoundary &":
        return _ODA_Kernel_Py3.OdGeCurveBoundary_set(self, *args)

    def isOwnerOfCurves(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCurveBoundary_isOwnerOfCurves(self, *args)

    def setToOwnCurves(self, *args) -> "OdGeCurveBoundary &":
        return _ODA_Kernel_Py3.OdGeCurveBoundary_setToOwnCurves(self, *args)

# Register OdGeCurveBoundary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeCurveBoundary_swigregister(OdGeCurveBoundary)

class OdGeCubicSplineCurve3d(OdGeSplineEnt3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeCubicSplineCurve3d_swiginit(self, _ODA_Kernel_Py3.new_OdGeCubicSplineCurve3d(*args))

    def numFitPoints(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeCubicSplineCurve3d_numFitPoints(self, *args)

    def fitPointAt(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeCubicSplineCurve3d_fitPointAt(self, *args)

    def setFitPointAt(self, *args) -> "OdGeCubicSplineCurve3d &":
        return _ODA_Kernel_Py3.OdGeCubicSplineCurve3d_setFitPointAt(self, *args)

    def firstDerivAt(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeCubicSplineCurve3d_firstDerivAt(self, *args)

    def setFirstDerivAt(self, *args) -> "OdGeCubicSplineCurve3d &":
        return _ODA_Kernel_Py3.OdGeCubicSplineCurve3d_setFirstDerivAt(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeCubicSplineCurve3d

# Register OdGeCubicSplineCurve3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeCubicSplineCurve3d_swigregister(OdGeCubicSplineCurve3d)

class OdGeCubicSplineCurve2d(OdGeSplineEnt2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeCubicSplineCurve2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeCubicSplineCurve2d(*args))

    def numFitPoints(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdGeCubicSplineCurve2d_numFitPoints(self, *args)

    def fitPointAt(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeCubicSplineCurve2d_fitPointAt(self, *args)

    def setFitPointAt(self, *args) -> "OdGeCubicSplineCurve2d &":
        return _ODA_Kernel_Py3.OdGeCubicSplineCurve2d_setFitPointAt(self, *args)

    def firstDerivAt(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.OdGeCubicSplineCurve2d_firstDerivAt(self, *args)

    def setFirstDerivAt(self, *args) -> "OdGeCubicSplineCurve2d &":
        return _ODA_Kernel_Py3.OdGeCubicSplineCurve2d_setFirstDerivAt(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeCubicSplineCurve2d

# Register OdGeCubicSplineCurve2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeCubicSplineCurve2d_swigregister(OdGeCubicSplineCurve2d)

class OdGeCone(OdGeSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeCone_swiginit(self, _ODA_Kernel_Py3.new_OdGeCone(*args))

    def baseRadius(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCone_baseRadius(self, *args)

    def baseCenter(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeCone_baseCenter(self, *args)

    def getAngles(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCone_getAngles(self, *args)

    def halfAngle(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCone_halfAngle(self, *args)

    def getHalfAngle(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCone_getHalfAngle(self, *args)

    def getHalfAngleSigned(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCone_getHalfAngleSigned(self, *args)

    def getHeight(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCone_getHeight(self, *args)

    def heightAt(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCone_heightAt(self, *args)

    def axisOfSymmetry(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeCone_axisOfSymmetry(self, *args)

    def refAxis(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeCone_refAxis(self, *args)

    def apex(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeCone_apex(self, *args)

    def isClosed(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCone_isClosed(self, *args)

    def isOuterNormal(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCone_isOuterNormal(self, *args)

    def setBaseRadius(self, *args) -> "OdGeCone &":
        return _ODA_Kernel_Py3.OdGeCone_setBaseRadius(self, *args)

    def setAngles(self, *args) -> "OdGeCone &":
        return _ODA_Kernel_Py3.OdGeCone_setAngles(self, *args)

    def setHeight(self, *args) -> "OdGeCone &":
        return _ODA_Kernel_Py3.OdGeCone_setHeight(self, *args)

    def getPoleParam(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCone_getPoleParam(self, *args)

    def set(self, *args) -> "OdGeCone &":
        return _ODA_Kernel_Py3.OdGeCone_set(self, *args)

    def intersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCone_intersectWith(self, *args)

    def getUParamScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCone_getUParamScale(self, *args)

    def setUParamScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCone_setUParamScale(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeCone

# Register OdGeCone in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeCone_swigregister(OdGeCone)

class OdGeCompositeCurve3d(OdGeCurve3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeCompositeCurve3d_swiginit(self, _ODA_Kernel_Py3.new_OdGeCompositeCurve3d(*args))

    def getCurveList(self, *args) -> "OdGeCurve3dPtrArray const &":
        return _ODA_Kernel_Py3.OdGeCompositeCurve3d_getCurveList(self, *args)

    def setCurveList(self, *args) -> "OdGeCompositeCurve3d &":
        return _ODA_Kernel_Py3.OdGeCompositeCurve3d_setCurveList(self, *args)

    def globalToLocalParam(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCompositeCurve3d_globalToLocalParam(self, *args)

    def localToGlobalParam(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCompositeCurve3d_localToGlobalParam(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeCompositeCurve3d

# Register OdGeCompositeCurve3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeCompositeCurve3d_swigregister(OdGeCompositeCurve3d)

class OdGeCompositeCurve2d(OdGeCurve2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeCompositeCurve2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeCompositeCurve2d(*args))

    def getCurveList(self, *args) -> "OdGeCurve2dPtrArray const &":
        return _ODA_Kernel_Py3.OdGeCompositeCurve2d_getCurveList(self, *args)

    def setCurveList(self, *args) -> "OdGeCompositeCurve2d &":
        return _ODA_Kernel_Py3.OdGeCompositeCurve2d_setCurveList(self, *args)

    def globalToLocalParam(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCompositeCurve2d_globalToLocalParam(self, *args)

    def localToGlobalParam(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCompositeCurve2d_localToGlobalParam(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeCompositeCurve2d

# Register OdGeCompositeCurve2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeCompositeCurve2d_swigregister(OdGeCompositeCurve2d)

class OdGeClipBoundary2d(OdGeEntity2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeClipBoundary2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeClipBoundary2d(*args))

    def set(self, *args) -> "OdGe::ClipError":
        return _ODA_Kernel_Py3.OdGeClipBoundary2d_set(self, *args)

    def clipPolygon(self, *args) -> "OdGe::ClipError":
        return _ODA_Kernel_Py3.OdGeClipBoundary2d_clipPolygon(self, *args)

    def clipPolyline(self, *args) -> "OdGe::ClipError":
        return _ODA_Kernel_Py3.OdGeClipBoundary2d_clipPolyline(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeClipBoundary2d

# Register OdGeClipBoundary2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeClipBoundary2d_swigregister(OdGeClipBoundary2d)

class OdGeCircArc2d(OdGeCurve2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeCircArc2d_swiginit(self, _ODA_Kernel_Py3.new_OdGeCircArc2d(*args))

    def intersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCircArc2d_intersectWith(self, *args)

    def tangent(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCircArc2d_tangent(self, *args)

    def isInside(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCircArc2d_isInside(self, *args)

    def center(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeCircArc2d_center(self, *args)

    def radius(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCircArc2d_radius(self, *args)

    def startAng(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCircArc2d_startAng(self, *args)

    def endAng(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCircArc2d_endAng(self, *args)

    def isClockWise(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeCircArc2d_isClockWise(self, *args)

    def refVec(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.OdGeCircArc2d_refVec(self, *args)

    def startPoint(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeCircArc2d_startPoint(self, *args)

    def endPoint(self, *args) -> "OdGePoint2d":
        return _ODA_Kernel_Py3.OdGeCircArc2d_endPoint(self, *args)

    def setCenter(self, *args) -> "OdGeCircArc2d &":
        return _ODA_Kernel_Py3.OdGeCircArc2d_setCenter(self, *args)

    def setRadius(self, *args) -> "OdGeCircArc2d &":
        return _ODA_Kernel_Py3.OdGeCircArc2d_setRadius(self, *args)

    def setAngles(self, *args) -> "OdGeCircArc2d &":
        return _ODA_Kernel_Py3.OdGeCircArc2d_setAngles(self, *args)

    def setToComplement(self, *args) -> "OdGeCircArc2d &":
        return _ODA_Kernel_Py3.OdGeCircArc2d_setToComplement(self, *args)

    def setRefVec(self, *args) -> "OdGeCircArc2d &":
        return _ODA_Kernel_Py3.OdGeCircArc2d_setRefVec(self, *args)

    def set(self, *args) -> "OdGeCircArc2d &":
        return _ODA_Kernel_Py3.OdGeCircArc2d_set(self, *args)

    def getGeomExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeCircArc2d_getGeomExtents(self, *args)

    def startAngFromXAxis(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCircArc2d_startAngFromXAxis(self, *args)

    def endAngFromXAxis(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeCircArc2d_endAngFromXAxis(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeCircArc2d

# Register OdGeCircArc2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeCircArc2d_swigregister(OdGeCircArc2d)

class OdGeBoundedPlane(OdGePlanarEnt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeBoundedPlane_swiginit(self, _ODA_Kernel_Py3.new_OdGeBoundedPlane(*args))

    def intersectWith(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeBoundedPlane_intersectWith(self, *args)

    def set(self, *args) -> "OdGeBoundedPlane &":
        return _ODA_Kernel_Py3.OdGeBoundedPlane_set(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeBoundedPlane

# Register OdGeBoundedPlane in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeBoundedPlane_swigregister(OdGeBoundedPlane)

class OdGeAugPolyline3d(OdGePolyline3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeAugPolyline3d_swiginit(self, _ODA_Kernel_Py3.new_OdGeAugPolyline3d(*args))

    def getPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdGeAugPolyline3d_getPoint(self, *args)

    def setPoint(self, *args) -> "OdGeAugPolyline3d &":
        return _ODA_Kernel_Py3.OdGeAugPolyline3d_setPoint(self, *args)

    def getPoints(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeAugPolyline3d_getPoints(self, *args)

    def getVector(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeAugPolyline3d_getVector(self, *args)

    def setVector(self, *args) -> "OdGeAugPolyline3d &":
        return _ODA_Kernel_Py3.OdGeAugPolyline3d_setVector(self, *args)

    def getD1Vectors(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeAugPolyline3d_getD1Vectors(self, *args)

    def getD2Vector(self, *args) -> "OdGeVector3d":
        return _ODA_Kernel_Py3.OdGeAugPolyline3d_getD2Vector(self, *args)

    def setD2Vector(self, *args) -> "OdGeAugPolyline3d &":
        return _ODA_Kernel_Py3.OdGeAugPolyline3d_setD2Vector(self, *args)

    def getD2Vectors(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeAugPolyline3d_getD2Vectors(self, *args)

    def approxTol(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeAugPolyline3d_approxTol(self, *args)

    def setApproxTol(self, *args) -> "OdGeAugPolyline3d &":
        return _ODA_Kernel_Py3.OdGeAugPolyline3d_setApproxTol(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeAugPolyline3d

# Register OdGeAugPolyline3d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeAugPolyline3d_swigregister(OdGeAugPolyline3d)

class OdEmptyBaseClass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdEmptyBaseClass_swiginit(self, _ODA_Kernel_Py3.new_OdEmptyBaseClass(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEmptyBaseClass

# Register OdEmptyBaseClass in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEmptyBaseClass_swigregister(OdEmptyBaseClass)

class OdFlatMemStream(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdFlatMemStream >":
        return _ODA_Kernel_Py3.OdFlatMemStream_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdFlatMemStream_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdFlatMemStream_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdFlatMemStream_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdFlatMemStream >":
        return _ODA_Kernel_Py3.OdFlatMemStream_createObject(*args)

    @staticmethod
    def createNew(*args) -> "OdFlatMemStreamPtr":
        return _ODA_Kernel_Py3.OdFlatMemStream_createNew(*args)

    def copyDataTo(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdFlatMemStream_copyDataTo(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdFlatMemStream

# Register OdFlatMemStream in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdFlatMemStream_swigregister(OdFlatMemStream)

def OdFlatMemStream_cast(*args) -> "OdSmartPtr< OdFlatMemStream >":
    return _ODA_Kernel_Py3.OdFlatMemStream_cast(*args)

def OdFlatMemStream_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdFlatMemStream_desc(*args)

def OdFlatMemStream_createObject(*args) -> "OdSmartPtr< OdFlatMemStream >":
    return _ODA_Kernel_Py3.OdFlatMemStream_createObject(*args)

def OdFlatMemStream_createNew(*args) -> "OdFlatMemStreamPtr":
    return _ODA_Kernel_Py3.OdFlatMemStream_createNew(*args)

class OdFlatMemStreamManaged(OdFlatMemStream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdFlatMemStreamManaged

    @staticmethod
    def createNew(*args) -> "OdFlatMemStreamPtr":
        return _ODA_Kernel_Py3.OdFlatMemStreamManaged_createNew(*args)

# Register OdFlatMemStreamManaged in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdFlatMemStreamManaged_swigregister(OdFlatMemStreamManaged)

def OdFlatMemStreamManaged_createNew(*args) -> "OdFlatMemStreamPtr":
    return _ODA_Kernel_Py3.OdFlatMemStreamManaged_createNew(*args)


def OdErrorByCodeAndMessage(*args) -> "OdError":
    return _ODA_Kernel_Py3.OdErrorByCodeAndMessage(*args)

def OdErrorByCodeAndMessageFormat(*args) -> "OdError":
    return _ODA_Kernel_Py3.OdErrorByCodeAndMessageFormat(*args)
class OdError_NotThatKindOfClass(OdError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdError_NotThatKindOfClass_swiginit(self, _ODA_Kernel_Py3.new_OdError_NotThatKindOfClass(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdError_NotThatKindOfClass

    def fromClassName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdError_NotThatKindOfClass_fromClassName(self, *args)

    def toClassName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdError_NotThatKindOfClass_toClassName(self, *args)

# Register OdError_NotThatKindOfClass in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdError_NotThatKindOfClass_swigregister(OdError_NotThatKindOfClass)

class OdEdLispEngineReactor(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdEdLispEngineReactor >":
        return _ODA_Kernel_Py3.OdEdLispEngineReactor_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdLispEngineReactor_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdLispEngineReactor_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdEdLispEngineReactor_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdEdLispEngineReactor >":
        return _ODA_Kernel_Py3.OdEdLispEngineReactor_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdLispEngineReactor

    def lispWillStart(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdLispEngineReactor_lispWillStart(self, *args)

    def lispEnded(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdLispEngineReactor_lispEnded(self, *args)

    def lispCancelled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdLispEngineReactor_lispCancelled(self, *args)

# Register OdEdLispEngineReactor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdLispEngineReactor_swigregister(OdEdLispEngineReactor)

def OdEdLispEngineReactor_cast(*args) -> "OdSmartPtr< OdEdLispEngineReactor >":
    return _ODA_Kernel_Py3.OdEdLispEngineReactor_cast(*args)

def OdEdLispEngineReactor_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdEdLispEngineReactor_desc(*args)

def OdEdLispEngineReactor_createObject(*args) -> "OdSmartPtr< OdEdLispEngineReactor >":
    return _ODA_Kernel_Py3.OdEdLispEngineReactor_createObject(*args)

class OdEdLispEngine(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdEdLispEngine >":
        return _ODA_Kernel_Py3.OdEdLispEngine_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdLispEngine_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdLispEngine_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdEdLispEngine_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdEdLispEngine >":
        return _ODA_Kernel_Py3.OdEdLispEngine_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdLispEngine

    def addReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdLispEngine_addReactor(self, *args)

    def removeReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdLispEngine_removeReactor(self, *args)

    def execute(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdLispEngine_execute(self, *args)

# Register OdEdLispEngine in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdLispEngine_swigregister(OdEdLispEngine)

def OdEdLispEngine_cast(*args) -> "OdSmartPtr< OdEdLispEngine >":
    return _ODA_Kernel_Py3.OdEdLispEngine_cast(*args)

def OdEdLispEngine_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdEdLispEngine_desc(*args)

def OdEdLispEngine_createObject(*args) -> "OdSmartPtr< OdEdLispEngine >":
    return _ODA_Kernel_Py3.OdEdLispEngine_createObject(*args)

class OdEdLispModule(OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdEdLispModule >":
        return _ODA_Kernel_Py3.OdEdLispModule_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdLispModule_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdLispModule_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdEdLispModule_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdEdLispModule >":
        return _ODA_Kernel_Py3.OdEdLispModule_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdLispModule

    def createLispEngine(self, *args) -> "OdEdLispEnginePtr":
        return _ODA_Kernel_Py3.OdEdLispModule_createLispEngine(self, *args)

# Register OdEdLispModule in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdLispModule_swigregister(OdEdLispModule)

def OdEdLispModule_cast(*args) -> "OdSmartPtr< OdEdLispModule >":
    return _ODA_Kernel_Py3.OdEdLispModule_cast(*args)

def OdEdLispModule_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdEdLispModule_desc(*args)

def OdEdLispModule_createObject(*args) -> "OdSmartPtr< OdEdLispModule >":
    return _ODA_Kernel_Py3.OdEdLispModule_createObject(*args)

class OdEdFunctionIO(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdEdFunctionIO >":
        return _ODA_Kernel_Py3.OdEdFunctionIO_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdFunctionIO_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdFunctionIO_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdEdFunctionIO_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdEdFunctionIO >":
        return _ODA_Kernel_Py3.OdEdFunctionIO_createObject(*args)

    def setParam(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdFunctionIO_setParam(self, *args)

    def param(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdEdFunctionIO_param(self, *args)

    def setResult(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdFunctionIO_setResult(self, *args)

    def result(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdEdFunctionIO_result(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdFunctionIO

# Register OdEdFunctionIO in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdFunctionIO_swigregister(OdEdFunctionIO)

def OdEdFunctionIO_cast(*args) -> "OdSmartPtr< OdEdFunctionIO >":
    return _ODA_Kernel_Py3.OdEdFunctionIO_cast(*args)

def OdEdFunctionIO_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdEdFunctionIO_desc(*args)

def OdEdFunctionIO_createObject(*args) -> "OdSmartPtr< OdEdFunctionIO >":
    return _ODA_Kernel_Py3.OdEdFunctionIO_createObject(*args)

class OdEdCommand(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdEdCommand >":
        return _ODA_Kernel_Py3.OdEdCommand_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdCommand_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdCommand_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdEdCommand_queryX(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdCommand
    kModal = _ODA_Kernel_Py3.OdEdCommand_kModal
    kTransparent = _ODA_Kernel_Py3.OdEdCommand_kTransparent
    kUsePickset = _ODA_Kernel_Py3.OdEdCommand_kUsePickset
    kRedraw = _ODA_Kernel_Py3.OdEdCommand_kRedraw
    kNoPerspective = _ODA_Kernel_Py3.OdEdCommand_kNoPerspective
    kNoMultiple = _ODA_Kernel_Py3.OdEdCommand_kNoMultiple
    kNoTilemode = _ODA_Kernel_Py3.OdEdCommand_kNoTilemode
    kNoPaperspace = _ODA_Kernel_Py3.OdEdCommand_kNoPaperspace
    kPlotOnly = _ODA_Kernel_Py3.OdEdCommand_kPlotOnly
    kNoOEM = _ODA_Kernel_Py3.OdEdCommand_kNoOEM
    kUndefined = _ODA_Kernel_Py3.OdEdCommand_kUndefined
    kInProgress = _ODA_Kernel_Py3.OdEdCommand_kInProgress
    kDefun = _ODA_Kernel_Py3.OdEdCommand_kDefun
    kNoNewStack = _ODA_Kernel_Py3.OdEdCommand_kNoNewStack
    kNoInternalLock = _ODA_Kernel_Py3.OdEdCommand_kNoInternalLock
    kDocReadLock = _ODA_Kernel_Py3.OdEdCommand_kDocReadLock
    kDocExclusiveLock = _ODA_Kernel_Py3.OdEdCommand_kDocExclusiveLock
    kSession = _ODA_Kernel_Py3.OdEdCommand_kSession
    kInterruptible = _ODA_Kernel_Py3.OdEdCommand_kInterruptible
    kNoHistory = _ODA_Kernel_Py3.OdEdCommand_kNoHistory
    kNoUndoMarker = _ODA_Kernel_Py3.OdEdCommand_kNoUndoMarker
    kNoBedit = _ODA_Kernel_Py3.OdEdCommand_kNoBedit

    @staticmethod
    def createObject(*args) -> "OdString const &, OdString const &, OdString const &":
        return _ODA_Kernel_Py3.OdEdCommand_createObject(*args)

    def groupName(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdEdCommand_groupName(self, *args)

    def globalName(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdEdCommand_globalName(self, *args)

    def localName(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdEdCommand_localName(self, *args)

    def execute(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdCommand_execute(self, *args)

    def module(self, *args) -> "OdRxModule const *":
        return _ODA_Kernel_Py3.OdEdCommand_module(self, *args)

    def undefine(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdCommand_undefine(self, *args)

    def flags(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdEdCommand_flags(self, *args)

# Register OdEdCommand in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdCommand_swigregister(OdEdCommand)

def OdEdCommand_cast(*args) -> "OdSmartPtr< OdEdCommand >":
    return _ODA_Kernel_Py3.OdEdCommand_cast(*args)

def OdEdCommand_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdEdCommand_desc(*args)

def OdEdCommand_createObject(*args) -> "OdString const &, OdString const &, OdString const &":
    return _ODA_Kernel_Py3.OdEdCommand_createObject(*args)

class OdEdCommandStackReactor(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdEdCommandStackReactor >":
        return _ODA_Kernel_Py3.OdEdCommandStackReactor_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdCommandStackReactor_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdCommandStackReactor_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdEdCommandStackReactor_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdEdCommandStackReactor >":
        return _ODA_Kernel_Py3.OdEdCommandStackReactor_createObject(*args)

    def commandAdded(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdCommandStackReactor_commandAdded(self, *args)

    def commandWillBeRemoved(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdCommandStackReactor_commandWillBeRemoved(self, *args)

    def commandWillStart(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdCommandStackReactor_commandWillStart(self, *args)

    def commandEnded(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdCommandStackReactor_commandEnded(self, *args)

    def commandCancelled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdCommandStackReactor_commandCancelled(self, *args)

    def commandFailed(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdCommandStackReactor_commandFailed(self, *args)

    def unknownCommand(self, *args) -> "OdEdCommandPtr":
        return _ODA_Kernel_Py3.OdEdCommandStackReactor_unknownCommand(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdCommandStackReactor

# Register OdEdCommandStackReactor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdCommandStackReactor_swigregister(OdEdCommandStackReactor)

def OdEdCommandStackReactor_cast(*args) -> "OdSmartPtr< OdEdCommandStackReactor >":
    return _ODA_Kernel_Py3.OdEdCommandStackReactor_cast(*args)

def OdEdCommandStackReactor_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdEdCommandStackReactor_desc(*args)

def OdEdCommandStackReactor_createObject(*args) -> "OdSmartPtr< OdEdCommandStackReactor >":
    return _ODA_Kernel_Py3.OdEdCommandStackReactor_createObject(*args)

class OdEdUnknownCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdEdUnknownCommand_swiginit(self, _ODA_Kernel_Py3.new_OdEdUnknownCommand(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdUnknownCommand

# Register OdEdUnknownCommand in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdUnknownCommand_swigregister(OdEdUnknownCommand)

class OdEdCommandStack(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdEdCommandStack >":
        return _ODA_Kernel_Py3.OdEdCommandStack_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdCommandStack_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdCommandStack_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdEdCommandStack_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdEdCommandStack >":
        return _ODA_Kernel_Py3.OdEdCommandStack_createObject(*args)

    def addReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdCommandStack_addReactor(self, *args)

    def removeReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdCommandStack_removeReactor(self, *args)

    def getCommandStackReactors(self, *args) -> "OdEdCommandStackReactorArray":
        return _ODA_Kernel_Py3.OdEdCommandStack_getCommandStackReactors(self, *args)

    def addCommand(self, *args) -> "OdEdCommand *":
        return _ODA_Kernel_Py3.OdEdCommandStack_addCommand(self, *args)

    def newIterator(self, *args) -> "OdRxIteratorPtr":
        return _ODA_Kernel_Py3.OdEdCommandStack_newIterator(self, *args)

    def newGroupIterator(self, *args) -> "OdRxIteratorPtr":
        return _ODA_Kernel_Py3.OdEdCommandStack_newGroupIterator(self, *args)
    kGlobal = _ODA_Kernel_Py3.OdEdCommandStack_kGlobal
    kLocal = _ODA_Kernel_Py3.OdEdCommandStack_kLocal
    kSpecifedGroup = _ODA_Kernel_Py3.OdEdCommandStack_kSpecifedGroup
    kUndefed = _ODA_Kernel_Py3.OdEdCommandStack_kUndefed
    kThrowUnknown = _ODA_Kernel_Py3.OdEdCommandStack_kThrowUnknown

    def lookupCmd(self, *args) -> "OdEdCommandPtr":
        return _ODA_Kernel_Py3.OdEdCommandStack_lookupCmd(self, *args)

    def executeCommand(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdCommandStack_executeCommand(self, *args)

    def removeCmd(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdCommandStack_removeCmd(self, *args)

    def removeGroup(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdCommandStack_removeGroup(self, *args)

    def popGroupToTop(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdEdCommandStack_popGroupToTop(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdCommandStack

# Register OdEdCommandStack in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdCommandStack_swigregister(OdEdCommandStack)

def OdEdCommandStack_cast(*args) -> "OdSmartPtr< OdEdCommandStack >":
    return _ODA_Kernel_Py3.OdEdCommandStack_cast(*args)

def OdEdCommandStack_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdEdCommandStack_desc(*args)

def OdEdCommandStack_createObject(*args) -> "OdSmartPtr< OdEdCommandStack >":
    return _ODA_Kernel_Py3.OdEdCommandStack_createObject(*args)


def odedRegCmds(*args) -> "OdEdCommandStackPtr":
    return _ODA_Kernel_Py3.odedRegCmds(*args)
class OdEdCommandContext(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdEdCommandContext >":
        return _ODA_Kernel_Py3.OdEdCommandContext_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdCommandContext_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdCommandContext_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdEdCommandContext_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdEdCommandContext >":
        return _ODA_Kernel_Py3.OdEdCommandContext_createObject(*args)

    def userIO(self, *args) -> "OdEdUserIO *":
        return _ODA_Kernel_Py3.OdEdCommandContext_userIO(self, *args)

    def funcIO(self, *args) -> "OdEdFunctionIO *":
        return _ODA_Kernel_Py3.OdEdCommandContext_funcIO(self, *args)

    def baseDatabase(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdEdCommandContext_baseDatabase(self, *args)

    def setArbitraryData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdCommandContext_setArbitraryData(self, *args)

    def arbitraryData(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdEdCommandContext_arbitraryData(self, *args)

    def reset(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdCommandContext_reset(self, *args)

    def baseIO(self, *args) -> "OdEdBaseIO *":
        return _ODA_Kernel_Py3.OdEdCommandContext_baseIO(self, *args)

    def cloneObject(self, *args) -> "OdSmartPtr< OdEdCommandContext >":
        return _ODA_Kernel_Py3.OdEdCommandContext_cloneObject(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdCommandContext

# Register OdEdCommandContext in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdCommandContext_swigregister(OdEdCommandContext)

def OdEdCommandContext_cast(*args) -> "OdSmartPtr< OdEdCommandContext >":
    return _ODA_Kernel_Py3.OdEdCommandContext_cast(*args)

def OdEdCommandContext_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdEdCommandContext_desc(*args)

def OdEdCommandContext_createObject(*args) -> "OdSmartPtr< OdEdCommandContext >":
    return _ODA_Kernel_Py3.OdEdCommandContext_createObject(*args)

class OdSSetTracker(OdEdInputTracker):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdSSetTracker >":
        return _ODA_Kernel_Py3.OdSSetTracker_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdSSetTracker_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdSSetTracker_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdSSetTracker_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdSSetTracker >":
        return _ODA_Kernel_Py3.OdSSetTracker_createObject(*args)

    def trackSubentities(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSSetTracker_trackSubentities(self, *args)

    def append(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSSetTracker_append(self, *args)

    def remove(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdSSetTracker_remove(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdSSetTracker

# Register OdSSetTracker in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdSSetTracker_swigregister(OdSSetTracker)

def OdSSetTracker_cast(*args) -> "OdSmartPtr< OdSSetTracker >":
    return _ODA_Kernel_Py3.OdSSetTracker_cast(*args)

def OdSSetTracker_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdSSetTracker_desc(*args)

def OdSSetTracker_createObject(*args) -> "OdSmartPtr< OdSSetTracker >":
    return _ODA_Kernel_Py3.OdSSetTracker_createObject(*args)

class OdEdBaseUserIO(OdEdUserIO):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdEdBaseUserIO >":
        return _ODA_Kernel_Py3.OdEdBaseUserIO_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdBaseUserIO_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdEdBaseUserIO_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdEdBaseUserIO_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdEdBaseUserIO >":
        return _ODA_Kernel_Py3.OdEdBaseUserIO_createObject(*args)

    def getLASTPOINT(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdEdBaseUserIO_getLASTPOINT(self, *args)

    def setLASTPOINT(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdEdBaseUserIO_setLASTPOINT(self, *args)

    def createRubberBand(self, *args) -> "OdEdPointDefTrackerPtr":
        return _ODA_Kernel_Py3.OdEdBaseUserIO_createRubberBand(self, *args)

    def createRectFrame(self, *args) -> "OdEdPointDefTrackerPtr":
        return _ODA_Kernel_Py3.OdEdBaseUserIO_createRectFrame(self, *args)

    def getPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdEdBaseUserIO_getPoint(self, *args)

    def getAngle(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdEdBaseUserIO_getAngle(self, *args)

    def getDist(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdEdBaseUserIO_getDist(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdEdBaseUserIO

# Register OdEdBaseUserIO in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdEdBaseUserIO_swigregister(OdEdBaseUserIO)

def OdEdBaseUserIO_cast(*args) -> "OdSmartPtr< OdEdBaseUserIO >":
    return _ODA_Kernel_Py3.OdEdBaseUserIO_cast(*args)

def OdEdBaseUserIO_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdEdBaseUserIO_desc(*args)

def OdEdBaseUserIO_createObject(*args) -> "OdSmartPtr< OdEdBaseUserIO >":
    return _ODA_Kernel_Py3.OdEdBaseUserIO_createObject(*args)

class TxErrorContext(OdErrorContext):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def init(self, *args) -> "OdSmartPtr< OdErrorContext >":
        return _ODA_Kernel_Py3.TxErrorContext_init(self, *args)

    def description(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.TxErrorContext_description(self, *args)

    def code(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.TxErrorContext_code(self, *args)

    def txAppCode(self, *args) -> "int":
        return _ODA_Kernel_Py3.TxErrorContext_txAppCode(self, *args)

    def txAppName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.TxErrorContext_txAppName(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_TxErrorContext

# Register TxErrorContext in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.TxErrorContext_swigregister(TxErrorContext)

class TxError(OdError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.TxError_swiginit(self, _ODA_Kernel_Py3.new_TxError(*args))

    def txAppName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.TxError_txAppName(self, *args)

    def txAppCode(self, *args) -> "int":
        return _ODA_Kernel_Py3.TxError_txAppCode(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_TxError

# Register TxError in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.TxError_swigregister(TxError)


def odSetTraceFunc(*args) -> "OdTraceFunc":
    return _ODA_Kernel_Py3.odSetTraceFunc(*args)

def odSetAssertFunc(*args) -> "OdAssertFunc":
    return _ODA_Kernel_Py3.odSetAssertFunc(*args)

def odSetCheckAssertGroupFunc(*args) -> "OdCheckAssertGroupFunc":
    return _ODA_Kernel_Py3.odSetCheckAssertGroupFunc(*args)

def OdTrace(*args) -> "void":
    return _ODA_Kernel_Py3.OdTrace(*args)

def OdAssert(*args) -> "void":
    return _ODA_Kernel_Py3.OdAssert(*args)
class OdUnderlayLayer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdUnderlayLayer
    kOff = _ODA_Kernel_Py3.OdUnderlayLayer_kOff
    kOn = _ODA_Kernel_Py3.OdUnderlayLayer_kOn

    def name(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdUnderlayLayer_name(self, *args)

    def state(self, *args) -> "OdUnderlayLayer::State":
        return _ODA_Kernel_Py3.OdUnderlayLayer_state(self, *args)

    def setName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdUnderlayLayer_setName(self, *args)

    def setState(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdUnderlayLayer_setState(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdUnderlayLayer_swiginit(self, _ODA_Kernel_Py3.new_OdUnderlayLayer(*args))

# Register OdUnderlayLayer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdUnderlayLayer_swigregister(OdUnderlayLayer)

class OdDbUnderlayDrawContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    contrast = property(_ODA_Kernel_Py3.OdDbUnderlayDrawContext_contrast_get, _ODA_Kernel_Py3.OdDbUnderlayDrawContext_contrast_set)
    fade = property(_ODA_Kernel_Py3.OdDbUnderlayDrawContext_fade_get, _ODA_Kernel_Py3.OdDbUnderlayDrawContext_fade_set)
    monochrome = property(_ODA_Kernel_Py3.OdDbUnderlayDrawContext_monochrome_get, _ODA_Kernel_Py3.OdDbUnderlayDrawContext_monochrome_set)
    adjustColorForBackground = property(_ODA_Kernel_Py3.OdDbUnderlayDrawContext_adjustColorForBackground_get, _ODA_Kernel_Py3.OdDbUnderlayDrawContext_adjustColorForBackground_set)
    layers = property(_ODA_Kernel_Py3.OdDbUnderlayDrawContext_layers_get, _ODA_Kernel_Py3.OdDbUnderlayDrawContext_layers_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdDbUnderlayDrawContext_swiginit(self, _ODA_Kernel_Py3.new_OdDbUnderlayDrawContext(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbUnderlayDrawContext

# Register OdDbUnderlayDrawContext in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbUnderlayDrawContext_swigregister(OdDbUnderlayDrawContext)

class OdDbUnderlayItem(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbUnderlayItem >":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbUnderlayItem >":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_createObject(*args)

    def getName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_getName(self, *args)

    def getThumbnail(self, *args) -> "OdGiRasterImagePtr":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_getThumbnail(self, *args)

    def getExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_getExtents(self, *args)

    def getUnits(self, *args) -> "OdDb::UnitsValue":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_getUnits(self, *args)

    def usingPartialContent(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_usingPartialContent(self, *args)

    def worldDraw(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_worldDraw(self, *args)

    def viewportDraw(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_viewportDraw(self, *args)

    def modelTransform(self, *args) -> "OdGeMatrix3d":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_modelTransform(self, *args)

    def getMediaBox(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_getMediaBox(self, *args)

    def getOsnapPoints(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_getOsnapPoints(self, *args)

    def getSubEntityAtGsMarker(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_getSubEntityAtGsMarker(self, *args)

    def intersectWith(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_intersectWith(self, *args)

    def underlayLayerCount(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_underlayLayerCount(self, *args)

    def getUnderlayLayer(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_getUnderlayLayer(self, *args)

    def version(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdDbUnderlayItem_version(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbUnderlayItem

# Register OdDbUnderlayItem in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbUnderlayItem_swigregister(OdDbUnderlayItem)

def OdDbUnderlayItem_cast(*args) -> "OdSmartPtr< OdDbUnderlayItem >":
    return _ODA_Kernel_Py3.OdDbUnderlayItem_cast(*args)

def OdDbUnderlayItem_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbUnderlayItem_desc(*args)

def OdDbUnderlayItem_createObject(*args) -> "OdSmartPtr< OdDbUnderlayItem >":
    return _ODA_Kernel_Py3.OdDbUnderlayItem_createObject(*args)

class OdDbLibraryInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getLibName(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdDbLibraryInfo_getLibName(self, *args)

    def getLibVersion(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdDbLibraryInfo_getLibVersion(self, *args)

    def getCompanyName(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdDbLibraryInfo_getCompanyName(self, *args)

    def getCopyright(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdDbLibraryInfo_getCopyright(self, *args)

    def getBuildComments(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdDbLibraryInfo_getBuildComments(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbLibraryInfo

# Register OdDbLibraryInfo in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbLibraryInfo_swigregister(OdDbLibraryInfo)

class OdDbHyperlink(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kUndefined = _ODA_Kernel_Py3.OdDbHyperlink_kUndefined
    kConvertDwgToDwf = _ODA_Kernel_Py3.OdDbHyperlink_kConvertDwgToDwf
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbHyperlink

    def name(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdDbHyperlink_name(self, *args)

    def setName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbHyperlink_setName(self, *args)

    def description(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdDbHyperlink_description(self, *args)

    def setDescription(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbHyperlink_setDescription(self, *args)

    def subLocation(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdDbHyperlink_subLocation(self, *args)

    def setSubLocation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbHyperlink_setSubLocation(self, *args)

    def getDisplayString(self, *args) -> "OdString const":
        return _ODA_Kernel_Py3.OdDbHyperlink_getDisplayString(self, *args)

    def isOutermostContainer(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbHyperlink_isOutermostContainer(self, *args)

    def getNestedLevel(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdDbHyperlink_getNestedLevel(self, *args)

    def flags(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.OdDbHyperlink_flags(self, *args)

    def setFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbHyperlink_setFlags(self, *args)

# Register OdDbHyperlink in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbHyperlink_swigregister(OdDbHyperlink)

class OdDbHyperlinkCollection(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbHyperlinkCollection >":
        return _ODA_Kernel_Py3.OdDbHyperlinkCollection_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbHyperlinkCollection_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbHyperlinkCollection_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbHyperlinkCollection_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbHyperlinkCollection >":
        return _ODA_Kernel_Py3.OdDbHyperlinkCollection_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbHyperlinkCollection

    def addHead(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbHyperlinkCollection_addHead(self, *args)

    def addTail(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbHyperlinkCollection_addTail(self, *args)

    def addAt(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbHyperlinkCollection_addAt(self, *args)

    def removeHead(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbHyperlinkCollection_removeHead(self, *args)

    def removeTail(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbHyperlinkCollection_removeTail(self, *args)

    def removeAt(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbHyperlinkCollection_removeAt(self, *args)

    def count(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdDbHyperlinkCollection_count(self, *args)

    def item(self, *args) -> "OdDbHyperlink *":
        return _ODA_Kernel_Py3.OdDbHyperlinkCollection_item(self, *args)

# Register OdDbHyperlinkCollection in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbHyperlinkCollection_swigregister(OdDbHyperlinkCollection)

def OdDbHyperlinkCollection_cast(*args) -> "OdSmartPtr< OdDbHyperlinkCollection >":
    return _ODA_Kernel_Py3.OdDbHyperlinkCollection_cast(*args)

def OdDbHyperlinkCollection_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbHyperlinkCollection_desc(*args)

def OdDbHyperlinkCollection_createObject(*args) -> "OdSmartPtr< OdDbHyperlinkCollection >":
    return _ODA_Kernel_Py3.OdDbHyperlinkCollection_createObject(*args)

class OdDbEntityHyperlinkPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbEntityHyperlinkPE

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbEntityHyperlinkPE >":
        return _ODA_Kernel_Py3.OdDbEntityHyperlinkPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbEntityHyperlinkPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbEntityHyperlinkPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbEntityHyperlinkPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbEntityHyperlinkPE >":
        return _ODA_Kernel_Py3.OdDbEntityHyperlinkPE_createObject(*args)

    def getHyperlinkCollectionEx(self, *args) -> "OdDbHyperlinkCollectionPtr":
        return _ODA_Kernel_Py3.OdDbEntityHyperlinkPE_getHyperlinkCollectionEx(self, *args)

    def getHyperlinkCollection(self, *args) -> "OdDbHyperlinkCollectionPtr":
        return _ODA_Kernel_Py3.OdDbEntityHyperlinkPE_getHyperlinkCollection(self, *args)

    def setHyperlinkCollection(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbEntityHyperlinkPE_setHyperlinkCollection(self, *args)

    def getHyperlinkCount(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdDbEntityHyperlinkPE_getHyperlinkCount(self, *args)

    def hasHyperlink(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbEntityHyperlinkPE_hasHyperlink(self, *args)

# Register OdDbEntityHyperlinkPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbEntityHyperlinkPE_swigregister(OdDbEntityHyperlinkPE)

def OdDbEntityHyperlinkPE_cast(*args) -> "OdSmartPtr< OdDbEntityHyperlinkPE >":
    return _ODA_Kernel_Py3.OdDbEntityHyperlinkPE_cast(*args)

def OdDbEntityHyperlinkPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbEntityHyperlinkPE_desc(*args)

def OdDbEntityHyperlinkPE_createObject(*args) -> "OdSmartPtr< OdDbEntityHyperlinkPE >":
    return _ODA_Kernel_Py3.OdDbEntityHyperlinkPE_createObject(*args)


def odrxRegisterHyperlinkDestructorCallback(*args) -> "void":
    return _ODA_Kernel_Py3.odrxRegisterHyperlinkDestructorCallback(*args)

def odrxUnregisterHyperlinkDestructorCallback(*args) -> "void":
    return _ODA_Kernel_Py3.odrxUnregisterHyperlinkDestructorCallback(*args)
kDragStart = _ODA_Kernel_Py3.kDragStart
kDragEnd = _ODA_Kernel_Py3.kDragEnd
kDragAbort = _ODA_Kernel_Py3.kDragAbort
kGripsDone = _ODA_Kernel_Py3.kGripsDone
kGripsToBeDeleted = _ODA_Kernel_Py3.kGripsToBeDeleted
kDimDataToBeDeleted = _ODA_Kernel_Py3.kDimDataToBeDeleted
kWarmGrip = _ODA_Kernel_Py3.kWarmGrip
kHoverGrip = _ODA_Kernel_Py3.kHoverGrip
kHotGrip = _ODA_Kernel_Py3.kHotGrip
kDragImageGrip = _ODA_Kernel_Py3.kDragImageGrip
kGripStart = _ODA_Kernel_Py3.kGripStart
kGripEnd = _ODA_Kernel_Py3.kGripEnd
kGripAbort = _ODA_Kernel_Py3.kGripAbort
kStretch = _ODA_Kernel_Py3.kStretch
kMove = _ODA_Kernel_Py3.kMove
kRotate = _ODA_Kernel_Py3.kRotate
kScale = _ODA_Kernel_Py3.kScale
kMirror = _ODA_Kernel_Py3.kMirror
kDimFocusChanged = _ODA_Kernel_Py3.kDimFocusChanged
kPopUpMenu = _ODA_Kernel_Py3.kPopUpMenu
kSkipWhenShared = _ODA_Kernel_Py3.kSkipWhenShared
kDisableRubberBandLine = _ODA_Kernel_Py3.kDisableRubberBandLine
kDisableModeKeywords = _ODA_Kernel_Py3.kDisableModeKeywords
kDrawAtDragImageGripPoint = _ODA_Kernel_Py3.kDrawAtDragImageGripPoint
kTriggerGrip = _ODA_Kernel_Py3.kTriggerGrip
kTurnOnForcedPick = _ODA_Kernel_Py3.kTurnOnForcedPick
kMapGripHotToRtClk = _ODA_Kernel_Py3.kMapGripHotToRtClk
kGizmosEnabled = _ODA_Kernel_Py3.kGizmosEnabled
kGripIsPerViewport = _ODA_Kernel_Py3.kGripIsPerViewport
kSharedGrip = _ODA_Kernel_Py3.kSharedGrip
kMultiHotGrip = _ODA_Kernel_Py3.kMultiHotGrip
kGripPointsOnly = _ODA_Kernel_Py3.kGripPointsOnly
kCyclableGripsOnly = _ODA_Kernel_Py3.kCyclableGripsOnly
kDynamicDimMode = _ODA_Kernel_Py3.kDynamicDimMode
kOsnapped = _ODA_Kernel_Py3.kOsnapped
kPolar = _ODA_Kernel_Py3.kPolar
kOtrack = _ODA_Kernel_Py3.kOtrack
kZdir = _ODA_Kernel_Py3.kZdir
kKeyboard = _ODA_Kernel_Py3.kKeyboard
kOsMaskEnd = _ODA_Kernel_Py3.kOsMaskEnd
kOsMaskMid = _ODA_Kernel_Py3.kOsMaskMid
kOsMaskCen = _ODA_Kernel_Py3.kOsMaskCen
kOsMaskNode = _ODA_Kernel_Py3.kOsMaskNode
kOsMaskQuad = _ODA_Kernel_Py3.kOsMaskQuad
kOsMaskInt = _ODA_Kernel_Py3.kOsMaskInt
kOsMaskIns = _ODA_Kernel_Py3.kOsMaskIns
kOsMaskPerp = _ODA_Kernel_Py3.kOsMaskPerp
kOsMaskTan = _ODA_Kernel_Py3.kOsMaskTan
kOsMaskNear = _ODA_Kernel_Py3.kOsMaskNear
kOsMaskQuick = _ODA_Kernel_Py3.kOsMaskQuick
kOsMaskApint = _ODA_Kernel_Py3.kOsMaskApint
kOsMaskImmediate = _ODA_Kernel_Py3.kOsMaskImmediate
kOsMaskAllowTan = _ODA_Kernel_Py3.kOsMaskAllowTan
kOsMaskDisablePerp = _ODA_Kernel_Py3.kOsMaskDisablePerp
kOsMaskRelCartesian = _ODA_Kernel_Py3.kOsMaskRelCartesian
kOsMaskRelPolar = _ODA_Kernel_Py3.kOsMaskRelPolar
kOsMaskNoneOverride = _ODA_Kernel_Py3.kOsMaskNoneOverride
class OdDbGripData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdDbGripData_swiginit(self, _ODA_Kernel_Py3.new_OdDbGripData(*args))

    def gripPoint(self, *args) -> "OdGePoint3d const &":
        return _ODA_Kernel_Py3.OdDbGripData_gripPoint(self, *args)

    def setGripPoint(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_setGripPoint(self, *args)

    def appData(self, *args) -> "void *":
        return _ODA_Kernel_Py3.OdDbGripData_appData(self, *args)

    def setAppData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_setAppData(self, *args)

    def appDataOdRxClass(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbGripData_appDataOdRxClass(self, *args)

    def setAppDataOdRxClass(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_setAppDataOdRxClass(self, *args)

    def hotGripFunc(self, *args) -> "GripOperationPtr":
        return _ODA_Kernel_Py3.OdDbGripData_hotGripFunc(self, *args)

    def setHotGripFunc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_setHotGripFunc(self, *args)

    def hoverFunc(self, *args) -> "GripOperationPtr":
        return _ODA_Kernel_Py3.OdDbGripData_hoverFunc(self, *args)

    def setHoverFunc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_setHoverFunc(self, *args)

    def worldDraw(self, *args) -> "GripWorldDrawPtr":
        return _ODA_Kernel_Py3.OdDbGripData_worldDraw(self, *args)

    def setWorldDraw(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_setWorldDraw(self, *args)

    def viewportDraw(self, *args) -> "GripViewportDrawPtr":
        return _ODA_Kernel_Py3.OdDbGripData_viewportDraw(self, *args)

    def setViewportDraw(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_setViewportDraw(self, *args)

    def gripOpStatFunc(self, *args) -> "GripOpStatusPtr":
        return _ODA_Kernel_Py3.OdDbGripData_gripOpStatFunc(self, *args)

    def setGripOpStatFunc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_setGripOpStatFunc(self, *args)

    def toolTipFunc(self, *args) -> "GripToolTipPtr":
        return _ODA_Kernel_Py3.OdDbGripData_toolTipFunc(self, *args)

    def setToolTipFunc(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_setToolTipFunc(self, *args)

    def alternateBasePoint(self, *args) -> "OdGePoint3d *":
        return _ODA_Kernel_Py3.OdDbGripData_alternateBasePoint(self, *args)

    def setAlternateBasePoint(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_setAlternateBasePoint(self, *args)

    def bitFlags(self, *args) -> "unsigned int":
        return _ODA_Kernel_Py3.OdDbGripData_bitFlags(self, *args)

    def setBitFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_setBitFlags(self, *args)

    def skipWhenShared(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbGripData_skipWhenShared(self, *args)

    def setSkipWhenShared(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_setSkipWhenShared(self, *args)

    def isRubberBandLineDisabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbGripData_isRubberBandLineDisabled(self, *args)

    def disableRubberBandLine(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_disableRubberBandLine(self, *args)

    def areModeKeywordsDisabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbGripData_areModeKeywordsDisabled(self, *args)

    def disableModeKeywords(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_disableModeKeywords(self, *args)

    def drawAtDragImageGripPoint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbGripData_drawAtDragImageGripPoint(self, *args)

    def setDrawAtDragImageGripPoint(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_setDrawAtDragImageGripPoint(self, *args)

    def triggerGrip(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbGripData_triggerGrip(self, *args)

    def setTriggerGrip(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_setTriggerGrip(self, *args)

    def forcedPickOn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbGripData_forcedPickOn(self, *args)

    def setForcedPickOn(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_setForcedPickOn(self, *args)

    def mapGripHotToRtClk(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbGripData_mapGripHotToRtClk(self, *args)

    def setMapGripHotToRtClk(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_setMapGripHotToRtClk(self, *args)

    def gizmosEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbGripData_gizmosEnabled(self, *args)

    def setGizmosEnabled(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_setGizmosEnabled(self, *args)

    def gripIsPerViewport(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdDbGripData_gripIsPerViewport(self, *args)

    def setGripIsPerViewport(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_setGripIsPerViewport(self, *args)

    def rtClk(self, *args) -> "GripRtClkHandler":
        return _ODA_Kernel_Py3.OdDbGripData_rtClk(self, *args)

    def setRtClk(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDbGripData_setRtClk(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbGripData

# Register OdDbGripData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbGripData_swigregister(OdDbGripData)

class OdDbBaseUnitsFormatter(OdUnitsFormatter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdDbBaseUnitsFormatter >":
        return _ODA_Kernel_Py3.OdDbBaseUnitsFormatter_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseUnitsFormatter_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdDbBaseUnitsFormatter_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdDbBaseUnitsFormatter_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdDbBaseUnitsFormatter >":
        return _ODA_Kernel_Py3.OdDbBaseUnitsFormatter_createObject(*args)

    def formatCmColor(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseUnitsFormatter_formatCmColor(self, *args)

    def unformatCmColor(self, *args) -> "OdSharedPtr< OdCmColorBase >":
        return _ODA_Kernel_Py3.OdDbBaseUnitsFormatter_unformatCmColor(self, *args)

    def formatLinear(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseUnitsFormatter_formatLinear(self, *args)

    def unformatLinear(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdDbBaseUnitsFormatter_unformatLinear(self, *args)

    def formatAngle(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdDbBaseUnitsFormatter_formatAngle(self, *args)

    def unformatAngle(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdDbBaseUnitsFormatter_unformatAngle(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDbBaseUnitsFormatter

# Register OdDbBaseUnitsFormatter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDbBaseUnitsFormatter_swigregister(OdDbBaseUnitsFormatter)

def OdDbBaseUnitsFormatter_cast(*args) -> "OdSmartPtr< OdDbBaseUnitsFormatter >":
    return _ODA_Kernel_Py3.OdDbBaseUnitsFormatter_cast(*args)

def OdDbBaseUnitsFormatter_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdDbBaseUnitsFormatter_desc(*args)

def OdDbBaseUnitsFormatter_createObject(*args) -> "OdSmartPtr< OdDbBaseUnitsFormatter >":
    return _ODA_Kernel_Py3.OdDbBaseUnitsFormatter_createObject(*args)


def odcmIsBackgroundLight(*args) -> "bool":
    return _ODA_Kernel_Py3.odcmIsBackgroundLight(*args)

def odcmAcadDarkPalette(*args) -> "ODCOLORREF const *":
    return _ODA_Kernel_Py3.odcmAcadDarkPalette(*args)

def odcmAcadLightPalette(*args) -> "ODCOLORREF const *":
    return _ODA_Kernel_Py3.odcmAcadLightPalette(*args)

def odcmAcadPlotPalette(*args) -> "ODCOLORREF const *":
    return _ODA_Kernel_Py3.odcmAcadPlotPalette(*args)

def odcmAcadPalette(*args) -> "ODCOLORREF const *":
    return _ODA_Kernel_Py3.odcmAcadPalette(*args)

def odcmLookupRGB(*args) -> "ODCOLORREF":
    return _ODA_Kernel_Py3.odcmLookupRGB(*args)

def odcmLookupACI(*args) -> "int":
    return _ODA_Kernel_Py3.odcmLookupACI(*args)
class OdBrepRendererImpl(OdBrepRenderer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kDefault = _ODA_Kernel_Py3.OdBrepRendererImpl_kDefault
    kBIM = _ODA_Kernel_Py3.OdBrepRendererImpl_kBIM

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrepRendererImpl_swiginit(self, _ODA_Kernel_Py3.new_OdBrepRendererImpl(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrepRendererImpl

    def setDatabase(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_setDatabase(self, *args)

    def setMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_setMode(self, *args)

    def mode(self, *args) -> "OdBrepRendererImpl::Mode":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_mode(self, *args)

    def setBrep(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_setBrep(self, *args)

    def enableCaching(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_enableCaching(self, *args)

    def disableCaching(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_disableCaching(self, *args)

    def isCachingEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_isCachingEnabled(self, *args)

    def setTriangulationParams(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_setTriangulationParams(self, *args)

    def getTriangulationParams(self, *args) -> "wrTriangulationParams const *":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_getTriangulationParams(self, *args)

    def draw(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_draw(self, *args)

    def drawSilhouettes(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_drawSilhouettes(self, *args)

    def transformBy(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_transformBy(self, *args)

    def drawFace(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_drawFace(self, *args)

    def getFaceMesh(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_getFaceMesh(self, *args)

    def getExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_getExtents(self, *args)

    def setFaceFilter(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_setFaceFilter(self, *args)

    def getPtSurface(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_getPtSurface(self, *args)

    def getLoopTypes(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_getLoopTypes(self, *args)

    def getDeviation(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_getDeviation(self, *args)

    def setLazyDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBrepRendererImpl_setLazyDeviation(self, *args)

# Register OdBrepRendererImpl in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrepRendererImpl_swigregister(OdBrepRendererImpl)

class OdBrVertexLoopTraverser(OdBrTraverser):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrVertexLoopTraverser_swiginit(self, _ODA_Kernel_Py3.new_OdBrVertexLoopTraverser(*args))

    def setVertex(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrVertexLoopTraverser_setVertex(self, *args)

    def setLoop(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrVertexLoopTraverser_setLoop(self, *args)

    def setVertexAndLoop(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrVertexLoopTraverser_setVertexAndLoop(self, *args)

    def getLoop(self, *args) -> "OdBrLoop":
        return _ODA_Kernel_Py3.OdBrVertexLoopTraverser_getLoop(self, *args)

    def getVertex(self, *args) -> "OdBrVertex":
        return _ODA_Kernel_Py3.OdBrVertexLoopTraverser_getVertex(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrVertexLoopTraverser

# Register OdBrVertexLoopTraverser in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrVertexLoopTraverser_swigregister(OdBrVertexLoopTraverser)

class OdBrVertexEdgeTraverser(OdBrTraverser):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrVertexEdgeTraverser_swiginit(self, _ODA_Kernel_Py3.new_OdBrVertexEdgeTraverser(*args))

    def setVertex(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrVertexEdgeTraverser_setVertex(self, *args)

    def setEdge(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrVertexEdgeTraverser_setEdge(self, *args)

    def getEdge(self, *args) -> "OdBrEdge":
        return _ODA_Kernel_Py3.OdBrVertexEdgeTraverser_getEdge(self, *args)

    def getVertex(self, *args) -> "OdBrVertex":
        return _ODA_Kernel_Py3.OdBrVertexEdgeTraverser_getVertex(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrVertexEdgeTraverser

# Register OdBrVertexEdgeTraverser in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrVertexEdgeTraverser_swigregister(OdBrVertexEdgeTraverser)

class OdBrShellFaceTraverser(OdBrTraverser):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrShellFaceTraverser_swiginit(self, _ODA_Kernel_Py3.new_OdBrShellFaceTraverser(*args))

    def getFace(self, *args) -> "OdBrFace":
        return _ODA_Kernel_Py3.OdBrShellFaceTraverser_getFace(self, *args)

    def getShell(self, *args) -> "OdBrShell":
        return _ODA_Kernel_Py3.OdBrShellFaceTraverser_getShell(self, *args)

    def setShell(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrShellFaceTraverser_setShell(self, *args)

    def setFace(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrShellFaceTraverser_setFace(self, *args)

    def setShellAndFace(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrShellFaceTraverser_setShellAndFace(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrShellFaceTraverser

# Register OdBrShellFaceTraverser in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrShellFaceTraverser_swigregister(OdBrShellFaceTraverser)

class OdBrLoopVertexTraverser(OdBrTraverser):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrLoopVertexTraverser_swiginit(self, _ODA_Kernel_Py3.new_OdBrLoopVertexTraverser(*args))

    def getVertex(self, *args) -> "OdBrVertex":
        return _ODA_Kernel_Py3.OdBrLoopVertexTraverser_getVertex(self, *args)

    def getLoop(self, *args) -> "OdBrLoop":
        return _ODA_Kernel_Py3.OdBrLoopVertexTraverser_getLoop(self, *args)

    def setLoop(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrLoopVertexTraverser_setLoop(self, *args)

    def setLoopAndVertex(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrLoopVertexTraverser_setLoopAndVertex(self, *args)

    def setVertex(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrLoopVertexTraverser_setVertex(self, *args)

    def getParamPoint(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrLoopVertexTraverser_getParamPoint(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrLoopVertexTraverser

# Register OdBrLoopVertexTraverser in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrLoopVertexTraverser_swigregister(OdBrLoopVertexTraverser)

class OdBrLoopEdgeTraverser(OdBrTraverser):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrLoopEdgeTraverser_swiginit(self, _ODA_Kernel_Py3.new_OdBrLoopEdgeTraverser(*args))

    def getOrientedCurve(self, *args) -> "OdGeCurve3d *":
        return _ODA_Kernel_Py3.OdBrLoopEdgeTraverser_getOrientedCurve(self, *args)

    def getOrientedCurveAsNurb(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrLoopEdgeTraverser_getOrientedCurveAsNurb(self, *args)

    def getParamCurve(self, *args) -> "OdGeCurve2d *":
        return _ODA_Kernel_Py3.OdBrLoopEdgeTraverser_getParamCurve(self, *args)

    def getParamCurveAsNurb(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrLoopEdgeTraverser_getParamCurveAsNurb(self, *args)

    def getEdgeOrientToLoop(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrLoopEdgeTraverser_getEdgeOrientToLoop(self, *args)

    def getEdge(self, *args) -> "OdBrEdge":
        return _ODA_Kernel_Py3.OdBrLoopEdgeTraverser_getEdge(self, *args)

    def getLoop(self, *args) -> "OdBrLoop":
        return _ODA_Kernel_Py3.OdBrLoopEdgeTraverser_getLoop(self, *args)

    def setEdge(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrLoopEdgeTraverser_setEdge(self, *args)

    def setLoop(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrLoopEdgeTraverser_setLoop(self, *args)

    def setLoopAndEdge(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrLoopEdgeTraverser_setLoopAndEdge(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrLoopEdgeTraverser

# Register OdBrLoopEdgeTraverser in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrLoopEdgeTraverser_swigregister(OdBrLoopEdgeTraverser)

class OdBrHit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrHit_swiginit(self, _ODA_Kernel_Py3.new_OdBrHit(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrHit

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrHit_isEqualTo(self, *args)

    def isNull(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrHit_isNull(self, *args)

    def getEntityHit(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrHit_getEntityHit(self, *args)

    def getEntityEntered(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrHit_getEntityEntered(self, *args)

    def getEntityAssociated(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrHit_getEntityAssociated(self, *args)

    def getPoint(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrHit_getPoint(self, *args)

    def setValidationLevel(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrHit_setValidationLevel(self, *args)

    def getValidationLevel(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrHit_getValidationLevel(self, *args)

    def brepChanged(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBrHit_brepChanged(self, *args)

# Register OdBrHit in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrHit_swigregister(OdBrHit)

class OdBrFaceLoopTraverser(OdBrTraverser):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrFaceLoopTraverser_swiginit(self, _ODA_Kernel_Py3.new_OdBrFaceLoopTraverser(*args))

    def setFace(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrFaceLoopTraverser_setFace(self, *args)

    def setLoop(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrFaceLoopTraverser_setLoop(self, *args)

    def setFaceAndLoop(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrFaceLoopTraverser_setFaceAndLoop(self, *args)

    def getLoop(self, *args) -> "OdBrLoop":
        return _ODA_Kernel_Py3.OdBrFaceLoopTraverser_getLoop(self, *args)

    def getFace(self, *args) -> "OdBrFace":
        return _ODA_Kernel_Py3.OdBrFaceLoopTraverser_getFace(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrFaceLoopTraverser

# Register OdBrFaceLoopTraverser in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrFaceLoopTraverser_swigregister(OdBrFaceLoopTraverser)

class OdBrElement2dNodeTraverser(OdBrTraverser):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrElement2dNodeTraverser_swiginit(self, _ODA_Kernel_Py3.new_OdBrElement2dNodeTraverser(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrElement2dNodeTraverser

    def setElement(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrElement2dNodeTraverser_setElement(self, *args)

    def getElement(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrElement2dNodeTraverser_getElement(self, *args)

    def setNode(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrElement2dNodeTraverser_setNode(self, *args)

    def getNode(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrElement2dNodeTraverser_getNode(self, *args)

    def getSurfaceNormal(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrElement2dNodeTraverser_getSurfaceNormal(self, *args)

    def getParamPoint(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrElement2dNodeTraverser_getParamPoint(self, *args)

# Register OdBrElement2dNodeTraverser in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrElement2dNodeTraverser_swigregister(OdBrElement2dNodeTraverser)

class OdBrEdgeLoopTraverser(OdBrTraverser):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrEdgeLoopTraverser_swiginit(self, _ODA_Kernel_Py3.new_OdBrEdgeLoopTraverser(*args))

    def setEdge(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrEdgeLoopTraverser_setEdge(self, *args)

    def setLoop(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrEdgeLoopTraverser_setLoop(self, *args)

    def setEdgeAndLoop(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrEdgeLoopTraverser_setEdgeAndLoop(self, *args)

    def getLoop(self, *args) -> "OdBrLoop":
        return _ODA_Kernel_Py3.OdBrEdgeLoopTraverser_getLoop(self, *args)

    def getEdge(self, *args) -> "OdBrEdge":
        return _ODA_Kernel_Py3.OdBrEdgeLoopTraverser_getEdge(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrEdgeLoopTraverser

# Register OdBrEdgeLoopTraverser in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrEdgeLoopTraverser_swigregister(OdBrEdgeLoopTraverser)

class OdBrComplexShellTraverser(OdBrTraverser):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrComplexShellTraverser_swiginit(self, _ODA_Kernel_Py3.new_OdBrComplexShellTraverser(*args))

    def setComplex(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrComplexShellTraverser_setComplex(self, *args)

    def setShell(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrComplexShellTraverser_setShell(self, *args)

    def setComplexAndShell(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrComplexShellTraverser_setComplexAndShell(self, *args)

    def getShell(self, *args) -> "OdBrShell":
        return _ODA_Kernel_Py3.OdBrComplexShellTraverser_getShell(self, *args)

    def getComplex(self, *args) -> "OdBrComplex":
        return _ODA_Kernel_Py3.OdBrComplexShellTraverser_getComplex(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrComplexShellTraverser

# Register OdBrComplexShellTraverser in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrComplexShellTraverser_swigregister(OdBrComplexShellTraverser)

class OdBrBrepVertexTraverser(OdBrTraverser):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrBrepVertexTraverser_swiginit(self, _ODA_Kernel_Py3.new_OdBrBrepVertexTraverser(*args))

    def setBrep(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrBrepVertexTraverser_setBrep(self, *args)

    def setBrepAndVertex(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrBrepVertexTraverser_setBrepAndVertex(self, *args)

    def setVertex(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrBrepVertexTraverser_setVertex(self, *args)

    def getVertex(self, *args) -> "OdBrVertex":
        return _ODA_Kernel_Py3.OdBrBrepVertexTraverser_getVertex(self, *args)

    def getBrep(self, *args) -> "OdBrBrep":
        return _ODA_Kernel_Py3.OdBrBrepVertexTraverser_getBrep(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrBrepVertexTraverser

# Register OdBrBrepVertexTraverser in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrBrepVertexTraverser_swigregister(OdBrBrepVertexTraverser)

class OdBrBrepShellTraverser(OdBrTraverser):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrBrepShellTraverser_swiginit(self, _ODA_Kernel_Py3.new_OdBrBrepShellTraverser(*args))

    def setBrep(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrBrepShellTraverser_setBrep(self, *args)

    def setBrepAndShell(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrBrepShellTraverser_setBrepAndShell(self, *args)

    def setShell(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrBrepShellTraverser_setShell(self, *args)

    def getShell(self, *args) -> "OdBrShell":
        return _ODA_Kernel_Py3.OdBrBrepShellTraverser_getShell(self, *args)

    def getBrep(self, *args) -> "OdBrBrep":
        return _ODA_Kernel_Py3.OdBrBrepShellTraverser_getBrep(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrBrepShellTraverser

# Register OdBrBrepShellTraverser in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrBrepShellTraverser_swigregister(OdBrBrepShellTraverser)

class OdBrBrepFaceTraverser(OdBrTraverser):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrBrepFaceTraverser_swiginit(self, _ODA_Kernel_Py3.new_OdBrBrepFaceTraverser(*args))

    def setBrep(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrBrepFaceTraverser_setBrep(self, *args)

    def setBrepAndFace(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrBrepFaceTraverser_setBrepAndFace(self, *args)

    def setFace(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrBrepFaceTraverser_setFace(self, *args)

    def getFace(self, *args) -> "OdBrFace":
        return _ODA_Kernel_Py3.OdBrBrepFaceTraverser_getFace(self, *args)

    def getBrep(self, *args) -> "OdBrBrep":
        return _ODA_Kernel_Py3.OdBrBrepFaceTraverser_getBrep(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrBrepFaceTraverser

# Register OdBrBrepFaceTraverser in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrBrepFaceTraverser_swigregister(OdBrBrepFaceTraverser)

class OdBrBrepEdgeTraverser(OdBrTraverser):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrBrepEdgeTraverser_swiginit(self, _ODA_Kernel_Py3.new_OdBrBrepEdgeTraverser(*args))

    def setBrep(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrBrepEdgeTraverser_setBrep(self, *args)

    def setBrepAndEdge(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrBrepEdgeTraverser_setBrepAndEdge(self, *args)

    def setEdge(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrBrepEdgeTraverser_setEdge(self, *args)

    def getEdge(self, *args) -> "OdBrEdge":
        return _ODA_Kernel_Py3.OdBrBrepEdgeTraverser_getEdge(self, *args)

    def getBrep(self, *args) -> "OdBrBrep":
        return _ODA_Kernel_Py3.OdBrBrepEdgeTraverser_getBrep(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrBrepEdgeTraverser

# Register OdBrBrepEdgeTraverser in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrBrepEdgeTraverser_swigregister(OdBrBrepEdgeTraverser)

class OdBrBrepComplexTraverser(OdBrTraverser):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrBrepComplexTraverser_swiginit(self, _ODA_Kernel_Py3.new_OdBrBrepComplexTraverser(*args))

    def setBrep(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrBrepComplexTraverser_setBrep(self, *args)

    def setComplex(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrBrepComplexTraverser_setComplex(self, *args)

    def setBrepAndComplex(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdBrBrepComplexTraverser_setBrepAndComplex(self, *args)

    def getComplex(self, *args) -> "OdBrComplex":
        return _ODA_Kernel_Py3.OdBrBrepComplexTraverser_getComplex(self, *args)

    def getBrep(self, *args) -> "OdBrBrep":
        return _ODA_Kernel_Py3.OdBrBrepComplexTraverser_getBrep(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrBrepComplexTraverser

# Register OdBrBrepComplexTraverser in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrBrepComplexTraverser_swigregister(OdBrBrepComplexTraverser)

class ISATConverter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kUndefined = _ODA_Kernel_Py3.ISATConverter_kUndefined
    kBody = _ODA_Kernel_Py3.ISATConverter_kBody
    kSolid = _ODA_Kernel_Py3.ISATConverter_kSolid
    kRegion = _ODA_Kernel_Py3.ISATConverter_kRegion
    kSurface = _ODA_Kernel_Py3.ISATConverter_kSurface

    def SatIn(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ISATConverter_SatIn(self, *args)

    def SatOut(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ISATConverter_SatOut(self, *args)

    def getBodyType(self, *args) -> "ISATConverter::ABGeomType":
        return _ODA_Kernel_Py3.ISATConverter_getBodyType(self, *args)

    def getUnitToMMCoef(self, *args) -> "double":
        return _ODA_Kernel_Py3.ISATConverter_getUnitToMMCoef(self, *args)

    def getIBr(self, *args) -> "void *":
        return _ODA_Kernel_Py3.ISATConverter_getIBr(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_ISATConverter

# Register ISATConverter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.ISATConverter_swigregister(ISATConverter)


def ABBreakToSingleBody(*args) -> "bool":
    return _ODA_Kernel_Py3.ABBreakToSingleBody(*args)

def ABCreateConverter(*args) -> "ISATConverter *":
    return _ODA_Kernel_Py3.ABCreateConverter(*args)

def ABDeleteConverter(*args) -> "void":
    return _ODA_Kernel_Py3.ABDeleteConverter(*args)
class RxSystemServicesImpl(OdRxSystemServices):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def createFile(self, *args) -> "OdStreamBufPtr":
        return _ODA_Kernel_Py3.RxSystemServicesImpl_createFile(self, *args)

    def accessFile(self, *args) -> "bool":
        return _ODA_Kernel_Py3.RxSystemServicesImpl_accessFile(self, *args)

    def getFileCTime(self, *args) -> "OdInt64":
        return _ODA_Kernel_Py3.RxSystemServicesImpl_getFileCTime(self, *args)

    def getFileMTime(self, *args) -> "OdInt64":
        return _ODA_Kernel_Py3.RxSystemServicesImpl_getFileMTime(self, *args)

    def getFileSize(self, *args) -> "OdInt64":
        return _ODA_Kernel_Py3.RxSystemServicesImpl_getFileSize(self, *args)

    def setSystemCodePage(self, *args) -> "void":
        return _ODA_Kernel_Py3.RxSystemServicesImpl_setSystemCodePage(self, *args)

    def getEnvVar(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.RxSystemServicesImpl_getEnvVar(self, *args)

    def setEnvVar(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.RxSystemServicesImpl_setEnvVar(self, *args)

    @staticmethod
    def __new(*args) -> "PyObject *":
        return _ODA_Kernel_Py3.RxSystemServicesImpl___new(*args)

    def __init__(self):
        this = _ODA_Kernel_Py3.RxSystemServicesImpl___new(self)
        try:
          self.this.append(this)
        except:
          self.this = this

    __swig_destroy__ = _ODA_Kernel_Py3.delete_RxSystemServicesImpl
    def __disown__(self):
        self.this.disown()
        _ODA_Kernel_Py3.disown_RxSystemServicesImpl(self)
        return weakref.proxy(self)

# Register RxSystemServicesImpl in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.RxSystemServicesImpl_swigregister(RxSystemServicesImpl)

def RxSystemServicesImpl___new(*args) -> "PyObject *":
    return _ODA_Kernel_Py3.RxSystemServicesImpl___new(*args)

class OdBaseFileBuf(OdRxObjectImpl_OdStreamBuf):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def open(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseFileBuf_open(self, *args)

    def close(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseFileBuf_close(self, *args)

    def fileName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdBaseFileBuf_fileName(self, *args)

    def getShareMode(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdBaseFileBuf_getShareMode(self, *args)

    def length(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdBaseFileBuf_length(self, *args)

    def seek(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdBaseFileBuf_seek(self, *args)

    def tell(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdBaseFileBuf_tell(self, *args)

    def isEof(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdBaseFileBuf_isEof(self, *args)

    def getByte(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdBaseFileBuf_getByte(self, *args)

    def getBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseFileBuf_getBytes(self, *args)

    def putByte(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseFileBuf_putByte(self, *args)

    def putBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseFileBuf_putBytes(self, *args)

    def truncate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseFileBuf_truncate(self, *args)

    def copyDataTo(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseFileBuf_copyDataTo(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBaseFileBuf

# Register OdBaseFileBuf in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBaseFileBuf_swigregister(OdBaseFileBuf)

class OdRdFileBuf(OdBaseFileBuf):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRdFileBuf

    @staticmethod
    def createObject(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRdFileBuf_createObject(*args)

    def open(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRdFileBuf_open(self, *args)

    def close(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRdFileBuf_close(self, *args)

    def length(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdRdFileBuf_length(self, *args)

    def seek(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdRdFileBuf_seek(self, *args)

    def tell(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdRdFileBuf_tell(self, *args)

    def isEof(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRdFileBuf_isEof(self, *args)

    def getByte(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdRdFileBuf_getByte(self, *args)

    def getBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRdFileBuf_getBytes(self, *args)

    def putByte(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRdFileBuf_putByte(self, *args)

    def putBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRdFileBuf_putBytes(self, *args)

    def truncate(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRdFileBuf_truncate(self, *args)

    def copyDataTo(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRdFileBuf_copyDataTo(self, *args)

# Register OdRdFileBuf in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRdFileBuf_swigregister(OdRdFileBuf)

def OdRdFileBuf_createObject(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdRdFileBuf_createObject(*args)

WRITING_BUFFER_LENGTH = _ODA_Kernel_Py3.WRITING_BUFFER_LENGTH
class OdWrFileBuf(OdBaseFileBuf):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdWrFileBuf

    @staticmethod
    def createObject(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdWrFileBuf_createObject(*args)

    def close(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdWrFileBuf_close(self, *args)

    def seek(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdWrFileBuf_seek(self, *args)

    def copyDataTo(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdWrFileBuf_copyDataTo(self, *args)

    def tell(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdWrFileBuf_tell(self, *args)

    def length(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdWrFileBuf_length(self, *args)

    def putByte(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdWrFileBuf_putByte(self, *args)

    def putBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdWrFileBuf_putBytes(self, *args)

    def getByte(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdWrFileBuf_getByte(self, *args)

    def getBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdWrFileBuf_getBytes(self, *args)

    def open(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdWrFileBuf_open(self, *args)

# Register OdWrFileBuf in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdWrFileBuf_swigregister(OdWrFileBuf)

def OdWrFileBuf_createObject(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdWrFileBuf_createObject(*args)

class ExUndoController(OdDbUndoController):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setLimits(self, *args) -> "void":
        return _ODA_Kernel_Py3.ExUndoController_setLimits(self, *args)

    def pushData(self, *args) -> "void":
        return _ODA_Kernel_Py3.ExUndoController_pushData(self, *args)

    def hasData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ExUndoController_hasData(self, *args)

    def popData(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.ExUndoController_popData(self, *args)

    def newRecordStackIterator(self, *args) -> "OdRxIteratorPtr":
        return _ODA_Kernel_Py3.ExUndoController_newRecordStackIterator(self, *args)

    def clearData(self, *args) -> "void":
        return _ODA_Kernel_Py3.ExUndoController_clearData(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_ExUndoController

# Register ExUndoController in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.ExUndoController_swigregister(ExUndoController)

class ExStringIO(OdEdBaseIO):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def reset(self, *args) -> "void":
        return _ODA_Kernel_Py3.ExStringIO_reset(self, *args)

    def getInitString(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.ExStringIO_getInitString(self, *args)

    @staticmethod
    def create(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.ExStringIO_create(*args)

    def getString(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.ExStringIO_getString(self, *args)

    def putString(self, *args) -> "void":
        return _ODA_Kernel_Py3.ExStringIO_putString(self, *args)

    def isEof(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ExStringIO_isEof(self, *args)

    def getKeyState(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.ExStringIO_getKeyState(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_ExStringIO

# Register ExStringIO in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.ExStringIO_swigregister(ExStringIO)

def ExStringIO_create(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.ExStringIO_create(*args)

class KWIndexData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.KWIndexData_swiginit(self, _ODA_Kernel_Py3.new_KWIndexData(*args))
    m_sKey = property(_ODA_Kernel_Py3.KWIndexData_m_sKey_get, _ODA_Kernel_Py3.KWIndexData_m_sKey_set)
    m_sKey2 = property(_ODA_Kernel_Py3.KWIndexData_m_sKey2_get, _ODA_Kernel_Py3.KWIndexData_m_sKey2_set)
    m_sKword = property(_ODA_Kernel_Py3.KWIndexData_m_sKword_get, _ODA_Kernel_Py3.KWIndexData_m_sKword_set)
    m_nPKey = property(_ODA_Kernel_Py3.KWIndexData_m_nPKey_get, _ODA_Kernel_Py3.KWIndexData_m_nPKey_set)
    m_nPKey2 = property(_ODA_Kernel_Py3.KWIndexData_m_nPKey2_get, _ODA_Kernel_Py3.KWIndexData_m_nPKey2_set)

    def key1(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.KWIndexData_key1(self, *args)

    def pKey1(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.KWIndexData_pKey1(self, *args)

    def key2(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.KWIndexData_key2(self, *args)

    def pKey2(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.KWIndexData_pKey2(self, *args)

    def match(self, *args) -> "bool":
        return _ODA_Kernel_Py3.KWIndexData_match(self, *args)

    def keyword(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.KWIndexData_keyword(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_KWIndexData

# Register KWIndexData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.KWIndexData_swigregister(KWIndexData)

class KWIndex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.KWIndex_swiginit(self, _ODA_Kernel_Py3.new_KWIndex(*args))

    def find(self, *args) -> "int":
        return _ODA_Kernel_Py3.KWIndex_find(self, *args)

    def check(self, *args) -> "void":
        return _ODA_Kernel_Py3.KWIndex_check(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_KWIndex

# Register KWIndex in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.KWIndex_swigregister(KWIndex)

class ExFileUndoController(OdDbUndoController):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def pushData(self, *args) -> "void":
        return _ODA_Kernel_Py3.ExFileUndoController_pushData(self, *args)

    def hasData(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ExFileUndoController_hasData(self, *args)

    def popData(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.ExFileUndoController_popData(self, *args)

    def newRecordStackIterator(self, *args) -> "OdRxIteratorPtr":
        return _ODA_Kernel_Py3.ExFileUndoController_newRecordStackIterator(self, *args)

    def clearData(self, *args) -> "void":
        return _ODA_Kernel_Py3.ExFileUndoController_clearData(self, *args)

    def setStorage(self, *args) -> "void":
        return _ODA_Kernel_Py3.ExFileUndoController_setStorage(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_ExFileUndoController

# Register ExFileUndoController in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.ExFileUndoController_swigregister(ExFileUndoController)

class ExEdInputParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.ExEdInputParser_swiginit(self, _ODA_Kernel_Py3.new_ExEdInputParser(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_ExEdInputParser

    def reset(self, *args) -> "void":
        return _ODA_Kernel_Py3.ExEdInputParser_reset(self, *args)

    def addChar(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ExEdInputParser_addChar(self, *args)

    def eraseChar(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ExEdInputParser_eraseChar(self, *args)

    def result(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.ExEdInputParser_result(self, *args)

    def isResultEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.ExEdInputParser_isResultEmpty(self, *args)

# Register ExEdInputParser in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.ExEdInputParser_swigregister(ExEdInputParser)

class OdColorConverterCallback(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def convert(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdColorConverterCallback_convert(self, *args)

    def convertBackgroundColors(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdColorConverterCallback_convertBackgroundColors(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdColorConverterCallback

# Register OdColorConverterCallback in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdColorConverterCallback_swigregister(OdColorConverterCallback)

class OdColorConverterCallbackCaching(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdColorConverterCallbackCaching_swiginit(self, _ODA_Kernel_Py3.new_OdColorConverterCallbackCaching(*args))

    def refresh(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdColorConverterCallbackCaching_refresh(self, *args)

    def setColorConverterCallback(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdColorConverterCallbackCaching_setColorConverterCallback(self, *args)

    def colorConverterCallback(self, *args) -> "OdColorConverterCallback *":
        return _ODA_Kernel_Py3.OdColorConverterCallbackCaching_colorConverterCallback(self, *args)

    def convert(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.OdColorConverterCallbackCaching_convert(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdColorConverterCallbackCaching

# Register OdColorConverterCallbackCaching in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdColorConverterCallbackCaching_swigregister(OdColorConverterCallbackCaching)

class PixColor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r = property(_ODA_Kernel_Py3.PixColor_r_get, _ODA_Kernel_Py3.PixColor_r_set)
    g = property(_ODA_Kernel_Py3.PixColor_g_get, _ODA_Kernel_Py3.PixColor_g_set)
    b = property(_ODA_Kernel_Py3.PixColor_b_get, _ODA_Kernel_Py3.PixColor_b_set)
    a = property(_ODA_Kernel_Py3.PixColor_a_get, _ODA_Kernel_Py3.PixColor_a_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.PixColor_swiginit(self, _ODA_Kernel_Py3.new_PixColor(*args))

    def blend(self, *args) -> "PixColor &":
        return _ODA_Kernel_Py3.PixColor_blend(self, *args)

    def blendPremultipliedAlpha(self, *args) -> "PixColor &":
        return _ODA_Kernel_Py3.PixColor_blendPremultipliedAlpha(self, *args)

    def __sub__(self, *args) -> "PixColor":
        return _ODA_Kernel_Py3.PixColor___sub__(self, *args)

    def __isub__(self, *args) -> "PixColor &":
        return _ODA_Kernel_Py3.PixColor___isub__(self, *args)

    def __add__(self, *args) -> "PixColor":
        return _ODA_Kernel_Py3.PixColor___add__(self, *args)

    def __iadd__(self, *args) -> "PixColor &":
        return _ODA_Kernel_Py3.PixColor___iadd__(self, *args)

    def max(self, *args) -> "float":
        return _ODA_Kernel_Py3.PixColor_max(self, *args)

    def min(self, *args) -> "float":
        return _ODA_Kernel_Py3.PixColor_min(self, *args)

    def average(self, *args) -> "float":
        return _ODA_Kernel_Py3.PixColor_average(self, *args)

    def inverse(self, *args) -> "PixColor &":
        return _ODA_Kernel_Py3.PixColor_inverse(self, *args)

    def __neg__(self, *args) -> "PixColor":
        return _ODA_Kernel_Py3.PixColor___neg__(self, *args)

    def setMax(self, *args) -> "PixColor &":
        return _ODA_Kernel_Py3.PixColor_setMax(self, *args)

    def setMin(self, *args) -> "PixColor &":
        return _ODA_Kernel_Py3.PixColor_setMin(self, *args)

    def __mul__(self, *args) -> "PixColor":
        return _ODA_Kernel_Py3.PixColor___mul__(self, *args)

    def __imul__(self, *args) -> "PixColor &":
        return _ODA_Kernel_Py3.PixColor___imul__(self, *args)

    def __truediv__(self, *args):
        return _ODA_Kernel_Py3.PixColor___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _ODA_Kernel_Py3.PixColor___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def setColor(self, *args) -> "PixColor &":
        return _ODA_Kernel_Py3.PixColor_setColor(self, *args)

    def setAlpha(self, *args) -> "PixColor &":
        return _ODA_Kernel_Py3.PixColor_setAlpha(self, *args)

    def setZero(self, *args) -> "PixColor &":
        return _ODA_Kernel_Py3.PixColor_setZero(self, *args)

    def setOne(self, *args) -> "PixColor &":
        return _ODA_Kernel_Py3.PixColor_setOne(self, *args)

    def clamp(self, *args) -> "PixColor &":
        return _ODA_Kernel_Py3.PixColor_clamp(self, *args)

    def asCRef(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.PixColor_asCRef(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PixColor

# Register PixColor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PixColor_swigregister(PixColor)


def computeAlphaTransparency(*args) -> "void":
    return _ODA_Kernel_Py3.computeAlphaTransparency(*args)
class OdRxModelTreeBaseNodeImpl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getImpl(*args) -> "OdRxModelTreeBaseNodeImpl *":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_getImpl(*args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_swiginit(self, _ODA_Kernel_Py3.new_OdRxModelTreeBaseNodeImpl(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxModelTreeBaseNodeImpl

    def getNodeName(self, *args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_getNodeName(self, *args)

    def getUniqueSourceID(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_getUniqueSourceID(self, *args)

    def getUniqueDBID(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_getUniqueDBID(self, *args)

    def getNodeType(self, *args) -> "HierarchyTreeObjectType":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_getNodeType(self, *args)

    def setNodeName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_setNodeName(self, *args)

    def setUniqueSourceID(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_setUniqueSourceID(self, *args)

    def setNodeType(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_setNodeType(self, *args)

    def setUniqueDBID(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_setUniqueDBID(self, *args)

    def getParents(self, *args) -> "OdRxModelTreeBaseNodeRawPtrArray const &":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_getParents(self, *args)

    def getChildren(self, *args) -> "OdRxModelTreeBaseNodePtrArray const &":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_getChildren(self, *args)

    def addChild(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_addChild(self, *args)

    def outFields(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_outFields(self, *args)

    def serializeProprties(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_serializeProprties(self, *args)

    def inFields(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_inFields(self, *args)

    def deserializeProprties(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_deserializeProprties(self, *args)

    def getProperties(self, *args) -> "OdArray< PropertyInfo > const &":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_getProperties(self, *args)

    def addProperty(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_addProperty(self, *args)

# Register OdRxModelTreeBaseNodeImpl in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_swigregister(OdRxModelTreeBaseNodeImpl)

def OdRxModelTreeBaseNodeImpl_getImpl(*args) -> "OdRxModelTreeBaseNodeImpl *":
    return _ODA_Kernel_Py3.OdRxModelTreeBaseNodeImpl_getImpl(*args)

class OdRxModelHierarchyTreeBaseImpl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def getImpl(*args) -> "OdRxModelHierarchyTreeBaseImpl *":
        return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBaseImpl_getImpl(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxModelHierarchyTreeBaseImpl

    def createDatabaseHierarchyTree(self, *args) -> "OdRxModelTreeBaseNodePtr":
        return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBaseImpl_createDatabaseHierarchyTree(self, *args)

    def getDatabaseNode(self, *args) -> "OdRxModelTreeBaseNodePtr":
        return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBaseImpl_getDatabaseNode(self, *args)

    def serialize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBaseImpl_serialize(self, *args)

    def deserialize(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBaseImpl_deserialize(self, *args)

    def getNodeProperties(self, *args) -> "OdArray< PropertyInfo > const &":
        return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBaseImpl_getNodeProperties(self, *args)

# Register OdRxModelHierarchyTreeBaseImpl in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxModelHierarchyTreeBaseImpl_swigregister(OdRxModelHierarchyTreeBaseImpl)

def OdRxModelHierarchyTreeBaseImpl_getImpl(*args) -> "OdRxModelHierarchyTreeBaseImpl *":
    return _ODA_Kernel_Py3.OdRxModelHierarchyTreeBaseImpl_getImpl(*args)

class BrepBuilderInitialCoedge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    edgeIndex = property(_ODA_Kernel_Py3.BrepBuilderInitialCoedge_edgeIndex_get, _ODA_Kernel_Py3.BrepBuilderInitialCoedge_edgeIndex_set)
    direction = property(_ODA_Kernel_Py3.BrepBuilderInitialCoedge_direction_get, _ODA_Kernel_Py3.BrepBuilderInitialCoedge_direction_set)
    curve = property(_ODA_Kernel_Py3.BrepBuilderInitialCoedge_curve_get, _ODA_Kernel_Py3.BrepBuilderInitialCoedge_curve_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.BrepBuilderInitialCoedge_swiginit(self, _ODA_Kernel_Py3.new_BrepBuilderInitialCoedge(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_BrepBuilderInitialCoedge

# Register BrepBuilderInitialCoedge in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.BrepBuilderInitialCoedge_swigregister(BrepBuilderInitialCoedge)

class BrepBuilderInitialLoop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    coedges = property(_ODA_Kernel_Py3.BrepBuilderInitialLoop_coedges_get, _ODA_Kernel_Py3.BrepBuilderInitialLoop_coedges_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.BrepBuilderInitialLoop_swiginit(self, _ODA_Kernel_Py3.new_BrepBuilderInitialLoop(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_BrepBuilderInitialLoop

# Register BrepBuilderInitialLoop in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.BrepBuilderInitialLoop_swigregister(BrepBuilderInitialLoop)

class BrepBuilderInitialSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pSurf = property(_ODA_Kernel_Py3.BrepBuilderInitialSurface_pSurf_get, _ODA_Kernel_Py3.BrepBuilderInitialSurface_pSurf_set)
    direction = property(_ODA_Kernel_Py3.BrepBuilderInitialSurface_direction_get, _ODA_Kernel_Py3.BrepBuilderInitialSurface_direction_set)
    loops = property(_ODA_Kernel_Py3.BrepBuilderInitialSurface_loops_get, _ODA_Kernel_Py3.BrepBuilderInitialSurface_loops_set)
    material = property(_ODA_Kernel_Py3.BrepBuilderInitialSurface_material_get, _ODA_Kernel_Py3.BrepBuilderInitialSurface_material_set)
    hasMaterialMapping = property(_ODA_Kernel_Py3.BrepBuilderInitialSurface_hasMaterialMapping_get, _ODA_Kernel_Py3.BrepBuilderInitialSurface_hasMaterialMapping_set)
    materialMapper = property(_ODA_Kernel_Py3.BrepBuilderInitialSurface_materialMapper_get, _ODA_Kernel_Py3.BrepBuilderInitialSurface_materialMapper_set)
    hasColor = property(_ODA_Kernel_Py3.BrepBuilderInitialSurface_hasColor_get, _ODA_Kernel_Py3.BrepBuilderInitialSurface_hasColor_set)
    color = property(_ODA_Kernel_Py3.BrepBuilderInitialSurface_color_get, _ODA_Kernel_Py3.BrepBuilderInitialSurface_color_set)
    marker = property(_ODA_Kernel_Py3.BrepBuilderInitialSurface_marker_get, _ODA_Kernel_Py3.BrepBuilderInitialSurface_marker_set)
    parentFaceIdx = property(_ODA_Kernel_Py3.BrepBuilderInitialSurface_parentFaceIdx_get, _ODA_Kernel_Py3.BrepBuilderInitialSurface_parentFaceIdx_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.BrepBuilderInitialSurface_swiginit(self, _ODA_Kernel_Py3.new_BrepBuilderInitialSurface(*args))

    def copyFaceExceptLoops(self, *args) -> "void":
        return _ODA_Kernel_Py3.BrepBuilderInitialSurface_copyFaceExceptLoops(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_BrepBuilderInitialSurface

# Register BrepBuilderInitialSurface in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.BrepBuilderInitialSurface_swigregister(BrepBuilderInitialSurface)

class BrepBuilderInitialVertex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.BrepBuilderInitialVertex_swiginit(self, _ODA_Kernel_Py3.new_BrepBuilderInitialVertex(*args))
    point = property(_ODA_Kernel_Py3.BrepBuilderInitialVertex_point_get, _ODA_Kernel_Py3.BrepBuilderInitialVertex_point_set)
    marker = property(_ODA_Kernel_Py3.BrepBuilderInitialVertex_marker_get, _ODA_Kernel_Py3.BrepBuilderInitialVertex_marker_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_BrepBuilderInitialVertex

# Register BrepBuilderInitialVertex in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.BrepBuilderInitialVertex_swigregister(BrepBuilderInitialVertex)

class BrepBuilderInitialEdge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    curve = property(_ODA_Kernel_Py3.BrepBuilderInitialEdge_curve_get, _ODA_Kernel_Py3.BrepBuilderInitialEdge_curve_set)
    kInvalidIndex = _ODA_Kernel_Py3.BrepBuilderInitialEdge_kInvalidIndex
    vertexIndex = property(_ODA_Kernel_Py3.BrepBuilderInitialEdge_vertexIndex_get, _ODA_Kernel_Py3.BrepBuilderInitialEdge_vertexIndex_set)
    marker = property(_ODA_Kernel_Py3.BrepBuilderInitialEdge_marker_get, _ODA_Kernel_Py3.BrepBuilderInitialEdge_marker_set)
    hasColor = property(_ODA_Kernel_Py3.BrepBuilderInitialEdge_hasColor_get, _ODA_Kernel_Py3.BrepBuilderInitialEdge_hasColor_set)
    color = property(_ODA_Kernel_Py3.BrepBuilderInitialEdge_color_get, _ODA_Kernel_Py3.BrepBuilderInitialEdge_color_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.BrepBuilderInitialEdge_swiginit(self, _ODA_Kernel_Py3.new_BrepBuilderInitialEdge(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_BrepBuilderInitialEdge

# Register BrepBuilderInitialEdge in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.BrepBuilderInitialEdge_swigregister(BrepBuilderInitialEdge)

class BrepBuilderInitialData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vertices = property(_ODA_Kernel_Py3.BrepBuilderInitialData_vertices_get, _ODA_Kernel_Py3.BrepBuilderInitialData_vertices_set)
    edges = property(_ODA_Kernel_Py3.BrepBuilderInitialData_edges_get, _ODA_Kernel_Py3.BrepBuilderInitialData_edges_set)
    complexes = property(_ODA_Kernel_Py3.BrepBuilderInitialData_complexes_get, _ODA_Kernel_Py3.BrepBuilderInitialData_complexes_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.BrepBuilderInitialData_swiginit(self, _ODA_Kernel_Py3.new_BrepBuilderInitialData(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_BrepBuilderInitialData

# Register BrepBuilderInitialData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.BrepBuilderInitialData_swigregister(BrepBuilderInitialData)

class OdBrepBuilderFiller(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def params(self, *args) -> "OdBrepBuilderFillerParams const &":
        return _ODA_Kernel_Py3.OdBrepBuilderFiller_params(self, *args)

    def initFrom(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdBrepBuilderFiller_initFrom(self, *args)

    def initFromNURBSingleFace(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdBrepBuilderFiller_initFromNURBSingleFace(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBrepBuilderFiller_swiginit(self, _ODA_Kernel_Py3.new_OdBrepBuilderFiller(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBrepBuilderFiller

# Register OdBrepBuilderFiller in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBrepBuilderFiller_swigregister(OdBrepBuilderFiller)

class OdBaseMaterialAndColorHelper(OdIMaterialAndColorHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdBaseMaterialAndColorHelper_swiginit(self, _ODA_Kernel_Py3.new_OdBaseMaterialAndColorHelper(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdBaseMaterialAndColorHelper

    def setSourceEntityMaterial(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseMaterialAndColorHelper_setSourceEntityMaterial(self, *args)

    def setSourceEntityMaterialMapping(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseMaterialAndColorHelper_setSourceEntityMaterialMapping(self, *args)

    def resetSourceEntityMapping(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseMaterialAndColorHelper_resetSourceEntityMapping(self, *args)

    def setSourceEntityColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseMaterialAndColorHelper_setSourceEntityColor(self, *args)

    def resetSourceEntityColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseMaterialAndColorHelper_resetSourceEntityColor(self, *args)

    def setSourceFaceColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseMaterialAndColorHelper_setSourceFaceColor(self, *args)

    def resetSourceFaceColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseMaterialAndColorHelper_resetSourceFaceColor(self, *args)

    def setSourceEdgeColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseMaterialAndColorHelper_setSourceEdgeColor(self, *args)

    def resetSourceEdgeColor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdBaseMaterialAndColorHelper_resetSourceEdgeColor(self, *args)

    def getFaceVisualInfo(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdBaseMaterialAndColorHelper_getFaceVisualInfo(self, *args)

    def getEdgeVisualInfo(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdBaseMaterialAndColorHelper_getEdgeVisualInfo(self, *args)
    fFaceHasColor = _ODA_Kernel_Py3.OdBaseMaterialAndColorHelper_fFaceHasColor
    fFaceHasMaterialMapping = _ODA_Kernel_Py3.OdBaseMaterialAndColorHelper_fFaceHasMaterialMapping
    fEdgeHasColor = _ODA_Kernel_Py3.OdBaseMaterialAndColorHelper_fEdgeHasColor
    fNoVisual = _ODA_Kernel_Py3.OdBaseMaterialAndColorHelper_fNoVisual
    fFaceColorAndMappingEdgeColor = _ODA_Kernel_Py3.OdBaseMaterialAndColorHelper_fFaceColorAndMappingEdgeColor

# Register OdBaseMaterialAndColorHelper in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdBaseMaterialAndColorHelper_swigregister(OdBaseMaterialAndColorHelper)

class OdRxAttributeImpl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getImpl(*args) -> "OdRxAttributeImpl *":
        return _ODA_Kernel_Py3.OdRxAttributeImpl_getImpl(*args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdRxAttributeImpl_swiginit(self, _ODA_Kernel_Py3.new_OdRxAttributeImpl(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdRxAttributeImpl

# Register OdRxAttributeImpl in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdRxAttributeImpl_swigregister(OdRxAttributeImpl)

def OdRxAttributeImpl_getImpl(*args) -> "OdRxAttributeImpl *":
    return _ODA_Kernel_Py3.OdRxAttributeImpl_getImpl(*args)

class OdMutexPool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdMutexPool_swiginit(self, _ODA_Kernel_Py3.new_OdMutexPool(*args))

    def initialize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdMutexPool_initialize(self, *args)

    def get(self, *args) -> "OdMutex *":
        return _ODA_Kernel_Py3.OdMutexPool_get(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdMutexPool_clear(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdMutexPool

# Register OdMutexPool in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdMutexPool_swigregister(OdMutexPool)

class OdMutexInPoolAutoLock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdMutexInPoolAutoLock_swiginit(self, _ODA_Kernel_Py3.new_OdMutexInPoolAutoLock(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdMutexInPoolAutoLock

# Register OdMutexInPoolAutoLock in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdMutexInPoolAutoLock_swigregister(OdMutexInPoolAutoLock)

class OdMutexArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdMutexArray

    def size(self, *args) -> "OdMutexArray::size_type":
        return _ODA_Kernel_Py3.OdMutexArray_size(self, *args)

    def empty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdMutexArray_empty(self, *args)

    def resize(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdMutexArray_resize(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdMutexArray_swiginit(self, _ODA_Kernel_Py3.new_OdMutexArray(*args))

# Register OdMutexArray in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdMutexArray_swigregister(OdMutexArray)

class AutoMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.AutoMaterial_swiginit(self, _ODA_Kernel_Py3.new_AutoMaterial(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_AutoMaterial

# Register AutoMaterial in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.AutoMaterial_swigregister(AutoMaterial)

class OdIBrepBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrepBuilder

    def getType(self, *args) -> "BrepType":
        return _ODA_Kernel_Py3.OdIBrepBuilder_getType(self, *args)

    def addCoedge(self, *args) -> "BRepBuilderGeometryId":
        return _ODA_Kernel_Py3.OdIBrepBuilder_addCoedge(self, *args)

    def addEdge(self, *args) -> "BRepBuilderGeometryId":
        return _ODA_Kernel_Py3.OdIBrepBuilder_addEdge(self, *args)

    def addVertex(self, *args) -> "BRepBuilderGeometryId":
        return _ODA_Kernel_Py3.OdIBrepBuilder_addVertex(self, *args)

    def addFace(self, *args) -> "BRepBuilderGeometryId":
        return _ODA_Kernel_Py3.OdIBrepBuilder_addFace(self, *args)

    def addLoop(self, *args) -> "BRepBuilderGeometryId":
        return _ODA_Kernel_Py3.OdIBrepBuilder_addLoop(self, *args)

    def addShell(self, *args) -> "BRepBuilderGeometryId":
        return _ODA_Kernel_Py3.OdIBrepBuilder_addShell(self, *args)

    def addComplex(self, *args) -> "BRepBuilderGeometryId":
        return _ODA_Kernel_Py3.OdIBrepBuilder_addComplex(self, *args)

    def setTag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrepBuilder_setTag(self, *args)

    def allowRemovalOfProblematicFaces(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrepBuilder_allowRemovalOfProblematicFaces(self, *args)

    def canAddGeometry(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrepBuilder_canAddGeometry(self, *args)

    def finishComplex(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrepBuilder_finishComplex(self, *args)

    def finishShell(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrepBuilder_finishShell(self, *args)

    def finishFace(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrepBuilder_finishFace(self, *args)

    def finishLoop(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrepBuilder_finishLoop(self, *args)

    def getResult(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdIBrepBuilder_getResult(self, *args)

    def isPermittedSurfaceType(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrepBuilder_isPermittedSurfaceType(self, *args)

    def isResultAvailable(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrepBuilder_isResultAvailable(self, *args)

    def isValidEdgeId(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrepBuilder_isValidEdgeId(self, *args)

    def isValidComplexId(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrepBuilder_isValidComplexId(self, *args)

    def isValidShellId(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrepBuilder_isValidShellId(self, *args)

    def isValidFaceId(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrepBuilder_isValidFaceId(self, *args)

    def isValidLoopId(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrepBuilder_isValidLoopId(self, *args)

    def removedSomeFaces(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrepBuilder_removedSomeFaces(self, *args)

    def setAllowShortEdges(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrepBuilder_setAllowShortEdges(self, *args)

    def setFlag(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrepBuilder_setFlag(self, *args)

    def setFacesMaterial(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrepBuilder_setFacesMaterial(self, *args)

    def setFaceMaterialMapping(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdIBrepBuilder_setFaceMaterialMapping(self, *args)

    def setEdgeColor(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdIBrepBuilder_setEdgeColor(self, *args)

    def setFaceColor(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdIBrepBuilder_setFaceColor(self, *args)

    def finish(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.OdIBrepBuilder_finish(self, *args)

    def enableValidator(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrepBuilder_enableValidator(self, *args)

    def getValidationErrors(self, *args) -> "ValidationErrors const *":
        return _ODA_Kernel_Py3.OdIBrepBuilder_getValidationErrors(self, *args)

# Register OdIBrepBuilder in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrepBuilder_swigregister(OdIBrepBuilder)

class OdITrVertexLoop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdITrVertexLoop

# Register OdITrVertexLoop in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdITrVertexLoop_swigregister(OdITrVertexLoop)

class OdITrVertexEdge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdITrVertexEdge

# Register OdITrVertexEdge in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdITrVertexEdge_swigregister(OdITrVertexEdge)

class OdITrShellFace(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdITrShellFace

# Register OdITrShellFace in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdITrShellFace_swigregister(OdITrShellFace)

class OdITrMesh2dElement2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdITrMesh2dElement2d

# Register OdITrMesh2dElement2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdITrMesh2dElement2d_swigregister(OdITrMesh2dElement2d)

class OdITrLoopVertex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdITrLoopVertex

# Register OdITrLoopVertex in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdITrLoopVertex_swigregister(OdITrLoopVertex)

class OdITrLoopEdge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def init(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdITrLoopEdge_init(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdITrLoopEdge

# Register OdITrLoopEdge in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdITrLoopEdge_swigregister(OdITrLoopEdge)

class OdITrFileBrep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdITrFileBrep

# Register OdITrFileBrep in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdITrFileBrep_swigregister(OdITrFileBrep)

class OdITrFaceLoop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdITrFaceLoop

# Register OdITrFaceLoop in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdITrFaceLoop_swigregister(OdITrFaceLoop)

class OdITrElement2dNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getSurfaceNormal(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdITrElement2dNode_getSurfaceNormal(self, *args)

    def getParamPoint(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdITrElement2dNode_getParamPoint(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdITrElement2dNode

# Register OdITrElement2dNode in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdITrElement2dNode_swigregister(OdITrElement2dNode)

class OdITrEdgeLoop(OdIBaseTraverser):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getParent(self, *args) -> "OdIBrCoedge const *":
        return _ODA_Kernel_Py3.OdITrEdgeLoop_getParent(self, *args)

    def getCurrent(self, *args) -> "OdIBrCoedge const *":
        return _ODA_Kernel_Py3.OdITrEdgeLoop_getCurrent(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdITrEdgeLoop

    def init(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdITrEdgeLoop_init(self, *args)

    def done(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdITrEdgeLoop_done(self, *args)

    def next(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdITrEdgeLoop_next(self, *args)

    def restart(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdITrEdgeLoop_restart(self, *args)

    def isNull(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdITrEdgeLoop_isNull(self, *args)

# Register OdITrEdgeLoop in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdITrEdgeLoop_swigregister(OdITrEdgeLoop)

class OdITrComplexShell(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdITrComplexShell

# Register OdITrComplexShell in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdITrComplexShell_swigregister(OdITrComplexShell)

class OdITrBrepVertex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdITrBrepVertex

# Register OdITrBrepVertex in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdITrBrepVertex_swigregister(OdITrBrepVertex)

class OdITrBrepShell(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdITrBrepShell

# Register OdITrBrepShell in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdITrBrepShell_swigregister(OdITrBrepShell)

class OdITrBrepFace(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdITrBrepFace

# Register OdITrBrepFace in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdITrBrepFace_swigregister(OdITrBrepFace)

class OdITrBrepEdge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdITrBrepEdge

# Register OdITrBrepEdge in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdITrBrepEdge_swigregister(OdITrBrepEdge)

class OdITrBrepComplex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdITrBrepComplex

# Register OdITrBrepComplex in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdITrBrepComplex_swigregister(OdITrBrepComplex)

class OdIBrVertex(OdIBrEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getPoint(self, *args) -> "OdGePoint3d":
        return _ODA_Kernel_Py3.OdIBrVertex_getPoint(self, *args)

    def next(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrVertex_next(self, *args)

    def getParamPoint(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrVertex_getParamPoint(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrVertex

# Register OdIBrVertex in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrVertex_swigregister(OdIBrVertex)

class OdIBrShell(OdIBrEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getComplex(self, *args) -> "OdIBrComplex *":
        return _ODA_Kernel_Py3.OdIBrShell_getComplex(self, *args)

    def next(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrShell_next(self, *args)

    def getType(self, *args) -> "BrShellType":
        return _ODA_Kernel_Py3.OdIBrShell_getType(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrShell

# Register OdIBrShell in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrShell_swigregister(OdIBrShell)

class OdIBrNode(OdIBrMeshEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getPoint(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrNode_getPoint(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrNode

# Register OdIBrNode in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrNode_swigregister(OdIBrNode)

class OdIBrMesh2dControl(OdIBrMeshControl):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setMaxAspectRatio(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrMesh2dControl_setMaxAspectRatio(self, *args)

    def getMaxAspectRatio(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrMesh2dControl_getMaxAspectRatio(self, *args)

    def setElementShape(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrMesh2dControl_setElementShape(self, *args)

    def getElementShape(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrMesh2dControl_getElementShape(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrMesh2dControl

# Register OdIBrMesh2dControl in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrMesh2dControl_swigregister(OdIBrMesh2dControl)

class OdIBrMesh2d(OdIBrMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def next(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrMesh2d_next(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrMesh2d

# Register OdIBrMesh2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrMesh2d_swigregister(OdIBrMesh2d)

class OdIBrHit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrHit

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrHit_isEqualTo(self, *args)

    def copy(self, *args) -> "OdIBrHit *":
        return _ODA_Kernel_Py3.OdIBrHit_copy(self, *args)

    def isNull(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrHit_isNull(self, *args)

    def brepChanged(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrHit_brepChanged(self, *args)

    def getEntityHit(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrHit_getEntityHit(self, *args)

    def getEntityEntered(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrHit_getEntityEntered(self, *args)

    def getEntityAssociated(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrHit_getEntityAssociated(self, *args)

    def getPoint(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrHit_getPoint(self, *args)

# Register OdIBrHit in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrHit_swigregister(OdIBrHit)

class OdIBrFile(OdIBrEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def next(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrFile_next(self, *args)

    def setSubentPath(self, *args) -> "OdIBrEntity *":
        return _ODA_Kernel_Py3.OdIBrFile_setSubentPath(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrFile

# Register OdIBrFile in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrFile_swigregister(OdIBrFile)

class OdIBrFace(OdIBrEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getSurfaceAsNurb(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrFace_getSurfaceAsNurb(self, *args)

    def getSurface(self, *args) -> "OdGeSurface *":
        return _ODA_Kernel_Py3.OdIBrFace_getSurface(self, *args)

    def getSurfaceType(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrFace_getSurfaceType(self, *args)

    def getOrientToSurface(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrFace_getOrientToSurface(self, *args)

    def getShell(self, *args) -> "OdIBrShell *":
        return _ODA_Kernel_Py3.OdIBrFace_getShell(self, *args)

    def next(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrFace_next(self, *args)

    def getTrueColor(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrFace_getTrueColor(self, *args)

    def getColorIndex(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrFace_getColorIndex(self, *args)

    def getMaterial(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrFace_getMaterial(self, *args)

    def getFillPattern(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrFace_getFillPattern(self, *args)

    def getFillingAttributes(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrFace_getFillingAttributes(self, *args)

    def getMaterialMapper(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrFace_getMaterialMapper(self, *args)

    def getExtraFillingAttributes(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrFace_getExtraFillingAttributes(self, *args)

    def getFill(self, *args) -> "OdGiFill const *":
        return _ODA_Kernel_Py3.OdIBrFace_getFill(self, *args)

    def getFirstFaceRegion(self, *args) -> "OdIBrFace *":
        return _ODA_Kernel_Py3.OdIBrFace_getFirstFaceRegion(self, *args)

    def getNextFaceRegion(self, *args) -> "OdIBrFace *":
        return _ODA_Kernel_Py3.OdIBrFace_getNextFaceRegion(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrFace

# Register OdIBrFace in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrFace_swigregister(OdIBrFace)

class OdIBrElement2d(OdIBrElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getNormal(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrElement2d_getNormal(self, *args)

    def parent(self, *args) -> "OdIBrMesh2d *":
        return _ODA_Kernel_Py3.OdIBrElement2d_parent(self, *args)

    def next(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrElement2d_next(self, *args)

    def getSurfaceNormal(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrElement2d_getSurfaceNormal(self, *args)

    def getParamPoint(self, *args) -> "OdBrErrorStatus":
        return _ODA_Kernel_Py3.OdIBrElement2d_getParamPoint(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrElement2d

# Register OdIBrElement2d in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrElement2d_swigregister(OdIBrElement2d)

class OdIBrComplex(OdIBrEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def next(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdIBrComplex_next(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrComplex

# Register OdIBrComplex in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrComplex_swigregister(OdIBrComplex)

class OdIBrBrep(OdIBrEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getTransformation(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdIBrBrep_getTransformation(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdIBrBrep

# Register OdIBrBrep in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdIBrBrep_swigregister(OdIBrBrep)

SKIP_RATIO = _ODA_Kernel_Py3.SKIP_RATIO
POINTS_LIMIT = _ODA_Kernel_Py3.POINTS_LIMIT
GR_INVALID = _ODA_Kernel_Py3.GR_INVALID
GR_SPHERE = _ODA_Kernel_Py3.GR_SPHERE
GR_HEMISPHERE = _ODA_Kernel_Py3.GR_HEMISPHERE
GR_CURVED = _ODA_Kernel_Py3.GR_CURVED
GR_LINEAR = _ODA_Kernel_Py3.GR_LINEAR
GR_CYLINDER = _ODA_Kernel_Py3.GR_CYLINDER
OdGeHatchLoopType_Default = _ODA_Kernel_Py3.OdGeHatchLoopType_Default
OdGeHatchLoopType_External = _ODA_Kernel_Py3.OdGeHatchLoopType_External
OdGeHatchLoopType_Polyline = _ODA_Kernel_Py3.OdGeHatchLoopType_Polyline
OdGeHatchLoopType_Derived = _ODA_Kernel_Py3.OdGeHatchLoopType_Derived
OdGeHatchLoopType_Textbox = _ODA_Kernel_Py3.OdGeHatchLoopType_Textbox
OdGeHatchLoopType_Outermost = _ODA_Kernel_Py3.OdGeHatchLoopType_Outermost
OdGeHatchLoopType_NotClosed = _ODA_Kernel_Py3.OdGeHatchLoopType_NotClosed
OdGeHatchLoopType_SelfIntersecting = _ODA_Kernel_Py3.OdGeHatchLoopType_SelfIntersecting
OdGeHatchLoopType_TextIsland = _ODA_Kernel_Py3.OdGeHatchLoopType_TextIsland
class GiLoop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_edges = property(_ODA_Kernel_Py3.GiLoop_m_edges_get, _ODA_Kernel_Py3.GiLoop_m_edges_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.GiLoop_swiginit(self, _ODA_Kernel_Py3.new_GiLoop(*args))

    def isPolyline(self, *args) -> "bool":
        return _ODA_Kernel_Py3.GiLoop_isPolyline(self, *args)

    def isDerived(self, *args) -> "bool":
        return _ODA_Kernel_Py3.GiLoop_isDerived(self, *args)

    def isTextBox(self, *args) -> "bool":
        return _ODA_Kernel_Py3.GiLoop_isTextBox(self, *args)

    def isOuterMost(self, *args) -> "bool":
        return _ODA_Kernel_Py3.GiLoop_isOuterMost(self, *args)

    def isNotClosed(self, *args) -> "bool":
        return _ODA_Kernel_Py3.GiLoop_isNotClosed(self, *args)

    def isDuplicate(self, *args) -> "bool":
        return _ODA_Kernel_Py3.GiLoop_isDuplicate(self, *args)

    def isTextIsland(self, *args) -> "bool":
        return _ODA_Kernel_Py3.GiLoop_isTextIsland(self, *args)

    def isAnnotative(self, *args) -> "bool":
        return _ODA_Kernel_Py3.GiLoop_isAnnotative(self, *args)

    def getFlags(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.GiLoop_getFlags(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_GiLoop

# Register GiLoop in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.GiLoop_swigregister(GiLoop)

class GiLoopListCustom(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    startLoopNum = property(_ODA_Kernel_Py3.GiLoopListCustom_startLoopNum_get)
    countLoops = property(_ODA_Kernel_Py3.GiLoopListCustom_countLoops_get)
    mLoopList = property(_ODA_Kernel_Py3.GiLoopListCustom_mLoopList_get, _ODA_Kernel_Py3.GiLoopListCustom_mLoopList_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.GiLoopListCustom_swiginit(self, _ODA_Kernel_Py3.new_GiLoopListCustom(*args))

    def appendLoop(self, *args) -> "void":
        return _ODA_Kernel_Py3.GiLoopListCustom_appendLoop(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_GiLoopListCustom

# Register GiLoopListCustom in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.GiLoopListCustom_swigregister(GiLoopListCustom)

class OdGeStrokeData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeStrokeData_swiginit(self, _ODA_Kernel_Py3.new_OdGeStrokeData(*args))

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeStrokeData___eq__(self, *args)
    m_startNum = property(_ODA_Kernel_Py3.OdGeStrokeData_m_startNum_get, _ODA_Kernel_Py3.OdGeStrokeData_m_startNum_set)
    m_endNum = property(_ODA_Kernel_Py3.OdGeStrokeData_m_endNum_get, _ODA_Kernel_Py3.OdGeStrokeData_m_endNum_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeStrokeData

# Register OdGeStrokeData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeStrokeData_swigregister(OdGeStrokeData)

class OdGeHatchStrokes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getNearestStroke(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeHatchStrokes_getNearestStroke(self, *args)

    def getNextStroke(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeHatchStrokes_getNextStroke(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeHatchStrokes

# Register OdGeHatchStrokes in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeHatchStrokes_swigregister(OdGeHatchStrokes)

class OdGeEqualStepHatchStrokes(OdGeHatchStrokes):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeEqualStepHatchStrokes_swiginit(self, _ODA_Kernel_Py3.new_OdGeEqualStepHatchStrokes(*args))

    def getNearestStroke(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEqualStepHatchStrokes_getNearestStroke(self, *args)

    def getNextStroke(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeEqualStepHatchStrokes_getNextStroke(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeEqualStepHatchStrokes

# Register OdGeEqualStepHatchStrokes in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeEqualStepHatchStrokes_swigregister(OdGeEqualStepHatchStrokes)

class OdGeNonEqualStepHatchStrokes(OdGeHatchStrokes):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeNonEqualStepHatchStrokes_swiginit(self, _ODA_Kernel_Py3.new_OdGeNonEqualStepHatchStrokes(*args))

    def getNearestStroke(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeNonEqualStepHatchStrokes_getNearestStroke(self, *args)

    def getNextStroke(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdGeNonEqualStepHatchStrokes_getNextStroke(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeNonEqualStepHatchStrokes

# Register OdGeNonEqualStepHatchStrokes in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeNonEqualStepHatchStrokes_swigregister(OdGeNonEqualStepHatchStrokes)

class OdGeShellData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_vertices = property(_ODA_Kernel_Py3.OdGeShellData_m_vertices_get, _ODA_Kernel_Py3.OdGeShellData_m_vertices_set)
    m_faces = property(_ODA_Kernel_Py3.OdGeShellData_m_faces_get, _ODA_Kernel_Py3.OdGeShellData_m_faces_set)
    m_edgeVisibilities = property(_ODA_Kernel_Py3.OdGeShellData_m_edgeVisibilities_get, _ODA_Kernel_Py3.OdGeShellData_m_edgeVisibilities_set)
    m_colors = property(_ODA_Kernel_Py3.OdGeShellData_m_colors_get, _ODA_Kernel_Py3.OdGeShellData_m_colors_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdGeShellData_swiginit(self, _ODA_Kernel_Py3.new_OdGeShellData(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeShellData

# Register OdGeShellData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeShellData_swigregister(OdGeShellData)


def OdGeDrawSegmentHatch(*args) -> "void":
    return _ODA_Kernel_Py3.OdGeDrawSegmentHatch(*args)

def OdGeDrawSegmentHatchXY(*args) -> "void":
    return _ODA_Kernel_Py3.OdGeDrawSegmentHatchXY(*args)

def build2dShell(*args) -> "OdResult":
    return _ODA_Kernel_Py3.build2dShell(*args)
class OdGeHatchDashTaker(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def dash(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeHatchDashTaker_dash(self, *args)

    def setShift(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeHatchDashTaker_setShift(self, *args)

    def setDashPeriod(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeHatchDashTaker_setDashPeriod(self, *args)

    def hasCache(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdGeHatchDashTaker_hasCache(self, *args)

    def setDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeHatchDashTaker_setDeviation(self, *args)

    def setSmallerDashPeriod(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdGeHatchDashTaker_setSmallerDashPeriod(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdGeHatchDashTaker

# Register OdGeHatchDashTaker in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdGeHatchDashTaker_swigregister(OdGeHatchDashTaker)

class DashTakerHatchImpl(OdGeHatchDashTaker):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.DashTakerHatchImpl_swiginit(self, _ODA_Kernel_Py3.new_DashTakerHatchImpl(*args))

    def setDashPeriod(self, *args) -> "void":
        return _ODA_Kernel_Py3.DashTakerHatchImpl_setDashPeriod(self, *args)

    def setShift(self, *args) -> "void":
        return _ODA_Kernel_Py3.DashTakerHatchImpl_setShift(self, *args)

    def hasCache(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DashTakerHatchImpl_hasCache(self, *args)

    def setSmallerDashPeriod(self, *args) -> "void":
        return _ODA_Kernel_Py3.DashTakerHatchImpl_setSmallerDashPeriod(self, *args)

    def dash(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DashTakerHatchImpl_dash(self, *args)

    def setDeviation(self, *args) -> "void":
        return _ODA_Kernel_Py3.DashTakerHatchImpl_setDeviation(self, *args)

    def shift(self, *args) -> "OdGeVector2d":
        return _ODA_Kernel_Py3.DashTakerHatchImpl_shift(self, *args)

    def getStartPoints(self, *args) -> "OdGePoint2dArray":
        return _ODA_Kernel_Py3.DashTakerHatchImpl_getStartPoints(self, *args)

    def getEndPoints(self, *args) -> "OdGePoint2dArray":
        return _ODA_Kernel_Py3.DashTakerHatchImpl_getEndPoints(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_DashTakerHatchImpl

# Register DashTakerHatchImpl in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.DashTakerHatchImpl_swigregister(DashTakerHatchImpl)


def odgeDrawDashedHatch(*args) -> "OdResult":
    return _ODA_Kernel_Py3.odgeDrawDashedHatch(*args)

def fillSegmentLoopLtArrays(*args) -> "void":
    return _ODA_Kernel_Py3.fillSegmentLoopLtArrays(*args)

def processGradientHatch(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.processGradientHatch(*args)

def calculateEffectiveTolerance(*args) -> "OdGeTol":
    return _ODA_Kernel_Py3.calculateEffectiveTolerance(*args)

def calculateDashTakerDeviation(*args) -> "double":
    return _ODA_Kernel_Py3.calculateDashTakerDeviation(*args)

def checkDenstiy(*args) -> "bool":
    return _ODA_Kernel_Py3.checkDenstiy(*args)

def evaluateDashedHatch(*args) -> "OdResult":
    return _ODA_Kernel_Py3.evaluateDashedHatch(*args)
class OdTextIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def currPos(self, *args) -> "OdChar const *":
        return _ODA_Kernel_Py3.OdTextIterator_currPos(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdTextIterator_swiginit(self, _ODA_Kernel_Py3.new_OdTextIterator(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdTextIterator

    def __ref__(self, *args) -> "OdChar":
        return _ODA_Kernel_Py3.OdTextIterator___ref__(self, *args)

    def currProperties(self, *args) -> "OdCharacterProperties const &":
        return _ODA_Kernel_Py3.OdTextIterator_currProperties(self, *args)

    def nextChar(self, *args) -> "OdChar":
        return _ODA_Kernel_Py3.OdTextIterator_nextChar(self, *args)

    def currIsToleranceDivider(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTextIterator_currIsToleranceDivider(self, *args)

    def setProcessToleranceDivider(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTextIterator_setProcessToleranceDivider(self, *args)

    def getTextAsDByte(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdTextIterator_getTextAsDByte(self, *args)

    def breakSafely(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdTextIterator_breakSafely(self, *args)

    def setProcessMIF(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdTextIterator_setProcessMIF(self, *args)

# Register OdTextIterator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdTextIterator_swigregister(OdTextIterator)


def convertTextToCodePage(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.convertTextToCodePage(*args)
class OdAnsiTextIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def OdAnsiTextIteratorNotRequired(*args) -> "OdAnsiString const &":
        return _ODA_Kernel_Py3.OdAnsiTextIterator_OdAnsiTextIteratorNotRequired(*args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdAnsiTextIterator_swiginit(self, _ODA_Kernel_Py3.new_OdAnsiTextIterator(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdAnsiTextIterator

    def currPos(self, *args) -> "char const *":
        return _ODA_Kernel_Py3.OdAnsiTextIterator_currPos(self, *args)

    def __ref__(self, *args) -> "OdChar":
        return _ODA_Kernel_Py3.OdAnsiTextIterator___ref__(self, *args)

    def nextChar(self, *args) -> "OdChar":
        return _ODA_Kernel_Py3.OdAnsiTextIterator_nextChar(self, *args)

    def breakSafely(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdAnsiTextIterator_breakSafely(self, *args)

# Register OdAnsiTextIterator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdAnsiTextIterator_swigregister(OdAnsiTextIterator)

def OdAnsiTextIterator_OdAnsiTextIteratorNotRequired(*args) -> "OdAnsiString const &":
    return _ODA_Kernel_Py3.OdAnsiTextIterator_OdAnsiTextIteratorNotRequired(*args)

class LineStats(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_Height = property(_ODA_Kernel_Py3.LineStats_m_Height_get, _ODA_Kernel_Py3.LineStats_m_Height_set)
    m_Width = property(_ODA_Kernel_Py3.LineStats_m_Width_get, _ODA_Kernel_Py3.LineStats_m_Width_set)
    m_MinY = property(_ODA_Kernel_Py3.LineStats_m_MinY_get, _ODA_Kernel_Py3.LineStats_m_MinY_set)
    m_MaxY = property(_ODA_Kernel_Py3.LineStats_m_MaxY_get, _ODA_Kernel_Py3.LineStats_m_MaxY_set)
    m_MinX = property(_ODA_Kernel_Py3.LineStats_m_MinX_get, _ODA_Kernel_Py3.LineStats_m_MinX_set)
    m_MaxX = property(_ODA_Kernel_Py3.LineStats_m_MaxX_get, _ODA_Kernel_Py3.LineStats_m_MaxX_set)
    m_TextSizeMaxY = property(_ODA_Kernel_Py3.LineStats_m_TextSizeMaxY_get, _ODA_Kernel_Py3.LineStats_m_TextSizeMaxY_set)
    m_MaxTextSize = property(_ODA_Kernel_Py3.LineStats_m_MaxTextSize_get, _ODA_Kernel_Py3.LineStats_m_MaxTextSize_set)
    m_StackedHeight = property(_ODA_Kernel_Py3.LineStats_m_StackedHeight_get, _ODA_Kernel_Py3.LineStats_m_StackedHeight_set)
    m_LastWordHeight = property(_ODA_Kernel_Py3.LineStats_m_LastWordHeight_get, _ODA_Kernel_Py3.LineStats_m_LastWordHeight_set)
    m_TextSizeForLinespace = property(_ODA_Kernel_Py3.LineStats_m_TextSizeForLinespace_get, _ODA_Kernel_Py3.LineStats_m_TextSizeForLinespace_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.LineStats_swiginit(self, _ODA_Kernel_Py3.new_LineStats(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_LineStats

    def getHeightForAligned(self, *args) -> "double":
        return _ODA_Kernel_Py3.LineStats_getHeightForAligned(self, *args)

    def caclulateLineSpace(self, *args) -> "double":
        return _ODA_Kernel_Py3.LineStats_caclulateLineSpace(self, *args)

# Register LineStats in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.LineStats_swigregister(LineStats)


def mapCodepage(*args) -> "OdCodePageId":
    return _ODA_Kernel_Py3.mapCodepage(*args)

def reMapCodepage(*args) -> "OdInt16":
    return _ODA_Kernel_Py3.reMapCodepage(*args)

def isAsianCodepage(*args) -> "bool":
    return _ODA_Kernel_Py3.isAsianCodepage(*args)

def GetCPageIdByName(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.GetCPageIdByName(*args)

def getCodePageStr(*args) -> "OdString const":
    return _ODA_Kernel_Py3.getCodePageStr(*args)

def IsMultiByteCodePage(*args) -> "bool":
    return _ODA_Kernel_Py3.IsMultiByteCodePage(*args)

def oddbConvertTextToCodePage(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.oddbConvertTextToCodePage(*args)

def checkSpecialSymbol(*args) -> "OdChar":
    return _ODA_Kernel_Py3.checkSpecialSymbol(*args)
enShxHorChar = _ODA_Kernel_Py3.enShxHorChar
enShxHorCharWithPenUp = _ODA_Kernel_Py3.enShxHorCharWithPenUp
enShxVertChar = _ODA_Kernel_Py3.enShxVertChar
enShxVertCharWithPenUp = _ODA_Kernel_Py3.enShxVertCharWithPenUp
class OdShxTextData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdShxTextData_swiginit(self, _ODA_Kernel_Py3.new_OdShxTextData(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdShxTextData

    def hasScale(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdShxTextData_hasScale(self, *args)

    def __nonzero__(self):
        return _ODA_Kernel_Py3.OdShxTextData___nonzero__(self)
    __bool__ = __nonzero__



# Register OdShxTextData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdShxTextData_swigregister(OdShxTextData)

class OdShxFont(OdFont):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdShxFont >":
        return _ODA_Kernel_Py3.OdShxFont_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdShxFont_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdShxFont_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdShxFont_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdShxFont >":
        return _ODA_Kernel_Py3.OdShxFont_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdShxFont

    def getBfWidth(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdShxFont_getBfWidth(self, *args)

    def getBfHeight(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.OdShxFont_getBfHeight(self, *args)

    def getAbove(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdShxFont_getAbove(self, *args)

    def getBelow(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdShxFont_getBelow(self, *args)

    def initialize(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdShxFont_initialize(self, *args)

    def drawCharacter(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdShxFont_drawCharacter(self, *args)

    def shapeNameByIndex(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdShxFont_shapeNameByIndex(self, *args)

    def shapeIndexByName(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.OdShxFont_shapeIndexByName(self, *args)

    def getAvailableChars(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdShxFont_getAvailableChars(self, *args)

    def hasCharacter(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdShxFont_hasCharacter(self, *args)

    @staticmethod
    def createFont(*args) -> "OdShxFontPtr":
        return _ODA_Kernel_Py3.OdShxFont_createFont(*args)

    def loadFromInitFile(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdShxFont_loadFromInitFile(self, *args)

    def setMainShxFont(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdShxFont_setMainShxFont(self, *args)

    def getMainShxFont(self, *args) -> "OdShxFont const *":
        return _ODA_Kernel_Py3.OdShxFont_getMainShxFont(self, *args)

    def getScore(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdShxFont_getScore(self, *args)

    def supportsVerticalMode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdShxFont_supportsVerticalMode(self, *args)

    def setFileName(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdShxFont_setFileName(self, *args)

    def getFileName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdShxFont_getFileName(self, *args)

    def getDescriptor(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdShxFont_getDescriptor(self, *args)

    def drawCharacterImp(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdShxFont_drawCharacterImp(self, *args)

# Register OdShxFont in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdShxFont_swigregister(OdShxFont)

def OdShxFont_cast(*args) -> "OdSmartPtr< OdShxFont >":
    return _ODA_Kernel_Py3.OdShxFont_cast(*args)

def OdShxFont_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdShxFont_desc(*args)

def OdShxFont_createObject(*args) -> "OdSmartPtr< OdShxFont >":
    return _ODA_Kernel_Py3.OdShxFont_createObject(*args)

def OdShxFont_createFont(*args) -> "OdShxFontPtr":
    return _ODA_Kernel_Py3.OdShxFont_createFont(*args)

class CharLoc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_FileLoc = property(_ODA_Kernel_Py3.CharLoc_m_FileLoc_get, _ODA_Kernel_Py3.CharLoc_m_FileLoc_set)
    m_ShapeNo = property(_ODA_Kernel_Py3.CharLoc_m_ShapeNo_get, _ODA_Kernel_Py3.CharLoc_m_ShapeNo_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.CharLoc_swiginit(self, _ODA_Kernel_Py3.new_CharLoc(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_CharLoc

# Register CharLoc in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.CharLoc_swigregister(CharLoc)

class OdFontStore(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_fileName = property(_ODA_Kernel_Py3.OdFontStore_m_fileName_get, _ODA_Kernel_Py3.OdFontStore_m_fileName_set)
    m_font = property(_ODA_Kernel_Py3.OdFontStore_m_font_get, _ODA_Kernel_Py3.OdFontStore_m_font_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdFontStore_swiginit(self, _ODA_Kernel_Py3.new_OdFontStore(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdFontStore

# Register OdFontStore in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdFontStore_swigregister(OdFontStore)

class OdFontTable(OdMutex, OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdFontTable

    @staticmethod
    def fontTable(*args) -> "OdFontTable *":
        return _ODA_Kernel_Py3.OdFontTable_fontTable(*args)

    @staticmethod
    def init(*args) -> "void":
        return _ODA_Kernel_Py3.OdFontTable_init(*args)

    @staticmethod
    def uninit(*args) -> "void":
        return _ODA_Kernel_Py3.OdFontTable_uninit(*args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdFontTable_clear(self, *args)

    def defaultFont(self, *args) -> "OdFontPtr":
        return _ODA_Kernel_Py3.OdFontTable_defaultFont(self, *args)

    def defaultGdtFont(self, *args) -> "OdFontPtr":
        return _ODA_Kernel_Py3.OdFontTable_defaultGdtFont(self, *args)

    def defaultShapeFont(self, *args) -> "OdFontPtr":
        return _ODA_Kernel_Py3.OdFontTable_defaultShapeFont(self, *args)

    @staticmethod
    def setDefaultShxFont(*args) -> "void":
        return _ODA_Kernel_Py3.OdFontTable_setDefaultShxFont(*args)

    @staticmethod
    def setDefaultGdtFont(*args) -> "void":
        return _ODA_Kernel_Py3.OdFontTable_setDefaultGdtFont(*args)

    @staticmethod
    def getFont(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdFontTable_getFont(*args)

    @staticmethod
    def getFontKey(*args) -> "OdString":
        return _ODA_Kernel_Py3.OdFontTable_getFontKey(*args)

    @staticmethod
    def getFontByKey(*args) -> "OdString const &, OdString &":
        return _ODA_Kernel_Py3.OdFontTable_getFontByKey(*args)

    @staticmethod
    def getFontAt(*args) -> "OdFontPtr":
        return _ODA_Kernel_Py3.OdFontTable_getFontAt(*args)

    @staticmethod
    def removeFontAt(*args) -> "void":
        return _ODA_Kernel_Py3.OdFontTable_removeFontAt(*args)

    @staticmethod
    def addFontByKey(*args) -> "OdString const &, OdString const &":
        return _ODA_Kernel_Py3.OdFontTable_addFontByKey(*args)

# Register OdFontTable in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdFontTable_swigregister(OdFontTable)

def OdFontTable_fontTable(*args) -> "OdFontTable *":
    return _ODA_Kernel_Py3.OdFontTable_fontTable(*args)

def OdFontTable_init(*args) -> "void":
    return _ODA_Kernel_Py3.OdFontTable_init(*args)

def OdFontTable_uninit(*args) -> "void":
    return _ODA_Kernel_Py3.OdFontTable_uninit(*args)

def OdFontTable_setDefaultShxFont(*args) -> "void":
    return _ODA_Kernel_Py3.OdFontTable_setDefaultShxFont(*args)

def OdFontTable_setDefaultGdtFont(*args) -> "void":
    return _ODA_Kernel_Py3.OdFontTable_setDefaultGdtFont(*args)

def OdFontTable_getFont(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdFontTable_getFont(*args)

def OdFontTable_getFontKey(*args) -> "OdString":
    return _ODA_Kernel_Py3.OdFontTable_getFontKey(*args)

def OdFontTable_getFontByKey(*args) -> "OdString const &, OdString &":
    return _ODA_Kernel_Py3.OdFontTable_getFontByKey(*args)

def OdFontTable_getFontAt(*args) -> "OdFontPtr":
    return _ODA_Kernel_Py3.OdFontTable_getFontAt(*args)

def OdFontTable_removeFontAt(*args) -> "void":
    return _ODA_Kernel_Py3.OdFontTable_removeFontAt(*args)

def OdFontTable_addFontByKey(*args) -> "OdString const &, OdString const &":
    return _ODA_Kernel_Py3.OdFontTable_addFontByKey(*args)

class OdFontMapper(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdFontMapper

    @staticmethod
    def init(*args) -> "void":
        return _ODA_Kernel_Py3.OdFontMapper_init(*args)

    @staticmethod
    def uninit(*args) -> "void":
        return _ODA_Kernel_Py3.OdFontMapper_uninit(*args)

    @staticmethod
    def isLoaded(*args) -> "bool":
        return _ODA_Kernel_Py3.OdFontMapper_isLoaded(*args)

    @staticmethod
    def getName(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.OdFontMapper_getName(*args)

# Register OdFontMapper in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdFontMapper_swigregister(OdFontMapper)

def OdFontMapper_init(*args) -> "void":
    return _ODA_Kernel_Py3.OdFontMapper_init(*args)

def OdFontMapper_uninit(*args) -> "void":
    return _ODA_Kernel_Py3.OdFontMapper_uninit(*args)

def OdFontMapper_isLoaded(*args) -> "bool":
    return _ODA_Kernel_Py3.OdFontMapper_isLoaded(*args)

def OdFontMapper_getName(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.OdFontMapper_getName(*args)

class OdHandleTree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdHandleTree_swiginit(self, _ODA_Kernel_Py3.new_OdHandleTree(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdHandleTree

    def getNextAvailableHandle(self, *args) -> "OdDbHandle":
        return _ODA_Kernel_Py3.OdHandleTree_getNextAvailableHandle(self, *args)

    def addObject(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdHandleTree_addObject(self, *args)

    def getObjectId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdHandleTree_getObjectId(self, *args)

    def size(self, *args) -> "int":
        return _ODA_Kernel_Py3.OdHandleTree_size(self, *args)

    def reserve(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdHandleTree_reserve(self, *args)

    def getNumberOfNodes(self, *args) -> "OdUInt64":
        return _ODA_Kernel_Py3.OdHandleTree_getNumberOfNodes(self, *args)

# Register OdHandleTree in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdHandleTree_swigregister(OdHandleTree)

class OdHandleTreeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdHandleTreeIterator_swiginit(self, _ODA_Kernel_Py3.new_OdHandleTreeIterator(*args))

    def getCurrentObjectId(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.OdHandleTreeIterator_getCurrentObjectId(self, *args)

    def done(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdHandleTreeIterator_done(self, *args)

    def step(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdHandleTreeIterator_step(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdHandleTreeIterator

# Register OdHandleTreeIterator in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdHandleTreeIterator_swigregister(OdHandleTreeIterator)

class CacheEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_pModel = property(_ODA_Kernel_Py3.CacheEntry_m_pModel_get, _ODA_Kernel_Py3.CacheEntry_m_pModel_set)
    m_bPlotGeneration = property(_ODA_Kernel_Py3.CacheEntry_m_bPlotGeneration_get, _ODA_Kernel_Py3.CacheEntry_m_bPlotGeneration_set)
    m_threadId = property(_ODA_Kernel_Py3.CacheEntry_m_threadId_get, _ODA_Kernel_Py3.CacheEntry_m_threadId_set)
    m_nRefs = property(_ODA_Kernel_Py3.CacheEntry_m_nRefs_get, _ODA_Kernel_Py3.CacheEntry_m_nRefs_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.CacheEntry_swiginit(self, _ODA_Kernel_Py3.new_CacheEntry(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_CacheEntry

# Register CacheEntry in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.CacheEntry_swigregister(CacheEntry)

class ColladaModule(OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def exportCollada(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.ColladaModule_exportCollada(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_ColladaModule

# Register ColladaModule in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.ColladaModule_swigregister(ColladaModule)

DW_COMPRESSED_BINARY = _ODA_Kernel_Py3.DW_COMPRESSED_BINARY
DW_UNCOMPRESSED_BINARY = _ODA_Kernel_Py3.DW_UNCOMPRESSED_BINARY
DW_ASCII = _ODA_Kernel_Py3.DW_ASCII
DW_XPS = _ODA_Kernel_Py3.DW_XPS
nDwf_v55 = _ODA_Kernel_Py3.nDwf_v55
nDwf_v42 = _ODA_Kernel_Py3.nDwf_v42
nDwf_v60 = _ODA_Kernel_Py3.nDwf_v60
nDwf_v6_unknown = _ODA_Kernel_Py3.nDwf_v6_unknown
class ImageResource(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.ImageResource_swiginit(self, _ODA_Kernel_Py3.new_ImageResource(*args))

    def Copy(self, *args) -> "void":
        return _ODA_Kernel_Py3.ImageResource_Copy(self, *args)
    sFileName = property(_ODA_Kernel_Py3.ImageResource_sFileName_get, _ODA_Kernel_Py3.ImageResource_sFileName_set)
    ColorDepth = property(_ODA_Kernel_Py3.ImageResource_ColorDepth_get, _ODA_Kernel_Py3.ImageResource_ColorDepth_set)
    Width = property(_ODA_Kernel_Py3.ImageResource_Width_get, _ODA_Kernel_Py3.ImageResource_Width_set)
    Height = property(_ODA_Kernel_Py3.ImageResource_Height_get, _ODA_Kernel_Py3.ImageResource_Height_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_ImageResource

# Register ImageResource in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.ImageResource_swigregister(ImageResource)
lMaxDwfResolution = cvar.lMaxDwfResolution

class DwfPageData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_DwfPageData

    def __init__(self, *args):
        _ODA_Kernel_Py3.DwfPageData_swiginit(self, _ODA_Kernel_Py3.new_DwfPageData(*args))
    sLayout = property(_ODA_Kernel_Py3.DwfPageData_sLayout_get, _ODA_Kernel_Py3.DwfPageData_sLayout_set)
    sPageAuthor = property(_ODA_Kernel_Py3.DwfPageData_sPageAuthor_get, _ODA_Kernel_Py3.DwfPageData_sPageAuthor_set)
    sPageTitle = property(_ODA_Kernel_Py3.DwfPageData_sPageTitle_get, _ODA_Kernel_Py3.DwfPageData_sPageTitle_set)
    sPageSubject = property(_ODA_Kernel_Py3.DwfPageData_sPageSubject_get, _ODA_Kernel_Py3.DwfPageData_sPageSubject_set)
    sPageCompany = property(_ODA_Kernel_Py3.DwfPageData_sPageCompany_get, _ODA_Kernel_Py3.DwfPageData_sPageCompany_set)
    sPageComments = property(_ODA_Kernel_Py3.DwfPageData_sPageComments_get, _ODA_Kernel_Py3.DwfPageData_sPageComments_set)
    sPageReviewers = property(_ODA_Kernel_Py3.DwfPageData_sPageReviewers_get, _ODA_Kernel_Py3.DwfPageData_sPageReviewers_set)
    sPageKeywords = property(_ODA_Kernel_Py3.DwfPageData_sPageKeywords_get, _ODA_Kernel_Py3.DwfPageData_sPageKeywords_set)
    sPageDescription = property(_ODA_Kernel_Py3.DwfPageData_sPageDescription_get, _ODA_Kernel_Py3.DwfPageData_sPageDescription_set)
    sPageCopyright = property(_ODA_Kernel_Py3.DwfPageData_sPageCopyright_get, _ODA_Kernel_Py3.DwfPageData_sPageCopyright_set)
    thumbnail = property(_ODA_Kernel_Py3.DwfPageData_thumbnail_get, _ODA_Kernel_Py3.DwfPageData_thumbnail_set)
    preview = property(_ODA_Kernel_Py3.DwfPageData_preview_get, _ODA_Kernel_Py3.DwfPageData_preview_set)
    arFonts = property(_ODA_Kernel_Py3.DwfPageData_arFonts_get, _ODA_Kernel_Py3.DwfPageData_arFonts_set)

# Register DwfPageData in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.DwfPageData_swigregister(DwfPageData)

class DwExportParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.DwExportParams_swiginit(self, _ODA_Kernel_Py3.new_DwExportParams(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_DwExportParams

    def database(self, *args) -> "OdDbBaseDatabase *":
        return _ODA_Kernel_Py3.DwExportParams_database(self, *args)

    def setDatabase(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setDatabase(self, *args)

    def setDwfFileName(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setDwfFileName(self, *args)

    def dwfFileName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.DwExportParams_dwfFileName(self, *args)

    def setXSize(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setXSize(self, *args)

    def xSize(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.DwExportParams_xSize(self, *args)

    def setYSize(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setYSize(self, *args)

    def ySize(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.DwExportParams_ySize(self, *args)

    def setFormat(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setFormat(self, *args)

    def format(self, *args) -> "TD_DWF_EXPORT::DW_FORMAT":
        return _ODA_Kernel_Py3.DwExportParams_format(self, *args)

    def setVersion(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setVersion(self, *args)

    def version(self, *args) -> "TD_DWF_EXPORT::DwfVersion":
        return _ODA_Kernel_Py3.DwExportParams_version(self, *args)

    def setBackground(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setBackground(self, *args)

    def background(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.DwExportParams_background(self, *args)

    def setPalette(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setPalette(self, *args)

    def palette(self, *args) -> "ODCOLORREF const *":
        return _ODA_Kernel_Py3.DwExportParams_palette(self, *args)

    def setExportInvisibleLayers(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setExportInvisibleLayers(self, *args)

    def exportInvisibleLayers(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DwExportParams_exportInvisibleLayers(self, *args)

    def setForceInitialViewToExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setForceInitialViewToExtents(self, *args)

    def forceInitialViewToExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DwExportParams_forceInitialViewToExtents(self, *args)

    def setSkipLayerInfo(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setSkipLayerInfo(self, *args)

    def skipLayerInfo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DwExportParams_skipLayerInfo(self, *args)

    def setSkipNamedViewsInfo(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setSkipNamedViewsInfo(self, *args)

    def skipNamedViewsInfo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DwExportParams_skipNamedViewsInfo(self, *args)

    def setInkedArea(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setInkedArea(self, *args)

    def inkedArea(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DwExportParams_inkedArea(self, *args)

    def setColorMapOptimize(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setColorMapOptimize(self, *args)

    def colorMapOptimize(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DwExportParams_colorMapOptimize(self, *args)

    def setRGBToJpeg(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setRGBToJpeg(self, *args)

    def RGBToJpeg(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DwExportParams_RGBToJpeg(self, *args)

    def setUseHLR(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setUseHLR(self, *args)

    def useHLR(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DwExportParams_useHLR(self, *args)

    def setExportGradientAsRaster(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setExportGradientAsRaster(self, *args)

    def exportGradientAsRaster(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DwExportParams_exportGradientAsRaster(self, *args)

    def setMaxPointsInPolygon(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setMaxPointsInPolygon(self, *args)

    def maxPointsInPolygon(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.DwExportParams_maxPointsInPolygon(self, *args)

    def setMaxRasterResolution(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setMaxRasterResolution(self, *args)

    def maxRasterResolution(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.DwExportParams_maxRasterResolution(self, *args)

    def setPassword(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setPassword(self, *args)

    def password(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.DwExportParams_password(self, *args)

    def setPublisher(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setPublisher(self, *args)

    def publisher(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.DwExportParams_publisher(self, *args)

    def setWideComments(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setWideComments(self, *args)

    def wideComments(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.DwExportParams_wideComments(self, *args)

    def setSourceProductName(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setSourceProductName(self, *args)

    def sourceProductName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.DwExportParams_sourceProductName(self, *args)

    def setPageData(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setPageData(self, *args)

    def pageData(self, *args) -> "OdArray< TD_DWF_EXPORT::DwfPageData > &":
        return _ODA_Kernel_Py3.DwExportParams_pageData(self, *args)

    def setExportInvisibleText(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setExportInvisibleText(self, *args)

    def exportInvisibleText(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DwExportParams_exportInvisibleText(self, *args)

    def setEmbedAllFonts(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setEmbedAllFonts(self, *args)

    def embedAllFonts(self, *args) -> "bool":
        return _ODA_Kernel_Py3.DwExportParams_embedAllFonts(self, *args)

    def setLineweightScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.DwExportParams_setLineweightScale(self, *args)

    def lineweightScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.DwExportParams_lineweightScale(self, *args)

# Register DwExportParams in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.DwExportParams_swigregister(DwExportParams)

class Dwf3dExportParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.Dwf3dExportParams_swiginit(self, _ODA_Kernel_Py3.new_Dwf3dExportParams(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_Dwf3dExportParams

    def database(self, *args) -> "OdDbBaseDatabase *":
        return _ODA_Kernel_Py3.Dwf3dExportParams_database(self, *args)

    def setDatabase(self, *args) -> "void":
        return _ODA_Kernel_Py3.Dwf3dExportParams_setDatabase(self, *args)

    def setDwfFileName(self, *args) -> "void":
        return _ODA_Kernel_Py3.Dwf3dExportParams_setDwfFileName(self, *args)

    def dwfFileName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.Dwf3dExportParams_dwfFileName(self, *args)

    def setXSize(self, *args) -> "void":
        return _ODA_Kernel_Py3.Dwf3dExportParams_setXSize(self, *args)

    def xSize(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.Dwf3dExportParams_xSize(self, *args)

    def setYSize(self, *args) -> "void":
        return _ODA_Kernel_Py3.Dwf3dExportParams_setYSize(self, *args)

    def ySize(self, *args) -> "OdInt32":
        return _ODA_Kernel_Py3.Dwf3dExportParams_ySize(self, *args)

    def setBackground(self, *args) -> "void":
        return _ODA_Kernel_Py3.Dwf3dExportParams_setBackground(self, *args)

    def background(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.Dwf3dExportParams_background(self, *args)

    def setPalette(self, *args) -> "void":
        return _ODA_Kernel_Py3.Dwf3dExportParams_setPalette(self, *args)

    def palette(self, *args) -> "ODCOLORREF const *":
        return _ODA_Kernel_Py3.Dwf3dExportParams_palette(self, *args)

    def setTitle(self, *args) -> "void":
        return _ODA_Kernel_Py3.Dwf3dExportParams_setTitle(self, *args)

    def title(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.Dwf3dExportParams_title(self, *args)

    def setThumbnail(self, *args) -> "void":
        return _ODA_Kernel_Py3.Dwf3dExportParams_setThumbnail(self, *args)

    def thumbnail(self, *args) -> "TD_DWF_EXPORT::ImageResource":
        return _ODA_Kernel_Py3.Dwf3dExportParams_thumbnail(self, *args)

# Register Dwf3dExportParams in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.Dwf3dExportParams_swigregister(Dwf3dExportParams)


def OdGiRasterImage_isGreyscale(*args) -> "bool":
    return _ODA_Kernel_Py3.OdGiRasterImage_isGreyscale(*args)

def OdGiRasterImage_isColorPresent(*args) -> "bool":
    return _ODA_Kernel_Py3.OdGiRasterImage_isColorPresent(*args)

def OdGiRasterImage_adjustTransparentColor(*args) -> "int":
    return _ODA_Kernel_Py3.OdGiRasterImage_adjustTransparentColor(*args)
class OdDwfExport(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def exportDwf(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDwfExport_exportDwf(self, *args)

    def export3dDwf(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdDwfExport_export3dDwf(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdDwfExport

# Register OdDwfExport in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdDwfExport_swigregister(OdDwfExport)

class DwfExportModule(OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def create(self, *args) -> "TD_DWF_EXPORT::OdDwfExportPtr":
        return _ODA_Kernel_Py3.DwfExportModule_create(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_DwfExportModule

# Register DwfExportModule in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.DwfExportModule_swigregister(DwfExportModule)

class PDFBaseObjectPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get(self, *args) -> "TD_PDF::PDFBaseObject *":
        return _ODA_Kernel_Py3.PDFBaseObjectPtr_get(self, *args)

    def isNull(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFBaseObjectPtr_isNull(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFBaseObjectPtr

# Register PDFBaseObjectPtr in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFBaseObjectPtr_swigregister(PDFBaseObjectPtr)

class PDFAbstractObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFAbstractObject_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFAbstractObject_type(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFAbstractObject

# Register PDFAbstractObject in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFAbstractObject_swigregister(PDFAbstractObject)

class PDFBaseObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFBaseObject_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFBaseObject_type(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFBaseObject

# Register PDFBaseObject in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFBaseObject_swigregister(PDFBaseObject)

class PDFObject(PDFBaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFObject_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFObject_type(self, *args)

    def IndirectObjectID(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFObject_IndirectObjectID(self, *args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFObject_Export(self, *args)

    def ExportLikeRef(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFObject_ExportLikeRef(self, *args)

    def ExportLikeRefObj(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFObject_ExportLikeRefObj(self, *args)

    def isIndirect(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFObject_isIndirect(self, *args)

    def document(self, *args) -> "TD_PDF::PDFDocument *":
        return _ODA_Kernel_Py3.PDFObject_document(self, *args)

    def setDocument(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFObject_setDocument(self, *args)

    def clearDictionaries(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFObject_clearDictionaries(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFObject

# Register PDFObject in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFObject_swigregister(PDFObject)

class PDFBaseString(PDFObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFBaseString_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFBaseString_type(self, *args)

    def str(self, *args) -> "OdAnsiString &":
        return _ODA_Kernel_Py3.PDFBaseString_str(self, *args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFBaseString_Export(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFBaseString

# Register PDFBaseString in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFBaseString_swigregister(PDFBaseString)

class PDFName(PDFBaseString):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFName_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFName_type(self, *args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFName_Export(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFName >":
        return _ODA_Kernel_Py3.PDFName_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFName

# Register PDFName in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFName_swigregister(PDFName)

def PDFName_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFName >":
    return _ODA_Kernel_Py3.PDFName_createObject(*args)

class PDFBoolean(PDFObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFBoolean_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFBoolean_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFBoolean >":
        return _ODA_Kernel_Py3.PDFBoolean_createObject(*args)

    def Bool(self, *args) -> "bool const &":
        return _ODA_Kernel_Py3.PDFBoolean_Bool(self, *args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFBoolean_Export(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFBoolean

# Register PDFBoolean in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFBoolean_swigregister(PDFBoolean)

def PDFBoolean_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFBoolean >":
    return _ODA_Kernel_Py3.PDFBoolean_createObject(*args)

class PDFRectangle(PDFObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFRectangle_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFRectangle_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFRectangle >":
        return _ODA_Kernel_Py3.PDFRectangle_createObject(*args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFRectangle_set(self, *args)

    def get(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFRectangle_get(self, *args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFRectangle_Export(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFRectangle

# Register PDFRectangle in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFRectangle_swigregister(PDFRectangle)

def PDFRectangle_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFRectangle >":
    return _ODA_Kernel_Py3.PDFRectangle_createObject(*args)

class PDFDictionary(PDFObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDictionary_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFDictionary >":
        return _ODA_Kernel_Py3.PDFDictionary_createObject(*args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDictionary_Export(self, *args)

    def RemoveItem(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDictionary_RemoveItem(self, *args)

    def Find(self, *args) -> "TD_PDF::PDFObjectPtr":
        return _ODA_Kernel_Py3.PDFDictionary_Find(self, *args)

    def HasItem(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDictionary_HasItem(self, *args)

    def getUniqueName(self, *args) -> "TD_PDF::PDFNamePtr":
        return _ODA_Kernel_Py3.PDFDictionary_getUniqueName(self, *args)

    def clearDictionaries(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDictionary_clearDictionaries(self, *args)

    def isEmpty(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDictionary_isEmpty(self, *args)

    def mergeWith(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDictionary_mergeWith(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFDictionary

# Register PDFDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFDictionary_swigregister(PDFDictionary)

def PDFDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFDictionary >":
    return _ODA_Kernel_Py3.PDFDictionary_createObject(*args)

class PDFDecodeParametersDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDecodeParametersDictionary_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFDecodeParametersDictionary_type(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFDecodeParametersDictionary

# Register PDFDecodeParametersDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFDecodeParametersDictionary_swigregister(PDFDecodeParametersDictionary)

CROP_ZEROES_FOR_ALL = _ODA_Kernel_Py3.CROP_ZEROES_FOR_ALL
CROP_ZEROES_FOR_RGB = _ODA_Kernel_Py3.CROP_ZEROES_FOR_RGB
class PDFIStream(PDFBaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFIStream_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFIStream_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFIStream >":
        return _ODA_Kernel_Py3.PDFIStream_createObject(*args)

    def getByte(self, *args) -> "OdUInt8":
        return _ODA_Kernel_Py3.PDFIStream_getByte(self, *args)

    def getBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIStream_getBytes(self, *args)

    def setStreamBuf(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIStream_setStreamBuf(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFIStream

    def fileName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.PDFIStream_fileName(self, *args)

    def isEof(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFIStream_isEof(self, *args)

    def tell(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.PDFIStream_tell(self, *args)

    def length(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.PDFIStream_length(self, *args)

    def truncate(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIStream_truncate(self, *args)

    def rewind(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIStream_rewind(self, *args)

    def seek(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.PDFIStream_seek(self, *args)

    def copyDataTo(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIStream_copyDataTo(self, *args)

    def getShareMode(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.PDFIStream_getShareMode(self, *args)

    def putEOL(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIStream_putEOL(self, *args)

    def putBool(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIStream_putBool(self, *args)

    def putDouble(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIStream_putDouble(self, *args)

    def putInt32(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIStream_putInt32(self, *args)

    def putString(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIStream_putString(self, *args)

    def putByte(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIStream_putByte(self, *args)

    def putBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIStream_putBytes(self, *args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFIStream_Export(self, *args)

# Register PDFIStream in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFIStream_swigregister(PDFIStream)

def PDFIStream_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFIStream >":
    return _ODA_Kernel_Py3.PDFIStream_createObject(*args)

class PDFStreamDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFStreamDictionary_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFStreamDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFStreamDictionary >":
        return _ODA_Kernel_Py3.PDFStreamDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFStreamDictionary

# Register PDFStreamDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFStreamDictionary_swigregister(PDFStreamDictionary)

def PDFStreamDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFStreamDictionary >":
    return _ODA_Kernel_Py3.PDFStreamDictionary_createObject(*args)

class PDFLiteralString(PDFBaseString):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFLiteralString_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFLiteralString_type(self, *args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFLiteralString_Export(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFLiteralString >":
        return _ODA_Kernel_Py3.PDFLiteralString_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFLiteralString

# Register PDFLiteralString in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFLiteralString_swigregister(PDFLiteralString)

def PDFLiteralString_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFLiteralString >":
    return _ODA_Kernel_Py3.PDFLiteralString_createObject(*args)

class PDFStream(PDFObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFStream_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFStream_type(self, *args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFStream_Export(self, *args)

    def getLength(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.PDFStream_getLength(self, *args)

    def AddFilter(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFStream_AddFilter(self, *args)

    def RemoveFilter(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFStream_RemoveFilter(self, *args)

    def getNumberOfFilters(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.PDFStream_getNumberOfFilters(self, *args)

    def getFilterAt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFStream_getFilterAt(self, *args)

    def getDecodeParamsAt(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFStream_getDecodeParamsAt(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFStream

# Register PDFStream in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFStream_swigregister(PDFStream)

class PDFIContentCommands(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Do(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_Do(self, *args)

    def q(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_q(self, *args)

    def Q(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_Q(self, *args)

    def gs(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_gs(self, *args)

    def cm(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_cm(self, *args)

    def w(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_w(self, *args)

    def J(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_J(self, *args)

    def j(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_j(self, *args)

    def d(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_d(self, *args)

    def cs(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_cs(self, *args)

    def CS(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_CS(self, *args)

    def sc(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_sc(self, *args)

    def SC(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_SC(self, *args)

    def RG(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_RG(self, *args)

    def rg(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_rg(self, *args)

    def g(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_g(self, *args)

    def G(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_G(self, *args)

    def m(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_m(self, *args)

    def l(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_l(self, *args)

    def c(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_c(self, *args)

    def v(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_v(self, *args)

    def y(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_y(self, *args)

    def re(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_re(self, *args)

    def h(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_h(self, *args)

    def S(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_S(self, *args)

    def s(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_s(self, *args)

    def f(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_f(self, *args)

    def f_odd(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_f_odd(self, *args)

    def B(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_B(self, *args)

    def B_odd(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_B_odd(self, *args)

    def b(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_b(self, *args)

    def b_odd(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_b_odd(self, *args)

    def n(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_n(self, *args)

    def W(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_W(self, *args)

    def W_odd(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_W_odd(self, *args)

    def Tc(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_Tc(self, *args)

    def Tw(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_Tw(self, *args)

    def Tz(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_Tz(self, *args)

    def TL(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_TL(self, *args)

    def Tf(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_Tf(self, *args)

    def Tr(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_Tr(self, *args)

    def Ts(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_Ts(self, *args)

    def BT(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_BT(self, *args)

    def ET(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_ET(self, *args)

    def Td(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_Td(self, *args)

    def TD(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_TD(self, *args)

    def Tm(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_Tm(self, *args)

    def T_star(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_T_star(self, *args)

    def Tj(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_Tj(self, *args)

    def TJ(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_TJ(self, *args)

    def BDC(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_BDC(self, *args)

    def BMC(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_BMC(self, *args)

    def EMC(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_EMC(self, *args)

    def sh(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_sh(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFIContentCommands

    @staticmethod
    def drawEllipse(*args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_drawEllipse(*args)

    @staticmethod
    def drawPolyline(*args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_drawPolyline(*args)

    @staticmethod
    def drawCurve(*args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_drawCurve(*args)

    @staticmethod
    def drawPoint(*args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands_drawPoint(*args)

# Register PDFIContentCommands in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFIContentCommands_swigregister(PDFIContentCommands)

def PDFIContentCommands_drawEllipse(*args) -> "void":
    return _ODA_Kernel_Py3.PDFIContentCommands_drawEllipse(*args)

def PDFIContentCommands_drawPolyline(*args) -> "void":
    return _ODA_Kernel_Py3.PDFIContentCommands_drawPolyline(*args)

def PDFIContentCommands_drawCurve(*args) -> "void":
    return _ODA_Kernel_Py3.PDFIContentCommands_drawCurve(*args)

def PDFIContentCommands_drawPoint(*args) -> "void":
    return _ODA_Kernel_Py3.PDFIContentCommands_drawPoint(*args)

class PDFXObjectDictionary(PDFStreamDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFXObjectDictionary_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFXObjectDictionary_type(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFXObjectDictionary

# Register PDFXObjectDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFXObjectDictionary_swigregister(PDFXObjectDictionary)

class PDFIContentCommands4Type3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def d0(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands4Type3_d0(self, *args)

    def d1(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFIContentCommands4Type3_d1(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFIContentCommands4Type3

# Register PDFIContentCommands4Type3 in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFIContentCommands4Type3_swigregister(PDFIContentCommands4Type3)

FORMAT_BUF_LEN = _ODA_Kernel_Py3.FORMAT_BUF_LEN
class PDFContentStream(PDFStream, PDFIContentCommands):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFContentStream_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFContentStream_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFContentStream >":
        return _ODA_Kernel_Py3.PDFContentStream_createObject(*args)

    def Do(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_Do(self, *args)

    def q(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_q(self, *args)

    def Q(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_Q(self, *args)

    def gs(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_gs(self, *args)

    def cm(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_cm(self, *args)

    def w(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_w(self, *args)

    def J(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_J(self, *args)

    def j(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_j(self, *args)

    def d(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_d(self, *args)

    def cs(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_cs(self, *args)

    def CS(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_CS(self, *args)

    def sc(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_sc(self, *args)

    def SC(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_SC(self, *args)

    def RG(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_RG(self, *args)

    def rg(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_rg(self, *args)

    def g(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_g(self, *args)

    def G(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_G(self, *args)

    def m(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_m(self, *args)

    def l(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_l(self, *args)

    def c(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_c(self, *args)

    def v(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_v(self, *args)

    def y(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_y(self, *args)

    def re(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_re(self, *args)

    def h(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_h(self, *args)

    def S(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_S(self, *args)

    def s(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_s(self, *args)

    def f(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_f(self, *args)

    def f_odd(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_f_odd(self, *args)

    def B(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_B(self, *args)

    def B_odd(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_B_odd(self, *args)

    def b(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_b(self, *args)

    def b_odd(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_b_odd(self, *args)

    def n(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_n(self, *args)

    def W(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_W(self, *args)

    def W_odd(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_W_odd(self, *args)

    def Tc(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_Tc(self, *args)

    def Tw(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_Tw(self, *args)

    def Tz(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_Tz(self, *args)

    def TL(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_TL(self, *args)

    def Tf(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_Tf(self, *args)

    def Tr(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_Tr(self, *args)

    def Ts(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_Ts(self, *args)

    def BT(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_BT(self, *args)

    def ET(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_ET(self, *args)

    def Td(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_Td(self, *args)

    def TD(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_TD(self, *args)

    def Tm(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_Tm(self, *args)

    def T_star(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_T_star(self, *args)

    def Tj(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_Tj(self, *args)

    def TJ(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_TJ(self, *args)

    def BDC(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_BDC(self, *args)

    def BMC(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_BMC(self, *args)

    def EMC(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_EMC(self, *args)

    def sh(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream_sh(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFContentStream

# Register PDFContentStream in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFContentStream_swigregister(PDFContentStream)

def PDFContentStream_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFContentStream >":
    return _ODA_Kernel_Py3.PDFContentStream_createObject(*args)

class PDFDummyContentStream(PDFIContentCommands):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Do(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_Do(self, *args)

    def q(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_q(self, *args)

    def Q(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_Q(self, *args)

    def cm(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_cm(self, *args)

    def w(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_w(self, *args)

    def J(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_J(self, *args)

    def d(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_d(self, *args)

    def j(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_j(self, *args)

    def cs(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_cs(self, *args)

    def gs(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_gs(self, *args)

    def CS(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_CS(self, *args)

    def sc(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_sc(self, *args)

    def SC(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_SC(self, *args)

    def RG(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_RG(self, *args)

    def rg(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_rg(self, *args)

    def g(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_g(self, *args)

    def G(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_G(self, *args)

    def m(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_m(self, *args)

    def l(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_l(self, *args)

    def c(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_c(self, *args)

    def v(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_v(self, *args)

    def y(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_y(self, *args)

    def re(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_re(self, *args)

    def h(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_h(self, *args)

    def S(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_S(self, *args)

    def s(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_s(self, *args)

    def f(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_f(self, *args)

    def f_odd(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_f_odd(self, *args)

    def B(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_B(self, *args)

    def B_odd(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_B_odd(self, *args)

    def b(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_b(self, *args)

    def b_odd(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_b_odd(self, *args)

    def n(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_n(self, *args)

    def W(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_W(self, *args)

    def W_odd(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_W_odd(self, *args)

    def Tc(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_Tc(self, *args)

    def Tw(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_Tw(self, *args)

    def Tz(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_Tz(self, *args)

    def TL(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_TL(self, *args)

    def Tf(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_Tf(self, *args)

    def Tr(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_Tr(self, *args)

    def Ts(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_Ts(self, *args)

    def BT(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_BT(self, *args)

    def ET(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_ET(self, *args)

    def Td(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_Td(self, *args)

    def TD(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_TD(self, *args)

    def Tm(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_Tm(self, *args)

    def T_star(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_T_star(self, *args)

    def Tj(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_Tj(self, *args)

    def TJ(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_TJ(self, *args)

    def BDC(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_BDC(self, *args)

    def BMC(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_BMC(self, *args)

    def EMC(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_EMC(self, *args)

    def sh(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDummyContentStream_sh(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.PDFDummyContentStream_swiginit(self, _ODA_Kernel_Py3.new_PDFDummyContentStream(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFDummyContentStream

# Register PDFDummyContentStream in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFDummyContentStream_swigregister(PDFDummyContentStream)

class PDFXObjectFormDictionary(PDFXObjectDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFXObjectFormDictionary_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFXObjectFormDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFXObjectFormDictionary >":
        return _ODA_Kernel_Py3.PDFXObjectFormDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFXObjectFormDictionary

# Register PDFXObjectFormDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFXObjectFormDictionary_swigregister(PDFXObjectFormDictionary)

def PDFXObjectFormDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFXObjectFormDictionary >":
    return _ODA_Kernel_Py3.PDFXObjectFormDictionary_createObject(*args)

class PDFXObject(PDFStream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFXObject_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFXObject_type(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFXObject

# Register PDFXObject in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFXObject_swigregister(PDFXObject)

class PDFInteger(PDFObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFInteger_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFInteger_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFInteger >":
        return _ODA_Kernel_Py3.PDFInteger_createObject(*args)

    def Int32(self, *args) -> "OdInt32 const &":
        return _ODA_Kernel_Py3.PDFInteger_Int32(self, *args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFInteger_Export(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFInteger

# Register PDFInteger in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFInteger_swigregister(PDFInteger)

def PDFInteger_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFInteger >":
    return _ODA_Kernel_Py3.PDFInteger_createObject(*args)

class PDFContentStream4Type3(PDFContentStream, PDFIContentCommands4Type3):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFContentStream4Type3_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFContentStream4Type3_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFContentStream4Type3 >":
        return _ODA_Kernel_Py3.PDFContentStream4Type3_createObject(*args)

    def d0(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream4Type3_d0(self, *args)

    def d1(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream4Type3_d1(self, *args)

    def m(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream4Type3_m(self, *args)

    def l(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFContentStream4Type3_l(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFContentStream4Type3

# Register PDFContentStream4Type3 in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFContentStream4Type3_swigregister(PDFContentStream4Type3)

def PDFContentStream4Type3_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFContentStream4Type3 >":
    return _ODA_Kernel_Py3.PDFContentStream4Type3_createObject(*args)

class PDFFont(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFont_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFFont_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFont >":
        return _ODA_Kernel_Py3.PDFFont_createObject(*args)

    def truncateFont(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFont_truncateFont(self, *args)

    def setPseudoBold(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFFont_setPseudoBold(self, *args)

    def setPseudoItalic(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFFont_setPseudoItalic(self, *args)

    def isPseudoBold(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFont_isPseudoBold(self, *args)

    def isPseudoItalic(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFont_isPseudoItalic(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFont

# Register PDFFont in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFont_swigregister(PDFFont)

def PDFFont_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFont >":
    return _ODA_Kernel_Py3.PDFFont_createObject(*args)

class PDFXObjectForm(PDFContentStream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFXObjectForm_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFXObjectForm_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFXObjectForm >":
        return _ODA_Kernel_Py3.PDFXObjectForm_createObject(*args)

    def dictionary(self, *args) -> "TD_PDF::PDFXObjectFormDictionaryPtr":
        return _ODA_Kernel_Py3.PDFXObjectForm_dictionary(self, *args)

    def w(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFXObjectForm_w(self, *args)

    def getMaxLw(self, *args) -> "double":
        return _ODA_Kernel_Py3.PDFXObjectForm_getMaxLw(self, *args)

    def expandMaxLw(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFXObjectForm_expandMaxLw(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFXObjectForm

# Register PDFXObjectForm in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFXObjectForm_swigregister(PDFXObjectForm)

def PDFXObjectForm_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFXObjectForm >":
    return _ODA_Kernel_Py3.PDFXObjectForm_createObject(*args)

class PDFSubDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFSubDictionary_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFSubDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFSubDictionary >":
        return _ODA_Kernel_Py3.PDFSubDictionary_createObject(*args)

    def getDefBase(self, *args) -> "char const *":
        return _ODA_Kernel_Py3.PDFSubDictionary_getDefBase(self, *args)

    def AddItem(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFSubDictionary_AddItem(self, *args)

    def FindByValue(self, *args) -> "TD_PDF::PDFNamePtr":
        return _ODA_Kernel_Py3.PDFSubDictionary_FindByValue(self, *args)

    def AddUniqueProperty(self, *args) -> "TD_PDF::PDFNamePtr":
        return _ODA_Kernel_Py3.PDFSubDictionary_AddUniqueProperty(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFSubDictionary

# Register PDFSubDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFSubDictionary_swigregister(PDFSubDictionary)

def PDFSubDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFSubDictionary >":
    return _ODA_Kernel_Py3.PDFSubDictionary_createObject(*args)

eOk = _ODA_Kernel_Py3.eOk
eInternalError = _ODA_Kernel_Py3.eInternalError
eEmptyInputArray = _ODA_Kernel_Py3.eEmptyInputArray
eNotSortedArray = _ODA_Kernel_Py3.eNotSortedArray
eDuplicatedElement = _ODA_Kernel_Py3.eDuplicatedElement
eNullDocument = _ODA_Kernel_Py3.eNullDocument
eKeyNotFound = _ODA_Kernel_Py3.eKeyNotFound
eNullBaseName = _ODA_Kernel_Py3.eNullBaseName
eNotImplementedYet = _ODA_Kernel_Py3.eNotImplementedYet
eCannotFillFontDescriptor = _ODA_Kernel_Py3.eCannotFillFontDescriptor
eLastErrorNum = _ODA_Kernel_Py3.eLastErrorNum
class PDFFieldFlags(PDFInteger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFieldFlags_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFFieldFlags_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFieldFlags >":
        return _ODA_Kernel_Py3.PDFFieldFlags_createObject(*args)
    kReadOnly = _ODA_Kernel_Py3.PDFFieldFlags_kReadOnly
    kRequired = _ODA_Kernel_Py3.PDFFieldFlags_kRequired
    kNoExport = _ODA_Kernel_Py3.PDFFieldFlags_kNoExport
    kMultiline = _ODA_Kernel_Py3.PDFFieldFlags_kMultiline
    kPassword = _ODA_Kernel_Py3.PDFFieldFlags_kPassword
    kNoToggleToOff = _ODA_Kernel_Py3.PDFFieldFlags_kNoToggleToOff
    kRadio = _ODA_Kernel_Py3.PDFFieldFlags_kRadio
    kPushbutton = _ODA_Kernel_Py3.PDFFieldFlags_kPushbutton
    kCombo = _ODA_Kernel_Py3.PDFFieldFlags_kCombo
    kEdit = _ODA_Kernel_Py3.PDFFieldFlags_kEdit
    kSort = _ODA_Kernel_Py3.PDFFieldFlags_kSort
    kFileSelect = _ODA_Kernel_Py3.PDFFieldFlags_kFileSelect
    kMultiSelect = _ODA_Kernel_Py3.PDFFieldFlags_kMultiSelect
    kDoNotSpellCheck = _ODA_Kernel_Py3.PDFFieldFlags_kDoNotSpellCheck
    kDoNotScroll = _ODA_Kernel_Py3.PDFFieldFlags_kDoNotScroll
    kComb = _ODA_Kernel_Py3.PDFFieldFlags_kComb
    kRichText = _ODA_Kernel_Py3.PDFFieldFlags_kRichText
    kRadiosInUnison = _ODA_Kernel_Py3.PDFFieldFlags_kRadiosInUnison
    kCommitOnSelChange = _ODA_Kernel_Py3.PDFFieldFlags_kCommitOnSelChange

    def setBit(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFFieldFlags_setBit(self, *args)

    def getBit(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFieldFlags_getBit(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFieldFlags

# Register PDFFieldFlags in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFieldFlags_swigregister(PDFFieldFlags)

def PDFFieldFlags_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFieldFlags >":
    return _ODA_Kernel_Py3.PDFFieldFlags_createObject(*args)

class PDFDate(PDFObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDate_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFDate_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFDate >":
        return _ODA_Kernel_Py3.PDFDate_createObject(*args)

    def set(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDate_set(self, *args)

    def get(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDate_get(self, *args)

    def isOffset2LocalDateValid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDate_isOffset2LocalDateValid(self, *args)

    def setOffset2Unknown(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDate_setOffset2Unknown(self, *args)

    def toString(self, *args) -> "OdAnsiString":
        return _ODA_Kernel_Py3.PDFDate_toString(self, *args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDate_Export(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFDate

# Register PDFDate in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFDate_swigregister(PDFDate)

def PDFDate_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFDate >":
    return _ODA_Kernel_Py3.PDFDate_createObject(*args)

class PDFNameTreeNodeDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFNameTreeNodeDictionary_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFNameTreeNodeDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFNameTreeNodeDictionary >":
        return _ODA_Kernel_Py3.PDFNameTreeNodeDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFNameTreeNodeDictionary

# Register PDFNameTreeNodeDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFNameTreeNodeDictionary_swigregister(PDFNameTreeNodeDictionary)

def PDFNameTreeNodeDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFNameTreeNodeDictionary >":
    return _ODA_Kernel_Py3.PDFNameTreeNodeDictionary_createObject(*args)

class PDFNumber(PDFObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFNumber_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFNumber_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFNumber >":
        return _ODA_Kernel_Py3.PDFNumber_createObject(*args)

    def Double(self, *args) -> "double const &":
        return _ODA_Kernel_Py3.PDFNumber_Double(self, *args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFNumber_Export(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFNumber

# Register PDFNumber in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFNumber_swigregister(PDFNumber)

def PDFNumber_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFNumber >":
    return _ODA_Kernel_Py3.PDFNumber_createObject(*args)

class PDFUnicodeTextHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.PDFUnicodeTextHelper_swiginit(self, _ODA_Kernel_Py3.new_PDFUnicodeTextHelper(*args))

    def enableFixParenthesis(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFUnicodeTextHelper_enableFixParenthesis(self, *args)

    def exportUnicodeMarker(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFUnicodeTextHelper_exportUnicodeMarker(self, *args)

    def setExportUnicodeMarker(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFUnicodeTextHelper_setExportUnicodeMarker(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFUnicodeTextHelper

# Register PDFUnicodeTextHelper in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFUnicodeTextHelper_swigregister(PDFUnicodeTextHelper)

class PDFAnnotationDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFAnnotationDictionary_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFAnnotationDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFAnnotationDictionary >":
        return _ODA_Kernel_Py3.PDFAnnotationDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFAnnotationDictionary

# Register PDFAnnotationDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFAnnotationDictionary_swigregister(PDFAnnotationDictionary)

def PDFAnnotationDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFAnnotationDictionary >":
    return _ODA_Kernel_Py3.PDFAnnotationDictionary_createObject(*args)

class PDFPageDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFPageDictionary_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFPageDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFPageDictionary >":
        return _ODA_Kernel_Py3.PDFPageDictionary_createObject(*args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFPageDictionary_Export(self, *args)

    def setParent(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFPageDictionary_setParent(self, *args)

    def getParent(self, *args) -> "TD_PDF::PDFDictionaryPtr":
        return _ODA_Kernel_Py3.PDFPageDictionary_getParent(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFPageDictionary

# Register PDFPageDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFPageDictionary_swigregister(PDFPageDictionary)

def PDFPageDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFPageDictionary >":
    return _ODA_Kernel_Py3.PDFPageDictionary_createObject(*args)

class PDFOCGroupDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFOCGroupDictionary_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFOCGroupDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFOCGroupDictionary >":
        return _ODA_Kernel_Py3.PDFOCGroupDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFOCGroupDictionary

# Register PDFOCGroupDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFOCGroupDictionary_swigregister(PDFOCGroupDictionary)

def PDFOCGroupDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFOCGroupDictionary >":
    return _ODA_Kernel_Py3.PDFOCGroupDictionary_createObject(*args)

class PDFArray(PDFObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFArray_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFArray_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFArray >":
        return _ODA_Kernel_Py3.PDFArray_createObject(*args)

    def push_int(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFArray_push_int(self, *args)

    def push_bool(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFArray_push_bool(self, *args)

    def push_number(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFArray_push_number(self, *args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFArray_Export(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFArray

# Register PDFArray in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFArray_swigregister(PDFArray)

def PDFArray_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFArray >":
    return _ODA_Kernel_Py3.PDFArray_createObject(*args)

class PDFFontSubDictionary(PDFSubDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFontSubDictionary_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFFontSubDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFontSubDictionary >":
        return _ODA_Kernel_Py3.PDFFontSubDictionary_createObject(*args)

    def hasFont(self, *args) -> "TD_PDF::PDFFontPtr":
        return _ODA_Kernel_Py3.PDFFontSubDictionary_hasFont(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFontSubDictionary

# Register PDFFontSubDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFontSubDictionary_swigregister(PDFFontSubDictionary)

def PDFFontSubDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFontSubDictionary >":
    return _ODA_Kernel_Py3.PDFFontSubDictionary_createObject(*args)

class PDFPropertiesSubDictionary(PDFSubDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFPropertiesSubDictionary_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFPropertiesSubDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFPropertiesSubDictionary >":
        return _ODA_Kernel_Py3.PDFPropertiesSubDictionary_createObject(*args)

    def getDefBase(self, *args) -> "char const *":
        return _ODA_Kernel_Py3.PDFPropertiesSubDictionary_getDefBase(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFPropertiesSubDictionary

# Register PDFPropertiesSubDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFPropertiesSubDictionary_swigregister(PDFPropertiesSubDictionary)

def PDFPropertiesSubDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFPropertiesSubDictionary >":
    return _ODA_Kernel_Py3.PDFPropertiesSubDictionary_createObject(*args)

class PDFPatternSubDictionary(PDFSubDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFPatternSubDictionary_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFPatternSubDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFPatternSubDictionary >":
        return _ODA_Kernel_Py3.PDFPatternSubDictionary_createObject(*args)

    def getDefBase(self, *args) -> "char const *":
        return _ODA_Kernel_Py3.PDFPatternSubDictionary_getDefBase(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFPatternSubDictionary

# Register PDFPatternSubDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFPatternSubDictionary_swigregister(PDFPatternSubDictionary)

def PDFPatternSubDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFPatternSubDictionary >":
    return _ODA_Kernel_Py3.PDFPatternSubDictionary_createObject(*args)

class PDFShadingSubDictionary(PDFSubDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFShadingSubDictionary_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFShadingSubDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFShadingSubDictionary >":
        return _ODA_Kernel_Py3.PDFShadingSubDictionary_createObject(*args)

    def getDefBase(self, *args) -> "char const *":
        return _ODA_Kernel_Py3.PDFShadingSubDictionary_getDefBase(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFShadingSubDictionary

# Register PDFShadingSubDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFShadingSubDictionary_swigregister(PDFShadingSubDictionary)

def PDFShadingSubDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFShadingSubDictionary >":
    return _ODA_Kernel_Py3.PDFShadingSubDictionary_createObject(*args)

class PDFColorSpaceSubDictionary(PDFSubDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFColorSpaceSubDictionary_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFColorSpaceSubDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFColorSpaceSubDictionary >":
        return _ODA_Kernel_Py3.PDFColorSpaceSubDictionary_createObject(*args)

    def getDefBase(self, *args) -> "char const *":
        return _ODA_Kernel_Py3.PDFColorSpaceSubDictionary_getDefBase(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFColorSpaceSubDictionary

# Register PDFColorSpaceSubDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFColorSpaceSubDictionary_swigregister(PDFColorSpaceSubDictionary)

def PDFColorSpaceSubDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFColorSpaceSubDictionary >":
    return _ODA_Kernel_Py3.PDFColorSpaceSubDictionary_createObject(*args)

class PDFExtGStateSubDictionary(PDFSubDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFExtGStateSubDictionary_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFExtGStateSubDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFExtGStateSubDictionary >":
        return _ODA_Kernel_Py3.PDFExtGStateSubDictionary_createObject(*args)

    def getDefBase(self, *args) -> "char const *":
        return _ODA_Kernel_Py3.PDFExtGStateSubDictionary_getDefBase(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFExtGStateSubDictionary

# Register PDFExtGStateSubDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFExtGStateSubDictionary_swigregister(PDFExtGStateSubDictionary)

def PDFExtGStateSubDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFExtGStateSubDictionary >":
    return _ODA_Kernel_Py3.PDFExtGStateSubDictionary_createObject(*args)

class PDFXObjectSubDictionary(PDFSubDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFXObjectSubDictionary_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFXObjectSubDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFXObjectSubDictionary >":
        return _ODA_Kernel_Py3.PDFXObjectSubDictionary_createObject(*args)

    def getDefBase(self, *args) -> "char const *":
        return _ODA_Kernel_Py3.PDFXObjectSubDictionary_getDefBase(self, *args)

    def hasForm(self, *args) -> "TD_PDF::PDFXObjectFormPtr":
        return _ODA_Kernel_Py3.PDFXObjectSubDictionary_hasForm(self, *args)

    def getForms(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFXObjectSubDictionary_getForms(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFXObjectSubDictionary

# Register PDFXObjectSubDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFXObjectSubDictionary_swigregister(PDFXObjectSubDictionary)

def PDFXObjectSubDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFXObjectSubDictionary >":
    return _ODA_Kernel_Py3.PDFXObjectSubDictionary_createObject(*args)

class PDFImageDictionary(PDFXObjectDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFImageDictionary_isKindOf(self, *args)

    def type(self, *args) -> "PDFTypeId":
        return _ODA_Kernel_Py3.PDFImageDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFImageDictionary >":
        return _ODA_Kernel_Py3.PDFImageDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFImageDictionary

# Register PDFImageDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFImageDictionary_swigregister(PDFImageDictionary)

def PDFImageDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFImageDictionary >":
    return _ODA_Kernel_Py3.PDFImageDictionary_createObject(*args)

class PdfException(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_uErrorCode = property(_ODA_Kernel_Py3.PdfException_m_uErrorCode_get, _ODA_Kernel_Py3.PdfException_m_uErrorCode_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.PdfException_swiginit(self, _ODA_Kernel_Py3.new_PdfException(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PdfException

# Register PdfException in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PdfException_swigregister(PdfException)

kLineCapNotSet = _ODA_Kernel_Py3.kLineCapNotSet
kButtCap = _ODA_Kernel_Py3.kButtCap
kRoundCap = _ODA_Kernel_Py3.kRoundCap
kProjectingSquareCap = _ODA_Kernel_Py3.kProjectingSquareCap
kLineJoinNotSet = _ODA_Kernel_Py3.kLineJoinNotSet
kMiterJoin = _ODA_Kernel_Py3.kMiterJoin
kRoundJoin = _ODA_Kernel_Py3.kRoundJoin
kBevelJoin = _ODA_Kernel_Py3.kBevelJoin
kArtwork = _ODA_Kernel_Py3.kArtwork
kNone = _ODA_Kernel_Py3.kNone
kWhite = _ODA_Kernel_Py3.kWhite
kDay = _ODA_Kernel_Py3.kDay
kBright = _ODA_Kernel_Py3.kBright
kPrimaryColor = _ODA_Kernel_Py3.kPrimaryColor
kNight = _ODA_Kernel_Py3.kNight
kBlue = _ODA_Kernel_Py3.kBlue
kRed = _ODA_Kernel_Py3.kRed
kCube = _ODA_Kernel_Py3.kCube
kCADOptimized = _ODA_Kernel_Py3.kCADOptimized
kHeadlamp = _ODA_Kernel_Py3.kHeadlamp
TD_PDF_RenderingMode_kSolid = _ODA_Kernel_Py3.TD_PDF_RenderingMode_kSolid
TD_PDF_RenderingMode_kSolidWireframe = _ODA_Kernel_Py3.TD_PDF_RenderingMode_kSolidWireframe
TD_PDF_RenderingMode_kSolidOutline = _ODA_Kernel_Py3.TD_PDF_RenderingMode_kSolidOutline
TD_PDF_RenderingMode_kBoundingBox = _ODA_Kernel_Py3.TD_PDF_RenderingMode_kBoundingBox
TD_PDF_RenderingMode_kTransparent = _ODA_Kernel_Py3.TD_PDF_RenderingMode_kTransparent
TD_PDF_RenderingMode_kTransparentWireframe = _ODA_Kernel_Py3.TD_PDF_RenderingMode_kTransparentWireframe
TD_PDF_RenderingMode_kTransparentBoundingBox = _ODA_Kernel_Py3.TD_PDF_RenderingMode_kTransparentBoundingBox
TD_PDF_RenderingMode_kTransparentBoundingBoxOutline = _ODA_Kernel_Py3.TD_PDF_RenderingMode_kTransparentBoundingBoxOutline
TD_PDF_RenderingMode_kIllustration = _ODA_Kernel_Py3.TD_PDF_RenderingMode_kIllustration
TD_PDF_RenderingMode_kShadedIllustration = _ODA_Kernel_Py3.TD_PDF_RenderingMode_kShadedIllustration
TD_PDF_RenderingMode_kWireframe = _ODA_Kernel_Py3.TD_PDF_RenderingMode_kWireframe
TD_PDF_RenderingMode_kShadedWireframe = _ODA_Kernel_Py3.TD_PDF_RenderingMode_kShadedWireframe
TD_PDF_RenderingMode_kHiddenWireframe = _ODA_Kernel_Py3.TD_PDF_RenderingMode_kHiddenWireframe
TD_PDF_RenderingMode_kVertices = _ODA_Kernel_Py3.TD_PDF_RenderingMode_kVertices
TD_PDF_RenderingMode_kShadedVertices = _ODA_Kernel_Py3.TD_PDF_RenderingMode_kShadedVertices
kBody = _ODA_Kernel_Py3.kBody
kBaseString = _ODA_Kernel_Py3.kBaseString
kASCIIHexDecodeFilter = _ODA_Kernel_Py3.kASCIIHexDecodeFilter
kArray = _ODA_Kernel_Py3.kArray
kFontDescriptorFlags = _ODA_Kernel_Py3.kFontDescriptorFlags
kFontDescriptor4CIDFont = _ODA_Kernel_Py3.kFontDescriptor4CIDFont
kFontDescriptor = _ODA_Kernel_Py3.kFontDescriptor
kFont = _ODA_Kernel_Py3.kFont
kExtGState = _ODA_Kernel_Py3.kExtGState
kDictionary = _ODA_Kernel_Py3.kDictionary
kProjectionDictionary = _ODA_Kernel_Py3.kProjectionDictionary
kCrossSectionDictionary = _ODA_Kernel_Py3.kCrossSectionDictionary
k3dNodeDictionary = _ODA_Kernel_Py3.k3dNodeDictionary
k3dBackgroundDictionary = _ODA_Kernel_Py3.k3dBackgroundDictionary
k3DRenderModeDictionary = _ODA_Kernel_Py3.k3DRenderModeDictionary
k3DLightingSchemeDictionary = _ODA_Kernel_Py3.k3DLightingSchemeDictionary
kDecodeParametersDictionary = _ODA_Kernel_Py3.kDecodeParametersDictionary
kContentStream = _ODA_Kernel_Py3.kContentStream
kColorKeyMaskArray = _ODA_Kernel_Py3.kColorKeyMaskArray
kCMapDictionary = _ODA_Kernel_Py3.kCMapDictionary
kCIDSystemInfo = _ODA_Kernel_Py3.kCIDSystemInfo
kCIDFontWidthsArray = _ODA_Kernel_Py3.kCIDFontWidthsArray
kCIDFont2 = _ODA_Kernel_Py3.kCIDFont2
kCIDFont0 = _ODA_Kernel_Py3.kCIDFont0
kCIDFont = _ODA_Kernel_Py3.kCIDFont
kCID2GIDStream = _ODA_Kernel_Py3.kCID2GIDStream
kCatalogDictionary = _ODA_Kernel_Py3.kCatalogDictionary
kBoolean = _ODA_Kernel_Py3.kBoolean
kInteger = _ODA_Kernel_Py3.kInteger
kIndexedRGBColorSpace = _ODA_Kernel_Py3.kIndexedRGBColorSpace
kFontFileStream = _ODA_Kernel_Py3.kFontFileStream
kIndexedColorSpace = _ODA_Kernel_Py3.kIndexedColorSpace
kImageDictionary = _ODA_Kernel_Py3.kImageDictionary
kImage = _ODA_Kernel_Py3.kImage
kFontWidthsArray = _ODA_Kernel_Py3.kFontWidthsArray
kFontSubDictionary = _ODA_Kernel_Py3.kFontSubDictionary
kXObjectDictionary = _ODA_Kernel_Py3.kXObjectDictionary
kXObject = _ODA_Kernel_Py3.kXObject
kType0Font = _ODA_Kernel_Py3.kType0Font
kTrueTypeFont = _ODA_Kernel_Py3.kTrueTypeFont
kTrailerDictionary = _ODA_Kernel_Py3.kTrailerDictionary
kTextString = _ODA_Kernel_Py3.kTextString
kSubDictionary = _ODA_Kernel_Py3.kSubDictionary
kStreamFilter = _ODA_Kernel_Py3.kStreamFilter
kStreamDictionary = _ODA_Kernel_Py3.kStreamDictionary
kStream = _ODA_Kernel_Py3.kStream
k3dStreamDictionary = _ODA_Kernel_Py3.k3dStreamDictionary
kRGBStream = _ODA_Kernel_Py3.kRGBStream
kResourceDictionary = _ODA_Kernel_Py3.kResourceDictionary
kRectangle = _ODA_Kernel_Py3.kRectangle
kPageNodeDictionary = _ODA_Kernel_Py3.kPageNodeDictionary
kPageDictionary = _ODA_Kernel_Py3.kPageDictionary
kBaseObject = _ODA_Kernel_Py3.kBaseObject
kObject = _ODA_Kernel_Py3.kObject
kNumber = _ODA_Kernel_Py3.kNumber
kName = _ODA_Kernel_Py3.kName
kMemoryStream = _ODA_Kernel_Py3.kMemoryStream
kTmpStream = _ODA_Kernel_Py3.kTmpStream
kLiteralString = _ODA_Kernel_Py3.kLiteralString
kIStream = _ODA_Kernel_Py3.kIStream
kNullObject = _ODA_Kernel_Py3.kNullObject
kType3Font = _ODA_Kernel_Py3.kType3Font
kFontMatrix = _ODA_Kernel_Py3.kFontMatrix
kDifferencesArray = _ODA_Kernel_Py3.kDifferencesArray
kEncodingDictionary = _ODA_Kernel_Py3.kEncodingDictionary
kContentStream4Type3 = _ODA_Kernel_Py3.kContentStream4Type3
kCharProcDictionary = _ODA_Kernel_Py3.kCharProcDictionary
kDate = _ODA_Kernel_Py3.kDate
kDocumentInformation = _ODA_Kernel_Py3.kDocumentInformation
kPdfEmbeddedFontStreamDictionary = _ODA_Kernel_Py3.kPdfEmbeddedFontStreamDictionary
kFlateDecodeFilter = _ODA_Kernel_Py3.kFlateDecodeFilter
kFlateDecodeParameters = _ODA_Kernel_Py3.kFlateDecodeParameters
kCMap = _ODA_Kernel_Py3.kCMap
kToUnicodeCMap = _ODA_Kernel_Py3.kToUnicodeCMap
kOCGroup = _ODA_Kernel_Py3.kOCGroup
kOCGroupDictionary = _ODA_Kernel_Py3.kOCGroupDictionary
kOCPropertiesDictionary = _ODA_Kernel_Py3.kOCPropertiesDictionary
kOCConfigurationDictionary = _ODA_Kernel_Py3.kOCConfigurationDictionary
kUsageDictionary = _ODA_Kernel_Py3.kUsageDictionary
kPropertiesSubDictionary = _ODA_Kernel_Py3.kPropertiesSubDictionary
kShadingPattern = _ODA_Kernel_Py3.kShadingPattern
kShadingDictionary = _ODA_Kernel_Py3.kShadingDictionary
kShadingT4StreamDictionary = _ODA_Kernel_Py3.kShadingT4StreamDictionary
kPatternSubDictionary = _ODA_Kernel_Py3.kPatternSubDictionary
kShadingSubDictionary = _ODA_Kernel_Py3.kShadingSubDictionary
kColorSpaceSubDictionary = _ODA_Kernel_Py3.kColorSpaceSubDictionary
kExtGStateSubDictionary = _ODA_Kernel_Py3.kExtGStateSubDictionary
kXObjectSubDictionary = _ODA_Kernel_Py3.kXObjectSubDictionary
kShadingT4Stream = _ODA_Kernel_Py3.kShadingT4Stream
kTempFileStream = _ODA_Kernel_Py3.kTempFileStream
kAnnotationDictionary = _ODA_Kernel_Py3.kAnnotationDictionary
k3dAnnotationDictionary = _ODA_Kernel_Py3.k3dAnnotationDictionary
kLinkAnnotationDictionary = _ODA_Kernel_Py3.kLinkAnnotationDictionary
kMarkupAnnotationDictionary = _ODA_Kernel_Py3.kMarkupAnnotationDictionary
kSquareAnnotationDictionary = _ODA_Kernel_Py3.kSquareAnnotationDictionary
kWatermarkAnnotationDictionary = _ODA_Kernel_Py3.kWatermarkAnnotationDictionary
kFixedPrintDictionary = _ODA_Kernel_Py3.kFixedPrintDictionary
kActionDictionary = _ODA_Kernel_Py3.kActionDictionary
kURIActionDictionary = _ODA_Kernel_Py3.kURIActionDictionary
kGoToActionDictionary = _ODA_Kernel_Py3.kGoToActionDictionary
k3dStream = _ODA_Kernel_Py3.k3dStream
k3dActivationDictionary = _ODA_Kernel_Py3.k3dActivationDictionary
k3dViewDictionary = _ODA_Kernel_Py3.k3dViewDictionary
kCCITTFaxDecodeFilter = _ODA_Kernel_Py3.kCCITTFaxDecodeFilter
kCCITTFaxDecodeParameters = _ODA_Kernel_Py3.kCCITTFaxDecodeParameters
kDCTDecodeFilter = _ODA_Kernel_Py3.kDCTDecodeFilter
kDCTDecodeParameters = _ODA_Kernel_Py3.kDCTDecodeParameters
kDeviceGrayColorSpace = _ODA_Kernel_Py3.kDeviceGrayColorSpace
kOutputIntentsDictionary = _ODA_Kernel_Py3.kOutputIntentsDictionary
kMetadataStream = _ODA_Kernel_Py3.kMetadataStream
kMetadataStreamDictionary = _ODA_Kernel_Py3.kMetadataStreamDictionary
kICCBasedStream = _ODA_Kernel_Py3.kICCBasedStream
kICCBasedStreamDictionary = _ODA_Kernel_Py3.kICCBasedStreamDictionary
kXObjectForm = _ODA_Kernel_Py3.kXObjectForm
kXObjectFormDictionary = _ODA_Kernel_Py3.kXObjectFormDictionary
kViewportDictionary = _ODA_Kernel_Py3.kViewportDictionary
kMeasureDictionary = _ODA_Kernel_Py3.kMeasureDictionary
kNumberFormatDictionary = _ODA_Kernel_Py3.kNumberFormatDictionary
kInteractiveFormDictionary = _ODA_Kernel_Py3.kInteractiveFormDictionary
kWidgetAnnotationDictionary = _ODA_Kernel_Py3.kWidgetAnnotationDictionary
kAppearanceDictionary = _ODA_Kernel_Py3.kAppearanceDictionary
kAppearanceCharacteristicsDictionary = _ODA_Kernel_Py3.kAppearanceCharacteristicsDictionary
kFieldDictionary = _ODA_Kernel_Py3.kFieldDictionary
kFieldBtnDictionary = _ODA_Kernel_Py3.kFieldBtnDictionary
kFieldTextDictionary = _ODA_Kernel_Py3.kFieldTextDictionary
kFieldCheckBoxDictionary = _ODA_Kernel_Py3.kFieldCheckBoxDictionary
kFieldRadioBtnDictionary = _ODA_Kernel_Py3.kFieldRadioBtnDictionary
kFieldSignDictionary = _ODA_Kernel_Py3.kFieldSignDictionary
kFieldFlags = _ODA_Kernel_Py3.kFieldFlags
kType1Font = _ODA_Kernel_Py3.kType1Font
kAnnotationFlags = _ODA_Kernel_Py3.kAnnotationFlags
kJavaScriptActionDictionary = _ODA_Kernel_Py3.kJavaScriptActionDictionary
kGoTo3DViewActionDictionary = _ODA_Kernel_Py3.kGoTo3DViewActionDictionary
kNameTreeNodeNamesElement = _ODA_Kernel_Py3.kNameTreeNodeNamesElement
kNameTreeNodeDictionary = _ODA_Kernel_Py3.kNameTreeNodeDictionary
kNamesDictionary = _ODA_Kernel_Py3.kNamesDictionary
kTextStream = _ODA_Kernel_Py3.kTextStream
kBorderStyleDictionary = _ODA_Kernel_Py3.kBorderStyleDictionary
kFieldListBoxDictionary = _ODA_Kernel_Py3.kFieldListBoxDictionary
kFieldChoiceDictionary = _ODA_Kernel_Py3.kFieldChoiceDictionary
kFieldComboBoxDictionary = _ODA_Kernel_Py3.kFieldComboBoxDictionary
kStateAppearanceSubDictionary = _ODA_Kernel_Py3.kStateAppearanceSubDictionary
kTriggerEventsDictionary = _ODA_Kernel_Py3.kTriggerEventsDictionary
k3dAnimationStyleDictionary = _ODA_Kernel_Py3.k3dAnimationStyleDictionary
kFileSpecificationDictionary = _ODA_Kernel_Py3.kFileSpecificationDictionary
kEmbeddedFileStreamDictionary = _ODA_Kernel_Py3.kEmbeddedFileStreamDictionary
kEmbeddedFileStream = _ODA_Kernel_Py3.kEmbeddedFileStream
kEmbeddedFileParamsDictionary = _ODA_Kernel_Py3.kEmbeddedFileParamsDictionary
class PDFFieldDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFieldDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFFieldDictionary_type(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFieldDictionary

# Register PDFFieldDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFieldDictionary_swigregister(PDFFieldDictionary)

class PDFEmbeddedFileParamsDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFEmbeddedFileParamsDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFEmbeddedFileParamsDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFEmbeddedFileParamsDictionary >":
        return _ODA_Kernel_Py3.PDFEmbeddedFileParamsDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFEmbeddedFileParamsDictionary

# Register PDFEmbeddedFileParamsDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFEmbeddedFileParamsDictionary_swigregister(PDFEmbeddedFileParamsDictionary)

def PDFEmbeddedFileParamsDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFEmbeddedFileParamsDictionary >":
    return _ODA_Kernel_Py3.PDFEmbeddedFileParamsDictionary_createObject(*args)

class PDFTextString(PDFObject, PDFUnicodeTextHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFTextString_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFTextString_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFTextString >":
        return _ODA_Kernel_Py3.PDFTextString_createObject(*args)

    def isEqualTo(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFTextString_isEqualTo(self, *args)

    def getAsUnicode(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.PDFTextString_getAsUnicode(self, *args)

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFTextString_clear(self, *args)

    def isInUnicode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFTextString_isInUnicode(self, *args)

    def set(self, *args) -> "TD_PDF::PDFTextString const &":
        return _ODA_Kernel_Py3.PDFTextString_set(self, *args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFTextString_Export(self, *args)

    def isAscii(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFTextString_isAscii(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFTextString

# Register PDFTextString in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFTextString_swigregister(PDFTextString)

def PDFTextString_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFTextString >":
    return _ODA_Kernel_Py3.PDFTextString_createObject(*args)

class PDFNamesDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFNamesDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFNamesDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFNamesDictionary >":
        return _ODA_Kernel_Py3.PDFNamesDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFNamesDictionary

# Register PDFNamesDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFNamesDictionary_swigregister(PDFNamesDictionary)

def PDFNamesDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFNamesDictionary >":
    return _ODA_Kernel_Py3.PDFNamesDictionary_createObject(*args)

class PDF3dAnimationStyleDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDF3dAnimationStyleDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDF3dAnimationStyleDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dAnimationStyleDictionary >":
        return _ODA_Kernel_Py3.PDF3dAnimationStyleDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDF3dAnimationStyleDictionary

# Register PDF3dAnimationStyleDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDF3dAnimationStyleDictionary_swigregister(PDF3dAnimationStyleDictionary)

def PDF3dAnimationStyleDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dAnimationStyleDictionary >":
    return _ODA_Kernel_Py3.PDF3dAnimationStyleDictionary_createObject(*args)

class PDFUnicodeTextStream(PDFStream, PDFUnicodeTextHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFUnicodeTextStream_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFUnicodeTextStream_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFUnicodeTextStream >":
        return _ODA_Kernel_Py3.PDFUnicodeTextStream_createObject(*args)

    def addString(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFUnicodeTextStream_addString(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFUnicodeTextStream

# Register PDFUnicodeTextStream in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFUnicodeTextStream_swigregister(PDFUnicodeTextStream)

def PDFUnicodeTextStream_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFUnicodeTextStream >":
    return _ODA_Kernel_Py3.PDFUnicodeTextStream_createObject(*args)

class PDFVersion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kPDFUnknown = _ODA_Kernel_Py3.PDFVersion_kPDFUnknown
    kPDFv1_0 = _ODA_Kernel_Py3.PDFVersion_kPDFv1_0
    kPDFv1_1 = _ODA_Kernel_Py3.PDFVersion_kPDFv1_1
    kPDFv1_2 = _ODA_Kernel_Py3.PDFVersion_kPDFv1_2
    kPDFv1_3 = _ODA_Kernel_Py3.PDFVersion_kPDFv1_3
    kPDFv1_4 = _ODA_Kernel_Py3.PDFVersion_kPDFv1_4
    kPDFv1_5 = _ODA_Kernel_Py3.PDFVersion_kPDFv1_5
    kPDFv1_6 = _ODA_Kernel_Py3.PDFVersion_kPDFv1_6
    kPDFv1_7 = _ODA_Kernel_Py3.PDFVersion_kPDFv1_7
    kLast = _ODA_Kernel_Py3.PDFVersion_kLast

    def __init__(self, *args):
        _ODA_Kernel_Py3.PDFVersion_swiginit(self, _ODA_Kernel_Py3.new_PDFVersion(*args))

    def Version(self, *args) -> "TD_PDF::PDFVersion::Versions":
        return _ODA_Kernel_Py3.PDFVersion_Version(self, *args)

    def asString(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.PDFVersion_asString(self, *args)

    def FromString(self, *args) -> "TD_PDF::PDFVersion::Versions":
        return _ODA_Kernel_Py3.PDFVersion_FromString(self, *args)

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFVersion___eq__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFVersion

# Register PDFVersion in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFVersion_swigregister(PDFVersion)

class PDFTriggerEventsDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFTriggerEventsDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFTriggerEventsDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFTriggerEventsDictionary >":
        return _ODA_Kernel_Py3.PDFTriggerEventsDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFTriggerEventsDictionary

# Register PDFTriggerEventsDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFTriggerEventsDictionary_swigregister(PDFTriggerEventsDictionary)

def PDFTriggerEventsDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFTriggerEventsDictionary >":
    return _ODA_Kernel_Py3.PDFTriggerEventsDictionary_createObject(*args)

class PDFCMap(PDFStream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCMap_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFCMap_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCMap >":
        return _ODA_Kernel_Py3.PDFCMap_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFCMap

# Register PDFCMap in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFCMap_swigregister(PDFCMap)

def PDFCMap_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCMap >":
    return _ODA_Kernel_Py3.PDFCMap_createObject(*args)

class PDFMemoryStream(PDFIStream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFMemoryStream_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFMemoryStream_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFMemoryStream >":
        return _ODA_Kernel_Py3.PDFMemoryStream_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFMemoryStream

# Register PDFMemoryStream in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFMemoryStream_swigregister(PDFMemoryStream)

def PDFMemoryStream_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFMemoryStream >":
    return _ODA_Kernel_Py3.PDFMemoryStream_createObject(*args)

class PDFMarkupAnnotationDictionary(PDFAnnotationDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFMarkupAnnotationDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFMarkupAnnotationDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFMarkupAnnotationDictionary >":
        return _ODA_Kernel_Py3.PDFMarkupAnnotationDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFMarkupAnnotationDictionary

# Register PDFMarkupAnnotationDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFMarkupAnnotationDictionary_swigregister(PDFMarkupAnnotationDictionary)

def PDFMarkupAnnotationDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFMarkupAnnotationDictionary >":
    return _ODA_Kernel_Py3.PDFMarkupAnnotationDictionary_createObject(*args)

class PDFShadingDictionary(PDFStreamDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFShadingDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFShadingDictionary_type(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFShadingDictionary

# Register PDFShadingDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFShadingDictionary_swigregister(PDFShadingDictionary)

class PDFPageNodeDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFPageNodeDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFPageNodeDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFPageNodeDictionary >":
        return _ODA_Kernel_Py3.PDFPageNodeDictionary_createObject(*args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFPageNodeDictionary_Export(self, *args)

    def setParent(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFPageNodeDictionary_setParent(self, *args)

    def getParent(self, *args) -> "TD_PDF::PDFDictionaryPtr":
        return _ODA_Kernel_Py3.PDFPageNodeDictionary_getParent(self, *args)

    def AddKids(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFPageNodeDictionary_AddKids(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFPageNodeDictionary

# Register PDFPageNodeDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFPageNodeDictionary_swigregister(PDFPageNodeDictionary)

def PDFPageNodeDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFPageNodeDictionary >":
    return _ODA_Kernel_Py3.PDFPageNodeDictionary_createObject(*args)

class PDFOCConfigurationDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFOCConfigurationDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFOCConfigurationDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFOCConfigurationDictionary >":
        return _ODA_Kernel_Py3.PDFOCConfigurationDictionary_createObject(*args)

    def addOC(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFOCConfigurationDictionary_addOC(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFOCConfigurationDictionary

# Register PDFOCConfigurationDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFOCConfigurationDictionary_swigregister(PDFOCConfigurationDictionary)

def PDFOCConfigurationDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFOCConfigurationDictionary >":
    return _ODA_Kernel_Py3.PDFOCConfigurationDictionary_createObject(*args)

class PDFMetadataStreamDictionary(PDFStreamDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFMetadataStreamDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFMetadataStreamDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFMetadataStreamDictionary >":
        return _ODA_Kernel_Py3.PDFMetadataStreamDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFMetadataStreamDictionary

# Register PDFMetadataStreamDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFMetadataStreamDictionary_swigregister(PDFMetadataStreamDictionary)

def PDFMetadataStreamDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFMetadataStreamDictionary >":
    return _ODA_Kernel_Py3.PDFMetadataStreamDictionary_createObject(*args)

class PDFIndexedColorSpace(PDFArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFIndexedColorSpace_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFIndexedColorSpace_type(self, *args)

    def getBaseName(self, *args) -> "TD_PDF::PDFNamePtr":
        return _ODA_Kernel_Py3.PDFIndexedColorSpace_getBaseName(self, *args)

    def getHiVal(self, *args) -> "TD_PDF::PDFIntegerPtr":
        return _ODA_Kernel_Py3.PDFIndexedColorSpace_getHiVal(self, *args)

    def getLookup(self, *args) -> "TD_PDF::PDFStreamPtr":
        return _ODA_Kernel_Py3.PDFIndexedColorSpace_getLookup(self, *args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFIndexedColorSpace_Export(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFIndexedColorSpace

# Register PDFIndexedColorSpace in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFIndexedColorSpace_swigregister(PDFIndexedColorSpace)

class PDFResourceDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFResourceDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFResourceDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFResourceDictionary >":
        return _ODA_Kernel_Py3.PDFResourceDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFResourceDictionary

# Register PDFResourceDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFResourceDictionary_swigregister(PDFResourceDictionary)

def PDFResourceDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFResourceDictionary >":
    return _ODA_Kernel_Py3.PDFResourceDictionary_createObject(*args)

class PDFImage(PDFXObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFImage_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFImage_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFImage >":
        return _ODA_Kernel_Py3.PDFImage_createObject(*args)

    def dictionary(self, *args) -> "TD_PDF::PDFImageDictionaryPtr":
        return _ODA_Kernel_Py3.PDFImage_dictionary(self, *args)

    def getStreamData(self, *args) -> "TD_PDF::PDFIStreamPtr":
        return _ODA_Kernel_Py3.PDFImage_getStreamData(self, *args)

    def setStreamData(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFImage_setStreamData(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFImage

# Register PDFImage in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFImage_swigregister(PDFImage)

def PDFImage_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFImage >":
    return _ODA_Kernel_Py3.PDFImage_createObject(*args)

class PDFICCBasedStreamDictionary(PDFStreamDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFICCBasedStreamDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFICCBasedStreamDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFICCBasedStreamDictionary >":
        return _ODA_Kernel_Py3.PDFICCBasedStreamDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFICCBasedStreamDictionary

# Register PDFICCBasedStreamDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFICCBasedStreamDictionary_swigregister(PDFICCBasedStreamDictionary)

def PDFICCBasedStreamDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFICCBasedStreamDictionary >":
    return _ODA_Kernel_Py3.PDFICCBasedStreamDictionary_createObject(*args)

class PDFActionDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFActionDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFActionDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFActionDictionary >":
        return _ODA_Kernel_Py3.PDFActionDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFActionDictionary

# Register PDFActionDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFActionDictionary_swigregister(PDFActionDictionary)

def PDFActionDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFActionDictionary >":
    return _ODA_Kernel_Py3.PDFActionDictionary_createObject(*args)

class PDFFontDescriptor(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFontDescriptor_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFFontDescriptor_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFontDescriptor >":
        return _ODA_Kernel_Py3.PDFFontDescriptor_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFontDescriptor

# Register PDFFontDescriptor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFontDescriptor_swigregister(PDFFontDescriptor)

def PDFFontDescriptor_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFontDescriptor >":
    return _ODA_Kernel_Py3.PDFFontDescriptor_createObject(*args)

class PDFFieldChoiceDictionary(PDFFieldDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFieldChoiceDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFFieldChoiceDictionary_type(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFieldChoiceDictionary

# Register PDFFieldChoiceDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFieldChoiceDictionary_swigregister(PDFFieldChoiceDictionary)

class PDFEmbeddedFileStreamDictionary(PDFStreamDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFEmbeddedFileStreamDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFEmbeddedFileStreamDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFEmbeddedFileStreamDictionary >":
        return _ODA_Kernel_Py3.PDFEmbeddedFileStreamDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFEmbeddedFileStreamDictionary

# Register PDFEmbeddedFileStreamDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFEmbeddedFileStreamDictionary_swigregister(PDFEmbeddedFileStreamDictionary)

def PDFEmbeddedFileStreamDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFEmbeddedFileStreamDictionary >":
    return _ODA_Kernel_Py3.PDFEmbeddedFileStreamDictionary_createObject(*args)

class PDFDocumentInformation(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDocumentInformation_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFDocumentInformation_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFDocumentInformation >":
        return _ODA_Kernel_Py3.PDFDocumentInformation_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFDocumentInformation

# Register PDFDocumentInformation in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFDocumentInformation_swigregister(PDFDocumentInformation)

def PDFDocumentInformation_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFDocumentInformation >":
    return _ODA_Kernel_Py3.PDFDocumentInformation_createObject(*args)

class PDFCatalogDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCatalogDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFCatalogDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCatalogDictionary >":
        return _ODA_Kernel_Py3.PDFCatalogDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFCatalogDictionary

# Register PDFCatalogDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFCatalogDictionary_swigregister(PDFCatalogDictionary)

def PDFCatalogDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCatalogDictionary >":
    return _ODA_Kernel_Py3.PDFCatalogDictionary_createObject(*args)

class PDFCIDFont(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCIDFont_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFCIDFont_type(self, *args)

    def truncateFont(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCIDFont_truncateFont(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFCIDFont

# Register PDFCIDFont in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFCIDFont_swigregister(PDFCIDFont)

class PDFStreamFilter(PDFBaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFStreamFilter_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFStreamFilter_type(self, *args)

    def getName(self, *args) -> "OdAnsiString":
        return _ODA_Kernel_Py3.PDFStreamFilter_getName(self, *args)

    def DecodeStream(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFStreamFilter_DecodeStream(self, *args)

    def EncodeStream(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFStreamFilter_EncodeStream(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFStreamFilter

# Register PDFStreamFilter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFStreamFilter_swigregister(PDFStreamFilter)

class PDF3dStreamDictionary(PDFStreamDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDF3dStreamDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDF3dStreamDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dStreamDictionary >":
        return _ODA_Kernel_Py3.PDF3dStreamDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDF3dStreamDictionary

# Register PDF3dStreamDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDF3dStreamDictionary_swigregister(PDF3dStreamDictionary)

def PDF3dStreamDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dStreamDictionary >":
    return _ODA_Kernel_Py3.PDF3dStreamDictionary_createObject(*args)

class PDFAccessPermissionsParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AllowExtract = property(_ODA_Kernel_Py3.PDFAccessPermissionsParams_AllowExtract_get, _ODA_Kernel_Py3.PDFAccessPermissionsParams_AllowExtract_set)
    AllowAssemble = property(_ODA_Kernel_Py3.PDFAccessPermissionsParams_AllowAssemble_get, _ODA_Kernel_Py3.PDFAccessPermissionsParams_AllowAssemble_set)
    AllowAnnotateAndForm = property(_ODA_Kernel_Py3.PDFAccessPermissionsParams_AllowAnnotateAndForm_get, _ODA_Kernel_Py3.PDFAccessPermissionsParams_AllowAnnotateAndForm_set)
    AllowFormFilling = property(_ODA_Kernel_Py3.PDFAccessPermissionsParams_AllowFormFilling_get, _ODA_Kernel_Py3.PDFAccessPermissionsParams_AllowFormFilling_set)
    AllowModifyOther = property(_ODA_Kernel_Py3.PDFAccessPermissionsParams_AllowModifyOther_get, _ODA_Kernel_Py3.PDFAccessPermissionsParams_AllowModifyOther_set)
    AllowPrintAll = property(_ODA_Kernel_Py3.PDFAccessPermissionsParams_AllowPrintAll_get, _ODA_Kernel_Py3.PDFAccessPermissionsParams_AllowPrintAll_set)
    AllowPrintLow = property(_ODA_Kernel_Py3.PDFAccessPermissionsParams_AllowPrintLow_get, _ODA_Kernel_Py3.PDFAccessPermissionsParams_AllowPrintLow_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.PDFAccessPermissionsParams_swiginit(self, _ODA_Kernel_Py3.new_PDFAccessPermissionsParams(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFAccessPermissionsParams

# Register PDFAccessPermissionsParams in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFAccessPermissionsParams_swigregister(PDFAccessPermissionsParams)


def process(*args) -> "OdStreamBufPtr &, OdStreamBufPtr &, OdString const &, OdString const &":
    return _ODA_Kernel_Py3.process(*args)
class PDFWidgetAnnotationDictionary(PDFAnnotationDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFWidgetAnnotationDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFWidgetAnnotationDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFWidgetAnnotationDictionary >":
        return _ODA_Kernel_Py3.PDFWidgetAnnotationDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFWidgetAnnotationDictionary

# Register PDFWidgetAnnotationDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFWidgetAnnotationDictionary_swigregister(PDFWidgetAnnotationDictionary)

def PDFWidgetAnnotationDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFWidgetAnnotationDictionary >":
    return _ODA_Kernel_Py3.PDFWidgetAnnotationDictionary_createObject(*args)

class PDFWatermarkAnnotationDictionary(PDFAnnotationDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFWatermarkAnnotationDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFWatermarkAnnotationDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFWatermarkAnnotationDictionary >":
        return _ODA_Kernel_Py3.PDFWatermarkAnnotationDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFWatermarkAnnotationDictionary

# Register PDFWatermarkAnnotationDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFWatermarkAnnotationDictionary_swigregister(PDFWatermarkAnnotationDictionary)

def PDFWatermarkAnnotationDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFWatermarkAnnotationDictionary >":
    return _ODA_Kernel_Py3.PDFWatermarkAnnotationDictionary_createObject(*args)

class PDFViewportDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFViewportDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFViewportDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFViewportDictionary >":
        return _ODA_Kernel_Py3.PDFViewportDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFViewportDictionary

# Register PDFViewportDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFViewportDictionary_swigregister(PDFViewportDictionary)

def PDFViewportDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFViewportDictionary >":
    return _ODA_Kernel_Py3.PDFViewportDictionary_createObject(*args)

class PDFUsageDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFUsageDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFUsageDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFUsageDictionary >":
        return _ODA_Kernel_Py3.PDFUsageDictionary_createObject(*args)

    def setViewState(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFUsageDictionary_setViewState(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFUsageDictionary

# Register PDFUsageDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFUsageDictionary_swigregister(PDFUsageDictionary)

def PDFUsageDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFUsageDictionary >":
    return _ODA_Kernel_Py3.PDFUsageDictionary_createObject(*args)

class PDFURIActionDictionary(PDFActionDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFURIActionDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFURIActionDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFURIActionDictionary >":
        return _ODA_Kernel_Py3.PDFURIActionDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFURIActionDictionary

# Register PDFURIActionDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFURIActionDictionary_swigregister(PDFURIActionDictionary)

def PDFURIActionDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFURIActionDictionary >":
    return _ODA_Kernel_Py3.PDFURIActionDictionary_createObject(*args)

class PDFType3Font(PDFFont):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFType3Font_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFType3Font_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFType3Font >":
        return _ODA_Kernel_Py3.PDFType3Font_createObject(*args)

    def setLineWeigth(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFType3Font_setLineWeigth(self, *args)

    def getLineWeigth(self, *args) -> "double":
        return _ODA_Kernel_Py3.PDFType3Font_getLineWeigth(self, *args)

    def setScale(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFType3Font_setScale(self, *args)

    def getScale(self, *args) -> "double":
        return _ODA_Kernel_Py3.PDFType3Font_getScale(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFType3Font

# Register PDFType3Font in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFType3Font_swigregister(PDFType3Font)

def PDFType3Font_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFType3Font >":
    return _ODA_Kernel_Py3.PDFType3Font_createObject(*args)

class PDFType1Font(PDFFont):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFType1Font_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFType1Font_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFType1Font >":
        return _ODA_Kernel_Py3.PDFType1Font_createObject(*args)
    kTimesRoman = _ODA_Kernel_Py3.PDFType1Font_kTimesRoman
    kHelvetica = _ODA_Kernel_Py3.PDFType1Font_kHelvetica
    kCourier = _ODA_Kernel_Py3.PDFType1Font_kCourier
    kSymbol = _ODA_Kernel_Py3.PDFType1Font_kSymbol
    kTimesBold = _ODA_Kernel_Py3.PDFType1Font_kTimesBold
    kHelveticaBold = _ODA_Kernel_Py3.PDFType1Font_kHelveticaBold
    kCourierBold = _ODA_Kernel_Py3.PDFType1Font_kCourierBold
    kZapfDingbats = _ODA_Kernel_Py3.PDFType1Font_kZapfDingbats
    kTimesItalic = _ODA_Kernel_Py3.PDFType1Font_kTimesItalic
    kHelveticaOblique = _ODA_Kernel_Py3.PDFType1Font_kHelveticaOblique
    kCourierOblique = _ODA_Kernel_Py3.PDFType1Font_kCourierOblique
    kTimesBoldItalic = _ODA_Kernel_Py3.PDFType1Font_kTimesBoldItalic
    kHelveticaBoldOblique = _ODA_Kernel_Py3.PDFType1Font_kHelveticaBoldOblique
    kCourierBoldOblique = _ODA_Kernel_Py3.PDFType1Font_kCourierBoldOblique

    def setStandardType1Fonts(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFType1Font_setStandardType1Fonts(self, *args)

    @staticmethod
    def getStandardType1FontsName(*args) -> "OdAnsiString":
        return _ODA_Kernel_Py3.PDFType1Font_getStandardType1FontsName(*args)

    @staticmethod
    def getTextCapHeight(*args) -> "double":
        return _ODA_Kernel_Py3.PDFType1Font_getTextCapHeight(*args)

    @staticmethod
    def getTextAscender(*args) -> "double":
        return _ODA_Kernel_Py3.PDFType1Font_getTextAscender(*args)

    @staticmethod
    def getTextDescender(*args) -> "double":
        return _ODA_Kernel_Py3.PDFType1Font_getTextDescender(*args)

    @staticmethod
    def getTextBBox(*args) -> "ODRECT":
        return _ODA_Kernel_Py3.PDFType1Font_getTextBBox(*args)

    @staticmethod
    def getTextBaseWidth(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.PDFType1Font_getTextBaseWidth(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFType1Font

# Register PDFType1Font in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFType1Font_swigregister(PDFType1Font)

def PDFType1Font_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFType1Font >":
    return _ODA_Kernel_Py3.PDFType1Font_createObject(*args)

def PDFType1Font_getStandardType1FontsName(*args) -> "OdAnsiString":
    return _ODA_Kernel_Py3.PDFType1Font_getStandardType1FontsName(*args)

def PDFType1Font_getTextCapHeight(*args) -> "double":
    return _ODA_Kernel_Py3.PDFType1Font_getTextCapHeight(*args)

def PDFType1Font_getTextAscender(*args) -> "double":
    return _ODA_Kernel_Py3.PDFType1Font_getTextAscender(*args)

def PDFType1Font_getTextDescender(*args) -> "double":
    return _ODA_Kernel_Py3.PDFType1Font_getTextDescender(*args)

def PDFType1Font_getTextBBox(*args) -> "ODRECT":
    return _ODA_Kernel_Py3.PDFType1Font_getTextBBox(*args)

def PDFType1Font_getTextBaseWidth(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.PDFType1Font_getTextBaseWidth(*args)

class PDFType0Font(PDFFont):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFType0Font_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFType0Font_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFType0Font >":
        return _ODA_Kernel_Py3.PDFType0Font_createObject(*args)

    def truncateFont(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFType0Font_truncateFont(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFType0Font

# Register PDFType0Font in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFType0Font_swigregister(PDFType0Font)

def PDFType0Font_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFType0Font >":
    return _ODA_Kernel_Py3.PDFType0Font_createObject(*args)

class PDFTrueTypeFont(PDFFont):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFTrueTypeFont_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFTrueTypeFont_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFTrueTypeFont >":
        return _ODA_Kernel_Py3.PDFTrueTypeFont_createObject(*args)

    def truncateFont(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFTrueTypeFont_truncateFont(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFTrueTypeFont

# Register PDFTrueTypeFont in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFTrueTypeFont_swigregister(PDFTrueTypeFont)

def PDFTrueTypeFont_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFTrueTypeFont >":
    return _ODA_Kernel_Py3.PDFTrueTypeFont_createObject(*args)

class PDFCharPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nCharCode = property(_ODA_Kernel_Py3.PDFCharPair_nCharCode_get, _ODA_Kernel_Py3.PDFCharPair_nCharCode_set)
    nUnicodeCode = property(_ODA_Kernel_Py3.PDFCharPair_nUnicodeCode_get, _ODA_Kernel_Py3.PDFCharPair_nUnicodeCode_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.PDFCharPair_swiginit(self, _ODA_Kernel_Py3.new_PDFCharPair(*args))

    def __eq__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCharPair___eq__(self, *args)

    def __ne__(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCharPair___ne__(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFCharPair

# Register PDFCharPair in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFCharPair_swigregister(PDFCharPair)

class PDFCharPairArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def sortByCharCode(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFCharPairArray_sortByCharCode(self, *args)

    def isValid4ToUnicodeCMap(self, *args) -> "TD_PDF::PDFResult":
        return _ODA_Kernel_Py3.PDFCharPairArray_isValid4ToUnicodeCMap(self, *args)

    def __init__(self, *args):
        _ODA_Kernel_Py3.PDFCharPairArray_swiginit(self, _ODA_Kernel_Py3.new_PDFCharPairArray(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFCharPairArray

# Register PDFCharPairArray in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFCharPairArray_swigregister(PDFCharPairArray)

class PDFToUnicodeCMap(PDFCMap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFToUnicodeCMap_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFToUnicodeCMap_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFToUnicodeCMap >":
        return _ODA_Kernel_Py3.PDFToUnicodeCMap_createObject(*args)

    def fillStream(self, *args) -> "TD_PDF::PDFResult":
        return _ODA_Kernel_Py3.PDFToUnicodeCMap_fillStream(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFToUnicodeCMap

# Register PDFToUnicodeCMap in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFToUnicodeCMap_swigregister(PDFToUnicodeCMap)

def PDFToUnicodeCMap_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFToUnicodeCMap >":
    return _ODA_Kernel_Py3.PDFToUnicodeCMap_createObject(*args)

class PDFTempFileStream(PDFMemoryStream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFTempFileStream_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFTempFileStream_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFTempFileStream >":
        return _ODA_Kernel_Py3.PDFTempFileStream_createObject(*args)

    def putBytes(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFTempFileStream_putBytes(self, *args)

    def putByte(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFTempFileStream_putByte(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFTempFileStream

# Register PDFTempFileStream in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFTempFileStream_swigregister(PDFTempFileStream)

def PDFTempFileStream_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFTempFileStream >":
    return _ODA_Kernel_Py3.PDFTempFileStream_createObject(*args)

class PDFStateAppearanceSubDictionary(PDFSubDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFStateAppearanceSubDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFStateAppearanceSubDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFStateAppearanceSubDictionary >":
        return _ODA_Kernel_Py3.PDFStateAppearanceSubDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFStateAppearanceSubDictionary

# Register PDFStateAppearanceSubDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFStateAppearanceSubDictionary_swigregister(PDFStateAppearanceSubDictionary)

def PDFStateAppearanceSubDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFStateAppearanceSubDictionary >":
    return _ODA_Kernel_Py3.PDFStateAppearanceSubDictionary_createObject(*args)

class PDFSquareAnnotationDictionary(PDFMarkupAnnotationDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFSquareAnnotationDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFSquareAnnotationDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFSquareAnnotationDictionary >":
        return _ODA_Kernel_Py3.PDFSquareAnnotationDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFSquareAnnotationDictionary

# Register PDFSquareAnnotationDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFSquareAnnotationDictionary_swigregister(PDFSquareAnnotationDictionary)

def PDFSquareAnnotationDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFSquareAnnotationDictionary >":
    return _ODA_Kernel_Py3.PDFSquareAnnotationDictionary_createObject(*args)

class PDFShadingT4StreamDictionary(PDFShadingDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFShadingT4StreamDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFShadingT4StreamDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFShadingT4StreamDictionary >":
        return _ODA_Kernel_Py3.PDFShadingT4StreamDictionary_createObject(*args)

    def setDecode(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFShadingT4StreamDictionary_setDecode(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFShadingT4StreamDictionary

# Register PDFShadingT4StreamDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFShadingT4StreamDictionary_swigregister(PDFShadingT4StreamDictionary)

def PDFShadingT4StreamDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFShadingT4StreamDictionary >":
    return _ODA_Kernel_Py3.PDFShadingT4StreamDictionary_createObject(*args)

class PDFShadingT4(PDFStream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFShadingT4_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFShadingT4_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFShadingT4 >":
        return _ODA_Kernel_Py3.PDFShadingT4_createObject(*args)

    def preFill(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFShadingT4_preFill(self, *args)

    def postFill(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFShadingT4_postFill(self, *args)

    def addTriangle(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFShadingT4_addTriangle(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFShadingT4

# Register PDFShadingT4 in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFShadingT4_swigregister(PDFShadingT4)

def PDFShadingT4_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFShadingT4 >":
    return _ODA_Kernel_Py3.PDFShadingT4_createObject(*args)

class PDFShadingPattern(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFShadingPattern_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFShadingPattern_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFShadingPattern >":
        return _ODA_Kernel_Py3.PDFShadingPattern_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFShadingPattern

# Register PDFShadingPattern in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFShadingPattern_swigregister(PDFShadingPattern)

def PDFShadingPattern_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFShadingPattern >":
    return _ODA_Kernel_Py3.PDFShadingPattern_createObject(*args)

class PDFRGBStream(PDFStream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFRGBStream_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFRGBStream_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFRGBStream >":
        return _ODA_Kernel_Py3.PDFRGBStream_createObject(*args)

    def addRGB(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFRGBStream_addRGB(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFRGBStream

# Register PDFRGBStream in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFRGBStream_swigregister(PDFRGBStream)

def PDFRGBStream_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFRGBStream >":
    return _ODA_Kernel_Py3.PDFRGBStream_createObject(*args)

class PDFProjectionDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFProjectionDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFProjectionDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFProjectionDictionary >":
        return _ODA_Kernel_Py3.PDFProjectionDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFProjectionDictionary

# Register PDFProjectionDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFProjectionDictionary_swigregister(PDFProjectionDictionary)

def PDFProjectionDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFProjectionDictionary >":
    return _ODA_Kernel_Py3.PDFProjectionDictionary_createObject(*args)

class PDFOutputIntentsDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFOutputIntentsDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFOutputIntentsDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFOutputIntentsDictionary >":
        return _ODA_Kernel_Py3.PDFOutputIntentsDictionary_createObject(*args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFOutputIntentsDictionary_Export(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFOutputIntentsDictionary

# Register PDFOutputIntentsDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFOutputIntentsDictionary_swigregister(PDFOutputIntentsDictionary)

def PDFOutputIntentsDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFOutputIntentsDictionary >":
    return _ODA_Kernel_Py3.PDFOutputIntentsDictionary_createObject(*args)

class PDFOCPropertiesDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFOCPropertiesDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFOCPropertiesDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFOCPropertiesDictionary >":
        return _ODA_Kernel_Py3.PDFOCPropertiesDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFOCPropertiesDictionary

# Register PDFOCPropertiesDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFOCPropertiesDictionary_swigregister(PDFOCPropertiesDictionary)

def PDFOCPropertiesDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFOCPropertiesDictionary >":
    return _ODA_Kernel_Py3.PDFOCPropertiesDictionary_createObject(*args)


def clearLayersData(*args) -> "void":
    return _ODA_Kernel_Py3.clearLayersData(*args)

def CreateOC4Layer(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.CreateOC4Layer(*args)

def createOCG(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.createOCG(*args)

def getOCGbyName(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.getOCGbyName(*args)

def getOCGNodeByName(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.getOCGNodeByName(*args)
class PDFObjectID(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.PDFObjectID_swiginit(self, _ODA_Kernel_Py3.new_PDFObjectID(*args))

    def ObjectNumber(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.PDFObjectID_ObjectNumber(self, *args)

    def isNull(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFObjectID_isNull(self, *args)

    def OneStepUpper(self, *args) -> "TD_PDF::PDFObjectID":
        return _ODA_Kernel_Py3.PDFObjectID_OneStepUpper(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFObjectID

# Register PDFObjectID in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFObjectID_swigregister(PDFObjectID)

class PDFNumberFormatDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFNumberFormatDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFNumberFormatDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFNumberFormatDictionary >":
        return _ODA_Kernel_Py3.PDFNumberFormatDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFNumberFormatDictionary

# Register PDFNumberFormatDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFNumberFormatDictionary_swigregister(PDFNumberFormatDictionary)

def PDFNumberFormatDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFNumberFormatDictionary >":
    return _ODA_Kernel_Py3.PDFNumberFormatDictionary_createObject(*args)

class PDFNullObject(PDFObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFNullObject_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFNullObject_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFNullObject >":
        return _ODA_Kernel_Py3.PDFNullObject_createObject(*args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFNullObject_Export(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFNullObject

# Register PDFNullObject in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFNullObject_swigregister(PDFNullObject)

def PDFNullObject_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFNullObject >":
    return _ODA_Kernel_Py3.PDFNullObject_createObject(*args)

class PDFNameTreeNodeNamesElement(PDFObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFNameTreeNodeNamesElement_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFNameTreeNodeNamesElement_type(self, *args)

    def name(self, *args) -> "TD_PDF::PDFTextStringPtr &":
        return _ODA_Kernel_Py3.PDFNameTreeNodeNamesElement_name(self, *args)

    def object(self, *args) -> "TD_PDF::PDFObjectPtr &":
        return _ODA_Kernel_Py3.PDFNameTreeNodeNamesElement_object(self, *args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFNameTreeNodeNamesElement_Export(self, *args)

    @staticmethod
    def createObject(*args) -> "OdString const &":
        return _ODA_Kernel_Py3.PDFNameTreeNodeNamesElement_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFNameTreeNodeNamesElement

# Register PDFNameTreeNodeNamesElement in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFNameTreeNodeNamesElement_swigregister(PDFNameTreeNodeNamesElement)

def PDFNameTreeNodeNamesElement_createObject(*args) -> "OdString const &":
    return _ODA_Kernel_Py3.PDFNameTreeNodeNamesElement_createObject(*args)

class PDFMetadataStream(PDFStream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFMetadataStream_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFMetadataStream_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFMetadataStream >":
        return _ODA_Kernel_Py3.PDFMetadataStream_createObject(*args)

    def getDictionary(self, *args) -> "TD_PDF::PDFMetadataStreamDictionaryPtr":
        return _ODA_Kernel_Py3.PDFMetadataStream_getDictionary(self, *args)

    def putData(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFMetadataStream_putData(self, *args)

    def getData(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFMetadataStream_getData(self, *args)

    def setTitle(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFMetadataStream_setTitle(self, *args)

    def setAuthor(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFMetadataStream_setAuthor(self, *args)

    def setSubject(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFMetadataStream_setSubject(self, *args)

    def setKeywords(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFMetadataStream_setKeywords(self, *args)

    def setCreator(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFMetadataStream_setCreator(self, *args)

    def setProducer(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFMetadataStream_setProducer(self, *args)

    def setCreationDate(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFMetadataStream_setCreationDate(self, *args)

    def setPdfALevelConf(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFMetadataStream_setPdfALevelConf(self, *args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFMetadataStream_Export(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFMetadataStream

# Register PDFMetadataStream in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFMetadataStream_swigregister(PDFMetadataStream)

def PDFMetadataStream_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFMetadataStream >":
    return _ODA_Kernel_Py3.PDFMetadataStream_createObject(*args)

class PDFMeasureDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFMeasureDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFMeasureDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFMeasureDictionary >":
        return _ODA_Kernel_Py3.PDFMeasureDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFMeasureDictionary

# Register PDFMeasureDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFMeasureDictionary_swigregister(PDFMeasureDictionary)

def PDFMeasureDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFMeasureDictionary >":
    return _ODA_Kernel_Py3.PDFMeasureDictionary_createObject(*args)

class PDFLinkAnnotationDictionary(PDFAnnotationDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFLinkAnnotationDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFLinkAnnotationDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFLinkAnnotationDictionary >":
        return _ODA_Kernel_Py3.PDFLinkAnnotationDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFLinkAnnotationDictionary

# Register PDFLinkAnnotationDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFLinkAnnotationDictionary_swigregister(PDFLinkAnnotationDictionary)

def PDFLinkAnnotationDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFLinkAnnotationDictionary >":
    return _ODA_Kernel_Py3.PDFLinkAnnotationDictionary_createObject(*args)

class PDFJavaScriptActionDictionary(PDFActionDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFJavaScriptActionDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFJavaScriptActionDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFJavaScriptActionDictionary >":
        return _ODA_Kernel_Py3.PDFJavaScriptActionDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFJavaScriptActionDictionary

# Register PDFJavaScriptActionDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFJavaScriptActionDictionary_swigregister(PDFJavaScriptActionDictionary)

def PDFJavaScriptActionDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFJavaScriptActionDictionary >":
    return _ODA_Kernel_Py3.PDFJavaScriptActionDictionary_createObject(*args)

class PDFInteractiveFormDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFInteractiveFormDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFInteractiveFormDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFInteractiveFormDictionary >":
        return _ODA_Kernel_Py3.PDFInteractiveFormDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFInteractiveFormDictionary

# Register PDFInteractiveFormDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFInteractiveFormDictionary_swigregister(PDFInteractiveFormDictionary)

def PDFInteractiveFormDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFInteractiveFormDictionary >":
    return _ODA_Kernel_Py3.PDFInteractiveFormDictionary_createObject(*args)

class PDFIndexedRGBColorSpace(PDFIndexedColorSpace):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFIndexedRGBColorSpace_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFIndexedRGBColorSpace_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFIndexedRGBColorSpace >":
        return _ODA_Kernel_Py3.PDFIndexedRGBColorSpace_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFIndexedRGBColorSpace

# Register PDFIndexedRGBColorSpace in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFIndexedRGBColorSpace_swigregister(PDFIndexedRGBColorSpace)

def PDFIndexedRGBColorSpace_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFIndexedRGBColorSpace >":
    return _ODA_Kernel_Py3.PDFIndexedRGBColorSpace_createObject(*args)


def dcImageToPdfImage(*args) -> "void":
    return _ODA_Kernel_Py3.dcImageToPdfImage(*args)

def addNewImage(*args) -> "TD_PDF::PDFImagePtr":
    return _ODA_Kernel_Py3.addNewImage(*args)
class PDFICCBasedStream(PDFStream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFICCBasedStream_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFICCBasedStream_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFICCBasedStream >":
        return _ODA_Kernel_Py3.PDFICCBasedStream_createObject(*args)

    def getDictionary(self, *args) -> "TD_PDF::PDFICCBasedStreamDictionaryPtr":
        return _ODA_Kernel_Py3.PDFICCBasedStream_getDictionary(self, *args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFICCBasedStream_Export(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFICCBasedStream

# Register PDFICCBasedStream in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFICCBasedStream_swigregister(PDFICCBasedStream)

def PDFICCBasedStream_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFICCBasedStream >":
    return _ODA_Kernel_Py3.PDFICCBasedStream_createObject(*args)

class PDFGoToActionDictionary(PDFActionDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFGoToActionDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFGoToActionDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFGoToActionDictionary >":
        return _ODA_Kernel_Py3.PDFGoToActionDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFGoToActionDictionary

# Register PDFGoToActionDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFGoToActionDictionary_swigregister(PDFGoToActionDictionary)

def PDFGoToActionDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFGoToActionDictionary >":
    return _ODA_Kernel_Py3.PDFGoToActionDictionary_createObject(*args)

class PDFGoTo3DViewActionDictionary(PDFActionDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFGoTo3DViewActionDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFGoTo3DViewActionDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFGoTo3DViewActionDictionary >":
        return _ODA_Kernel_Py3.PDFGoTo3DViewActionDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFGoTo3DViewActionDictionary

# Register PDFGoTo3DViewActionDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFGoTo3DViewActionDictionary_swigregister(PDFGoTo3DViewActionDictionary)

def PDFGoTo3DViewActionDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFGoTo3DViewActionDictionary >":
    return _ODA_Kernel_Py3.PDFGoTo3DViewActionDictionary_createObject(*args)

class PDFFontWidthsArray(PDFArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFontWidthsArray_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFFontWidthsArray_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFontWidthsArray >":
        return _ODA_Kernel_Py3.PDFFontWidthsArray_createObject(*args)

    def FillWidthsArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFFontWidthsArray_FillWidthsArray(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFontWidthsArray

# Register PDFFontWidthsArray in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFontWidthsArray_swigregister(PDFFontWidthsArray)

def PDFFontWidthsArray_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFontWidthsArray >":
    return _ODA_Kernel_Py3.PDFFontWidthsArray_createObject(*args)

class PDFFontOptimizer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.PDFFontOptimizer_swiginit(self, _ODA_Kernel_Py3.new_PDFFontOptimizer(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFontOptimizer

    def clear(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFFontOptimizer_clear(self, *args)

    def addText(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFFontOptimizer_addText(self, *args)

    def addUnicodeText(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFFontOptimizer_addUnicodeText(self, *args)

    def Optimize(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFFontOptimizer_Optimize(self, *args)

# Register PDFFontOptimizer in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFontOptimizer_swigregister(PDFFontOptimizer)

class PDFFontMatrix(PDFArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFontMatrix_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFFontMatrix_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFontMatrix >":
        return _ODA_Kernel_Py3.PDFFontMatrix_createObject(*args)

    def set(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFFontMatrix_set(self, *args)

    def get(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFFontMatrix_get(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFontMatrix

# Register PDFFontMatrix in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFontMatrix_swigregister(PDFFontMatrix)

def PDFFontMatrix_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFontMatrix >":
    return _ODA_Kernel_Py3.PDFFontMatrix_createObject(*args)

class PDFFontFileStream(PDFStream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFontFileStream_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFFontFileStream_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFontFileStream >":
        return _ODA_Kernel_Py3.PDFFontFileStream_createObject(*args)

    def setFontFileName(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFFontFileStream_setFontFileName(self, *args)

    def getFontFileName(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.PDFFontFileStream_getFontFileName(self, *args)

    def putData(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFFontFileStream_putData(self, *args)

    def getData(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFFontFileStream_getData(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFontFileStream

# Register PDFFontFileStream in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFontFileStream_swigregister(PDFFontFileStream)

def PDFFontFileStream_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFontFileStream >":
    return _ODA_Kernel_Py3.PDFFontFileStream_createObject(*args)

class PDFFontDescriptorFlags(PDFInteger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFontDescriptorFlags_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFFontDescriptorFlags_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFontDescriptorFlags >":
        return _ODA_Kernel_Py3.PDFFontDescriptorFlags_createObject(*args)
    kFixedPitch = _ODA_Kernel_Py3.PDFFontDescriptorFlags_kFixedPitch
    kSerif = _ODA_Kernel_Py3.PDFFontDescriptorFlags_kSerif
    kSymbolic = _ODA_Kernel_Py3.PDFFontDescriptorFlags_kSymbolic
    kScript = _ODA_Kernel_Py3.PDFFontDescriptorFlags_kScript
    kNonsymbolic = _ODA_Kernel_Py3.PDFFontDescriptorFlags_kNonsymbolic
    kItalic = _ODA_Kernel_Py3.PDFFontDescriptorFlags_kItalic
    kAllCap = _ODA_Kernel_Py3.PDFFontDescriptorFlags_kAllCap
    kSmallCap = _ODA_Kernel_Py3.PDFFontDescriptorFlags_kSmallCap
    kForceBold = _ODA_Kernel_Py3.PDFFontDescriptorFlags_kForceBold

    def setBit(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFFontDescriptorFlags_setBit(self, *args)

    def getBit(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFontDescriptorFlags_getBit(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFontDescriptorFlags

# Register PDFFontDescriptorFlags in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFontDescriptorFlags_swigregister(PDFFontDescriptorFlags)

def PDFFontDescriptorFlags_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFontDescriptorFlags >":
    return _ODA_Kernel_Py3.PDFFontDescriptorFlags_createObject(*args)

class PDFFontDescriptor4CIDFont(PDFFontDescriptor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFontDescriptor4CIDFont_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFFontDescriptor4CIDFont_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFontDescriptor4CIDFont >":
        return _ODA_Kernel_Py3.PDFFontDescriptor4CIDFont_createObject(*args)

    def truncateFont(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFontDescriptor4CIDFont_truncateFont(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFontDescriptor4CIDFont

# Register PDFFontDescriptor4CIDFont in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFontDescriptor4CIDFont_swigregister(PDFFontDescriptor4CIDFont)

def PDFFontDescriptor4CIDFont_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFontDescriptor4CIDFont >":
    return _ODA_Kernel_Py3.PDFFontDescriptor4CIDFont_createObject(*args)

class PDFFlateDecodeParameters(PDFDecodeParametersDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFlateDecodeParameters_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFFlateDecodeParameters_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFlateDecodeParameters >":
        return _ODA_Kernel_Py3.PDFFlateDecodeParameters_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFlateDecodeParameters

# Register PDFFlateDecodeParameters in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFlateDecodeParameters_swigregister(PDFFlateDecodeParameters)

def PDFFlateDecodeParameters_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFlateDecodeParameters >":
    return _ODA_Kernel_Py3.PDFFlateDecodeParameters_createObject(*args)

class PDFFlateDecodeFilter(PDFStreamFilter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFlateDecodeFilter_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFFlateDecodeFilter_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFlateDecodeFilter >":
        return _ODA_Kernel_Py3.PDFFlateDecodeFilter_createObject(*args)

    def setTmpStream(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFFlateDecodeFilter_setTmpStream(self, *args)

    def getName(self, *args) -> "OdAnsiString":
        return _ODA_Kernel_Py3.PDFFlateDecodeFilter_getName(self, *args)

    def DecodeStream(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFlateDecodeFilter_DecodeStream(self, *args)

    def EncodeStream(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFlateDecodeFilter_EncodeStream(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFlateDecodeFilter

# Register PDFFlateDecodeFilter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFlateDecodeFilter_swigregister(PDFFlateDecodeFilter)

def PDFFlateDecodeFilter_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFlateDecodeFilter >":
    return _ODA_Kernel_Py3.PDFFlateDecodeFilter_createObject(*args)

class PDFFixedPrintDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFixedPrintDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFFixedPrintDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFixedPrintDictionary >":
        return _ODA_Kernel_Py3.PDFFixedPrintDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFixedPrintDictionary

# Register PDFFixedPrintDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFixedPrintDictionary_swigregister(PDFFixedPrintDictionary)

def PDFFixedPrintDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFixedPrintDictionary >":
    return _ODA_Kernel_Py3.PDFFixedPrintDictionary_createObject(*args)

class PDFFileSpecificationDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFileSpecificationDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFFileSpecificationDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFileSpecificationDictionary >":
        return _ODA_Kernel_Py3.PDFFileSpecificationDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFileSpecificationDictionary

# Register PDFFileSpecificationDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFileSpecificationDictionary_swigregister(PDFFileSpecificationDictionary)

def PDFFileSpecificationDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFFileSpecificationDictionary >":
    return _ODA_Kernel_Py3.PDFFileSpecificationDictionary_createObject(*args)

class PDFFieldTextDictionary(PDFFieldDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFieldTextDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFFieldTextDictionary_type(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFieldTextDictionary

# Register PDFFieldTextDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFieldTextDictionary_swigregister(PDFFieldTextDictionary)

class PDFFieldSignDictionary(PDFFieldDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFieldSignDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFFieldSignDictionary_type(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFieldSignDictionary

# Register PDFFieldSignDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFieldSignDictionary_swigregister(PDFFieldSignDictionary)

class PDFFieldRadioBtnDictionary(PDFFieldDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFieldRadioBtnDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFFieldRadioBtnDictionary_type(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFieldRadioBtnDictionary

# Register PDFFieldRadioBtnDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFieldRadioBtnDictionary_swigregister(PDFFieldRadioBtnDictionary)

class PDFFieldListBoxDictionary(PDFFieldChoiceDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFieldListBoxDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFFieldListBoxDictionary_type(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFieldListBoxDictionary

# Register PDFFieldListBoxDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFieldListBoxDictionary_swigregister(PDFFieldListBoxDictionary)

class PDFFieldComboBoxDictionary(PDFFieldChoiceDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFieldComboBoxDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFFieldComboBoxDictionary_type(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFieldComboBoxDictionary

# Register PDFFieldComboBoxDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFieldComboBoxDictionary_swigregister(PDFFieldComboBoxDictionary)

class PDFFieldCheckBoxDictionary(PDFFieldDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFieldCheckBoxDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFFieldCheckBoxDictionary_type(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFieldCheckBoxDictionary

# Register PDFFieldCheckBoxDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFieldCheckBoxDictionary_swigregister(PDFFieldCheckBoxDictionary)

class PDFFieldBtnDictionary(PDFFieldDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFFieldBtnDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFFieldBtnDictionary_type(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFFieldBtnDictionary

# Register PDFFieldBtnDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFFieldBtnDictionary_swigregister(PDFFieldBtnDictionary)

class PdfExtGState(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PdfExtGState_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PdfExtGState_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PdfExtGState >":
        return _ODA_Kernel_Py3.PdfExtGState_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PdfExtGState

# Register PdfExtGState in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PdfExtGState_swigregister(PdfExtGState)

def PdfExtGState_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PdfExtGState >":
    return _ODA_Kernel_Py3.PdfExtGState_createObject(*args)

class PDFEncodingDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFEncodingDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFEncodingDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFEncodingDictionary >":
        return _ODA_Kernel_Py3.PDFEncodingDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFEncodingDictionary

# Register PDFEncodingDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFEncodingDictionary_swigregister(PDFEncodingDictionary)

def PDFEncodingDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFEncodingDictionary >":
    return _ODA_Kernel_Py3.PDFEncodingDictionary_createObject(*args)

class PDFEmbeddedFontStreamDictionary(PDFStreamDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFEmbeddedFontStreamDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFEmbeddedFontStreamDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFEmbeddedFontStreamDictionary >":
        return _ODA_Kernel_Py3.PDFEmbeddedFontStreamDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFEmbeddedFontStreamDictionary

# Register PDFEmbeddedFontStreamDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFEmbeddedFontStreamDictionary_swigregister(PDFEmbeddedFontStreamDictionary)

def PDFEmbeddedFontStreamDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFEmbeddedFontStreamDictionary >":
    return _ODA_Kernel_Py3.PDFEmbeddedFontStreamDictionary_createObject(*args)

class PDFEmbeddedFileStream(PDFStream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFEmbeddedFileStream_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFEmbeddedFileStream_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFEmbeddedFileStream >":
        return _ODA_Kernel_Py3.PDFEmbeddedFileStream_createObject(*args)

    def getDictionary(self, *args) -> "TD_PDF::PDFEmbeddedFileStreamDictionaryPtr":
        return _ODA_Kernel_Py3.PDFEmbeddedFileStream_getDictionary(self, *args)

    def putData(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFEmbeddedFileStream_putData(self, *args)

    def getData(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFEmbeddedFileStream_getData(self, *args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFEmbeddedFileStream_Export(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFEmbeddedFileStream

# Register PDFEmbeddedFileStream in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFEmbeddedFileStream_swigregister(PDFEmbeddedFileStream)

def PDFEmbeddedFileStream_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFEmbeddedFileStream >":
    return _ODA_Kernel_Py3.PDFEmbeddedFileStream_createObject(*args)

class PDFDocument(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.PDFDocument_swiginit(self, _ODA_Kernel_Py3.new_PDFDocument(*args))

    def clearDictionaries(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDocument_clearDictionaries(self, *args)

    def getUniqueTempPath(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.PDFDocument_getUniqueTempPath(self, *args)

    def getUniqueKey(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.PDFDocument_getUniqueKey(self, *args)

    def setTmpStream(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDocument_setTmpStream(self, *args)

    def encodingEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDocument_encodingEnabled(self, *args)

    def enableEncoding(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDocument_enableEncoding(self, *args)

    def encodingASCIIHEXEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDocument_encodingASCIIHEXEnabled(self, *args)

    def enableEncodingASCIIHEX(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDocument_enableEncodingASCIIHEX(self, *args)

    def encodingDCTEnabled(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDocument_encodingDCTEnabled(self, *args)

    def enableEncodingDCT(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDocument_enableEncodingDCT(self, *args)

    def isPdfA(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDocument_isPdfA(self, *args)

    def setPdfA(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDocument_setPdfA(self, *args)

    def useQPDF(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDocument_useQPDF(self, *args)

    def setUseQPDF(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDocument_setUseQPDF(self, *args)

    def getVersion(self, *args) -> "TD_PDF::PDFVersion":
        return _ODA_Kernel_Py3.PDFDocument_getVersion(self, *args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDocument_Export(self, *args)

    def AddObject(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDocument_AddObject(self, *args)

    def RemoveObject(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFDocument_RemoveObject(self, *args)

    def setRoot(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDocument_setRoot(self, *args)

    def Root(self, *args) -> "TD_PDF::PDFCatalogDictionaryPtr":
        return _ODA_Kernel_Py3.PDFDocument_Root(self, *args)

    def setDocumentInformation(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDocument_setDocumentInformation(self, *args)

    def getDocumentInformation(self, *args) -> "TD_PDF::PDFDocumentInformationPtr":
        return _ODA_Kernel_Py3.PDFDocument_getDocumentInformation(self, *args)

    def getNextObjectID(self, *args) -> "TD_PDF::PDFObjectID":
        return _ODA_Kernel_Py3.PDFDocument_getNextObjectID(self, *args)

    def getLastObjectID(self, *args) -> "TD_PDF::PDFObjectID":
        return _ODA_Kernel_Py3.PDFDocument_getLastObjectID(self, *args)

    def RegistryFilter(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDocument_RegistryFilter(self, *args)

    def HasFilter(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDocument_HasFilter(self, *args)

    def GetFilter(self, *args) -> "TD_PDF::PDFStreamFilterPtr":
        return _ODA_Kernel_Py3.PDFDocument_GetFilter(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFDocument

# Register PDFDocument in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFDocument_swigregister(PDFDocument)

class PDFDifferencesArray(PDFArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDifferencesArray_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFDifferencesArray_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFDifferencesArray >":
        return _ODA_Kernel_Py3.PDFDifferencesArray_createObject(*args)

    def add(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDifferencesArray_add(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFDifferencesArray

# Register PDFDifferencesArray in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFDifferencesArray_swigregister(PDFDifferencesArray)

def PDFDifferencesArray_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFDifferencesArray >":
    return _ODA_Kernel_Py3.PDFDifferencesArray_createObject(*args)

class PDFDeviceGrayColorSpace(PDFObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDeviceGrayColorSpace_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFDeviceGrayColorSpace_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFDeviceGrayColorSpace >":
        return _ODA_Kernel_Py3.PDFDeviceGrayColorSpace_createObject(*args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDeviceGrayColorSpace_Export(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFDeviceGrayColorSpace

# Register PDFDeviceGrayColorSpace in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFDeviceGrayColorSpace_swigregister(PDFDeviceGrayColorSpace)

def PDFDeviceGrayColorSpace_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFDeviceGrayColorSpace >":
    return _ODA_Kernel_Py3.PDFDeviceGrayColorSpace_createObject(*args)

class PDFDCTDecodeParameters(PDFDecodeParametersDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDCTDecodeParameters_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFDCTDecodeParameters_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFDCTDecodeParameters >":
        return _ODA_Kernel_Py3.PDFDCTDecodeParameters_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFDCTDecodeParameters

# Register PDFDCTDecodeParameters in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFDCTDecodeParameters_swigregister(PDFDCTDecodeParameters)

def PDFDCTDecodeParameters_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFDCTDecodeParameters >":
    return _ODA_Kernel_Py3.PDFDCTDecodeParameters_createObject(*args)

class PDFDCTDecodeFilter(PDFStreamFilter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDCTDecodeFilter_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFDCTDecodeFilter_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFDCTDecodeFilter >":
        return _ODA_Kernel_Py3.PDFDCTDecodeFilter_createObject(*args)

    def getName(self, *args) -> "OdAnsiString":
        return _ODA_Kernel_Py3.PDFDCTDecodeFilter_getName(self, *args)

    def DecodeStream(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDCTDecodeFilter_DecodeStream(self, *args)

    def EncodeStream(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFDCTDecodeFilter_EncodeStream(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFDCTDecodeFilter

# Register PDFDCTDecodeFilter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFDCTDecodeFilter_swigregister(PDFDCTDecodeFilter)

def PDFDCTDecodeFilter_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFDCTDecodeFilter >":
    return _ODA_Kernel_Py3.PDFDCTDecodeFilter_createObject(*args)

class PDFCrossSectionDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCrossSectionDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFCrossSectionDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCrossSectionDictionary >":
        return _ODA_Kernel_Py3.PDFCrossSectionDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFCrossSectionDictionary

# Register PDFCrossSectionDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFCrossSectionDictionary_swigregister(PDFCrossSectionDictionary)

def PDFCrossSectionDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCrossSectionDictionary >":
    return _ODA_Kernel_Py3.PDFCrossSectionDictionary_createObject(*args)

class PDFColorKeyMaskArray(PDFArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFColorKeyMaskArray_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFColorKeyMaskArray_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFColorKeyMaskArray >":
        return _ODA_Kernel_Py3.PDFColorKeyMaskArray_createObject(*args)

    def AddSingleColorMask(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFColorKeyMaskArray_AddSingleColorMask(self, *args)

    def AddColorRangeMask(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFColorKeyMaskArray_AddColorRangeMask(self, *args)

    def AddSingleColorIndexMask(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFColorKeyMaskArray_AddSingleColorIndexMask(self, *args)

    def AddColorIndexRangeMask(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFColorKeyMaskArray_AddColorIndexRangeMask(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFColorKeyMaskArray

# Register PDFColorKeyMaskArray in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFColorKeyMaskArray_swigregister(PDFColorKeyMaskArray)

def PDFColorKeyMaskArray_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFColorKeyMaskArray >":
    return _ODA_Kernel_Py3.PDFColorKeyMaskArray_createObject(*args)

class PDFCMapDictionary(PDFStreamDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCMapDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFCMapDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCMapDictionary >":
        return _ODA_Kernel_Py3.PDFCMapDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFCMapDictionary

# Register PDFCMapDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFCMapDictionary_swigregister(PDFCMapDictionary)

def PDFCMapDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCMapDictionary >":
    return _ODA_Kernel_Py3.PDFCMapDictionary_createObject(*args)

class PDFCIDSystemInfo(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCIDSystemInfo_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFCIDSystemInfo_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCIDSystemInfo >":
        return _ODA_Kernel_Py3.PDFCIDSystemInfo_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFCIDSystemInfo

# Register PDFCIDSystemInfo in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFCIDSystemInfo_swigregister(PDFCIDSystemInfo)

def PDFCIDSystemInfo_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCIDSystemInfo >":
    return _ODA_Kernel_Py3.PDFCIDSystemInfo_createObject(*args)

class PDFCIDFontWidthsArray(PDFArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCIDFontWidthsArray_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFCIDFontWidthsArray_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCIDFontWidthsArray >":
        return _ODA_Kernel_Py3.PDFCIDFontWidthsArray_createObject(*args)

    def FillWidthsArray(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFCIDFontWidthsArray_FillWidthsArray(self, *args)

    def truncate(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCIDFontWidthsArray_truncate(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFCIDFontWidthsArray

# Register PDFCIDFontWidthsArray in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFCIDFontWidthsArray_swigregister(PDFCIDFontWidthsArray)

def PDFCIDFontWidthsArray_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCIDFontWidthsArray >":
    return _ODA_Kernel_Py3.PDFCIDFontWidthsArray_createObject(*args)

class PDFCIDFont2(PDFCIDFont):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCIDFont2_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFCIDFont2_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCIDFont2 >":
        return _ODA_Kernel_Py3.PDFCIDFont2_createObject(*args)

    def truncateFont(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCIDFont2_truncateFont(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFCIDFont2

# Register PDFCIDFont2 in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFCIDFont2_swigregister(PDFCIDFont2)

def PDFCIDFont2_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCIDFont2 >":
    return _ODA_Kernel_Py3.PDFCIDFont2_createObject(*args)

class PDFCIDFont0(PDFCIDFont):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCIDFont0_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFCIDFont0_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCIDFont0 >":
        return _ODA_Kernel_Py3.PDFCIDFont0_createObject(*args)

    def truncateFont(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCIDFont0_truncateFont(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFCIDFont0

# Register PDFCIDFont0 in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFCIDFont0_swigregister(PDFCIDFont0)

def PDFCIDFont0_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCIDFont0 >":
    return _ODA_Kernel_Py3.PDFCIDFont0_createObject(*args)

class PDFCID2GIDStream(PDFStream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCID2GIDStream_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFCID2GIDStream_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCID2GIDStream >":
        return _ODA_Kernel_Py3.PDFCID2GIDStream_createObject(*args)

    def getData(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFCID2GIDStream_getData(self, *args)

    def fill(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFCID2GIDStream_fill(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFCID2GIDStream

# Register PDFCID2GIDStream in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFCID2GIDStream_swigregister(PDFCID2GIDStream)

def PDFCID2GIDStream_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCID2GIDStream >":
    return _ODA_Kernel_Py3.PDFCID2GIDStream_createObject(*args)

class PDFCharProcDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCharProcDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFCharProcDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCharProcDictionary >":
        return _ODA_Kernel_Py3.PDFCharProcDictionary_createObject(*args)

    def addChar(self, *args) -> "OdAnsiString":
        return _ODA_Kernel_Py3.PDFCharProcDictionary_addChar(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFCharProcDictionary

# Register PDFCharProcDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFCharProcDictionary_swigregister(PDFCharProcDictionary)

def PDFCharProcDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCharProcDictionary >":
    return _ODA_Kernel_Py3.PDFCharProcDictionary_createObject(*args)

class PDFCCITTFaxDecodeParameters(PDFDecodeParametersDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCCITTFaxDecodeParameters_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFCCITTFaxDecodeParameters_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCCITTFaxDecodeParameters >":
        return _ODA_Kernel_Py3.PDFCCITTFaxDecodeParameters_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFCCITTFaxDecodeParameters

# Register PDFCCITTFaxDecodeParameters in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFCCITTFaxDecodeParameters_swigregister(PDFCCITTFaxDecodeParameters)

def PDFCCITTFaxDecodeParameters_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCCITTFaxDecodeParameters >":
    return _ODA_Kernel_Py3.PDFCCITTFaxDecodeParameters_createObject(*args)

class PDFCCITTFaxDecodeFilter(PDFStreamFilter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCCITTFaxDecodeFilter_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFCCITTFaxDecodeFilter_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCCITTFaxDecodeFilter >":
        return _ODA_Kernel_Py3.PDFCCITTFaxDecodeFilter_createObject(*args)

    def getName(self, *args) -> "OdAnsiString":
        return _ODA_Kernel_Py3.PDFCCITTFaxDecodeFilter_getName(self, *args)

    def DecodeStream(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCCITTFaxDecodeFilter_DecodeStream(self, *args)

    def EncodeStream(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFCCITTFaxDecodeFilter_EncodeStream(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFCCITTFaxDecodeFilter

# Register PDFCCITTFaxDecodeFilter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFCCITTFaxDecodeFilter_swigregister(PDFCCITTFaxDecodeFilter)

def PDFCCITTFaxDecodeFilter_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFCCITTFaxDecodeFilter >":
    return _ODA_Kernel_Py3.PDFCCITTFaxDecodeFilter_createObject(*args)

class PDFBorderStyleDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFBorderStyleDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFBorderStyleDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFBorderStyleDictionary >":
        return _ODA_Kernel_Py3.PDFBorderStyleDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFBorderStyleDictionary

# Register PDFBorderStyleDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFBorderStyleDictionary_swigregister(PDFBorderStyleDictionary)

def PDFBorderStyleDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFBorderStyleDictionary >":
    return _ODA_Kernel_Py3.PDFBorderStyleDictionary_createObject(*args)

class PDFASCIIHexDecodeFilter(PDFStreamFilter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFASCIIHexDecodeFilter_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFASCIIHexDecodeFilter_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFASCIIHexDecodeFilter >":
        return _ODA_Kernel_Py3.PDFASCIIHexDecodeFilter_createObject(*args)

    def getName(self, *args) -> "OdAnsiString":
        return _ODA_Kernel_Py3.PDFASCIIHexDecodeFilter_getName(self, *args)

    def DecodeStream(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFASCIIHexDecodeFilter_DecodeStream(self, *args)

    def EncodeStream(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFASCIIHexDecodeFilter_EncodeStream(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFASCIIHexDecodeFilter

# Register PDFASCIIHexDecodeFilter in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFASCIIHexDecodeFilter_swigregister(PDFASCIIHexDecodeFilter)

def PDFASCIIHexDecodeFilter_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFASCIIHexDecodeFilter >":
    return _ODA_Kernel_Py3.PDFASCIIHexDecodeFilter_createObject(*args)

class PDFAppearanceDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFAppearanceDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFAppearanceDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFAppearanceDictionary >":
        return _ODA_Kernel_Py3.PDFAppearanceDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFAppearanceDictionary

# Register PDFAppearanceDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFAppearanceDictionary_swigregister(PDFAppearanceDictionary)

def PDFAppearanceDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFAppearanceDictionary >":
    return _ODA_Kernel_Py3.PDFAppearanceDictionary_createObject(*args)

class PDFAppearanceCharacteristicsDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFAppearanceCharacteristicsDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFAppearanceCharacteristicsDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFAppearanceCharacteristicsDictionary >":
        return _ODA_Kernel_Py3.PDFAppearanceCharacteristicsDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFAppearanceCharacteristicsDictionary

# Register PDFAppearanceCharacteristicsDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFAppearanceCharacteristicsDictionary_swigregister(PDFAppearanceCharacteristicsDictionary)

def PDFAppearanceCharacteristicsDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFAppearanceCharacteristicsDictionary >":
    return _ODA_Kernel_Py3.PDFAppearanceCharacteristicsDictionary_createObject(*args)

class PDFAnnotationFlags(PDFInteger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFAnnotationFlags_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDFAnnotationFlags_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFAnnotationFlags >":
        return _ODA_Kernel_Py3.PDFAnnotationFlags_createObject(*args)
    kInvisible = _ODA_Kernel_Py3.PDFAnnotationFlags_kInvisible
    kHidden = _ODA_Kernel_Py3.PDFAnnotationFlags_kHidden
    kPrint = _ODA_Kernel_Py3.PDFAnnotationFlags_kPrint
    kNoZoom = _ODA_Kernel_Py3.PDFAnnotationFlags_kNoZoom
    kNoRotate = _ODA_Kernel_Py3.PDFAnnotationFlags_kNoRotate
    kNoView = _ODA_Kernel_Py3.PDFAnnotationFlags_kNoView
    kReadOnly = _ODA_Kernel_Py3.PDFAnnotationFlags_kReadOnly
    kLocked = _ODA_Kernel_Py3.PDFAnnotationFlags_kLocked
    kToggleNoView = _ODA_Kernel_Py3.PDFAnnotationFlags_kToggleNoView
    kLockedContents = _ODA_Kernel_Py3.PDFAnnotationFlags_kLockedContents

    def setBit(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFAnnotationFlags_setBit(self, *args)

    def getBit(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFAnnotationFlags_getBit(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFAnnotationFlags

# Register PDFAnnotationFlags in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFAnnotationFlags_swigregister(PDFAnnotationFlags)

def PDFAnnotationFlags_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDFAnnotationFlags >":
    return _ODA_Kernel_Py3.PDFAnnotationFlags_createObject(*args)

class PDF3dViewDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDF3dViewDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDF3dViewDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dViewDictionary >":
        return _ODA_Kernel_Py3.PDF3dViewDictionary_createObject(*args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDF3dViewDictionary_Export(self, *args)

    def setIN(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDF3dViewDictionary_setIN(self, *args)

    def getIN(self, *args) -> "TD_PDF::PDFTextStringPtr":
        return _ODA_Kernel_Py3.PDF3dViewDictionary_getIN(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDF3dViewDictionary

# Register PDF3dViewDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDF3dViewDictionary_swigregister(PDF3dViewDictionary)

def PDF3dViewDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dViewDictionary >":
    return _ODA_Kernel_Py3.PDF3dViewDictionary_createObject(*args)

class PDF3dStream(PDFStream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDF3dStream_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDF3dStream_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dStream >":
        return _ODA_Kernel_Py3.PDF3dStream_createObject(*args)

    def getDictionary(self, *args) -> "TD_PDF::PDF3dStreamDictionaryPtr":
        return _ODA_Kernel_Py3.PDF3dStream_getDictionary(self, *args)

    def putData(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDF3dStream_putData(self, *args)

    def getData(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDF3dStream_getData(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDF3dStream

# Register PDF3dStream in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDF3dStream_swigregister(PDF3dStream)

def PDF3dStream_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dStream >":
    return _ODA_Kernel_Py3.PDF3dStream_createObject(*args)

class PDF3dRenderModeDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDF3dRenderModeDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDF3dRenderModeDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dRenderModeDictionary >":
        return _ODA_Kernel_Py3.PDF3dRenderModeDictionary_createObject(*args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDF3dRenderModeDictionary_Export(self, *args)

    def setSubtype(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDF3dRenderModeDictionary_setSubtype(self, *args)

    def getSubtype(self, *args) -> "TD_PDF::RenderingMode":
        return _ODA_Kernel_Py3.PDF3dRenderModeDictionary_getSubtype(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDF3dRenderModeDictionary

# Register PDF3dRenderModeDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDF3dRenderModeDictionary_swigregister(PDF3dRenderModeDictionary)

def PDF3dRenderModeDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dRenderModeDictionary >":
    return _ODA_Kernel_Py3.PDF3dRenderModeDictionary_createObject(*args)

class PDF3dNodeDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDF3dNodeDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDF3dNodeDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dNodeDictionary >":
        return _ODA_Kernel_Py3.PDF3dNodeDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDF3dNodeDictionary

# Register PDF3dNodeDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDF3dNodeDictionary_swigregister(PDF3dNodeDictionary)

def PDF3dNodeDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dNodeDictionary >":
    return _ODA_Kernel_Py3.PDF3dNodeDictionary_createObject(*args)

class PDF3dLightingSchemeDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDF3dLightingSchemeDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDF3dLightingSchemeDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dLightingSchemeDictionary >":
        return _ODA_Kernel_Py3.PDF3dLightingSchemeDictionary_createObject(*args)

    def Export(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDF3dLightingSchemeDictionary_Export(self, *args)

    def setSubtype(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDF3dLightingSchemeDictionary_setSubtype(self, *args)

    def getSubtype(self, *args) -> "TD_PDF::LightingMode":
        return _ODA_Kernel_Py3.PDF3dLightingSchemeDictionary_getSubtype(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDF3dLightingSchemeDictionary

# Register PDF3dLightingSchemeDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDF3dLightingSchemeDictionary_swigregister(PDF3dLightingSchemeDictionary)

def PDF3dLightingSchemeDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dLightingSchemeDictionary >":
    return _ODA_Kernel_Py3.PDF3dLightingSchemeDictionary_createObject(*args)

class PDF3dBackgroundDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDF3dBackgroundDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDF3dBackgroundDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dBackgroundDictionary >":
        return _ODA_Kernel_Py3.PDF3dBackgroundDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDF3dBackgroundDictionary

# Register PDF3dBackgroundDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDF3dBackgroundDictionary_swigregister(PDF3dBackgroundDictionary)

def PDF3dBackgroundDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dBackgroundDictionary >":
    return _ODA_Kernel_Py3.PDF3dBackgroundDictionary_createObject(*args)

class PDF3dAnnotationDictionary(PDFAnnotationDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDF3dAnnotationDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDF3dAnnotationDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dAnnotationDictionary >":
        return _ODA_Kernel_Py3.PDF3dAnnotationDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDF3dAnnotationDictionary

# Register PDF3dAnnotationDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDF3dAnnotationDictionary_swigregister(PDF3dAnnotationDictionary)

def PDF3dAnnotationDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dAnnotationDictionary >":
    return _ODA_Kernel_Py3.PDF3dAnnotationDictionary_createObject(*args)

class PDF3dActivationDictionary(PDFDictionary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isKindOf(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDF3dActivationDictionary_isKindOf(self, *args)

    def type(self, *args) -> "TD_PDF::PDFTypeId":
        return _ODA_Kernel_Py3.PDF3dActivationDictionary_type(self, *args)

    @staticmethod
    def createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dActivationDictionary >":
        return _ODA_Kernel_Py3.PDF3dActivationDictionary_createObject(*args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDF3dActivationDictionary

# Register PDF3dActivationDictionary in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDF3dActivationDictionary_swigregister(PDF3dActivationDictionary)

def PDF3dActivationDictionary_createObject(*args) -> "TD_PDF::PDFSmartPtr< TD_PDF::PDF3dActivationDictionary >":
    return _ODA_Kernel_Py3.PDF3dActivationDictionary_createObject(*args)

class OdPrcContextForPdfExport(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdPrcContextForPdfExport >":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExport_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExport_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExport_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExport_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdPrcContextForPdfExport >":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExport_createObject(*args)

    def shouldExportAsPRC(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExport_shouldExportAsPRC(self, *args)

    def getExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExport_getExtents(self, *args)

    def userData(self, *args) -> "OdRxObjectPtr &":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExport_userData(self, *args)

    def setUserData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExport_setUserData(self, *args)

    def getWritePdfFile(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExport_getWritePdfFile(self, *args)

    def setWritePdfFile(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExport_setWritePdfFile(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdPrcContextForPdfExport

# Register OdPrcContextForPdfExport in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdPrcContextForPdfExport_swigregister(OdPrcContextForPdfExport)

def OdPrcContextForPdfExport_cast(*args) -> "OdSmartPtr< OdPrcContextForPdfExport >":
    return _ODA_Kernel_Py3.OdPrcContextForPdfExport_cast(*args)

def OdPrcContextForPdfExport_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdPrcContextForPdfExport_desc(*args)

def OdPrcContextForPdfExport_createObject(*args) -> "OdSmartPtr< OdPrcContextForPdfExport >":
    return _ODA_Kernel_Py3.OdPrcContextForPdfExport_createObject(*args)

class OdPrcContextForPdfExportWrapper(OdPrcContextForPdfExport):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< OdPrcContextForPdfExportWrapper >":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExportWrapper_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExportWrapper_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExportWrapper_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExportWrapper_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< OdPrcContextForPdfExportWrapper >":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExportWrapper_createObject(*args)

    def getOutputPRC(self, *args) -> "PRCStreamsMap &":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExportWrapper_getOutputPRC(self, *args)

    def setOutputPRC(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExportWrapper_setOutputPRC(self, *args)

    def getUserContext(self, *args) -> "OdPrcContextForPdfExportPtr const &":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExportWrapper_getUserContext(self, *args)

    def setUserContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExportWrapper_setUserContext(self, *args)

    def shouldExportAsPRC(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExportWrapper_shouldExportAsPRC(self, *args)

    def userData(self, *args) -> "OdRxObjectPtr &":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExportWrapper_userData(self, *args)

    def setUserData(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExportWrapper_setUserData(self, *args)

    def getWritePdfFile(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdPrcContextForPdfExportWrapper_getWritePdfFile(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdPrcContextForPdfExportWrapper

# Register OdPrcContextForPdfExportWrapper in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdPrcContextForPdfExportWrapper_swigregister(OdPrcContextForPdfExportWrapper)

def OdPrcContextForPdfExportWrapper_cast(*args) -> "OdSmartPtr< OdPrcContextForPdfExportWrapper >":
    return _ODA_Kernel_Py3.OdPrcContextForPdfExportWrapper_cast(*args)

def OdPrcContextForPdfExportWrapper_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdPrcContextForPdfExportWrapper_desc(*args)

def OdPrcContextForPdfExportWrapper_createObject(*args) -> "OdSmartPtr< OdPrcContextForPdfExportWrapper >":
    return _ODA_Kernel_Py3.OdPrcContextForPdfExportWrapper_createObject(*args)


def odCreatePrcAllInSingleViewContextBase(*args) -> "OdRxObjectPtr":
    return _ODA_Kernel_Py3.odCreatePrcAllInSingleViewContextBase(*args)
class Watermark(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kTimesRoman = _ODA_Kernel_Py3.Watermark_kTimesRoman
    kHelvetica = _ODA_Kernel_Py3.Watermark_kHelvetica
    kCourier = _ODA_Kernel_Py3.Watermark_kCourier
    kSymbol = _ODA_Kernel_Py3.Watermark_kSymbol
    kTimesBold = _ODA_Kernel_Py3.Watermark_kTimesBold
    kHelveticaBold = _ODA_Kernel_Py3.Watermark_kHelveticaBold
    kCourierBold = _ODA_Kernel_Py3.Watermark_kCourierBold
    kZapfDingbats = _ODA_Kernel_Py3.Watermark_kZapfDingbats
    kTimesItalic = _ODA_Kernel_Py3.Watermark_kTimesItalic
    kHelveticaOblique = _ODA_Kernel_Py3.Watermark_kHelveticaOblique
    kCourierOblique = _ODA_Kernel_Py3.Watermark_kCourierOblique
    kTimesBoldItalic = _ODA_Kernel_Py3.Watermark_kTimesBoldItalic
    kHelveticaBoldOblique = _ODA_Kernel_Py3.Watermark_kHelveticaBoldOblique
    kCourierBoldOblique = _ODA_Kernel_Py3.Watermark_kCourierBoldOblique
    kLeftToRight = _ODA_Kernel_Py3.Watermark_kLeftToRight
    kUpperLeftToLowerRight = _ODA_Kernel_Py3.Watermark_kUpperLeftToLowerRight
    kLowerLeftToUpperRight = _ODA_Kernel_Py3.Watermark_kLowerLeftToUpperRight
    kUpperLeft = _ODA_Kernel_Py3.Watermark_kUpperLeft
    kUpperRight = _ODA_Kernel_Py3.Watermark_kUpperRight
    kLowerRight = _ODA_Kernel_Py3.Watermark_kLowerRight
    kLowerLeft = _ODA_Kernel_Py3.Watermark_kLowerLeft
    text = property(_ODA_Kernel_Py3.Watermark_text_get, _ODA_Kernel_Py3.Watermark_text_set)
    color = property(_ODA_Kernel_Py3.Watermark_color_get, _ODA_Kernel_Py3.Watermark_color_set)
    fontSize = property(_ODA_Kernel_Py3.Watermark_fontSize_get, _ODA_Kernel_Py3.Watermark_fontSize_set)
    opacity = property(_ODA_Kernel_Py3.Watermark_opacity_get, _ODA_Kernel_Py3.Watermark_opacity_set)
    font = property(_ODA_Kernel_Py3.Watermark_font_get, _ODA_Kernel_Py3.Watermark_font_set)
    position = property(_ODA_Kernel_Py3.Watermark_position_get, _ODA_Kernel_Py3.Watermark_position_set)
    scaleToPage = property(_ODA_Kernel_Py3.Watermark_scaleToPage_get, _ODA_Kernel_Py3.Watermark_scaleToPage_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.Watermark_swiginit(self, _ODA_Kernel_Py3.new_Watermark(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_Watermark

# Register Watermark in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.Watermark_swigregister(Watermark)

class PdfExportReactor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PdfExportReactor

    def beginViewVectorization(self, *args) -> "void":
        return _ODA_Kernel_Py3.PdfExportReactor_beginViewVectorization(self, *args)

    def endViewVectorization(self, *args) -> "void":
        return _ODA_Kernel_Py3.PdfExportReactor_endViewVectorization(self, *args)

# Register PdfExportReactor in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PdfExportReactor_swigregister(PdfExportReactor)

class PDFExportParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kZeroFlag = _ODA_Kernel_Py3.PDFExportParams_kZeroFlag
    kEmbededTTF = _ODA_Kernel_Py3.PDFExportParams_kEmbededTTF
    kTTFTextAsGeometry = _ODA_Kernel_Py3.PDFExportParams_kTTFTextAsGeometry
    kSHXTextAsGeometry = _ODA_Kernel_Py3.PDFExportParams_kSHXTextAsGeometry
    kSimpleGeomOptimization = _ODA_Kernel_Py3.PDFExportParams_kSimpleGeomOptimization
    kEnableLayers = _ODA_Kernel_Py3.PDFExportParams_kEnableLayers
    kIncludeOffLayers = _ODA_Kernel_Py3.PDFExportParams_kIncludeOffLayers
    kEmbededOptimizedTTF = _ODA_Kernel_Py3.PDFExportParams_kEmbededOptimizedTTF
    kUseHLR = _ODA_Kernel_Py3.PDFExportParams_kUseHLR
    kFlateCompression = _ODA_Kernel_Py3.PDFExportParams_kFlateCompression
    kASCIIHexEncoding = _ODA_Kernel_Py3.PDFExportParams_kASCIIHexEncoding
    kExportHyperlinks = _ODA_Kernel_Py3.PDFExportParams_kExportHyperlinks
    kZoomToExtentsMode = _ODA_Kernel_Py3.PDFExportParams_kZoomToExtentsMode
    kLinearized = _ODA_Kernel_Py3.PDFExportParams_kLinearized
    kMergeLines = _ODA_Kernel_Py3.PDFExportParams_kMergeLines
    kMeasuring = _ODA_Kernel_Py3.PDFExportParams_kMeasuring
    kDefault = _ODA_Kernel_Py3.PDFExportParams_kDefault
    kPDFA_None = _ODA_Kernel_Py3.PDFExportParams_kPDFA_None
    kPDFA_1b = _ODA_Kernel_Py3.PDFExportParams_kPDFA_1b
    kPDFA_2b = _ODA_Kernel_Py3.PDFExportParams_kPDFA_2b
    kDisabled = _ODA_Kernel_Py3.PDFExportParams_kDisabled
    kAsBrep = _ODA_Kernel_Py3.PDFExportParams_kAsBrep
    kAsMesh = _ODA_Kernel_Py3.PDFExportParams_kAsMesh
    kBitmap = _ODA_Kernel_Py3.PDFExportParams_kBitmap
    kDrawing = _ODA_Kernel_Py3.PDFExportParams_kDrawing
    kPdfPaths = _ODA_Kernel_Py3.PDFExportParams_kPdfPaths
    kPolygons = _ODA_Kernel_Py3.PDFExportParams_kPolygons
    kNoSearch = _ODA_Kernel_Py3.PDFExportParams_kNoSearch
    kSHX = _ODA_Kernel_Py3.PDFExportParams_kSHX
    kTTF = _ODA_Kernel_Py3.PDFExportParams_kTTF
    kNoPolicy = _ODA_Kernel_Py3.PDFExportParams_kNoPolicy
    kMono = _ODA_Kernel_Py3.PDFExportParams_kMono
    kGrayscale = _ODA_Kernel_Py3.PDFExportParams_kGrayscale
    kPDFv1_0 = _ODA_Kernel_Py3.PDFExportParams_kPDFv1_0
    kPDFv1_1 = _ODA_Kernel_Py3.PDFExportParams_kPDFv1_1
    kPDFv1_2 = _ODA_Kernel_Py3.PDFExportParams_kPDFv1_2
    kPDFv1_3 = _ODA_Kernel_Py3.PDFExportParams_kPDFv1_3
    kPDFv1_4 = _ODA_Kernel_Py3.PDFExportParams_kPDFv1_4
    kPDFv1_5 = _ODA_Kernel_Py3.PDFExportParams_kPDFv1_5
    kPDFv1_6 = _ODA_Kernel_Py3.PDFExportParams_kPDFv1_6
    kPDFv1_7 = _ODA_Kernel_Py3.PDFExportParams_kPDFv1_7
    kLast = _ODA_Kernel_Py3.PDFExportParams_kLast
    kExportOnePiece = _ODA_Kernel_Py3.PDFExportParams_kExportOnePiece
    kExportAsTiles = _ODA_Kernel_Py3.PDFExportParams_kExportAsTiles
    kExportAsStrips = _ODA_Kernel_Py3.PDFExportParams_kExportAsStrips
    kAllowExtract = _ODA_Kernel_Py3.PDFExportParams_kAllowExtract
    kAllowAssemble = _ODA_Kernel_Py3.PDFExportParams_kAllowAssemble
    kAllowAnnotateAndForm = _ODA_Kernel_Py3.PDFExportParams_kAllowAnnotateAndForm
    kAllowFormFilling = _ODA_Kernel_Py3.PDFExportParams_kAllowFormFilling
    kAllowModifyOther = _ODA_Kernel_Py3.PDFExportParams_kAllowModifyOther
    kAllowPrintAll = _ODA_Kernel_Py3.PDFExportParams_kAllowPrintAll
    kAllowPrintLow = _ODA_Kernel_Py3.PDFExportParams_kAllowPrintLow
    kDefaultPermissions = _ODA_Kernel_Py3.PDFExportParams_kDefaultPermissions

    def __init__(self, *args):
        _ODA_Kernel_Py3.PDFExportParams_swiginit(self, _ODA_Kernel_Py3.new_PDFExportParams(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDFExportParams

    def setPRCMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setPRCMode(self, *args)

    def getPRCMode(self, *args) -> "TD_PDF_2D_EXPORT::PDFExportParams::PRCSupport":
        return _ODA_Kernel_Py3.PDFExportParams_getPRCMode(self, *args)

    def getPRCContext(self, *args) -> "OdPrcContextForPdfExport const *":
        return _ODA_Kernel_Py3.PDFExportParams_getPRCContext(self, *args)

    def setPRCContext(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setPRCContext(self, *args)

    def hasPrcBackground(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFExportParams_hasPrcBackground(self, *args)

    def getPrcBackground(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.PDFExportParams_getPrcBackground(self, *args)

    def setPrcBackground(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setPrcBackground(self, *args)

    def clearPrcBackground(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_clearPrcBackground(self, *args)

    def getPrcRenderingMode(self, *args) -> "PDF3D_ENUMS::PRCRenderingMode":
        return _ODA_Kernel_Py3.PDFExportParams_getPrcRenderingMode(self, *args)

    def setPrcRenderingMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setPrcRenderingMode(self, *args)

    def hasPrcBrepCompression(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFExportParams_hasPrcBrepCompression(self, *args)

    def hasPrcTessellationCompression(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFExportParams_hasPrcTessellationCompression(self, *args)

    def setDatabase(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setDatabase(self, *args)

    def database(self, *args) -> "OdDbBaseDatabase *":
        return _ODA_Kernel_Py3.PDFExportParams_database(self, *args)

    def setVersion(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setVersion(self, *args)

    def version(self, *args) -> "TD_PDF_2D_EXPORT::PDFExportParams::PDFExportVersions":
        return _ODA_Kernel_Py3.PDFExportParams_version(self, *args)

    def setOutput(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setOutput(self, *args)

    def output(self, *args) -> "OdStreamBufPtr":
        return _ODA_Kernel_Py3.PDFExportParams_output(self, *args)

    def setExportFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setExportFlags(self, *args)

    def exportFlags(self, *args) -> "TD_PDF_2D_EXPORT::PDFExportParams::PDFExportFlags":
        return _ODA_Kernel_Py3.PDFExportParams_exportFlags(self, *args)

    def setArchived(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setArchived(self, *args)

    def archived(self, *args) -> "TD_PDF_2D_EXPORT::PDFExportParams::PDF_A_mode":
        return _ODA_Kernel_Py3.PDFExportParams_archived(self, *args)

    def setSearchableTextType(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setSearchableTextType(self, *args)

    def searchableTextType(self, *args) -> "TD_PDF_2D_EXPORT::PDFExportParams::SearchableTextType":
        return _ODA_Kernel_Py3.PDFExportParams_searchableTextType(self, *args)

    def setColorPolicy(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setColorPolicy(self, *args)

    def colorPolicy(self, *args) -> "TD_PDF_2D_EXPORT::PDFExportParams::ColorPolicy":
        return _ODA_Kernel_Py3.PDFExportParams_colorPolicy(self, *args)

    def setLayouts(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setLayouts(self, *args)

    def addLayout(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_addLayout(self, *args)

    def layouts(self, *args) -> "OdStringArray const &":
        return _ODA_Kernel_Py3.PDFExportParams_layouts(self, *args)

    def databases(self, *args) -> "OdRxObjectPtrArray &":
        return _ODA_Kernel_Py3.PDFExportParams_databases(self, *args)

    def setPageParams(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setPageParams(self, *args)

    def pageParams(self, *args) -> "OdArray< OdGsPageParams > &":
        return _ODA_Kernel_Py3.PDFExportParams_pageParams(self, *args)

    def setBackground(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setBackground(self, *args)

    def background(self, *args) -> "ODCOLORREF":
        return _ODA_Kernel_Py3.PDFExportParams_background(self, *args)

    def setPalette(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setPalette(self, *args)

    def palette(self, *args) -> "ODCOLORREF const *":
        return _ODA_Kernel_Py3.PDFExportParams_palette(self, *args)

    def setGeomDPI(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setGeomDPI(self, *args)

    def getGeomDPI(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.PDFExportParams_getGeomDPI(self, *args)

    def setHatchDPI(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setHatchDPI(self, *args)

    def hatchDPI(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.PDFExportParams_hatchDPI(self, *args)

    def setColorImagesDPI(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setColorImagesDPI(self, *args)

    def colorImagesDPI(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.PDFExportParams_colorImagesDPI(self, *args)

    def setBWImagesDPI(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setBWImagesDPI(self, *args)

    def bwImagesDPI(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.PDFExportParams_bwImagesDPI(self, *args)

    def setTitle(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setTitle(self, *args)

    def title(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.PDFExportParams_title(self, *args)

    def setAuthor(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setAuthor(self, *args)

    def author(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.PDFExportParams_author(self, *args)

    def setSubject(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setSubject(self, *args)

    def subject(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.PDFExportParams_subject(self, *args)

    def setKeywords(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setKeywords(self, *args)

    def keywords(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.PDFExportParams_keywords(self, *args)

    def setCreator(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setCreator(self, *args)

    def creator(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.PDFExportParams_creator(self, *args)

    def setProducer(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setProducer(self, *args)

    def producer(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.PDFExportParams_producer(self, *args)

    def setSolidHatchesExportType(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setSolidHatchesExportType(self, *args)

    def solidHatchesExportType(self, *args) -> "TD_PDF_2D_EXPORT::PDFExportParams::ExportHatchesType":
        return _ODA_Kernel_Py3.PDFExportParams_solidHatchesExportType(self, *args)

    def setOtherHatchesExportType(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setOtherHatchesExportType(self, *args)

    def otherHatchesExportType(self, *args) -> "TD_PDF_2D_EXPORT::PDFExportParams::ExportHatchesType":
        return _ODA_Kernel_Py3.PDFExportParams_otherHatchesExportType(self, *args)

    def setGradientHatchesExportType(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setGradientHatchesExportType(self, *args)

    def gradientHatchesExportType(self, *args) -> "TD_PDF_2D_EXPORT::PDFExportParams::ExportHatchesType":
        return _ODA_Kernel_Py3.PDFExportParams_gradientHatchesExportType(self, *args)

    def imageCropping(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFExportParams_imageCropping(self, *args)

    def setImageCropping(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setImageCropping(self, *args)

    def dctQuality(self, *args) -> "OdUInt16":
        return _ODA_Kernel_Py3.PDFExportParams_dctQuality(self, *args)

    def setDCTQuality(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setDCTQuality(self, *args)

    def useViewExtents(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFExportParams_useViewExtents(self, *args)

    def setUseViewExtents(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setUseViewExtents(self, *args)

    def dctCompression(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFExportParams_dctCompression(self, *args)

    def setDCTCompression(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setDCTCompression(self, *args)

    def upscaleImages(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFExportParams_upscaleImages(self, *args)

    def setUpscaleImages(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setUpscaleImages(self, *args)

    def setTransparentShadedVpBg(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setTransparentShadedVpBg(self, *args)

    def transparentShadedVpBg(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFExportParams_transparentShadedVpBg(self, *args)

    def setForceDisableGsDevice(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setForceDisableGsDevice(self, *args)

    def forceDisableGsDevice(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFExportParams_forceDisableGsDevice(self, *args)

    def setShadedVpExportMode(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setShadedVpExportMode(self, *args)

    def shadedVpExportMode(self, *args) -> "TD_PDF_2D_EXPORT::PDFExportParams::PDFShadedViewportExportMode":
        return _ODA_Kernel_Py3.PDFExportParams_shadedVpExportMode(self, *args)

    def setPRCCompression(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setPRCCompression(self, *args)

    def exportReactor(self, *args) -> "TD_PDF_2D_EXPORT::PdfExportReactor *":
        return _ODA_Kernel_Py3.PDFExportParams_exportReactor(self, *args)

    def setExportReactor(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setExportReactor(self, *args)

    def export2XObject(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFExportParams_export2XObject(self, *args)

    def setExport2XObject(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setExport2XObject(self, *args)

    def addWatermark(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_addWatermark(self, *args)

    def watermarks(self, *args) -> "OdArray< TD_PDF_2D_EXPORT::Watermark > const &":
        return _ODA_Kernel_Py3.PDFExportParams_watermarks(self, *args)

    def clearWatermarks(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_clearWatermarks(self, *args)

    def clearMultipleDbSettings(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_clearMultipleDbSettings(self, *args)

    def useGsCache(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFExportParams_useGsCache(self, *args)

    def setUseGsCache(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setUseGsCache(self, *args)

    def isParallelVectorization(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFExportParams_isParallelVectorization(self, *args)

    def setParallelVectorization(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setParallelVectorization(self, *args)

    def isParallelDisplay(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFExportParams_isParallelDisplay(self, *args)

    def setParallelDisplay(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setParallelDisplay(self, *args)

    def setUsePdfBlocks(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setUsePdfBlocks(self, *args)

    def isUsePdfBlocks(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFExportParams_isUsePdfBlocks(self, *args)

    def searchableTextAsHiddenText(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFExportParams_searchableTextAsHiddenText(self, *args)

    def searchableTextInRenderedViews(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFExportParams_searchableTextInRenderedViews(self, *args)

    def setSearchableTextAsHiddenText(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setSearchableTextAsHiddenText(self, *args)

    def setSearchableTextInRenderedViews(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setSearchableTextInRenderedViews(self, *args)

    def isTTFTextAsGeometry(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFExportParams_isTTFTextAsGeometry(self, *args)

    def isSHXTextAsGeometry(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDFExportParams_isSHXTextAsGeometry(self, *args)

    def setUserPassword(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setUserPassword(self, *args)

    def userPassword(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.PDFExportParams_userPassword(self, *args)

    def setOwnerPassword(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setOwnerPassword(self, *args)

    def ownerPassword(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.PDFExportParams_ownerPassword(self, *args)

    def setAccessPermissionFlags(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDFExportParams_setAccessPermissionFlags(self, *args)

    def accessPermissionFlags(self, *args) -> "TD_PDF_2D_EXPORT::PDFExportParams::PDFAccessPermissionsFlags":
        return _ODA_Kernel_Py3.PDFExportParams_accessPermissionFlags(self, *args)
    m_reserved1 = property(_ODA_Kernel_Py3.PDFExportParams_m_reserved1_get, _ODA_Kernel_Py3.PDFExportParams_m_reserved1_set)

# Register PDFExportParams in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDFExportParams_swigregister(PDFExportParams)

class PDF2PRCExportParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_extraOptions = property(_ODA_Kernel_Py3.PDF2PRCExportParams_m_extraOptions_get, _ODA_Kernel_Py3.PDF2PRCExportParams_m_extraOptions_set)
    m_compressionLevel = property(_ODA_Kernel_Py3.PDF2PRCExportParams_m_compressionLevel_get, _ODA_Kernel_Py3.PDF2PRCExportParams_m_compressionLevel_set)
    m_bodyTransformationMatr = property(_ODA_Kernel_Py3.PDF2PRCExportParams_m_bodyTransformationMatr_get, _ODA_Kernel_Py3.PDF2PRCExportParams_m_bodyTransformationMatr_set)
    m_arrDeviation = property(_ODA_Kernel_Py3.PDF2PRCExportParams_m_arrDeviation_get, _ODA_Kernel_Py3.PDF2PRCExportParams_m_arrDeviation_set)
    m_exportAsBrep = property(_ODA_Kernel_Py3.PDF2PRCExportParams_m_exportAsBrep_get, _ODA_Kernel_Py3.PDF2PRCExportParams_m_exportAsBrep_set)
    m_viewportIdx = property(_ODA_Kernel_Py3.PDF2PRCExportParams_m_viewportIdx_get, _ODA_Kernel_Py3.PDF2PRCExportParams_m_viewportIdx_set)
    m_viewIdx = property(_ODA_Kernel_Py3.PDF2PRCExportParams_m_viewIdx_get, _ODA_Kernel_Py3.PDF2PRCExportParams_m_viewIdx_set)
    m_pTraitsData = property(_ODA_Kernel_Py3.PDF2PRCExportParams_m_pTraitsData_get, _ODA_Kernel_Py3.PDF2PRCExportParams_m_pTraitsData_set)
    m_pByBlockTraitsData = property(_ODA_Kernel_Py3.PDF2PRCExportParams_m_pByBlockTraitsData_get, _ODA_Kernel_Py3.PDF2PRCExportParams_m_pByBlockTraitsData_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.PDF2PRCExportParams_swiginit(self, _ODA_Kernel_Py3.new_PDF2PRCExportParams(*args))

    def setPRCCompression(self, *args) -> "void":
        return _ODA_Kernel_Py3.PDF2PRCExportParams_setPRCCompression(self, *args)

    def hasPrcBrepCompression(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDF2PRCExportParams_hasPrcBrepCompression(self, *args)

    def hasPrcTessellationCompression(self, *args) -> "bool":
        return _ODA_Kernel_Py3.PDF2PRCExportParams_hasPrcTessellationCompression(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PDF2PRCExportParams

# Register PDF2PRCExportParams in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PDF2PRCExportParams_swigregister(PDF2PRCExportParams)

exOk = _ODA_Kernel_Py3.exOk
exInternalError = _ODA_Kernel_Py3.exInternalError
exHugeShxFont = _ODA_Kernel_Py3.exHugeShxFont
exInvalidPageParams = _ODA_Kernel_Py3.exInvalidPageParams
exNullOutputStream = _ODA_Kernel_Py3.exNullOutputStream
exLayoutNotFound = _ODA_Kernel_Py3.exLayoutNotFound
exNullDatabase = _ODA_Kernel_Py3.exNullDatabase
exUnsupportedVersion = _ODA_Kernel_Py3.exUnsupportedVersion
exWrongNumberOfPages = _ODA_Kernel_Py3.exWrongNumberOfPages
exCannotRestorePaperFromLayout = _ODA_Kernel_Py3.exCannotRestorePaperFromLayout
exCannotFillFontDescriptor = _ODA_Kernel_Py3.exCannotFillFontDescriptor
exCannotOpenOverallVport = _ODA_Kernel_Py3.exCannotOpenOverallVport
exBadViewExtents = _ODA_Kernel_Py3.exBadViewExtents
exLayersRequired_v15 = _ODA_Kernel_Py3.exLayersRequired_v15
exInvalidImageDPI = _ODA_Kernel_Py3.exInvalidImageDPI
exCannotStartPrcEngine = _ODA_Kernel_Py3.exCannotStartPrcEngine
exUseHLRConflictedWithEnablePRC = _ODA_Kernel_Py3.exUseHLRConflictedWithEnablePRC
exPrcRequired_v16 = _ODA_Kernel_Py3.exPrcRequired_v16
exPdfExportServiceMissed = _ODA_Kernel_Py3.exPdfExportServiceMissed
exOdError = _ODA_Kernel_Py3.exOdError
exLastErrorNum = _ODA_Kernel_Py3.exLastErrorNum

def odCreatePrcAllInSingleViewContextForTD(*args) -> "OdRxObjectPtr":
    return _ODA_Kernel_Py3.odCreatePrcAllInSingleViewContextForTD(*args)

def odCreatePrcOnlySolidsMultiViewContextForTD(*args) -> "OdRxObjectPtr":
    return _ODA_Kernel_Py3.odCreatePrcOnlySolidsMultiViewContextForTD(*args)

def odCreatePrcOnlySolidsSingleViewContextForTD(*args) -> "OdRxObjectPtr":
    return _ODA_Kernel_Py3.odCreatePrcOnlySolidsSingleViewContextForTD(*args)

def odCreatePrcDefaultContextForTD(*args) -> "OdRxObjectPtr":
    return _ODA_Kernel_Py3.odCreatePrcDefaultContextForTD(*args)

def odCreatePrcAllInSingleViewContextForDGN(*args) -> "OdRxObjectPtr":
    return _ODA_Kernel_Py3.odCreatePrcAllInSingleViewContextForDGN(*args)

def odCreatePrcAllInSingleViewContextForBIM(*args) -> "OdRxObjectPtr":
    return _ODA_Kernel_Py3.odCreatePrcAllInSingleViewContextForBIM(*args)
class PdfExportServiceInterface(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< PdfExportServiceInterface >":
        return _ODA_Kernel_Py3.PdfExportServiceInterface_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.PdfExportServiceInterface_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.PdfExportServiceInterface_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.PdfExportServiceInterface_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< PdfExportServiceInterface >":
        return _ODA_Kernel_Py3.PdfExportServiceInterface_createObject(*args)

    def createPrcExportContext(self, *args) -> "OdRxObjectPtr":
        return _ODA_Kernel_Py3.PdfExportServiceInterface_createPrcExportContext(self, *args)

    def exportPrc(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.PdfExportServiceInterface_exportPrc(self, *args)

    def serialize(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.PdfExportServiceInterface_serialize(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PdfExportServiceInterface

# Register PdfExportServiceInterface in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PdfExportServiceInterface_swigregister(PdfExportServiceInterface)

def PdfExportServiceInterface_cast(*args) -> "OdSmartPtr< PdfExportServiceInterface >":
    return _ODA_Kernel_Py3.PdfExportServiceInterface_cast(*args)

def PdfExportServiceInterface_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.PdfExportServiceInterface_desc(*args)

def PdfExportServiceInterface_createObject(*args) -> "OdSmartPtr< PdfExportServiceInterface >":
    return _ODA_Kernel_Py3.PdfExportServiceInterface_createObject(*args)


def getPdfExportService(*args) -> "PdfExportServiceInterfacePtr":
    return _ODA_Kernel_Py3.getPdfExportService(*args)
class OdPdfExportPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< TD_PDF_2D_EXPORT::OdPdfExportPE >":
        return _ODA_Kernel_Py3.OdPdfExportPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdPdfExportPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdPdfExportPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdPdfExportPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< TD_PDF_2D_EXPORT::OdPdfExportPE >":
        return _ODA_Kernel_Py3.OdPdfExportPE_createObject(*args)

    def createGiContext(self, *args) -> "OdGiDefaultContextPtr":
        return _ODA_Kernel_Py3.OdPdfExportPE_createGiContext(self, *args)

    def createAuxDrawables(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPdfExportPE_createAuxDrawables(self, *args)

    def filterDrawables(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPdfExportPE_filterDrawables(self, *args)

    def applyPagesetupToLayout(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPdfExportPE_applyPagesetupToLayout(self, *args)

    def addDrawables(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPdfExportPE_addDrawables(self, *args)

    def evaluateFields(self, *args) -> "void":
        return _ODA_Kernel_Py3.OdPdfExportPE_evaluateFields(self, *args)

    def gsBitmapDevices(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.OdPdfExportPE_gsBitmapDevices(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdPdfExportPE

# Register OdPdfExportPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdPdfExportPE_swigregister(OdPdfExportPE)

def OdPdfExportPE_cast(*args) -> "OdSmartPtr< TD_PDF_2D_EXPORT::OdPdfExportPE >":
    return _ODA_Kernel_Py3.OdPdfExportPE_cast(*args)

def OdPdfExportPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdPdfExportPE_desc(*args)

def OdPdfExportPE_createObject(*args) -> "OdSmartPtr< TD_PDF_2D_EXPORT::OdPdfExportPE >":
    return _ODA_Kernel_Py3.OdPdfExportPE_createObject(*args)

class PdfExportParamsForXObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.PdfExportParamsForXObject_swiginit(self, _ODA_Kernel_Py3.new_PdfExportParamsForXObject(*args))
    m_pCurrentPage = property(_ODA_Kernel_Py3.PdfExportParamsForXObject_m_pCurrentPage_get, _ODA_Kernel_Py3.PdfExportParamsForXObject_m_pCurrentPage_set)
    m_pXobjectForm = property(_ODA_Kernel_Py3.PdfExportParamsForXObject_m_pXobjectForm_get, _ODA_Kernel_Py3.PdfExportParamsForXObject_m_pXobjectForm_set)
    m_FontOptimizer = property(_ODA_Kernel_Py3.PdfExportParamsForXObject_m_FontOptimizer_get, _ODA_Kernel_Py3.PdfExportParamsForXObject_m_FontOptimizer_set)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PdfExportParamsForXObject

# Register PdfExportParamsForXObject in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PdfExportParamsForXObject_swigregister(PdfExportParamsForXObject)

class PdfExportGiDrawablePE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< PdfExportGiDrawablePE >":
        return _ODA_Kernel_Py3.PdfExportGiDrawablePE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.PdfExportGiDrawablePE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.PdfExportGiDrawablePE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.PdfExportGiDrawablePE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< PdfExportGiDrawablePE >":
        return _ODA_Kernel_Py3.PdfExportGiDrawablePE_createObject(*args)

    def drawableToPRC(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.PdfExportGiDrawablePE_drawableToPRC(self, *args)

    def getColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.PdfExportGiDrawablePE_getColor(self, *args)

    def getMaterial(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.PdfExportGiDrawablePE_getMaterial(self, *args)

    def getTransparency(self, *args) -> "OdCmTransparency":
        return _ODA_Kernel_Py3.PdfExportGiDrawablePE_getTransparency(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PdfExportGiDrawablePE

# Register PdfExportGiDrawablePE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PdfExportGiDrawablePE_swigregister(PdfExportGiDrawablePE)

def PdfExportGiDrawablePE_cast(*args) -> "OdSmartPtr< PdfExportGiDrawablePE >":
    return _ODA_Kernel_Py3.PdfExportGiDrawablePE_cast(*args)

def PdfExportGiDrawablePE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.PdfExportGiDrawablePE_desc(*args)

def PdfExportGiDrawablePE_createObject(*args) -> "OdSmartPtr< PdfExportGiDrawablePE >":
    return _ODA_Kernel_Py3.PdfExportGiDrawablePE_createObject(*args)

class PdfExportLayerPE(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< PdfExportLayerPE >":
        return _ODA_Kernel_Py3.PdfExportLayerPE_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.PdfExportLayerPE_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.PdfExportLayerPE_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.PdfExportLayerPE_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< PdfExportLayerPE >":
        return _ODA_Kernel_Py3.PdfExportLayerPE_createObject(*args)

    def getColor(self, *args) -> "OdCmEntityColor":
        return _ODA_Kernel_Py3.PdfExportLayerPE_getColor(self, *args)

    def getMaterial(self, *args) -> "OdDbStub *":
        return _ODA_Kernel_Py3.PdfExportLayerPE_getMaterial(self, *args)

    def getTransparency(self, *args) -> "OdCmTransparency":
        return _ODA_Kernel_Py3.PdfExportLayerPE_getTransparency(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PdfExportLayerPE

# Register PdfExportLayerPE in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PdfExportLayerPE_swigregister(PdfExportLayerPE)

def PdfExportLayerPE_cast(*args) -> "OdSmartPtr< PdfExportLayerPE >":
    return _ODA_Kernel_Py3.PdfExportLayerPE_cast(*args)

def PdfExportLayerPE_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.PdfExportLayerPE_desc(*args)

def PdfExportLayerPE_createObject(*args) -> "OdSmartPtr< PdfExportLayerPE >":
    return _ODA_Kernel_Py3.PdfExportLayerPE_createObject(*args)

class OdPdfExport(OdRxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def cast(*args) -> "OdSmartPtr< TD_PDF_2D_EXPORT::OdPdfExport >":
        return _ODA_Kernel_Py3.OdPdfExport_cast(*args)

    @staticmethod
    def desc(*args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdPdfExport_desc(*args)

    def isA(self, *args) -> "OdRxClass *":
        return _ODA_Kernel_Py3.OdPdfExport_isA(self, *args)

    def queryX(self, *args) -> "OdRxObject *":
        return _ODA_Kernel_Py3.OdPdfExport_queryX(self, *args)

    @staticmethod
    def createObject(*args) -> "OdSmartPtr< TD_PDF_2D_EXPORT::OdPdfExport >":
        return _ODA_Kernel_Py3.OdPdfExport_createObject(*args)

    def exportPdf(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdPdfExport_exportPdf(self, *args)

    def exportPdfErrorCode(self, *args) -> "OdString":
        return _ODA_Kernel_Py3.OdPdfExport_exportPdfErrorCode(self, *args)

    def publish3d(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdPdfExport_publish3d(self, *args)

    def export2XObject(self, *args) -> "OdUInt32":
        return _ODA_Kernel_Py3.OdPdfExport_export2XObject(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdPdfExport

# Register OdPdfExport in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdPdfExport_swigregister(OdPdfExport)

def OdPdfExport_cast(*args) -> "OdSmartPtr< TD_PDF_2D_EXPORT::OdPdfExport >":
    return _ODA_Kernel_Py3.OdPdfExport_cast(*args)

def OdPdfExport_desc(*args) -> "OdRxClass *":
    return _ODA_Kernel_Py3.OdPdfExport_desc(*args)

def OdPdfExport_createObject(*args) -> "OdSmartPtr< TD_PDF_2D_EXPORT::OdPdfExport >":
    return _ODA_Kernel_Py3.OdPdfExport_createObject(*args)

class PdfExportModule(OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PdfExportModule

# Register PdfExportModule in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PdfExportModule_swigregister(PdfExportModule)

class PdfExceptionEx(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_uErrorCode = property(_ODA_Kernel_Py3.PdfExceptionEx_m_uErrorCode_get, _ODA_Kernel_Py3.PdfExceptionEx_m_uErrorCode_set)

    def __init__(self, *args):
        _ODA_Kernel_Py3.PdfExceptionEx_swiginit(self, _ODA_Kernel_Py3.new_PdfExceptionEx(*args))
    __swig_destroy__ = _ODA_Kernel_Py3.delete_PdfExceptionEx

# Register PdfExceptionEx in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.PdfExceptionEx_swigregister(PdfExceptionEx)

class OdStlExportParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ODA_Kernel_Py3.OdStlExportParams_swiginit(self, _ODA_Kernel_Py3.new_OdStlExportParams(*args))

    def setDatabase(self, *args) -> "TD_STL_EXPORT::OdStlExportParams &":
        return _ODA_Kernel_Py3.OdStlExportParams_setDatabase(self, *args)

    def setEntity(self, *args) -> "TD_STL_EXPORT::OdStlExportParams &":
        return _ODA_Kernel_Py3.OdStlExportParams_setEntity(self, *args)

    def setStream(self, *args) -> "TD_STL_EXPORT::OdStlExportParams &":
        return _ODA_Kernel_Py3.OdStlExportParams_setStream(self, *args)

    def setDeviation(self, *args) -> "TD_STL_EXPORT::OdStlExportParams &":
        return _ODA_Kernel_Py3.OdStlExportParams_setDeviation(self, *args)

    def setPositiveOctant(self, *args) -> "TD_STL_EXPORT::OdStlExportParams &":
        return _ODA_Kernel_Py3.OdStlExportParams_setPositiveOctant(self, *args)

    def setTextMode(self, *args) -> "TD_STL_EXPORT::OdStlExportParams &":
        return _ODA_Kernel_Py3.OdStlExportParams_setTextMode(self, *args)

    def setCorrectSolid(self, *args) -> "TD_STL_EXPORT::OdStlExportParams &":
        return _ODA_Kernel_Py3.OdStlExportParams_setCorrectSolid(self, *args)

    def setUseColors(self, *args) -> "TD_STL_EXPORT::OdStlExportParams &":
        return _ODA_Kernel_Py3.OdStlExportParams_setUseColors(self, *args)

    def setPalette(self, *args) -> "TD_STL_EXPORT::OdStlExportParams &":
        return _ODA_Kernel_Py3.OdStlExportParams_setPalette(self, *args)

    def database(self, *args) -> "OdDbBaseDatabase &":
        return _ODA_Kernel_Py3.OdStlExportParams_database(self, *args)

    def entity(self, *args) -> "OdGiDrawable const &":
        return _ODA_Kernel_Py3.OdStlExportParams_entity(self, *args)

    def stream(self, *args) -> "OdStreamBuf &":
        return _ODA_Kernel_Py3.OdStlExportParams_stream(self, *args)

    def deviation(self, *args) -> "double":
        return _ODA_Kernel_Py3.OdStlExportParams_deviation(self, *args)

    def positiveOctant(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdStlExportParams_positiveOctant(self, *args)

    def textMode(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdStlExportParams_textMode(self, *args)

    def correctSolid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdStlExportParams_correctSolid(self, *args)

    def useColors(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdStlExportParams_useColors(self, *args)

    def palette(self, *args) -> "ODCOLORREF const *":
        return _ODA_Kernel_Py3.OdStlExportParams_palette(self, *args)

    def isValid(self, *args) -> "bool":
        return _ODA_Kernel_Py3.OdStlExportParams_isValid(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_OdStlExportParams

# Register OdStlExportParams in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.OdStlExportParams_swigregister(OdStlExportParams)

class STLModule(OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def exportSTL(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.STLModule_exportSTL(self, *args)

    def exportSTLEx(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.STLModule_exportSTLEx(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_STLModule

# Register STLModule in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.STLModule_swigregister(STLModule)

class ThreejsJSONModule(OdRxModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def exportThreejsJSON(self, *args) -> "OdResult":
        return _ODA_Kernel_Py3.ThreejsJSONModule_exportThreejsJSON(self, *args)
    __swig_destroy__ = _ODA_Kernel_Py3.delete_ThreejsJSONModule

# Register ThreejsJSONModule in _ODA_Kernel_Py3:
_ODA_Kernel_Py3.ThreejsJSONModule_swigregister(ThreejsJSONModule)



